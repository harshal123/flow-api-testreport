{
  "stats": {
    "suites": 742,
    "tests": 1384,
    "passes": 1384,
    "pending": 0,
    "failures": 0,
    "start": "2018-10-17T09:50:19.449Z",
    "end": "2018-10-17T10:09:06.967Z",
    "duration": 1127518,
    "testsRegistered": 1384,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "2c769335-b3ca-4b86-bc21-098da438aeaa",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "33b8c304-4bbe-4cba-9541-dbeb686a8491",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\activity\\listActivities.enterprise.js",
        "file": "\\controllers\\test\\activity\\listActivities.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "c89bf7fb-538a-460a-8fab-fd2466ad3173",
            "title": "Activity.ListActivities",
            "fullFile": "D:\\api\\controllers\\test\\activity\\listActivities.enterprise.js",
            "file": "\\controllers\\test\\activity\\listActivities.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Activity.ListActivities \"before all\" hook",
                "timedOut": false,
                "duration": 3727,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\n_models.User.remove({ email: testData.testRegistrationBody.email }, function(error, user) {\n    api.post(\"/enterprise/v1/signup\")\n        .send(testData.testRegistrationBody)\n        .expect(httpStatus.CREATED)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                dummyUser = res.body.output;\n                done();\n            }\n        });\n});",
                "err": {},
                "isRoot": false,
                "uuid": "3eb0cae7-6d74-4aaf-a675-dd94e2efcc0d",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Activity.ListActivities Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "872a087f-933a-4778-8133-7ba5f280aa7c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of \"all\" activities.",
                "fullTitle": "Enterprise Activity.ListActivities Should get list of \"all\" activities.",
                "timedOut": false,
                "duration": 2377,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.should.be.instanceOf(Array);\n            expect(_.first(res.body.output)).not.to.have.all.keys(['_id', '__v']);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "59d138f5-9a0c-4068-ac0d-38093b2415a0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of \"category\" activities.",
                "fullTitle": "Enterprise Activity.ListActivities Should get list of \"category\" activities.",
                "timedOut": false,
                "duration": 2458,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + '?type=category')\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(_.first(res.body.output)).to.be.all.keys(['_id', 'act']);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "926e5836-8de9-4419-9cc2-00b99e547f4e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of \"category\" activities.",
                "fullTitle": "Enterprise Activity.ListActivities Should get list of \"category\" activities.",
                "timedOut": false,
                "duration": 44,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + '?type=condition')\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output.name).to.be.equal('condition');\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "60247d0a-a78c-4729-899d-f5922443cd23",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of \"searchAuth\" activities.",
                "fullTitle": "Enterprise Activity.ListActivities Should get list of \"searchAuth\" activities.",
                "timedOut": false,
                "duration": 2268,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + '?type=searchAuth')\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output).to.be.Array;\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "5ad87f2c-f0dc-4484-bacc-ec044d4e2eca",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "872a087f-933a-4778-8133-7ba5f280aa7c",
              "59d138f5-9a0c-4068-ac0d-38093b2415a0",
              "926e5836-8de9-4419-9cc2-00b99e547f4e",
              "60247d0a-a78c-4729-899d-f5922443cd23",
              "5ad87f2c-f0dc-4484-bacc-ec044d4e2eca"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 7167,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "813f436c-cf64-4a27-96a1-41e7a9dbec25",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\activity\\searchActivities.enterprise.js",
        "file": "\\controllers\\test\\activity\\searchActivities.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "6c2ef41e-8b0e-45f7-a247-ffac18ff1582",
            "title": "Activity.SearchActivities",
            "fullFile": "D:\\api\\controllers\\test\\activity\\searchActivities.enterprise.js",
            "file": "\\controllers\\test\\activity\\searchActivities.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Activity.SearchActivities \"before all\" hook",
                "timedOut": false,
                "duration": 2714,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\n_models.User.remove({ email: testData.testRegistrationBody.email }, function(error, user) {\n    api.post(\"/enterprise/v1/signup\")\n        .send(testData.testRegistrationBody)\n        .expect(httpStatus.CREATED)\n        .end(function(err, res) {\n            if (err) {\n                //console.log('err', err)\n                done(err);\n            } else {\n                dummyUser = res.body.output;\n                done();\n            }\n        });\n});",
                "err": {},
                "isRoot": false,
                "uuid": "dadd51c9-be5d-4a94-a2dd-7f5050145bce",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should get list of \"search\" param activities.",
                "fullTitle": "Enterprise Activity.SearchActivities Should get list of \"search\" param activities.",
                "timedOut": false,
                "duration": 40,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .send({ search: 'test' })\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.should.be.instanceOf(Array);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "9cf3196c-9f02-4f25-9602-28a23dc66ba1",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9cf3196c-9f02-4f25-9602-28a23dc66ba1"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 40,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "3a883bc1-039f-4370-91d3-05fe1b6aef37",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\activityBuilder\\validateCode.enterprise.js",
        "file": "\\controllers\\test\\activityBuilder\\validateCode.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "d412bf1b-07b9-468b-9b54-47b7c57cac53",
            "title": "ActivityBuilder.Validate",
            "fullFile": "D:\\api\\controllers\\test\\activityBuilder\\validateCode.enterprise.js",
            "file": "\\controllers\\test\\activityBuilder\\validateCode.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise ActivityBuilder.Validate \"before all\" hook",
                "timedOut": false,
                "duration": 2559,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(userTrigger, cbk) {\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        dummyUser = res.body.output;\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "2820ce00-ac91-4196-9cf8-b07cfa604d7e",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise ActivityBuilder.Validate Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "0e41a53d-d391-40c7-83da-1c9ae69a8174",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should give error, if \"code\" is not having value as string.",
                "fullTitle": "Enterprise ActivityBuilder.Validate Should give error, if \"code\" is not having value as string.",
                "timedOut": false,
                "duration": 40,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar invalidCodeKey = { code: {} }\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(invalidCodeKey)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.INVALID_CODE_KEY);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "d4bf1e7b-7e3d-427f-812a-0c07e8519271",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should give error, if json schema has invalid keys like \"input\", \"output\", \"execute\".",
                "fullTitle": "Enterprise ActivityBuilder.Validate Should give error, if json schema has invalid keys like \"input\", \"output\", \"execute\".",
                "timedOut": false,
                "duration": 49,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(invalidJsonForKeys)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.status.should.equal('failed');\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "c44656ce-83bd-4502-8b1e-9bd2417089e9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should give error, if json schema has invalid schema.",
                "fullTitle": "Enterprise ActivityBuilder.Validate Should give error, if json schema has invalid schema.",
                "timedOut": false,
                "duration": 38,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(invalidJsonSchema)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.status.should.equal('failed');\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "16915af5-6456-4aad-93ab-2fed6c1353fb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should give error, if data is string.",
                "fullTitle": "Enterprise ActivityBuilder.Validate Should give error, if data is string.",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(\"\")\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal('Code key should be of type string.');\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "2db12511-337e-4cb0-a9fe-9070d9acd67f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should be valid, if passed json schema is valid.",
                "fullTitle": "Enterprise ActivityBuilder.Validate Should be valid, if passed json schema is valid.",
                "timedOut": false,
                "duration": 38,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar invalidCodeKey = { code: {} }\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(validJson)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.status.should.equal('passed');\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "3fc77fc2-ed89-4f37-8a9e-90ed9350859f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0e41a53d-d391-40c7-83da-1c9ae69a8174",
              "d4bf1e7b-7e3d-427f-812a-0c07e8519271",
              "c44656ce-83bd-4502-8b1e-9bd2417089e9",
              "16915af5-6456-4aad-93ab-2fed6c1353fb",
              "2db12511-337e-4cb0-a9fe-9070d9acd67f",
              "3fc77fc2-ed89-4f37-8a9e-90ed9350859f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 210,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "50d66237-a7f2-444c-b38b-dab9bfe5bd47",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\addOn\\addAddOn.enterprise.js",
        "file": "\\controllers\\test\\addOn\\addAddOn.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "77eddb33-fe42-4235-bde0-4d245cb53a83",
            "title": "AddOn",
            "fullFile": "D:\\api\\controllers\\test\\addOn\\addAddOn.enterprise.js",
            "file": "\\controllers\\test\\addOn\\addAddOn.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "32c6060c-dffa-42d2-a778-6e1e43164056",
                "title": "AddOn.addAddOn",
                "fullFile": "D:\\api\\controllers\\test\\addOn\\addAddOn.enterprise.js",
                "file": "\\controllers\\test\\addOn\\addAddOn.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise AddOn AddOn.addAddOn \"before each\" hook",
                    "timedOut": false,
                    "duration": 53,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.createFlowUser({}, function(error, user) {\n        if (error) {\n            done(error);\n        } else {\n            authToken = user.authtoken;\n            token = user.activation_token;\n            _id = user._id;\n            user_uid = user.uid;\n            saveAddOns({\n                    authtoken: authToken,\n                    user_uid: user_uid\n                },\n                function(error, addOns) {\n                    savedAddOns = addOns;\n                    done();\n                });\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "83e3a37f-04c4-476b-ac37-c1e3dfe965d6",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise AddOn AddOn.addAddOn \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ae0a0c7f-c62e-48a6-8481-e8ae43ef7979",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should apply addon.",
                    "fullTitle": "Enterprise AddOn AddOn.addAddOn Should apply addon.",
                    "timedOut": false,
                    "duration": 352,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napplyAddOn(httpmock, function(error) {\n    if (error) {\n        false.should.equal(true);\n        done();\n    } else {\n        commonMock.braintreeTransaction(httpmock, \"enterprise\");\n        api.post(apiURL)\n            .set('authtoken', authToken)\n            .send({})\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    res.body.output.message.should.equal(messageList.ADDON_APPLY_SUCCESS);\n                    done();\n                }\n            });\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "eaba89a3-ff4a-462e-8b8c-aeeafbb17d2a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise AddOn AddOn.addAddOn Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .send({})\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "07b3ef66-3f2d-4dc7-a221-d808e50adf4c",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "eaba89a3-ff4a-462e-8b8c-aeeafbb17d2a",
                  "07b3ef66-3f2d-4dc7-a221-d808e50adf4c"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 362,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "a71b458e-dbe6-4055-bd98-2fa5993e39f5",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\addOn\\addAddOnOrg.enterprise.js",
        "file": "\\controllers\\test\\addOn\\addAddOnOrg.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "fdab29de-259d-462d-9539-404e72945fb2",
            "title": "AddOn",
            "fullFile": "D:\\api\\controllers\\test\\addOn\\addAddOnOrg.enterprise.js",
            "file": "\\controllers\\test\\addOn\\addAddOnOrg.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "9ad5854d-0096-4489-b04a-59bca1152722",
                "title": "AddOn.addAddOnOrg",
                "fullFile": "D:\\api\\controllers\\test\\addOn\\addAddOnOrg.enterprise.js",
                "file": "\\controllers\\test\\addOn\\addAddOnOrg.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise AddOn AddOn.addAddOnOrg \"before each\" hook",
                    "timedOut": false,
                    "duration": 222,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        _data = data;\n        saveAddOns({\n                authtoken: authToken,\n                user_uid: user_uid\n            },\n            function(error, addOns) {\n                savedAddOns = addOns;\n                done();\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "60e8fd65-4320-4112-9e1d-2946013d57e0",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise AddOn AddOn.addAddOnOrg \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "39aac8dc-82d4-463b-b1f7-4ebc27ce38c5",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should apply addon.",
                    "fullTitle": "Enterprise AddOn AddOn.addAddOnOrg Should apply addon.",
                    "timedOut": false,
                    "duration": 385,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napplyAddOn({\n    httpmock: httpmock,\n    authToken: authToken\n}, function(error) {\n    if (error) {\n        false.should.equal(true);\n        done();\n    } else {\n        commonMock.braintreeTransaction(httpmock, \"enterprise\");\n        api.post(apiURL)\n            .set('org_uid', org_uid)\n            .set('authtoken', authToken)\n            .send({})\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    if (res.body.output.message == messageList.ADDON_APPLY_SUCCESS) {\n                        _models.User.findOne({ uid: org_account_uid }, function(error, user) {\n                            user.allocated_credits.should.equal(credits + 1000);\n                            done();\n                        });\n                    } else {\n                        true.should.equal(false);\n                        done();\n                    }\n                }\n            });\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "03aa90fb-e8d5-401d-a3c7-a1d1e91d4ecb",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise AddOn AddOn.addAddOnOrg Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('org_uid', org_uid)\n    .send({})\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "72cfc2a9-266a-4a4c-8378-2e4c20ba0890",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "03aa90fb-e8d5-401d-a3c7-a1d1e91d4ecb",
                  "72cfc2a9-266a-4a4c-8378-2e4c20ba0890"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 394,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "dacc9b5e-0113-41eb-861f-d956ba50f769",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\addOn\\list.enterprise.js",
        "file": "\\controllers\\test\\addOn\\list.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "867f6c7b-bc65-4774-a143-aeae1320d508",
            "title": "AddOn",
            "fullFile": "D:\\api\\controllers\\test\\addOn\\list.enterprise.js",
            "file": "\\controllers\\test\\addOn\\list.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "9f46b1a5-19f0-4275-8277-477b77435555",
                "title": "AddOn.list",
                "fullFile": "D:\\api\\controllers\\test\\addOn\\list.enterprise.js",
                "file": "\\controllers\\test\\addOn\\list.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise AddOn AddOn.list \"before each\" hook",
                    "timedOut": false,
                    "duration": 39,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.createFlowUser({}, function(error, user) {\n        if (error) {\n            done(error);\n        } else {\n            authToken = user.authtoken;\n            token = user.activation_token;\n            _id = user._id;\n            user_uid = user.uid;\n            saveAddOns({\n                    authtoken: authToken,\n                    user_uid: user_uid\n                },\n                function(error, userLogs) {\n                    savedUserLogs = userLogs;\n                    done();\n                });\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e7da0697-3326-4fbf-89f9-a16d48247eea",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise AddOn AddOn.list \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "dfa03315-1e49-4b6a-a244-b4ee8d194402",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get list of plan addons.",
                    "fullTitle": "Enterprise AddOn AddOn.list Should get list of plan addons.",
                    "timedOut": false,
                    "duration": 150,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napplyPlan(httpmock, function(error, userPlanOutput) {\n    api.get(apiURL)\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                res.body.output.should.be.instanceOf(Array);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "67751e3c-55c9-4b20-b992-a0c56ee8d771",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise AddOn AddOn.list Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ff04050d-5070-48fe-be93-3cbb5c7422cf",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "67751e3c-55c9-4b20-b992-a0c56ee8d771",
                  "ff04050d-5070-48fe-be93-3cbb5c7422cf"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 161,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "021a9a8a-e0bc-4169-b660-b05f8836a529",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\addOn\\listOrg.enterprise.js",
        "file": "\\controllers\\test\\addOn\\listOrg.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "17082a2c-c387-4343-a839-4234c10e3f0f",
            "title": "AddOn",
            "fullFile": "D:\\api\\controllers\\test\\addOn\\listOrg.enterprise.js",
            "file": "\\controllers\\test\\addOn\\listOrg.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "cb5c86f1-21da-44c2-bab1-5659d855c541",
                "title": "AddOn.listOrg",
                "fullFile": "D:\\api\\controllers\\test\\addOn\\listOrg.enterprise.js",
                "file": "\\controllers\\test\\addOn\\listOrg.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise AddOn AddOn.listOrg \"before each\" hook",
                    "timedOut": false,
                    "duration": 202,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        _data = data;\n        saveAddOns({\n                authtoken: authToken,\n                user_uid: user_uid\n            },\n            function(error, addOns) {\n                savedAddOns = addOns;\n                done();\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a99da7f5-6569-4b47-b546-f392d1b711a4",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise AddOn AddOn.listOrg \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "aedffe8b-7e1f-4409-a3ba-6996e77193c4",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get list of plan addons.",
                    "fullTitle": "Enterprise AddOn AddOn.listOrg Should get list of plan addons.",
                    "timedOut": false,
                    "duration": 158,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napplyPlan(httpmock, function(error, userPlanOutput) {\n    api.get(apiURL)\n        .set('org_uid', org_uid)\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                res.body.output.should.be.instanceOf(Array);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "47213515-fd6a-45ab-a18b-7fcd9ef34e21",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise AddOn AddOn.listOrg Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "05dad6f6-7b93-432b-aec1-7a6cb7817294",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "47213515-fd6a-45ab-a18b-7fcd9ef34e21",
                  "05dad6f6-7b93-432b-aec1-7a6cb7817294"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 167,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "efd3ff57-530b-47fd-abc9-ffbaeac20d97",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\addOn\\selectAddOn.enterprise.js",
        "file": "\\controllers\\test\\addOn\\selectAddOn.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "8bd8764b-1614-4c47-b857-7814b5bafd1e",
            "title": "AddOn",
            "fullFile": "D:\\api\\controllers\\test\\addOn\\selectAddOn.enterprise.js",
            "file": "\\controllers\\test\\addOn\\selectAddOn.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "69d8e63a-0fd4-48c8-bbeb-81751044c677",
                "title": "AddOn.selectAddOn",
                "fullFile": "D:\\api\\controllers\\test\\addOn\\selectAddOn.enterprise.js",
                "file": "\\controllers\\test\\addOn\\selectAddOn.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise AddOn AddOn.selectAddOn \"before each\" hook",
                    "timedOut": false,
                    "duration": 56,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.createFlowUser({}, function(error, user) {\n        if (error) {\n            done(error);\n        } else {\n            authToken = user.authtoken;\n            token = user.activation_token;\n            _id = user._id;\n            user_uid = user.uid;\n            saveAddOns({\n                    authtoken: authToken,\n                    user_uid: user_uid\n                },\n                function(error, addOns) {\n                    savedAddOns = addOns;\n                    done();\n                });\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2e696c56-3091-418d-93a2-e2a758f60d9e",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise AddOn AddOn.selectAddOn \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f1a69bf1-36ef-4952-8a63-6ed393ee002b",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should apply addon.",
                    "fullTitle": "Enterprise AddOn AddOn.selectAddOn Should apply addon.",
                    "timedOut": false,
                    "duration": 198,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napplyPlan(httpmock, function(error, userPlanOutput) {\n    api.get(\"/enterprise/v1/addons\")\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                var addon_uid = _.first(res.body.output).uid;\n                api.put(apiURL)\n                    .set('authtoken', authToken)\n                    .send({\n                        \"addon_uid\": addon_uid\n                    })\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            if (res.body.output.message == messageList.ADDON_ASSIGNED) {\n                                api.get(\"/enterprise/v1/user\")\n                                    .set('authtoken', authToken)\n                                    .expect(httpStatus.OK)\n                                    .end(function(err, res) {\n                                        if (err) {\n                                            done(err);\n                                        } else {\n                                            res.body.output.addon_uid.should.equal(addon_uid);\n                                            done();\n                                        }\n                                    });\n                            } else {\n                                (true).should.equal(false);\n                                done();\n                            }\n                        }\n                    });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c1198210-83fc-4e98-97b2-98d6c1200988",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise AddOn AddOn.selectAddOn Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.put(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b27f10ad-8c8b-4202-9a63-687fc1037a6e",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "c1198210-83fc-4e98-97b2-98d6c1200988",
                  "b27f10ad-8c8b-4202-9a63-687fc1037a6e"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 210,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "0a5ac270-93e8-40eb-a03d-ec78075e2f46",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\addOn\\selectAddOnOrg.enterprise.js",
        "file": "\\controllers\\test\\addOn\\selectAddOnOrg.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "d91e13d0-4aa9-46f1-b6f8-2b8848bc1e4f",
            "title": "AddOn",
            "fullFile": "D:\\api\\controllers\\test\\addOn\\selectAddOnOrg.enterprise.js",
            "file": "\\controllers\\test\\addOn\\selectAddOnOrg.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "c928a069-f194-4e5f-b688-2c8ce6c606d7",
                "title": "AddOn.selectAddOnOrg",
                "fullFile": "D:\\api\\controllers\\test\\addOn\\selectAddOnOrg.enterprise.js",
                "file": "\\controllers\\test\\addOn\\selectAddOnOrg.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise AddOn AddOn.selectAddOnOrg \"before each\" hook",
                    "timedOut": false,
                    "duration": 186,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        _data = data;\n        saveAddOns({\n                authtoken: authToken,\n                user_uid: user_uid\n            },\n            function(error, userLogs) {\n                savedUserLogs = userLogs;\n                done();\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0aa4b50c-686a-43dc-a84c-74f8b4f266f0",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise AddOn AddOn.selectAddOnOrg \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "18d68eb4-de5e-48fb-a5a3-e0392e84d051",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should apply addon.",
                    "fullTitle": "Enterprise AddOn AddOn.selectAddOnOrg Should apply addon.",
                    "timedOut": false,
                    "duration": 232,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napplyPlan(httpmock, function(error, userPlanOutput) {\n    api.get(\"/enterprise/v1/addons\")\n        .set('org_uid', org_uid)\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                var addon_uid = _.first(res.body.output || []).uid || \"\";\n                api.put(apiURL)\n                    .set('org_uid', org_uid)\n                    .set('authtoken', authToken)\n                    .send({\n                        \"addon_uid\": addon_uid\n                    })\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            if (res.body.output.message == messageList.ADDON_ASSIGNED) {\n                                _models.User.findOne({ uid: org_account_uid }, function(error, user) {\n                                    user.addon_uid.should.equal(addon_uid);\n                                    done();\n                                });\n                            } else {\n                                (true).should.equal(false);\n                                done();\n                            }\n                        }\n                    });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9dec8281-e6cb-45b2-ad1e-1758fbb69f16",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise AddOn AddOn.selectAddOnOrg Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.put(apiURL)\n    .set('org_uid', org_uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ed143340-87c2-498a-8543-5c4a3f658f6d",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "9dec8281-e6cb-45b2-ad1e-1758fbb69f16",
                  "ed143340-87c2-498a-8543-5c4a3f658f6d"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 240,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "41b78171-a87c-46e5-a4bd-fdce1fa2fb0f",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\agent\\createUserAgent.js",
        "file": "\\controllers\\test\\agent\\createUserAgent.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "786ef90f-58c3-4057-837e-3e3045e8ddea",
            "title": "Agent.CreateUserAgent",
            "fullFile": "D:\\api\\controllers\\test\\agent\\createUserAgent.js",
            "file": "\\controllers\\test\\agent\\createUserAgent.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Agent.CreateUserAgent \"before all\" hook",
                "timedOut": false,
                "duration": 2765,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(user, cbk) {\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        dummyUser = res.body.output;\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "d8751b4a-4328-414e-9522-7eac3a5a9c4d",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Agent.CreateUserAgent \"after all\" hook",
                "timedOut": false,
                "duration": 2,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.parallel([\n    function(cb) {\n        _models.Agent.remove({ uid: userAgent.uid }, function(err) {\n            cb(err)\n        })\n    }\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "248274c0-cf4e-45e4-92f0-360ab913dd42",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise Agent.CreateUserAgent Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "76ccab52-e5c3-4f1f-8575-a410955a37da",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error if \"name\" key missing in request body.",
                "fullTitle": "Enterprise Agent.CreateUserAgent Should get error if \"name\" key missing in request body.",
                "timedOut": false,
                "duration": 38,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar agentBody = _.clone(agentData);\nagentBody = _.omit(agentBody, 'name');\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(agentBody)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "253243b9-38cb-4459-bb47-9344cdc731e5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should create agent, if agent data is valid.",
                "fullTitle": "Enterprise Agent.CreateUserAgent Should create agent, if agent data is valid.",
                "timedOut": false,
                "duration": 48,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(agentData)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            userAgent = res.body.output;\n            userAgent.should.have.property('name');\n            //expect(userAgent).not.to.have.all.keys(['_id', '__v']);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "dee8763a-0b9d-44cb-b6fb-91a30863022b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "76ccab52-e5c3-4f1f-8575-a410955a37da",
              "253243b9-38cb-4459-bb47-9344cdc731e5",
              "dee8763a-0b9d-44cb-b6fb-91a30863022b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 94,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "0f464d6e-a95e-4b4c-afd8-a017cbd0e7ba",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\agent\\deleteUserAgent.js",
        "file": "\\controllers\\test\\agent\\deleteUserAgent.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "dfa7c1a7-aa60-433a-836a-b9eb1a1fa889",
            "title": "Agent.DeleteUserAgent",
            "fullFile": "D:\\api\\controllers\\test\\agent\\deleteUserAgent.js",
            "file": "\\controllers\\test\\agent\\deleteUserAgent.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Agent.DeleteUserAgent \"before all\" hook",
                "timedOut": false,
                "duration": 2572,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(user, cbk) {\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    },\n    function(result, cbk) {\n        dummyUser = result.body.output;\n        api.post(apiURL)\n            .set('authtoken', dummyUser.authtoken)\n            .send(agentData)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        userAgent = res.body.output\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "8bcaba84-ce1f-469e-a7c4-cd263527d4a8",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Agent.DeleteUserAgent \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.parallel([\n    function(cb) {\n        _models.Agent.remove({ uid: userAgent.uid }, function(err) {\n            cb(err)\n        })\n    }\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "47797cab-58ce-4f19-adb7-cf8b71a4ef7f",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise Agent.DeleteUserAgent Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.delete(apiURL + '/' + userAgent.uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "76e32a07-069b-468a-af1d-583a98fb09ee",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error if user agent not found.",
                "fullTitle": "Enterprise Agent.DeleteUserAgent Should get error if user agent not found.",
                "timedOut": false,
                "duration": 49,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.delete(apiURL + '/dummyAgent')\n    .set('authtoken', dummyUser.authtoken)\n    .send({ name: 'updated' })\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.AGENT_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "26956a40-53f0-46c2-9562-81ce1295840d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should delete agent, if user agent found.",
                "fullTitle": "Enterprise Agent.DeleteUserAgent Should delete agent, if user agent found.",
                "timedOut": false,
                "duration": 39,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.delete(apiURL + '/' + userAgent.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            userAgent = res.body.output;\n            expect(userAgent.deleted_at).not.to.be.null;\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "87b59e9d-6052-492f-9079-a324aed35518",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "76e32a07-069b-468a-af1d-583a98fb09ee",
              "26956a40-53f0-46c2-9562-81ce1295840d",
              "87b59e9d-6052-492f-9079-a324aed35518"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 103,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "2df59435-9f4c-4336-bc12-a75f711cad2d",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\agent\\initUserAgent.js",
        "file": "\\controllers\\test\\agent\\initUserAgent.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "9194a966-e5d4-4fa6-a564-cb733d15b005",
            "title": "Agent.InitUserAgent",
            "fullFile": "D:\\api\\controllers\\test\\agent\\initUserAgent.js",
            "file": "\\controllers\\test\\agent\\initUserAgent.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Agent.InitUserAgent \"before all\" hook",
                "timedOut": false,
                "duration": 2610,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(user, cbk) {\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    },\n    function(result, cbk) {\n        dummyUser = result.body.output;\n        api.post('/enterprise/v1/user/agents')\n            .set('authtoken', dummyUser.authtoken)\n            .send(agentData)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        userAgent = res.body.output\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "46994e9e-7b1a-46a5-b205-7283ba7a9994",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Agent.InitUserAgent \"after all\" hook",
                "timedOut": false,
                "duration": 3,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.parallel([\n    function(cb) {\n        _models.Agent.remove({ uid: userAgent.uid }, function(err) {\n            cb(err)\n        })\n    }\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "02133ce4-003a-4211-b5e1-65fd1df804f1",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should get error if \"gateway_key\" key missing or not valid in request headers.",
                "fullTitle": "Enterprise Agent.InitUserAgent Should get error if \"gateway_key\" key missing or not valid in request headers.",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('gatewaykey', 'invalid key')\n    .send(body)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal('Unauthorized');\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "1cacfba1-b568-4f4f-a80e-6c2e32eed464",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error if user agent not found.",
                "fullTitle": "Enterprise Agent.InitUserAgent Should get error if user agent not found.",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('gateway_key', 'invalid key')\n    .send(body)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.AGENT_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "9669c770-a98e-439e-bf2d-0740adb5ddbe",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should init agent, if agent data is valid.",
                "fullTitle": "Enterprise Agent.InitUserAgent Should init agent, if agent data is valid.",
                "timedOut": false,
                "duration": 22,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('gateway_key', userAgent.uid)\n    .send(body)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output).to.contain.any.keys(['service', 'credentials', 'admin_key']);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "c8ae4df8-3884-481b-a1f4-d0eca8b5b65c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should init agent, if agent without any data.",
                "fullTitle": "Enterprise Agent.InitUserAgent Should init agent, if agent without any data.",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('gateway_key', userAgent.uid)\n    .send()\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output).to.contain.any.keys(['service', 'credentials', 'admin_key']);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "a2565b78-b176-4301-9dee-3e6849be47d4",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "1cacfba1-b568-4f4f-a80e-6c2e32eed464",
              "9669c770-a98e-439e-bf2d-0740adb5ddbe",
              "c8ae4df8-3884-481b-a1f4-d0eca8b5b65c",
              "a2565b78-b176-4301-9dee-3e6849be47d4"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 59,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "e4caedca-43ae-4b36-9e9d-2dcb7eace9b1",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\agent\\listUserAgent.js",
        "file": "\\controllers\\test\\agent\\listUserAgent.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "bd87cb95-b5bb-45fd-a385-fbe362412ef6",
            "title": "Agent.ListUserAgent",
            "fullFile": "D:\\api\\controllers\\test\\agent\\listUserAgent.js",
            "file": "\\controllers\\test\\agent\\listUserAgent.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Agent.ListUserAgent \"before all\" hook",
                "timedOut": false,
                "duration": 2608,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(user, cbk) {\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    },\n    function(result, cbk) {\n        dummyUser = result.body.output;\n        api.post(apiURL)\n            .set('authtoken', dummyUser.authtoken)\n            .send(agentData)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        userAgent = res.body.output\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "34884ba2-a062-4f5f-ad7a-ec89dca3a41c",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Agent.ListUserAgent \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.parallel([\n    function(cb) {\n        _models.Agent.remove({ uid: userAgent.uid }, function(err) {\n            cb(err)\n        })\n    }\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "32f410e9-4878-4929-b275-57900981efea",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise Agent.ListUserAgent Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "e7cc44e7-f6f0-451e-81e3-b7a254ef95f5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get user agent list, if user is valid.",
                "fullTitle": "Enterprise Agent.ListUserAgent Should get user agent list, if user is valid.",
                "timedOut": false,
                "duration": 46,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output).to.be.a('array');\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "a82dde42-73aa-4593-93d0-57567284dc2e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e7cc44e7-f6f0-451e-81e3-b7a254ef95f5",
              "a82dde42-73aa-4593-93d0-57567284dc2e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 55,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "3c419047-7d14-4b4b-a40a-313206e1f1bb",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\agent\\updateUserAgent.js",
        "file": "\\controllers\\test\\agent\\updateUserAgent.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "93498325-a7a7-44d7-bda1-f4c64f650ee8",
            "title": "Agent.UpdateUserAgent",
            "fullFile": "D:\\api\\controllers\\test\\agent\\updateUserAgent.js",
            "file": "\\controllers\\test\\agent\\updateUserAgent.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Agent.UpdateUserAgent \"before all\" hook",
                "timedOut": false,
                "duration": 2675,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(user, cbk) {\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    },\n    function(result, cbk) {\n        dummyUser = result.body.output;\n        api.post(apiURL)\n            .set('authtoken', dummyUser.authtoken)\n            .send(agentData)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        userAgent = res.body.output\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "fab22c81-a556-44ab-be82-6973751a5068",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Agent.UpdateUserAgent \"after all\" hook",
                "timedOut": false,
                "duration": 2,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.parallel([\n    function(cb) {\n        _models.Agent.remove({ uid: userAgent.uid }, function(err) {\n            cb(err)\n        })\n    }\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "d8517ec5-5894-45d4-966b-59c8cd57aac1",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise Agent.UpdateUserAgent Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put(apiURL + userAgent.uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "dbc45c6d-b1fd-4ab4-a764-69a17e9d3fe7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error if \"name\" key missing in request body.",
                "fullTitle": "Enterprise Agent.UpdateUserAgent Should get error if \"name\" key missing in request body.",
                "timedOut": false,
                "duration": 37,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar agentBody = _.clone(agentData);\nagentBody = _.omit(agentBody, 'name');\napi.put(apiURL + userAgent.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .send(agentBody)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "dd01e251-fe90-418c-8a7c-f4be9e83c536",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error if user agent not found.",
                "fullTitle": "Enterprise Agent.UpdateUserAgent Should get error if user agent not found.",
                "timedOut": false,
                "duration": 51,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put(apiURL + 'dummyAgent')\n    .set('authtoken', dummyUser.authtoken)\n    .send({ name: 'updated' })\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.AGENT_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "f21dac46-e77c-4cdc-8b8f-c04f2791658e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should update agent, if agent data is valid.",
                "fullTitle": "Enterprise Agent.UpdateUserAgent Should update agent, if agent data is valid.",
                "timedOut": false,
                "duration": 41,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put(apiURL + userAgent.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .send({ name: 'updated' })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            userAgent = res.body.output;\n            expect(userAgent.name).to.be.equal('updated');\n            expect(userAgent).not.to.have.all.keys(['_id', '__v']);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "17610e6e-4e71-488c-af32-f3a491326309",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "dbc45c6d-b1fd-4ab4-a764-69a17e9d3fe7",
              "dd01e251-fe90-418c-8a7c-f4be9e83c536",
              "f21dac46-e77c-4cdc-8b8f-c04f2791658e",
              "17610e6e-4e71-488c-af32-f3a491326309"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 139,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "e6ce8b55-beaf-49a8-b25d-8e6f390c2cf6",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\agent\\validateUserAgent.js",
        "file": "\\controllers\\test\\agent\\validateUserAgent.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "bb4b34ec-6fd8-4d09-95ee-67c7c4a0b473",
            "title": "Agent.ValidateUserAgent",
            "fullFile": "D:\\api\\controllers\\test\\agent\\validateUserAgent.js",
            "file": "\\controllers\\test\\agent\\validateUserAgent.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Agent.ValidateUserAgent \"before all\" hook",
                "timedOut": false,
                "duration": 2754,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(user, cbk) {\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    },\n    function(result, cbk) {\n        dummyUser = result.body.output;\n        api.post('/enterprise/v1/user/agents')\n            .set('authtoken', dummyUser.authtoken)\n            .send(agentData)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        userAgent = res.body.output\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "8cd1e8ca-e88b-400e-bb47-2a0230c0ef62",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Agent.ValidateUserAgent \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.parallel([\n    function(cb) {\n        _models.Agent.remove({ uid: userAgent.uid }, function(err) {\n            cb(err)\n        })\n    }\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "c3f21a99-c7be-4cd2-ba30-b432066a29ee",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should get error if \"gateway_key\" key missing or not valid in request headers.",
                "fullTitle": "Enterprise Agent.ValidateUserAgent Should get error if \"gateway_key\" key missing or not valid in request headers.",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('gatewaykey', 'invalid key')                \n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal('Unauthorized');\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "483335cd-ca84-4d09-a390-7f9537ff27b4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error if user agent not found.",
                "fullTitle": "Enterprise Agent.ValidateUserAgent Should get error if user agent not found.",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('gateway_key', 'invalid key')               \n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.AGENT_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "2c908803-dded-4d95-a0e0-7cf8ea3ec496",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should validate agent, if agent data is valid.",
                "fullTitle": "Enterprise Agent.ValidateUserAgent Should validate agent, if agent data is valid.",
                "timedOut": false,
                "duration": 4809,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('gateway_key', userAgent.uid)               \n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output).to.contain.any.keys(['message']);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "75d174e1-6c54-48ee-9754-b409f88846c0",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "483335cd-ca84-4d09-a390-7f9537ff27b4",
              "2c908803-dded-4d95-a0e0-7cf8ea3ec496",
              "75d174e1-6c54-48ee-9754-b409f88846c0"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 4831,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "5fbe7959-fbb2-4c7d-9f73-b1395c02de00",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\authyUser\\requestSMS.enterprise.js",
        "file": "\\controllers\\test\\authyUser\\requestSMS.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "d33140f0-00a2-4356-aebd-32c3ba87bcc8",
            "title": "authyUser",
            "fullFile": "D:\\api\\controllers\\test\\authyUser\\requestSMS.enterprise.js",
            "file": "\\controllers\\test\\authyUser\\requestSMS.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "37d8e526-1f64-4539-9a50-9f1f06a8fc1d",
                "title": "authyUser.requestSMS",
                "fullFile": "D:\\api\\controllers\\test\\authyUser\\requestSMS.enterprise.js",
                "file": "\\controllers\\test\\authyUser\\requestSMS.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise authyUser authyUser.requestSMS \"before each\" hook",
                    "timedOut": false,
                    "duration": 270,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.createFlowUser({}, function(error, user) {\n        if (error) {\n            done(error);\n        } else {\n            authToken = user.authtoken;\n            token = user.activation_token;\n            _id = user._id;\n            uid = user.uid;\n            done();\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "096a7269-5048-449f-bf31-f885e58dff1c",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise authyUser authyUser.requestSMS \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cdaf5af0-b170-43ec-acd0-bc69838c13f0",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should send otp with SMS.",
                    "fullTitle": "Enterprise authyUser authyUser.requestSMS Should send otp with SMS.",
                    "timedOut": false,
                    "duration": 84,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.authy_number = \"9619982150\";\ntempRegistrationBody.country_code = \"91\";\ndelete tempRegistrationBody.password;\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\napi.put(\"/enterprise/v1/user\")\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //var authy_userId = res.body.output.authy.authy_userId;\n            var authy_userId = res.body.output.authy_user_uid;\n            commonMock.authySMSVerification(httpmock, \"enterprise\");\n            api.post(apiURL)\n                .send({\n                    authy_user_uid: authy_userId\n                })\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        res.body.output.success.should.equal(\"true\");\n                        done();\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "58a95b0a-ca9e-42af-a1fc-f2e1f9588393",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should send otp with SMS by passing email.",
                    "fullTitle": "Enterprise authyUser authyUser.requestSMS Should send otp with SMS by passing email.",
                    "timedOut": false,
                    "duration": 72,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.authy_number = \"9619982150\";\ntempRegistrationBody.country_code = \"91\";\ndelete tempRegistrationBody.password;\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\napi.put(\"/enterprise/v1/user\")\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            commonMock.authySMSVerification(httpmock, \"enterprise\");\n            api.post(apiURL)\n                .send({\n                    email: res.body.output.email\n                })\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        res.body.output.success.should.equal(\"true\");\n                        done();\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9b959f67-9f26-4f25-b01b-b8bc127b03d9",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as user not found.",
                    "fullTitle": "Enterprise authyUser authyUser.requestSMS Should give error as user not found.",
                    "timedOut": false,
                    "duration": 76,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.authy_number = \"9619982150\";\ntempRegistrationBody.country_code = \"91\";\ndelete tempRegistrationBody.password;\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\napi.put(\"/enterprise/v1/user\")\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //var authy_userId = res.body.output.authy.authy_userId;\n            var authy_userId = res.body.output.authy_user_uid;\n            commonMock.authySMSVerification(httpmock, \"enterprise\");\n            api.post(apiURL)\n                .send({})\n                .expect(httpStatus.BAD_REQUEST)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        res.body.error.message.should.equal(messageList.USER_NOT_FOUND);\n                        done();\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e030f922-ed1a-42e6-8ce4-ffc99c7befe5",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "58a95b0a-ca9e-42af-a1fc-f2e1f9588393",
                  "9b959f67-9f26-4f25-b01b-b8bc127b03d9",
                  "e030f922-ed1a-42e6-8ce4-ffc99c7befe5"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 232,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "28613889-b055-411c-8dfd-04951df4ce7e",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\connection\\createUserConnection.enterprise.js",
        "file": "\\controllers\\test\\connection\\createUserConnection.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "bb2bc3a9-99dd-4734-8d6c-8fb9c0207751",
            "title": "Connection.CreateUserConnection",
            "fullFile": "D:\\api\\controllers\\test\\connection\\createUserConnection.enterprise.js",
            "file": "\\controllers\\test\\connection\\createUserConnection.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Connection.CreateUserConnection \"before all\" hook",
                "timedOut": false,
                "duration": 194,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data;\n        dummyUser = orgData.owner;\n        done()\n    })\n});",
                "err": {},
                "isRoot": false,
                "uuid": "5ac90aef-95ff-4a6a-bcdb-81d31cd4cd05",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Connection.CreateUserConnection \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nhttpmock.cleanAll();\n_models.UserConnection.remove({ uid: userConnection.uid }, function(err) {\n    done(err)\n})",
                "err": {},
                "isRoot": false,
                "uuid": "4608e85f-f4cd-4184-8586-be2453cd435f",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise Connection.CreateUserConnection Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "d3d21c75-a6d6-492c-9cf8-0792421cd9f0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error if \"data\" key missing in request body.",
                "fullTitle": "Enterprise Connection.CreateUserConnection Should get error if \"data\" key missing in request body.",
                "timedOut": false,
                "duration": 39,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar connectionData = _.clone(testData.connectionBody);\nconnectionData = _.omit(connectionData, 'data');\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(connectionData)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "ae8418d3-c454-4845-a41f-f3ef7f23f169",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error if \"input\" key missing in request body.",
                "fullTitle": "Enterprise Connection.CreateUserConnection Should get error if \"input\" key missing in request body.",
                "timedOut": false,
                "duration": 38,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar connectionData = _.cloneDeep(testData.connectionBody);\nconnectionData = _.omit(connectionData, 'input');\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(connectionData)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "6e94cafb-a573-4cd8-9c4d-4a78459c4061",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error if \"name\" key missing in request body.",
                "fullTitle": "Enterprise Connection.CreateUserConnection Should get error if \"name\" key missing in request body.",
                "timedOut": false,
                "duration": 36,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar connectionData = _.cloneDeep(testData.connectionBody);\nconnectionData = _.omit(connectionData, 'name');\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(connectionData)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "f6eabbb3-5ff5-4fc7-ae4e-b4e6ca03e0c4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should create connection, if connection data is valid.",
                "fullTitle": "Enterprise Connection.CreateUserConnection Should create connection, if connection data is valid.",
                "timedOut": false,
                "duration": 54,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar data = _.cloneDeep(testData.connectionBody);\nvar opt = { body: data, path: '/connection/create' }\ncommonMock.connectionCreateSuccess(opt)\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(testData.connectionBody)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            userConnection = res.body.output\n            expect(userConnection).to.have.any.keys(_.union(_.keys(testData.connectionBody), ['uid', 'user']));\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "65f99efc-3dde-4899-adff-7c27d80a106d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d3d21c75-a6d6-492c-9cf8-0792421cd9f0",
              "ae8418d3-c454-4845-a41f-f3ef7f23f169",
              "6e94cafb-a573-4cd8-9c4d-4a78459c4061",
              "f6eabbb3-5ff5-4fc7-ae4e-b4e6ca03e0c4",
              "65f99efc-3dde-4899-adff-7c27d80a106d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 176,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "3a5c2db6-72d0-4cb3-a9e6-b6ed4700ae53",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\connection\\deleteUserConnection.enterprise.js",
        "file": "\\controllers\\test\\connection\\deleteUserConnection.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "65634fe5-2982-4c81-9925-28029299d052",
            "title": "Connection.DeleteUserConnection",
            "fullFile": "D:\\api\\controllers\\test\\connection\\deleteUserConnection.enterprise.js",
            "file": "\\controllers\\test\\connection\\deleteUserConnection.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Connection.DeleteUserConnection \"before all\" hook",
                "timedOut": false,
                "duration": 206,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data;\n        dummyUser = orgData.owner;\n        var conndata = _.cloneDeep(connectionData)\n        conndata.user = dummyUser.uid\n        _models.UserConnection.create(conndata, function(err, result) {\n            if (result) {\n                userConnection = result.toJSON()\n            }\n            done()\n        })\n    });\n})",
                "err": {},
                "isRoot": false,
                "uuid": "bc9b5d89-adc3-470f-a789-049b3b3e9cc5",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Connection.DeleteUserConnection \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nhttpmock.cleanAll();\n_models.UserConnection.remove({ uid: userConnection.uid }, function(err) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "3bc2078a-46dc-4fed-9a3c-012709de5771",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise Connection.DeleteUserConnection Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.delete(apiURL + userConnection.uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "cec05d99-2c78-4021-bcaf-79e26d93a712",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if user connection not found.",
                "fullTitle": "Enterprise Connection.DeleteUserConnection Should get error, if user connection not found.",
                "timedOut": false,
                "duration": 44,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.delete(apiURL + 'dummyUser')\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).to.be.equal(messageList.CONNECTION_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "75da9ec5-b689-41eb-9610-856f219a49c2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should delete connection, if user connection found.",
                "fullTitle": "Enterprise Connection.DeleteUserConnection Should delete connection, if user connection found.",
                "timedOut": false,
                "duration": 65,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar data = _.cloneDeep(testData.connectionBody);\nvar opt = { path: '/connection/' + userConnection.uid };\ncommonMock.connectionDeleteSuccess(opt);\napi.delete(apiURL + userConnection.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output.notice).to.be.equal(messageList.CONNECTION_DELETED_SUCCESSFULLY);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "1fdc4c60-4128-49a5-91e1-0136d0d75c76",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "cec05d99-2c78-4021-bcaf-79e26d93a712",
              "75da9ec5-b689-41eb-9610-856f219a49c2",
              "1fdc4c60-4128-49a5-91e1-0136d0d75c76"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 118,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "878e9d56-af51-4dcc-8d32-722075ae1f30",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\connection\\getUserConnection.enterprise.js",
        "file": "\\controllers\\test\\connection\\getUserConnection.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "c7bb270f-d936-44f7-a72c-9e5d18c901cf",
            "title": "Connection.GetUserConnection",
            "fullFile": "D:\\api\\controllers\\test\\connection\\getUserConnection.enterprise.js",
            "file": "\\controllers\\test\\connection\\getUserConnection.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Connection.GetUserConnection \"before all\" hook",
                "timedOut": false,
                "duration": 236,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data;\n        dummyUser = orgData.owner;\n        var conndata = _.cloneDeep(connectionData)\n        conndata.user = dummyUser.uid\n        _models.UserConnection.create(conndata, function(err, result) {\n            if (result) {\n                userConnection = result.toJSON()\n            }\n            done()\n        })\n    })\n})",
                "err": {},
                "isRoot": false,
                "uuid": "ce1b8359-d99a-430b-a5a8-d7273dfd8f2c",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Connection.GetUserConnection \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nhttpmock.cleanAll();\n_models.UserConnection.remove({ uid: userConnection.uid }, function(err) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "23883c22-6caf-4274-a4af-f340a30cf753",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise Connection.GetUserConnection Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + userConnection.uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "a10ac46a-8ec1-4b1d-ba2e-3a86a5167499",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if user connection not found.",
                "fullTitle": "Enterprise Connection.GetUserConnection Should get error, if user connection not found.",
                "timedOut": false,
                "duration": 54,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { path: '/connection/dummyUser/details' };\ncommonMock.connectionGetNotFound(opt);\napi.get(apiURL + 'dummyUser')\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).to.be.equal(messageList.CONNECTION_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "03b2f628-9827-44d2-bd34-d8c121df7cad",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get connection, if user connection found.",
                "fullTitle": "Enterprise Connection.GetUserConnection Should get connection, if user connection found.",
                "timedOut": false,
                "duration": 50,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { path: '/connection/' + userConnection.uid + '/details' };\ncommonMock.connectionGetSuccess(opt);\napi.get(apiURL + userConnection.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var userConnection = res.body.output\n            expect(userConnection).to.have.all.keys(['connection']);\n            expect(userConnection.connection).to.have.any.keys(_.union(_.keys(connectionData), ['uid', 'user']));\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "00e35b8e-1833-4bb8-b479-3b854799cf60",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a10ac46a-8ec1-4b1d-ba2e-3a86a5167499",
              "03b2f628-9827-44d2-bd34-d8c121df7cad",
              "00e35b8e-1833-4bb8-b479-3b854799cf60"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 114,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "93b6b2fc-32db-4146-9ee8-46999acfb573",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\connection\\getUserConnections.enterprise.js",
        "file": "\\controllers\\test\\connection\\getUserConnections.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "841263a1-6029-41a2-b4ae-964555899a86",
            "title": "Connection.GetUserConnections",
            "fullFile": "D:\\api\\controllers\\test\\connection\\getUserConnections.enterprise.js",
            "file": "\\controllers\\test\\connection\\getUserConnections.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Connection.GetUserConnections \"before all\" hook",
                "timedOut": false,
                "duration": 2693,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            var entUser = _.cloneDeep(testData.userObj)\n            _models.User.create(entUser, function(err, newuser) {\n                cbk(err, newuser);\n            })\n        })\n    },\n    function(user, cbk) {\n        fakeUser = user\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    },\n    function(result, cbk) {\n        dummyUser = result.body.output;\n        var conndata = _.cloneDeep(connectionData)\n        conndata.user = dummyUser.uid\n        _models.UserConnection.create(conndata, function(err, result) {\n            if (result) {\n                userConnection = result.toJSON()\n            }\n            cbk(err, userConnection)\n        })\n    }\n], function(err, res) {\n    done(err);\n})",
                "err": {},
                "isRoot": false,
                "uuid": "cb609740-4e9a-4a2d-96d2-1ae54e1d2b3b",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Connection.GetUserConnections \"after all\" hook",
                "timedOut": false,
                "duration": 2,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "httpmock.cleanAll();\nasync.parallel([\n    function(cb) {\n        _models.UserConnection.remove({ uid: userConnection.uid }, function(err) {\n            cb(err)\n        })\n    },\n    function(cb) {\n        _models.User.remove({ uid: fakeUser.uid }, function(err) {\n            cb(err)\n        })\n    }\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "ffd38aac-c042-42c8-adec-4b7947ecb078",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise Connection.GetUserConnections Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "36927bc5-bdb9-4751-a4dc-ff07a32ca1fc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get connection, if user connection found.",
                "fullTitle": "Enterprise Connection.GetUserConnections Should get connection, if user connection found.",
                "timedOut": false,
                "duration": 50,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(_.first(res.body.output)).to.have.all.keys(['_id', 'userauths', 'icons','label']);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "a82226d5-6a2b-433d-8ab3-17427cc7c7af",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "36927bc5-bdb9-4751-a4dc-ff07a32ca1fc",
              "a82226d5-6a2b-433d-8ab3-17427cc7c7af"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 59,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "b0da9423-8a35-4cbc-b83d-cf8bc62d9acc",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\connection\\listConnections.enterprise.js",
        "file": "\\controllers\\test\\connection\\listConnections.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "4ec1fbaf-9d79-43df-b4db-b191603b04e4",
            "title": "Connection.ListConnections",
            "fullFile": "D:\\api\\controllers\\test\\connection\\listConnections.enterprise.js",
            "file": "\\controllers\\test\\connection\\listConnections.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Connection.ListConnections \"before all\" hook",
                "timedOut": false,
                "duration": 2714,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\n_models.User.remove({ email: testData.testRegistrationBody.email }, function(error, user) {\n    api.post(\"/enterprise/v1/signup\")\n        .send(testData.testRegistrationBody)\n        .expect(httpStatus.CREATED)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                dummyUser = res.body.output;\n                done();\n            }\n        });\n});",
                "err": {},
                "isRoot": false,
                "uuid": "87fac29e-be15-4247-af27-e91e303cabf6",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should get list of connection.",
                "fullTitle": "Enterprise Connection.ListConnections Should get list of connection.",
                "timedOut": false,
                "duration": 43,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.should.be.instanceOf(Array);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "bc092398-4dbd-43bf-a5cf-da5c3004ace1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Connection.ListConnections Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "4b3f035a-6cbb-4e66-a78e-67b2b362e8cd",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "bc092398-4dbd-43bf-a5cf-da5c3004ace1",
              "4b3f035a-6cbb-4e66-a78e-67b2b362e8cd"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 57,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "5e554ef5-469b-4ebf-9f42-a950cddb8d6d",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\connection\\testUserConnection.enterprise.js",
        "file": "\\controllers\\test\\connection\\testUserConnection.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "328cbe8c-480e-4575-9948-45e75b82ffbc",
            "title": "Connection.TestUserConnection",
            "fullFile": "D:\\api\\controllers\\test\\connection\\testUserConnection.enterprise.js",
            "file": "\\controllers\\test\\connection\\testUserConnection.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Connection.TestUserConnection \"before all\" hook",
                "timedOut": false,
                "duration": 223,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data;\n        dummyUser = orgData.owner;\n        var conndata = _.cloneDeep(connectionData)\n        conndata.user = dummyUser.uid\n        _models.UserConnection.create(conndata, function(err, result) {\n            if (result) {\n                userConnection = result.toJSON()\n            }\n            done()\n        })\n    })\n})",
                "err": {},
                "isRoot": false,
                "uuid": "42c96438-2aac-4dee-97d0-0d0d5f60bbb1",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Connection.TestUserConnection \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nhttpmock.cleanAll();\nasync.parallel([\n    function(cb) {\n        _models.UserConnection.remove({ uid: userConnection.uid }, function(err) {\n            cb(err)\n        })\n    }\n], function(err, result) {\n    done(err)\n})",
                "err": {},
                "isRoot": false,
                "uuid": "b08058a7-e87a-4696-9bac-7ee722baa6c9",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise Connection.TestUserConnection Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + userConnection.uid + '/validate')\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "2a0ab463-eb0a-405b-b66d-5d380fc0630d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should update connection, if connection data is valid.",
                "fullTitle": "Enterprise Connection.TestUserConnection Should update connection, if connection data is valid.",
                "timedOut": false,
                "duration": 38,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar connectionData = _.cloneDeep(testData.connectionBody);\nconnectionData.uid = userConnection.uid;\nvar opt = { uid: userConnection.uid, path: '/connection/' + userConnection.uid + '/validate' };\ncommonMock.connectionTestSuccess(opt);\napi.get(apiURL + userConnection.uid + '/validate')\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            userConnection = res.body.output\n            expect(userConnection).to.have.any.keys(_.union(_.keys(testData.connectionBody), ['uid', 'user']));\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "969c1eb1-2be0-4584-89c7-780300b0a069",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2a0ab463-eb0a-405b-b66d-5d380fc0630d",
              "969c1eb1-2be0-4584-89c7-780300b0a069"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 47,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "0340de97-b17d-481c-823c-7ad8649a98d4",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\connection\\updateUserConnection.enterprise.js",
        "file": "\\controllers\\test\\connection\\updateUserConnection.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "f24ece13-ad41-45cb-a8d1-e1deabdec103",
            "title": "Connection.UpdateUserConnection",
            "fullFile": "D:\\api\\controllers\\test\\connection\\updateUserConnection.enterprise.js",
            "file": "\\controllers\\test\\connection\\updateUserConnection.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Connection.UpdateUserConnection \"before all\" hook",
                "timedOut": false,
                "duration": 214,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data;\n        dummyUser = orgData.owner;\n        var conndata = _.cloneDeep(connectionData)\n        conndata.user = dummyUser.uid\n        _models.UserConnection.create(conndata, function(err, result) {\n            if (result) {\n                userConnection = result.toJSON()\n            }\n            done()\n        })\n    })\n})",
                "err": {},
                "isRoot": false,
                "uuid": "5e22ef33-f7e6-48cc-b76d-1200fc2ccf43",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Connection.UpdateUserConnection \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nhttpmock.cleanAll();\nasync.parallel([\n    function(cb) {\n        _models.UserConnection.remove({ uid: userConnection.uid }, function(err) {\n            cb(err)\n        })\n    }\n], function(err, result) {\n    done(err)\n})",
                "err": {},
                "isRoot": false,
                "uuid": "14d778d2-ac4a-49d0-a16c-84906da081bb",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise Connection.UpdateUserConnection Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put(apiURL + userConnection.uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "858f6dc2-cf92-453a-a8e2-906b9cc92c63",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error if \"data\" key missing in request body.",
                "fullTitle": "Enterprise Connection.UpdateUserConnection Should get error if \"data\" key missing in request body.",
                "timedOut": false,
                "duration": 35,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar connectionData = _.clone(testData.connectionBody);\nconnectionData = _.omit(connectionData, 'data');\napi.put(apiURL + userConnection.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .send(connectionData)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "30d21447-a683-412a-83f4-863917b60976",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error if \"input\" key missing in request body.",
                "fullTitle": "Enterprise Connection.UpdateUserConnection Should get error if \"input\" key missing in request body.",
                "timedOut": false,
                "duration": 39,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar connectionData = _.clone(testData.connectionBody);\nconnectionData = _.omit(connectionData, 'input');\napi.put(apiURL + userConnection.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .send(connectionData)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "bd263755-e6f4-4ee9-af51-238f84c09942",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error if \"name\" key missing in request body.",
                "fullTitle": "Enterprise Connection.UpdateUserConnection Should get error if \"name\" key missing in request body.",
                "timedOut": false,
                "duration": 38,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar connectionData = _.clone(testData.connectionBody);\nconnectionData = _.omit(connectionData, 'name');\napi.put(apiURL + userConnection.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .send(connectionData)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "d920bb13-a762-442d-a5a3-21365da33186",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error if user connection not found.",
                "fullTitle": "Enterprise Connection.UpdateUserConnection Should get error if user connection not found.",
                "timedOut": false,
                "duration": 45,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n// var opt = { path: '/connection/dummyUser' };\n// commonMock.connectionGetNotFound(opt);\nvar connectionObj = _.clone(connectionData);\napi.put(apiURL + 'dummyUser')\n    .set('authtoken', dummyUser.authtoken)\n    .send(connectionObj)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.CONNECTION_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "4e348159-df21-459e-80a2-57e3a51a4dfb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should update connection, if connection data is valid.",
                "fullTitle": "Enterprise Connection.UpdateUserConnection Should update connection, if connection data is valid.",
                "timedOut": false,
                "duration": 47,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar connectionData = _.cloneDeep(testData.connectionBody);\nconnectionData.uid = userConnection.uid;\nconnectionData.label = 'updated connection';\nvar opt = { path: '/connection/' + userConnection.uid };\ncommonMock.connectionsUpdateSuccess(opt);\napi.put(apiURL + userConnection.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .send(connectionData)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            userConnection = res.body.output\n            expect(userConnection.label).to.be.equal('updated connection');\n            expect(userConnection).to.have.any.keys(_.union(_.keys(testData.connectionBody), ['uid', 'user']));\n            var opt = { path: getTriggerPath, body: getTriggerPath };\n            commonMock.triggerGetSuccess(opt);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "234cc706-b1bb-4ecb-8b30-537be89ab101",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "858f6dc2-cf92-453a-a8e2-906b9cc92c63",
              "30d21447-a683-412a-83f4-863917b60976",
              "bd263755-e6f4-4ee9-af51-238f84c09942",
              "d920bb13-a762-442d-a5a3-21365da33186",
              "4e348159-df21-459e-80a2-57e3a51a4dfb",
              "234cc706-b1bb-4ecb-8b30-537be89ab101"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 213,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "01950799-39f4-4ffa-a977-6e4bc81d9be1",
        "title": "contentStack",
        "fullFile": "D:\\api\\controllers\\test\\contentStack\\deleteAnnouncement.js",
        "file": "\\controllers\\test\\contentStack\\deleteAnnouncement.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "697f0dc8-a999-4cf2-9d99-12a45e1c304e",
            "title": "contentStack.deleteAnnouncement",
            "fullFile": "D:\\api\\controllers\\test\\contentStack\\deleteAnnouncement.js",
            "file": "\\controllers\\test\\contentStack\\deleteAnnouncement.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "contentStack contentStack.deleteAnnouncement \"before each\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n_models.CmsMessage.remove({ title: \"UNIT_TEST_ANNOUNCEMENT\" }, function(error, message) {\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "9a27d86b-682b-4d2f-9607-bae8c28cc1f0",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after each\" hook",
                "fullTitle": "contentStack contentStack.deleteAnnouncement \"after each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "httpmock.cleanAll();\ndone();",
                "err": {},
                "isRoot": false,
                "uuid": "ad8f2187-fd9d-4140-9948-3617c2dede31",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should delete announcement.",
                "fullTitle": "contentStack contentStack.deleteAnnouncement Should delete announcement.",
                "timedOut": false,
                "duration": 35,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(\"/v1/cms/announcements\")\n    .send(announcementBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            _models.Announcement.find({ title: \"UNIT_TEST_ANNOUNCEMENT\" },\n                function(error, users) {\n                    var uid = (users || [{ uid: \"\" }])[0].uid || \"\";\n                    var paramUrl = apiURL + uid;\n                    api.delete(paramUrl)\n                        .expect(httpStatus.OK)\n                        .end(function(err, res) {\n                            if (err) {\n                                done(err);\n                            } else {\n                                _models.CmsMessage.find({ title: \"UNIT_TEST_ANNOUNCEMENT\" },\n                                    function(error, users) {\n                                        (error == null && (users || []).length == 0).should.equal(true);\n                                        done();\n                                    });\n                            }\n                        });\n                });\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "4f5060fe-1694-4fa6-8f07-e88e55338691",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "4f5060fe-1694-4fa6-8f07-e88e55338691"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 35,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "2e3cde7e-0864-49b5-8ced-ddd6d78748b5",
        "title": "contentStack",
        "fullFile": "D:\\api\\controllers\\test\\contentStack\\deleteEmailTemplate.js",
        "file": "\\controllers\\test\\contentStack\\deleteEmailTemplate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "6ccf2709-caa5-4937-9808-f1e59e5aa030",
            "title": "contentStack.deleteEmailTemplate",
            "fullFile": "D:\\api\\controllers\\test\\contentStack\\deleteEmailTemplate.js",
            "file": "\\controllers\\test\\contentStack\\deleteEmailTemplate.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "contentStack contentStack.deleteEmailTemplate \"before each\" hook",
                "timedOut": false,
                "duration": 3,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n_models.CmsMail.remove({ template_id: \"UNIT_TEST_TEMPLATE\" }, function(error, template) {\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "02df5a9e-a83a-4e86-913a-ee4fc28acac1",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after each\" hook",
                "fullTitle": "contentStack contentStack.deleteEmailTemplate \"after each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "httpmock.cleanAll();\ndone();",
                "err": {},
                "isRoot": false,
                "uuid": "4d34c0b1-d823-4cd1-a9ff-7b8f97aae916",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should delete email template.",
                "fullTitle": "contentStack contentStack.deleteEmailTemplate Should delete email template.",
                "timedOut": false,
                "duration": 37,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(\"/v1/cms/templates\")\n    .send(emailTemplateBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            _models.CmsMail.find({ template_id: \"UNIT_TEST_TEMPLATE\" },\n                function(error, templates) {\n                    var uid = (templates || [{ uid: \"\" }])[0].uid || \"\";\n                    var paramUrl = apiURL + uid;\n                    api.delete(paramUrl)\n                        .expect(httpStatus.OK)\n                        .end(function(err, res) {\n                            if (err) {\n                                done(err);\n                            } else {\n                                _models.CmsMail.find({ template_id: \"UNIT_TEST_TEMPLATE\" },\n                                    function(error, templates) {\n                                        (error == null && (templates || []).length == 0).should.equal(true);\n                                        done();\n                                    });\n                            }\n                        });\n                });\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "d2ce8200-6cff-475d-9c96-2d934ae897f2",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d2ce8200-6cff-475d-9c96-2d934ae897f2"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 37,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "7cea0fb8-7b04-4c45-a4cd-62b85279e885",
        "title": "contentStack",
        "fullFile": "D:\\api\\controllers\\test\\contentStack\\deleteMessage.js",
        "file": "\\controllers\\test\\contentStack\\deleteMessage.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "a4e299fe-04dd-49fa-a9ff-b22ac9887526",
            "title": "contentStack.deleteMessage",
            "fullFile": "D:\\api\\controllers\\test\\contentStack\\deleteMessage.js",
            "file": "\\controllers\\test\\contentStack\\deleteMessage.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "contentStack contentStack.deleteMessage \"before each\" hook",
                "timedOut": false,
                "duration": 2,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n_models.CmsMessage.remove({ message_id: \"UNIT_TEST_MESSAGE\" }, function(error, message) {\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "23b91bdc-3d81-4589-aea1-9e2a5c02ea8d",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after each\" hook",
                "fullTitle": "contentStack contentStack.deleteMessage \"after each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "httpmock.cleanAll();\ndone();",
                "err": {},
                "isRoot": false,
                "uuid": "29a4ce00-f6a2-4236-b467-2b9d6c9cadd9",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should delete message.",
                "fullTitle": "contentStack contentStack.deleteMessage Should delete message.",
                "timedOut": false,
                "duration": 39,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(\"/v1/cms/messages\")\n    .send(messageTemplateBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            _models.CmsMessage.find({ message_id: \"UNIT_TEST_MESSAGE\" },\n                function(error, users) {\n                    var uid = (users || [{ uid: \"\" }])[0].uid || \"\";\n                    var paramUrl = apiURL + uid;\n                    api.delete(paramUrl)\n                        .expect(httpStatus.OK)\n                        .end(function(err, res) {\n                            if (err) {\n                                done(err);\n                            } else {\n                                _models.CmsMessage.find({ message_id: \"UNIT_TEST_MESSAGE\" },\n                                    function(error, users) {\n                                        (error == null && (users || []).length == 0).should.equal(true);\n                                        done();\n                                    });\n                            }\n                        });\n                });\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "cd2f57a1-0677-4281-af8d-9752afd787cf",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "cd2f57a1-0677-4281-af8d-9752afd787cf"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 39,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "8ff4fa77-3c50-4737-a5aa-dc045551c3da",
        "title": "contentStack",
        "fullFile": "D:\\api\\controllers\\test\\contentStack\\deletePlansFaq.js",
        "file": "\\controllers\\test\\contentStack\\deletePlansFaq.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "f08393af-68b5-4dee-8939-e26229d4fce7",
            "title": "contentStack.deletePlansFaq",
            "fullFile": "D:\\api\\controllers\\test\\contentStack\\deletePlansFaq.js",
            "file": "\\controllers\\test\\contentStack\\deletePlansFaq.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "contentStack contentStack.deletePlansFaq \"before each\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n_models.PlansFaq.remove({ question_title: \"UNIT_TEST_QUESTION\" }, function(error, message) {\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "f1462b15-febf-4e48-9e42-c667ce3e9c78",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after each\" hook",
                "fullTitle": "contentStack contentStack.deletePlansFaq \"after each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "httpmock.cleanAll();\ndone();",
                "err": {},
                "isRoot": false,
                "uuid": "4e4c8b24-f87b-4534-aa79-327a904ea6c4",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should delete planfaqs.",
                "fullTitle": "contentStack contentStack.deletePlansFaq Should delete planfaqs.",
                "timedOut": false,
                "duration": 35,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(\"/v1/cms/planfaqs\")\n    .send(planFaqBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            _models.PlansFaq.find({ question_title: \"UNIT_TEST_QUESTION\" },\n                function(error, planFaqs) {\n                    var uid = (planFaqs || [{ uid: \"\" }])[0].uid || \"\";\n                    var paramUrl = apiURL + uid;\n                    api.delete(paramUrl)\n                        .expect(httpStatus.OK)\n                        .end(function(err, res) {\n                            if (err) {\n                                done(err);\n                            } else {\n                                _models.PlansFaq.find({ question_title: \"UNIT_TEST_QUESTION\" },\n                                    function(error, planFaqs) {\n                                        (error == null && (planFaqs || []).length == 0).should.equal(true);\n                                        done();\n                                    });\n                            }\n                        });\n                });\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "86efe4fd-803e-4bd2-97fa-ec35b5bfec9c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "86efe4fd-803e-4bd2-97fa-ec35b5bfec9c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 35,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "940f6efa-6d6a-4028-b06e-71c6c370eca7",
        "title": "contentStack",
        "fullFile": "D:\\api\\controllers\\test\\contentStack\\getAnnouncement.js",
        "file": "\\controllers\\test\\contentStack\\getAnnouncement.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "a9f787c8-d7fe-43f0-ae26-a0b4431eaf43",
            "title": "contentStack.getAnnouncement",
            "fullFile": "D:\\api\\controllers\\test\\contentStack\\getAnnouncement.js",
            "file": "\\controllers\\test\\contentStack\\getAnnouncement.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "contentStack contentStack.getAnnouncement \"before each\" hook",
                "timedOut": false,
                "duration": 30,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.createFlowUser({}, function(error, user) {\n        if (error) {\n            done(error);\n        } else {\n            authToken = user.authtoken;\n            token = user.activation_token;\n            _id = user._id;\n            user_uid = user.uid;\n            done();\n        }\n    });\n});",
                "err": {},
                "isRoot": false,
                "uuid": "8c72d669-08bf-4d52-aabe-703560033782",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after each\" hook",
                "fullTitle": "contentStack contentStack.getAnnouncement \"after each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "httpmock.cleanAll();\ndone();",
                "err": {},
                "isRoot": false,
                "uuid": "21e26867-52f3-4232-9a4d-d9ef413b8509",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should get enterprise announcements.",
                "fullTitle": "contentStack contentStack.getAnnouncement Should get enterprise announcements.",
                "timedOut": false,
                "duration": 59,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(\"/v1/cms/announcements\")\n    .send(announcementBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            api.get(apiGetURL)\n                .set(\"authtoken\", authToken)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        var isValid = Array.isArray(res.body.output.objects);\n                        if (isValid) {\n                            _.each(res.body.output.objects, function(item) {\n                                isValid = isValid && typeof(item._id) == \"undefined\" &&\n                                    typeof(item.__v) == \"undefined\";\n                            });\n                        }\n                        isValid.should.equal(true);\n                        done();\n                    }\n                });\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "e966633b-cff7-4b44-84a7-ff17fae12e46",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get particular enterprise announcement.",
                "fullTitle": "contentStack contentStack.getAnnouncement Should get particular enterprise announcement.",
                "timedOut": false,
                "duration": 51,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(\"/v1/cms/announcements\")\n    .send(announcementBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            api.get(apiGetURL + \"/\" + announcementBody.entry.uid)\n                .set(\"authtoken\", authToken)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        var isValid = res.body.output.uid == announcementBody.entry.uid &&\n                            typeof(res.body.output._id) == \"undefined\" &&\n                            typeof(res.body.output.__v) == \"undefined\";\n                        isValid.should.equal(true);\n                        done();\n                    }\n                });\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "11bdf313-b1a4-4da6-8b54-1abc240d7d7e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e966633b-cff7-4b44-84a7-ff17fae12e46",
              "11bdf313-b1a4-4da6-8b54-1abc240d7d7e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 110,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "d9baad87-d89e-4658-913c-ef6316b30e2a",
        "title": "contentStack",
        "fullFile": "D:\\api\\controllers\\test\\contentStack\\getEmailTemplate.js",
        "file": "\\controllers\\test\\contentStack\\getEmailTemplate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "dcad3e31-b24b-4cb6-9624-f970b24f55a7",
            "title": "contentStack.getEmailTemplate",
            "fullFile": "D:\\api\\controllers\\test\\contentStack\\getEmailTemplate.js",
            "file": "\\controllers\\test\\contentStack\\getEmailTemplate.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "contentStack contentStack.getEmailTemplate \"before each\" hook",
                "timedOut": false,
                "duration": 5265,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n_models.CmsMail.remove({ template_id: \"UNIT_TEST_TEMPLATE\" }, function(error, template) {\n    _models.User.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n        _models.Mail.remove({ $or: [{ to: new RegExp('^test.user+', \"i\") }, { to: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n            commonMock.setSignUpMocks(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/signup\")\n                .send(registrationBody)\n                .expect(httpStatus.CREATED)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        enterpriseAuthToken = res.body.output.authtoken;\n                        var tempRegistrationBody = global.getImmutable(registrationBody);\n                        tempRegistrationBody.email = \"test.user+100000@raweng.com\";\n                        commonMock.setSignUpMocks(httpmock, \"express\", {\n                            email: tempRegistrationBody.email\n                        });\n                        api.post(\"/express/v1/signup\")\n                            .send(tempRegistrationBody)\n                            .expect(httpStatus.CREATED)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    expressAuthToken = res.body.output.authtoken;\n                                    done();\n                                }\n                            });\n                    }\n                });\n        });\n    });\n});",
                "err": {},
                "isRoot": false,
                "uuid": "4c5005d8-ea68-4474-a7d9-9b9bbf908f17",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after each\" hook",
                "fullTitle": "contentStack contentStack.getEmailTemplate \"after each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "httpmock.cleanAll();\ndone();",
                "err": {},
                "isRoot": false,
                "uuid": "329618d4-1509-40a2-aee0-de173727e92d",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should get enterprise email templates.",
                "fullTitle": "contentStack contentStack.getEmailTemplate Should get enterprise email templates.",
                "timedOut": false,
                "duration": 63,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nemailTemplateBody.entry.enterprise = true;\nemailTemplateBody.entry.express = false;\napi.post(\"/v1/cms/templates\")\n    .send(emailTemplateBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            api.get(\"/enterprise/v1/cms/templates\")\n                .expect(httpStatus.OK)\n                .set(\"authtoken\", enterpriseAuthToken)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        var isValid = Array.isArray(res.body.output);\n                        if (isValid) {\n                            _.each(res.body.output, function(item) {\n                                isValid = isValid && typeof(item._id) == \"undefined\" &&\n                                    typeof(item.__v) == \"undefined\";\n                            });\n                        }\n                        isValid.should.equal(true);\n                        done();\n                    }\n                });\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "3698a875-e4f5-4d55-b718-3dd6b90a8840",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get specific enterprise email template.",
                "fullTitle": "contentStack contentStack.getEmailTemplate Should get specific enterprise email template.",
                "timedOut": false,
                "duration": 52,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nemailTemplateBody.entry.enterprise = true;\nemailTemplateBody.entry.express = false;\napi.post(\"/v1/cms/templates\")\n    .send(emailTemplateBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            api.get(\"/enterprise/v1/cms/templates/UNIT_TEST_TEMPLATE\")\n                .expect(httpStatus.OK)\n                .set(\"authtoken\", enterpriseAuthToken)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        var isValid = res.body.output.uid == emailTemplateBody.entry.uid &&\n                            typeof(res.body.output._id) == \"undefined\" &&\n                            typeof(res.body.output.__v) == \"undefined\";\n                        isValid.should.equal(true);\n                        done();\n                    }\n                });\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "f05241a7-af2e-403a-8230-16b0a8b8863e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get express email templates.",
                "fullTitle": "contentStack contentStack.getEmailTemplate Should get express email templates.",
                "timedOut": false,
                "duration": 53,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nemailTemplateBody.entry.enterprise = false;\nemailTemplateBody.entry.express = true;\napi.post(\"/v1/cms/templates\")\n    .send(emailTemplateBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            api.get(\"/express/v1/cms/templates\")\n                .expect(httpStatus.OK)\n                .set(\"authtoken\", expressAuthToken)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        var isValid = Array.isArray(res.body.output);\n                        if (isValid) {\n                            _.each(res.body.output, function(item) {\n                                isValid = isValid && typeof(item._id) == \"undefined\" &&\n                                    typeof(item.__v) == \"undefined\";\n                            });\n                        }\n                        isValid.should.equal(true);\n                        done();\n                    }\n                });\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "fd319cbb-6723-4597-a21b-efb22d6a6da0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get specific express email template.",
                "fullTitle": "contentStack contentStack.getEmailTemplate Should get specific express email template.",
                "timedOut": false,
                "duration": 50,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nemailTemplateBody.entry.enterprise = false;\nemailTemplateBody.entry.express = true;\napi.post(\"/v1/cms/templates\")\n    .send(emailTemplateBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            api.get(\"/express/v1/cms/templates/UNIT_TEST_TEMPLATE\")\n                .expect(httpStatus.OK)\n                .set(\"authtoken\", expressAuthToken)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        var isValid = res.body.output.uid == emailTemplateBody.entry.uid &&\n                            typeof(res.body.output._id) == \"undefined\" &&\n                            typeof(res.body.output.__v) == \"undefined\";\n                        isValid.should.equal(true);\n                        done();\n                    }\n                });\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "aa17172f-eed4-444a-aea0-868531ac1a2e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get template not found error message.",
                "fullTitle": "contentStack contentStack.getEmailTemplate Should get template not found error message.",
                "timedOut": false,
                "duration": 56,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nemailTemplateBody.entry.enterprise = false;\nemailTemplateBody.entry.express = true;\napi.post(\"/v1/cms/templates\")\n    .send(emailTemplateBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            api.get(\"/express/v1/cms/templates/UNIT_TEST_TEMPLATE0\")\n                .set(\"authtoken\", expressAuthToken)\n                .expect(httpStatus.BAD_REQUEST)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        res.body.error.message.should.equal(messageList.CMS_EMAIL_TEMPLATE_NOT_FOUND);\n                        done();\n                    }\n                });\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "09846cbd-cfc6-45a5-a829-f6167303843d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "3698a875-e4f5-4d55-b718-3dd6b90a8840",
              "f05241a7-af2e-403a-8230-16b0a8b8863e",
              "fd319cbb-6723-4597-a21b-efb22d6a6da0",
              "aa17172f-eed4-444a-aea0-868531ac1a2e",
              "09846cbd-cfc6-45a5-a829-f6167303843d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 274,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "c2d69df8-7271-480d-8ca6-3a8f4010bcfc",
        "title": "contentStack",
        "fullFile": "D:\\api\\controllers\\test\\contentStack\\getLatestAnnouncement.js",
        "file": "\\controllers\\test\\contentStack\\getLatestAnnouncement.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "543e8c34-7ad2-4013-98b1-2d92642a403e",
            "title": "contentStack.getLatestAnnouncement",
            "fullFile": "D:\\api\\controllers\\test\\contentStack\\getLatestAnnouncement.js",
            "file": "\\controllers\\test\\contentStack\\getLatestAnnouncement.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "contentStack contentStack.getLatestAnnouncement \"before each\" hook",
                "timedOut": false,
                "duration": 26,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.createFlowUser({}, function(error, user) {\n        if (error) {\n            done(error);\n        } else {\n            authToken = user.authtoken;\n            token = user.activation_token;\n            _id = user._id;\n            user_uid = user.uid;\n            done();\n        }\n    });\n});",
                "err": {},
                "isRoot": false,
                "uuid": "772c11fd-796b-4454-9813-2929322b179c",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after each\" hook",
                "fullTitle": "contentStack contentStack.getLatestAnnouncement \"after each\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "httpmock.cleanAll();\ndone();",
                "err": {},
                "isRoot": false,
                "uuid": "ea27e7e1-66a3-47e3-8073-d5b66f58658f",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should get latest enterprise announcement.",
                "fullTitle": "contentStack contentStack.getLatestAnnouncement Should get latest enterprise announcement.",
                "timedOut": false,
                "duration": 69,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(\"/v1/cms/announcements\")\n    .send(announcementBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            api.get(apiGetURL)\n                .set(\"authtoken\", authToken)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        res.body.output.uid.should.not.equal(\"\");\n                        done();\n                    }\n                });\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "5f0f1d58-57f9-487d-8fb0-88d9ff2c9c30",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "5f0f1d58-57f9-487d-8fb0-88d9ff2c9c30"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 69,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "7982b5cf-b9c7-4b54-99ea-be67de7c288f",
        "title": "contentStack",
        "fullFile": "D:\\api\\controllers\\test\\contentStack\\getMessage.js",
        "file": "\\controllers\\test\\contentStack\\getMessage.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "a6a9f2e9-54db-4edd-a8e3-0d723f85d0ef",
            "title": "contentStack.getMessage",
            "fullFile": "D:\\api\\controllers\\test\\contentStack\\getMessage.js",
            "file": "\\controllers\\test\\contentStack\\getMessage.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "contentStack contentStack.getMessage \"before each\" hook",
                "timedOut": false,
                "duration": 5340,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n_models.CmsMessage.remove({ message_id: \"UNIT_TEST_MESSAGE\" }, function(error, message) {\n    _models.User.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n        _models.Mail.remove({ $or: [{ to: new RegExp('^test.user+', \"i\") }, { to: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n            commonMock.setSignUpMocks(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/signup\")\n                .send(registrationBody)\n                .expect(httpStatus.CREATED)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        enterpriseAuthToken = res.body.output.authtoken;\n                        var tempRegistrationBody = global.getImmutable(registrationBody);\n                        tempRegistrationBody.email = \"test.user+100000@raweng.com\";\n                        commonMock.setSignUpMocks(httpmock, \"express\", {\n                            email: tempRegistrationBody.email\n                        });\n                        api.post(\"/express/v1/signup\")\n                            .send(tempRegistrationBody)\n                            .expect(httpStatus.CREATED)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    expressAuthToken = res.body.output.authtoken;\n                                    done();\n                                }\n                            });\n                    }\n                });\n        });\n    });\n});",
                "err": {},
                "isRoot": false,
                "uuid": "0bbfcb48-c2eb-42ef-abd3-e4dd265bb922",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after each\" hook",
                "fullTitle": "contentStack contentStack.getMessage \"after each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "httpmock.cleanAll();\ndone();",
                "err": {},
                "isRoot": false,
                "uuid": "c473cec8-6d6c-40e0-9e78-a8a93cecf010",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should get enterprise messages.",
                "fullTitle": "contentStack contentStack.getMessage Should get enterprise messages.",
                "timedOut": false,
                "duration": 59,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nmessageTemplateBody.entry.enterprise = true;\nmessageTemplateBody.entry.express = false;\napi.post(\"/v1/cms/messages\")\n    .send(messageTemplateBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            api.get(\"/enterprise/v1/cms/messages\")\n                .set(\"authtoken\", enterpriseAuthToken)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        var isValid = Array.isArray(res.body.output);\n                        if (isValid) {\n                            _.each(res.body.output, function(item) {\n                                isValid = isValid && typeof(item._id) == \"undefined\" &&\n                                    typeof(item.__v) == \"undefined\";\n                            });\n                        }\n                        isValid.should.equal(true);\n                        done();\n                    }\n                });\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "decf2f77-1423-447e-881d-f28f2e0a7c76",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get specific enterprise message.",
                "fullTitle": "contentStack contentStack.getMessage Should get specific enterprise message.",
                "timedOut": false,
                "duration": 57,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nmessageTemplateBody.entry.enterprise = true;\nmessageTemplateBody.entry.express = false;\napi.post(\"/v1/cms/messages\")\n    .send(messageTemplateBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            api.get(\"/enterprise/v1/cms/messages/UNIT_TEST_MESSAGE\")\n                .set(\"authtoken\", enterpriseAuthToken)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        var isValid = res.body.output.uid == messageTemplateBody.entry.uid &&\n                            typeof(res.body.output._id) == \"undefined\" &&\n                            typeof(res.body.output.__v) == \"undefined\";\n                        isValid.should.equal(true);\n                        done();\n                    }\n                });\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "18f6235e-fbbc-45d2-96d1-8a9cd31268bf",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get express messages.",
                "fullTitle": "contentStack contentStack.getMessage Should get express messages.",
                "timedOut": false,
                "duration": 51,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nmessageTemplateBody.entry.enterprise = false;\nmessageTemplateBody.entry.express = true;\napi.post(\"/v1/cms/messages\")\n    .send(messageTemplateBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            api.get(\"/express/v1/cms/messages\")\n                .set(\"authtoken\", expressAuthToken)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n\n                        var isValid = Array.isArray(res.body.output);\n                        if (isValid) {\n                            _.each(res.body.output, function(item) {\n                                isValid = isValid && typeof(item._id) == \"undefined\" &&\n                                    typeof(item.__v) == \"undefined\";\n                            });\n                        }\n                        isValid.should.equal(true);\n                        done();\n                    }\n                });\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "a760e769-91d4-4dbb-9b9a-2722030fcc9e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get specific express message.",
                "fullTitle": "contentStack contentStack.getMessage Should get specific express message.",
                "timedOut": false,
                "duration": 73,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nmessageTemplateBody.entry.enterprise = false;\nmessageTemplateBody.entry.express = true;\napi.post(\"/v1/cms/messages\")\n    .send(messageTemplateBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            api.get(\"/express/v1/cms/messages/UNIT_TEST_MESSAGE\")\n                .set(\"authtoken\", expressAuthToken)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        var isValid = res.body.output.uid == messageTemplateBody.entry.uid &&\n                            typeof(res.body.output._id) == \"undefined\" &&\n                            typeof(res.body.output.__v) == \"undefined\";\n                        isValid.should.equal(true);\n                        done();\n                    }\n                });\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "604b7071-8ae0-40e8-9313-39c48f998562",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get message not found error message.",
                "fullTitle": "contentStack contentStack.getMessage Should get message not found error message.",
                "timedOut": false,
                "duration": 69,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nmessageTemplateBody.entry.enterprise = false;\nmessageTemplateBody.entry.express = true;\napi.post(\"/v1/cms/messages\")\n    .send(messageTemplateBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            api.get(\"/enterprise/v1/cms/messages/UNIT_TEST_MESSAGE0\")\n                .set(\"authtoken\", enterpriseAuthToken)\n                .expect(httpStatus.BAD_REQUEST)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        res.body.error.message.should.equal(messageList.CMS_MESSAGE_NOT_FOUND);\n                        done();\n                    }\n                });\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "bbfbe4e5-76eb-4fef-9411-9ec3014b2ae1",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "decf2f77-1423-447e-881d-f28f2e0a7c76",
              "18f6235e-fbbc-45d2-96d1-8a9cd31268bf",
              "a760e769-91d4-4dbb-9b9a-2722030fcc9e",
              "604b7071-8ae0-40e8-9313-39c48f998562",
              "bbfbe4e5-76eb-4fef-9411-9ec3014b2ae1"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 309,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "50226068-20f2-41cd-849b-b984952f6425",
        "title": "contentStack",
        "fullFile": "D:\\api\\controllers\\test\\contentStack\\getPlansFaq.js",
        "file": "\\controllers\\test\\contentStack\\getPlansFaq.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "1cb6ebcb-b97c-4b20-a6a9-895f284f6723",
            "title": "contentStack.getPlansFaq",
            "fullFile": "D:\\api\\controllers\\test\\contentStack\\getPlansFaq.js",
            "file": "\\controllers\\test\\contentStack\\getPlansFaq.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "contentStack contentStack.getPlansFaq \"before each\" hook",
                "timedOut": false,
                "duration": 44,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.createFlowUser({}, function(error, user) {\n        if (error) {\n            done(error);\n        } else {\n            authToken = user.authtoken;\n            token = user.activation_token;\n            _id = user._id;\n            user_uid = user.uid;\n            done();\n        }\n    });\n});",
                "err": {},
                "isRoot": false,
                "uuid": "e3d5115d-85fb-4e77-84c5-301fb81c0ee9",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after each\" hook",
                "fullTitle": "contentStack contentStack.getPlansFaq \"after each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "httpmock.cleanAll();\ndone();",
                "err": {},
                "isRoot": false,
                "uuid": "48843ed9-88ca-4520-afda-666b30b92138",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should get enterprise planfaq.",
                "fullTitle": "contentStack contentStack.getPlansFaq Should get enterprise planfaq.",
                "timedOut": false,
                "duration": 51,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(\"/v1/cms/planfaqs\")\n    .send(planFaqBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            api.get(\"/enterprise/v1/cms/planfaqs\")\n                .set(\"authtoken\", authToken)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        var isValid = Array.isArray(res.body.output);\n                        if (isValid) {\n                            _.each(res.body.output, function(item) {\n                                isValid = isValid && typeof(item._id) == \"undefined\" &&\n                                    typeof(item.__v) == \"undefined\";\n                            });\n                        }\n                        isValid.should.equal(true);\n                        done();\n                    }\n                });\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "b6675906-fe30-4527-81e8-d4cea8c5ba1a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get particular enterprise planfaq.",
                "fullTitle": "contentStack contentStack.getPlansFaq Should get particular enterprise planfaq.",
                "timedOut": false,
                "duration": 51,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(\"/v1/cms/planfaqs\")\n    .send(planFaqBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            api.get(\"/enterprise/v1/cms/planfaqs/\" + planFaqBody.entry.uid)\n                .set(\"authtoken\", authToken)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        var isValid = res.body.output.uid == planFaqBody.entry.uid &&\n                            typeof(res.body.output._id) == \"undefined\" &&\n                            typeof(res.body.output.__v) == \"undefined\";\n                        isValid.should.equal(true);\n                        done();\n                    }\n                });\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "6351190c-7d4f-4eec-b258-826e0857eab6",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b6675906-fe30-4527-81e8-d4cea8c5ba1a",
              "6351190c-7d4f-4eec-b258-826e0857eab6"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 102,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "091c0a9c-c6d0-4c71-9d38-8201ce3d1f7b",
        "title": "contentStack",
        "fullFile": "D:\\api\\controllers\\test\\contentStack\\saveAnnouncement.js",
        "file": "\\controllers\\test\\contentStack\\saveAnnouncement.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "7264ad27-9eed-4442-8326-af2acb2d2956",
            "title": "contentStack.saveAnnouncement",
            "fullFile": "D:\\api\\controllers\\test\\contentStack\\saveAnnouncement.js",
            "file": "\\controllers\\test\\contentStack\\saveAnnouncement.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "contentStack contentStack.saveAnnouncement \"before each\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n_models.Announcement.remove({ title: \"UNIT_TEST_ANNOUNCEMENT\" }, function(error, message) {\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "1d8042b5-532c-4bc4-bb6d-86d293c68d60",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after each\" hook",
                "fullTitle": "contentStack contentStack.saveAnnouncement \"after each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "httpmock.cleanAll();\ndone();",
                "err": {},
                "isRoot": false,
                "uuid": "2293d276-7587-4f99-a5be-fd2adda8ce43",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should create announcement.",
                "fullTitle": "contentStack contentStack.saveAnnouncement Should create announcement.",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .send(announcementBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.status.should.equal(\"success\");\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "17797ab2-fa81-4f94-8932-0a96e8aa0e5c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should give require validators errors.",
                "fullTitle": "contentStack contentStack.saveAnnouncement Should give require validators errors.",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .send({})\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.error[\"entry.uid\"].message == messageList.CMS_ANNOUNCEMENT_UID_NOT_FOUND;\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "e186abbc-7210-438e-9f9b-6c48bebd3e8f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should update existing announcement.",
                "fullTitle": "contentStack contentStack.saveAnnouncement Should update existing announcement.",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .send(announcementBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            announcementBody.entry.rich_text_editor = \"UNIT_TEST_ANNOUNCEMENT_BODY_00\";\n            api.post(apiURL)\n                .send(announcementBody)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        _models.Announcement.find({ title: \"UNIT_TEST_ANNOUNCEMENT\" },\n                            function(error, announcement) {\n                                var isValid =\n                                    (announcement || []).length == 1 &&\n                                    (announcement || [{ raw_html_body: \"\" }])[0].raw_html_body == \"UNIT_TEST_ANNOUNCEMENT_BODY_00\" &&\n                                    typeof(res.body.output._id) == \"undefined\" &&\n                                    typeof(res.body.output.__v) == \"undefined\";\n                                isValid.should.equal(true);\n                                done();\n                            });\n                    }\n                });\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "f6f9b8bb-a0fc-4ca0-a111-f49c11df7012",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "17797ab2-fa81-4f94-8932-0a96e8aa0e5c",
              "e186abbc-7210-438e-9f9b-6c48bebd3e8f",
              "f6f9b8bb-a0fc-4ca0-a111-f49c11df7012"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 57,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "1174f99e-3616-437d-af53-f1b72b3c73f8",
        "title": "contentStack",
        "fullFile": "D:\\api\\controllers\\test\\contentStack\\saveEmailTemplate.js",
        "file": "\\controllers\\test\\contentStack\\saveEmailTemplate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "105b2acc-15db-4103-bf2b-8af268405f16",
            "title": "contentStack.saveEmailTemplate",
            "fullFile": "D:\\api\\controllers\\test\\contentStack\\saveEmailTemplate.js",
            "file": "\\controllers\\test\\contentStack\\saveEmailTemplate.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "contentStack contentStack.saveEmailTemplate \"before each\" hook",
                "timedOut": false,
                "duration": 5,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n_models.CmsMail.remove({ template_id: \"UNIT_TEST_TEMPLATE\" }, function(error, template) {\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "bfb173ce-5e3b-4fe5-8b55-4576001fdd32",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after each\" hook",
                "fullTitle": "contentStack contentStack.saveEmailTemplate \"after each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "httpmock.cleanAll();\ndone();",
                "err": {},
                "isRoot": false,
                "uuid": "8442227b-1547-41e7-9162-ae6aaa0f91e3",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should create email template.",
                "fullTitle": "contentStack contentStack.saveEmailTemplate Should create email template.",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .send(emailTemplateBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.status == \"success\" &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\";\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "2ba1ae7b-7b2f-4c7c-b4a0-a5c21158997a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should give require validators errors.",
                "fullTitle": "contentStack contentStack.saveEmailTemplate Should give require validators errors.",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .send({})\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.error[\"entry.uid\"].message == messageList.CMS_EMAIL_UID_NOT_FOUND &&\n                res.body.error[\"entry.enterprise\"].message == messageList.CMS_EMAIL_ENTERPRISE_NOT_FOUND &&\n                res.body.error[\"entry.express\"].message == messageList.CMS_EMAIL_EXPRESS_NOT_FOUND &&\n                res.body.error[\"entry.template_id\"].message == messageList.CMS_EMAIL_TEMPLATES_UID_NOT_FOUND;\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "0b2b91b0-b9a1-46cc-aee0-db7991d6a17a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should update existing email template.",
                "fullTitle": "contentStack contentStack.saveEmailTemplate Should update existing email template.",
                "timedOut": false,
                "duration": 39,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .send(emailTemplateBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            emailTemplateBody.entry.title = \"TITLE_GOT_CHANGED\";\n            api.post(apiURL)\n                .send(emailTemplateBody)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        _models.CmsMail.find({ template_id: \"UNIT_TEST_TEMPLATE\" },\n                            function(error, templates) {\n                                var isValid =\n                                    (templates || []).length == 1 &&\n                                    (templates || [{ title: \"\" }])[0].title == \"TITLE_GOT_CHANGED\" &&\n                                    typeof(res.body.output._id) == \"undefined\" &&\n                                    typeof(res.body.output.__v) == \"undefined\";\n                                isValid.should.equal(true);\n                                done();\n                            });\n                    }\n                });\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "4a130d57-62ad-4c60-8e6d-57c58c266d89",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2ba1ae7b-7b2f-4c7c-b4a0-a5c21158997a",
              "0b2b91b0-b9a1-46cc-aee0-db7991d6a17a",
              "4a130d57-62ad-4c60-8e6d-57c58c266d89"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 67,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "01b04162-d151-48cd-bd12-4fca6e13bce5",
        "title": "contentStack",
        "fullFile": "D:\\api\\controllers\\test\\contentStack\\saveMessage.js",
        "file": "\\controllers\\test\\contentStack\\saveMessage.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "76b5a8e1-1164-401b-ab75-b0b594a220b3",
            "title": "contentStack.saveMessage",
            "fullFile": "D:\\api\\controllers\\test\\contentStack\\saveMessage.js",
            "file": "\\controllers\\test\\contentStack\\saveMessage.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "contentStack contentStack.saveMessage \"before each\" hook",
                "timedOut": false,
                "duration": 2,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n_models.CmsMessage.remove({ message_id: \"UNIT_TEST_MESSAGE\" }, function(error, message) {\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "230cb1d0-03b3-4850-a16b-5772917e3b27",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after each\" hook",
                "fullTitle": "contentStack contentStack.saveMessage \"after each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "httpmock.cleanAll();\ndone();",
                "err": {},
                "isRoot": false,
                "uuid": "fe331188-24ff-4590-b24d-0c8dea057a64",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should create message.",
                "fullTitle": "contentStack contentStack.saveMessage Should create message.",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .send(messageTemplateBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.status == \"success\" &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\";\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "24e06ad0-76e8-47db-aa4c-0732f8fd9724",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should give require validators errors.",
                "fullTitle": "contentStack contentStack.saveMessage Should give require validators errors.",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .send({})\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.error[\"entry.uid\"].message == messageList.CMS_MESSAGE_UID_NOT_FOUND &&\n                res.body.error[\"entry.enterprise\"].message == messageList.CMS_MESSAGE_ENTERPRISE_NOT_FOUND &&\n                res.body.error[\"entry.express\"].message == messageList.CMS_MESSAGE_EXPRESS_NOT_FOUND &&\n                res.body.error[\"entry.message_id\"].message == messageList.CMS_MESSAGE_TEMPLATES_UID_NOT_FOUND;\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "2a7473ef-32b0-4e25-9531-e0b2fb8abc92",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should update existing message.",
                "fullTitle": "contentStack contentStack.saveMessage Should update existing message.",
                "timedOut": false,
                "duration": 40,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .send(messageTemplateBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            messageTemplateBody.entry.title = \"TITLE_GOT_CHANGED\";\n            api.post(apiURL)\n                .send(messageTemplateBody)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        _models.CmsMessage.find({ message_id: \"UNIT_TEST_MESSAGE\" },\n                            function(error, messages) {\n                                var isValid =\n                                    (messages || []).length == 1 &&\n                                    (messages || [{ title: \"\" }])[0].title == \"TITLE_GOT_CHANGED\" &&\n                                    typeof(res.body.output._id) == \"undefined\" &&\n                                    typeof(res.body.output.__v) == \"undefined\";\n                                isValid.should.equal(true);\n                                done();\n                            });\n                    }\n                });\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "7d506ed1-a002-4059-be43-29b0e8a2d199",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "24e06ad0-76e8-47db-aa4c-0732f8fd9724",
              "2a7473ef-32b0-4e25-9531-e0b2fb8abc92",
              "7d506ed1-a002-4059-be43-29b0e8a2d199"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 74,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "83ec58bc-f0f0-4c3e-b3b6-302496bd0179",
        "title": "contentStack",
        "fullFile": "D:\\api\\controllers\\test\\contentStack\\savePlansFaq.js",
        "file": "\\controllers\\test\\contentStack\\savePlansFaq.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "54be8933-8d5c-4e75-b604-12e3068c8db3",
            "title": "contentStack.savePlansFaq",
            "fullFile": "D:\\api\\controllers\\test\\contentStack\\savePlansFaq.js",
            "file": "\\controllers\\test\\contentStack\\savePlansFaq.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "contentStack contentStack.savePlansFaq \"before each\" hook",
                "timedOut": false,
                "duration": 33,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.createFlowUser({}, function(error, user) {\n        if (error) {\n            done(error);\n        } else {\n            authToken = user.authtoken;\n            token = user.activation_token;\n            _id = user._id;\n            user_uid = user.uid;\n            done();\n        }\n    });\n});",
                "err": {},
                "isRoot": false,
                "uuid": "f92aebd7-a6b8-49f5-92b7-13ee4ee305d3",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after each\" hook",
                "fullTitle": "contentStack contentStack.savePlansFaq \"after each\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "httpmock.cleanAll();\ndone();",
                "err": {},
                "isRoot": false,
                "uuid": "55c0c331-e5bf-4697-93fd-050d495e945c",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should save planfaqs.",
                "fullTitle": "contentStack contentStack.savePlansFaq Should save planfaqs.",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .send(planFaqBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.status == \"success\" &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\";\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "8c3e2080-b5f8-4f94-bc22-94fdc4ede67e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should give require validators errors.",
                "fullTitle": "contentStack contentStack.savePlansFaq Should give require validators errors.",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .send({})\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.error[\"entry.uid\"].message == messageList.CMS_PLANFAQ_UID_NOT_FOUND &&\n                res.body.error[\"message\"] == messageList.PLEASE_SEND_VALID_PARAMETERS\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "905ad658-a211-4662-9a30-2ba890e26848",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should update existing planfaqs.",
                "fullTitle": "contentStack contentStack.savePlansFaq Should update existing planfaqs.",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .send(planFaqBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            planFaqBody.entry.answer = \"UNIT_TEST_ANSWER00\";\n            api.post(apiURL)\n                .send(planFaqBody)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        _models.PlansFaq.find({ question_title: \"UNIT_TEST_QUESTION\" },\n                            function(error, planFaq) {\n                                var isValid =\n                                    (planFaq || []).length == 1 &&\n                                    (planFaq || [{ question_title: \"\" }])[0].answer == \"UNIT_TEST_ANSWER00\" &&\n                                    typeof(res.body.output._id) == \"undefined\" &&\n                                    typeof(res.body.output.__v) == \"undefined\";\n\n                                isValid.should.equal(true);\n                                done();\n                            });\n                    }\n                });\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "18844e4f-f42a-4ad4-83d0-865308e1c738",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8c3e2080-b5f8-4f94-bc22-94fdc4ede67e",
              "905ad658-a211-4662-9a30-2ba890e26848",
              "18844e4f-f42a-4ad4-83d0-865308e1c738"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 52,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "c0262af8-c4ee-4d63-8548-9e9048426d33",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\customeIntegration\\createCustomIntegration.enterprise.js",
        "file": "\\controllers\\test\\customeIntegration\\createCustomIntegration.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "3c1702b0-d6c7-48db-a4fe-34d60cfc0981",
            "title": "CustomIntegration.Create",
            "fullFile": "D:\\api\\controllers\\test\\customeIntegration\\createCustomIntegration.enterprise.js",
            "file": "\\controllers\\test\\customeIntegration\\createCustomIntegration.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise CustomIntegration.Create \"before all\" hook",
                "timedOut": false,
                "duration": 2661,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(userTrigger, cbk) {\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        dummyUser = res.body.output;\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "b570948e-290f-46bb-b63e-9cfc6f073329",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise CustomIntegration.Create \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "_models.CustomIntegration.remove({ user_uid: dummyUser.uid }, function(err, deletedFlow) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "18dd8d6b-5490-4ced-bc3f-59cfa87f432e",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise CustomIntegration.Create Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "f37463e6-aa96-48e4-8b01-f73ff438a805",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should give error, if \"label\" key is blank or missing.",
                "fullTitle": "Enterprise CustomIntegration.Create Should give error, if \"label\" key is blank or missing.",
                "timedOut": false,
                "duration": 44,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar missingLabelKey = _.clone(data)\nmissingLabelKey.label = '';\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(missingLabelKey)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "e644189f-1450-4b1b-a47f-9fbe291b1fa0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should give error, if \"code_template\" key is blank or missing.",
                "fullTitle": "Enterprise CustomIntegration.Create Should give error, if \"code_template\" key is blank or missing.",
                "timedOut": false,
                "duration": 39,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar missingLabelKey = _.clone(data)\nmissingLabelKey.code_template = '';\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(missingLabelKey)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "373e3cbd-ed9f-49eb-8461-e4247750218f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should give error, if \"compile_error\" key is blank or missing.",
                "fullTitle": "Enterprise CustomIntegration.Create Should give error, if \"compile_error\" key is blank or missing.",
                "timedOut": false,
                "duration": 35,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar missingLabelKey = _.clone(data)\nmissingLabelKey.compile_error = '';\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(missingLabelKey)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "1696845a-f1f9-4639-af49-29a7f2d6692a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should give error, if \"compiled_result\" key is blank or missing.",
                "fullTitle": "Enterprise CustomIntegration.Create Should give error, if \"compiled_result\" key is blank or missing.",
                "timedOut": false,
                "duration": 43,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar missingLabelKey = _.clone(data)\nmissingLabelKey.compiled_result = '';\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(missingLabelKey)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "5d871006-2f32-45d1-a8cc-4a6564723cfa",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should give error, if \"code_template\" key is not string.",
                "fullTitle": "Enterprise CustomIntegration.Create Should give error, if \"code_template\" key is not string.",
                "timedOut": false,
                "duration": 44,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar invalidCodeTemplate = _.clone(data)\ninvalidCodeTemplate.code_template = {};\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(invalidCodeTemplate)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.CUSTOM_INTEGRATION_PARAM_ERROR);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "43fe3118-5d06-4d6b-9ac8-24c6013d09dd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should give error, if \"compiled_result\" key is not string.",
                "fullTitle": "Enterprise CustomIntegration.Create Should give error, if \"compiled_result\" key is not string.",
                "timedOut": false,
                "duration": 48,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar invalidCompiledResult = _.clone(data)\ninvalidCompiledResult.compiled_result = {};\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(invalidCompiledResult)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.CUSTOM_INTEGRATION_PARAM_ERROR);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "c9fbbbd5-b1c6-4b92-ad00-9e3af44ceb59",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should create custom integration if data is valid.",
                "fullTitle": "Enterprise CustomIntegration.Create Should create custom integration if data is valid.",
                "timedOut": false,
                "duration": 59,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(data)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output.user_uid).to.be.equal(dummyUser.uid);\n            expect(res.body.output).not.to.have.all.keys(['_id', '__v']);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "d38a1ed6-0cf6-41bc-a447-64e37db895f3",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f37463e6-aa96-48e4-8b01-f73ff438a805",
              "e644189f-1450-4b1b-a47f-9fbe291b1fa0",
              "373e3cbd-ed9f-49eb-8461-e4247750218f",
              "1696845a-f1f9-4639-af49-29a7f2d6692a",
              "5d871006-2f32-45d1-a8cc-4a6564723cfa",
              "43fe3118-5d06-4d6b-9ac8-24c6013d09dd",
              "c9fbbbd5-b1c6-4b92-ad00-9e3af44ceb59",
              "d38a1ed6-0cf6-41bc-a447-64e37db895f3"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 323,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "eb4d62bd-15d0-4b4e-9b1b-8603f5087c99",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\customeIntegration\\deleteCustomIntegration.enterprise.js",
        "file": "\\controllers\\test\\customeIntegration\\deleteCustomIntegration.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "794445fe-4740-4537-b89b-e7222bb8bed8",
            "title": "CustomIntegration.Delete",
            "fullFile": "D:\\api\\controllers\\test\\customeIntegration\\deleteCustomIntegration.enterprise.js",
            "file": "\\controllers\\test\\customeIntegration\\deleteCustomIntegration.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise CustomIntegration.Delete \"before all\" hook",
                "timedOut": false,
                "duration": 2728,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(user, cbk) {\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    },\n    function(result, cbk) {\n        dummyUser = result.body.output;\n        api.post(apiURL)\n            .set('authtoken', dummyUser.authtoken)\n            .send(data)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        customIntegration = res.body.output;\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "6aacf6cc-5d64-4f0a-b6d3-29c12cf76384",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise CustomIntegration.Delete \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "_models.CustomIntegration.remove({ user_uid: dummyUser.uid }, function(err, deletedFlow) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "34c0c040-3deb-47ba-ac1e-d290637ae8a8",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise CustomIntegration.Delete Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.delete(apiURL + '/' + customIntegration.uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "686e6244-d817-4214-9e54-2c495477631e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should give error, if integration not found.",
                "fullTitle": "Enterprise CustomIntegration.Delete Should give error, if integration not found.",
                "timedOut": false,
                "duration": 53,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.delete(apiURL + '/dummyIntegration')\n    .set('authtoken', dummyUser.authtoken)\n    .send(data)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.CUSTOM_INTEGRATION_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "c19fc725-4424-4fe5-b48e-0145af8b4c9e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should delete custom if integration found.",
                "fullTitle": "Enterprise CustomIntegration.Delete Should delete custom if integration found.",
                "timedOut": false,
                "duration": 48,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.delete(apiURL + '/' + customIntegration.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .send(data)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output.result).to.be.equal('success');\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "654a4f5d-0244-4dad-93ea-3c801b787e1d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "686e6244-d817-4214-9e54-2c495477631e",
              "c19fc725-4424-4fe5-b48e-0145af8b4c9e",
              "654a4f5d-0244-4dad-93ea-3c801b787e1d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 110,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "a5e923a9-b4b6-494a-809c-6ea205e04743",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\customeIntegration\\getCompiledCustomIntegrationByUserUID.enterprise.js",
        "file": "\\controllers\\test\\customeIntegration\\getCompiledCustomIntegrationByUserUID.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "5a5a15d3-c1e7-43c1-b4c3-3b68cf3160d8",
            "title": "CustomIntegration.GetByUserUID",
            "fullFile": "D:\\api\\controllers\\test\\customeIntegration\\getCompiledCustomIntegrationByUserUID.enterprise.js",
            "file": "\\controllers\\test\\customeIntegration\\getCompiledCustomIntegrationByUserUID.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise CustomIntegration.GetByUserUID \"before all\" hook",
                "timedOut": false,
                "duration": 2817,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(user, cbk) {\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    },\n    function(result, cbk) {\n        dummyUser = result.body.output;\n        api.post(apiURL)\n            .set('authtoken', dummyUser.authtoken)\n            .send(data)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        customIntegration = res.body.output;\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "2b655657-d0b3-45a3-9757-57417723f9a7",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise CustomIntegration.GetByUserUID \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "_models.CustomIntegration.remove({ user_uid: dummyUser.uid }, function(err, deletedFlow) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "2dedbac4-9d50-453d-b6e6-8bbab304b4f4",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise CustomIntegration.GetByUserUID Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + '/compiled')\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "54570c80-00bf-4722-93bb-abf418d073ff",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get custom if integration found.",
                "fullTitle": "Enterprise CustomIntegration.GetByUserUID Should get custom if integration found.",
                "timedOut": false,
                "duration": 47,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + '/compiled')\n    .set('authtoken', dummyUser.authtoken)\n    .send(data)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output).to.be.a('array');\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "43e91be4-d336-4e53-af90-645afe30e175",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "54570c80-00bf-4722-93bb-abf418d073ff",
              "43e91be4-d336-4e53-af90-645afe30e175"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 57,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "b9227bbe-1df1-4b16-ab55-73385f465dd0",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\customeIntegration\\getCustomCss.enterprise.js",
        "file": "\\controllers\\test\\customeIntegration\\getCustomCss.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "8111626f-2a77-46d2-b29f-86d723d50207",
            "title": "CustomIntegration.Update",
            "fullFile": "D:\\api\\controllers\\test\\customeIntegration\\getCustomCss.enterprise.js",
            "file": "\\controllers\\test\\customeIntegration\\getCustomCss.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise CustomIntegration.Update \"before all\" hook",
                "timedOut": false,
                "duration": 2617,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(user, cbk) {\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    },\n    function(result, cbk) {\n        dummyUser = result.body.output;\n        api.post(apiURL)\n            .set('authtoken', dummyUser.authtoken)\n            .send(data)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        customIntegration = res.body.output;\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "a8b675fc-3ec7-420b-bbe2-bf6cf5f53ef2",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise CustomIntegration.Update \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "_models.CustomIntegration.remove({ user_uid: dummyUser.uid }, function(err, deletedFlow) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "a5e04b49-69dd-400c-82d0-be894e399439",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise CustomIntegration.Update Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + '/css')\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "b69f553e-7a4f-42ea-aa89-f9890e99f8c7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get custom integration css.",
                "fullTitle": "Enterprise CustomIntegration.Update Should get custom integration css.",
                "timedOut": false,
                "duration": 67,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + '/css')\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output.length).to.be.equal(1);\n            expect(_.first(res.body.output).integration_uid).not.to.be.equal(null)\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "d28a2960-59e1-481a-a35b-7bd9f5ecf63b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b69f553e-7a4f-42ea-aa89-f9890e99f8c7",
              "d28a2960-59e1-481a-a35b-7bd9f5ecf63b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 81,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "82feb496-12cb-4a13-b245-9a01e8c98519",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\customeIntegration\\getCustomIntegrationByUserUID.enterprise.js",
        "file": "\\controllers\\test\\customeIntegration\\getCustomIntegrationByUserUID.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "ae8b5681-d986-4e50-a5b2-824d4c1f43e7",
            "title": "CustomIntegration.GetByUserUID",
            "fullFile": "D:\\api\\controllers\\test\\customeIntegration\\getCustomIntegrationByUserUID.enterprise.js",
            "file": "\\controllers\\test\\customeIntegration\\getCustomIntegrationByUserUID.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise CustomIntegration.GetByUserUID \"before all\" hook",
                "timedOut": false,
                "duration": 2675,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(user, cbk) {\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    },\n    function(result, cbk) {\n        dummyUser = result.body.output;\n        api.post(apiURL)\n            .set('authtoken', dummyUser.authtoken)\n            .send(data)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        customIntegration = res.body.output;\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "b4fa7f2d-b412-40ed-b1d3-38b3b1493316",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise CustomIntegration.GetByUserUID \"after all\" hook",
                "timedOut": false,
                "duration": 3,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "_models.CustomIntegration.remove({ user_uid: dummyUser.uid }, function(err, deletedFlow) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "7ee45a5d-17d5-4fe8-831d-9bfe60e15a1f",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise CustomIntegration.GetByUserUID Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "ab1e1fad-7555-4907-a619-99e156ac04b9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get custom if integration found.",
                "fullTitle": "Enterprise CustomIntegration.GetByUserUID Should get custom if integration found.",
                "timedOut": false,
                "duration": 53,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(data)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output.length).to.be.equal(1);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "5d955272-9f1f-412a-8aa8-53749e074dac",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ab1e1fad-7555-4907-a619-99e156ac04b9",
              "5d955272-9f1f-412a-8aa8-53749e074dac"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 67,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "2c52d570-370f-4bd9-8acf-013842556351",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\customeIntegration\\getFlowsByCustomIntegration.enterprise.js",
        "file": "\\controllers\\test\\customeIntegration\\getFlowsByCustomIntegration.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "faf5734d-7f25-4052-a827-77cfc3dca33d",
            "title": "CustomIntegration.GetFlows",
            "fullFile": "D:\\api\\controllers\\test\\customeIntegration\\getFlowsByCustomIntegration.enterprise.js",
            "file": "\\controllers\\test\\customeIntegration\\getFlowsByCustomIntegration.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise CustomIntegration.GetFlows \"before all\" hook",
                "timedOut": false,
                "duration": 2875,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(user, cbk) {\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    },\n    function(result, cbk) {\n        dummyUser = result.body.output;\n        api.post(apiURL)\n            .set('authtoken', dummyUser.authtoken)\n            .send(data)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    },\n    function(result, cbk) {\n        customIntegration = result.body.output;\n        flowData.activities[2].uid = customIntegration.uid;\n        api.post(flowURL)\n            .set('authtoken', dummyUser.authtoken)\n            .send(flowData)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                cbk(err, res)\n            })\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        userFlow = res.body.output;\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "beafbc8a-f95c-489c-97a1-036151ca45f9",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise CustomIntegration.GetFlows \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "_models.CustomIntegration.remove({ user_uid: dummyUser.uid }, function(err, deletedFlow) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "2cc48677-b036-4b01-9707-24a7ea50aa4e",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise CustomIntegration.GetFlows Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + '/' + customIntegration.uid + '/flows')\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "932e9a90-5449-464c-9985-50194fd78fec",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of flows of custom  integrtion.",
                "fullTitle": "Enterprise CustomIntegration.GetFlows Should get list of flows of custom  integrtion.",
                "timedOut": false,
                "duration": 47,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + '/' + customIntegration.uid + '/flows')\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output[0]).to.contain.all.keys(['uid', 'name'])\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "8c2c6fad-ee0c-4d57-8c2d-53d921431590",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "932e9a90-5449-464c-9985-50194fd78fec",
              "8c2c6fad-ee0c-4d57-8c2d-53d921431590"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 59,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "ecb2df2c-e910-4cfc-98f1-e787ab51b8ce",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\customeIntegration\\updateCustomIntegration.enterprise.js",
        "file": "\\controllers\\test\\customeIntegration\\updateCustomIntegration.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "6ced4480-5515-4c98-b973-54c7a438d6ae",
            "title": "CustomIntegration.Update",
            "fullFile": "D:\\api\\controllers\\test\\customeIntegration\\updateCustomIntegration.enterprise.js",
            "file": "\\controllers\\test\\customeIntegration\\updateCustomIntegration.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise CustomIntegration.Update \"before all\" hook",
                "timedOut": false,
                "duration": 2770,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(user, cbk) {\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    },\n    function(result, cbk) {\n        dummyUser = result.body.output;\n        api.post(apiURL)\n            .set('authtoken', dummyUser.authtoken)\n            .send(data)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        customIntegration = res.body.output;\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "5a00bcaa-2378-49d6-a589-4a9fefe68314",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise CustomIntegration.Update \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "_models.CustomIntegration.remove({ user_uid: dummyUser.uid }, function(err, deletedFlow) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "6a105562-d9bc-4178-b9de-28ce18e970ad",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise CustomIntegration.Update Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put(apiURL + '/' + customIntegration.uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "168295e8-5bc2-4adb-9383-e678fca9ac07",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should give error, if \"label\" key is blank or missing.",
                "fullTitle": "Enterprise CustomIntegration.Update Should give error, if \"label\" key is blank or missing.",
                "timedOut": false,
                "duration": 44,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar missingLabelKey = _.clone(data)\nmissingLabelKey.label = '';\napi.put(apiURL + '/' + customIntegration.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .send(missingLabelKey)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "e2a365fb-43a5-40ff-b2dc-671f5e6763eb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should give error, if \"code_template\" key is blank or missing.",
                "fullTitle": "Enterprise CustomIntegration.Update Should give error, if \"code_template\" key is blank or missing.",
                "timedOut": false,
                "duration": 41,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar missingLabelKey = _.clone(data)\nmissingLabelKey.code_template = '';\napi.put(apiURL + '/' + customIntegration.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .send(missingLabelKey)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "27feded9-a63f-4587-aef0-0b34c801c2bb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should give error, if \"compile_error\" key is blank or missing.",
                "fullTitle": "Enterprise CustomIntegration.Update Should give error, if \"compile_error\" key is blank or missing.",
                "timedOut": false,
                "duration": 41,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar missingLabelKey = _.clone(data)\nmissingLabelKey.compile_error = '';\napi.put(apiURL + '/' + customIntegration.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .send(missingLabelKey)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "11266686-bbd7-4edf-a934-37dd103c1df8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should give error, if \"compiled_result\" key is blank or missing.",
                "fullTitle": "Enterprise CustomIntegration.Update Should give error, if \"compiled_result\" key is blank or missing.",
                "timedOut": false,
                "duration": 35,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar missingLabelKey = _.clone(data)\nmissingLabelKey.compiled_result = '';\napi.put(apiURL + '/' + customIntegration.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .send(missingLabelKey)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "aaed250d-2617-41a6-bf8f-9be6b35acb28",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should give error, if \"code_template\" key is not string.",
                "fullTitle": "Enterprise CustomIntegration.Update Should give error, if \"code_template\" key is not string.",
                "timedOut": false,
                "duration": 40,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar invalidCodeTemplate = _.clone(data)\ninvalidCodeTemplate.code_template = {};\napi.put(apiURL + '/' + customIntegration.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .send(invalidCodeTemplate)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.CUSTOM_INTEGRATION_PARAM_ERROR);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "2eb40257-c966-425c-82a6-7d6dd1745596",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should give error, if \"compiled_result\" key is not string.",
                "fullTitle": "Enterprise CustomIntegration.Update Should give error, if \"compiled_result\" key is not string.",
                "timedOut": false,
                "duration": 32,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar invalidCompiledResult = _.clone(data)\ninvalidCompiledResult.compiled_result = {};\napi.put(apiURL + '/' + customIntegration.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .send(invalidCompiledResult)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.CUSTOM_INTEGRATION_PARAM_ERROR);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "25a4abd1-2381-42dc-be14-ab40998d7aec",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should give error, if integration not found.",
                "fullTitle": "Enterprise CustomIntegration.Update Should give error, if integration not found.",
                "timedOut": false,
                "duration": 41,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put(apiURL + '/dummyIntegration')\n    .set('authtoken', dummyUser.authtoken)\n    .send(data)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.CUSTOM_INTEGRATION_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "bd8c8322-a5e9-4580-9476-607259e7157b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should update custom integration if data is valid.",
                "fullTitle": "Enterprise CustomIntegration.Update Should update custom integration if data is valid.",
                "timedOut": false,
                "duration": 58,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ndata.label = 'updated';\napi.put(apiURL + '/' + customIntegration.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .send(data)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output.label).to.be.equal('updated');\n            expect(res.body.output).not.to.have.all.keys(['_id', '__v']);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "640e9ef2-d92b-4a4b-a911-f0451be5bfc4",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "168295e8-5bc2-4adb-9383-e678fca9ac07",
              "e2a365fb-43a5-40ff-b2dc-671f5e6763eb",
              "27feded9-a63f-4587-aef0-0b34c801c2bb",
              "11266686-bbd7-4edf-a934-37dd103c1df8",
              "aaed250d-2617-41a6-bf8f-9be6b35acb28",
              "2eb40257-c966-425c-82a6-7d6dd1745596",
              "25a4abd1-2381-42dc-be14-ab40998d7aec",
              "bd8c8322-a5e9-4580-9476-607259e7157b",
              "640e9ef2-d92b-4a4b-a911-f0451be5bfc4"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 341,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "ce649000-fd20-435f-bbff-5621282eff0c",
        "title": "DevOps",
        "fullFile": "D:\\api\\controllers\\test\\devOps\\getFlowDetails.js",
        "file": "\\controllers\\test\\devOps\\getFlowDetails.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "82efbb05-cee2-4d8f-a4ed-a059c93ef12b",
            "title": "DevOps.GetFlowDetails",
            "fullFile": "D:\\api\\controllers\\test\\devOps\\getFlowDetails.js",
            "file": "\\controllers\\test\\devOps\\getFlowDetails.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should give unauthenticated user error ui_admin_key is invalid.",
                "fullTitle": "DevOps DevOps.GetFlowDetails Should give unauthenticated user error ui_admin_key is invalid.",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal('Unauthorized');\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "9ccef7dd-d54a-41da-bb04-805a026f3733",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get data, if valid ui_admin_key sent.",
                "fullTitle": "DevOps DevOps.GetFlowDetails Should get data, if valid ui_admin_key sent.",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('ui_admin_key', config.UI_ADMIN_KEY)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.should.be.instanceOf(Array);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "bc9991cf-ce1d-48b0-a470-a5e15dda3315",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9ccef7dd-d54a-41da-bb04-805a026f3733",
              "bc9991cf-ce1d-48b0-a470-a5e15dda3315"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 29,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "809ed59c-5bf0-4fdf-9e2d-ad62db3df7d3",
        "title": "DevOps",
        "fullFile": "D:\\api\\controllers\\test\\devOps\\getUserDetails.js",
        "file": "\\controllers\\test\\devOps\\getUserDetails.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "120d4ea9-72d5-4c36-b906-c1e1cbca25cc",
            "title": "DevOps.GetUserDetails",
            "fullFile": "D:\\api\\controllers\\test\\devOps\\getUserDetails.js",
            "file": "\\controllers\\test\\devOps\\getUserDetails.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should give unauthenticated user error ui_admin_key is invalid.",
                "fullTitle": "DevOps DevOps.GetUserDetails Should give unauthenticated user error ui_admin_key is invalid.",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal('Unauthorized');\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "66f8cc18-b7cf-46cd-8524-d66f2ecc9d8c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get data, if valid ui_admin_key sent.",
                "fullTitle": "DevOps DevOps.GetUserDetails Should get data, if valid ui_admin_key sent.",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('ui_admin_key', config.UI_ADMIN_KEY)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.should.be.instanceOf(Array);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "3d31f11e-95c5-4231-958a-2d7461f58384",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "66f8cc18-b7cf-46cd-8524-d66f2ecc9d8c",
              "3d31f11e-95c5-4231-958a-2d7461f58384"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 26,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "4f6daec0-d7f0-43f1-ba45-3d4b9fa1bd0d",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\environment\\createEnvironment.js",
        "file": "\\controllers\\test\\environment\\createEnvironment.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "2f7ebf75-7029-47b4-9565-52000a800991",
            "title": "Environment.Create",
            "fullFile": "D:\\api\\controllers\\test\\environment\\createEnvironment.js",
            "file": "\\controllers\\test\\environment\\createEnvironment.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Environment.Create \"before all\" hook",
                "timedOut": false,
                "duration": 224,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data;\n        dummyUser = orgData.owner;\n        dummyUser.authtoken = dummyUser.authtoken;\n        done()\n    });\n})",
                "err": {},
                "isRoot": false,
                "uuid": "6e01eba6-c499-40e6-b5c2-e87a3f78cd5c",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Environment.Create \"after all\" hook",
                "timedOut": false,
                "duration": 2,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.parallel([\n        function(cb) {\n            _models.Environment.remove({\n                    uid: {\n                        \"$in\": [env.uid]\n                    }\n                },\n                function(err) {\n                    cb(err)\n                })\n        }\n    ],\n    function(err, result) {\n        if (err) {\n            done(err)\n        } else {\n            done()\n        }\n    })",
                "err": {},
                "isRoot": false,
                "uuid": "312a4deb-85e4-4f12-8fc0-7ef7a843b0b9",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise Environment.Create Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "969fa106-ced1-42a8-bcf6-2441efff6e76",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should create env, if data is valid.",
                "fullTitle": "Enterprise Environment.Create Should create env, if data is valid.",
                "timedOut": false,
                "duration": 43,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nprojectData.owner_uid = dummyUser.uid\napi.post(apiURL)\n    .set({ authtoken: dummyUser.authtoken })\n    .send(projectData)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            env = res.body.output\n            expect(env.name).equal(projectData.name);\n            expect(env).to.have.any.keys(['name', 'owner_uid']);\n            done()\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "fe10d2ab-823e-4abe-a802-f4ce97f17d4c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error if env name is blank.",
                "fullTitle": "Enterprise Environment.Create Should get error if env name is blank.",
                "timedOut": false,
                "duration": 36,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nprojectData.name = ''\nprojectData.user_uid = dummyUser.uid\napi.post(apiURL)\n    .set({ authtoken: dummyUser.authtoken })\n    .send(projectData)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            expect(res.body.error.name.message).equal(messageList.ENV_NAME_REQUIRED);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "e9da33b1-5efa-4e2e-b391-119c608e5c5d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "969fa106-ced1-42a8-bcf6-2441efff6e76",
              "fe10d2ab-823e-4abe-a802-f4ce97f17d4c",
              "e9da33b1-5efa-4e2e-b391-119c608e5c5d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 88,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "4291888c-3a34-4a1d-b3ee-3f8c65f208f9",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\environment\\getEnvironment.js",
        "file": "\\controllers\\test\\environment\\getEnvironment.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "28d1f2a9-5d8b-4bf4-bb8a-858a7725b718",
            "title": "Environment.Get",
            "fullFile": "D:\\api\\controllers\\test\\environment\\getEnvironment.js",
            "file": "\\controllers\\test\\environment\\getEnvironment.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Environment.Get \"before all\" hook",
                "timedOut": false,
                "duration": 243,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data;\n        dummyUser = orgData.owner;\n        dummyUser.authtoken = dummyUser.authtoken;\n        api.post(apiURL)\n            .set({ authtoken: dummyUser.authtoken })\n            .send(projectData)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    env = res.body.output\n                    done()\n                }\n            });\n   // });\n   // done()\n    });\n})",
                "err": {},
                "isRoot": false,
                "uuid": "4ecd5b68-91c6-44e5-85ba-551ade1a4a5f",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Environment.Get \"after all\" hook",
                "timedOut": false,
                "duration": 2,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.parallel([\n        function(cb) {\n            _models.Environment.remove({\n                    uid: {\n                        \"$in\": [env.uid]\n                    }\n                },\n                function(err) {\n                    cb(err)\n                })\n        }\n    ],\n    function(err, result) {\n        if (err) {\n            done(err)\n        } else {\n            done()\n        }\n    })",
                "err": {},
                "isRoot": false,
                "uuid": "548d933f-a124-4da1-a165-caab6796bb13",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise Environment.Get Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + env.uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "ee3ab360-c902-4d34-bb96-6bf7760b1859",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should update env, if data is valid.",
                "fullTitle": "Enterprise Environment.Get Should update env, if data is valid.",
                "timedOut": false,
                "duration": 49,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + env.uid)\n    .set({ authtoken: dummyUser.authtoken })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            env = res.body.output\n            expect(env.name).equal(projectData.name);\n            done()\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "793d78a2-43b6-4cc0-9357-50f31e66bfa0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error if env not found.",
                "fullTitle": "Enterprise Environment.Get Should get error if env not found.",
                "timedOut": false,
                "duration": 41,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nprojectData.name = ''\nprojectData.user_uid = dummyUser.uid\napi.get(apiURL + 'dummyEnv')\n    .set({ authtoken: dummyUser.authtoken })\n    .send(projectData)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).equal(messageList.ENV_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "bed9b4ce-826a-4adf-90f1-35ce7afa1d94",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ee3ab360-c902-4d34-bb96-6bf7760b1859",
              "793d78a2-43b6-4cc0-9357-50f31e66bfa0",
              "bed9b4ce-826a-4adf-90f1-35ce7afa1d94"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 101,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "759a1eb1-6195-450f-ab3a-d923371ff8a1",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\environment\\listEnvironment.js",
        "file": "\\controllers\\test\\environment\\listEnvironment.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "e6ace0b9-2d4d-4248-9c40-45f75da872b8",
            "title": "Environment.List",
            "fullFile": "D:\\api\\controllers\\test\\environment\\listEnvironment.js",
            "file": "\\controllers\\test\\environment\\listEnvironment.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Environment.List \"before all\" hook",
                "timedOut": false,
                "duration": 287,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data;\n        dummyUser = orgData.owner;\n        dummyUser.authtoken = dummyUser.authtoken;\n        api.post(apiURL)\n            .set({ authtoken: dummyUser.authtoken })\n            .send(projectData)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    env = res.body.output\n                    done()\n                }\n            });\n   // });\n   // done()\n    });\n})",
                "err": {},
                "isRoot": false,
                "uuid": "3f0cb397-549e-4b1e-9514-5e349b917e97",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Environment.List \"after all\" hook",
                "timedOut": false,
                "duration": 2,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.parallel([\n        function(cb) {\n            _models.Environment.remove({\n                    uid: {\n                        \"$in\": [env.uid]\n                    }\n                },\n                function(err) {\n                    cb(err)\n                })\n        }\n    ],\n    function(err, result) {\n        if (err) {\n            done(err)\n        } else {\n            done()\n        }\n    })",
                "err": {},
                "isRoot": false,
                "uuid": "71b9ff5f-9435-41e8-af19-233de0bd4f10",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise Environment.List Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "fac6344f-4903-4135-b456-9a3055489618",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should update env, if data is valid.",
                "fullTitle": "Enterprise Environment.List Should update env, if data is valid.",
                "timedOut": false,
                "duration": 47,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set({ authtoken: dummyUser.authtoken })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            env = res.body.output\n            expect(env.length).gte(1);\n            done()\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "afb569d6-2e4d-4be9-b6c6-f17f6327ef0a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "fac6344f-4903-4135-b456-9a3055489618",
              "afb569d6-2e4d-4be9-b6c6-f17f6327ef0a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 57,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "66ca5f49-b44b-47f4-bf8e-72219f6ac580",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\flow\\cloneUserFlow.enterprise.js",
        "file": "\\controllers\\test\\flow\\cloneUserFlow.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "e38a6852-ea4d-4ada-a468-a15b7de28839",
            "title": "Flow.CloneUserFlow",
            "fullFile": "D:\\api\\controllers\\test\\flow\\cloneUserFlow.enterprise.js",
            "file": "\\controllers\\test\\flow\\cloneUserFlow.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Flow.CloneUserFlow \"before all\" hook",
                "timedOut": false,
                "duration": 419,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar opt = { path: getTriggerPath, body: getTriggerPath };\ncommonMock.triggerCreateSuccess(opt)\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data;\n        async.waterfall([\n                function(cbk) {\n                    api.get('/enterprise/v1/user')\n                        .set('authtoken', orgData.owner.authtoken)\n                        .expect(httpStatus.OK)\n                        .end(function(err, res) {\n                            if (err) {\n                                done(err);\n                            } else {\n                                dummyUser = res.body.output;\n                                cbk(err, dummyUser)\n                            }\n                        });\n                },\n                function(dummyUser, cbk) {\n                    testData.mongoUserTriggerObj.user_uid = dummyUser.uid\n                    _models.UserTrigger.create(testData.mongoUserTriggerObj, function(err, userTrigger) {\n                        cbk(err, userTrigger);\n                    })\n                },\n                function(userTrigger, cbk) {\n                    //var flowData = _.cloneDeep(testData.enterpriseFlowBody)\n                    // _id = dummyUser._id\n                    userTrigger = userTrigger.toJSON()\n                    flowData.trigger.handlers = [userTrigger]\n                    flowData.configurations[0].params = [{\n                        \"key\": \"1\",\n                        \"value\": \"2\",\n                        \"required\": true\n                    }, {\n                        \"key\": \"3\",\n                        \"value\": \"2\",\n                        \"required\": false\n                    }];\n                    flowData.configurations[0].project_params = [{\n                        \"uid\": \"random\",\n                        \"key\": \"param1\",\n                        \"value\": \"parawal\",\n                        \"required\": true,\n                        \"isPassword\": false,\n                        \"hasError\": false\n                    }]\n                    api.post(flowURL)\n                        .set('authtoken', dummyUser.authtoken)\n                        .send(flowData)\n                        .expect(httpStatus.CREATED)\n                        .end(function(err, res) {\n                            cbk(err, res)\n                        })\n                },\n                function(result, cbk) {\n                    userFlow = result.body.output;\n                    projectData.owner_uid = dummyUser.uid\n                    projectData.env_uid = dummyUser.default_env\n                    api.post('/enterprise/v1/projects')\n                        .set('authtoken', dummyUser.authtoken)\n                        .send(projectData)\n                        .expect(httpStatus.CREATED)\n                        .end(function(err, result) {\n                            cbk(err, result);\n                        })\n                }\n            ],\n            function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    var query = _models.Project.findOne({ name: config.default_project, owner_uid: dummyUser.uid })\n                    query.lean().exec(function(err, result) {\n                        if (result) {\n                            dummyUser.default_project = result.uid\n                        }\n                        project = res.body.output;\n                        done()\n                    })\n                }\n            })\n    });\n})",
                "err": {},
                "isRoot": false,
                "uuid": "d1310da2-3216-4b54-8a69-7d5d0a1802b4",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Flow.CloneUserFlow \"after all\" hook",
                "timedOut": false,
                "duration": 2,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nremoveFlow(createdFlows.concat([userFlow.uid, clonedFlow.flow.uid]), done);",
                "err": {},
                "isRoot": false,
                "uuid": "5112ab56-9e36-4a96-b3b4-aa69218b9e92",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Flow.CloneUserFlow Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(flowURL + '/' + userFlow.uid + '/clone')\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "28977737-4cb0-4c1e-afad-6c81e0449f57",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if flow not found.",
                "fullTitle": "Enterprise Flow.CloneUserFlow Should get error, if flow not found.",
                "timedOut": false,
                "duration": 61,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(flowURL + '/dummyFlow/clone')\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.FLOW_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "b8b0e464-4320-4f4a-ae88-54a16dc3a224",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should clone flow, if user flow is found.",
                "fullTitle": "Enterprise Flow.CloneUserFlow Should clone flow, if user flow is found.",
                "timedOut": false,
                "duration": 124,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { path: createTriggerPath, getPath: getTriggerPath + '/handlers', body: { \"push\": [/^fl\\w*/] }, update: true };\ncommonMock.triggerPushSuccess(opt);\nopt.body = { \"push\": [/^fl\\w*/] };\ncommonMock.triggerPullSuccess(opt);\napi.post(flowURL + '/' + userFlow.uid + '/clone')\n    .set('authtoken', dummyUser.authtoken)\n    .send({ \"project_uid\": userFlow.project_uid })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            clonedFlow = res.body.output;\n            expect(clonedFlow).to.have.all.keys(['flow', 'page']);\n            expect(clonedFlow.flow).not.to.have.all.keys(['_id', '__v']);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "e4b99163-4741-4781-adc0-873cf65cb946",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should clone flow in other project, if user sends \"project_uid\" in body.",
                "fullTitle": "Enterprise Flow.CloneUserFlow Should clone flow in other project, if user sends \"project_uid\" in body.",
                "timedOut": false,
                "duration": 145,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { path: createTriggerPath, getPath: getTriggerPath + '/handlers', body: { \"push\": [/^fl\\w*/] }, update: true };\ncommonMock.triggerPushSuccess(opt);\nopt.body = { \"push\": [/^fl\\w*/] };\ncommonMock.triggerPullSuccess(opt);\nvar cloneOpt = { path: createTriggerPath, getPath: '/triggers/clone', body: { \"uid\": [/^fl\\w*/] }, update: true };\ncommonMock.triggerCloneSuccess(cloneOpt);\nvar orgDefaultProj = _.find(orgData.org_projects, { name: config.default_project })\nvar projectParamObj = _.merge(projectParams, { uid: 'random', type: 'param', project_uid: dummyUser.default_project, user_uid: dummyUser.uid })\nvar projectParams = [{\n    \"uid\": \"random\",\n    \"key\": \"param1\",\n    \"value\": \"parawal\",\n    \"required\": true,\n    \"isPassword\": false,\n    \"hasError\": false\n}, {\n    \"uid\": \"random1\",\n    \"key\": \"param1\",\n    \"value\": \"parawal\",\n    \"required\": true,\n    \"isPassword\": false,\n    \"hasError\": false\n}]\nvar params = [{\n    \"key\": \"1\",\n    \"value\": \"\",\n    \"required\": true\n}, {\n    \"key\": \"3\",\n    \"value\": \"\",\n    \"required\": false\n}]\n_models.ConfigSchema.create(projectParamObj, function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        projectParam = result.toJSON()\n        api.post(flowURL + '/' + userFlow.uid + '/clone')\n            .set('authtoken', dummyUser.authtoken)\n            .send({ \"project_uid\": project.uid, project_params: projectParams, params: params })\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    clonedFlow = res.body.output;\n                    expect(clonedFlow).to.have.all.keys(['flow', 'page']);\n                    expect(clonedFlow.flow.errors_obj.length).eq(6)\n                    expect(clonedFlow.flow).not.to.have.all.keys(['_id', '__v']);\n                    expect(clonedFlow.flow.project_uid).to.be.equal(project.uid);\n                    _models.ConfigSchema.find({ type: 'param', project_uid: project.uid }, function(err, result) {\n                        if (err) {\n                            done(err)\n                        } else {\n                            expect(result.length).eq(2)\n                            expect(_.first(result).project_uid).equal(project.uid)\n                            var query = _models.ConfigData.find({ flow_uid: clonedFlow.flow.uid })\n                            query.lean().exec(function(err, results) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    var authData = _.find(results, { type: 'auth' })\n                                    var connData = _.find(results, { type: 'connection' })\n                                    expect(!_.has(authData, 'auth')).to.be.equal(true)\n                                    expect(!_.has(authData, 'connection')).to.be.equal(true)\n                                    expect(_.first(results).project_uid).to.be.equal(project.uid)\n                                    var query = _models.UserConfig.findOne({ project_uid: clonedFlow.flow.project_uid })\n                                    query.lean().exec(function(err, config) {\n                                        if (err) {\n                                            done(err);\n                                        } else {\n                                            expect(_.first(results).config_uid).to.be.equal(config.uid)\n                                            done();\n                                        }\n                                    })\n                                }\n                            })\n                        }\n                    })\n                }\n            });\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "4110e05e-2efc-4f80-a8e9-9dbf5a202120",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should clone flow in inactive state, if user exceeds active flow limit.",
                "fullTitle": "Enterprise Flow.CloneUserFlow Should clone flow in inactive state, if user exceeds active flow limit.",
                "timedOut": false,
                "duration": 154,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { path: createTriggerPath, getPath: getTriggerPath + '/handlers', body: { \"push\": [/^fl\\w*/] }, update: true };\ncommonMock.triggerPushSuccess(opt);\nopt.body = { \"push\": [/^fl\\w*/] };\ncommonMock.triggerPullSuccess(opt);\nasync.waterfall([\n    function(cbk) {\n        var userFlowLimit = (dummyUser.user_plan.flow || {}).active\n        var flowData = _.cloneDeep(testData.enterpriseFlowBody)\n        flowData.owner_uid = dummyUser.uid;\n        flowData.author = [dummyUser.uid];\n        flowData.active = true;\n        async.times(userFlowLimit, function(n, next) {\n            _models.newFlow.create(flowData, function(err, userTrigger) {\n                next(err, userTrigger);\n            })\n        }, function(err, result) {\n            createdFlows = _.map(_.flattenDeep(result), 'uid')\n            cbk(err, result)\n        })\n    },\n    function(result, cbk) {\n        api.post(flowURL + '/' + userFlow.uid + '/clone')\n            .set('authtoken', dummyUser.authtoken)\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                cbk(err, res)\n            });\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        clonedFlow = res.body.output;\n        //expect(res.body.output.flow.active).to.be.false;\n        done();\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "44d2c2e8-4f9b-4792-8560-87f809968660",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if user account is suspended.",
                "fullTitle": "Enterprise Flow.CloneUserFlow Should get error, if user account is suspended.",
                "timedOut": false,
                "duration": 30,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n_models.User.findOneAndUpdate({ uid: dummyUser.uid }, { force_suspend: true }, { new: true }, function(err, user) {\n    if (err) {\n        done(err)\n    } else {\n        api.post(flowURL + '/' + userFlow.uid + '/clone')\n            .set('authtoken', dummyUser.authtoken)\n            .expect(httpStatus.BAD_REQUEST)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    res.body.error.message.should.equal(messageList.FLOW_COPY_USER_PLAN_EXPIRE_ERROR);\n                    done();\n                }\n            });\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "a6cf96d8-dfeb-483d-a946-1ace71439419",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "28977737-4cb0-4c1e-afad-6c81e0449f57",
              "b8b0e464-4320-4f4a-ae88-54a16dc3a224",
              "e4b99163-4741-4781-adc0-873cf65cb946",
              "4110e05e-2efc-4f80-a8e9-9dbf5a202120",
              "44d2c2e8-4f9b-4792-8560-87f809968660",
              "a6cf96d8-dfeb-483d-a946-1ace71439419"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 523,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "3d0af279-ec23-4d71-81bc-66f6428ae9dd",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\flow\\createProjectTemplate.enterprise.js",
        "file": "\\controllers\\test\\flow\\createProjectTemplate.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "095af7a4-ec0d-46ce-9d58-1a0df74edf6c",
            "title": "Project.CreateTemplate",
            "fullFile": "D:\\api\\controllers\\test\\flow\\createProjectTemplate.enterprise.js",
            "file": "\\controllers\\test\\flow\\createProjectTemplate.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Project.CreateTemplate \"before all\" hook",
                "timedOut": false,
                "duration": 367,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data;\n        async.waterfall([\n            function(cbk) {\n                dummyUser = orgData.owner;\n                dummyUser.authtoken = dummyUser.authtoken;\n                testData.mongoUserTriggerObj.user_uid = dummyUser.uid;\n                _models.UserTrigger.create(testData.mongoUserTriggerObj, function(err, userTrigger) {\n                    cbk(err, userTrigger);\n                })\n            },\n            function(userTrigger, cbk) {\n                userTriggerObj = userTrigger.toJSON()\n                flowWithAllData.trigger.handlers = []\n                api.post(flowURL)\n                    .set('authtoken', dummyUser.authtoken)\n                    .send(flowWithAllData)\n                    .expect(httpStatus.CREATED)\n                    .end(function(err, res) {\n                        cbk(err, res)\n                    })\n            }\n        ], function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                orgFlow = res.body.output;\n                _models.newFlow._findOneAndUpdate({ uid: orgFlow.uid }, { is_draft: false }, function(err, updateFlow) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        orgFlow = updateFlow\n                        project = dummyUser.default_project\n                        api.get('/enterprise/v1/projects/' + dummyUser.default_project + '/templateschema')\n                            .set('authtoken', dummyUser.authtoken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (res) {\n                                    json_schema = res.body.output\n                                }\n                                done(err)\n                            })\n                    }\n                })\n            }\n        })\n    });\n})",
                "err": {},
                "isRoot": false,
                "uuid": "cf2ba508-c24a-48c7-a6e7-3d360198afc9",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Project.CreateTemplate \"after all\" hook",
                "timedOut": false,
                "duration": 2,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nhttpmock.cleanAll();\nasync.parallel([\n    function(cb) {\n        _models.ProjectTemplate.remove(function(err, deletedFlow) {\n            cb(err, deletedFlow);\n        })\n    },\n    function(cb) {\n        _models.WorkFlowTemplate.remove(function(err, deletedUserTrigger) {\n            cb(err, deletedUserTrigger);\n        })\n    },\n    function(cb) {\n        _models.UserTrigger.remove({ uid: userTriggerObj.uid }, function(err, deletedUserTrigger) {\n            cb(err, deletedUserTrigger);\n        })\n    }\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "0231bfee-3b50-441d-9128-34682328f720",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Project.CreateTemplate Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL + project + '/templates')\n    .send(userFlow)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "79b17c8e-2dc1-4cb1-9fa8-d6f5b79080ff",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should create project import template.",
                "fullTitle": "Enterprise Project.CreateTemplate Should create project import template.",
                "timedOut": false,
                "duration": 71,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nbody.json_schema = json_schema\napi.post(apiURL + project + '/templates')\n    .set('authtoken', dummyUser.authtoken)\n    .send(body)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var result = res.body.output\n            expect(result).to.have.any.keys(['uid'])\n                // expect(result.workflowTemplates.length).to.equal(1)\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "3e50c167-ef4c-4ff9-a497-d8f5e68f46fd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should create project share template.",
                "fullTitle": "Enterprise Project.CreateTemplate Should create project share template.",
                "timedOut": false,
                "duration": 66,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nbody.json_schema = json_schema\nbody.shared_to = ['abc@xyz.com']\napi.post(apiURL + project + '/templates')\n    .set('authtoken', dummyUser.authtoken)\n    .send(body)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var result = res.body.output\n            expect(result.published).equal(true)\n            expect(result.shared_to.length).gt(0)\n            //expect(result.projectTemplate.shared_to.length).to.equal(1)\n            //expect(result.workflowTemplates.length).to.equal(1)\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "73559c36-cd6b-41a9-b738-ccc5b9cf234e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should give error if  project template is not found.",
                "fullTitle": "Enterprise Project.CreateTemplate Should give error if  project template is not found.",
                "timedOut": false,
                "duration": 37,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL + 'dummyProject/templates')\n    .set('authtoken', dummyUser.authtoken)\n    .send(body)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PROJECT_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "e988fac7-0863-4610-9204-ee845ae4dbae",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should give error if  project template flow is not found.",
                "fullTitle": "Enterprise Project.CreateTemplate Should give error if  project template flow is not found.",
                "timedOut": false,
                "duration": 59,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n_models.newFlow.remove({ uid: orgFlow.uid }, function(err) {\n    if (err) {\n        done(err)\n    } else {\n        api.post(apiURL + project + '/templates')\n            .set('authtoken', dummyUser.authtoken)\n            .send(body)\n            .expect(httpStatus.NOT_FOUND)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    res.body.error.message.should.equal(messageList.NO_DATA_FOUND);\n                    done();\n                }\n            });\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "6de2d930-7a06-4104-b49b-a0567775802c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "79b17c8e-2dc1-4cb1-9fa8-d6f5b79080ff",
              "3e50c167-ef4c-4ff9-a497-d8f5e68f46fd",
              "73559c36-cd6b-41a9-b738-ccc5b9cf234e",
              "e988fac7-0863-4610-9204-ee845ae4dbae",
              "6de2d930-7a06-4104-b49b-a0567775802c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 241,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "4782a1f1-04ab-4ac2-add6-dd4aa382b213",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\flow\\createTemplate.enterprise.js",
        "file": "\\controllers\\test\\flow\\createTemplate.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "bd9b8e3d-bc53-45a8-94c6-6ff13fd7bcba",
            "title": "Flow.CreateTemplate",
            "fullFile": "D:\\api\\controllers\\test\\flow\\createTemplate.enterprise.js",
            "file": "\\controllers\\test\\flow\\createTemplate.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Flow.CreateTemplate \"before all\" hook",
                "timedOut": false,
                "duration": 3028,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar opt = { path: triggerPath, body: triggerPath, times: 3 };\ncommonMock.triggerGetSuccess(opt);\nopt.getPath = getTriggerPath + '/handlers';\nopt.body = { \"push\": [/^fl\\w*/] };\ncommonMock.triggerPushSuccess(opt);\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(userTrigger, cbk) {\n        userTriggerObj = userTrigger\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    },\n    function(result, cbk) {\n        dummyUser = result.body.output;\n        testData.mongoUserTriggerObj.user_uid = dummyUser.uid;\n        _models.UserTrigger.create(testData.mongoUserTriggerObj, function(err, userTrigger) {\n            cbk(err, userTrigger);\n        })\n    },\n    function(userTrigger, cbk) {\n        var userTriggerObj = userTrigger;\n        var flowData = _.cloneDeep(testData.flowBody);\n        flowData.isExpress = false;\n        async.parallel({\n            triggerFlow: function(cb) {\n                var triggerFlow = _.cloneDeep(flowData)\n                triggerFlow.trigger.handlers = [userTriggerObj.uid]\n                createFlow(flowURL, triggerFlow, dummyUser, function(err, result) {\n                    cb(err, result);\n                })\n            },\n            draftFlow: function(cb) {\n                var draftFlow = _.cloneDeep(flowData);\n                draftFlow.is_draft = true;\n                createFlow(flowURL, draftFlow, dummyUser, function(err, result) {\n                    cb(err, result);\n                })\n            },\n            invalidEnvFlow: function(cb) {\n                var IVWHFlow = _.cloneDeep(flowData);\n                IVWHFlow.activities[2].next = [];\n                createFlow(flowURL, IVWHFlow, dummyUser, function(err, result) {\n                    cb(err, result);\n                })\n            }\n        }, function(err, result) {\n            cbk(err, result)\n        })\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        userTriggerFlow = res.triggerFlow._doc;\n        userDraftFlow = res.draftFlow;\n        invalidEnvFlow = res.invalidEnvFlow._doc;\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "4a0641cb-f3c8-4884-8c2c-2de854dbb51e",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Flow.CreateTemplate \"after all\" hook",
                "timedOut": false,
                "duration": 1446,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nhttpmock.cleanAll();\nvar flowUIDS = [userTriggerFlow.uid, userDraftFlow.uid, invalidEnvFlow.uid];\nasync.parallel([\n    function(cb) {\n        _models.newFlow.remove({ uid: { $in: flowUIDS } }, function(err, deletedFlows) {\n            cb(err, deletedFlows)\n        });\n    },\n    function(cb) {\n        _models.UserTrigger.remove({ uid: userTriggerObj.uid }, function(err, deletedUserTrigger) {\n            cb(err, deletedUserTrigger);\n        })\n    },\n    function(cb) {\n        _models.Bill.remove({ flow_uid: { $in: flowUIDS } }, function(err, bill) {\n            cb(err, bill);\n        })\n    },\n    function(cb) {\n        _models.Payload.remove({ flow_uid: { $in: flowUIDS } }, function(err, bill) {\n            cb(err, bill);\n        })\n    },\n    function(cb) {\n        _models.Log.remove({ flow_uid: { $in: flowUIDS } }, function(err, bill) {\n            cb(err, bill);\n        })\n    }\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "bcfd9761-5610-4915-9d65-75b2e7d6c505",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Flow.CreateTemplate Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .send(getExecuteBody(userTriggerFlow))\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "8b9e72fe-d1ad-4b17-a83e-400c90ada001",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if \"flow\" key is blank or missing.",
                "fullTitle": "Enterprise Flow.CreateTemplate Should get error, if \"flow\" key is blank or missing.",
                "timedOut": false,
                "duration": 44,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send({})\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "efd5e6e3-d211-4d7f-ba5b-495a38b6168d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if flow not found.",
                "fullTitle": "Enterprise Flow.CreateTemplate Should get error, if flow not found.",
                "timedOut": false,
                "duration": 48,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar dummyFlowData = getExecuteBody(userTriggerFlow)\ndummyFlowData.flow.uid = 'dummyFlow';\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(dummyFlowData)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.FLOW_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "b32fef69-12c9-4849-ac2a-d554d1cfbce4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if is in \"draft\" state.",
                "fullTitle": "Enterprise Flow.CreateTemplate Should get error, if is in \"draft\" state.",
                "timedOut": false,
                "duration": 42,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(getExecuteBody(userDraftFlow))\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.FLOW_DRAFT_STATE_ENTERPRISE);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "b530c0d2-d86a-45c7-87a8-3f1fb776b2b7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if activities are not valid.",
                "fullTitle": "Enterprise Flow.CreateTemplate Should get error, if activities are not valid.",
                "timedOut": false,
                "duration": 87,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { path: triggerPath, body: triggerPath };\ncommonMock.triggerGetSuccess(opt);\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(getExecuteBody(invalidEnvFlow))\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.FLOW_CONFIGURE_ERROR);\n            done();\n        }\n    })",
                "err": {},
                "isRoot": false,
                "uuid": "f5e5040d-4ba3-45a7-916d-bd8fa61a8fe4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should create template.",
                "fullTitle": "Enterprise Flow.CreateTemplate Should create template.",
                "timedOut": false,
                "duration": 245,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { path: triggerPath, body: triggerPath, times: 2 };\ncommonMock.triggerGetSuccess(opt);\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(getExecuteBody(userTriggerFlow))\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var template = res.body.output\n            expect(template).to.have.all.keys(responseKeys);\n            expect(template.flow_data).to.have.all.keys(['lookup', 'project_params', 'params', 'auth', 'connection', 'trigger']);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "4de9ebdb-cc04-4b1e-92ed-6228262c0e1e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if user account is suspended.",
                "fullTitle": "Enterprise Flow.CreateTemplate Should get error, if user account is suspended.",
                "timedOut": false,
                "duration": 36,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n_models.User.findOneAndUpdate({ uid: dummyUser.uid }, { force_suspend: true }, { new: true }, function(err, user) {\n    if (err) {\n        done(err)\n    } else {\n        api.post(apiURL)\n            .set('authtoken', dummyUser.authtoken)\n            .send(getExecuteBody(userTriggerFlow))\n            .expect(httpStatus.BAD_REQUEST)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    res.body.error.message.should.equal(messageList.FLOW_SUBMIT_USER_PLAN_EXPIRE_ERROR);\n                    done();\n                }\n            });\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "10ad9851-f997-440c-a510-53d8cf0e7401",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8b9e72fe-d1ad-4b17-a83e-400c90ada001",
              "efd5e6e3-d211-4d7f-ba5b-495a38b6168d",
              "b32fef69-12c9-4849-ac2a-d554d1cfbce4",
              "b530c0d2-d86a-45c7-87a8-3f1fb776b2b7",
              "f5e5040d-4ba3-45a7-916d-bd8fa61a8fe4",
              "4de9ebdb-cc04-4b1e-92ed-6228262c0e1e",
              "10ad9851-f997-440c-a510-53d8cf0e7401"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 514,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "aeaf1df9-ead7-496e-ad98-ea66ad7ab03c",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\flow\\createUserFlow.enterprise.js",
        "file": "\\controllers\\test\\flow\\createUserFlow.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "7794598f-b3b1-4c89-af62-9f30ecd06f9e",
            "title": "Flow.CreateUserFlow",
            "fullFile": "D:\\api\\controllers\\test\\flow\\createUserFlow.enterprise.js",
            "file": "\\controllers\\test\\flow\\createUserFlow.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Flow.CreateUserFlow \"before all\" hook",
                "timedOut": false,
                "duration": 336,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data\n        async.waterfall([\n            function(cbk) {\n                api.get('/enterprise/v1/user')\n                    .set('authtoken', orgData.owner.authtoken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            dummyUser = res.body.output;\n                            cbk(err, dummyUser)\n                        }\n                    });\n            },\n            function(dummyUser, cbk) {\n                flowData.owner_uid = dummyUser.uid;\n                flowData.trigger.handlers = [testData.expressTriggerResponse.uid]\n                projectData.owner_uid = dummyUser.uid\n                projectData.env_uid = dummyUser.default_env\n                api.post('/enterprise/v1/projects')\n                    .set('authtoken', dummyUser.authtoken)\n                    .send(projectData)\n                    .expect(httpStatus.CREATED)\n                    .end(function(err, result) {\n                        cbk(err, result);\n                    })\n            }\n        ], function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                project = res.body.output;\n                done()\n            }\n        })\n    });\n});",
                "err": {},
                "isRoot": false,
                "uuid": "cebe8554-5ea4-488c-8211-837eaa931cfd",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Flow.CreateUserFlow \"after all\" hook",
                "timedOut": false,
                "duration": 11,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nhttpmock.cleanAll();\ncreatedFlows.push(userFlow.uid)\n_models.newFlow.remove({ uid: { $in: createdFlows } }, function(err, deletedFlow) {\n    if (err) {\n        done(err)\n    } else {\n        clearRecords(function(err, result) {\n            done(err)\n        })\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "14ecc8fe-6a86-4827-9996-88acb222490c",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Flow.CreateUserFlow Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(flowURL)\n    .send(flowData)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "1c5afad9-34ab-4e01-96ba-ccb50ae8971d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if \"name\" key is missing OR empty.",
                "fullTitle": "Enterprise Flow.CreateUserFlow Should get error, if \"name\" key is missing OR empty.",
                "timedOut": false,
                "duration": 53,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar invalidFlowData = _.omit(flowData, 'name')\napi.post(flowURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(invalidFlowData)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "96d17515-5ac2-4f96-9a10-e8b5d3bb5b4c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should create flow, if flow data is valid.",
                "fullTitle": "Enterprise Flow.CreateUserFlow Should create flow, if flow data is valid.",
                "timedOut": false,
                "duration": 101,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(flowURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(flowData)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            userFlow = res.body.output\n            expect(userFlow).to.contain.all.keys(validKeys)\n            expect(userFlow).not.to.have.all.keys(['_id', '__v']);\n            expect(userFlow.version).to.be.equal(1);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "103c4eb5-db38-449b-a12c-177b3ac3251b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should create flow in inactive state, if user exceeds active flow limit.",
                "fullTitle": "Enterprise Flow.CreateUserFlow Should create flow in inactive state, if user exceeds active flow limit.",
                "timedOut": false,
                "duration": 109,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.waterfall([\n    function(cbk) {\n        var userFlowLimit = (dummyUser.user_plan.flow || {}).active\n        flowData.owner_uid = dummyUser.uid;\n        flowData.author = [dummyUser.uid];\n        async.times(userFlowLimit, function(n, next) {\n            _models.newFlow.create(flowData, function(err, userTrigger) {\n                next(err, userTrigger);\n            })\n        }, function(err, result) {\n            createdFlows = _.map(_.flattenDeep(result), 'uid')\n            cbk(err, result)\n        })\n    },\n    function(result, cbk) {\n        var flowObj = _.cloneDeep(testData.enterpriseFlowBody)\n        api.post(flowURL)\n            .set('authtoken', dummyUser.authtoken)\n            .send(flowObj)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                cbk(err, res)\n            });\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        expect(res.body.output.active).to.be.false;\n        done();\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "1a90d1ff-b609-43ea-a0a4-19ec2ca519ca",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should create flow in other project, if user sends \"project_uid\" in body.",
                "fullTitle": "Enterprise Flow.CreateUserFlow Should create flow in other project, if user sends \"project_uid\" in body.",
                "timedOut": false,
                "duration": 83,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar flowData2 = _.cloneDeep(flowData)\n    //flowData2.project_uid = project.uid\napi.post(flowURL)\n    .set({ 'authtoken': dummyUser.authtoken, project_uid: project.uid })\n    .send(flowData2)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var flow = res.body.output;\n            expect(flow.project_uid).to.be.equal(project.uid)\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "4e91f1d5-e939-4ea5-aa3a-2ce251ce2525",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should create flow within organization.",
                "fullTitle": "Enterprise Flow.CreateUserFlow Should create flow within organization.",
                "timedOut": false,
                "duration": 117,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar tempOrgBody = orgBody;\n// var opt = { path: getTriggerPath, body: getTriggerPath, times: 2 };\n// commonMock.triggerCreateSuccess(opt);\nvar orgFlow = _.cloneDeep(flowData)\napi.post(flowURL)\n    .set({ 'authtoken': orgData.role1.authtoken, org_uid: orgData.organization.uid })\n    .send(orgFlow)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var flow = res.body.output;\n            expect(flow.org_uid).to.be.equal(orgData.organization.uid)\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "47c81ae0-76c6-47f2-b781-f58e4beae8c8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if user account is suspended.",
                "fullTitle": "Enterprise Flow.CreateUserFlow Should get error, if user account is suspended.",
                "timedOut": false,
                "duration": 47,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n_models.User.findOneAndUpdate({ uid: dummyUser.uid }, { force_suspend: true }, { new: true }, function(err, user) {\n    if (err) {\n        done(err)\n    } else {\n        api.post(flowURL)\n            .set('authtoken', dummyUser.authtoken)\n            .send(flowData)\n            .expect(httpStatus.BAD_REQUEST)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    res.body.error.message.should.equal(messageList.USER_PLAN_EXPIRE_ERROR);\n                    done();\n                }\n            });\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "a3fb5495-0f82-474a-9cdc-3ff228b47971",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "1c5afad9-34ab-4e01-96ba-ccb50ae8971d",
              "96d17515-5ac2-4f96-9a10-e8b5d3bb5b4c",
              "103c4eb5-db38-449b-a12c-177b3ac3251b",
              "1a90d1ff-b609-43ea-a0a4-19ec2ca519ca",
              "4e91f1d5-e939-4ea5-aa3a-2ce251ce2525",
              "47c81ae0-76c6-47f2-b781-f58e4beae8c8",
              "a3fb5495-0f82-474a-9cdc-3ff228b47971"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 530,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "a9e37922-c905-44f7-bcaa-35d38bab1a27",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\flow\\deleteUserFlow.enterprise.js",
        "file": "\\controllers\\test\\flow\\deleteUserFlow.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "3ba805cd-f1ae-4b58-99c1-451a1799c1b3",
            "title": "Flow.deleteUserFlow",
            "fullFile": "D:\\api\\controllers\\test\\flow\\deleteUserFlow.enterprise.js",
            "file": "\\controllers\\test\\flow\\deleteUserFlow.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Flow.deleteUserFlow \"before all\" hook",
                "timedOut": false,
                "duration": 386,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data;\n        async.waterfall([\n            function(cbk) {\n                dummyUser = orgData.owner;\n                dummyUser.authtoken = dummyUser.authtoken;\n                testData.mongoUserTriggerObj.user_uid = dummyUser.uid;\n                _models.UserTrigger.create(testData.mongoUserTriggerObj, function(err, userTrigger) {\n                    cbk(err, userTrigger);\n                })\n            },\n            function(userTrigger, cbk) {\n                userTriggerObj = userTrigger\n                projectData.owner_uid = dummyUser.uid\n                projectData.env_uid = dummyUser.default_env\n                api.post('/enterprise/v1/projects')\n                    .set('authtoken', dummyUser.authtoken)\n                    .send(projectData)\n                    .expect(httpStatus.CREATED)\n                    .end(function(err, result) {\n                        cbk(err, result);\n                    })\n            },\n            function(result, cbk) {\n                project = result.body.output;\n                async.parallel([\n                    function(cb) {\n                        saveFlow(flowURL, dummyUser, flowData, function(err, result) {\n                            cb(err, result)\n                        })\n                    },\n                    function(cb) {\n                        var flowData2 = _.cloneDeep(flowData)\n                        api.post(flowURL)\n                            .set({ 'authtoken': dummyUser.authtoken, project_uid: project.uid })\n                            .send(flowData2)\n                            .expect(httpStatus.CREATED)\n                            .end(function(err, res) {\n                                cb(err, res)\n                            })\n                    }\n                ], function(err, results) {\n                    cbk(err, results)\n                })\n            }\n        ], function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                userFlow = res[0].body.output\n                userFlowWithProject = res[1].body.output\n                done()\n            }\n        })\n    });\n})",
                "err": {},
                "isRoot": false,
                "uuid": "d82229cc-8ccb-4455-a786-180fe590a914",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Flow.deleteUserFlow \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nhttpmock.cleanAll();\n_models.newFlow.remove({ uid: userFlow.uid }, function(err, deletedFlow) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "037debd4-db99-4fcf-ac6a-3158331292dd",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Flow.deleteUserFlow Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.delete(flowURL + '/' + userFlow.uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "4037bb2a-5e38-418e-8ace-3e3a7ba511a6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if flow not found.",
                "fullTitle": "Enterprise Flow.deleteUserFlow Should get error, if flow not found.",
                "timedOut": false,
                "duration": 53,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.delete(flowURL + '/dummyFlow')\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.FLOW_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "e886af73-e629-49f6-9074-166e2d05e272",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should delete flow with trigger, if user flow is found.",
                "fullTitle": "Enterprise Flow.deleteUserFlow Should delete flow with trigger, if user flow is found.",
                "timedOut": false,
                "duration": 73,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = {\n    path: '/triggers/handlers/pull',\n    body: {\n        \"flow_uid\": userFlow.uid,\n        \"org_uid\": userFlow.org_uid || null,\n        \"env_uid\": userFlow.env_uid,\n        \"project_uid\": userFlow.project_uid\n    }\n};\ncommonMock.flowTriggerDeleteSuccess(opt);\napi.delete(flowURL + '/' + userFlow.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output.notice).to.equal(messageList.FLOW_DELETE_SUCCESS);\n            _models.newFlow.findOne({ uid: userFlow.uid }, function(err, result) {\n                if (err) {\n                    done(err)\n                } else {\n                    expect(result.deleted_at).not.to.be.null\n                    done();\n                }\n            })\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "6142cc87-84ae-42a3-96ac-14dc18581dc2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should delete flow without trigger, if user flow is found.",
                "fullTitle": "Enterprise Flow.deleteUserFlow Should delete flow without trigger, if user flow is found.",
                "timedOut": false,
                "duration": 89,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar data = { deleted_at: null, trigger: testData.defaultTriggerObj }\n_models.newFlow.findOneAndUpdate({ uid: userFlow.uid }, data, { new: true }, function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        api.delete(flowURL + '/' + userFlow.uid)\n            .set('authtoken', dummyUser.authtoken)\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    expect(res.body.output.notice).to.equal(messageList.FLOW_DELETE_SUCCESS);\n                    _models.newFlow.findOne({ uid: userFlow.uid }, function(err, result) {\n                        if (err) {\n                            done(err)\n                        } else {\n                            expect(result.deleted_at).not.to.be.null\n                            _models.newFlow.findOne({ uid: userFlow.uid }, function(err, result2) {\n                                expect(result2.deleted_at).not.to.be.null\n                                done();\n                            })\n                        }\n                    })\n                }\n            });\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "6f3184b9-c66c-4762-8a94-b05a50c6d7f7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should delete flow other project, if user flow is found.",
                "fullTitle": "Enterprise Flow.deleteUserFlow Should delete flow other project, if user flow is found.",
                "timedOut": false,
                "duration": 82,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar data = { deleted_at: null, trigger: testData.defaultTriggerObj }\n_models.newFlow.findOneAndUpdate({ uid: userFlowWithProject.uid }, data, { new: true }, function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        api.delete(flowURL + '/' + userFlowWithProject.uid)\n            .set({ authtoken: dummyUser.authtoken, project_uid: project.uid })\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    expect(res.body.output.notice).to.equal(messageList.FLOW_DELETE_SUCCESS);\n                    _models.newFlow.findOne({ uid: userFlowWithProject.uid }, function(err, result) {\n                        if (err) {\n                            done(err)\n                        } else {\n                            expect(result.deleted_at).not.to.be.null\n                            expect(result.project_uid).to.be.equal(project.uid)\n                            done();\n                        }\n                    })\n                }\n            });\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "02497454-db5d-4832-ab91-333270bddb8a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "4037bb2a-5e38-418e-8ace-3e3a7ba511a6",
              "e886af73-e629-49f6-9074-166e2d05e272",
              "6142cc87-84ae-42a3-96ac-14dc18581dc2",
              "6f3184b9-c66c-4762-8a94-b05a50c6d7f7",
              "02497454-db5d-4832-ab91-333270bddb8a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 309,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "1deaf066-498c-424a-a44a-6e3f0de97b54",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\flow\\deleteUserFlowVersion.enterprise.js",
        "file": "\\controllers\\test\\flow\\deleteUserFlowVersion.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "5ab01d01-68c3-4f53-b6a9-5906d5bf10b3",
            "title": "Flow.deleteUserFlowVersion",
            "fullFile": "D:\\api\\controllers\\test\\flow\\deleteUserFlowVersion.enterprise.js",
            "file": "\\controllers\\test\\flow\\deleteUserFlowVersion.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Flow.deleteUserFlowVersion \"before all\" hook",
                "timedOut": false,
                "duration": 399,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data;\n        async.waterfall([\n            function(cbk) {\n                dummyUser = orgData.owner;\n                dummyUser.authtoken = dummyUser.authtoken;\n                testData.mongoUserTriggerObj.user_uid = dummyUser.uid;\n                _models.UserTrigger.create(testData.mongoUserTriggerObj, function(err, userTrigger) {\n                    cbk(err, userTrigger);\n                })\n            },\n            function(userTrigger, cbk) {\n                userTriggerObj = userTrigger\n                projectData.owner_uid = dummyUser.uid\n                projectData.env_uid = dummyUser.default_env\n                api.post('/enterprise/v1/projects')\n                    .set('authtoken', dummyUser.authtoken)\n                    .send(projectData)\n                    .expect(httpStatus.CREATED)\n                    .end(function(err, result) {\n                        cbk(err, result);\n                    })\n            },\n            function(result, cbk) {\n                project = result.body.output;\n                async.parallel([\n                    function(cb) {\n                        saveFlow(flowURL, dummyUser, flowData, function(err, result) {\n                            cb(err, result)\n                        })\n                    },\n                    function(cb) {\n                        var flowData2 = _.cloneDeep(flowData)\n                        api.post(flowURL)\n                            .set({ 'authtoken': dummyUser.authtoken, project_uid: project.uid })\n                            .send(flowData2)\n                            .expect(httpStatus.CREATED)\n                            .end(function(err, res) {\n                                cb(err, res)\n                            })\n                    }\n                ], function(err, results) {\n                    cbk(err, results)\n                })\n            }\n        ], function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                userFlow = res[0].body.output\n                userFlowWithProject = res[1].body.output\n                done()\n            }\n        })\n    });\n})",
                "err": {},
                "isRoot": false,
                "uuid": "8c1365e1-2876-4305-8f15-069b8c3f147c",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Flow.deleteUserFlowVersion \"after all\" hook",
                "timedOut": false,
                "duration": 2,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nhttpmock.cleanAll();\n_models.newFlowVersion.remove({ uid: userFlow.uid }, function(err) {\n    if (err) {\n        done(err)\n    } else {\n        _models.newFlow.remove({ uid: userFlow.uid }, function(err, deletedFlow) {\n            if (err) {\n                done(err)\n            } else {\n                done()\n            }\n        })\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "6c152458-6c4e-4fc0-8cc6-893f95954973",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Flow.deleteUserFlowVersion Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.delete(flowURL + userFlow.uid + '/version/1')\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "eafa65df-bbb7-45a0-b5df-88a55a682122",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if flow not found.",
                "fullTitle": "Enterprise Flow.deleteUserFlowVersion Should get error, if flow not found.",
                "timedOut": false,
                "duration": 56,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.delete(flowURL + 'dummyFlow' + '/version/1')\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.FLOW_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "df75997b-dbbd-4e3d-87d2-e6cf14eb8af8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if flow version not found not found.",
                "fullTitle": "Enterprise Flow.deleteUserFlowVersion Should get error, if flow version not found not found.",
                "timedOut": false,
                "duration": 53,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.delete(flowURL + userFlow.uid + '/version/21')\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.FLOW_VERSION_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "3a12f7ae-74dd-42dd-a107-6541a8f89abf",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if flow version not valid.",
                "fullTitle": "Enterprise Flow.deleteUserFlowVersion Should get error, if flow version not valid.",
                "timedOut": false,
                "duration": 59,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.delete(flowURL + userFlow.uid + '/version/dummy')\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "4e27d829-ea74-4814-8779-172151bf2f2e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if user tried to delete current flow version.",
                "fullTitle": "Enterprise Flow.deleteUserFlowVersion Should get error, if user tried to delete current flow version.",
                "timedOut": false,
                "duration": 45,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.delete(flowURL + userFlow.uid + '/version/1')\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.CURRENT_VERSION_DELETE_ERROR);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "16100487-577f-48ae-bea0-16ac51ea9685",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "eafa65df-bbb7-45a0-b5df-88a55a682122",
              "df75997b-dbbd-4e3d-87d2-e6cf14eb8af8",
              "3a12f7ae-74dd-42dd-a107-6541a8f89abf",
              "4e27d829-ea74-4814-8779-172151bf2f2e",
              "16100487-577f-48ae-bea0-16ac51ea9685"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 227,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "c54a7a28-3ef5-4573-8f09-4807729019d7",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\flow\\executeUserFlow.enterprise.js",
        "file": "\\controllers\\test\\flow\\executeUserFlow.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "48599cf1-bd32-4731-864a-63f3a26d0c88",
            "title": "Flow.ExecuteUserFlow",
            "fullFile": "D:\\api\\controllers\\test\\flow\\executeUserFlow.enterprise.js",
            "file": "\\controllers\\test\\flow\\executeUserFlow.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Flow.ExecuteUserFlow \"before all\" hook",
                "timedOut": false,
                "duration": 652,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data;\n        customRoleProject = _.find(orgData.org_projects, { name: 'proj2' })\n        async.waterfall([\n            function(cbk) {\n                var query = _models.newFlow.remove()\n                query.exec(function(err) {\n                    dummyUser = orgData.owner;\n                    dummyUser.authtoken = dummyUser.authtoken;\n                    testData.mongoUserTriggerObj.user_uid = dummyUser.uid;\n                    _models.UserTrigger.create(testData.mongoUserTriggerObj, function(err, userTrigger) {\n                        cbk(err, userTrigger);\n                    })\n                })\n            },\n            function(userTrigger, cbk) {\n                var userTriggerObj = userTrigger;\n                var flowData = _.cloneDeep(testData.flowBody);\n                flowData.isExpress = false;\n                flowData.trigger.handlers = [userTriggerObj]\n                async.parallel({\n                    triggerFlow: function(cb) {\n                        createFlow(flowURL, flowData, dummyUser, function(err, result) {\n                            cb(err, result);\n                        })\n                    },\n                    inactiveFlow: function(cb) {\n                        var inactiveFlow = _.cloneDeep(flowData);\n                        inactiveFlow.active = false;\n                        createFlow(flowURL, inactiveFlow, dummyUser, function(err, result) {\n                            cb(err, result);\n                        })\n                    },\n                    draftFlow: function(cb) {\n                        var draftFlow = _.cloneDeep(flowData);\n                        draftFlow.is_draft = true;\n                        createFlow(flowURL, draftFlow, dummyUser, function(err, result) {\n                            cb(err, result);\n                        })\n                    },\n                    webHookFlow: function(cb) {\n                        var WHFlow = _.cloneDeep(flowData);\n                        WHFlow.trigger = testData.defaultTriggerObj;\n                        WHFlow.settings = testData.webHookSetting;\n                        WHFlow.active = true;\n                        WHFlow.settings = testData.webHookSetting;\n                        createFlow(flowURL, WHFlow, dummyUser, function(err, result) {\n                            cb(err, result);\n                        })\n                    },\n                    orgFlow: function(cb) {\n                        var WHFlow = _.cloneDeep(flowData);\n                        WHFlow.trigger = testData.defaultTriggerObj;\n                        WHFlow.settings = testData.webHookSetting;\n                        WHFlow.active = true;\n                        WHFlow.settings = testData.webHookSetting;\n                        api.post(flowURL)\n                            .set({ 'authtoken': dummyUser.authtoken, org_uid: orgData.organization.uid })\n                            .send(flowData)\n                            .expect(httpStatus.CREATED)\n                            .end(function(err, res) {\n                                var flow = res.body.output;\n                                if (!flowData.is_draft) {\n                                    _models.newFlow.findOneAndUpdate({ uid: flow.uid }, { is_draft: false, preserve_version: true }, { new: true }, function(err, result) {\n                                        cb(err, result)\n                                    })\n                                } else {\n                                    cb(err, flow)\n                                }\n                            })\n                    },\n                    invalidEnvFlow: function(cb) {\n                        var IVWHFlow = _.cloneDeep(flowData);\n                        IVWHFlow.trigger = testData.defaultTriggerObj;\n                        IVWHFlow.settings = testData.webHookSetting;\n                        IVWHFlow.environment[0].params.push({ key: \"body\", required: true });\n                        createFlow(flowURL, IVWHFlow, dummyUser, function(err, result) {\n                            cb(err, result);\n                        })\n                    }\n                }, function(err, result) {\n                    cbk(err, result)\n                })\n            }\n        ], function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                userTriggerFlow = res.triggerFlow._doc;\n                userDraftFlow = res.draftFlow;\n                userWebHookFlow = res.webHookFlow._doc;\n                orgFlow = res.orgFlow._doc;\n                invalidEnvFlow = res.invalidEnvFlow._doc;\n                inactiveFlow = res.inactiveFlow._doc;\n                done()\n            }\n        })\n    });\n})",
                "err": {},
                "isRoot": false,
                "uuid": "b306f663-f321-42f6-91f4-f5be6f7d87e8",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Flow.ExecuteUserFlow \"after all\" hook",
                "timedOut": false,
                "duration": 1606,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nhttpmock.cleanAll();\nvar flowUIDS = [userTriggerFlow.uid, userDraftFlow.uid, userWebHookFlow.uid, invalidEnvFlow.uid];\nasync.parallel([\n    function(cb) {\n        _models.newFlow.remove({ uid: { $in: flowUIDS } }, function(err, deletedFlows) {\n            cb(err, deletedFlows)\n        });\n    },\n    function(cb) {\n        _models.UserTrigger.remove({ uid: userTriggerObj.uid }, function(err, deletedUserTrigger) {\n            cb(err, deletedUserTrigger);\n        })\n    },\n    function(cb) {\n        _models.Bill.remove({ flow_uid: { $in: flowUIDS } }, function(err, bill) {\n            cb(err, bill);\n        })\n    },\n    function(cb) {\n        _models.Payload.remove({ flow_uid: { $in: flowUIDS } }, function(err, bill) {\n            cb(err, bill);\n        })\n    },\n    function(cb) {\n        _models.Log.remove({ flow_uid: { $in: flowUIDS } }, function(err, bill) {\n            cb(err, bill);\n        })\n    }\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        //clearRecords(function(err, result) {\n        done()\n            //})\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "323499a9-c7ee-4d87-9b48-d5fd18bd272e",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Flow.ExecuteUserFlow Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(flowURL + '/' + userTriggerFlow.uid + '/execute')\n    .send(getExecuteBody(userTriggerFlow))\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "7294576f-9ede-4500-9814-332a9d657309",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should execute flow with web hook.",
                "fullTitle": "Enterprise Flow.ExecuteUserFlow Should execute flow with web hook.",
                "timedOut": false,
                "duration": 66,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { user_uid: dummyUser.uid }\ncommonMock.executeFlowTimeOut(opt)\napi.post(flowURL + '/' + userTriggerFlow.uid + '/execute')\n    .set('authtoken', dummyUser.authtoken)\n    .send(getExecuteBody(userTriggerFlow))\n    .expect(400)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).to.be.equal(messageList.QMANGER_SERVER_DOWN);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "3282b51b-43e5-4077-882f-0468ffac7483",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if flow not found.",
                "fullTitle": "Enterprise Flow.ExecuteUserFlow Should get error, if flow not found.",
                "timedOut": false,
                "duration": 49,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(flowURL + '/dummyFlow/execute')\n    .set('authtoken', dummyUser.authtoken)\n    .send(getExecuteBody(userTriggerFlow))\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.FLOW_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "64516bc5-53a1-4e38-a081-84eb9e06d8af",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if is in \"draft\" state.",
                "fullTitle": "Enterprise Flow.ExecuteUserFlow Should get error, if is in \"draft\" state.",
                "timedOut": false,
                "duration": 47,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(flowURL + '/' + userDraftFlow.uid + '/execute')\n    .set('authtoken', dummyUser.authtoken)\n    .send(getExecuteBody(userDraftFlow))\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PARAM_MISSING_IN_ACTIVITY);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "22a46b27-f275-4195-b16a-9b0517440668",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if flow is inavlid.",
                "fullTitle": "Enterprise Flow.ExecuteUserFlow Should get error, if flow is inavlid.",
                "timedOut": false,
                "duration": 59,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(flowURL + '/' + inactiveFlow.uid + '/execute')\n    .set('authtoken', dummyUser.authtoken)\n    .send(getExecuteBody(inactiveFlow))\n    .expect(422)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.FLOW_INACTIVE_STATE_ERROR);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "d97fc95f-8b9a-4e50-ac47-e25a0a112be1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if user account is suspended.",
                "fullTitle": "Enterprise Flow.ExecuteUserFlow Should get error, if user account is suspended.",
                "timedOut": false,
                "duration": 33,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n_models.User.findOneAndUpdate({ uid: dummyUser.uid }, { force_suspend: true }, { new: true }, function(err, user) {\n    if (err) {\n        done(err)\n    } else {\n        api.post(flowURL + '/' + userWebHookFlow.uid + '/execute')\n            .set('authtoken', dummyUser.authtoken)\n            .expect(httpStatus.BAD_REQUEST)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    res.body.error.message.should.equal(messageList.FLOW_RUN_USER_PLAN_EXPIRE_ERROR);\n                    done();\n                }\n            });\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "877a3c2f-b93e-4c74-8649-f8e39c87dc75",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "7294576f-9ede-4500-9814-332a9d657309",
              "3282b51b-43e5-4077-882f-0468ffac7483",
              "64516bc5-53a1-4e38-a081-84eb9e06d8af",
              "22a46b27-f275-4195-b16a-9b0517440668",
              "d97fc95f-8b9a-4e50-ac47-e25a0a112be1",
              "877a3c2f-b93e-4c74-8649-f8e39c87dc75"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 265,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "f61be383-c06f-4ac3-b8a0-7e395719c445",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\flow\\executeUserTriggerFlow.enterprise.js",
        "file": "\\controllers\\test\\flow\\executeUserTriggerFlow.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "4554e7ea-8080-43af-a58d-dc8e6d3c68ca",
            "title": "Flow.ExecuteUserTriggerFlow",
            "fullFile": "D:\\api\\controllers\\test\\flow\\executeUserTriggerFlow.enterprise.js",
            "file": "\\controllers\\test\\flow\\executeUserTriggerFlow.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Flow.ExecuteUserTriggerFlow \"before all\" hook",
                "timedOut": false,
                "duration": 2666,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(userTrigger, cbk) {\n        userTriggerObj = userTrigger\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    },\n    function(result, cbk) {\n        dummyUser = result.body.output;\n        testData.mongoUserTriggerObj.user_uid = dummyUser.uid;\n        _models.UserTrigger.create(testData.mongoUserTriggerObj, function(err, userTrigger) {\n            cbk(err, userTrigger);\n        })\n    },\n    function(userTrigger, cbk) {\n        var userTriggerObj = userTrigger;\n        var flowData = _.clone(testData.flowBody);\n        flowData.environment[0].params = []\n        flowData.isExpress = false;\n        flowData.trigger.handlers = [userTriggerObj.uid]\n        async.parallel({\n            triggerFlow: function(cb) {\n                createFlow(flowURL, flowData, dummyUser, function(err, result) {\n                    cb(err, result);\n                })\n            },\n            draftFlow: function(cb) {\n                var draftFlow = _.clone(flowData);\n                draftFlow.is_draft = true;\n                createFlow(flowURL, draftFlow, dummyUser, function(err, result) {\n                    cb(err, result);\n                })\n            },\n            webHookFlow: function(cb) {\n                var WHFlow = _.clone(flowData);\n                WHFlow.trigger = undefined;\n                WHFlow.settings = testData.webHookSetting;\n                createFlow(flowURL, WHFlow, dummyUser, function(err, result) {\n                    cb(err, result);\n                })\n            },\n            invalidEnvFlow: function(cb) {\n                var IVWHFlow = _.clone(flowData);\n                IVWHFlow.trigger = undefined;\n                IVWHFlow.settings = testData.webHookSetting;\n                IVWHFlow.environment[0].params.push({ key: \"body\", required: true });\n                createFlow(flowURL, IVWHFlow, dummyUser, function(err, result) {\n                    cb(err, result);\n                })\n            }\n        }, function(err, result) {\n            cbk(err, result)\n        })\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        userTriggerFlow = res.triggerFlow._doc;\n        userDraftFlow = res.draftFlow;\n        userWebHookFlow = res.webHookFlow._doc;\n        invalidEnvFlow = res.invalidEnvFlow._doc;\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "9a6aaf24-a896-405c-b140-31ab52003e16",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Flow.ExecuteUserTriggerFlow \"after all\" hook",
                "timedOut": false,
                "duration": 6,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar flowUIDS = [userTriggerFlow.uid];\nasync.parallel([\n    function(cb) {\n        _models.newFlow.remove({ uid: { $in: flowUIDS } }, function(err, deletedFlows) {\n            cb(err, deletedFlows)\n        });\n    },\n    function(cb) {\n        _models.UserTrigger.remove({ uid: userTriggerObj.uid }, function(err, deletedUserTrigger) {\n            cb(err, deletedUserTrigger);\n        })\n    },\n    function(cb) {\n        _models.Bill.remove({ flow_uid: { $in: flowUIDS } }, function(err, bill) {\n            cb(err, bill);\n        })\n    },\n    function(cb) {\n        _models.Payload.remove({ flow_uid: { $in: flowUIDS } }, function(err, bill) {\n            cb(err, bill);\n        })\n    },\n    function(cb) {\n        _models.Log.remove({ flow_uid: { $in: flowUIDS } }, function(err, bill) {\n            cb(err, bill);\n        })\n    }\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "f32b2c91-548f-46df-9cc0-027cf9730c6b",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Flow.ExecuteUserTriggerFlow Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL + userTriggerFlow.uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal('Unauthorized');\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "c765f633-922a-44cd-8d3a-f1a8c181d71b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if flow not found.",
                "fullTitle": "Enterprise Flow.ExecuteUserTriggerFlow Should get error, if flow not found.",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL + 'dummyFlow')\n    .set('ui_admin_key', config.UI_ADMIN_KEY)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.FLOW_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "41c49056-f67e-4b7f-bff5-a4e202a1a102",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if is in \"draft\" state.",
                "fullTitle": "Enterprise Flow.ExecuteUserTriggerFlow Should get error, if is in \"draft\" state.",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL + userDraftFlow.uid)\n    .set('ui_admin_key', config.UI_ADMIN_KEY)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PARAM_MISSING_IN_ACTIVITY);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "4ccecde3-ff0f-4387-98b1-cc4e9a36f01e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if trigger not in active state.",
                "fullTitle": "Enterprise Flow.ExecuteUserTriggerFlow Should get error, if trigger not in active state.",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL + userWebHookFlow.uid)\n    .set('ui_admin_key', config.UI_ADMIN_KEY)\n    .expect(422)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.TRIGGER_NOT_ACTIVE);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "78822ed7-8394-4576-aaa1-70957067adbb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if trigger not found in flow.",
                "fullTitle": "Enterprise Flow.ExecuteUserTriggerFlow Should get error, if trigger not found in flow.",
                "timedOut": false,
                "duration": 26,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n_models.newFlow.findOneAndUpdate({ uid: invalidEnvFlow.uid }, { trigger: undefined }, { new: true }, function(err, result) {\n    if (!result) {\n        err = err || messageList.FLOW_NOT_FOUND\n        done(err);\n    } else {\n        api.post(apiURL + invalidEnvFlow.uid)\n            .set('ui_admin_key', config.UI_ADMIN_KEY)\n            .expect(httpStatus.BAD_REQUEST)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    res.body.error.message.should.equal(messageList.TRIGGER_NOT_FOUND);\n                    done();\n                }\n            });\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "33221a15-70ea-4e28-8f4d-0beafd12ef07",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should execute flow with trigger.",
                "fullTitle": "Enterprise Flow.ExecuteUserTriggerFlow Should execute flow with trigger.",
                "timedOut": false,
                "duration": 35,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { user_uid: dummyUser.uid }\ncommonMock.executeFlowSuccess(opt)\napi.post(apiURL + userTriggerFlow.uid)\n    .set('ui_admin_key', config.UI_ADMIN_KEY)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body).to.have.all.keys(responseKeys);\n            expect(res.body.response).to.be.equal(messageList.FLOW_ENQUE_SUCCESS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "52bae88c-be8d-42d1-ad96-c67077e0eee9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error,if user account has been suspended.",
                "fullTitle": "Enterprise Flow.ExecuteUserTriggerFlow Should get error,if user account has been suspended.",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.waterfall([\n    function(cbk) {\n        _models.User.findOneAndUpdate({ uid: dummyUser.uid }, { force_suspend: true }, { new: true }, function(err, updatedUser) {\n            cbk(err, updatedUser);\n        })\n    },\n    function(result, cbk) {\n        // var updatedUser = result.body.output;\n        api.post(apiURL + userTriggerFlow.uid)\n            .set('ui_admin_key', config.UI_ADMIN_KEY)\n            .expect(httpStatus.PAYMENT_REQUIRED)\n            .end(function(err, res) {\n                cbk(err, res);\n            });\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        expect(res.body.error.message).to.be.equal(messageList.USER_ACCOUNT_EXPIRED);\n        done();\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "8af80f3f-7543-4b0f-b257-ce2b7a45ebaf",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c765f633-922a-44cd-8d3a-f1a8c181d71b",
              "41c49056-f67e-4b7f-bff5-a4e202a1a102",
              "4ccecde3-ff0f-4387-98b1-cc4e9a36f01e",
              "78822ed7-8394-4576-aaa1-70957067adbb",
              "33221a15-70ea-4e28-8f4d-0beafd12ef07",
              "52bae88c-be8d-42d1-ad96-c67077e0eee9",
              "8af80f3f-7543-4b0f-b257-ce2b7a45ebaf"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 137,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "32181102-fb84-4654-8d8f-13c3ed58bba6",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\flow\\generateFlowSID.enterprise.js",
        "file": "\\controllers\\test\\flow\\generateFlowSID.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "df678155-003b-4f87-91f5-ef89ac646e6e",
            "title": "Flow.generateSID",
            "fullFile": "D:\\api\\controllers\\test\\flow\\generateFlowSID.enterprise.js",
            "file": "\\controllers\\test\\flow\\generateFlowSID.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Flow.generateSID \"before all\" hook",
                "timedOut": false,
                "duration": 2868,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(user, cbk) {\n        testData.mongoUserTriggerObj.user_uid = user.uid;\n        _models.UserTrigger.create(testData.mongoUserTriggerObj, function(err, userTrigger) {\n            cbk(err, userTrigger);\n        })\n    },\n    function(userTrigger, cbk) {\n        userTriggerObj = userTrigger\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result, userTriggerObj);\n            })\n    },\n    function(result, userTriggerObj, cbk) {\n        dummyUser = result.body.output;\n        //flowWithAllData.trigger.handlers[0] = userTriggerObj\n        api.post(flowURL)\n            .set('authtoken', dummyUser.authtoken)\n            .send(flowWithAllData)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                cbk(err, res)\n            })\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        userFlow = res.body.output;\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "0fcdc136-196d-4b62-8e18-f35831233f2d",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Flow.generateSID \"after all\" hook",
                "timedOut": false,
                "duration": 2,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nhttpmock.cleanAll();\nasync.parallel([\n    function(cb) {\n        _models.newFlow.remove({ uid: userFlow.uid }, function(err, deletedFlow) {\n            cb(err, deletedFlow);\n        })\n    },\n    function(cb) {\n        _models.UserTrigger.remove({ uid: userTriggerObj.uid }, function(err, deletedUserTrigger) {\n            cb(err, deletedUserTrigger);\n        })\n    }\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "c7bb3d05-9f18-476e-895a-53e77d842caf",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Flow.generateSID Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put(flowURL + '/' + userFlow.uid + '/generatesid')\n    .send(userFlow)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "38f72df0-25a6-4e49-be55-7995733fd48f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if flow not found.",
                "fullTitle": "Enterprise Flow.generateSID Should get error, if flow not found.",
                "timedOut": false,
                "duration": 51,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put(flowURL + '/dummyFlow' + '/generatesid')\n    .set('authtoken', dummyUser.authtoken)\n    .send(userFlow)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.FLOW_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "3074e071-5a0d-46a7-bb95-1e86c1c94d70",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should generate SID,  if user sends a valid data.",
                "fullTitle": "Enterprise Flow.generateSID Should generate SID,  if user sends a valid data.",
                "timedOut": false,
                "duration": 57,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put(flowURL + '/' + userFlow.uid + '/generatesid')\n    .set('authtoken', dummyUser.authtoken)\n    .send({})\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var flow = res.body.output\n            expect(flow.sid).to.not.equal(userFlow.sid)\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "729eae5b-21ea-447e-b8a8-82461188411d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "38f72df0-25a6-4e49-be55-7995733fd48f",
              "3074e071-5a0d-46a7-bb95-1e86c1c94d70",
              "729eae5b-21ea-447e-b8a8-82461188411d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 120,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "4aec067c-23e7-437d-88c1-f08df764ce92",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\flow\\generateWebhookToken.enterprise.js",
        "file": "\\controllers\\test\\flow\\generateWebhookToken.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "c6090f7a-fdb2-4a5f-b5e2-ef319fb50a55",
            "title": "Flow.generateWebHookToken",
            "fullFile": "D:\\api\\controllers\\test\\flow\\generateWebhookToken.enterprise.js",
            "file": "\\controllers\\test\\flow\\generateWebhookToken.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Flow.generateWebHookToken \"before all\" hook",
                "timedOut": false,
                "duration": 2605,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(user, cbk) {\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        dummyUser = res.body.output;\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "acf43622-0d92-4c94-9342-eb62a9758b0c",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Flow.generateWebHookToken Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "2a19c4c1-27dd-44c9-9bac-187337c6909e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get flow, if user flow is found.",
                "fullTitle": "Enterprise Flow.generateWebHookToken Should get flow, if user flow is found.",
                "timedOut": false,
                "duration": 60,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output).not.null\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "4dff8b4b-f4f7-462c-bd0b-6a76ebaf213a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2a19c4c1-27dd-44c9-9bac-187337c6909e",
              "4dff8b4b-f4f7-462c-bd0b-6a76ebaf213a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 71,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "e2f3cea2-0798-4571-b45a-c4ee698191a6",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\flow\\getFlowTestDataByFlow.enterprise.js",
        "file": "\\controllers\\test\\flow\\getFlowTestDataByFlow.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "dd74ed8e-78d7-4860-a13c-9749e4b39675",
            "title": "Flows.getFlowTestsDataByFlow",
            "fullFile": "D:\\api\\controllers\\test\\flow\\getFlowTestDataByFlow.enterprise.js",
            "file": "\\controllers\\test\\flow\\getFlowTestDataByFlow.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Flows.getFlowTestsDataByFlow \"before all\" hook",
                "timedOut": false,
                "duration": 218,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data\n        async.waterfall([\n            function(cbk) {\n                dummyUser = orgData.owner\n                dummyUser.authtoken = dummyUser.authtoken\n                flowTestObj.user_uid = dummyUser.uid\n                flowTestObj.env_uid = dummyUser.default_env\n                _models.FlowTest.create(flowTestObj, function(err, result) {\n                    cbk(err, result);\n                })\n            }\n        ], function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                flowTestData = res.toJSON()\n                done()\n            }\n        })\n    });\n})",
                "err": {},
                "isRoot": false,
                "uuid": "86373be6-f4e4-4c5c-b3b8-0728c3358aa9",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Flows.getFlowTestsDataByFlow \"after all\" hook",
                "timedOut": false,
                "duration": 2,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n_models.FlowTest.remove(function(err) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "c82e28a3-61c3-42b9-ae8c-7027ca93fc44",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Flows.getFlowTestsDataByFlow Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + '?flow_uid=' + flowTestData.flow_uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "11635b8c-6b13-424c-8e1c-54bc932664ff",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of flowTest data.",
                "fullTitle": "Enterprise Flows.getFlowTestsDataByFlow Should get list of flowTest data.",
                "timedOut": false,
                "duration": 43,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + '?flow_uid=' + flowTestData.flow_uid)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(_.first(res.body.output).flow_uid).to.be.equal(flowTestData.flow_uid)\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "435c3664-8ec8-4a2e-9919-d3c44ec64ba1",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "11635b8c-6b13-424c-8e1c-54bc932664ff",
              "435c3664-8ec8-4a2e-9919-d3c44ec64ba1"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 52,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "7e4fcc80-9ba7-4333-a874-9741cb8a5f41",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\flow\\getFlowTestDataByUID.enterprise.js",
        "file": "\\controllers\\test\\flow\\getFlowTestDataByUID.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "e73abe54-4dc5-4cbe-9d84-8a506225475d",
            "title": "Flows.getFlowTestsDataByUID",
            "fullFile": "D:\\api\\controllers\\test\\flow\\getFlowTestDataByUID.enterprise.js",
            "file": "\\controllers\\test\\flow\\getFlowTestDataByUID.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Flows.getFlowTestsDataByUID \"before all\" hook",
                "timedOut": false,
                "duration": 185,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data\n        async.waterfall([\n            function(cbk) {\n                dummyUser = orgData.owner\n                dummyUser.authtoken = dummyUser.authtoken\n                flowTestObj.user_uid = dummyUser.uid\n                flowTestObj.env_uid = dummyUser.default_env\n                _models.FlowTest.remove(function(err) {\n                    _models.FlowTest.create(flowTestObj, function(err, result) {\n                        cbk(err, result);\n                    })\n                })\n            }\n        ], function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                flowTestData = res.toJSON()\n                done()\n            }\n        })\n    });\n})",
                "err": {},
                "isRoot": false,
                "uuid": "4a1fe478-7167-44ec-99ce-8886adb30347",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Flows.getFlowTestsDataByUID \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n_models.FlowTest.remove(function(err) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "e2a5dbea-fcf9-43d3-a9b9-7c886334658d",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Flows.getFlowTestsDataByUID Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + flowTestObj.uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "9835020c-9a90-4bd1-b434-a34a6284ac47",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if flow not found.",
                "fullTitle": "Enterprise Flows.getFlowTestsDataByUID Should get error, if flow not found.",
                "timedOut": false,
                "duration": 44,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + 'dummy')\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).to.be.equal(messageList.NO_DATA_FOUND)\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "129720b6-3713-4842-affd-d00c2371b9c6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get flowTest data.",
                "fullTitle": "Enterprise Flows.getFlowTestsDataByUID Should get flowTest data.",
                "timedOut": false,
                "duration": 44,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + flowTestObj.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output.flow_uid).to.be.equal(flowTestObj.flow_uid)\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "837d6281-988f-452c-9ee7-ef16983b20c9",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9835020c-9a90-4bd1-b434-a34a6284ac47",
              "129720b6-3713-4842-affd-d00c2371b9c6",
              "837d6281-988f-452c-9ee7-ef16983b20c9"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 97,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "596d5d6d-5e34-4303-be0b-f25a454ae966",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\flow\\getUserFlow.enterprise.js",
        "file": "\\controllers\\test\\flow\\getUserFlow.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "a517a2e9-912e-4799-9aff-d3f27f328f74",
            "title": "Flow.GetUserFlow",
            "fullFile": "D:\\api\\controllers\\test\\flow\\getUserFlow.enterprise.js",
            "file": "\\controllers\\test\\flow\\getUserFlow.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Flow.GetUserFlow \"before all\" hook",
                "timedOut": false,
                "duration": 353,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data\n        async.waterfall([\n            function(cbk) {\n                dummyUser = orgData.owner\n                dummyUser.authtoken = dummyUser.authtoken\n                testData.mongoUserTriggerObj.user_uid = dummyUser.uid;\n                _models.UserTrigger.create(testData.mongoUserTriggerObj, function(err, userTrigger) {\n                    cbk(err, userTrigger);\n                })\n            },\n            function(result, cbk) {\n                api.post(flowURL)\n                    .set('authtoken', dummyUser.authtoken)\n                    .send(testData.enterpriseFlowBody)\n                    .expect(httpStatus.CREATED)\n                    .end(function(err, res) {\n                        cbk(err, res)\n                    })\n            },\n            function(result, cbk) {\n                userFlow = result.body.output;\n                api.post(flowURL)\n                    .set({ 'authtoken': dummyUser.authtoken, org_uid: orgData.organization.uid })\n                    .send(testData.enterpriseFlowBody)\n                    .expect(httpStatus.CREATED)\n                    .end(function(err, res) {\n                        cbk(err, res)\n                    })\n            }\n        ], function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                orgFlow = res.body.output;\n                done()\n            }\n        })\n    });\n})",
                "err": {},
                "isRoot": false,
                "uuid": "43eec663-179b-4f4f-8f8b-2f729b6cfa42",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Flow.GetUserFlow \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nhttpmock.cleanAll();\n_models.newFlow.remove({ uid: userFlow.uid }, function(err, deletedFlow) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "4f42f499-893b-449c-9e8f-620989a55488",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Flow.GetUserFlow Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "50acb253-29c6-4ebd-a315-819551ca3efb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if flow not found.",
                "fullTitle": "Enterprise Flow.GetUserFlow Should get error, if flow not found.",
                "timedOut": false,
                "duration": 52,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.FLOW_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "4eab7566-1f49-46bd-a44c-a6088839ca9c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get flow, if user flow is found.",
                "fullTitle": "Enterprise Flow.GetUserFlow Should get flow, if user flow is found.",
                "timedOut": false,
                "duration": 62,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { path: triggerPath, body: triggerPath };\ncommonMock.triggerGetSuccess(opt);\napi.get(flowURL + '/' + userFlow.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.should.have.property('name');\n            expect(res.body.output).not.to.have.all.keys(['_id', '__v']);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "5a9926f9-7ab8-4fc0-898a-bc023808c924",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get org flow, if user flow is found.",
                "fullTitle": "Enterprise Flow.GetUserFlow Should get org flow, if user flow is found.",
                "timedOut": false,
                "duration": 65,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { path: triggerPath, body: triggerPath };\ncommonMock.triggerGetSuccess(opt);\napi.get(flowURL + '/' + orgFlow.uid)\n    .set({ 'authtoken': dummyUser.authtoken, org_uid: orgData.organization.uid })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.should.have.property('name');\n            expect(res.body.output.org_uid).equal(orgData.organization.uid);\n            expect(res.body.output).not.to.have.all.keys(['_id', '__v']);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "e093d910-b683-4582-b621-f89dd6ad0d25",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "50acb253-29c6-4ebd-a315-819551ca3efb",
              "4eab7566-1f49-46bd-a44c-a6088839ca9c",
              "5a9926f9-7ab8-4fc0-898a-bc023808c924",
              "e093d910-b683-4582-b621-f89dd6ad0d25"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 188,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "e83f40bd-3ecf-4a99-8a33-cb5dd1a8b0a3",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\flow\\getUserFlowLastRun.enterprise.js",
        "file": "\\controllers\\test\\flow\\getUserFlowLastRun.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "c286a017-740a-4f25-abf0-678623742c72",
            "title": "Flow.GetUserFlowLastRun",
            "fullFile": "D:\\api\\controllers\\test\\flow\\getUserFlowLastRun.enterprise.js",
            "file": "\\controllers\\test\\flow\\getUserFlowLastRun.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Flow.GetUserFlowLastRun \"before all\" hook",
                "timedOut": false,
                "duration": 2651,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(user, cbk) {\n        testData.mongoUserTriggerObj.user_uid = user.uid;\n        _models.UserTrigger.create(testData.mongoUserTriggerObj, function(err, userTrigger) {\n            cbk(err, userTrigger);\n        })\n    },\n    function(userTrigger, cbk) {\n        userTriggerObj = userTrigger\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    },\n    function(result, cbk) {\n        dummyUser = result.body.output;\n        api.post(flowURL)\n            .set('authtoken', dummyUser.authtoken)\n            .send(testData.enterpriseFlowBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                cbk(err, res)\n            })\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        userFlow = res.body.output;\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "4cd09b7a-d9d7-4347-95d4-64d76879d9ed",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Flow.GetUserFlowLastRun \"after all\" hook",
                "timedOut": false,
                "duration": 2,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n_models.newFlow.remove({ uid: userFlow.uid }, function(err, deletedFlow) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "f762fb42-d94c-4be1-a261-d37f805fa362",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Flow.GetUserFlowLastRun Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "6a2a5f0b-3d3d-46ec-9a74-7b9005dfbbc6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if flow not found.",
                "fullTitle": "Enterprise Flow.GetUserFlowLastRun Should get error, if flow not found.",
                "timedOut": false,
                "duration": 60,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.FLOW_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "9028e0cb-2386-45e1-a5a3-ebab86b6eedb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get flow last run, if user flow is found.",
                "fullTitle": "Enterprise Flow.GetUserFlowLastRun Should get flow last run, if user flow is found.",
                "timedOut": false,
                "duration": 53,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(flowURL + '/' + userFlow.uid + '/lastrun')\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output).to.have.all.keys(['duration', 'credits'])\n            expect(res.body.output).not.to.have.all.keys(['_id', '__v']);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "eb9bbc24-4e50-4213-a40e-84ea61d79250",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "6a2a5f0b-3d3d-46ec-9a74-7b9005dfbbc6",
              "9028e0cb-2386-45e1-a5a3-ebab86b6eedb",
              "eb9bbc24-4e50-4213-a40e-84ea61d79250"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 122,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "c9e9e3d9-1d8e-452e-8a3f-068b100963f8",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\flow\\getUsersDistinctFlowNames.enterprise.js",
        "file": "\\controllers\\test\\flow\\getUsersDistinctFlowNames.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "03c2afed-9881-4acb-812b-7139be8e89df",
            "title": "Flow",
            "fullFile": "D:\\api\\controllers\\test\\flow\\getUsersDistinctFlowNames.enterprise.js",
            "file": "\\controllers\\test\\flow\\getUsersDistinctFlowNames.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "816af001-0430-4385-8200-68e35de45f57",
                "title": "Flow.getUsersDistinctFlowNames",
                "fullFile": "D:\\api\\controllers\\test\\flow\\getUsersDistinctFlowNames.enterprise.js",
                "file": "\\controllers\\test\\flow\\getUsersDistinctFlowNames.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Enterprise Flow Flow.getUsersDistinctFlowNames \"before all\" hook",
                    "timedOut": false,
                    "duration": 3053,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveRecords(function() {\n    commonMock.setSignUpMocks(httpmock, \"enterprise\");\n    api.post(\"/enterprise/v1/signup\")\n        .send(registrationBody)\n        .expect(httpStatus.CREATED)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                authToken = res.body.output.authtoken;\n                _id = res.body.output._id;\n                saveUserFlows({\n                    authtoken: authToken,\n                    user_uid: res.body.output.uid\n                }, function(error, flows) {\n                    saveBillEntries({\n                        authtoken: authToken,\n                        user_uid: res.body.output.uid,\n                        flow_uid: flows[0].uid\n                    }, function(error, billEntries) {\n                        done();\n                    });\n                });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3349893c-4c54-48c1-a5a8-e4e91789bab5",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Flow Flow.getUsersDistinctFlowNames \"after all\" hook",
                    "timedOut": false,
                    "duration": 5,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveRecords(function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d0079d9b-ea13-4934-a190-1c07800ae8ec",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Flow Flow.getUsersDistinctFlowNames \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7602afe0-e1b1-46e0-8136-3e18e2d74382",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get list of user flows.",
                    "fullTitle": "Enterprise Flow Flow.getUsersDistinctFlowNames Should get list of user flows.",
                    "timedOut": false,
                    "duration": 43,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (Array.isArray(res.body.output)) {\n                isValid = res.body.output.length == 5;\n                _.each(res.body.output, function(item) {\n                    isValid = isValid && typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\";\n                });\n            }\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "12ddc93d-e16f-48f3-9089-43caec266223",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Flow Flow.getUsersDistinctFlowNames Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .send({})\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "59bdf8d9-30dc-420d-9c75-826a39d23eff",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "12ddc93d-e16f-48f3-9089-43caec266223",
                  "59bdf8d9-30dc-420d-9c75-826a39d23eff"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 55,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "3fc3edbe-0d9e-4713-9ec7-110a8b037a8f",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\flow\\getUsersDistinctFlowNamesOrg.enterprise.js",
        "file": "\\controllers\\test\\flow\\getUsersDistinctFlowNamesOrg.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "f3709b02-32fa-47c7-80c7-6f97423d571e",
            "title": "Flow",
            "fullFile": "D:\\api\\controllers\\test\\flow\\getUsersDistinctFlowNamesOrg.enterprise.js",
            "file": "\\controllers\\test\\flow\\getUsersDistinctFlowNamesOrg.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "89f67a2c-8319-40a1-b855-8e88433d6357",
                "title": "Flow.getUsersDistinctFlowNamesOrg",
                "fullFile": "D:\\api\\controllers\\test\\flow\\getUsersDistinctFlowNamesOrg.enterprise.js",
                "file": "\\controllers\\test\\flow\\getUsersDistinctFlowNamesOrg.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Flow Flow.getUsersDistinctFlowNamesOrg \"before each\" hook",
                    "timedOut": false,
                    "duration": 179,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1db64b8f-7bc7-4298-9e7b-dda580e972a4",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Flow Flow.getUsersDistinctFlowNamesOrg \"after all\" hook",
                    "timedOut": false,
                    "duration": 7,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9c7c5056-9110-4a84-8983-3583c22fb168",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Flow Flow.getUsersDistinctFlowNamesOrg \"after each\" hook",
                    "timedOut": false,
                    "duration": 1,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1410b72d-97e7-4239-870a-eea421a67976",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get list of user flows.",
                    "fullTitle": "Enterprise Flow Flow.getUsersDistinctFlowNamesOrg Should get list of user flows.",
                    "timedOut": false,
                    "duration": 49,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (Array.isArray(res.body.output)) {\n                isValid = res.body.output.length == 5;\n                _.each(res.body.output, function(item) {\n                    isValid = isValid && typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\";\n                });\n            }\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "206ac844-6a03-47e7-903d-842f350a92e7",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Flow Flow.getUsersDistinctFlowNamesOrg Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .send({})\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3088d152-8718-4078-911a-43ed8b2e790f",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "206ac844-6a03-47e7-903d-842f350a92e7",
                  "3088d152-8718-4078-911a-43ed8b2e790f"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 59,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "f0ed5836-64ae-417d-97de-3d3633edd92c",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\flow\\getUserTags.enterprise.js",
        "file": "\\controllers\\test\\flow\\getUserTags.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "158fb940-5fd9-4e17-98be-32cfb06232a4",
            "title": "Flows.GetUserTags",
            "fullFile": "D:\\api\\controllers\\test\\flow\\getUserTags.enterprise.js",
            "file": "\\controllers\\test\\flow\\getUserTags.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Flows.GetUserTags \"before all\" hook",
                "timedOut": false,
                "duration": 2506,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\n_models.User.remove({ email: testData.testRegistrationBody.email }, function(error, user) {\n    api.post(\"/enterprise/v1/signup\")\n        .send(testData.testRegistrationBody)\n        .expect(httpStatus.CREATED)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                dummyUser = res.body.output;\n                done();\n            }\n        });\n});",
                "err": {},
                "isRoot": false,
                "uuid": "853fb343-dda2-4358-ac56-d315c84fe35a",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Flows.GetUserTags Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .send(searchParam)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "0006c043-e85b-426b-a8e5-d7122963ea19",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of tags.",
                "fullTitle": "Enterprise Flows.GetUserTags Should get list of tags.",
                "timedOut": false,
                "duration": 51,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(searchParam)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output).to.be.instanceof(Array)\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "0e190ace-eaab-4395-b9ca-c19da25c4687",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0006c043-e85b-426b-a8e5-d7122963ea19",
              "0e190ace-eaab-4395-b9ca-c19da25c4687"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 61,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "5f293b44-ca03-4a62-a33c-a8e03c5f45b0",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\flow\\listFlows.enterprise.js",
        "file": "\\controllers\\test\\flow\\listFlows.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "ce438ec5-0d82-47ae-b027-f70162611a51",
            "title": "Flows.ListFlows",
            "fullFile": "D:\\api\\controllers\\test\\flow\\listFlows.enterprise.js",
            "file": "\\controllers\\test\\flow\\listFlows.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Flows.ListFlows \"before all\" hook",
                "timedOut": false,
                "duration": 2882,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(user, cbk) {\n        testData.mongoUserTriggerObj.user_uid = user.uid;\n        _models.UserTrigger.create(testData.mongoUserTriggerObj, function(err, userTrigger) {\n            cbk(err, userTrigger);\n        })\n    },\n    function(userTrigger, cbk) {\n        userTriggerObj = userTrigger\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    },\n    function(result, cbk) {\n        dummyUser = result.body.output;\n        testData.flowBody.trigger.handlers = [userTriggerObj.uid]\n        async.times(2, function(n, next) {\n            api.post(flowURL)\n                .set('authtoken', dummyUser.authtoken)\n                .send(testData.flowBody)\n                .expect(httpStatus.CREATED)\n                .end(function(err, res) {\n                    if (!err) {\n                        res = res.body.output\n                    }\n                    next(err, res)\n                })\n        }, function(err, result) {\n            cbk(err, result)\n        })\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        userFlows = res;\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "6989165e-3bf9-4226-83f5-4a1737788ef5",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Flows.ListFlows \"after all\" hook",
                "timedOut": false,
                "duration": 2,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.waterfall([\n    function(cb) {\n        _models.newFlow.remove({ uid: { $in: _.map(userFlows, 'uid') } }, function(err, deletedFlows) {\n            cb(err, deletedFlows);\n        })\n    },\n    function(deletedFlows, cb) {\n        _models.UserTrigger.remove({ uid: userTriggerObj.uid }, function(err, deletedUserTrigger) {\n            cb(err, deletedUserTrigger);\n        })\n    }\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "a2729e92-1fc8-49d1-b246-065d454ecb73",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Flows.ListFlows Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(flowURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "c68b0317-a41a-4d35-94a3-aeffa7ee5ecb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of user flows.",
                "fullTitle": "Enterprise Flows.ListFlows Should get list of user flows.",
                "timedOut": false,
                "duration": 59,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(flowURL)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(_.size(res.body.output.objects)).to.be.equal(2)\n            expect(res.body.output.count).to.be.equal(2)\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "4fce7d69-cfe4-4372-95a6-7380fa376df0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of user flows, when applying filter and tags.",
                "fullTitle": "Enterprise Flows.ListFlows Should get list of user flows, when applying filter and tags.",
                "timedOut": false,
                "duration": 45,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(flowURL)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output).to.have.all.keys(['objects', 'count'])\n            expect(_.first(res.body.output.objects)).to.have.any.keys(['name', 'description', 'uid', 'updated_at', 'sid'])\n            expect(_.first(res.body.output.objects)).not.to.have.all.keys(['_id', '__v']);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "7c6e5869-f2dd-4c57-a637-110f72db04af",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of lean flows.",
                "fullTitle": "Enterprise Flows.ListFlows Should get list of lean flows.",
                "timedOut": false,
                "duration": 49,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(flowURL + '?lean=true')\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(_.first(res.body.output)).to.have.any.keys(['name', 'description', 'uid', 'updated_at', 'sid', 'flow_version'])\n            expect(_.first(res.body.output)).not.to.have.all.keys(['_id', '__v']);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "28c47977-84bf-41cc-be61-d88ef92c7fb1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of lean flows uids.",
                "fullTitle": "Enterprise Flows.ListFlows Should get list of lean flows uids.",
                "timedOut": false,
                "duration": 49,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(flowURL + '?lean=true&get=flow_uids')\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(_.first(res.body.output)).to.have.any.keys(['uid'])\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "7a8dd5be-1e23-48c9-80f7-8c8d7aba0db2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of lean flows excluding flow mentioned in URL.",
                "fullTitle": "Enterprise Flows.ListFlows Should get list of lean flows excluding flow mentioned in URL.",
                "timedOut": false,
                "duration": 45,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(flowURL + '?lean=true&exclude=' + [_.first(userFlows).uid])\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(_.map(res.body.output, 'uid')).not.to.be.include(_.first(userFlows).uid)\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "cb6a6568-0041-4be3-bade-3d6f44780004",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of flows, even if user account is suspended.",
                "fullTitle": "Enterprise Flows.ListFlows Should get list of flows, even if user account is suspended.",
                "timedOut": false,
                "duration": 46,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n_models.User.findOneAndUpdate({ uid: dummyUser.uid }, { force_suspend: true }, { new: true }, function(err, user) {\n    if (err) {\n        done(err)\n    } else {\n        api.get(flowURL)\n            .set('authtoken', dummyUser.authtoken)\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    expect(_.size(res.body.output.objects)).to.be.equal(2)\n                    expect(res.body.output.count).to.be.equal(2)\n                    done();\n                }\n            });\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "668d0bba-0fb8-4d4e-ab4d-c754e5d772af",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c68b0317-a41a-4d35-94a3-aeffa7ee5ecb",
              "4fce7d69-cfe4-4372-95a6-7380fa376df0",
              "7c6e5869-f2dd-4c57-a637-110f72db04af",
              "28c47977-84bf-41cc-be61-d88ef92c7fb1",
              "7a8dd5be-1e23-48c9-80f7-8c8d7aba0db2",
              "cb6a6568-0041-4be3-bade-3d6f44780004",
              "668d0bba-0fb8-4d4e-ab4d-c754e5d772af"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 303,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "9148153c-a229-4b28-af2a-04922625e1f5",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\flow\\listFlowsByAgent.enterprise.js",
        "file": "\\controllers\\test\\flow\\listFlowsByAgent.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "097e1d41-9213-433d-8c0e-af6731e28dc3",
            "title": "Flows.ListFlowsByAgent",
            "fullFile": "D:\\api\\controllers\\test\\flow\\listFlowsByAgent.enterprise.js",
            "file": "\\controllers\\test\\flow\\listFlowsByAgent.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Flows.ListFlowsByAgent \"before all\" hook",
                "timedOut": false,
                "duration": 2502,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\n_models.User.remove({ email: testData.testRegistrationBody.email }, function(error, user) {\n    api.post(\"/enterprise/v1/signup\")\n        .send(testData.testRegistrationBody)\n        .expect(httpStatus.CREATED)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                dummyUser = res.body.output;\n                done();\n            }\n        });\n});",
                "err": {},
                "isRoot": false,
                "uuid": "a395dde1-d340-400e-afeb-fab29ee26753",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Flows.ListFlowsByAgent Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .send(searchParam)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "fc8b94da-e047-4050-9709-b34f7b42ce7d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if enterpriseagent UID param is missing.",
                "fullTitle": "Enterprise Flows.ListFlowsByAgent Should get error, if enterpriseagent UID param is missing.",
                "timedOut": false,
                "duration": 49,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "30e16ede-f51d-487c-9bbd-a549fcdda6aa",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of flows by enterpriseagent, if enterpriseagent UID param is passed.",
                "fullTitle": "Enterprise Flows.ListFlowsByAgent Should get list of flows by enterpriseagent, if enterpriseagent UID param is passed.",
                "timedOut": false,
                "duration": 50,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(searchParam)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output).to.be.instanceof(Array)\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "27cfa3e7-ebe9-43d9-a0fb-f76a6e0f2f6d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "fc8b94da-e047-4050-9709-b34f7b42ce7d",
              "30e16ede-f51d-487c-9bbd-a549fcdda6aa",
              "27cfa3e7-ebe9-43d9-a0fb-f76a6e0f2f6d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 110,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "b9b3a486-71cb-4d6f-ba82-cbc72d059e59",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\flow\\listFlowsByAuth.enterprise.js",
        "file": "\\controllers\\test\\flow\\listFlowsByAuth.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "21667990-4629-46a7-8b6d-cbb0be419cda",
            "title": "Flows.ListFlowsByAuth",
            "fullFile": "D:\\api\\controllers\\test\\flow\\listFlowsByAuth.enterprise.js",
            "file": "\\controllers\\test\\flow\\listFlowsByAuth.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Flows.ListFlowsByAuth \"before all\" hook",
                "timedOut": false,
                "duration": 2639,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\n_models.User.remove({ email: testData.testRegistrationBody.email }, function(error, user) {\n    api.post(\"/enterprise/v1/signup\")\n        .send(testData.testRegistrationBody)\n        .expect(httpStatus.CREATED)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                dummyUser = res.body.output;\n                done();\n            }\n        });\n});",
                "err": {},
                "isRoot": false,
                "uuid": "d6e8c4bc-63fd-4f8c-8bc0-4ce90b7ce58d",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Flows.ListFlowsByAuth Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .send(searchParam)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "7a158b17-ed11-4248-b460-e2d22cb2195d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if auth UID param is missing.",
                "fullTitle": "Enterprise Flows.ListFlowsByAuth Should get error, if auth UID param is missing.",
                "timedOut": false,
                "duration": 40,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "c7c509ec-a74e-4e8f-9c4d-d8fdbb6c389e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of flows by auth, if auth UID param is passed.",
                "fullTitle": "Enterprise Flows.ListFlowsByAuth Should get list of flows by auth, if auth UID param is passed.",
                "timedOut": false,
                "duration": 44,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(searchParam)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output).to.be.instanceof(Array)\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "02a150b2-fed8-4fd6-8377-e005742a19d0",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "7a158b17-ed11-4248-b460-e2d22cb2195d",
              "c7c509ec-a74e-4e8f-9c4d-d8fdbb6c389e",
              "02a150b2-fed8-4fd6-8377-e005742a19d0"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 93,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "6c8ca0df-968f-4344-9a58-cdafcff12c02",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\flow\\listFlowsByConnection.enterprise.js",
        "file": "\\controllers\\test\\flow\\listFlowsByConnection.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "730a9b30-f6dd-465b-95a5-d0e7be97bbcb",
            "title": "Flows.ListFlowsByConnection",
            "fullFile": "D:\\api\\controllers\\test\\flow\\listFlowsByConnection.enterprise.js",
            "file": "\\controllers\\test\\flow\\listFlowsByConnection.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Flows.ListFlowsByConnection \"before all\" hook",
                "timedOut": false,
                "duration": 2641,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\n_models.User.remove({ email: testData.testRegistrationBody.email }, function(error, user) {\n    api.post(\"/enterprise/v1/signup\")\n        .send(testData.testRegistrationBody)\n        .expect(httpStatus.CREATED)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                dummyUser = res.body.output;\n                done();\n            }\n        });\n});",
                "err": {},
                "isRoot": false,
                "uuid": "e8efdcfb-46bb-419b-aba6-92149124ca05",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Flows.ListFlowsByConnection Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .send(searchParam)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "c4e3fd58-ce3e-4f3f-a430-295df8b5f55e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if connection UID param is missing.",
                "fullTitle": "Enterprise Flows.ListFlowsByConnection Should get error, if connection UID param is missing.",
                "timedOut": false,
                "duration": 55,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "90d34d41-35b4-4668-93df-7708fb7863cf",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of flows by auth, if connection UID param is passed.",
                "fullTitle": "Enterprise Flows.ListFlowsByConnection Should get list of flows by auth, if connection UID param is passed.",
                "timedOut": false,
                "duration": 36,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(searchParam)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output).to.be.instanceof(Array)\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "b966b1ea-f46b-48ee-9712-0c394785f411",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c4e3fd58-ce3e-4f3f-a430-295df8b5f55e",
              "90d34d41-35b4-4668-93df-7708fb7863cf",
              "b966b1ea-f46b-48ee-9712-0c394785f411"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 100,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "a3a22de0-f42f-4372-9f62-cbf602dceeec",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\flow\\listFlowsByCustomIntegration.enterprise.js",
        "file": "\\controllers\\test\\flow\\listFlowsByCustomIntegration.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "1d90fb1f-6387-47f1-affa-feaa701f88e0",
            "title": "CustomIntegration.GetFlows",
            "fullFile": "D:\\api\\controllers\\test\\flow\\listFlowsByCustomIntegration.enterprise.js",
            "file": "\\controllers\\test\\flow\\listFlowsByCustomIntegration.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise CustomIntegration.GetFlows \"before all\" hook",
                "timedOut": false,
                "duration": 2675,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(user, cbk) {\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    },\n    function(result, cbk) {\n        dummyUser = result.body.output;\n        api.post(apiURL)\n            .set('authtoken', dummyUser.authtoken)\n            .send(data)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    },\n    function(result, cbk) {\n        customIntegration = result.body.output;\n        flowData.activities[2].uid = customIntegration.uid;\n        api.post(flowURL)\n            .set('authtoken', dummyUser.authtoken)\n            .send(flowData)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                cbk(err, res)\n            })\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        userFlow = res.body.output;\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "995ca5a4-558d-43c2-843a-cc364bf1485d",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise CustomIntegration.GetFlows \"after all\" hook",
                "timedOut": false,
                "duration": 3,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "_models.CustomIntegration.remove({ user_uid: dummyUser.uid }, function(err, deletedFlow) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "97702ec7-0d97-4a68-bc27-e3acf0d1b475",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise CustomIntegration.GetFlows Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + '/' + customIntegration.uid + '/flows')\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "64915832-b091-401e-b7f7-1dca62bf33b1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of flows of custom  integrtion.",
                "fullTitle": "Enterprise CustomIntegration.GetFlows Should get list of flows of custom  integrtion.",
                "timedOut": false,
                "duration": 42,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + '/' + customIntegration.uid + '/flows')\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output[0]).to.contain.all.keys(['uid', 'name', 'flow_version'])\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "10801a82-ad0a-4b4b-b917-f36ddfefc501",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "64915832-b091-401e-b7f7-1dca62bf33b1",
              "10801a82-ad0a-4b4b-b917-f36ddfefc501"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 56,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "6a0d24ad-72a7-415a-9eec-c83ddc6aa1aa",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\flow\\listFlowsByTrigger.enterprise.js",
        "file": "\\controllers\\test\\flow\\listFlowsByTrigger.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "e361ccf1-19e8-4d2e-9880-e5cba0092657",
            "title": "Flows.ListFlowsByTrigger",
            "fullFile": "D:\\api\\controllers\\test\\flow\\listFlowsByTrigger.enterprise.js",
            "file": "\\controllers\\test\\flow\\listFlowsByTrigger.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Flows.ListFlowsByTrigger \"before all\" hook",
                "timedOut": false,
                "duration": 2607,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\n_models.User.remove({ email: testData.testRegistrationBody.email }, function(error, user) {\n    api.post(\"/enterprise/v1/signup\")\n        .send(testData.testRegistrationBody)\n        .expect(httpStatus.CREATED)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                dummyUser = res.body.output;\n                done();\n            }\n        });\n});",
                "err": {},
                "isRoot": false,
                "uuid": "cb73bc0b-6e84-425c-be8d-8a7f7f38cde2",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Flows.ListFlowsByTrigger Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .send(searchParam)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "301aae94-4b00-4ed8-96c0-6f09a84b8aa4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if trigger UID param is missing.",
                "fullTitle": "Enterprise Flows.ListFlowsByTrigger Should get error, if trigger UID param is missing.",
                "timedOut": false,
                "duration": 42,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "080751c4-891f-4b27-90e0-a2a4e9fcbcc7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of flows by auth, if trigger UID param is passed.",
                "fullTitle": "Enterprise Flows.ListFlowsByTrigger Should get list of flows by auth, if trigger UID param is passed.",
                "timedOut": false,
                "duration": 52,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(searchParam)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output).to.be.instanceof(Array)\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "4633c7d6-2d44-4b7a-97a3-30b92dd4dadf",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "301aae94-4b00-4ed8-96c0-6f09a84b8aa4",
              "080751c4-891f-4b27-90e0-a2a4e9fcbcc7",
              "4633c7d6-2d44-4b7a-97a3-30b92dd4dadf"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 103,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "ca7085b7-2b74-4590-bde6-460e93318f01",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\flow\\revertUserFlowVersion.enterprise.js",
        "file": "\\controllers\\test\\flow\\revertUserFlowVersion.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "8a68a824-491d-4b07-af4a-c45d429ec6af",
            "title": "Flow.revertUserFlowVersion",
            "fullFile": "D:\\api\\controllers\\test\\flow\\revertUserFlowVersion.enterprise.js",
            "file": "\\controllers\\test\\flow\\revertUserFlowVersion.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Flow.revertUserFlowVersion \"before all\" hook",
                "timedOut": false,
                "duration": 421,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data;\n        async.waterfall([\n            function(cbk) {\n                dummyUser = orgData.owner;\n                dummyUser.authtoken = dummyUser.authtoken;\n                testData.mongoUserTriggerObj.user_uid = dummyUser.uid;\n                testData.mongoUserTriggerObj.uid = 'tg9b42e22c50a119f6729d68'\n                _models.UserTrigger.create(testData.mongoUserTriggerObj, function(err, userTrigger) {\n                    cbk(err, userTrigger);\n                })\n            },\n            function(userTrigger, cbk) {\n                userTriggerObj = userTrigger\n                projectData.owner_uid = dummyUser.uid\n                projectData.env_uid = dummyUser.default_env\n                api.post('/enterprise/v1/projects')\n                    .set('authtoken', dummyUser.authtoken)\n                    .send(projectData)\n                    .expect(httpStatus.CREATED)\n                    .end(function(err, result) {\n                        cbk(err, result);\n                    })\n            },\n            function(result, cbk) {\n                project = result.body.output;\n                async.parallel([\n                    function(cb) {\n                        saveFlow(flowURL, dummyUser, flowWithAllDataWithoutTrigger, function(err, result) {\n                            cb(err, result)\n                        })\n                    },\n                    function(cb) {\n                        var flowData2 = _.cloneDeep(flowData)\n                        api.post(flowURL)\n                            .set({ 'authtoken': dummyUser.authtoken, project_uid: project.uid })\n                            .send(flowData2)\n                            .expect(httpStatus.CREATED)\n                            .end(function(err, res) {\n                                cb(err, res)\n                            })\n                    }\n                ], function(err, results) {\n                    cbk(err, results)\n                })\n            }\n        ], function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                userFlow = res[0].body.output\n                userFlowWithProject = res[1].body.output\n                done()\n            }\n        })\n    });\n})",
                "err": {},
                "isRoot": false,
                "uuid": "ca6047ab-c8fd-4518-858a-37090bc69379",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Flow.revertUserFlowVersion \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nhttpmock.cleanAll();\n_models.newFlow.remove({ uid: userFlow.uid }, function(err, deletedFlow) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "abd72c9f-54de-4715-868b-1940e50cd915",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Flow.revertUserFlowVersion Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put(flowURL + userFlow.uid + '/revert')\n    .send({ flow_version: 1 })\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "e5397d5c-ecb4-41da-8044-5d37d29accbc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if flow not found.",
                "fullTitle": "Enterprise Flow.revertUserFlowVersion Should get error, if flow not found.",
                "timedOut": false,
                "duration": 56,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put(flowURL + 'dummyFlow' + '/revert')\n    .set('authtoken', dummyUser.authtoken)\n    .send({ flow_version: 1 })\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.FLOW_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "4966c0f4-db2a-454f-aa35-4d3215b85e31",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if flow version not found not found.",
                "fullTitle": "Enterprise Flow.revertUserFlowVersion Should get error, if flow version not found not found.",
                "timedOut": false,
                "duration": 60,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put(flowURL + userFlow.uid + '/revert')\n    .set('authtoken', dummyUser.authtoken)\n    .send({ flow_version: 21 })\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.FLOW_VERSION_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "95202299-0d63-4cb2-8602-4269d21aee34",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if flow version not valid.",
                "fullTitle": "Enterprise Flow.revertUserFlowVersion Should get error, if flow version not valid.",
                "timedOut": false,
                "duration": 41,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put(flowURL + userFlow.uid + '/revert')\n    .set('authtoken', dummyUser.authtoken)\n    .send({ flow_version: 'dummy' })\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "a2e016af-b46d-49e9-86c2-d5940d9dd632",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if user tried to delete current flow version.",
                "fullTitle": "Enterprise Flow.revertUserFlowVersion Should get error, if user tried to delete current flow version.",
                "timedOut": false,
                "duration": 55,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { path: getTriggerPath, body: getTriggerPath };\ncommonMock.triggerGetSuccess(opt);\nopt.getPath = getTriggerPath + '/handlers';\nopt.body = { \"pull\": [/^fl\\w*/] };\ncommonMock.triggerPullSuccess(opt);\nopt.body = { \"push\": [/^fl\\w*/] };\ncommonMock.triggerPushSuccess(opt);\napi.put(flowURL + userFlow.uid + '/revert')\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.BAD_REQUEST)\n    .send({ flow_version: 1 })\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.CURRENT_VERSION_REVERT_ERROR);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "a4dee728-b04e-40f9-a33b-ebc6d1e92fdb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should revert flow version.",
                "fullTitle": "Enterprise Flow.revertUserFlowVersion Should revert flow version.",
                "timedOut": false,
                "duration": 359,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { path: getTriggerPath, body: getTriggerPath };\ncommonMock.triggerGetSuccess(opt);\nopt.getPath = getTriggerPath + '/handlers';\nopt.body = { \"pull\": [/^fl\\w*/] };\ncommonMock.triggerPullSuccess(opt);\nopt.body = { \"push\": [/^fl\\w*/] };\ncommonMock.triggerPushSuccess(opt);\nflowWithAllData.trigger.handlers.uid = flowData.trigger.handlers[0]\napi.put(flowURL + userFlow.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .send(flowWithAllData)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        var opt1 = { path: getTriggerPath, body: getTriggerPath, times: 2 };\n        commonMock.triggerGetSuccess(opt1);\n        opt1.getPath = getTriggerPath + '/handlers';\n        opt1.body = { \"pull\": [/^fl\\w*/] };\n        commonMock.triggerPullSuccess(opt);\n        opt1.body = { \"push\": [/^fl\\w*/] };\n        commonMock.triggerPushSuccess(opt);\n        api.put(flowURL + userFlow.uid + '/revert')\n            .set('authtoken', dummyUser.authtoken)\n            .send({ flow_version: 1 })\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    expect(res.body.output.flow_version).equal(3);\n                    expect(res.body.output.active).equal(true);\n                    //expect(res.body.output.name).equal('dummy flow');\n                    //done();\n                    var opt2 = { path: getTriggerPath, body: getTriggerPath, times: 2 };\n                    commonMock.triggerGetSuccess(opt2);\n                    opt2.getPath = getTriggerPath + '/handlers';\n                    opt2.body = { \"pull\": [/^fl\\w*/] };\n                    commonMock.triggerPullSuccess(opt);\n                    opt2.body = { \"push\": [/^fl\\w*/] };\n                    commonMock.triggerPushSuccess(opt2);\n                    api.put(flowURL + userFlow.uid + '/revert')\n                        .set('authtoken', dummyUser.authtoken)\n                        .send({ flow_version: 2 })\n                        .expect(httpStatus.OK)\n                        .end(function(err, res) {\n                            if (err) {\n                                done(err);\n                            } else {\n                                expect(res.body.output.flow_version).equal(4);\n                                expect(res.body.output.active).equal(true);\n                                expect(res.body.output.errors_obj.length).equal(0);\n                                expect(res.body.output.trigger.handlers[0].uid).equal(flowWithAllData.trigger.handlers[0].uid);\n                                expect(res.body.output.name).equal('Config');\n                                done();\n                            }\n                        });\n                }\n            });\n    })",
                "err": {},
                "isRoot": false,
                "uuid": "2280a388-348e-4ae3-8e9d-3e8eb7ce5af4",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e5397d5c-ecb4-41da-8044-5d37d29accbc",
              "4966c0f4-db2a-454f-aa35-4d3215b85e31",
              "95202299-0d63-4cb2-8602-4269d21aee34",
              "a2e016af-b46d-49e9-86c2-d5940d9dd632",
              "a4dee728-b04e-40f9-a33b-ebc6d1e92fdb",
              "2280a388-348e-4ae3-8e9d-3e8eb7ce5af4"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 587,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "d6721b31-56fe-42dc-98ea-d941340d6d9d",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\flow\\shareUserFlow.enterprise.js",
        "file": "\\controllers\\test\\flow\\shareUserFlow.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "73f2069a-3674-4ad1-9e04-112caed17eb8",
            "title": "Flow.ShareUserFlow",
            "fullFile": "D:\\api\\controllers\\test\\flow\\shareUserFlow.enterprise.js",
            "file": "\\controllers\\test\\flow\\shareUserFlow.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Flow.ShareUserFlow \"before all\" hook",
                "timedOut": false,
                "duration": 254,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data;\n        async.waterfall([\n            function(cbk) {\n                dummyUser = orgData.owner;\n                dummyUser.authtoken = dummyUser.authtoken;\n                testData.mongoUserTriggerObj.user_uid = dummyUser.uid;\n                _models.UserTrigger.create(testData.mongoUserTriggerObj, function(err, userTrigger) {\n                    cbk(err, userTrigger);\n                })\n            },\n            function(userTrigger, cbk) {\n                userTriggerObj = userTrigger\n                _id = dummyUser._id\n                flowData.trigger.handlers = [userTriggerObj]\n                    //var flowData = _.clone(testData.flowBody)\n                flowData.environment[0].params = [{\n                    \"key\": \"1\",\n                    \"value\": \"2\",\n                    \"required\": true\n                }, {\n                    \"key\": \"3\",\n                    \"value\": \"2\",\n                    \"required\": false\n                }];\n                flowData.environment[0].project_params = [{\n                    \"uid\": \"random\",\n                    \"key\": \"param1\",\n                    \"value\": \"parawal\",\n                    \"required\": true,\n                    \"isPassword\": false,\n                    \"hasError\": false\n                }];\n                api.post(flowURL)\n                    .set('authtoken', dummyUser.authtoken)\n                    .send(flowData)\n                    .expect(httpStatus.CREATED)\n                    .end(function(err, res) {\n                        cbk(err, res)\n                    })\n            }\n        ], function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                userFlow = res.body.output;\n                done()\n            }\n        })\n    });\n})",
                "err": {},
                "isRoot": false,
                "uuid": "03256564-d2bb-461d-a550-990e1dae4e8c",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Flow.ShareUserFlow \"after all\" hook",
                "timedOut": false,
                "duration": 6,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.waterfall([\n    function(cb) {\n        _models.newFlow.findOne({ owner_uid: shareCriteria.users }, function(err, sharedFlow) {\n            cb(err, sharedFlow);\n        })\n    },\n    function(sharedFlow, cb) {\n        removeFlow([userFlow.uid, (sharedFlow || {}).uid], function(err, deletedFlows) {\n            cb(err, deletedFlows);\n        })\n    },\n    function(deletedFlows, cb) {\n        _models.UserTrigger.remove({ uid: userTriggerObj.uid }, function(err, deletedUserTrigger) {\n            cb(err, deletedUserTrigger);\n        })\n    }\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "6c59a54b-cffe-4193-abc2-a5b315e3f9f0",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Flow.ShareUserFlow Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(flowURL + '/' + userFlow.uid + '/share')\n    .send(shareCriteria)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "ddb939cc-3826-47e3-b289-b9d32e511a58",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should share flow, if user flow is found.",
                "fullTitle": "Enterprise Flow.ShareUserFlow Should share flow, if user flow is found.",
                "timedOut": false,
                "duration": 92,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { path: getTriggerPath, body: getTriggerPath }\ncommonMock.triggerCreateSuccess(opt);\nshareCriteria.users = [orgData.role1.email]\napi.post(flowURL + '/' + userFlow.uid + '/share')\n    .set('authtoken', dummyUser.authtoken)\n    .send(shareCriteria)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.message.should.equal('Workflow shared successfully with 1 user(s)')\n            var query = _models.UserStream.find({ type: 'share-flow' })\n            query.lean().exec(function(err, results) {\n                if (err) {\n                    done(err);\n                } else {\n                    var shareTo = _.find(results, { metadata:{to_email: shareCriteria.users[0] }})\n                    var shareFrom = _.find(results, { metadata:{from_email: dummyUser.email }})\n                    if (shareFrom && shareTo) {\n                        done()\n                    }\n                }\n            })\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "08be3449-b9c5-44e0-8ec5-4df6a4820e16",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if flow not found.",
                "fullTitle": "Enterprise Flow.ShareUserFlow Should get error, if flow not found.",
                "timedOut": false,
                "duration": 40,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(flowURL + '/dummyFlow/share')\n    .set('authtoken', dummyUser.authtoken)\n    .send(shareCriteria)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.FLOW_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "a6af53a1-f10a-4e96-a98b-8669372d9a27",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if \"users\" params is missing OR empty.",
                "fullTitle": "Enterprise Flow.ShareUserFlow Should get error, if \"users\" params is missing OR empty.",
                "timedOut": false,
                "duration": 33,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar missingUsers = _.omit(shareCriteria, 'users');\napi.post(flowURL + '/' + userFlow.uid + '/share')\n    .set('authtoken', dummyUser.authtoken)\n    .send(missingUsers)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "f10fdf8c-aa0f-42f0-88aa-ab0dd0c69319",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should share flow with organization.",
                "fullTitle": "Enterprise Flow.ShareUserFlow Should share flow with organization.",
                "timedOut": false,
                "duration": 83,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar projectParams = [{\n    \"uid\": \"random\",\n    \"key\": \"param1\",\n    \"value\": \"parawal\",\n    \"required\": true,\n    \"isPassword\": false,\n    \"hasError\": false\n}, {\n    \"uid\": \"random1\",\n    \"key\": \"param1\",\n    \"value\": \"parawal\",\n    \"required\": true,\n    \"isPassword\": false,\n    \"hasError\": false\n}]\nvar opt = { path: getTriggerPath, body: getTriggerPath, times: 2 };\ncommonMock.triggerCreateSuccess(opt);\nvar orgDefaultProj = _.find(orgData.org_projects, { name: config.default_project })\nvar projectParam = _.merge(projectParams[0], { type: 'param', project_uid: orgDefaultProj.uid, user_uid: orgData.organization_account.uid })\n_models.ConfigSchema.create(projectParam, function(err, result) {\n    var shareWithOrgs = _.cloneDeep(shareCriteria)\n    shareWithOrgs.users = '';\n    shareWithOrgs.orgs = [orgData.organization.name]\n    shareWithOrgs.project_params = projectParams\n    shareWithOrgs.params = [{\n        \"key\": \"3\",\n        \"value\": \"2\",\n        \"required\": false\n    }]\n    api.post(flowURL + '/' + userFlow.uid + '/share')\n        .set('authtoken', dummyUser.authtoken)\n        .send(shareWithOrgs)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                res.body.output.message.should.equal('Workflow shared successfully with 1 organization(s)')\n                var query = _models.ConfigSchema.find({ type: 'param', project_uid: orgDefaultProj.uid })\n                query.lean().exec(function(err, results) {\n                    if (results) {\n                        var shareProjectParamsUIDS = _.map(results, 'uid')\n                        var projectParamsUIDS = _.map(projectParams, 'uid')\n                        if (_.isEqual(shareProjectParamsUIDS, projectParamsUIDS)) {\n                            done();\n                        } else {\n                            done('PROJECT_PARAMS_MISMATCH');\n                        }\n                    }\n                })\n            }\n        });\n})",
                "err": {},
                "isRoot": false,
                "uuid": "62be4862-3d65-4320-af28-63bf590ca39e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if user tries to share flow with himself.",
                "fullTitle": "Enterprise Flow.ShareUserFlow Should get error, if user tries to share flow with himself.",
                "timedOut": false,
                "duration": 27,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nshareCriteria.users = testData.testRegistrationBody.email\napi.post(flowURL + '/' + userFlow.uid + '/share')\n    .set('authtoken', dummyUser.authtoken)\n    .send(shareCriteria)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.FLOW_CANNOT_BE_SHARE_WITH_SAME_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "c20480e9-610f-44de-81b7-d46b3ac913d9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if user tries to share flow with more than 10 users.",
                "fullTitle": "Enterprise Flow.ShareUserFlow Should get error, if user tries to share flow with more than 10 users.",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nshareCriteria.users = ['1@a.com', '2@a.com', '3@a.com', '4@a.com', '5@a.com', '6@a.com', '7@a.com', '8@a.com', '9@a.com', '10@a.com', '11@a.com']\napi.post(flowURL + '/' + userFlow.uid + '/share')\n    .set('authtoken', dummyUser.authtoken)\n    .send(shareCriteria)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal('The workflow can not be shared with more than 10 users at a time.');\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "3512cfb5-55a2-47aa-a951-dab8e9511ed8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if user account is suspended.",
                "fullTitle": "Enterprise Flow.ShareUserFlow Should get error, if user account is suspended.",
                "timedOut": false,
                "duration": 28,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n_models.User.findOneAndUpdate({ uid: dummyUser.uid }, { force_suspend: true }, { new: true }, function(err, user) {\n    if (err) {\n        done(err)\n    } else {\n        api.post(flowURL + '/' + userFlow.uid + '/share')\n            .set('authtoken', dummyUser.authtoken)\n            .expect(httpStatus.BAD_REQUEST)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    res.body.error.message.should.equal(messageList.FLOW_SHARE_USER_PLAN_EXPIRE_ERROR);\n                    done();\n                }\n            });\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "63d1900c-4eb4-4efa-9d82-c30db6b7041c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ddb939cc-3826-47e3-b289-b9d32e511a58",
              "08be3449-b9c5-44e0-8ec5-4df6a4820e16",
              "a6af53a1-f10a-4e96-a98b-8669372d9a27",
              "f10fdf8c-aa0f-42f0-88aa-ab0dd0c69319",
              "62be4862-3d65-4320-af28-63bf590ca39e",
              "c20480e9-610f-44de-81b7-d46b3ac913d9",
              "3512cfb5-55a2-47aa-a951-dab8e9511ed8",
              "63d1900c-4eb4-4efa-9d82-c30db6b7041c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 344,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "0b73ea45-933c-40a6-ab50-a14c47344c45",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\flow\\stopUserFlow.enterprise.js",
        "file": "\\controllers\\test\\flow\\stopUserFlow.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "892c1206-554f-4364-b5a1-747e799a9507",
            "title": "Flow.StopUserFlow",
            "fullFile": "D:\\api\\controllers\\test\\flow\\stopUserFlow.enterprise.js",
            "file": "\\controllers\\test\\flow\\stopUserFlow.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Flow.StopUserFlow \"before all\" hook",
                "timedOut": false,
                "duration": 2904,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(user, cbk) {\n        testData.mongoUserTriggerObj.user_uid = user.uid;\n        _models.UserTrigger.create(testData.mongoUserTriggerObj, function(err, userTrigger) {\n            cbk(err, userTrigger);\n        })\n    },\n    function(userTrigger, cbk) {\n        userTriggerObj = userTrigger\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    },\n    function(result, cbk) {\n        dummyUser = result.body.output;\n        //testData.flowBody.trigger.handlers = [userTriggerObj.uid]\n        api.post(flowURL)\n            .set('authtoken', dummyUser.authtoken)\n            .send(testData.flowBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                cbk(err, res)\n            })\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        userFlow = res.body.output;\n        var billBody = {\n            \"flow_uid\": userFlow.uid,\n            \"billable\": true,\n            \"user_uid\": dummyUser.uid,\n            \"flow_name\": \"dummy flow\",\n            \"result\": \"pending\",\n            \"duration\": 0,\n            \"manual_run\": true,\n            \"deleted_at\": null,\n            \"credits\": 0,\n            \"__v\": 0\n        }\n        _models.Bill.create(billBody, function(err, billObj) {\n            flowBill = billObj;\n            stopData.bill_uid = flowBill.uid;\n        })\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "ab8fac00-14ee-479e-957e-8ca7d647c271",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Flow.StopUserFlow \"after all\" hook",
                "timedOut": false,
                "duration": 5,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.waterfall([\n    function(cb) {\n        _models.newFlow.remove({ uid: userFlow.uid }, function(err, deletedFlows) {\n            cb(err, deletedFlows);\n        })\n    },\n    function(deletedFlows, cb) {\n        _models.UserTrigger.remove({ uid: userTriggerObj.uid }, function(err, deletedUserTrigger) {\n            cb(err, deletedUserTrigger);\n        })\n    },\n    function(deletedFlows, cb) {\n        _models.Bill.remove({ uid: flowBill.uid }, function(err, deletedUserTrigger) {\n            cb(err, deletedUserTrigger);\n        })\n    }\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "1b69221d-4b9f-4d32-83d7-9ad64eca941b",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Flow.StopUserFlow Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(flowURL + '/' + userFlow.uid + '/stop')\n    .send(stopData)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "5f2d812e-1285-4431-9dd5-46e438f5f38b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if key \"bill_uid\" is missing.",
                "fullTitle": "Enterprise Flow.StopUserFlow Should get error, if key \"bill_uid\" is missing.",
                "timedOut": false,
                "duration": 40,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar data = _.clone(stopData)\ndata.bill_uid = null;\napi.post(flowURL + '/' + userFlow.uid + '/stop')\n    .set('authtoken', dummyUser.authtoken)\n    .send(data)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "9a688861-644e-41c3-94e4-b03a5ef99547",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if key \"bill_uid\" is invalid.",
                "fullTitle": "Enterprise Flow.StopUserFlow Should get error, if key \"bill_uid\" is invalid.",
                "timedOut": false,
                "duration": 41,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar data = _.clone(stopData)\ndata.bill_uid = 'ABC';\napi.post(flowURL + '/' + userFlow.uid + '/stop')\n    .set('authtoken', dummyUser.authtoken)\n    .send(data)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.BILL_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "b5600b1f-451f-4151-bdd2-4e9c85fbe5bf",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should stop flow, if bill is valid.",
                "fullTitle": "Enterprise Flow.StopUserFlow Should stop flow, if bill is valid.",
                "timedOut": false,
                "duration": 57,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { bill_uid: stopData.bill_uid, user_uid: dummyUser.uid }\ncommonMock.stopFlowSuccess(opt)\napi.post(flowURL + '/' + userFlow.uid + '/stop')\n    .set('authtoken', dummyUser.authtoken)\n    .send(stopData)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.result.should.equal('OK')\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "831e85a3-b7ed-4c86-89b8-46fe4011ee5c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "5f2d812e-1285-4431-9dd5-46e438f5f38b",
              "9a688861-644e-41c3-94e4-b03a5ef99547",
              "b5600b1f-451f-4151-bdd2-4e9c85fbe5bf",
              "831e85a3-b7ed-4c86-89b8-46fe4011ee5c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 149,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "e6394708-9cee-4488-95a4-1fbde57631a7",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\flow\\toggleUserFlow.enterprise.js",
        "file": "\\controllers\\test\\flow\\toggleUserFlow.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "5bd7e7e7-3c88-4e75-9060-b3727fb16132",
            "title": "Flow.ToggleUserFlow",
            "fullFile": "D:\\api\\controllers\\test\\flow\\toggleUserFlow.enterprise.js",
            "file": "\\controllers\\test\\flow\\toggleUserFlow.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Flow.ToggleUserFlow \"before all\" hook",
                "timedOut": false,
                "duration": 2743,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(user, cbk) {\n        testData.mongoUserTriggerObj.user_uid = user.uid;\n        _models.UserTrigger.create(testData.mongoUserTriggerObj, function(err, userTrigger) {\n            cbk(err, userTrigger);\n        })\n    },\n    function(userTrigger, cbk) {\n        userTriggerObj = userTrigger\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    },\n    function(result, cbk) {\n        testData.flowBody.trigger.handlers = [userTriggerObj]\n        dummyUser = result.body.output;\n        var flowBody = _.cloneDeep(testData.flowBody);\n        async.parallel({\n            activeFlow: function(cb) {\n                createFlow(dummyUser, flowBody, cb)\n            },\n            inactiveFlow: function(cb) {\n                flowBody.active = false\n                createFlow(dummyUser, flowBody, cb)\n            }\n        }, function(err, result) {\n            cbk(err, result)\n        })\n    }\n], function(err, result) {\n    if (err) {\n        done(err);\n    } else {\n        liveFlow = result.activeFlow.body.output;\n        userFlow = result.inactiveFlow.body.output;\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "9ea0afaa-4070-4349-b915-a8b2e4ce9576",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Flow.ToggleUserFlow \"after all\" hook",
                "timedOut": false,
                "duration": 3,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nhttpmock.cleanAll();\nasync.parallel([\n    function(cb) {\n        _models.newFlow.remove({ uid: { $in: [userFlow.uid, liveFlow.uid] } }, function(err, deletedFlow) {\n            cb(err, deletedFlow);\n        })\n    },\n    function(cb) {\n        _models.UserTrigger.remove({ uid: userTriggerObj.uid }, function(err, deletedUserTrigger) {\n            cb(err, deletedUserTrigger);\n        })\n    }\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "14a62312-9160-49a2-9cef-d48a3ecefeae",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Flow.ToggleUserFlow Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put(flowURL + '/' + userFlow.uid + '/toggle')\n    .send(active)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "5eef0041-ba73-41d1-8081-d8bad7ee2f93",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if flow not found.",
                "fullTitle": "Enterprise Flow.ToggleUserFlow Should get error, if flow not found.",
                "timedOut": false,
                "duration": 50,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put(flowURL + '/dummyFlow/toggle')\n    .set('authtoken', dummyUser.authtoken)\n    .send(active)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.FLOW_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "51be285d-975e-42ef-bd92-911b4950900b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if \"data\" key is missing OR empty.",
                "fullTitle": "Enterprise Flow.ToggleUserFlow Should get error, if \"data\" key is missing OR empty.",
                "timedOut": false,
                "duration": 35,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put(flowURL + '/' + userFlow.uid + '/toggle')\n    .set('authtoken', dummyUser.authtoken)\n    .send()\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "839cfbbb-9ad5-43ff-856b-7a9abf88edff",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should \"active\" flow, if user sends {data: true}.",
                "fullTitle": "Enterprise Flow.ToggleUserFlow Should \"active\" flow, if user sends {data: true}.",
                "timedOut": false,
                "duration": 64,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { path: getTriggerPath, body: getTriggerPath };\ncommonMock.triggerGetSuccess(opt);\nopt.getPath = getTriggerPath + '/handlers';\nopt.body = { \"push\": [/^fl\\w*/] };\ncommonMock.triggerPushSuccess(opt);\napi.put(flowURL + '/' + userFlow.uid + '/toggle')\n    .set('authtoken', dummyUser.authtoken)\n    .send(active)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output.active).to.be.equal(true);\n            //expect(res.body.output).not.to.have.all.keys(['_id', '__v']);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "7f7d5da3-a2d5-4b9a-b743-45dc8818984b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if user sends {data: true} and flow is in active state",
                "fullTitle": "Enterprise Flow.ToggleUserFlow Should get error, if user sends {data: true} and flow is in active state",
                "timedOut": false,
                "duration": 44,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { path: getTriggerPath, body: getTriggerPath };\ncommonMock.triggerGetSuccess(opt);\nopt.getPath = getTriggerPath + '/handlers';\nopt.body = { \"push\": [/^fl\\w*/] };\ncommonMock.triggerPushSuccess(opt);\napi.put(flowURL + '/' + userFlow.uid + '/toggle')\n    .set('authtoken', dummyUser.authtoken)\n    .send(active)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).to.be.equal(messageList.FLOW_ALREADY_IN_ACTIVE_STATE);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "a283f820-19d1-4046-9d3e-1cb66eb02bad",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should \"de-active\" flow, if user sends {data: false} and config data must have \"trigger\" key",
                "fullTitle": "Enterprise Flow.ToggleUserFlow Should \"de-active\" flow, if user sends {data: false} and config data must have \"trigger\" key",
                "timedOut": false,
                "duration": 66,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { path: getTriggerPath, body: getTriggerPath };\ncommonMock.triggerGetSuccess(opt);\nopt.getPath = getTriggerPath + '/handlers';\nopt.body = { \"unset\": [/^fl\\w*/] };\ncommonMock.triggerPushSuccess(opt);\nactive.data = false;\napi.put(flowURL + '/' + liveFlow.uid + '/toggle')\n    .set('authtoken', dummyUser.authtoken)\n    .send(active)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output.active).to.be.equal(false)\n                //expect(res.body.output).not.to.have.all.keys(['_id', '__v']);\n            var query = _models.ConfigData.findOne({ flow_uid: res.body.output.uid, activity_id: 'start' })\n            query.lean().exec(function(err, configData) {\n                expect(configData).have.any.keys(['trigger'])\n                done();\n            })\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "df081c70-f7b5-4ff3-9f28-b920a9c5af7a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should \"de-active\" flow, if user sends {data: false}.",
                "fullTitle": "Enterprise Flow.ToggleUserFlow Should \"de-active\" flow, if user sends {data: false}.",
                "timedOut": false,
                "duration": 46,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { path: getTriggerPath, body: getTriggerPath };\ncommonMock.triggerGetSuccess(opt);\nopt.getPath = getTriggerPath + '/handlers';\nopt.body = { \"unset\": [/^fl\\w*/] };\ncommonMock.triggerPushSuccess(opt);\nactive.data = false;\napi.put(flowURL + '/' + liveFlow.uid + '/toggle')\n    .set('authtoken', dummyUser.authtoken)\n    .send(active)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).to.be.equal(messageList.FLOW_ALREADY_IN_INACTIVE_STATE);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "60d3aaa8-ba2d-4eeb-a494-389a06e11187",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if user account is suspended.",
                "fullTitle": "Enterprise Flow.ToggleUserFlow Should get error, if user account is suspended.",
                "timedOut": false,
                "duration": 32,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nthis.timeout(apiTimeOut);\nvar opt = { path: getTriggerPath, body: getTriggerPath };\ncommonMock.triggerGetSuccess(opt);\nopt.getPath = getTriggerPath + '/handlers';\nopt.body = { \"unset\": [/^fl\\w*/] };\ncommonMock.triggerPushSuccess(opt);\nactive.data = false;\n_models.User.findOneAndUpdate({ uid: dummyUser.uid }, { force_suspend: true }, { new: true }, function(err, user) {\n    if (err) {\n        done(err)\n    } else {\n        api.put(flowURL + '/' + liveFlow.uid + '/toggle')\n            .set('authtoken', dummyUser.authtoken)\n            .send(active)\n            .expect(httpStatus.BAD_REQUEST)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    res.body.error.message.should.equal(messageList.USER_PLAN_EXPIRE_ERROR);\n                    done();\n                }\n            });\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "13aaabf9-042b-44c6-b464-2c8db7e583ea",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "5eef0041-ba73-41d1-8081-d8bad7ee2f93",
              "51be285d-975e-42ef-bd92-911b4950900b",
              "839cfbbb-9ad5-43ff-856b-7a9abf88edff",
              "7f7d5da3-a2d5-4b9a-b743-45dc8818984b",
              "a283f820-19d1-4046-9d3e-1cb66eb02bad",
              "df081c70-f7b5-4ff3-9f28-b920a9c5af7a",
              "60d3aaa8-ba2d-4eeb-a494-389a06e11187",
              "13aaabf9-042b-44c6-b464-2c8db7e583ea"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 346,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "0be5d130-bc8c-49ca-b204-819f7ec92d9e",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\flow\\updateUserFlow.enterprise.js",
        "file": "\\controllers\\test\\flow\\updateUserFlow.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "5374c453-58cb-473b-b13a-12d3d3db1a1a",
            "title": "Flow.UpdateUserFlow",
            "fullFile": "D:\\api\\controllers\\test\\flow\\updateUserFlow.enterprise.js",
            "file": "\\controllers\\test\\flow\\updateUserFlow.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Flow.UpdateUserFlow \"before all\" hook",
                "timedOut": false,
                "duration": 465,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data;\n        async.waterfall([\n            function(cbk) {\n                dummyUser = orgData.owner;\n                dummyUser.authtoken = dummyUser.authtoken;\n                testData.mongoUserTriggerObj.user_uid = dummyUser.uid;\n                _models.UserTrigger.create(testData.mongoUserTriggerObj, function(err, userTrigger) {\n                    cbk(err, userTrigger);\n                })\n            },\n            function(userTrigger, cbk) {\n                userTriggerObj = userTrigger.toJSON()\n                    //flowWithAllData.trigger.handlers[0] = userTriggerObj\n                api.post(flowURL)\n                    .set('authtoken', dummyUser.authtoken)\n                    .send(flowWithAllData)\n                    .expect(httpStatus.CREATED)\n                    .end(function(err, res) {\n                        cbk(err, res)\n                    })\n            },\n            function(res, cbk) {\n                userFlow = res.body.output;\n                //flowWithAllData.trigger.handlers[0] = userTriggerObj\n                api.post(flowURL)\n                    .set({ 'authtoken': dummyUser.authtoken, org_uid: orgData.organization.uid })\n                    .send(flowWithAllData)\n                    .expect(httpStatus.CREATED)\n                    .end(function(err, res) {\n                        cbk(err, res)\n                    })\n            }\n        ], function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                orgFlow = res.body.output;\n                done()\n            }\n        })\n    });\n})",
                "err": {},
                "isRoot": false,
                "uuid": "d49a27da-af35-4a91-bba9-c539ccf2094a",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Flow.UpdateUserFlow \"after all\" hook",
                "timedOut": false,
                "duration": 2,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nhttpmock.cleanAll();\nasync.parallel([\n    function(cb) {\n        _models.newFlow.remove({ uid: userFlow.uid }, function(err, deletedFlow) {\n            cb(err, deletedFlow);\n        })\n    },\n    function(cb) {\n        _models.UserTrigger.remove({ uid: userTriggerObj.uid }, function(err, deletedUserTrigger) {\n            cb(err, deletedUserTrigger);\n        })\n    }\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "165db854-4929-462e-b2cd-b3c2b3f7bc0f",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Flow.UpdateUserFlow Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put(flowURL + '/' + userFlow.uid)\n    .send(userFlow)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "82bc216e-1f3e-4a34-8fd6-2d4db7556297",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if flow not found.",
                "fullTitle": "Enterprise Flow.UpdateUserFlow Should get error, if flow not found.",
                "timedOut": false,
                "duration": 45,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put(flowURL + '/dummyFlow')\n    .set('authtoken', dummyUser.authtoken)\n    .send(userFlow)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.FLOW_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "43945677-d433-45a4-aaca-9547708aa008",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if \"name\" key is missing OR empty.",
                "fullTitle": "Enterprise Flow.UpdateUserFlow Should get error, if \"name\" key is missing OR empty.",
                "timedOut": false,
                "duration": 35,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar invalidFlowData = _.omit(flowData, 'name')\napi.post(flowURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(invalidFlowData)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "80cc1be5-e7d3-4950-9616-472ce26c2eb3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if flow activity has no end point.",
                "fullTitle": "Enterprise Flow.UpdateUserFlow Should get error, if flow activity has no end point.",
                "timedOut": false,
                "duration": 54,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nuserFlow.name = testFlowName\nuserFlow.trigger.handlers[0] = userTriggerObj;\nuserFlow.activities = flowData.activities;\nuserFlow.configurations = flowData.environment;\napi.put(flowURL + '/' + userFlow.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .send(userFlow)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).to.equal(messageList.INVALID_FLOW_CONNECTION_ERROR)\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "36dd9f71-924e-429c-be1c-522800228d0a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if flow activities has circular connection.",
                "fullTitle": "Enterprise Flow.UpdateUserFlow Should get error, if flow activities has circular connection.",
                "timedOut": false,
                "duration": 55,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nuserFlow.name = testFlowName\nuserFlow.trigger.handlers[0] = userTriggerObj;\nvar invalidFlowActivities = _.clone(testData.invalidFlowActivities)\n_.set(_.first(invalidFlowActivities), 'next', ['start'])\nuserFlow.activities = JSON.stringify(invalidFlowActivities);\nuserFlow.configurations = flowData.environment;\napi.put(flowURL + '/' + userFlow.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .send(userFlow)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).to.equal(messageList.INVALID_FLOW_LOOP_ERROR)\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "4e31d93a-2181-4ae7-a1d7-3ea06a8854d4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if flow activity has no id.",
                "fullTitle": "Enterprise Flow.UpdateUserFlow Should get error, if flow activity has no id.",
                "timedOut": false,
                "duration": 46,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nuserFlow.name = testFlowName\nuserFlow.trigger.handlers[0] = userTriggerObj;\nvar invalidFlowActivities = _.clone(testData.invalidFlowActivities)\n_.set(_.first(invalidFlowActivities), 'id', null)\nuserFlow.activities = JSON.stringify(invalidFlowActivities);\nuserFlow.configurations = flowData.environment;\napi.put(flowURL + '/' + userFlow.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .send(userFlow)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).to.equal(messageList.INVALID_FLOW_CHAIN_BREAK)\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "97c7b560-ee36-4931-964d-a87fc1b88356",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if flow has group activities with no end point.",
                "fullTitle": "Enterprise Flow.UpdateUserFlow Should get error, if flow has group activities with no end point.",
                "timedOut": false,
                "duration": 59,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nuserFlow.name = testFlowName\nuserFlow.trigger.handlers[0] = userTriggerObj;\nuserFlow.activities = JSON.stringify(testData.invalidGroupActivities);\nuserFlow.configurations = flowData.environment;\napi.put(flowURL + '/' + userFlow.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .send(userFlow)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).to.equal(messageList.INVALID_FLOW_GROUP_CONNECTION_ERROR)\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "02be3d32-9ac0-4d71-aa11-632ba7653bb8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if flow has group has no activities.",
                "fullTitle": "Enterprise Flow.UpdateUserFlow Should get error, if flow has group has no activities.",
                "timedOut": false,
                "duration": 50,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nuserFlow.name = testFlowName\nuserFlow.trigger.handlers[0] = userTriggerObj;\nuserFlow.activities = JSON.stringify(testData.blankGroupActivities);\nuserFlow.configurations = flowData.environment;\napi.put(flowURL + '/' + userFlow.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .send(userFlow)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).to.equal(messageList.INVALID_FLOW_GROUP_BLANK_ERROR)\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "2f0a3976-3483-47db-a65c-29554259de40",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if flow has group circular connection.",
                "fullTitle": "Enterprise Flow.UpdateUserFlow Should get error, if flow has group circular connection.",
                "timedOut": false,
                "duration": 61,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nuserFlow.name = testFlowName\nuserFlow.trigger.handlers[0] = userTriggerObj;\nuserFlow.activities = JSON.stringify(testData.GroupActivitiesWithLoopConnection);\nuserFlow.configurations = flowData.environment;\napi.put(flowURL + '/' + userFlow.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .send(userFlow)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).to.equal(messageList.INVALID_FLOW_LOOP_ERROR)\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "2caf19e3-e6b0-4bdb-a624-61c0033a8117",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should update flow, if user sends a valid data.",
                "fullTitle": "Enterprise Flow.UpdateUserFlow Should update flow, if user sends a valid data.",
                "timedOut": false,
                "duration": 98,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { path: getTriggerPath, body: getTriggerPath };\ncommonMock.triggerGetSuccess(opt);\nopt.getPath = getTriggerPath + '/handlers';\nopt.body = { \"pull\": [/^fl\\w*/] };\ncommonMock.triggerPullSuccess(opt);\nopt.body = { \"push\": [/^fl\\w*/] };\ncommonMock.triggerPushSuccess(opt);\nuserFlow.name = testFlowName\nuserFlow.trigger.handlers[0] = userTriggerObj;\nuserFlow.activities = testData.newAcitivities;\nuserFlow.configurations = flowData.environment;\napi.put(flowURL + '/' + userFlow.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .send(userFlow)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var flow = res.body.output\n            var flowEnv = _.first(JSON.parse(flow.environment))\n            expect(flow.name).to.equal(testFlowName)\n            expect(flow.flow_version).to.equal(2)\n            expect(flow).not.to.have.all.keys(['_id', '__v']);\n            expect(flowEnv).to.have.any.keys(['auth', 'connection', 'enterpriseagent', \"id\", \"params\"]);\n            expect(flow.trigger.handlers).to.have.length.of.at.least(1)\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "4579bf09-50ba-40ba-a304-6c14dfabe20b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should update flow in org, if user sends a valid data.",
                "fullTitle": "Enterprise Flow.UpdateUserFlow Should update flow in org, if user sends a valid data.",
                "timedOut": false,
                "duration": 138,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { path: getTriggerPath, body: getTriggerPath };\ncommonMock.triggerGetSuccess(opt);\nopt.getPath = getTriggerPath + '/handlers';\nopt.body = { \"pull\": [/^fl\\w*/] };\ncommonMock.triggerPullSuccess(opt);\nopt.body = { \"push\": [/^fl\\w*/] };\ncommonMock.triggerPushSuccess(opt);\nuserFlow.name = testFlowName\nuserFlow.trigger.handlers[0] = userTriggerObj;\nuserFlow.activities = testData.newAcitivities;\nuserFlow.configurations = flowData.environment;\nuserFlow.preserve_version = true\napi.put(flowURL + '/' + orgFlow.uid)\n    .set({ 'authtoken': orgData.developer.authtoken, org_uid: orgData.organization.uid })\n    .send(userFlow)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var flow = res.body.output\n            var flowEnv = _.first(JSON.parse(flow.environment))\n            expect(flow.name).to.equal(testFlowName)\n            expect(flow.updated_by).to.equal(orgData.developer.uid)\n            expect(flow.flow_version).to.equal(1)\n            expect(flow).not.to.have.all.keys(['_id', '__v']);\n            expect(flowEnv).to.have.any.keys(['auth', 'connection', 'enterpriseagent', \"id\", \"params\"]);\n            expect(flow.trigger.handlers).to.have.length.of.at.least(1)\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "9ae9e43a-2f09-4803-b023-9a80880e7b73",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should update flow, if user sends a valid data with error activity.",
                "fullTitle": "Enterprise Flow.UpdateUserFlow Should update flow, if user sends a valid data with error activity.",
                "timedOut": false,
                "duration": 75,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nflowWithErrorAct.uid = userFlow.uid\nflowWithErrorAct.owner_uid = userFlow.owner_uid\napi.put(flowURL + '/' + userFlow.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .send(flowWithErrorAct)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var flow = res.body.output\n            expect(flow).not.to.have.all.keys(['_id', '__v']);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "7bf6d46e-b032-4d7d-b074-9a7110d8fc1d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if user account is suspended.",
                "fullTitle": "Enterprise Flow.UpdateUserFlow Should get error, if user account is suspended.",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n_models.User.findOneAndUpdate({ uid: dummyUser.uid }, { force_suspend: true }, { new: true }, function(err, user) {\n    if (err) {\n        done(err)\n    } else {\n        api.put(flowURL + '/' + userFlow.uid)\n            .set('authtoken', dummyUser.authtoken)\n            .expect(httpStatus.BAD_REQUEST)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    res.body.error.message.should.equal(messageList.USER_PLAN_EXPIRE_ERROR);\n                    done();\n                }\n            });\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "4892526b-69f1-45e3-ad48-39b20f3243a8",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "82bc216e-1f3e-4a34-8fd6-2d4db7556297",
              "43945677-d433-45a4-aaca-9547708aa008",
              "80cc1be5-e7d3-4950-9616-472ce26c2eb3",
              "36dd9f71-924e-429c-be1c-522800228d0a",
              "4e31d93a-2181-4ae7-a1d7-3ea06a8854d4",
              "97c7b560-ee36-4931-964d-a87fc1b88356",
              "02be3d32-9ac0-4d71-aa11-632ba7653bb8",
              "2f0a3976-3483-47db-a65c-29554259de40",
              "2caf19e3-e6b0-4bdb-a624-61c0033a8117",
              "4579bf09-50ba-40ba-a304-6c14dfabe20b",
              "9ae9e43a-2f09-4803-b023-9a80880e7b73",
              "7bf6d46e-b032-4d7d-b074-9a7110d8fc1d",
              "4892526b-69f1-45e3-ad48-39b20f3243a8"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 755,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "a41308cc-e088-4270-ad90-dfd402f86b7b",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\flow\\updateUserFlowInfo.enterprise.js",
        "file": "\\controllers\\test\\flow\\updateUserFlowInfo.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "df4ca360-a890-4b45-a544-612ba6d93bbe",
            "title": "Flow.UpdateUserFlowInfo",
            "fullFile": "D:\\api\\controllers\\test\\flow\\updateUserFlowInfo.enterprise.js",
            "file": "\\controllers\\test\\flow\\updateUserFlowInfo.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Flow.UpdateUserFlowInfo \"before all\" hook",
                "timedOut": false,
                "duration": 2759,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(userTrigger, cbk) {\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    },\n    function(result, cbk) {\n        dummyUser = result.body.output;\n        api.post(flowURL)\n            .set('authtoken', dummyUser.authtoken)\n            .send(flowData)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                cbk(err, res)\n            })\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        userFlow = res.body.output;\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "784be934-6ab6-45a4-8f36-afd31e3936fa",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Flow.UpdateUserFlowInfo \"after all\" hook",
                "timedOut": false,
                "duration": 2,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n_models.newFlow.remove({ uid: userFlow.uid }, function(err, deletedFlow) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "22ded664-4152-48bd-906b-052f5ef87e33",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Flow.UpdateUserFlowInfo Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put(flowURL + '/' + userFlow.uid + +'/info')\n    .send(userFlow)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "8b0dc3ea-acdb-4998-91f1-e0b95ca42e25",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if flow not found.",
                "fullTitle": "Enterprise Flow.UpdateUserFlowInfo Should get error, if flow not found.",
                "timedOut": false,
                "duration": 58,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put(flowURL + '/dummyFlow/info')\n    .set('authtoken', dummyUser.authtoken)\n    .send(userFlow)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.FLOW_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "0aac9c96-0f35-49d9-bc50-290e9c8100e5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if \"name\" key is missing OR empty.",
                "fullTitle": "Enterprise Flow.UpdateUserFlowInfo Should get error, if \"name\" key is missing OR empty.",
                "timedOut": false,
                "duration": 38,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar invalidFlowData = _.pick(userFlow, ['uid', 'description', 'tags'])\napi.put(flowURL + '/' + userFlow.uid + '/info')\n    .set('authtoken', dummyUser.authtoken)\n    .send(invalidFlowData)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "dd0a434e-2ae8-4a9f-939b-05d2d469de00",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should update flow, if user sends a valid data.",
                "fullTitle": "Enterprise Flow.UpdateUserFlowInfo Should update flow, if user sends a valid data.",
                "timedOut": false,
                "duration": 48,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar validFlowData = _.pick(userFlow, ['name', 'uid', 'description', 'tags'])\nvalidFlowData.name = testFlowName\napi.put(flowURL + '/' + userFlow.uid + '/info')\n    .set('authtoken', dummyUser.authtoken)\n    .send(validFlowData)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output.name).to.equal(testFlowName)\n            expect(res.body.output.flow_version).to.equal(1)\n            expect(res.body.output).not.to.have.all.keys(['_id', '__v']);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "8a5e7b69-cf2f-4fc1-a16d-f1533230c51d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8b0dc3ea-acdb-4998-91f1-e0b95ca42e25",
              "0aac9c96-0f35-49d9-bc50-290e9c8100e5",
              "dd0a434e-2ae8-4a9f-939b-05d2d469de00",
              "8a5e7b69-cf2f-4fc1-a16d-f1533230c51d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 153,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "44e86ca4-9f54-44f6-bf3c-63429aafe80e",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\flow\\updateUserFlowVersion.enterprise.js",
        "file": "\\controllers\\test\\flow\\updateUserFlowVersion.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "d181ecf9-1891-4c8f-8e8b-14436ef87450",
            "title": "Flow.UpdateUserFlowVersion",
            "fullFile": "D:\\api\\controllers\\test\\flow\\updateUserFlowVersion.enterprise.js",
            "file": "\\controllers\\test\\flow\\updateUserFlowVersion.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Flow.UpdateUserFlowVersion \"before all\" hook",
                "timedOut": false,
                "duration": 254,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data;\n        async.waterfall([\n            function(cbk) {\n                dummyUser = orgData.owner;\n                dummyUser.authtoken = dummyUser.authtoken;\n                testData.mongoUserTriggerObj.user_uid = dummyUser.uid;\n                _models.UserTrigger.create(testData.mongoUserTriggerObj, function(err, userTrigger) {\n                    cbk(err, userTrigger);\n                })\n            },\n            function(userTrigger, cbk) {\n                userTriggerObj = userTrigger.toJSON()\n                    //flowWithAllData.trigger.handlers[0] = userTriggerObj\n                api.post(flowURL)\n                    .set('authtoken', dummyUser.authtoken)\n                    .send(flowWithAllData)\n                    .expect(httpStatus.CREATED)\n                    .end(function(err, res) {\n                        cbk(err, res)\n                    })\n            }\n        ], function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                userFlow = res.body.output;\n                done()\n            }\n        })\n    });\n})",
                "err": {},
                "isRoot": false,
                "uuid": "dc3793b1-99ff-44b1-8001-aa97312e23dc",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Flow.UpdateUserFlowVersion \"after all\" hook",
                "timedOut": false,
                "duration": 2,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nhttpmock.cleanAll();\nasync.parallel([\n    function(cb) {\n        _models.newFlow.remove({ uid: userFlow.uid }, function(err, deletedFlow) {\n            cb(err, deletedFlow);\n        })\n    },\n    function(cb) {\n        _models.UserTrigger.remove({ uid: userTriggerObj.uid }, function(err, deletedUserTrigger) {\n            cb(err, deletedUserTrigger);\n        })\n    }\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "c607ab2f-f44d-47b7-b65a-37b48ff69f4a",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Flow.UpdateUserFlowVersion Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put(flowURL + '/' + userFlow.uid + '/version/' + userFlow.flow_version)\n    .send(body)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "836da97a-2c96-4e5c-ba18-6a0b6d6b153e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if flow not found.",
                "fullTitle": "Enterprise Flow.UpdateUserFlowVersion Should get error, if flow not found.",
                "timedOut": false,
                "duration": 51,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put(flowURL + '/dummyFlow' + '/version/' + userFlow.flow_version)\n    .set('authtoken', dummyUser.authtoken)\n    .send(body)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.FLOW_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "55544651-e97a-446a-83d0-2ff6367e9bd0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if flow version not found.",
                "fullTitle": "Enterprise Flow.UpdateUserFlowVersion Should get error, if flow version not found.",
                "timedOut": false,
                "duration": 210,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put(flowURL + '/' + userFlow.uid + '/version/3')\n    .set('authtoken', dummyUser.authtoken)\n    .send(body)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.FLOW_VERSION_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "f572474b-b255-469f-adc0-2a0aa17ad1fa",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should update flow version, if user sends a valid data.",
                "fullTitle": "Enterprise Flow.UpdateUserFlowVersion Should update flow version, if user sends a valid data.",
                "timedOut": false,
                "duration": 57,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put(flowURL + '/' + userFlow.uid + '/version/' + userFlow.flow_version)\n    .set('authtoken', dummyUser.authtoken)\n    .send(body)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var result = res.body.output\n            expect(_.first(result).flow_version_tag).to.equal(body.flow_version_tag)\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "bf334fe8-a550-4b66-ba0d-83edec53a65d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "836da97a-2c96-4e5c-ba18-6a0b6d6b153e",
              "55544651-e97a-446a-83d0-2ff6367e9bd0",
              "f572474b-b255-469f-adc0-2a0aa17ad1fa",
              "bf334fe8-a550-4b66-ba0d-83edec53a65d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 327,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "04a4129b-e3a5-415f-9895-8a7306facfc9",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\flow\\updateWebhook.enterprise.js",
        "file": "\\controllers\\test\\flow\\updateWebhook.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "e5d5590e-00e1-456e-8c7c-d17141c31cf0",
            "title": "Flow.UpdateWebHook",
            "fullFile": "D:\\api\\controllers\\test\\flow\\updateWebhook.enterprise.js",
            "file": "\\controllers\\test\\flow\\updateWebhook.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Flow.UpdateWebHook \"before all\" hook",
                "timedOut": false,
                "duration": 341,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data;\n        async.waterfall([\n            function(cbk) {\n                dummyUser = orgData.owner;\n                dummyUser.authtoken = dummyUser.authtoken;\n                testData.mongoUserTriggerObj.user_uid = dummyUser.uid;\n                _models.UserTrigger.create(testData.mongoUserTriggerObj, function(err, userTrigger) {\n                    cbk(err, userTrigger);\n                })\n            },\n            function(userTrigger, cbk) {\n                var userTriggerObj = userTrigger;\n                var flowData = _.cloneDeep(testData.flowBody);\n                flowData.isExpress = false;\n                flowData.trigger.handlers = [userTriggerObj]\n                async.parallel({\n                    triggerFlow: function(cb) {\n                        createFlow(flowURL, flowData, dummyUser, function(err, result) {\n                            cb(err, result);\n                        })\n                    },\n                    webHookFlow: function(cb) {\n                        var WHFlow = _.cloneDeep(flowData);\n                        WHFlow.trigger = testData.defaultTriggerObj;\n                        WHFlow.settings = testData.webHookSetting;\n                        WHFlow.active = true;\n                        WHFlow.settings = testData.webHookSetting;\n                        createFlow(flowURL, WHFlow, dummyUser, function(err, result) {\n                            cb(err, result);\n                        })\n                    }\n                }, function(err, result) {\n                    cbk(err, result)\n                })\n            }\n        ], function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                userTriggerFlow = res.triggerFlow.body.output;\n                userWebHookFlow = res.webHookFlow.body.output;\n                done()\n            }\n        })\n    });\n})",
                "err": {},
                "isRoot": false,
                "uuid": "3ada25ed-6c77-4594-84d7-953aa9ac6d29",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Flow.UpdateWebHook \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nhttpmock.cleanAll();\nvar flowUIDS = [userWebHookFlow.uid];\nasync.parallel([\n    function(cb) {\n        _models.newFlow.remove({ uid: { $in: flowUIDS } }, function(err, deletedFlows) {\n            cb(err, deletedFlows)\n        });\n    }\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "83365064-5484-4a8e-ac5e-638aa90e83c9",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Flow.UpdateWebHook Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(flowURL + '/' + userWebHookFlow.uid + '/updatewebhook')\n    .send(updateBody)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "d4a07add-865f-4725-a4e0-45b3e67839cf",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should give flow not found error, if user sends an invalid floe uid",
                "fullTitle": "Enterprise Flow.UpdateWebHook Should give flow not found error, if user sends an invalid floe uid",
                "timedOut": false,
                "duration": 52,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(flowURL + '/dummyFlow/updatewebhook')\n    .set('authtoken', dummyUser.authtoken)\n    .send(updateBody)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).to.be.equal(messageList.FLOW_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "ef253926-9d9c-4d89-be4e-d56f68a39cdb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should update webhook flow.",
                "fullTitle": "Enterprise Flow.UpdateWebHook Should update webhook flow.",
                "timedOut": false,
                "duration": 76,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(flowURL + '/' + userWebHookFlow.uid + '/updatewebhook')\n    .set('authtoken', dummyUser.authtoken)\n    .send(updateBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output.settings.url_execution).to.be.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "f69618cf-11ae-4ec8-8b59-838766736265",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should update webhook of trigger attched flow.",
                "fullTitle": "Enterprise Flow.UpdateWebHook Should update webhook of trigger attched flow.",
                "timedOut": false,
                "duration": 69,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar flow_uid = userTriggerFlow.uid\nvar trigger_path = '/trigger/' + userTriggerFlow.trigger.handlers[0] + '/handlers';\nvar trigger_body = {\n    \"unset\": [flow_uid]\n}\nvar opt = { path: trigger_path, body: trigger_body };\ncommonMock.triggerPullSuccess(opt);\napi.post(flowURL + '/' + userTriggerFlow.uid + '/updatewebhook')\n    .set('authtoken', dummyUser.authtoken)\n    .send(updateBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output.settings.url_execution).to.be.equal(true);\n            expect(res.body.output.settings).not.to.have.all.keys(['authtoken']);\n            expect(_.isEmpty(res.body.output.trigger.handlers)).to.be.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "e13bb21e-8728-437f-8126-0eb4e1916512",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d4a07add-865f-4725-a4e0-45b3e67839cf",
              "ef253926-9d9c-4d89-be4e-d56f68a39cdb",
              "f69618cf-11ae-4ec8-8b59-838766736265",
              "e13bb21e-8728-437f-8126-0eb4e1916512"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 209,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "23064452-137f-460d-adaf-2aef4a1c70b1",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\flow\\userFlowExists.enterprise.js",
        "file": "\\controllers\\test\\flow\\userFlowExists.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "67603f35-c89e-4157-9018-76f43610cd59",
            "title": "Flow.UserFlowExists",
            "fullFile": "D:\\api\\controllers\\test\\flow\\userFlowExists.enterprise.js",
            "file": "\\controllers\\test\\flow\\userFlowExists.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Flow.UserFlowExists \"before all\" hook",
                "timedOut": false,
                "duration": 2610,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(userTrigger, cbk) {\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    },\n    function(result, cbk) {\n        dummyUser = result.body.output;\n        api.post(flowURL)\n            .set('authtoken', dummyUser.authtoken)\n            .send(testData.enterpriseFlowBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                cbk(err, res)\n            })\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        userFlow = res.body.output;\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "5129350c-217b-4df3-92b1-4330b3d6472c",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Flow.UserFlowExists \"after all\" hook",
                "timedOut": false,
                "duration": 2,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nhttpmock.cleanAll();\n_models.newFlow.remove({ uid: userFlow.uid }, function(err, deletedFlow) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "4e5e75dd-3b07-4212-a912-5973de71ee68",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Flow.UserFlowExists Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(flowURL + '/' + userFlow.uid + '/exists')\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "375e32c3-3e95-439b-877c-7e1a1bf6ba3b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get \"count\" is equal to 0, if flow not found.",
                "fullTitle": "Enterprise Flow.UserFlowExists Should get \"count\" is equal to 0, if flow not found.",
                "timedOut": false,
                "duration": 57,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + '/exists')\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output.count).to.be.equal(0);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "7e05dec6-2ddc-48ee-b537-8d0451244802",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get \"count\" is equal to 1, if user flow is found.",
                "fullTitle": "Enterprise Flow.UserFlowExists Should get \"count\" is equal to 1, if user flow is found.",
                "timedOut": false,
                "duration": 45,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(flowURL + '/' + userFlow.uid + '/exists')\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output.count).to.be.equal(1);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "72342c78-9677-4f77-b095-7c4fc694c50a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "375e32c3-3e95-439b-877c-7e1a1bf6ba3b",
              "7e05dec6-2ddc-48ee-b537-8d0451244802",
              "72342c78-9677-4f77-b095-7c4fc694c50a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 113,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "d2e4ee04-918b-4fb2-850f-61dc039dbebb",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\flowOauth\\createClient.enterprise.js",
        "file": "\\controllers\\test\\flowOauth\\createClient.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "cefbe455-dd25-435f-bf22-48e1baf8b3b7",
            "title": "flowOauth",
            "fullFile": "D:\\api\\controllers\\test\\flowOauth\\createClient.enterprise.js",
            "file": "\\controllers\\test\\flowOauth\\createClient.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "5b76c504-5a16-4351-9010-c38ca07fbbc0",
                "title": "flowOauth.createClient",
                "fullFile": "D:\\api\\controllers\\test\\flowOauth\\createClient.enterprise.js",
                "file": "\\controllers\\test\\flowOauth\\createClient.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise flowOauth flowOauth.createClient \"before each\" hook",
                    "timedOut": false,
                    "duration": 2572,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ndeleteAllInsertedRecords(function(error, output) {\n    if (error) {\n        done(error);\n    } else {\n        commonMock.setSignUpMocks(httpmock, \"enterprise\");\n        api.post(\"/enterprise/v1/signup\")\n            .send(registrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    authToken = res.body.output.authtoken;\n                    _id = res.body.output._id;\n                    _userUID = res.body.output.uid;\n                    apiURL = apiURL.replace(\":uid\", res.body.output.uid);\n                    done();\n                }\n            });\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c1171c99-9578-46d4-93b8-c14eb0b1ae2d",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise flowOauth flowOauth.createClient \"after each\" hook",
                    "timedOut": false,
                    "duration": 4,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndeleteAllInsertedRecords(function(error, output) {\n    if (error) {\n        done(error);\n    } else {\n        done();\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8d46f3b2-384f-4fdb-b9ba-a2a3f16565a3",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should create oauth client.",
                    "fullTitle": "Enterprise flowOauth flowOauth.createClient Should create oauth client.",
                    "timedOut": false,
                    "duration": 45,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('authtoken', authToken)\n    .send({\n        \"redirect_uri\": \"http://demo.example.com/callback\"\n    })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.uid.should.not.equal(\"\");\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a8682dc2-98de-4ec5-9da1-47f38e05bb0c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should create oauth client without redirect_uri.",
                    "fullTitle": "Enterprise flowOauth flowOauth.createClient Should create oauth client without redirect_uri.",
                    "timedOut": false,
                    "duration": 53,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('authtoken', authToken)\n    .send({\n        \"redirect_uri\": \"\"\n    })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.uid.should.not.equal(\"\");\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ec3d088e-1ff4-41c1-90f0-4e77ac0f9bcc",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not allowed to create second oauth client.",
                    "fullTitle": "Enterprise flowOauth flowOauth.createClient Should not allowed to create second oauth client.",
                    "timedOut": false,
                    "duration": 79,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('authtoken', authToken)\n    .send({\n        \"redirect_uri\": \"http://demo.example.com/callback\"\n    })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            api.post(apiURL)\n                .set('authtoken', authToken)\n                .send({\n                    \"redirect_uri\": \"http://demo.example.com/callback\"\n                })\n                .expect(httpStatus.BAD_REQUEST)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        res.body.error.message.should.equal(messageList.FLOW_ACCESS_CLIENT_TOKEN_ALREADY_EXISTS);\n                        done();\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "045980c2-8110-43ab-b694-5879db8510e3",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise flowOauth flowOauth.createClient Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "50f4ce03-a492-4bfa-88a8-cfb8c938d4dc",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "a8682dc2-98de-4ec5-9da1-47f38e05bb0c",
                  "ec3d088e-1ff4-41c1-90f0-4e77ac0f9bcc",
                  "045980c2-8110-43ab-b694-5879db8510e3",
                  "50f4ce03-a492-4bfa-88a8-cfb8c938d4dc"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 186,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "74b2b3d5-6832-4fa2-8813-2585a8e3cb1a",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\flowOauth\\deleteClient.enterprise.js",
        "file": "\\controllers\\test\\flowOauth\\deleteClient.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "32f60212-9733-4535-9280-70783c24cfdd",
            "title": "flowOauth",
            "fullFile": "D:\\api\\controllers\\test\\flowOauth\\deleteClient.enterprise.js",
            "file": "\\controllers\\test\\flowOauth\\deleteClient.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "0bfeb06f-76f2-4cd4-a67c-3a30808f948f",
                "title": "flowOauth.deleteClient",
                "fullFile": "D:\\api\\controllers\\test\\flowOauth\\deleteClient.enterprise.js",
                "file": "\\controllers\\test\\flowOauth\\deleteClient.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise flowOauth flowOauth.deleteClient \"before each\" hook",
                    "timedOut": false,
                    "duration": 2619,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ndeleteAllInsertedRecords(function(error, output) {\n    if (error) {\n        done(error);\n    } else {\n        commonMock.setSignUpMocks(httpmock, \"enterprise\");\n        api.post(\"/enterprise/v1/signup\")\n            .send(registrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    authToken = res.body.output.authtoken;\n                    _id = res.body.output._id;\n                    _userUID = res.body.output.uid;\n                    api.post(apiURL)\n                        .set('authtoken', authToken)\n                        .send({\n                            \"redirect_uri\": \"http://demo.example.com/callback\"\n                        })\n                        .expect(httpStatus.OK)\n                        .end(function(err, res) {\n                            if (err) {\n                                done(err);\n                            } else {\n                                _flowAuthUID = res.body.output.uid;\n                                done();\n                            }\n                        });\n                }\n            });\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "78401344-9f42-422f-951d-bb40edab5736",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise flowOauth flowOauth.deleteClient \"after each\" hook",
                    "timedOut": false,
                    "duration": 4,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndeleteAllInsertedRecords(function(error, output) {\n    if (error) {\n        done(error);\n    } else {\n        done();\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "26600488-27ca-4b35-b8f4-3dde6179d6c6",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should update oauth client.",
                    "fullTitle": "Enterprise flowOauth flowOauth.deleteClient Should update oauth client.",
                    "timedOut": false,
                    "duration": 36,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.delete(apiURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.message.should.equal(messageList.FLOW_ACCESS_CLIENT_DELETED);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "52f755d2-375f-48b1-8735-b11fca420367",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give client not register for already un-register client.",
                    "fullTitle": "Enterprise flowOauth flowOauth.deleteClient Should give client not register for already un-register client.",
                    "timedOut": false,
                    "duration": 76,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.delete(apiURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            api.delete(apiURL)\n                .set('authtoken', authToken)\n                .expect(httpStatus.BAD_REQUEST)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        res.body.error.message.should.equal(messageList.FLOW_ACCESS_CLIENT_NOT_REGISTER);\n                        done();\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a44f9f6e-753f-4644-a967-0bc5597cbe82",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise flowOauth flowOauth.deleteClient Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.delete(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3f30f3d6-2f32-4d2d-97b1-eab1a6812add",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "52f755d2-375f-48b1-8735-b11fca420367",
                  "a44f9f6e-753f-4644-a967-0bc5597cbe82",
                  "3f30f3d6-2f32-4d2d-97b1-eab1a6812add"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 124,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "acf91d37-0af1-4f8b-b4af-66eb7e5ceb46",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\flowOauth\\grantToken.enterprise.js",
        "file": "\\controllers\\test\\flowOauth\\grantToken.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "d675575e-c727-4716-b269-291d36e0d998",
            "title": "flowOauth",
            "fullFile": "D:\\api\\controllers\\test\\flowOauth\\grantToken.enterprise.js",
            "file": "\\controllers\\test\\flowOauth\\grantToken.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "b3d673d9-17ee-433e-9ead-b39a41911454",
                "title": "flowOauth.grantToken",
                "fullFile": "D:\\api\\controllers\\test\\flowOauth\\grantToken.enterprise.js",
                "file": "\\controllers\\test\\flowOauth\\grantToken.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise flowOauth flowOauth.grantToken \"before each\" hook",
                    "timedOut": false,
                    "duration": 5188,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ndeleteAllInsertedRecords(function(error, output) {\n    if (error) {\n        done(error);\n    } else {\n        commonMock.setSignUpMocks(httpmock, \"enterprise\");\n        api.post(\"/enterprise/v1/signup\")\n            .send(registrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    authToken = res.body.output.authtoken;\n                    _id = res.body.output._id;\n                    _userUID = res.body.output.uid;\n                    apiURL = apiURL.replace(\":uid\", res.body.output.uid)\n                    registrationBody1 = global.getImmutable(registrationBody);\n                    registrationBody1.email = \"test.user+1@raweng.com\";\n                    commonMock.setSignUpMocks(httpmock, \"enterprise\", {\n                        email: registrationBody1.email\n                    });\n                    api.post(\"/enterprise/v1/signup\")\n                        .send(registrationBody1)\n                        .expect(httpStatus.CREATED)\n                        .end(function(err, res) {\n                            if (err) {\n                                done(err);\n                            } else {\n                                authToken2 = res.body.output.authtoken;\n                                done();\n                            }\n                        });\n                }\n            });\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "81d5277d-4673-40a6-9316-aa077db8ddb9",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise flowOauth flowOauth.grantToken \"after each\" hook",
                    "timedOut": false,
                    "duration": 4,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndeleteAllInsertedRecords(function(error, output) {\n    if (error) {\n        done(error);\n    } else {\n        done();\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4b387940-71f8-4ed5-8ca7-a769b4a354c0",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should allowed to login with oauth.",
                    "fullTitle": "Enterprise flowOauth flowOauth.grantToken Should allowed to login with oauth.",
                    "timedOut": false,
                    "duration": 411,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(\"/enterprise/v1/user/client\")\n    .set('authtoken', authToken)\n    .send({\n        \"redirect_uri\": \"http://demo.example.com/callback\"\n    })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            loginWithOauth({\n                client: res.body.output,\n                registrationBody: registrationBody\n            }, done, function(loginUserUid, uid) {\n                loginUserUid.should.equal(uid);\n                done();\n            });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fe95f548-6237-41c5-b1ff-3dfbef12248f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should allowed to login other user with oauth.",
                    "fullTitle": "Enterprise flowOauth flowOauth.grantToken Should allowed to login other user with oauth.",
                    "timedOut": false,
                    "duration": 456,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(\"/enterprise/v1/user/client\")\n    .set('authtoken', authToken)\n    .send({\n        \"redirect_uri\": \"http://demo.example.com/callback\"\n    })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            loginWithOauth({\n                client: res.body.output,\n                registrationBody: registrationBody1\n            }, done, function(loginUserUid, uid) {\n                loginUserUid.should.equal(uid);\n                done();\n            });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "41636bf7-955a-42d3-b176-22dfa4ec9c3b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should allowed to login with different client, if multiple clients are available.",
                    "fullTitle": "Enterprise flowOauth flowOauth.grantToken Should allowed to login with different client, if multiple clients are available.",
                    "timedOut": false,
                    "duration": 717,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(\"/enterprise/v1/user/client\")\n    .set('authtoken', authToken)\n    .send({\n        \"redirect_uri\": \"http://demo.example.com/callback\"\n    })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            loginWithOauth({\n                client: res.body.output,\n                registrationBody: registrationBody1\n            }, done, function(loginUserUid, uid) {\n                if (loginUserUid == uid) {\n                    api.post(\"/enterprise/v1/user/client\")\n                        .set('authtoken', authToken2)\n                        .send({\n                            \"redirect_uri\": \"http://demo.example.com/callback\"\n                        })\n                        .expect(httpStatus.OK)\n                        .end(function(err, res) {\n                            if (err) {\n                                done(err);\n                            } else {\n                                loginWithOauth({\n                                    client: res.body.output,\n                                    registrationBody: registrationBody1\n                                }, done, function(loginUserUid, uid) {\n                                    loginUserUid.should.equal(uid);\n                                    done();\n                                });\n                            }\n                        });\n                } else {\n                    loginUserUid.should.equal(uid);\n                    done();\n                }\n            });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "351e76b2-d771-4ed0-b7e2-f9742e6b0258",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise flowOauth flowOauth.grantToken Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b878e99c-dec5-4714-a355-f01d7ff9b24d",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "fe95f548-6237-41c5-b1ff-3dfbef12248f",
                  "41636bf7-955a-42d3-b176-22dfa4ec9c3b",
                  "351e76b2-d771-4ed0-b7e2-f9742e6b0258",
                  "b878e99c-dec5-4714-a355-f01d7ff9b24d"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 1594,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "7e8369c7-7e5c-4ee5-800e-2488be552160",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\flowOauth\\loginWithFlowOAuth.enterprise.js",
        "file": "\\controllers\\test\\flowOauth\\loginWithFlowOAuth.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "3f5d7ee2-7ebf-4053-b12c-9fa5f94ece93",
            "title": "flowOauth",
            "fullFile": "D:\\api\\controllers\\test\\flowOauth\\loginWithFlowOAuth.enterprise.js",
            "file": "\\controllers\\test\\flowOauth\\loginWithFlowOAuth.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "588d5424-6005-48ba-be4c-c686c3ac7799",
                "title": "flowOauth.loginWithFlowOAuth",
                "fullFile": "D:\\api\\controllers\\test\\flowOauth\\loginWithFlowOAuth.enterprise.js",
                "file": "\\controllers\\test\\flowOauth\\loginWithFlowOAuth.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise flowOauth flowOauth.loginWithFlowOAuth \"before each\" hook",
                    "timedOut": false,
                    "duration": 5234,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ndeleteAllInsertedRecords(function(error, output) {\n    if (error) {\n        done(error);\n    } else {\n        commonMock.setSignUpMocks(httpmock, \"enterprise\");\n        api.post(\"/enterprise/v1/signup\")\n            .send(registrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    authToken = res.body.output.authtoken;\n                    _id = res.body.output._id;\n                    _userUID = res.body.output.uid;\n                    apiURL = apiURL.replace(\":uid\", res.body.output.uid)\n                    registrationBody1 = global.getImmutable(registrationBody);\n                    registrationBody1.email = \"test.user+1@raweng.com\";\n                    commonMock.setSignUpMocks(httpmock, \"enterprise\", {\n                        email: registrationBody1.email\n                    });\n                    api.post(\"/enterprise/v1/signup\")\n                        .send(registrationBody1)\n                        .expect(httpStatus.CREATED)\n                        .end(function(err, res) {\n                            if (err) {\n                                done(err);\n                            } else {\n                                authToken2 = res.body.output.authtoken;\n                                done();\n                            }\n                        });\n                }\n            });\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9095f5ea-63f1-41c1-8d62-a663dc8cfa07",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise flowOauth flowOauth.loginWithFlowOAuth \"after each\" hook",
                    "timedOut": false,
                    "duration": 6,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndeleteAllInsertedRecords(function(error, output) {\n    if (error) {\n        done(error);\n    } else {\n        done();\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "660d84b3-db25-4ccb-8f76-ed7a573c0072",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should allowed to login with access token.",
                    "fullTitle": "Enterprise flowOauth flowOauth.loginWithFlowOAuth Should allowed to login with access token.",
                    "timedOut": false,
                    "duration": 44,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar accessToken = \"40399f8be4bd5e6df8b1b3a5e8a8dcf61dba4dc6\";\n_models.OAuthAccessToken.create({\n    \"access_token\": accessToken,\n    \"client_id\": \"rp84OfO7CpRrPKaD\",\n    \"refresh_token\": \"ea720a80-4b4c-c476-faf5-873b4cfb28df\",\n    \"user_uid\": _userUID\n}, function(error, access_token) {\n    if (error) {\n        done(error);\n    } else {\n        api.post(\"/enterprise/v1/oauth/user\")\n            .send({\n                access_token: accessToken\n            })\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    res.body.output.uid.should.not.equal(\"\");\n                    done();\n                }\n            });\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "80d927ac-dd8c-4ccf-9f93-17323f1e5877",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as unauthorised user.",
                    "fullTitle": "Enterprise flowOauth flowOauth.loginWithFlowOAuth Should give error as unauthorised user.",
                    "timedOut": false,
                    "duration": 22,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar accessToken = \"40399f8be4bd5e6df8b1b3a5e8a8dcf61dba4dc6\";\n_models.OAuthAccessToken.create({\n    \"access_token\": accessToken + \"DUNPLICATE\",\n    \"client_id\": \"rp84OfO7CpRrPKaD\",\n    \"refresh_token\": \"ea720a80-4b4c-c476-faf5-873b4cfb28df\",\n    \"user_uid\": _userUID\n}, function(error, access_token) {\n    if (error) {\n        done(error);\n    } else {\n        api.post(\"/enterprise/v1/oauth/user\")\n            .send({\n                access_token: accessToken\n            })\n            .expect(httpStatus.UNAUTHORIZED)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    res.body.error.message.should.equal(messageList.INVALID_FLOW_AUTH_TOKEN);\n                    done();\n                }\n            });\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "61dcd820-a37d-459b-a379-7c1136e4af66",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise flowOauth flowOauth.loginWithFlowOAuth Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a764e6ce-54d7-4f0b-9f6f-9ae34033e00f",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "80d927ac-dd8c-4ccf-9f93-17323f1e5877",
                  "61dcd820-a37d-459b-a379-7c1136e4af66",
                  "a764e6ce-54d7-4f0b-9f6f-9ae34033e00f"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 75,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "748f2733-d0e4-4689-82b6-06307e4711fc",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\flowOauth\\updateClient.enterprise.js",
        "file": "\\controllers\\test\\flowOauth\\updateClient.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "82226c85-9e84-41d6-b705-bd19a731eda7",
            "title": "flowOauth",
            "fullFile": "D:\\api\\controllers\\test\\flowOauth\\updateClient.enterprise.js",
            "file": "\\controllers\\test\\flowOauth\\updateClient.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "83b29b49-9771-49e4-996f-be8f8e10a1b1",
                "title": "flowOauth.updateClient",
                "fullFile": "D:\\api\\controllers\\test\\flowOauth\\updateClient.enterprise.js",
                "file": "\\controllers\\test\\flowOauth\\updateClient.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise flowOauth flowOauth.updateClient \"before each\" hook",
                    "timedOut": false,
                    "duration": 2812,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ndeleteAllInsertedRecords(function(error, output) {\n    if (error) {\n        done(error);\n    } else {\n        commonMock.setSignUpMocks(httpmock, \"enterprise\");\n        api.post(\"/enterprise/v1/signup\")\n            .send(registrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    authToken = res.body.output.authtoken;\n                    _id = res.body.output._id;\n                    _userUID = res.body.output.uid;\n                    api.post(apiURL)\n                        .set('authtoken', authToken)\n                        .send({\n                            \"redirect_uri\": \"http://demo.example.com/callback\"\n                        })\n                        .expect(httpStatus.OK)\n                        .end(function(err, res) {\n                            if (err) {\n                                done(err);\n                            } else {\n                                _flowAuthUID = res.body.output.uid;\n                                done();\n                            }\n                        });\n                }\n            });\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "57504b03-282f-480c-a24f-032847058a4a",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise flowOauth flowOauth.updateClient \"after each\" hook",
                    "timedOut": false,
                    "duration": 6,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndeleteAllInsertedRecords(function(error, output) {\n    if (error) {\n        done(error);\n    } else {\n        done();\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a5fc0dba-f525-434b-a273-79dd6a030f30",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should update oauth client.",
                    "fullTitle": "Enterprise flowOauth flowOauth.updateClient Should update oauth client.",
                    "timedOut": false,
                    "duration": 59,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar newUrl = \"http://example.com/callback\";\napi.put(apiURL)\n    .set('authtoken', authToken)\n    .send({\n        \"redirect_uri\": newUrl\n    })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            (res.body.output.uid == _flowAuthUID &&\n                res.body.output.redirect_uri == newUrl).should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "10c22d34-8701-44a6-879a-f450c470a2f3",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should update oauth client without redirect_uri.",
                    "fullTitle": "Enterprise flowOauth flowOauth.updateClient Should update oauth client without redirect_uri.",
                    "timedOut": false,
                    "duration": 44,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.put(apiURL)\n    .set('authtoken', authToken)\n    .send({\n        \"redirect_uri\": \"\"\n    })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            (res.body.output.uid == _flowAuthUID &&\n                res.body.output.redirect_uri == \"\").should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cc0fb947-b04e-4e11-8c12-174b39e69f11",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise flowOauth flowOauth.updateClient Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.put(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a2df07b6-a0fc-4c91-849d-6a439bde64b4",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "10c22d34-8701-44a6-879a-f450c470a2f3",
                  "cc0fb947-b04e-4e11-8c12-174b39e69f11",
                  "a2df07b6-a0fc-4c91-849d-6a439bde64b4"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 113,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "0eff521f-1913-47cc-86c1-04b571d79f1b",
        "title": "Activity Analytics",
        "fullFile": "D:\\api\\controllers\\test\\helpers\\index.js",
        "file": "\\controllers\\test\\helpers\\index.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Activity Analytics \"before each\" hook",
            "timedOut": false,
            "duration": 1,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "// var p1 = Promise.all([\n//     _models.ActionUsages.remove({})\n//     _models.User.collection.remove({})\n// ]);\n// var p2 = _models.User.collection.insert(mock_users.express.user_one);\n// var p3 = _models.User.collection.insert(mock_users.enterprise.user_one);\n// return Promise.all([p1, p2, p3]);\nreturn _models.ActionUsages.remove({})",
            "err": {},
            "isRoot": false,
            "uuid": "1d236cc1-a62c-40e8-a7aa-44f0616893ce",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "a29a4f0e-7745-48c1-a047-3e6e53ccc5c5",
            "title": "Common Validation",
            "fullFile": "D:\\api\\controllers\\test\\helpers\\index.js",
            "file": "\\controllers\\test\\helpers\\index.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should throw error for invalid params",
                "fullTitle": "Activity Analytics Common Validation Should throw error for invalid params",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(10000);\nreturn activityAnalytics.set().then(function(data) {\n    return data.should.be.undefined;\n}, function(err) {\n    return err.should.be.deep.equal({\n        message: 'Invalid arguments.',\n        errors: [\n            '\"user\" param is mandatory',\n            '\"new_flow\" param is mandatory'\n        ]\n    })\n})",
                "err": {},
                "isRoot": false,
                "uuid": "38860a59-42b6-4501-8f96-8bee690896ae",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "38860a59-42b6-4501-8f96-8bee690896ae"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "7d22581a-6b49-4b6c-97fe-38b386be9578",
            "title": "Express",
            "fullFile": "D:\\api\\controllers\\test\\helpers\\index.js",
            "file": "\\controllers\\test\\helpers\\index.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should create new analytic event for \"new flow\"",
                "fullTitle": "Activity Analytics Express Should create new analytic event for \"new flow\"",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(1000)\nreturn activityAnalytics.set(mock_users.express.user_one, mock_new_flow.express.new_flow).then(function(data) {\n    data.should.be.deep.equal({ isNew: true, isChanged: true });\n    return _models.ActionUsages.findOne()\n        .lean()\n        .then(function(act) {\n            act.created_at = act.created_at.toISOString()\n            act.updated_at = act.updated_at.toISOString()\n            delete act.triggers[0]._id\n            delete act.activities[0]._id\n            delete act._id\n            delete act.uid\n            act.should.be.deep.equal(mock_new_flow.express.new_flow_analytics)\n        })\n})",
                "err": {},
                "isRoot": false,
                "uuid": "1d9a53c2-79fd-463f-9e33-8ad04118e7d1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should update analytic event for \"existing flow\"",
                "fullTitle": "Activity Analytics Express Should update analytic event for \"existing flow\"",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(1000)\nreturn activityAnalytics.set(mock_users.express.user_one, mock_new_flow.express.new_flow)\n    .then(function() {\n        return activityAnalytics.set(mock_users.express.user_one, mock_new_flow.express.existing_flow).then(function(data) {\n            data.should.be.deep.equal({ isNew: false, isChanged: true });\n            return _models.ActionUsages.findOne()\n                .lean()\n                .then(function(act) {\n                    act.created_at = act.created_at.toISOString()\n                    act.updated_at = act.updated_at.toISOString()\n                    act.triggers = remove_id(act.triggers)\n                    act.activities = remove_id(act.activities)\n                    delete act._id\n                    delete act.uid\n                    act.should.be.deep.equal(mock_new_flow.express.existing_flow_analytics)\n                })\n        })\n    })",
                "err": {},
                "isRoot": false,
                "uuid": "255068f8-16a2-4221-9e95-4fbd61f50d50",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should be same analytic event for \"existing unchanged\"",
                "fullTitle": "Activity Analytics Express Should be same analytic event for \"existing unchanged\"",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(1000)\nreturn activityAnalytics.set(mock_users.express.user_one, mock_new_flow.express.new_flow)\n    .then(function() {\n        return activityAnalytics.set(mock_users.express.user_one, mock_new_flow.express.new_flow).then(function(data) {\n            data.should.be.deep.equal({ isNew: false, isChanged: false });\n            return _models.ActionUsages.findOne()\n                .lean()\n                .then(function(act) {\n                    act.created_at = act.created_at.toISOString()\n                    act.updated_at = act.updated_at.toISOString()\n                    delete act.triggers[0]._id\n                    delete act.activities[0]._id\n                    delete act._id\n                    delete act.uid\n                    act.should.be.deep.equal(mock_new_flow.express.new_flow_analytics)\n                })\n        })\n    })",
                "err": {},
                "isRoot": false,
                "uuid": "c56a92cc-971e-4618-86f1-fb1a631ade40",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "1d9a53c2-79fd-463f-9e33-8ad04118e7d1",
              "255068f8-16a2-4221-9e95-4fbd61f50d50",
              "c56a92cc-971e-4618-86f1-fb1a631ade40"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 31,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "636d44d0-8884-4e2a-924e-ef1c37f1f0c8",
            "title": "Enterprise",
            "fullFile": "D:\\api\\controllers\\test\\helpers\\index.js",
            "file": "\\controllers\\test\\helpers\\index.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should create new analytic event for \"new flow\"",
                "fullTitle": "Activity Analytics Enterprise Should create new analytic event for \"new flow\"",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(1000)\nreturn activityAnalytics.set(mock_users.enterprise.user_one, mock_new_flow.enterprise.new_flow).then(function(data) {\n    data.should.be.deep.equal({ isNew: true, isChanged: true });\n    return _models.ActionUsages.findOne()\n        .lean()\n        .then(function(act) {\n            act.created_at = act.created_at.toISOString()\n            act.updated_at = act.updated_at.toISOString()\n            delete act.triggers[0]._id\n            delete act.activities[0]._id\n            delete act._id\n            delete act.uid\n            act.should.be.deep.equal(mock_new_flow.enterprise.new_flow_analytics)\n        })\n})",
                "err": {},
                "isRoot": false,
                "uuid": "dad731cb-bb6c-4d9a-8d6f-f97bf585f8f8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should update analytic event for \"existing flow\"",
                "fullTitle": "Activity Analytics Enterprise Should update analytic event for \"existing flow\"",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(1000)\nreturn activityAnalytics.set(mock_users.enterprise.user_one, mock_new_flow.enterprise.new_flow).then(function() {\n    return activityAnalytics.set(mock_users.enterprise.user_one, mock_new_flow.enterprise.existing_flow).then(function(data) {\n        data.should.be.deep.equal({ isNew: false, isChanged: true });\n        return _models.ActionUsages.findOne()\n            .lean()\n            .then(function(act) {\n                act.created_at = act.created_at.toISOString()\n                act.updated_at = act.updated_at.toISOString()\n                act.triggers = remove_id(act.triggers)\n                act.activities = remove_id(act.activities)\n                delete act._id\n                delete act.uid\n                act.should.be.deep.equal(mock_new_flow.enterprise.existing_flow_analytics)\n            })\n    })\n})",
                "err": {},
                "isRoot": false,
                "uuid": "f8db3682-945a-47da-b658-fafcade0fce1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should be same analytic event for \"existing unchanged\"",
                "fullTitle": "Activity Analytics Enterprise Should be same analytic event for \"existing unchanged\"",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(1000)\nreturn activityAnalytics.set(mock_users.enterprise.user_one, mock_new_flow.enterprise.new_flow)\n    .then(function() {\n        return activityAnalytics.set(mock_users.enterprise.user_one, mock_new_flow.enterprise.new_flow).then(function(data) {\n            data.should.be.deep.equal({ isNew: false, isChanged: false });\n            return _models.ActionUsages.findOne()\n                .lean()\n                .then(function(act) {\n                    act.created_at = act.created_at.toISOString()\n                    act.updated_at = act.updated_at.toISOString()\n                    delete act.triggers[0]._id\n                    delete act.activities[0]._id\n                    delete act._id\n                    delete act.uid\n                    act.should.be.deep.equal(mock_new_flow.enterprise.new_flow_analytics)\n                })\n        })\n    })",
                "err": {},
                "isRoot": false,
                "uuid": "d755b4e2-4cb5-493f-9245-ed3bf5be8526",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should update analytic event for \"existing flow\" with \"url_execution\" set to \"false\"",
                "fullTitle": "Activity Analytics Enterprise Should update analytic event for \"existing flow\" with \"url_execution\" set to \"false\"",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(1000)\nreturn activityAnalytics.set(mock_users.enterprise.user_one, mock_new_flow.enterprise.existing_flow).then(function() {\n    return activityAnalytics.set(mock_users.enterprise.user_one, mock_new_flow.enterprise.flow_without_trigger_webhook).then(function(data) {\n        data.should.be.deep.equal({ isNew: false, isChanged: true });\n        return _models.ActionUsages.findOne()\n            .lean()\n            .then(function(act) {\n                act.created_at = act.created_at.toISOString()\n                act.updated_at = act.updated_at.toISOString()\n                act.triggers = remove_id(act.triggers)\n                act.activities = remove_id(act.activities)\n                delete act._id\n                delete act.uid\n                act.should.be.deep.equal(mock_new_flow.enterprise.flow_without_trigger_webhook_analytics)\n            })\n    })\n})",
                "err": {},
                "isRoot": false,
                "uuid": "c89daf71-a446-4961-bbdc-992f30cfda67",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "dad731cb-bb6c-4d9a-8d6f-f97bf585f8f8",
              "f8db3682-945a-47da-b658-fafcade0fce1",
              "d755b4e2-4cb5-493f-9245-ed3bf5be8526",
              "c89daf71-a446-4961-bbdc-992f30cfda67"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 42,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "bb89f875-892c-424a-a976-9efe6260bb90",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\invoices\\downloadInvoice.enterprise.js",
        "file": "\\controllers\\test\\invoices\\downloadInvoice.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "847772c2-9586-4dba-9fff-0b0e8deadeca",
            "title": "Invoices",
            "fullFile": "D:\\api\\controllers\\test\\invoices\\downloadInvoice.enterprise.js",
            "file": "\\controllers\\test\\invoices\\downloadInvoice.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "7a458bcc-7319-4ffc-ab96-a1d245864499",
                "title": "invoice.downloadInvoice",
                "fullFile": "D:\\api\\controllers\\test\\invoices\\downloadInvoice.enterprise.js",
                "file": "\\controllers\\test\\invoices\\downloadInvoice.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Invoices invoice.downloadInvoice \"before each\" hook",
                    "timedOut": false,
                    "duration": 192,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        _data = data;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2bb7f76d-3372-471c-87fa-7ba5966429e3",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Invoices invoice.downloadInvoice \"after all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "done();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cf8d8653-052a-4a5b-946d-b770a6a33349",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get invoice by uid.",
                    "fullTitle": "Enterprise Invoices invoice.downloadInvoice Should get invoice by uid.",
                    "timedOut": false,
                    "duration": 5715,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nsaveInvoices({\n    authToken: authToken,\n    braintree_customerId: _data.owner.braintree_customerId || \"\",\n    uid: _data.owner.uid || \"\"\n}, function() {\n    api.get(\"/enterprise/v1/user/account/invoices\")\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                var invoices = res.body.output;\n                var paramURL = apiURL.replace(\":invoice_uid\", invoices[0].uid);\n                api.get(paramURL)\n                    .set('authtoken', authToken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            true.should.equal(true);\n                            done();\n                        }\n                    });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e6a3e79c-4df4-4344-8b89-2d4aca33629f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Admin should get organization invoice.",
                    "fullTitle": "Enterprise Invoices invoice.downloadInvoice Admin should get organization invoice.",
                    "timedOut": false,
                    "duration": 2640,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nsaveInvoices({\n    authToken: authToken,\n    braintree_customerId: _data.organization_account.braintree_customerId || \"\",\n    uid: _data.organization_account.uid || \"\",\n    org_uid: org_uid\n}, function() {\n    api.get(\"/enterprise/v1/user/account/invoices\")\n        .set('org_uid', org_uid)\n        .set('authtoken', _data.admin.authtoken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                var invoices = res.body.output;\n                var paramURL = apiURL.replace(\":invoice_uid\", invoices[0].uid);\n                api.get(paramURL)\n                    .set('org_uid', org_uid)\n                    .set('authtoken', _data.admin.authtoken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            true.should.equal(true);\n                            done();\n                        }\n                    });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bf24abc6-f402-44f7-b3d7-6f6a88579ab1",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Billing manager should get organization invoice.",
                    "fullTitle": "Enterprise Invoices invoice.downloadInvoice Billing manager should get organization invoice.",
                    "timedOut": false,
                    "duration": 2526,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nsaveInvoices({\n    authToken: authToken,\n    braintree_customerId: _data.organization_account.braintree_customerId || \"\",\n    uid: _data.organization_account.uid || \"\",\n    org_uid: org_uid\n}, function() {\n    api.get(\"/enterprise/v1/user/account/invoices\")\n        .set('org_uid', org_uid)\n        .set('authtoken', _data.billing_manager.authtoken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                var invoices = res.body.output;\n                var paramURL = apiURL.replace(\":invoice_uid\", invoices[0].uid);\n                api.get(paramURL)\n                    .set('org_uid', org_uid)\n                    .set('authtoken', _data.billing_manager.authtoken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            true.should.equal(true);\n                            done();\n                        }\n                    });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c7668b87-13de-4357-982b-85811345802a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Developer should not get organization invoice.",
                    "fullTitle": "Enterprise Invoices invoice.downloadInvoice Developer should not get organization invoice.",
                    "timedOut": false,
                    "duration": 301,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nsaveInvoices({\n    authToken: authToken,\n    braintree_customerId: _data.organization_account.braintree_customerId || \"\",\n    uid: _data.organization_account.uid || \"\",\n    org_uid: org_uid\n}, function() {\n    api.get(\"/enterprise/v1/user/account/invoices\")\n        .set('org_uid', org_uid)\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                var invoices = res.body.output;\n                var paramURL = apiURL.replace(\":invoice_uid\", invoices[0].uid);\n                api.get(paramURL)\n                    .set('org_uid', org_uid)\n                    .set('authtoken', _data.developer.authtoken)\n                    .expect(httpStatus.UNAUTHORIZED)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            res.body.error.message.should.equal(messageList.ORG_NO_ACCESS_TO_CHANGE_PLAN);\n                            done();\n                        }\n                    });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "48024f90-31be-4700-a6b5-9fa48022ba2a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not get invoice by uid.",
                    "fullTitle": "Enterprise Invoices invoice.downloadInvoice Should not get invoice by uid.",
                    "timedOut": false,
                    "duration": 33,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n//var paramURL = apiURL.replace(\":uid\", \"ABC\");\nvar paramURL = apiURL.replace(\":invoice_uid\", \"ABC\");\napi.get(paramURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.DOWNLOAD_INVOICE_ERROR);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0e463af4-f00f-493d-8e2d-5f6047c03478",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Invoices invoice.downloadInvoice Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar paramURL = apiURL.replace(\":invoice_uid\", \"ABC\");\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6ced2cba-ff41-4a9d-82ce-92709a7b99fc",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "e6a3e79c-4df4-4344-8b89-2d4aca33629f",
                  "bf24abc6-f402-44f7-b3d7-6f6a88579ab1",
                  "c7668b87-13de-4357-982b-85811345802a",
                  "48024f90-31be-4700-a6b5-9fa48022ba2a",
                  "0e463af4-f00f-493d-8e2d-5f6047c03478",
                  "6ced2cba-ff41-4a9d-82ce-92709a7b99fc"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 11228,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "05eea55a-3d1c-4d10-89fa-d952c634eac4",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\invoices\\list.enterprise.js",
        "file": "\\controllers\\test\\invoices\\list.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "8dfadbda-901e-41ad-8fed-5940963d5b92",
            "title": "Invoices",
            "fullFile": "D:\\api\\controllers\\test\\invoices\\list.enterprise.js",
            "file": "\\controllers\\test\\invoices\\list.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "0e4407b7-c9a1-43c5-87f9-515d1298d945",
                "title": "invoice.list",
                "fullFile": "D:\\api\\controllers\\test\\invoices\\list.enterprise.js",
                "file": "\\controllers\\test\\invoices\\list.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Invoices invoice.list \"before each\" hook",
                    "timedOut": false,
                    "duration": 175,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        _data = data;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "abb76b53-7114-4c30-a7d3-764ef2fd2748",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Invoices invoice.list \"after all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "done();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "33373b53-e06e-4e4e-847d-fa96b97aac50",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Invoices invoice.list \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "db565bcc-30ee-41e6-b71b-350b2b17c494",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get list of invoices.",
                    "fullTitle": "Enterprise Invoices invoice.list Should get list of invoices.",
                    "timedOut": false,
                    "duration": 187,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nsaveInvoices({\n    authToken: authToken,\n    braintree_customerId: _data.owner.braintree_customerId || \"\",\n    uid: _data.owner.uid || \"\"\n}, function() {\n    api.get(apiURL)\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                var isValid = Array.isArray(res.body.output);\n                if (isValid) {\n                    _.each(res.body.output, function(item) {\n                        isValid = isValid && typeof(item._id) == \"undefined\" &&\n                            typeof(item.__v) == \"undefined\";\n                    });\n                }\n                isValid.should.equal(true);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "373209f1-0fe2-4c0e-81a8-524d35d5b550",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of organization invoices by Admin.",
                    "fullTitle": "Enterprise Invoices invoice.list Should get list of organization invoices by Admin.",
                    "timedOut": false,
                    "duration": 249,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nsaveInvoices({\n    authToken: authToken,\n    braintree_customerId: _data.organization_account.braintree_customerId || \"\",\n    uid: _data.organization_account.uid || \"\",\n    org_uid: org_uid\n}, function() {\n    api.get(\"/enterprise/v1/user/account/invoices\")\n        .set('org_uid', org_uid)\n        .set('authtoken', _data.admin.authtoken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                api.get(apiURL)\n                    .set('org_uid', org_uid)\n                    .set('authtoken', _data.admin.authtoken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            var isValid = Array.isArray(res.body.output);\n                            if (isValid) {\n                                _.each(res.body.output, function(item) {\n                                    isValid = isValid && typeof(item._id) == \"undefined\" &&\n                                        typeof(item.__v) == \"undefined\";\n                                });\n                            }\n                            isValid.should.equal(true);\n                            done();\n                        }\n                    });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4fd2b50a-abf4-492b-a8c1-345c41b6dda2",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Billing manager should get organization invoice.",
                    "fullTitle": "Enterprise Invoices invoice.list Billing manager should get organization invoice.",
                    "timedOut": false,
                    "duration": 271,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nsaveInvoices({\n    authToken: authToken,\n    braintree_customerId: _data.organization_account.braintree_customerId || \"\",\n    uid: _data.organization_account.uid || \"\",\n    org_uid: org_uid\n}, function() {\n    api.get(\"/enterprise/v1/user/account/invoices\")\n        .set('org_uid', org_uid)\n        .set('authtoken', _data.billing_manager.authtoken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                api.get(apiURL)\n                    .set('org_uid', org_uid)\n                    .set('authtoken', _data.billing_manager.authtoken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            var isValid = Array.isArray(res.body.output);\n                            if (isValid) {\n                                _.each(res.body.output, function(item) {\n                                    isValid = isValid && typeof(item._id) == \"undefined\" &&\n                                        typeof(item.__v) == \"undefined\";\n                                });\n                            }\n                            isValid.should.equal(true);\n                            done();\n                        }\n                    });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "04f17ee5-9f47-49ad-acea-8b8304aa0db3",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Developer should not get organization invoice.",
                    "fullTitle": "Enterprise Invoices invoice.list Developer should not get organization invoice.",
                    "timedOut": false,
                    "duration": 228,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nsaveInvoices({\n    authToken: authToken,\n    braintree_customerId: _data.organization_account.braintree_customerId || \"\",\n    uid: _data.organization_account.uid || \"\",\n    org_uid: org_uid\n}, function() {\n    api.get(\"/enterprise/v1/user/account/invoices\")\n        .set('org_uid', org_uid)\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                api.get(apiURL)\n                    .set('org_uid', org_uid)\n                    .set('authtoken', _data.developer.authtoken)\n                    .expect(httpStatus.UNAUTHORIZED)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            res.body.error.message.should.equal(messageList.ORG_NO_ACCESS_TO_CHANGE_PLAN);\n                            done();\n                        }\n                    });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6784b113-0d9f-4914-aa8d-d8257d9e9fee",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Invoices invoice.list Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7540bdae-8a52-45f0-b363-724448a585a6",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "373209f1-0fe2-4c0e-81a8-524d35d5b550",
                  "4fd2b50a-abf4-492b-a8c1-345c41b6dda2",
                  "04f17ee5-9f47-49ad-acea-8b8304aa0db3",
                  "6784b113-0d9f-4914-aa8d-d8257d9e9fee",
                  "7540bdae-8a52-45f0-b363-724448a585a6"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 943,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "9f5a8cc1-56e4-4d2a-973e-7eff44ad6f46",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\invoices\\searchByUid.enterprise.js",
        "file": "\\controllers\\test\\invoices\\searchByUid.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "c35eed0a-c358-4028-b060-9eb4354dd2d0",
            "title": "Invoices",
            "fullFile": "D:\\api\\controllers\\test\\invoices\\searchByUid.enterprise.js",
            "file": "\\controllers\\test\\invoices\\searchByUid.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "f6240cab-3322-47b4-8769-163f2c2beb32",
                "title": "invoice.searchByUid",
                "fullFile": "D:\\api\\controllers\\test\\invoices\\searchByUid.enterprise.js",
                "file": "\\controllers\\test\\invoices\\searchByUid.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Invoices invoice.searchByUid \"before each\" hook",
                    "timedOut": false,
                    "duration": 171,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        _data = data;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d9ebd5e6-4c78-4b20-a714-c03306a0bd9f",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Invoices invoice.searchByUid \"after all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "done();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "660a36a1-3768-4c7a-9cec-26de274b9a6c",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get invoice by uid.",
                    "fullTitle": "Enterprise Invoices invoice.searchByUid Should get invoice by uid.",
                    "timedOut": false,
                    "duration": 215,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nsaveInvoices({\n    authToken: authToken,\n    braintree_customerId: _data.owner.braintree_customerId || \"\",\n    uid: _data.owner.uid || \"\"\n}, function() {\n    api.get(\"/enterprise/v1/user/account/invoices\")\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                var invoices = res.body.output;\n                var paramURL = apiURL.replace(\":invoice_uid\", invoices[0].uid);\n                api.get(paramURL)\n                    .set('authtoken', authToken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            var isValid = res.body.output.uid == invoices[0].uid &&\n                                typeof(res.body.output._id) == \"undefined\" &&\n                                typeof(res.body.output.__v) == \"undefined\";\n                            isValid.should.equal(true);\n                            done();\n                        }\n                    });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5e3461f3-d669-43a3-a65b-bf1605f18c92",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get invoice of organization by Admin.",
                    "fullTitle": "Enterprise Invoices invoice.searchByUid Should get invoice of organization by Admin.",
                    "timedOut": false,
                    "duration": 253,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nsaveInvoices({\n    authToken: authToken,\n    braintree_customerId: _data.organization_account.braintree_customerId || \"\",\n    uid: _data.organization_account.uid || \"\",\n    org_uid: org_uid\n}, function() {\n    api.get(\"/enterprise/v1/user/account/invoices\")\n        .set('org_uid', org_uid)\n        .set('authtoken', _data.admin.authtoken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                var invoices = res.body.output;\n                var paramURL = apiURL.replace(\":invoice_uid\", invoices[0].uid);\n                api.get(paramURL)\n                    .set('org_uid', org_uid)\n                    .set('authtoken', _data.admin.authtoken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            var isValid = res.body.output.uid == invoices[0].uid &&\n                                typeof(res.body.output._id) == \"undefined\" &&\n                                typeof(res.body.output.__v) == \"undefined\";\n                            isValid.should.equal(true);\n                            done();\n                        }\n                    });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0b947f10-3145-42e3-89a9-2beea51844a2",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get invoice of organization by Billing Manager.",
                    "fullTitle": "Enterprise Invoices invoice.searchByUid Should get invoice of organization by Billing Manager.",
                    "timedOut": false,
                    "duration": 276,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nsaveInvoices({\n    authToken: authToken,\n    braintree_customerId: _data.organization_account.braintree_customerId || \"\",\n    uid: _data.organization_account.uid || \"\",\n    org_uid: org_uid\n}, function() {\n    api.get(\"/enterprise/v1/user/account/invoices\")\n        .set('org_uid', org_uid)\n        .set('authtoken', _data.billing_manager.authtoken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                var invoices = res.body.output;\n                var paramURL = apiURL.replace(\":invoice_uid\", invoices[0].uid);\n                api.get(paramURL)\n                    .set('org_uid', org_uid)\n                    .set('authtoken', _data.billing_manager.authtoken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            var isValid = res.body.output.uid == invoices[0].uid &&\n                                typeof(res.body.output._id) == \"undefined\" &&\n                                typeof(res.body.output.__v) == \"undefined\";\n                            isValid.should.equal(true);\n                            done();\n                        }\n                    });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "01b4d82d-8ce2-4660-8b2a-5bfb182e89a7",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get invoice of organization by Developer.",
                    "fullTitle": "Enterprise Invoices invoice.searchByUid Should get invoice of organization by Developer.",
                    "timedOut": false,
                    "duration": 238,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nsaveInvoices({\n    authToken: authToken,\n    braintree_customerId: _data.organization_account.braintree_customerId || \"\",\n    uid: _data.organization_account.uid || \"\",\n    org_uid: org_uid\n}, function() {\n    api.get(\"/enterprise/v1/user/account/invoices\")\n        .set('org_uid', org_uid)\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                var invoices = res.body.output;\n                var paramURL = apiURL.replace(\":invoice_uid\", invoices[0].uid);\n                api.get(paramURL)\n                    .set('org_uid', org_uid)\n                    .set('authtoken', _data.developer.authtoken)\n                    .expect(httpStatus.UNAUTHORIZED)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            res.body.error.message.should.equal(messageList.ORG_NO_ACCESS_TO_CHANGE_PLAN);\n                            done();\n                        }\n                    });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "82208aa6-fad6-4b1f-b88e-a7e6b6e8458d",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not get invoice by uid.",
                    "fullTitle": "Enterprise Invoices invoice.searchByUid Should not get invoice by uid.",
                    "timedOut": false,
                    "duration": 26,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n//var paramURL = apiURL.replace(\":uid\", \"ABC\");\nvar paramURL = apiURL.replace(\":invoice_uid\", \"ABC\");\napi.get(paramURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.INVOICE_NOT_FOUND);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6b4e8672-47c5-49e4-9750-d42782739b21",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Invoices invoice.searchByUid Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar paramURL = apiURL.replace(\":invoice_uid\", \"ABC\");\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2434d640-f6b9-4355-970e-6f5c325dff7f",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "5e3461f3-d669-43a3-a65b-bf1605f18c92",
                  "0b947f10-3145-42e3-89a9-2beea51844a2",
                  "01b4d82d-8ce2-4660-8b2a-5bfb182e89a7",
                  "82208aa6-fad6-4b1f-b88e-a7e6b6e8458d",
                  "6b4e8672-47c5-49e4-9750-d42782739b21",
                  "2434d640-f6b9-4355-970e-6f5c325dff7f"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 1016,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "2037982f-edbb-4370-b2db-405a8307ea72",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\logs\\getOldLogs.enterprise.js",
        "file": "\\controllers\\test\\logs\\getOldLogs.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "428fa40b-c1b7-4910-ae8a-cb04451dbe42",
            "title": "UserLogs",
            "fullFile": "D:\\api\\controllers\\test\\logs\\getOldLogs.enterprise.js",
            "file": "\\controllers\\test\\logs\\getOldLogs.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "7896060d-683a-44c1-97ba-799ac1e468e6",
                "title": "logs.getOldLogs",
                "fullFile": "D:\\api\\controllers\\test\\logs\\getOldLogs.enterprise.js",
                "file": "\\controllers\\test\\logs\\getOldLogs.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise UserLogs logs.getOldLogs \"before each\" hook",
                    "timedOut": false,
                    "duration": 5157,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.createFlowUser({}, function(error, user) {\n        if (error) {\n            done(error);\n        } else {\n            authToken = user.authtoken;\n            token = user.activation_token;\n            _id = user._id;\n            user_uid = user.uid;\n            saveUserLogs({\n                    authtoken: authToken,\n                    user_uid: user_uid\n                },\n                function(error, userLogs) {\n                    savedUserLogs = userLogs;\n                    done();\n                });\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "314a7f0b-430a-49f7-929a-e69fe2e34a81",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise UserLogs logs.getOldLogs \"after each\" hook",
                    "timedOut": false,
                    "duration": 1,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.Log.remove({ flow_name: new RegExp('^utest_cases_', \"i\") }, function(error, user) {\n    if (error) {\n        done(error);\n    } else {\n        done();\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "faefcce3-aa1a-40c0-9f02-d4a352335aa6",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get list of user logs.",
                    "fullTitle": "Enterprise UserLogs logs.getOldLogs Should get list of user logs.",
                    "timedOut": false,
                    "duration": 28,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.objects.should.be.instanceOf(Array);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b139b84d-1549-44b2-afae-e11674ffb44f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get limited list of user logs based on skip/limit.",
                    "fullTitle": "Enterprise UserLogs logs.getOldLogs Should get limited list of user logs based on skip/limit.",
                    "timedOut": false,
                    "duration": 26,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar skipLimitURL = apiURL + \"?limit=2&skip=2\";\napi.get(skipLimitURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var validOutput = false;\n            if (res.body.output.count == 5) {\n                validOutput = res.body.output.objects[0].uid == savedUserLogs[2].body.output.uid &&\n                    res.body.output.objects[1].uid == savedUserLogs[1].body.output.uid;\n            }\n            if (validOutput == false) {\n                console.log({\n                    objects: res.body.output.objects,\n                    savedUserLogs: savedUserLogs\n                });\n                logger.error({\n                    objects: res.body.output.objects,\n                    savedUserLogs: savedUserLogs\n                });\n            }\n            validOutput.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e286c610-f2fb-4f1e-b947-b8c8ae4d9615",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise UserLogs logs.getOldLogs Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5ed6b967-678b-457d-9c15-cd242bf400ee",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "b139b84d-1549-44b2-afae-e11674ffb44f",
                  "e286c610-f2fb-4f1e-b947-b8c8ae4d9615",
                  "5ed6b967-678b-457d-9c15-cd242bf400ee"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 62,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "e9cc3994-0f72-426e-9b3b-8561777a80f1",
        "title": "Express",
        "fullFile": "D:\\api\\controllers\\test\\logs\\getOldLogs.express.js",
        "file": "\\controllers\\test\\logs\\getOldLogs.express.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "82fb52ac-5878-4adf-8004-9c0cbdba68e9",
            "title": "UserLogs",
            "fullFile": "D:\\api\\controllers\\test\\logs\\getOldLogs.express.js",
            "file": "\\controllers\\test\\logs\\getOldLogs.express.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "debd4d03-26ab-44b1-9fc7-0d2939b1fb16",
                "title": "logs.getOldLogs",
                "fullFile": "D:\\api\\controllers\\test\\logs\\getOldLogs.express.js",
                "file": "\\controllers\\test\\logs\\getOldLogs.express.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Express UserLogs logs.getOldLogs \"before all\" hook",
                    "timedOut": false,
                    "duration": 5153,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.createFlowUser({\n        express: true\n    }, function(error, user) {\n        if (error) {\n            done(error);\n        } else {\n            authToken = user.authtoken;\n            token = user.activation_token;\n            _id = user._id;\n            user_uid = user.uid;\n            saveUserLogs({\n                    authtoken: authToken,\n                    user_uid: user_uid\n                },\n                function(error, userLogs) {\n                    savedUserLogs = userLogs;\n                    done();\n                });\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b79786fd-03ba-4000-a098-2c233296eeb0",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Express UserLogs logs.getOldLogs \"after all\" hook",
                    "timedOut": false,
                    "duration": 3,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.Log.remove({ flow_name: new RegExp('^utest_cases_', \"i\") }, function(error, user) {\n    if (error) {\n        done(error);\n    } else {\n        done();\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "79d7cdf5-2ae1-47b4-bc89-5f97dd200269",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get list of user logs.",
                    "fullTitle": "Express UserLogs logs.getOldLogs Should get list of user logs.",
                    "timedOut": false,
                    "duration": 32,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.objects.should.be.instanceOf(Array);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "950dc931-2a72-4932-b3df-453c41752e7f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get limited list of user logs based on skip/limit.",
                    "fullTitle": "Express UserLogs logs.getOldLogs Should get limited list of user logs based on skip/limit.",
                    "timedOut": false,
                    "duration": 28,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar skipLimitURL = apiURL + \"?limit=2&skip=2\";\napi.get(skipLimitURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var validOutput = false;\n            if (res.body.output.count == 5) {\n                validOutput = res.body.output.objects[0].uid == savedUserLogs[2].body.output.uid &&\n                    res.body.output.objects[1].uid == savedUserLogs[1].body.output.uid;\n            }\n            if (validOutput == false) {\n                console.log({\n                    objects: res.body.output.objects,\n                    savedUserLogs: savedUserLogs\n                });\n                logger.error({\n                    objects: res.body.output.objects,\n                    savedUserLogs: savedUserLogs\n                });\n            }\n            validOutput.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b237d1ac-baf9-4eea-aab1-8c9475274884",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Express UserLogs logs.getOldLogs Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f32df4d0-dfa2-416c-8a68-60333fef0cce",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "950dc931-2a72-4932-b3df-453c41752e7f",
                  "b237d1ac-baf9-4eea-aab1-8c9475274884",
                  "f32df4d0-dfa2-416c-8a68-60333fef0cce"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 69,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "d78038ba-8eae-483a-bbbf-0c0d66ddc56b",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\metrics\\getCreditsMetrics.enterprise.js",
        "file": "\\controllers\\test\\metrics\\getCreditsMetrics.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "2ae9dee6-f0c4-465d-ae27-4ac56ba5319d",
            "title": "Metrics.GetCreditsMetrics",
            "fullFile": "D:\\api\\controllers\\test\\metrics\\getCreditsMetrics.enterprise.js",
            "file": "\\controllers\\test\\metrics\\getCreditsMetrics.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Enterprise Metrics.GetCreditsMetrics \"before each\" hook",
                "timedOut": false,
                "duration": 282,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    async.waterfall([\n        function(cbk) {\n            testCollection.organizationRemoveRecords({}, function() {\n                testCollection.createFlowUser({}, function(error, user) {\n                    if (error) {\n                        done(error);\n                    } else {\n                        cbk(null, user);\n                    }\n                });\n            });\n        },\n        function(user, cbk) {\n            dummyUser = user;\n            saveBillEntries(\n                _.extend(getImmutable(billBody), {\n                    authtoken: dummyUser.authtoken\n                }),\n                function(error, bills) {\n                    savedBills = bills;\n                    cbk(null, savedBills);\n                });\n        }\n    ], function(err, results) {\n        if (err) {\n            done(err);\n        } else {\n            done();\n        }\n    })\n});",
                "err": {},
                "isRoot": false,
                "uuid": "b891e139-761e-4fb6-8360-c5c0b3f8dc25",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after each\" hook",
                "fullTitle": "Enterprise Metrics.GetCreditsMetrics \"after each\" hook",
                "timedOut": false,
                "duration": 9,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "c7c1c898-b644-4e79-a89b-6a18a48b5592",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Metrics.GetCreditsMetrics Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "0c3a475c-4141-4662-b195-56c194666c7e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of credit metrics last month from current date if date not provided.",
                "fullTitle": "Enterprise Metrics.GetCreditsMetrics Should get list of credit metrics last month from current date if date not provided.",
                "timedOut": false,
                "duration": 39,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output).to.be.instanceof(Array);\n            expect(_.first(res.body.output)).to.have.any.keys(['total_credits', 'date']);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "5dd4f486-45c9-4d95-b55d-e3b7a3e8d07a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of credit metrics if particular date is provided.",
                "fullTitle": "Enterprise Metrics.GetCreditsMetrics Should get list of credit metrics if particular date is provided.",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nupdated_at = (new Date()).toISOString();\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send({ startDate: created_at, endDate: updated_at })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output).to.be.instanceof(Array);\n            expect(_.first(res.body.output)).to.have.any.keys(['total_credits', 'date']);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "3ba67013-7fd7-4409-8719-6d414c9812e8",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0c3a475c-4141-4662-b195-56c194666c7e",
              "5dd4f486-45c9-4d95-b55d-e3b7a3e8d07a",
              "3ba67013-7fd7-4409-8719-6d414c9812e8"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 77,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "bdbe7f53-4972-4b55-8906-4fe9185d43b9",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\metrics\\getCreditsMetricsOrg.enterprise.js",
        "file": "\\controllers\\test\\metrics\\getCreditsMetricsOrg.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "b8e5dc36-1734-4319-82c4-646dd03141dd",
            "title": "Metrics.GetCreditsMetrics",
            "fullFile": "D:\\api\\controllers\\test\\metrics\\getCreditsMetricsOrg.enterprise.js",
            "file": "\\controllers\\test\\metrics\\getCreditsMetricsOrg.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Enterprise Metrics.GetCreditsMetrics \"before each\" hook",
                "timedOut": false,
                "duration": 729,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    async.waterfall([\n        function(cbk) {\n            testCollection.organizationRemoveRecords({}, function() {\n                testCollection.organizationRecordsEntry({}, function(data) {\n                    authToken = data.owner.authtoken;\n                    org_uid = data.organization.uid;\n                    cbk(null, data);\n                });\n            });\n        },\n        function(res, cbk) {\n            saveBillEntries(\n                _.extend(getImmutable(billBody), {\n                    authtoken: authToken\n                }),\n                function(error, bills) {\n                    savedBills = bills;\n                    cbk(null, savedBills);\n                });\n        }\n    ], function(err, results) {\n        if (err) {\n            done(err);\n        } else {\n            done();\n        }\n    })\n});",
                "err": {},
                "isRoot": false,
                "uuid": "094f50eb-a3ee-421b-bab8-52f432733616",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after each\" hook",
                "fullTitle": "Enterprise Metrics.GetCreditsMetrics \"after each\" hook",
                "timedOut": false,
                "duration": 8,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "1489ef2a-49a6-4b5e-9763-7880d0fc857d",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Metrics.GetCreditsMetrics Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('org_uid', org_uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "aeee4193-dea3-4051-835b-2d4ae8525159",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of credit metrics last month from current date if date not provided.",
                "fullTitle": "Enterprise Metrics.GetCreditsMetrics Should get list of credit metrics last month from current date if date not provided.",
                "timedOut": false,
                "duration": 53,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output).to.be.instanceof(Array);\n            expect(_.first(res.body.output)).to.have.any.keys(['total_credits', 'date']);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "671b741c-167e-4ca7-9818-eb2014b99cb0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of credit metrics if particular date is provided.",
                "fullTitle": "Enterprise Metrics.GetCreditsMetrics Should get list of credit metrics if particular date is provided.",
                "timedOut": false,
                "duration": 50,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nupdated_at = (new Date()).toISOString();\napi.post(apiURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .send({ startDate: created_at, endDate: updated_at })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output).to.be.instanceof(Array);\n            expect(_.first(res.body.output)).to.have.any.keys(['total_credits', 'date']);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "84fe593e-a47d-418d-8f58-3b8f86f16533",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "aeee4193-dea3-4051-835b-2d4ae8525159",
              "671b741c-167e-4ca7-9818-eb2014b99cb0",
              "84fe593e-a47d-418d-8f58-3b8f86f16533"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 115,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "de50594b-242f-42ae-be6c-c7a6eb065082",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\metrics\\getFlowDetailsMetrics.enterprise.js",
        "file": "\\controllers\\test\\metrics\\getFlowDetailsMetrics.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "0a1e8697-41c7-46e6-a5b7-970fc5e3e997",
            "title": "Metrics.GetFlowDetailsMetrics",
            "fullFile": "D:\\api\\controllers\\test\\metrics\\getFlowDetailsMetrics.enterprise.js",
            "file": "\\controllers\\test\\metrics\\getFlowDetailsMetrics.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Enterprise Metrics.GetFlowDetailsMetrics \"before each\" hook",
                "timedOut": false,
                "duration": 289,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    async.waterfall([\n        function(cbk) {\n            testCollection.organizationRemoveRecords({}, function() {\n                testCollection.createFlowUser({}, function(error, user) {\n                    if (error) {\n                        done(error);\n                    } else {\n                        authToken = user.authtoken;\n                        token = user.activation_token;\n                        _id = user._id;\n                        uid = user.uid;\n                        cbk(null, user);\n                    }\n                });\n            });\n        },\n        function(user, cbk) {\n            dummyUser = user;\n            saveBillEntries(\n                _.extend(getImmutable(billBody), {\n                    authtoken: dummyUser.authtoken\n                }),\n                function(error, bills) {\n                    savedBills = bills;\n                    cbk(null, savedBills);\n                });\n        }\n    ], function(err, results) {\n        if (err) {\n            done(err);\n        } else {\n            done();\n        }\n    })\n});",
                "err": {},
                "isRoot": false,
                "uuid": "e5ad91c2-47f0-4106-b547-7210e4ab6ffb",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after each\" hook",
                "fullTitle": "Enterprise Metrics.GetFlowDetailsMetrics \"after each\" hook",
                "timedOut": false,
                "duration": 6,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "de4b9597-ae8c-4359-be6d-b57c49ec4e5e",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Metrics.GetFlowDetailsMetrics Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL + flowUid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "a794ca3c-6893-42b4-bb40-2b208ab5220f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of flow details metrics if valid flow uid provided.",
                "fullTitle": "Enterprise Metrics.GetFlowDetailsMetrics Should get list of flow details metrics if valid flow uid provided.",
                "timedOut": false,
                "duration": 43,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL + flowUid)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output).to.be.instanceof(Array);\n            expect(_.first(res.body.output)).to.have.any.keys(_.keys(billBody));\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "eacd0355-7ccf-47cc-90a8-3e68f224e101",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a794ca3c-6893-42b4-bb40-2b208ab5220f",
              "eacd0355-7ccf-47cc-90a8-3e68f224e101"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 53,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "1eac1a89-4acd-4179-a611-889e5d8df61c",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\metrics\\getFlowDetailsMetricsOrg.enterprise.js",
        "file": "\\controllers\\test\\metrics\\getFlowDetailsMetricsOrg.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "b46da2d7-913e-462c-ac09-637e1d6b2eff",
            "title": "Metrics.GetFlowDetailsMetricsOrg",
            "fullFile": "D:\\api\\controllers\\test\\metrics\\getFlowDetailsMetricsOrg.enterprise.js",
            "file": "\\controllers\\test\\metrics\\getFlowDetailsMetricsOrg.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Enterprise Metrics.GetFlowDetailsMetricsOrg \"before each\" hook",
                "timedOut": false,
                "duration": 497,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    async.waterfall([\n        function(cbk) {\n            testCollection.organizationRemoveRecords({}, function() {\n                testCollection.organizationRecordsEntry({}, function(data) {\n                    authToken = data.owner.authtoken;\n                    org_uid = data.organization.uid;\n                    cbk(null, data);\n                });\n            });\n        },\n        function(res, cbk) {\n            saveBillEntries(\n                _.extend(getImmutable(billBody), {\n                    authtoken: authToken\n                }),\n                function(error, bills) {\n                    savedBills = bills;\n                    cbk(null, savedBills);\n                });\n        }\n    ], function(err, results) {\n        if (err) {\n            done(err);\n        } else {\n            done();\n        }\n    })\n});",
                "err": {},
                "isRoot": false,
                "uuid": "681734e2-f51f-457a-b966-ddb1d5df7cb5",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after each\" hook",
                "fullTitle": "Enterprise Metrics.GetFlowDetailsMetricsOrg \"after each\" hook",
                "timedOut": false,
                "duration": 9,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "a3689395-1df5-4c9b-87e6-bf71da27c42e",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Metrics.GetFlowDetailsMetricsOrg Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL + flowUid)\n    .set('org_uid', org_uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "b878f0f6-09c2-46cc-b8b5-1e60c1f7c044",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of flow details metrics if valid flow uid provided.",
                "fullTitle": "Enterprise Metrics.GetFlowDetailsMetricsOrg Should get list of flow details metrics if valid flow uid provided.",
                "timedOut": false,
                "duration": 50,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL + flowUid)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output).to.be.instanceof(Array);\n            expect(_.first(res.body.output)).to.have.any.keys(_.keys(billBody));\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "779425e6-7153-4589-b426-b9c0091dbeee",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b878f0f6-09c2-46cc-b8b5-1e60c1f7c044",
              "779425e6-7153-4589-b426-b9c0091dbeee"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 59,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "574bb989-cc6d-4295-ba7d-59e9f49ec0b5",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\metrics\\getFlowsMetrics.enterprise.js",
        "file": "\\controllers\\test\\metrics\\getFlowsMetrics.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "ca7b09e0-5568-4dac-80f7-f202acb5e923",
            "title": "Metrics.GetFlowsMetrics",
            "fullFile": "D:\\api\\controllers\\test\\metrics\\getFlowsMetrics.enterprise.js",
            "file": "\\controllers\\test\\metrics\\getFlowsMetrics.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Enterprise Metrics.GetFlowsMetrics \"before each\" hook",
                "timedOut": false,
                "duration": 296,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    async.waterfall([\n        function(cbk) {\n            testCollection.organizationRemoveRecords({}, function() {\n                testCollection.createFlowUser({\n                    email: testData.testRegistrationBody.email\n                }, function(error, user) {\n                    if (error) {\n                        done(error);\n                    } else {\n                        authToken = user.authtoken;\n                        token = user.activation_token;\n                        _id = user._id;\n                        uid = user.uid;\n                        cbk(null, user);\n                    }\n                });\n            });\n        },\n        function(user, cbk) {\n            authToken = user.authtoken;\n            saveBillEntries(\n                _.extend(getImmutable(billBody), {\n                    authtoken: authToken\n                }),\n                function(error, bills) {\n                    savedBills = bills;\n                    cbk(null, savedBills);\n                });\n        }\n    ], function(err, results) {\n        if (err) {\n            done(err);\n        } else {\n            done();\n        }\n    });\n});",
                "err": {},
                "isRoot": false,
                "uuid": "cf02116e-d347-405d-9ba0-60ee44d3d564",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Metrics.GetFlowsMetrics \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n_models.Bill.remove({}, function(err) {\n    done(err);\n});",
                "err": {},
                "isRoot": false,
                "uuid": "18b01551-edea-44c1-86b1-1a037c9b8858",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Metrics.GetFlowsMetrics Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "bc0d667e-7d4b-48ed-95d5-8cfd70af059e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of flow metrics last month from current date if date not provided.",
                "fullTitle": "Enterprise Metrics.GetFlowsMetrics Should get list of flow metrics last month from current date if date not provided.",
                "timedOut": false,
                "duration": 33,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output).to.be.instanceof(Array);\n            expect(_.first(res.body.output)).to.have.any.keys(keySet);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "68f7fe80-35fa-4cd0-9063-c53d91d3ee30",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of flow metrics if particular date is provided.",
                "fullTitle": "Enterprise Metrics.GetFlowsMetrics Should get list of flow metrics if particular date is provided.",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nupdated_at = (new Date()).toISOString();\napi.post(apiURL)\n    .set('authtoken', authToken)\n    .send({ startDate: created_at, endDate: updated_at })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output).to.be.instanceof(Array);\n            expect(_.first(res.body.output)).to.have.any.keys(keySet);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "ddf05d56-41ad-4d95-9aa0-7bbafe198512",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "bc0d667e-7d4b-48ed-95d5-8cfd70af059e",
              "68f7fe80-35fa-4cd0-9063-c53d91d3ee30",
              "ddf05d56-41ad-4d95-9aa0-7bbafe198512"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 72,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "63cdc618-3d8f-4fc2-8b8d-3cdfa0d277a3",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\metrics\\getFlowsMetricsOrg.enterprise.js",
        "file": "\\controllers\\test\\metrics\\getFlowsMetricsOrg.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "5d20d40e-cf2a-48d9-93a2-c6c6b3d9b0dc",
            "title": "Metrics.GetFlowsMetricsOrg",
            "fullFile": "D:\\api\\controllers\\test\\metrics\\getFlowsMetricsOrg.enterprise.js",
            "file": "\\controllers\\test\\metrics\\getFlowsMetricsOrg.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Enterprise Metrics.GetFlowsMetricsOrg \"before each\" hook",
                "timedOut": false,
                "duration": 454,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.waterfall([\n    function(cbk) {\n        testCollection.organizationRemoveRecords({}, function() {\n            testCollection.organizationRecordsEntry({}, function(data) {\n                authToken = data.owner.authtoken;\n                org_uid = data.organization.uid;\n                cbk(null, data);\n            });\n        });\n    },\n    function(res, cbk) {\n        saveBillEntries(\n            _.extend(getImmutable(billBody), {\n                authtoken: authToken\n            }),\n            function(error, bills) {\n                savedBills = bills;\n                cbk(null, savedBills);\n            });\n    }\n], function(err, results) {\n    if (err) {\n        done(err);\n    } else {\n        done();\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "263e5694-2d75-48f7-bc9c-abe39a0bd983",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Metrics.GetFlowsMetricsOrg \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n_models.Bill.remove({}, function(err) {\n    done(err);\n});",
                "err": {},
                "isRoot": false,
                "uuid": "a820b50f-0f82-48ea-a557-a0b03350ea06",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Metrics.GetFlowsMetricsOrg Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set(\"org_uid\", org_uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "7cadb640-fa94-46d0-a122-7e6b6e9df877",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of flow metrics last month from current date if date not provided.",
                "fullTitle": "Enterprise Metrics.GetFlowsMetricsOrg Should get list of flow metrics last month from current date if date not provided.",
                "timedOut": false,
                "duration": 46,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set(\"org_uid\", org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output).to.be.instanceof(Array);\n            expect(_.first(res.body.output)).to.have.any.keys(keySet);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "f08c4e01-97e6-4270-bd34-98f1dcb21a30",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of flow metrics if particular date is provided.",
                "fullTitle": "Enterprise Metrics.GetFlowsMetricsOrg Should get list of flow metrics if particular date is provided.",
                "timedOut": false,
                "duration": 56,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nupdated_at = (new Date()).toISOString();\napi.post(apiURL)\n    .set(\"org_uid\", org_uid)\n    .set('authtoken', authToken)\n    .send({ startDate: created_at, endDate: updated_at })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output).to.be.instanceof(Array);\n            expect(_.first(res.body.output)).to.have.any.keys(keySet);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "2f25ee4b-5eaa-481e-bf92-1e0d5d363399",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "7cadb640-fa94-46d0-a122-7e6b6e9df877",
              "f08c4e01-97e6-4270-bd34-98f1dcb21a30",
              "2f25ee4b-5eaa-481e-bf92-1e0d5d363399"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 113,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "1a599ac3-3bb0-40da-b66b-efb8086b79de",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\metrics\\getGraphData.enterprise.js",
        "file": "\\controllers\\test\\metrics\\getGraphData.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "2a541dbb-0159-4ec6-a229-c6723ba1fed0",
            "title": "Metrics.getGraphData",
            "fullFile": "D:\\api\\controllers\\test\\metrics\\getGraphData.enterprise.js",
            "file": "\\controllers\\test\\metrics\\getGraphData.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Enterprise Metrics.getGraphData \"before each\" hook",
                "timedOut": false,
                "duration": 4609,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    async.waterfall([\n        function(cbk) {\n            _models.User.remove({}, function(error, user) {\n                commonMock.setSignUpMocks(httpmock, \"enterprise\");\n                api.post(\"/enterprise/v1/signup\")\n                    .send(testData.testRegistrationBody)\n                    .expect(httpStatus.CREATED)\n                    .end(function(err, res) {\n                        authToken = res.body.output.authtoken;\n                        api.get(\"/enterprise/v1/user\")\n                            .set('authtoken', authToken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                env_uid = res.body.output.env_uid;\n                                user_uid = res.body.output.uid;\n                                cbk(err, res);\n                            });\n                    });\n            });\n        },\n        function(res, cbk) {\n            saveBillEntries({\n                    done: done,\n                    authtoken: authToken\n                },\n                function(error, bills) {\n                    savedBills = bills;\n                    cbk(null, savedBills);\n                });\n        },\n        function(res, cbk) {\n            saveUserTriggers({\n                    done: done,\n                    authtoken: authToken\n                },\n                function(error, bills) {\n                    savedBills = bills;\n                    cbk(null, savedBills);\n                });\n        },\n        function(res, cbk) {\n            saveUserFlows({\n                    done: done,\n                    authtoken: authToken\n                },\n                function(error, userFlows) {\n                    cbk(null, userFlows);\n                });\n        }\n    ], function(err, results) {\n        done();\n    });\n});",
                "err": {},
                "isRoot": false,
                "uuid": "b8df16c4-66bb-4282-bc4f-1aefadd9da22",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Metrics.getGraphData \"after all\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ndone();",
                "err": {},
                "isRoot": false,
                "uuid": "377136c3-ce10-41e2-bfed-d44ddc216c25",
                "isHook": true,
                "skipped": false
              },
              {
                "title": "\"after each\" hook",
                "fullTitle": "Enterprise Metrics.getGraphData \"after each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "httpmock.cleanAll();\ndone();",
                "err": {},
                "isRoot": false,
                "uuid": "dd6278e8-9919-454f-a692-a970d503a18a",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should get type bill data.",
                "fullTitle": "Enterprise Metrics.getGraphData Should get type bill data.",
                "timedOut": false,
                "duration": 43,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar billURL = apiURL + \"?type=bill\";\napi.get(billURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //var isValid = res.body.output[0][0] == currentDate &&\n            //    res.body.output[1][0] == 10;\n            (res.body.output[1][0] == 10).should.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "d6171e4a-bbad-444f-878f-f76ba4b6a8b3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get type bill data based on daily filter.",
                "fullTitle": "Enterprise Metrics.getGraphData Should get type bill data based on daily filter.",
                "timedOut": false,
                "duration": 59,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar billURL = apiURL + \"?type=bill&filter=daily\";\napi.get(billURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //var isValid = res.body.output[0][0] == currentDate &&\n            //    res.body.output[1][0] == 10;\n            (res.body.output[1][0] == 10).should.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "36a4d6e2-ca19-45f7-98a9-31c9a3e8f549",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get type bill data based on monthly filter.",
                "fullTitle": "Enterprise Metrics.getGraphData Should get type bill data based on monthly filter.",
                "timedOut": false,
                "duration": 44,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar billURL = apiURL + \"?type=bill&filter=monthly\";\napi.get(billURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //var isValid = res.body.output[0][0] == currentMonthFormat &&\n            //    res.body.output[1][0] == 10;\n            (res.body.output[1][0] == 10).should.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "c1b9e686-3082-46e2-9fd3-2bdaa3e861e8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get type bill data based on yearly filter.",
                "fullTitle": "Enterprise Metrics.getGraphData Should get type bill data based on yearly filter.",
                "timedOut": false,
                "duration": 45,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar billURL = apiURL + \"?type=bill&filter=weekly\";\napi.get(billURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //var isValid = res.body.output[0][0] == currentWeekFormat &&\n            //    res.body.output[1][0] == 10;\n            (res.body.output[1][0] == 10).should.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "5d0c2b55-8179-4163-af0d-df9bb190f65d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get type trigger data.",
                "fullTitle": "Enterprise Metrics.getGraphData Should get type trigger data.",
                "timedOut": false,
                "duration": 40,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar triggerURL = apiURL + \"?type=trigger\";\napi.get(triggerURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //var isValid = res.body.output[0][0] == currentDate &&\n            //    res.body.output[1][0] == 10;\n            (res.body.output[1][0] == 10).should.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "d1e3e9f8-159c-4ea3-a3d4-5ccf95da4ba8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get type trigger data based on daily filter.",
                "fullTitle": "Enterprise Metrics.getGraphData Should get type trigger data based on daily filter.",
                "timedOut": false,
                "duration": 41,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar triggerURL = apiURL + \"?type=trigger&filter=daily\";\napi.get(triggerURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //var isValid = res.body.output[0][0] == currentDate &&\n            //    res.body.output[1][0] == 10;\n            (res.body.output[1][0] == 10).should.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "307d7b0d-bfbd-4f9b-8209-f57be79018f1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get type trigger data based on monthly filter.",
                "fullTitle": "Enterprise Metrics.getGraphData Should get type trigger data based on monthly filter.",
                "timedOut": false,
                "duration": 48,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar triggerURL = apiURL + \"?type=trigger&filter=monthly\";\napi.get(triggerURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //var isValid = res.body.output[0][0] == currentMonthFormat &&\n            //    res.body.output[1][0] == 10;\n            (res.body.output[1][0] == 10).should.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "db3e280a-2fef-4180-9ce9-3c586304fad7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get type trigger data based on weekly filter.",
                "fullTitle": "Enterprise Metrics.getGraphData Should get type trigger data based on weekly filter.",
                "timedOut": false,
                "duration": 41,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar triggerURL = apiURL + \"?type=trigger&filter=weekly\";\napi.get(triggerURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //var isValid = res.body.output[0][0] == currentWeekFormat &&\n            //    res.body.output[1][0] == 10;\n            (res.body.output[1][0] == 10).should.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "e1982fea-8b0f-42be-b062-49c312011e1f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get type flowscreated data.",
                "fullTitle": "Enterprise Metrics.getGraphData Should get type flowscreated data.",
                "timedOut": false,
                "duration": 56,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar flowURL = apiURL + \"?type=flowscreated\";\napi.get(flowURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //var isValid = res.body.output[0][0] == currentDate &&\n            //    res.body.output[1][0] >= 10;\n            (res.body.output[1][0] >= 10).should.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "a02ab756-7c9c-4741-8069-82c9ad9e8621",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get type flowscreated data based on daily filter.",
                "fullTitle": "Enterprise Metrics.getGraphData Should get type flowscreated data based on daily filter.",
                "timedOut": false,
                "duration": 50,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar flowURL = apiURL + \"?type=flowscreated&filter=daily\";\napi.get(flowURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //var isValid = res.body.output[0][0] == currentDate &&\n            //    res.body.output[1][0] >= 10;\n            (res.body.output[1][0] >= 10).should.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "44468723-78b6-4362-b38c-a056a937165c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get type flowscreated data based on monthly filter.",
                "fullTitle": "Enterprise Metrics.getGraphData Should get type flowscreated data based on monthly filter.",
                "timedOut": false,
                "duration": 42,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar flowURL = apiURL + \"?type=flowscreated&filter=monthly\";\napi.get(flowURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //var isValid = res.body.output[0][0] == currentMonthFormat &&\n            //    res.body.output[1][0] >= 10;\n            (res.body.output[1][0] >= 10).should.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "3046af02-1d7b-4db5-8ec4-16da1e7ad251",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get type flowscreated data based on weekly filter.",
                "fullTitle": "Enterprise Metrics.getGraphData Should get type flowscreated data based on weekly filter.",
                "timedOut": false,
                "duration": 50,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar flowURL = apiURL + \"?type=flowscreated&filter=weekly\";\napi.get(flowURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //var isValid = res.body.output[0][0] == currentWeekFormat &&\n            //    res.body.output[1][0] >= 10;\n            (res.body.output[1][0] >= 10).should.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "7394eb51-65fc-4f28-9ca1-6da2d6b5da58",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get type credits data.",
                "fullTitle": "Enterprise Metrics.getGraphData Should get type credits data.",
                "timedOut": false,
                "duration": 38,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar creditURL = apiURL + \"?type=credits\";\napi.get(creditURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //var isValid = res.body.output[0][0] == currentDate;\n            (res.body.output[0][0]).should.not.equal(\"\");\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "639aae11-cee9-4683-9320-f957efd1bd0c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get type credits data based on daily filter.",
                "fullTitle": "Enterprise Metrics.getGraphData Should get type credits data based on daily filter.",
                "timedOut": false,
                "duration": 50,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar creditURL = apiURL + \"?type=credits&filter=daily\";\napi.get(creditURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //var isValid = res.body.output[0][0] == currentDate;\n            (res.body.output[0][0]).should.not.equal(\"\");\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "83472c42-f7d0-4a9c-b410-e663f5869d0d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get type credits based on monthly filter.",
                "fullTitle": "Enterprise Metrics.getGraphData Should get type credits based on monthly filter.",
                "timedOut": false,
                "duration": 41,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar creditURL = apiURL + \"?type=credits&filter=monthly\";\napi.get(creditURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output[0][0] == currentMonthFormat;\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "a4a4aa95-6095-491d-abcd-2d984a2e1b8f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get type credits data based on weekly filter.",
                "fullTitle": "Enterprise Metrics.getGraphData Should get type credits data based on weekly filter.",
                "timedOut": false,
                "duration": 39,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar creditURL = apiURL + \"?type=credits&filter=weekly\";\napi.get(creditURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output[0][0].indexOf(\"week\") == 0;\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "38f64166-bdaf-428d-ba4b-5fca167c77e1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should give invalid type error.",
                "fullTitle": "Enterprise Metrics.getGraphData Should give invalid type error.",
                "timedOut": false,
                "duration": 43,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar fakeURL = apiURL + \"?type=FAKE\";\napi.get(fakeURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.GRAPH_TYPE_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "88eb97e4-1c78-415c-836e-ba6f60650422",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Metrics.getGraphData Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "32f70064-0528-4406-b7ca-37c927c2a72d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d6171e4a-bbad-444f-878f-f76ba4b6a8b3",
              "36a4d6e2-ca19-45f7-98a9-31c9a3e8f549",
              "c1b9e686-3082-46e2-9fd3-2bdaa3e861e8",
              "5d0c2b55-8179-4163-af0d-df9bb190f65d",
              "d1e3e9f8-159c-4ea3-a3d4-5ccf95da4ba8",
              "307d7b0d-bfbd-4f9b-8209-f57be79018f1",
              "db3e280a-2fef-4180-9ce9-3c586304fad7",
              "e1982fea-8b0f-42be-b062-49c312011e1f",
              "a02ab756-7c9c-4741-8069-82c9ad9e8621",
              "44468723-78b6-4362-b38c-a056a937165c",
              "3046af02-1d7b-4db5-8ec4-16da1e7ad251",
              "7394eb51-65fc-4f28-9ca1-6da2d6b5da58",
              "639aae11-cee9-4683-9320-f957efd1bd0c",
              "83472c42-f7d0-4a9c-b410-e663f5869d0d",
              "a4a4aa95-6095-491d-abcd-2d984a2e1b8f",
              "38f64166-bdaf-428d-ba4b-5fca167c77e1",
              "88eb97e4-1c78-415c-836e-ba6f60650422",
              "32f70064-0528-4406-b7ca-37c927c2a72d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 791,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "4dff3c19-7712-4cb0-80d3-d8a577748576",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\metrics\\getGraphDataOrg.enterprise.js",
        "file": "\\controllers\\test\\metrics\\getGraphDataOrg.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "37ff8123-7bc5-4ad4-824d-61229dd43c69",
            "title": "Metrics.getGraphDataOrg",
            "fullFile": "D:\\api\\controllers\\test\\metrics\\getGraphDataOrg.enterprise.js",
            "file": "\\controllers\\test\\metrics\\getGraphDataOrg.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Enterprise Metrics.getGraphDataOrg \"before each\" hook",
                "timedOut": false,
                "duration": 2783,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    async.waterfall([\n        function(cbk) {\n            testCollection.organizationRemoveRecords({}, function() {\n                testCollection.organizationRecordsEntry({}, function(data) {\n                    authToken = data.owner.authtoken;\n                    org_uid = data.organization.uid;\n                    org_account_uid = data.organization_account.uid;\n                    api.get(\"/enterprise/v1/user\")\n                        .set('org_uid', org_uid)\n                        .set('authtoken', authToken)\n                        .expect(httpStatus.OK)\n                        .end(function(err, res) {\n                            env_uid = res.body.output.env_uid;\n                            cbk(null, data);\n                        });\n                });\n            });\n        },\n        function(res, cbk) {\n            api.get(\"/enterprise/v1/user\")\n                .set('org_uid', org_uid)\n                .set('authtoken', authToken)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    env_uid = res.body.output.env_uid;\n                    cbk(err, res);\n                });\n        },\n        function(res, cbk) {\n            saveBillEntries({\n                    done: done,\n                    authtoken: authToken\n                },\n                function(error, bills) {\n                    savedBills = bills;\n                    cbk(null, savedBills);\n                });\n        },\n        function(res, cbk) {\n            saveUserTriggers({\n                    done: done,\n                    authtoken: authToken\n                },\n                function(error, bills) {\n                    savedBills = bills;\n                    cbk(null, savedBills);\n                });\n        },\n        function(res, cbk) {\n            saveUserFlows({\n                    done: done,\n                    authtoken: authToken\n                },\n                function(error, userFlows) {\n                    cbk(null, userFlows);\n                });\n        }\n    ], function(err, results) {\n        done();\n    });\n});",
                "err": {},
                "isRoot": false,
                "uuid": "2276b013-003e-4d02-a939-658fb7400974",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Metrics.getGraphDataOrg \"after all\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ndone();",
                "err": {},
                "isRoot": false,
                "uuid": "38a6266c-af38-41ea-8165-fec996213e5f",
                "isHook": true,
                "skipped": false
              },
              {
                "title": "\"after each\" hook",
                "fullTitle": "Enterprise Metrics.getGraphDataOrg \"after each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "httpmock.cleanAll();\ndone();",
                "err": {},
                "isRoot": false,
                "uuid": "babea697-e8fc-4f13-a005-39ed33f58949",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should get type bill data.",
                "fullTitle": "Enterprise Metrics.getGraphDataOrg Should get type bill data.",
                "timedOut": false,
                "duration": 55,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar billURL = apiURL + \"?type=bill\";\napi.get(billURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //var isValid = res.body.output[0][0] == currentDate &&\n            //    res.body.output[1][0] == 10;\n            (res.body.output[1][0] == 10).should.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "a2aeaca8-4633-4edc-8b7c-3a095faa8c23",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get type bill data based on daily filter.",
                "fullTitle": "Enterprise Metrics.getGraphDataOrg Should get type bill data based on daily filter.",
                "timedOut": false,
                "duration": 46,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar billURL = apiURL + \"?type=bill&filter=daily\";\napi.get(billURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //var isValid = res.body.output[0][0] == currentDate &&\n            //    res.body.output[1][0] == 10;\n            (res.body.output[1][0] == 10).should.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "d429bec7-fc9d-4489-a9d3-ef68665b860c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get type bill data based on monthly filter.",
                "fullTitle": "Enterprise Metrics.getGraphDataOrg Should get type bill data based on monthly filter.",
                "timedOut": false,
                "duration": 55,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar billURL = apiURL + \"?type=bill&filter=monthly\";\napi.get(billURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //var isValid = res.body.output[0][0] == currentMonthFormat &&\n            //    res.body.output[1][0] == 10;\n            (res.body.output[1][0] == 10).should.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "15d0910a-41ad-4ec2-a0fd-bf3dc30603b6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get type bill data based on yearly filter.",
                "fullTitle": "Enterprise Metrics.getGraphDataOrg Should get type bill data based on yearly filter.",
                "timedOut": false,
                "duration": 55,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar billURL = apiURL + \"?type=bill&filter=weekly\";\napi.get(billURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //var isValid = res.body.output[0][0] == currentWeekFormat &&\n            //    res.body.output[1][0] == 10;\n            (res.body.output[1][0] == 10).should.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "af0f06fa-7daf-4628-a623-bb7700a8e61d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get type trigger data.",
                "fullTitle": "Enterprise Metrics.getGraphDataOrg Should get type trigger data.",
                "timedOut": false,
                "duration": 55,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar triggerURL = apiURL + \"?type=trigger\";\napi.get(triggerURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //var isValid = res.body.output[0][0] == currentDate &&\n            //    res.body.output[1][0] == 10;\n            (res.body.output[1][0] == 10).should.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "ab5f90c2-5078-4a77-bc1f-1d866ab153a5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get type trigger data based on daily filter.",
                "fullTitle": "Enterprise Metrics.getGraphDataOrg Should get type trigger data based on daily filter.",
                "timedOut": false,
                "duration": 49,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar triggerURL = apiURL + \"?type=trigger&filter=daily\";\napi.get(triggerURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //var isValid = res.body.output[0][0] == currentDate &&\n            //    res.body.output[1][0] == 10;\n            (res.body.output[1][0] == 10).should.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "2805c551-1db9-4e31-b448-5b284bdb1114",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get type trigger data based on monthly filter.",
                "fullTitle": "Enterprise Metrics.getGraphDataOrg Should get type trigger data based on monthly filter.",
                "timedOut": false,
                "duration": 52,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar triggerURL = apiURL + \"?type=trigger&filter=monthly\";\napi.get(triggerURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //var isValid = res.body.output[0][0] == currentMonthFormat &&\n            //    res.body.output[1][0] == 10;\n            (res.body.output[1][0] == 10).should.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "38d8df16-5bc7-4a29-87e1-84ec94ffc520",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get type trigger data based on weekly filter.",
                "fullTitle": "Enterprise Metrics.getGraphDataOrg Should get type trigger data based on weekly filter.",
                "timedOut": false,
                "duration": 61,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar triggerURL = apiURL + \"?type=trigger&filter=weekly\";\napi.get(triggerURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //var isValid = res.body.output[0][0] == currentWeekFormat &&\n            //    res.body.output[1][0] == 10;\n            (res.body.output[1][0] == 10).should.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "d3d50829-4f23-4f8e-a34c-af5be06e728a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get type flowscreated data.",
                "fullTitle": "Enterprise Metrics.getGraphDataOrg Should get type flowscreated data.",
                "timedOut": false,
                "duration": 64,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar flowURL = apiURL + \"?type=flowscreated\";\napi.get(flowURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //var isValid = res.body.output[0][0] == currentDate &&\n            //    res.body.output[1][0] >= 10;\n            (res.body.output[1][0] >= 10).should.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "a5a7765c-30fe-4efa-b6ef-89717e7a741b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get type flowscreated data based on daily filter.",
                "fullTitle": "Enterprise Metrics.getGraphDataOrg Should get type flowscreated data based on daily filter.",
                "timedOut": false,
                "duration": 53,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar flowURL = apiURL + \"?type=flowscreated&filter=daily\";\napi.get(flowURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //var isValid = res.body.output[0][0] == currentDate &&\n            //    res.body.output[1][0] >= 10;\n            (res.body.output[1][0] >= 10).should.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "171d3c8d-0399-45af-919e-a91c0fdeabbb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get type flowscreated data based on monthly filter.",
                "fullTitle": "Enterprise Metrics.getGraphDataOrg Should get type flowscreated data based on monthly filter.",
                "timedOut": false,
                "duration": 51,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar flowURL = apiURL + \"?type=flowscreated&filter=monthly\";\napi.get(flowURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //var isValid = res.body.output[0][0] == currentMonthFormat &&\n            //    res.body.output[1][0] >= 10;\n            (res.body.output[1][0] >= 10).should.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "d8ae24cd-f9c0-4d9e-9799-d560f7358750",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get type flowscreated data based on weekly filter.",
                "fullTitle": "Enterprise Metrics.getGraphDataOrg Should get type flowscreated data based on weekly filter.",
                "timedOut": false,
                "duration": 55,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar flowURL = apiURL + \"?type=flowscreated&filter=weekly\";\napi.get(flowURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //var isValid = res.body.output[0][0] == currentWeekFormat &&\n            //    res.body.output[1][0] >= 10;\n            (res.body.output[1][0] >= 10).should.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "2620653a-62d0-4fae-8ad7-9f9ac1b2ee72",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get type credits data.",
                "fullTitle": "Enterprise Metrics.getGraphDataOrg Should get type credits data.",
                "timedOut": false,
                "duration": 55,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar creditURL = apiURL + \"?type=credits\";\napi.get(creditURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //var isValid = res.body.output[0][0] == currentDate;\n            (res.body.output[0][0]).should.not.equal(\"\");\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "907f6da4-b9c4-407d-96d2-69ed40716f4d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get type credits data based on daily filter.",
                "fullTitle": "Enterprise Metrics.getGraphDataOrg Should get type credits data based on daily filter.",
                "timedOut": false,
                "duration": 53,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar creditURL = apiURL + \"?type=credits&filter=daily\";\napi.get(creditURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //var isValid = res.body.output[0][0] == currentDate;\n            (res.body.output[0][0]).should.not.equal(\"\");\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "4e25b9fe-e47d-4c58-a86f-53f6554249b7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get type credits based on monthly filter.",
                "fullTitle": "Enterprise Metrics.getGraphDataOrg Should get type credits based on monthly filter.",
                "timedOut": false,
                "duration": 53,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar creditURL = apiURL + \"?type=credits&filter=monthly\";\napi.get(creditURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output[0][0] == currentMonthFormat;\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "e6c12cbd-30ba-4acf-ac5f-42908c4298d8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get type credits data based on weekly filter.",
                "fullTitle": "Enterprise Metrics.getGraphDataOrg Should get type credits data based on weekly filter.",
                "timedOut": false,
                "duration": 46,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar creditURL = apiURL + \"?type=credits&filter=weekly\";\napi.get(creditURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output[0][0].indexOf(\"week\") == 0;\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "8e0e0142-d2a9-4348-8ae1-61ecc394c4a9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should give invalid type error.",
                "fullTitle": "Enterprise Metrics.getGraphDataOrg Should give invalid type error.",
                "timedOut": false,
                "duration": 49,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar fakeURL = apiURL + \"?type=FAKE\";\napi.get(fakeURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.GRAPH_TYPE_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "e916a0e6-8e81-4368-b7f7-0f09a3cc024a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Metrics.getGraphDataOrg Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "4ac9c90c-213a-45d1-a6db-ac45f0143c4f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a2aeaca8-4633-4edc-8b7c-3a095faa8c23",
              "d429bec7-fc9d-4489-a9d3-ef68665b860c",
              "15d0910a-41ad-4ec2-a0fd-bf3dc30603b6",
              "af0f06fa-7daf-4628-a623-bb7700a8e61d",
              "ab5f90c2-5078-4a77-bc1f-1d866ab153a5",
              "2805c551-1db9-4e31-b448-5b284bdb1114",
              "38d8df16-5bc7-4a29-87e1-84ec94ffc520",
              "d3d50829-4f23-4f8e-a34c-af5be06e728a",
              "a5a7765c-30fe-4efa-b6ef-89717e7a741b",
              "171d3c8d-0399-45af-919e-a91c0fdeabbb",
              "d8ae24cd-f9c0-4d9e-9799-d560f7358750",
              "2620653a-62d0-4fae-8ad7-9f9ac1b2ee72",
              "907f6da4-b9c4-407d-96d2-69ed40716f4d",
              "4e25b9fe-e47d-4c58-a86f-53f6554249b7",
              "e6c12cbd-30ba-4acf-ac5f-42908c4298d8",
              "8e0e0142-d2a9-4348-8ae1-61ecc394c4a9",
              "e916a0e6-8e81-4368-b7f7-0f09a3cc024a",
              "4ac9c90c-213a-45d1-a6db-ac45f0143c4f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 920,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "ee309c23-dde3-4483-aef9-942ee2b00260",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\metrics\\getTransactionMetrics.enterprise.js",
        "file": "\\controllers\\test\\metrics\\getTransactionMetrics.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "da55d4b1-76b4-4bdc-938d-dd5b5543c7fb",
            "title": "Metrics.getTransactionMetrics",
            "fullFile": "D:\\api\\controllers\\test\\metrics\\getTransactionMetrics.enterprise.js",
            "file": "\\controllers\\test\\metrics\\getTransactionMetrics.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Enterprise Metrics.getTransactionMetrics \"before each\" hook",
                "timedOut": false,
                "duration": 279,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    async.waterfall([\n        function(cbk) {\n            testCollection.createFlowUser({\n                plan: \"light_transaction\"\n            }, function(error, user) {\n                if (error) {\n                    done(error);\n                } else {\n                    cbk(null, user);\n                }\n            });\n        },\n        function(user, cbk) {\n            dummyUser = user;\n            saveBillEntries(\n                _.extend(getImmutable(billBody), {\n                    authtoken: dummyUser.authToken\n                }),\n                function(error, bills) {\n                    savedBills = bills;\n                    cbk(null, savedBills);\n                });\n        }\n    ], function(err, results) {\n        if (err) {\n            done(err);\n        } else {\n            done();\n        }\n    })\n});",
                "err": {},
                "isRoot": false,
                "uuid": "c28c27cb-77be-41ae-980b-1683225e3f93",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after each\" hook",
                "fullTitle": "Enterprise Metrics.getTransactionMetrics \"after each\" hook",
                "timedOut": false,
                "duration": 13,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "9b4ed6f0-9895-4a3f-b5e4-8168b02bcb70",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Metrics.getTransactionMetrics Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "ac4fd2dd-255a-44e6-afd2-5ff6dca600f7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of transactions metrics last month from current date if date not provided.",
                "fullTitle": "Enterprise Metrics.getTransactionMetrics Should get list of transactions metrics last month from current date if date not provided.",
                "timedOut": false,
                "duration": 27,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var flag = Array.isArray(res.body.output);\n            var item = (_.first(res.body.output) || {});\n            (typeof(item['total_transactions']) != \"undefined\" &&\n                typeof(item['date']) != \"undefined\").should.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "0497d15d-4a72-4577-8317-d6ce9d5108c3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of transactions metrics if particular date is provided.",
                "fullTitle": "Enterprise Metrics.getTransactionMetrics Should get list of transactions metrics if particular date is provided.",
                "timedOut": false,
                "duration": 26,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nupdated_at = (new Date()).toISOString();\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send({ startDate: created_at, endDate: updated_at })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var flag = Array.isArray(res.body.output);\n            var item = (_.first(res.body.output) || {});\n            (typeof(item['total_transactions']) != \"undefined\" &&\n                typeof(item['date']) != \"undefined\").should.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "23d2c1c3-22fa-4cd0-bb1c-c93be51d84bb",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ac4fd2dd-255a-44e6-afd2-5ff6dca600f7",
              "0497d15d-4a72-4577-8317-d6ce9d5108c3",
              "23d2c1c3-22fa-4cd0-bb1c-c93be51d84bb"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 61,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "effc210c-7811-418a-8d28-4a2a982de9aa",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\metrics\\getTransactionMetricsOrg.enterprise.js",
        "file": "\\controllers\\test\\metrics\\getTransactionMetricsOrg.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "9b2097e5-2a2f-4c21-a9ec-80f9c9aff980",
            "title": "Metrics.getTransactionMetricsOrg",
            "fullFile": "D:\\api\\controllers\\test\\metrics\\getTransactionMetricsOrg.enterprise.js",
            "file": "\\controllers\\test\\metrics\\getTransactionMetricsOrg.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Enterprise Metrics.getTransactionMetricsOrg \"before each\" hook",
                "timedOut": false,
                "duration": 447,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    async.waterfall([\n        function(cbk) {\n            testCollection.organizationRemoveRecords({}, function() {\n                testCollection.organizationRecordsEntry({}, function(data) {\n                    authToken = data.owner.authtoken;\n                    org_uid = data.organization.uid;\n                    cbk(null, data);\n                });\n            });\n        },\n        function(res, cbk) {\n            saveBillEntries(\n                _.extend(getImmutable(billBody), {\n                    authtoken: authToken\n                }),\n                function(error, bills) {\n                    savedBills = bills;\n                    cbk(null, savedBills);\n                });\n        }\n    ], function(err, results) {\n        if (err) {\n            done(err);\n        } else {\n            done();\n        }\n    })\n});",
                "err": {},
                "isRoot": false,
                "uuid": "d65fe981-67bd-4f09-b3d6-f82bef394f1e",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after each\" hook",
                "fullTitle": "Enterprise Metrics.getTransactionMetricsOrg \"after each\" hook",
                "timedOut": false,
                "duration": 11,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "0d49203d-0189-4afb-90e3-b8f2d7ec7eba",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Metrics.getTransactionMetricsOrg Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('org_uid', org_uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "8ad6bd45-fef9-405c-b4f9-b58ab6e0a888",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of transactions metrics last month from current date if date not provided.",
                "fullTitle": "Enterprise Metrics.getTransactionMetricsOrg Should get list of transactions metrics last month from current date if date not provided.",
                "timedOut": false,
                "duration": 46,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output).to.be.instanceof(Array);\n            expect(_.first(res.body.output)).to.have.any.keys(['total_transactions', 'date']);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "243c9c19-c70c-4cc1-8141-ab1db5f6ab56",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of transactions metrics if particular date is provided.",
                "fullTitle": "Enterprise Metrics.getTransactionMetricsOrg Should get list of transactions metrics if particular date is provided.",
                "timedOut": false,
                "duration": 50,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nupdated_at = (new Date()).toISOString();\napi.post(apiURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .send({ startDate: created_at, endDate: updated_at })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output).to.be.instanceof(Array);\n            expect(_.first(res.body.output)).to.have.any.keys(['total_transactions', 'date']);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "29803977-4bd2-4dde-a64f-e2e309ef0239",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8ad6bd45-fef9-405c-b4f9-b58ab6e0a888",
              "243c9c19-c70c-4cc1-8141-ab1db5f6ab56",
              "29803977-4bd2-4dde-a64f-e2e309ef0239"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 104,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "d937abc3-c0bf-4d24-9689-101a5dd1b1a8",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\oauth\\getList.enterprise.js",
        "file": "\\controllers\\test\\oauth\\getList.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "56f7abef-e354-4210-964f-a609d0f1f8a7",
            "title": "Oauth",
            "fullFile": "D:\\api\\controllers\\test\\oauth\\getList.enterprise.js",
            "file": "\\controllers\\test\\oauth\\getList.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "28e3fa79-63dd-4f92-b515-f385c15b6891",
                "title": "oauth.getList",
                "fullFile": "D:\\api\\controllers\\test\\oauth\\getList.enterprise.js",
                "file": "\\controllers\\test\\oauth\\getList.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Oauth oauth.getList \"before each\" hook",
                    "timedOut": false,
                    "duration": 2996,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ndeleteAllInsertedRecords(function(error, output) {\n    if (error) {\n        done(error);\n    } else {\n        commonMock.setSignUpMocks(httpmock, \"enterprise\");\n        api.post(\"/enterprise/v1/signup\")\n            .send(registrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    authToken = res.body.output.authtoken;\n                    _id = res.body.output._id;\n                    _userUID = res.body.output.uid;\n                    apiURL = apiURL.replace(\":uid\", res.body.output.uid);\n                    saveOAuth({\n                        authToken: authToken,\n                        userUid: _userUID\n                    }, function() {\n                        done();\n                    });\n                }\n            });\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b6a3d6bc-fae7-4cb2-a94a-234c13380f58",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Oauth oauth.getList \"after all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "done();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bafc02e5-291b-46f5-b584-826c3a8a9bc2",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Oauth oauth.getList \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fb7bf3be-bcf9-4005-8d2c-e049a7779cc7",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Oauth oauth.getList Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "402d48e5-46fa-4b01-a9ae-7be8fd5a1fdd",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "402d48e5-46fa-4b01-a9ae-7be8fd5a1fdd"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 10,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "7fd84acd-7b78-4b2b-8a1c-0470150ac388",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\organization\\changePlan.enterprise.js",
        "file": "\\controllers\\test\\organization\\changePlan.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "fc271acc-cf72-4700-98d9-0019b7c219dd",
            "title": "Organization",
            "fullFile": "D:\\api\\controllers\\test\\organization\\changePlan.enterprise.js",
            "file": "\\controllers\\test\\organization\\changePlan.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "2d705ee0-4afa-4a7a-9d78-96ff8f6c26db",
                "title": "Organization.changePlan",
                "fullFile": "D:\\api\\controllers\\test\\organization\\changePlan.enterprise.js",
                "file": "\\controllers\\test\\organization\\changePlan.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Organization Organization.changePlan \"before each\" hook",
                    "timedOut": false,
                    "duration": 171,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        _data = data;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a38b4c81-580c-4cf3-bb60-94a4ba19d3be",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Organization Organization.changePlan \"after all\" hook",
                    "timedOut": false,
                    "duration": 1,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "aa694ebf-0635-4ec5-9ce4-b39d2b5c9493",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Organization Organization.changePlan \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "56c1537f-8d5c-4ffd-aa52-fa884026043e",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should allowed to change organization plan.",
                    "fullTitle": "Enterprise Organization Organization.changePlan Should allowed to change organization plan.",
                    "timedOut": false,
                    "duration": 131,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempOrgBody = getImmutable(orgBody);\ntempOrgBody.plan = \"org_standard_paid\";\ncommonMock.braintreeCancelSubscription(httpmock, \"enterprise\");\ncommonMock.braintreeUpdatePaymentMethod(httpmock, \"enterprise\");\ncommonMock.braintreeSubscription(httpmock, \"enterprise\");\napi.put(apiURL.replace(\":org_uid\", org_uid))\n    .send(tempOrgBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.uid.should.equal(org_uid);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1c0560e8-c261-4688-8d83-b65afb6a8ec5",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not allowed to change organization plan.",
                    "fullTitle": "Enterprise Organization Organization.changePlan Should not allowed to change organization plan.",
                    "timedOut": false,
                    "duration": 20,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempOrgBody = getImmutable(orgBody);\ntempOrgBody.plan = \"org_standard_paid\";\ncommonMock.braintreeCancelSubscription(httpmock, \"enterprise\");\ncommonMock.braintreeUpdatePaymentMethod(httpmock, \"enterprise\");\ncommonMock.braintreeSubscription(httpmock, \"enterprise\");\napi.put(apiURL.replace(\":org_uid\", \"FAKE_ORG\"))\n    .send(tempOrgBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_NOT_FOUND);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "23e17f49-2a54-4180-bcfe-fdc89338ccf3",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should allowed to change organization plan to another paid plan.",
                    "fullTitle": "Enterprise Organization Organization.changePlan Should allowed to change organization plan to another paid plan.",
                    "timedOut": false,
                    "duration": 117,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempOrgBody = getImmutable(orgBody);\ntempOrgBody.plan = \"org_standard_paid\";\ncommonMock.braintreeCancelSubscription(httpmock, \"enterprise\");\ncommonMock.braintreeUpdatePaymentMethod(httpmock, \"enterprise\");\ncommonMock.braintreeSubscription(httpmock, \"enterprise\");\napi.put(apiURL.replace(\":org_uid\", org_uid))\n    .send(tempOrgBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.uid.should.equal(org_uid);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b5119bcb-a0c4-436c-8d5c-af29019c15df",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should validate organization change plan body.",
                    "fullTitle": "Enterprise Organization Organization.changePlan Should validate organization change plan body.",
                    "timedOut": false,
                    "duration": 32,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.braintreeCancelSubscription(httpmock, \"enterprise\");\ncommonMock.braintreeUpdatePaymentMethod(httpmock, \"enterprise\");\ncommonMock.braintreeSubscription(httpmock, \"enterprise\");\napi.put(apiURL.replace(\":org_uid\", org_uid))\n    .send({})\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            (res.body.error.plan.message == messageList.ORG_PLAN_REQUIRED &&\n                res.body.error.nonce.message == messageList.ORG_NONCE_REQUIRED &&\n                res.body.error.billing_address1.message == messageList.ORG_BILLING_ADDR_REQUIRED &&\n                res.body.error.cardholderName.message == messageList.ORG_CARDHOLDER_NAME_REQUIRED).should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b660ec1a-ed84-481a-b47b-136f41191f17",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should allowed to change organization plan by owner.",
                    "fullTitle": "Enterprise Organization Organization.changePlan Should allowed to change organization plan by owner.",
                    "timedOut": false,
                    "duration": 105,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.braintreeCancelSubscription(httpmock, \"enterprise\");\ncommonMock.braintreeUpdatePaymentMethod(httpmock, \"enterprise\");\ncommonMock.braintreeSubscription(httpmock, \"enterprise\");\nvar tempOrgBody = getImmutable(orgBody);\ntempOrgBody.plan = \"org_annual_standard\";\napi.put(apiURL.replace(\":org_uid\", org_uid))\n    .send(tempOrgBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.uid.should.equal(org_uid);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "397878d3-d0bd-4d15-afd4-cd564471ed3d",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should allowed to change organization plan by admin role user.",
                    "fullTitle": "Enterprise Organization Organization.changePlan Should allowed to change organization plan by admin role user.",
                    "timedOut": false,
                    "duration": 105,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.braintreeCancelSubscription(httpmock, \"enterprise\");\ncommonMock.braintreeUpdatePaymentMethod(httpmock, \"enterprise\");\ncommonMock.braintreeSubscription(httpmock, \"enterprise\");\nvar tempOrgBody = getImmutable(orgBody);\ntempOrgBody.plan = \"org_annual_standard\";\napi.put(apiURL.replace(\":org_uid\", org_uid))\n    .send(tempOrgBody)\n    .set('authtoken', _data.admin.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.uid.should.equal(org_uid);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "06cba764-d052-4546-9bcf-898529be1f73",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should allowed to change organization plan by Billing Manager role user.",
                    "fullTitle": "Enterprise Organization Organization.changePlan Should allowed to change organization plan by Billing Manager role user.",
                    "timedOut": false,
                    "duration": 113,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.braintreeCancelSubscription(httpmock, \"enterprise\");\ncommonMock.braintreeUpdatePaymentMethod(httpmock, \"enterprise\");\ncommonMock.braintreeSubscription(httpmock, \"enterprise\");\nvar tempOrgBody = getImmutable(orgBody);\ntempOrgBody.plan = \"org_annual_standard\";\napi.put(apiURL.replace(\":org_uid\", org_uid))\n    .send(tempOrgBody)\n    .set('authtoken', _data.billing_manager.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.uid.should.equal(org_uid);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "724c4752-0a28-4548-ad87-2aa2bd2bf8cb",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not allowed to change organization plan by other role user.",
                    "fullTitle": "Enterprise Organization Organization.changePlan Should not allowed to change organization plan by other role user.",
                    "timedOut": false,
                    "duration": 29,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.braintreeCancelSubscription(httpmock, \"enterprise\");\ncommonMock.braintreeUpdatePaymentMethod(httpmock, \"enterprise\");\ncommonMock.braintreeSubscription(httpmock, \"enterprise\");\nvar tempOrgBody = getImmutable(orgBody);\ntempOrgBody.plan = \"org_annual_standard\";\napi.put(apiURL.replace(\":org_uid\", org_uid))\n    .send(tempOrgBody)\n    .set('authtoken', _data.developer.authtoken)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_NO_ACCESS_TO_CHANGE_PLAN);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ea62f4d4-0c87-4ba7-ad33-96780e71ddcf",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Organization Organization.changePlan Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempOrgBody = getImmutable(orgBody);\ntempOrgBody.plan = \"org_annual_standard\";\napi.put(apiURL.replace(\":org_uid\", org_uid))\n    .send(tempOrgBody)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9dfd80e4-369f-4f13-bf09-bee774e87c30",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "1c0560e8-c261-4688-8d83-b65afb6a8ec5",
                  "23e17f49-2a54-4180-bcfe-fdc89338ccf3",
                  "b5119bcb-a0c4-436c-8d5c-af29019c15df",
                  "b660ec1a-ed84-481a-b47b-136f41191f17",
                  "397878d3-d0bd-4d15-afd4-cd564471ed3d",
                  "06cba764-d052-4546-9bcf-898529be1f73",
                  "724c4752-0a28-4548-ad87-2aa2bd2bf8cb",
                  "ea62f4d4-0c87-4ba7-ad33-96780e71ddcf",
                  "9dfd80e4-369f-4f13-bf09-bee774e87c30"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 660,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "9aa18bd7-1964-4aef-a2f5-c513f0044afb",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\organization\\checkOrgName.enterprise.js",
        "file": "\\controllers\\test\\organization\\checkOrgName.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "e86193de-2398-485d-8110-ba353266ba28",
            "title": "Organization",
            "fullFile": "D:\\api\\controllers\\test\\organization\\checkOrgName.enterprise.js",
            "file": "\\controllers\\test\\organization\\checkOrgName.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "9bbcb73b-cf37-461d-ac91-06e606e05b7f",
                "title": "Organization.checkOrgName",
                "fullFile": "D:\\api\\controllers\\test\\organization\\checkOrgName.enterprise.js",
                "file": "\\controllers\\test\\organization\\checkOrgName.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Organization Organization.checkOrgName \"before each\" hook",
                    "timedOut": false,
                    "duration": 164,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        _data = data;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0456239f-0a25-4947-b4a3-cf7ce691f528",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Organization Organization.checkOrgName \"after all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c5d03c5f-9931-4725-9123-9a471ed6ed8e",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Organization Organization.checkOrgName \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "867d5983-2015-42ba-9b72-ea782746d4f1",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should check org name is available or not.",
                    "fullTitle": "Enterprise Organization Organization.checkOrgName Should check org name is available or not.",
                    "timedOut": false,
                    "duration": 26,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar body = {\n    'name': 'org3',\n    'org_uid': org_uid\n};\napi.post(apiURL)\n    .send(body)\n    .set('authtoken', _data.admin.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.allowed.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a4cd864b-a634-4af4-93c5-e4a9768d3834",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should check org name is available or not without passing org_uid.",
                    "fullTitle": "Enterprise Organization Organization.checkOrgName Should check org name is available or not without passing org_uid.",
                    "timedOut": false,
                    "duration": 24,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar body = {\n    'name': 'org3'\n};\napi.post(apiURL)\n    .send(body)\n    .set('authtoken', _data.admin.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.allowed.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5381f787-761d-4457-a605-92bc815bc3c4",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should validate organization details body.",
                    "fullTitle": "Enterprise Organization Organization.checkOrgName Should validate organization details body.",
                    "timedOut": false,
                    "duration": 24,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .send({})\n    .set('authtoken', _data.admin.authtoken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            (res.body.error.name.message == messageList.ORG_NAME_REQUIRED).should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5347d8a3-4154-407b-a167-413cfa3ce585",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should update same name in organization details.",
                    "fullTitle": "Enterprise Organization Organization.checkOrgName Should update same name in organization details.",
                    "timedOut": false,
                    "duration": 24,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar body = {\n    'name': 'org1',\n    'org_uid': org_uid\n};\napi.post(apiURL)\n    .send(body)\n    .set('authtoken', _data.admin.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.allowed.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cd28f8a3-7969-4ae2-a4c1-eba8195c02bf",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give false for duplicate name.",
                    "fullTitle": "Enterprise Organization Organization.checkOrgName Should give false for duplicate name.",
                    "timedOut": false,
                    "duration": 25,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar body = {\n    'name': 'org2',\n    'org_uid': org_uid\n};\napi.post(apiURL)\n    .send(body)\n    .set('authtoken', _data.admin.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.allowed.should.equal(false);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c1224cb7-be46-427e-8989-43c0c4b01027",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give false for same name if org_uid not provided.",
                    "fullTitle": "Enterprise Organization Organization.checkOrgName Should give false for same name if org_uid not provided.",
                    "timedOut": false,
                    "duration": 27,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar body = {\n    'name': 'org1'\n};\napi.post(apiURL)\n    .send(body)\n    .set('authtoken', _data.admin.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.allowed.should.equal(false);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2cbed2cd-bc45-46e5-bf98-de0957d18630",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Organization Organization.checkOrgName Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar body = {\n    'name': 'org3',\n    'org_uid': org_uid\n};\napi.post(apiURL)\n    .send(body)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f3ae3441-bebb-484a-be46-4fb02bd3d7ca",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "a4cd864b-a634-4af4-93c5-e4a9768d3834",
                  "5381f787-761d-4457-a605-92bc815bc3c4",
                  "5347d8a3-4154-407b-a167-413cfa3ce585",
                  "cd28f8a3-7969-4ae2-a4c1-eba8195c02bf",
                  "c1224cb7-be46-427e-8989-43c0c4b01027",
                  "2cbed2cd-bc45-46e5-bf98-de0957d18630",
                  "f3ae3441-bebb-484a-be46-4fb02bd3d7ca"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 159,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "bbd43dd0-57a4-4aff-b736-c59a1b9c3fb9",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\organization\\create.enterprise.js",
        "file": "\\controllers\\test\\organization\\create.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "742392dd-cf2f-46f2-b829-b953bd550002",
            "title": "Organization",
            "fullFile": "D:\\api\\controllers\\test\\organization\\create.enterprise.js",
            "file": "\\controllers\\test\\organization\\create.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "48477503-f5e5-48e4-8d8a-44a2f1097095",
                "title": "Organization.create",
                "fullFile": "D:\\api\\controllers\\test\\organization\\create.enterprise.js",
                "file": "\\controllers\\test\\organization\\create.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Organization Organization.create \"before each\" hook",
                    "timedOut": false,
                    "duration": 2869,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nclearRecords(function() {\n    createOrgPlans(function() {\n        commonMock.setSignUpMocks(httpmock, \"enterprise\");\n        api.post(\"/enterprise/v1/signup\")\n            .send(registrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    authToken = res.body.output.authtoken;\n                    _id = res.body.output._id;\n                    done();\n                }\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "572a3406-de69-46c3-b3be-3a8827ba61fe",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Organization Organization.create \"after all\" hook",
                    "timedOut": false,
                    "duration": 9,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "clearRecords(function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3390c30b-035c-45c6-b96b-fb5c35ec2e3f",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Organization Organization.create \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "32943b9e-d3e7-4df2-9601-92ce3fafdd1c",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should create organization.",
                    "fullTitle": "Enterprise Organization Organization.create Should create organization.",
                    "timedOut": false,
                    "duration": 2646,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempOrgBody = getImmutable(orgBody);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(tempOrgBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            _models.User.findOne({\n                uid: res.body.output.org_account.uid\n            }).lean().exec(function(err, user) {\n                if (user) {\n                    var org_uid = res.body.output.uid;\n                    api.get(\"/enterprise/v1/organizations/\" + org_uid)\n                        .set('authtoken', authToken)\n                        .expect(httpStatus.CREATED)\n                        .end(function(err, res) {\n                            res.body.output.uid.should.equal(org_uid);\n                            done();\n                        });\n                } else {\n                    true.should.equal(false);\n                    done();\n                }\n            });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "111ca259-2be6-4c59-b628-249bbe26baf3",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should create organization with trial plan.",
                    "fullTitle": "Enterprise Organization Organization.create Should create organization with trial plan.",
                    "timedOut": false,
                    "duration": 2697,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempOrgBody = getImmutable(orgBody);\ntempOrgBody.plan = \"org_trial\";\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(tempOrgBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            _models.User.findOne({\n                uid: res.body.output.org_account.uid\n            }).lean().exec(function(err, user) {\n                if (user) {\n                    var org_uid = res.body.output.uid;\n                    api.get(\"/enterprise/v1/organizations/\" + org_uid)\n                        .set('authtoken', authToken)\n                        .expect(httpStatus.CREATED)\n                        .end(function(err, res) {\n                            (res.body.output.org_account.subscription.days == 30 && typeof(res.body.output.org_account.subscription.start_date) != \"undefined\").should.equal(true);\n                            done();\n                        });\n                } else {\n                    true.should.equal(false);\n                    done();\n                }\n            });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9bb0f596-393b-40a1-90d3-5aa54a83e76b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should create multiple organization with trial plan.",
                    "fullTitle": "Enterprise Organization Organization.create Should create multiple organization with trial plan.",
                    "timedOut": false,
                    "duration": 8626,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar createOrg = function(name, callback) {\n    var tempOrgBody = getImmutable(orgBody);\n    tempOrgBody.plan = \"org_trial\";\n    tempOrgBody.name = name;\n    commonMock.setSignUpMocks(httpmock, \"enterprise\");\n    api.post(apiURL)\n        .send(tempOrgBody)\n        .set('authtoken', authToken)\n        .expect(httpStatus.CREATED)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                _models.User.findOne({\n                    uid: res.body.output.org_account.uid\n                }).lean().exec(function(err, user) {\n                    if (user) {\n                        var org_uid = res.body.output.uid;\n                        api.get(\"/enterprise/v1/organizations/\" + org_uid)\n                            .set('authtoken', authToken)\n                            .expect(httpStatus.CREATED)\n                            .end(function(err, res) {\n                                callback(err, res);\n                            });\n                    } else {\n                        true.should.equal(false);\n                        done();\n                    }\n                });\n            }\n        });\n};\ncreateOrg(\"org1\", function(err, res) {\n    if (res.body.output.org_account.subscription.days == 30 &&\n        typeof(res.body.output.org_account.subscription.start_date) != \"undefined\") {\n        createOrg(\"org2\", function(err, res) {\n            if (res.body.output.org_account.subscription.days == 30 &&\n                typeof(res.body.output.org_account.subscription.start_date) != \"undefined\") {\n                createOrg(\"org3\", function(err, res) {\n                    if (res.body.output.org_account.subscription.days == 30 &&\n                        typeof(res.body.output.org_account.subscription.start_date) != \"undefined\") {\n                        true.should.equal(true);\n                    } else {\n                        true.should.equal(false);\n                    }\n                    done();\n                })\n            } else {\n                true.should.equal(false);\n                done();\n            }\n        })\n    } else {\n        true.should.equal(false);\n        done();\n    }\n})",
                    "err": {},
                    "isRoot": false,
                    "uuid": "45a8b055-6d8d-4a89-a2b5-645383694786",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not create duplicate entries.",
                    "fullTitle": "Enterprise Organization Organization.create Should not create duplicate entries.",
                    "timedOut": false,
                    "duration": 7143,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempOrgBody = getImmutable(orgBody);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.email = \"test.user+1@raweng.com\";\ncommonMock.setSignUpMocks(httpmock, \"express\", {\n    email: tempRegistrationBody.email\n});\nvar tempLoginBody = global.getImmutable(loginBody);\ntempLoginBody.email = tempRegistrationBody.email;\nvar newSignupUid = \"\",\n    newUserAuthtoken = \"\";\nvar doLogin = function(callback) {\n    commonMock.setSignUpMocks(httpmock, \"express\");\n    commonMock.flowLogin(httpmock, \"express\");\n    api.post(\"/express/v1/login\")\n        .send(tempLoginBody)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                commonMock.setSignUpMocks(httpmock, \"enterprise\");\n                commonMock.flowLogin(httpmock, \"enterprise\");\n                api.post(\"/enterprise/v1/login\")\n                    .send(tempLoginBody)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            callback();\n                        }\n                    });\n            }\n        });\n};\napi.post(\"/express/v1/signup\")\n    .send(tempRegistrationBody)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            newSignupUid = res.body.output.uid;\n            _models.User.findOneAndUpdate({\n                uid: newSignupUid\n            }, {\n                active: true\n            }, { new: true }, function(error, user) {\n                var tempLoginBody = global.getImmutable(loginBody);\n                tempLoginBody.email = tempRegistrationBody.email;\n                commonMock.setSignUpMocks(httpmock, \"enterprise\");\n                commonMock.flowLogin(httpmock, \"enterprise\");\n                api.post(\"/enterprise/v1/login\")\n                    .send(tempLoginBody)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            newUserAuthtoken = res.body.output.authtoken;\n                            doLogin(function() {\n                                doLogin(function() {\n                                    doLogin(function() {\n                                        doLogin(function() {\n                                            _models.User.find({\n                                                email: tempRegistrationBody.email\n                                            }, function(error, users) {\n                                                users.length.should.equal(2);\n                                                done();\n                                            });\n                                        });\n                                    });\n                                });\n                            });\n                        }\n                    });\n            });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fe143469-56a5-4ec1-b722-ae0733b9f263",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Default role should not be null.",
                    "fullTitle": "Enterprise Organization Organization.create Default role should not be null.",
                    "timedOut": false,
                    "duration": 2810,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempOrgBody = getImmutable(orgBody);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(tempOrgBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            if (res.body.output.default_project) {\n                _models.User.findOne({\n                    uid: res.body.output.org_account.uid\n                }).lean().exec(function(err, user) {\n                    if (user) {\n                        api.get(\"/enterprise/v1/organizations/\" + res.body.output.uid)\n                            .set('authtoken', authToken)\n                            .expect(httpStatus.CREATED)\n                            .end(function(err, res) {\n                                true.should.equal(true);\n                                done();\n                            });\n                    } else {\n                        true.should.equal(false);\n                        done();\n                    }\n                });\n            } else {\n                true.should.equal(false);\n                done();\n            }\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6105d491-9157-46d1-89ee-cabad1ce53ef",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get user record for owner.",
                    "fullTitle": "Enterprise Organization Organization.create Should get user record for owner.",
                    "timedOut": false,
                    "duration": 2828,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempOrgBody = getImmutable(orgBody);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(tempOrgBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            commonMock.setSignUpMocks(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/login\")\n                .send({\n                    email: \"test.user@raweng.com\",\n                    password: \"Raw@1234\"\n                })\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        _models.User.findOne({\n                            uid: res.body.output.uid\n                        }).lean().exec(function(err, user) {\n                            (res.body.output.uid != \"\").should.equal(true);\n                            done();\n                        });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3e53bd3a-cb6a-4652-a241-96e13f1f1a61",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should validate organization body.",
                    "fullTitle": "Enterprise Organization Organization.create Should validate organization body.",
                    "timedOut": false,
                    "duration": 32,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempOrgBody = getImmutable(orgBody);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send({})\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            (res.body.error.name.message == messageList.ORG_NAME_REQUIRED &&\n                res.body.error.plan.message == messageList.ORG_PLAN_REQUIRED &&\n                res.body.error.nonce.message == messageList.ORG_NONCE_REQUIRED &&\n                res.body.error.billing_address1.message == messageList.ORG_BILLING_ADDR_REQUIRED &&\n                res.body.error.cardholderName.message == messageList.ORG_CARDHOLDER_NAME_REQUIRED).should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "044775bb-1f04-437f-8ebe-71f0e79b4d04",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should create organization for paid plan.",
                    "fullTitle": "Enterprise Organization Organization.create Should create organization for paid plan.",
                    "timedOut": false,
                    "duration": 2737,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempOrgBody = getImmutable(orgBody);\ntempOrgBody.plan = \"org_standard_paid\";\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\ncommonMock.braintreeUpdatePaymentMethod(httpmock, \"enterprise\");\ncommonMock.braintreeSubscription(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(tempOrgBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var company = res.body.output.org_account.company || \"\";\n            if (company == tempOrgBody.company) {\n                _models.User.findOne({\n                    uid: res.body.output.org_account.uid\n                }).lean().exec(function(err, user) {\n                    (res.body.output.uid != \"\" &&\n                        user.plan[0].toString() == paidPlan._id.toString()).should.equal(true);\n                    done();\n                });\n            } else {\n                true.should.equal(false);\n                done();\n            }\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "57217390-c397-4dd7-b84c-0e38be245e20",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Organization Organization.create Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempOrgBody = getImmutable(orgBody);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(tempOrgBody)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "972a436e-6b23-486a-9028-bca3606ae763",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "111ca259-2be6-4c59-b628-249bbe26baf3",
                  "9bb0f596-393b-40a1-90d3-5aa54a83e76b",
                  "45a8b055-6d8d-4a89-a2b5-645383694786",
                  "fe143469-56a5-4ec1-b722-ae0733b9f263",
                  "6105d491-9157-46d1-89ee-cabad1ce53ef",
                  "3e53bd3a-cb6a-4652-a241-96e13f1f1a61",
                  "044775bb-1f04-437f-8ebe-71f0e79b4d04",
                  "57217390-c397-4dd7-b84c-0e38be245e20",
                  "972a436e-6b23-486a-9028-bca3606ae763"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 29530,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "3a1a5d62-fbb4-4902-925d-08cfe4005812",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\organization\\disableSSO.enterprise.js",
        "file": "\\controllers\\test\\organization\\disableSSO.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "471c8437-7c78-46ab-9d19-43e099695820",
            "title": "Organization",
            "fullFile": "D:\\api\\controllers\\test\\organization\\disableSSO.enterprise.js",
            "file": "\\controllers\\test\\organization\\disableSSO.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "c3777154-7691-4931-b73e-5038ce44ee2d",
                "title": "Organization.disableSSO",
                "fullFile": "D:\\api\\controllers\\test\\organization\\disableSSO.enterprise.js",
                "file": "\\controllers\\test\\organization\\disableSSO.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Organization Organization.disableSSO \"before each\" hook",
                    "timedOut": false,
                    "duration": 169,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        _data = data;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "726a657c-969a-425a-ab24-09f9f6f1bf72",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Organization Organization.disableSSO \"after all\" hook",
                    "timedOut": false,
                    "duration": 5,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "testCollection.organizationRemoveRecords({}, function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a34209fa-1e8a-4b3c-90f5-f16e6a062ad4",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Organization Organization.disableSSO \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "80324ee8-5824-4456-94c5-7b48cb4f127b",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should enable SSO.",
                    "fullTitle": "Enterprise Organization Organization.disableSSO Should enable SSO.",
                    "timedOut": false,
                    "duration": 62,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar config = getImmutable(ssoConfig);\napi.put(\"/enterprise/v1/organizations/:org_uid/ssoconfig\".replace(\":org_uid\", org_uid))\n    .send(config)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.uid != \"\" &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\" &&\n                res.body.output.sso_details.entry_point == config.entry_point &&\n                res.body.output.sso_details.algo_type == config.algo_type &&\n                res.body.output.sso_details.public_cert == config.public_cert &&\n                res.body.output.sso_details.session_time_out_hours == config.session_time_out_hours\n            if (isValid) {\n                api.post(apiURL.replace(\":org_uid\", org_uid))\n                    .send({})\n                    .set('authtoken', authToken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            res.body.output.enable_sso.should.equal(false);\n                            done();\n                        }\n                    });\n            } else {\n                isValid.should.equal(false);\n                done();\n            }\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e8e94112-1034-4fad-975a-b0272da2abe8",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should enable SSO by admin user.",
                    "fullTitle": "Enterprise Organization Organization.disableSSO Should enable SSO by admin user.",
                    "timedOut": false,
                    "duration": 59,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar config = getImmutable(ssoConfig);\napi.put(\"/enterprise/v1/organizations/:org_uid/ssoconfig\".replace(\":org_uid\", org_uid))\n    .send(config)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.uid != \"\" &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\" &&\n                res.body.output.sso_details.entry_point == config.entry_point &&\n                res.body.output.sso_details.algo_type == config.algo_type &&\n                res.body.output.sso_details.public_cert == config.public_cert &&\n                res.body.output.sso_details.session_time_out_hours == config.session_time_out_hours\n            if (isValid) {\n                api.post(apiURL.replace(\":org_uid\", org_uid))\n                    .send({})\n                    .set('authtoken', _data.admin.authtoken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            res.body.output.enable_sso.should.equal(false);\n                            done();\n                        }\n                    });\n            } else {\n                isValid.should.equal(false);\n                done();\n            }\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b0f34298-273e-4119-970a-07c487f090be",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not enable SSO by developer user.",
                    "fullTitle": "Enterprise Organization Organization.disableSSO Should not enable SSO by developer user.",
                    "timedOut": false,
                    "duration": 59,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar config = getImmutable(ssoConfig);\napi.put(\"/enterprise/v1/organizations/:org_uid/ssoconfig\".replace(\":org_uid\", org_uid))\n    .send(config)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.uid != \"\" &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\" &&\n                res.body.output.sso_details.entry_point == config.entry_point &&\n                res.body.output.sso_details.algo_type == config.algo_type &&\n                res.body.output.sso_details.public_cert == config.public_cert &&\n                res.body.output.sso_details.session_time_out_hours == config.session_time_out_hours\n            if (isValid) {\n                api.post(apiURL.replace(\":org_uid\", org_uid))\n                    .send({})\n                    .set('authtoken', _data.developer.authtoken)\n                    .expect(httpStatus.UNAUTHORIZED)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            res.body.error.message.should.equal(messageList.ORG_NOT_ADMIN);\n                            done();\n                        }\n                    });\n            } else {\n                isValid.should.equal(false);\n                done();\n            }\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8fea3c0a-a2ff-470c-a128-5ca72c8f49e4",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give invalid config error.",
                    "fullTitle": "Enterprise Organization Organization.disableSSO Should give invalid config error.",
                    "timedOut": false,
                    "duration": 28,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL.replace(\":org_uid\", org_uid))\n    .send({})\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_SSO_CONFIG_INVALID);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d3286fe9-8b94-4f99-a9c7-b2a347bc57a9",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Organization Organization.disableSSO Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL.replace(\":org_uid\", org_uid))\n    .send({})\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8bd66046-f965-455e-9a5f-19411eef0912",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "e8e94112-1034-4fad-975a-b0272da2abe8",
                  "b0f34298-273e-4119-970a-07c487f090be",
                  "8fea3c0a-a2ff-470c-a128-5ca72c8f49e4",
                  "d3286fe9-8b94-4f99-a9c7-b2a347bc57a9",
                  "8bd66046-f965-455e-9a5f-19411eef0912"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 215,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "676d18cf-067e-4956-8e64-c16317c1fc63",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\organization\\enableSSO.enterprise.js",
        "file": "\\controllers\\test\\organization\\enableSSO.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "cbd0aa01-eb6e-4a91-b305-ca8e83cd8f00",
            "title": "Organization",
            "fullFile": "D:\\api\\controllers\\test\\organization\\enableSSO.enterprise.js",
            "file": "\\controllers\\test\\organization\\enableSSO.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "a6b290ff-1464-4417-9adc-057f1e103bfa",
                "title": "Organization.enableSSO",
                "fullFile": "D:\\api\\controllers\\test\\organization\\enableSSO.enterprise.js",
                "file": "\\controllers\\test\\organization\\enableSSO.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Organization Organization.enableSSO \"before each\" hook",
                    "timedOut": false,
                    "duration": 191,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        _data = data;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9b310ef8-b108-4c33-857d-1a0b423b5f4a",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Organization Organization.enableSSO \"after all\" hook",
                    "timedOut": false,
                    "duration": 8,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "testCollection.organizationRemoveRecords({}, function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1323d0a4-8b6a-44e8-b0b0-9108b150f16a",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Organization Organization.enableSSO \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f5782680-7819-4174-a8d2-1458a6ca63ba",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should enable SSO.",
                    "fullTitle": "Enterprise Organization Organization.enableSSO Should enable SSO.",
                    "timedOut": false,
                    "duration": 242,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar config = getImmutable(ssoConfig);\napi.put(\"/enterprise/v1/organizations/:org_uid/ssoconfig\".replace(\":org_uid\", org_uid))\n    .send(config)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.uid != \"\" &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\" &&\n                res.body.output.sso_details.entry_point == config.entry_point &&\n                res.body.output.sso_details.algo_type == config.algo_type &&\n                res.body.output.sso_details.session_time_out_hours == config.session_time_out_hours\n            if (isValid) {\n                var publicKeyFile = __dirname + \"/../../../__cert/okta.cert\";\n                var privateKeyFile = __dirname + \"/../../../__cert/SP1.pem\";\n                api.post(\"/enterprise/v1/organizations/:org_uid/sso/certs\".replace(\":org_uid\", org_uid))\n                    .set('authtoken', _data.admin.authtoken)\n                    .attach('signed_public_key', publicKeyFile)\n                    .attach('enc_private_key', privateKeyFile)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        api.post(apiURL.replace(\":org_uid\", org_uid))\n                            .send({})\n                            .set('authtoken', authToken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    res.body.output.enable_sso.should.equal(true);\n                                    done();\n                                }\n                            });\n                    });\n            } else {\n                isValid.should.equal(false);\n                done();\n            }\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8e302c34-ce21-43f3-b166-277ac4ca5f5d",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should enable SSO by admin user.",
                    "fullTitle": "Enterprise Organization Organization.enableSSO Should enable SSO by admin user.",
                    "timedOut": false,
                    "duration": 208,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar config = getImmutable(ssoConfig);\napi.put(\"/enterprise/v1/organizations/:org_uid/ssoconfig\".replace(\":org_uid\", org_uid))\n    .send(config)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.uid != \"\" &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\" &&\n                res.body.output.sso_details.entry_point == config.entry_point &&\n                res.body.output.sso_details.algo_type == config.algo_type &&\n                res.body.output.sso_details.session_time_out_hours == config.session_time_out_hours\n            if (isValid) {\n                var publicKeyFile = __dirname + \"/../../../__cert/okta.cert\";\n                var privateKeyFile = __dirname + \"/../../../__cert/SP1.pem\";\n                api.post(\"/enterprise/v1/organizations/:org_uid/sso/certs\".replace(\":org_uid\", org_uid))\n                    .set('authtoken', _data.admin.authtoken)\n                    .attach('signed_public_key', publicKeyFile)\n                    .attach('enc_private_key', privateKeyFile)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        api.post(apiURL.replace(\":org_uid\", org_uid))\n                            .send({})\n                            .set('authtoken', _data.admin.authtoken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    res.body.output.enable_sso.should.equal(true);\n                                    done();\n                                }\n                            });\n                    });\n            } else {\n                isValid.should.equal(false);\n                done();\n            }\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6a4150cf-36e1-403c-8f92-12d3330e2cdc",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not enable SSO by developer user.",
                    "fullTitle": "Enterprise Organization Organization.enableSSO Should not enable SSO by developer user.",
                    "timedOut": false,
                    "duration": 55,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar config = getImmutable(ssoConfig);\napi.put(\"/enterprise/v1/organizations/:org_uid/ssoconfig\".replace(\":org_uid\", org_uid))\n    .send(config)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.uid != \"\" &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\" &&\n                res.body.output.sso_details.entry_point == config.entry_point &&\n                res.body.output.sso_details.algo_type == config.algo_type &&\n                res.body.output.sso_details.public_cert == config.public_cert &&\n                res.body.output.sso_details.session_time_out_hours == config.session_time_out_hours\n            if (isValid) {\n                var publicKeyFile = __dirname + \"/../../../__cert/okta.cert\";\n                var privateKeyFile = __dirname + \"/../../../__cert/SP1.pem\";\n                api.post(apiURL.replace(\":org_uid\", org_uid))\n                    .set('authtoken', authToken)\n                    .attach('signed_public_key', publicKeyFile)\n                    .attach('enc_private_key', privateKeyFile)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        api.post(apiURL.replace(\":org_uid\", org_uid))\n                            .send({})\n                            .set('authtoken', _data.developer.authtoken)\n                            .expect(httpStatus.UNAUTHORIZED)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    res.body.error.message.should.equal(messageList.ORG_NOT_ADMIN);\n                                    done();\n                                }\n                            });\n                    });\n            } else {\n                isValid.should.equal(false);\n                done();\n            }\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "95035504-ee12-457a-8edc-01ccdac6aa1d",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give invalid config error.",
                    "fullTitle": "Enterprise Organization Organization.enableSSO Should give invalid config error.",
                    "timedOut": false,
                    "duration": 29,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL.replace(\":org_uid\", org_uid))\n    .send({})\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_SSO_CONFIG_INVALID);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5dddbb81-f677-48d4-986b-61d1da3ab0b2",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Organization Organization.enableSSO Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL.replace(\":org_uid\", org_uid))\n    .send({})\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1145d761-cd46-42fe-809e-cbab6e488b2f",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "8e302c34-ce21-43f3-b166-277ac4ca5f5d",
                  "6a4150cf-36e1-403c-8f92-12d3330e2cdc",
                  "95035504-ee12-457a-8edc-01ccdac6aa1d",
                  "5dddbb81-f677-48d4-986b-61d1da3ab0b2",
                  "1145d761-cd46-42fe-809e-cbab6e488b2f"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 542,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "fe50de3e-6f60-4a35-9a8b-65e926c447c2",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\organization\\getCerts.enterprise.js",
        "file": "\\controllers\\test\\organization\\getCerts.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "9328278d-bfe1-47c8-bba0-bfb8519ceb29",
            "title": "Organization",
            "fullFile": "D:\\api\\controllers\\test\\organization\\getCerts.enterprise.js",
            "file": "\\controllers\\test\\organization\\getCerts.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "9fda16a7-065f-4470-ab26-726c43b088ac",
                "title": "Organization.getCerts",
                "fullFile": "D:\\api\\controllers\\test\\organization\\getCerts.enterprise.js",
                "file": "\\controllers\\test\\organization\\getCerts.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Organization Organization.getCerts \"before each\" hook",
                    "timedOut": false,
                    "duration": 175,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        _data = data;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6fca0d02-2066-4e12-b01f-d67758d98e9a",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Organization Organization.getCerts \"after all\" hook",
                    "timedOut": false,
                    "duration": 5,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "testCollection.organizationRemoveRecords({}, function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d4d1828e-4255-4dc5-af8c-8c8d5b9cfeda",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Organization Organization.getCerts \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cc6aa0cd-387e-4c59-b53f-bf4d8f8cf3af",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get public SSO cert.",
                    "fullTitle": "Enterprise Organization Organization.getCerts Should get public SSO cert.",
                    "timedOut": false,
                    "duration": 139,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar publicKeyFile = __dirname + \"/../../../__cert/okta.cert\";\nvar privateKeyFile = __dirname + \"/../../../__cert/SP1.pem\";\napi.post(\"/enterprise/v1/organizations/:org_uid/sso/certs\".replace(\":org_uid\", org_uid) + \"?authtoken=\" + authToken)\n    .set('authtoken', authToken)\n    .attach('signed_public_key', publicKeyFile)\n    .attach('enc_private_key', privateKeyFile)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.uid != \"\" &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\" &&\n                res.body.output.sso_details.signed_public_key != \"\" &&\n                res.body.output.sso_details.enc_private_key != \"\";\n            if (isValid) {\n                api.get(apiURL.replace(\":org_uid\", org_uid).replace(\":cert_type\", \"public\") + \"?authtoken=\" + authToken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            done();\n                        }\n                    });\n            } else {\n                true.should.equal(false);\n                done();\n            }\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "92160c50-c9a5-4ec1-8158-e12204388238",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get private SSO cert.",
                    "fullTitle": "Enterprise Organization Organization.getCerts Should get private SSO cert.",
                    "timedOut": false,
                    "duration": 129,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar publicKeyFile = __dirname + \"/../../../__cert/okta.cert\";\nvar privateKeyFile = __dirname + \"/../../../__cert/SP1.pem\";\napi.post(\"/enterprise/v1/organizations/:org_uid/sso/certs\".replace(\":org_uid\", org_uid))\n    .set('authtoken', authToken)\n    .attach('signed_public_key', publicKeyFile)\n    .attach('enc_private_key', privateKeyFile)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.uid != \"\" &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\" &&\n                res.body.output.sso_details.signed_public_key != \"\" &&\n                res.body.output.sso_details.enc_private_key != \"\";\n            if (isValid) {\n                api.get(apiURL.replace(\":org_uid\", org_uid).replace(\":cert_type\", \"private\") + \"?authtoken=\" + authToken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            done();\n                        }\n                    });\n            } else {\n                true.should.equal(false);\n                done();\n            }\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a822bbde-6a80-4d98-a9a8-ce011a7f63df",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not get SSO certs by Developer.",
                    "fullTitle": "Enterprise Organization Organization.getCerts Should not get SSO certs by Developer.",
                    "timedOut": false,
                    "duration": 33,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL.replace(\":org_uid\", org_uid).replace(\":cert_type\", \"public\"))\n    .set('authtoken', _data.developer.authtoken)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_NOT_ADMIN);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "20b45dab-4a83-45ec-9fcd-9d1063e438cb",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should gives invalid file type errors for both files.",
                    "fullTitle": "Enterprise Organization Organization.getCerts Should gives invalid file type errors for both files.",
                    "timedOut": false,
                    "duration": 25,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL.replace(\":org_uid\", org_uid).replace(\":cert_type\", \"public1\"))\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.error.message == messageList.ORG_INVALID_CERT_TYPE;\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fc2fd357-3137-4af4-bf29-bf4e78522005",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Organization Organization.getCerts Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL.replace(\":org_uid\", org_uid).replace(\":cert_type\", \"public\"))\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8a379ba3-8d10-452e-a951-8d84c19e23e1",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "92160c50-c9a5-4ec1-8158-e12204388238",
                  "a822bbde-6a80-4d98-a9a8-ce011a7f63df",
                  "20b45dab-4a83-45ec-9fcd-9d1063e438cb",
                  "fc2fd357-3137-4af4-bf29-bf4e78522005",
                  "8a379ba3-8d10-452e-a951-8d84c19e23e1"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 334,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "50d82423-316a-46f3-baee-488428a097f6",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\organization\\getDetails.enterprise.js",
        "file": "\\controllers\\test\\organization\\getDetails.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "5365f500-5942-499a-9e24-df49f1d65af8",
            "title": "Organization",
            "fullFile": "D:\\api\\controllers\\test\\organization\\getDetails.enterprise.js",
            "file": "\\controllers\\test\\organization\\getDetails.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "c38a49d5-091f-496f-bfcd-83d2d1ab28b4",
                "title": "Organization.getDetails",
                "fullFile": "D:\\api\\controllers\\test\\organization\\getDetails.enterprise.js",
                "file": "\\controllers\\test\\organization\\getDetails.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Organization Organization.getDetails \"before each\" hook",
                    "timedOut": false,
                    "duration": 169,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        org_user_uid = data.organization.user_uid;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d2e254da-5a86-4079-94d5-9356ef5d2889",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Organization Organization.getDetails \"after all\" hook",
                    "timedOut": false,
                    "duration": 6,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "testCollection.organizationRemoveRecords({}, function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2b2d91a9-63ae-4a00-88b8-0e08ad066563",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Organization Organization.getDetails \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1da6e1fc-8998-4da8-a98b-16b6553fabc1",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get organization details.",
                    "fullTitle": "Enterprise Organization Organization.getDetails Should get organization details.",
                    "timedOut": false,
                    "duration": 43,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(\"/enterprise/v1/organizations/:org_uid\".replace(\":org_uid\", org_uid))\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.uid != \"\" &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\" &&\n                typeof(res.body.output.uid) != \"undefined\" &&\n                typeof(res.body.output.name) != \"undefined\" &&\n                typeof(res.body.output.avatar) != \"undefined\" &&\n                typeof(res.body.output.enable_sso) != \"undefined\" &&\n                typeof(res.body.output.org_account) != \"undefined\" &&\n                typeof(res.body.output.default_env) != \"undefined\" &&\n                typeof(res.body.output.default_project) != \"undefined\";\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3a41e055-5497-4665-a758-a9b9423d5ebe",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not get organization details.",
                    "fullTitle": "Enterprise Organization Organization.getDetails Should not get organization details.",
                    "timedOut": false,
                    "duration": 30,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({ uid: org_user_uid }, function() {\n    api.get(\"/enterprise/v1/organizations/:org_uid\".replace(\":org_uid\", org_uid))\n        .set('authtoken', authToken)\n        .expect(httpStatus.NOT_FOUND)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                res.body.error.message.should.equal(messageList.ORG_USER_NOT_FOUND);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f07936b5-295d-43c4-be6d-5a00607189f7",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give organization not found error.",
                    "fullTitle": "Enterprise Organization Organization.getDetails Should give organization not found error.",
                    "timedOut": false,
                    "duration": 22,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(\"/enterprise/v1/organizations/:org_uid\".replace(\":org_uid\", \"FAKE_ORG\"))\n    .set('authtoken', authToken)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_NOT_FOUND);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b8c37347-8c5c-4e77-80d3-2d777420ccf9",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Organization Organization.getDetails Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(\"/enterprise/v1/organizations/:org_uid\".replace(\":org_uid\", \"FAKE_ORG\"))\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e7be84c1-2d3a-445d-a34e-c184f954262f",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "3a41e055-5497-4665-a758-a9b9423d5ebe",
                  "f07936b5-295d-43c4-be6d-5a00607189f7",
                  "b8c37347-8c5c-4e77-80d3-2d777420ccf9",
                  "e7be84c1-2d3a-445d-a34e-c184f954262f"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 104,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "8d3a3419-ffe3-4bfd-bdba-64d6e61a2eda",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\organization\\getOrgMetadata.enterprise.js",
        "file": "\\controllers\\test\\organization\\getOrgMetadata.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "baa46e75-ba01-4774-ad34-146f31719f47",
            "title": "Organization",
            "fullFile": "D:\\api\\controllers\\test\\organization\\getOrgMetadata.enterprise.js",
            "file": "\\controllers\\test\\organization\\getOrgMetadata.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "ba4742ae-f3b5-47f7-adec-09a89ad70161",
                "title": "Organization.getOrgMetadata",
                "fullFile": "D:\\api\\controllers\\test\\organization\\getOrgMetadata.enterprise.js",
                "file": "\\controllers\\test\\organization\\getOrgMetadata.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Organization Organization.getOrgMetadata \"before each\" hook",
                    "timedOut": false,
                    "duration": 183,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        org_name = data.organization.name;\n        _data = data;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2fd13815-c0d9-4936-ae33-38dbb42206c3",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Organization Organization.getOrgMetadata \"after all\" hook",
                    "timedOut": false,
                    "duration": 10,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "testCollection.organizationRemoveRecords({}, function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1b465878-4594-4dc3-82c0-be8fdaeaebd2",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Organization Organization.getOrgMetadata \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9f082956-95f3-4e88-80f6-9577c5d679fd",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get org metadata.",
                    "fullTitle": "Enterprise Organization Organization.getOrgMetadata Should get org metadata.",
                    "timedOut": false,
                    "duration": 415,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar config = getImmutable(ssoConfig);\napi.put(\"/enterprise/v1/organizations/:org_uid/ssoconfig\".replace(\":org_uid\", org_uid))\n    .send(config)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.uid != \"\" &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\" &&\n                res.body.output.sso_details.entry_point == config.entry_point &&\n                res.body.output.sso_details.algo_type == config.algo_type &&\n                res.body.output.sso_details.session_time_out_hours == config.session_time_out_hours\n            if (isValid) {\n                var publicKeyFile = __dirname + \"/../../../__cert/okta.cert\";\n                var privateKeyFile = __dirname + \"/../../../__cert/SP1.pem\";\n                api.post(\"/enterprise/v1/organizations/:org_uid/sso/certs\".replace(\":org_uid\", org_uid))\n                    .set('authtoken', _data.admin.authtoken)\n                    .attach('signed_public_key', publicKeyFile)\n                    .attach('enc_private_key', privateKeyFile)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        api.post(\"/enterprise/v1/organizations/:org_uid/sso/enable\".replace(\":org_uid\", org_uid))\n                            .send({})\n                            .set('authtoken', authToken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    api.get(apiURL.replace(\":org_name\", org_name))\n                                        .expect(httpStatus.OK)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                (res.text.indexOf('<?xml version=\"1.0\"?>') == 0).should.equal(true);\n                                                done();\n                                            }\n                                        });\n                                }\n                            });\n                    });\n            } else {\n                isValid.should.equal(false);\n                done();\n            }\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "86ea9108-777a-45dd-8068-b0fede137eb6",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "86ea9108-777a-45dd-8068-b0fede137eb6"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 415,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "d3ffb0b5-03a0-4bbe-a792-cf3c7abc3dee",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\organization\\getOrgSSOInfo.enterprise.js",
        "file": "\\controllers\\test\\organization\\getOrgSSOInfo.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "6533bd2b-5b4a-4a55-b470-280fab653473",
            "title": "Organization",
            "fullFile": "D:\\api\\controllers\\test\\organization\\getOrgSSOInfo.enterprise.js",
            "file": "\\controllers\\test\\organization\\getOrgSSOInfo.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "a2f406ab-ba4c-4f0f-8f48-b359ed2a1e38",
                "title": "OrganizationUser.getOrgSSOInfo",
                "fullFile": "D:\\api\\controllers\\test\\organization\\getOrgSSOInfo.enterprise.js",
                "file": "\\controllers\\test\\organization\\getOrgSSOInfo.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Organization OrganizationUser.getOrgSSOInfo \"before each\" hook",
                    "timedOut": false,
                    "duration": 204,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        _data = data;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "78f5e59b-7f5c-42b1-81e3-bda34206fcbb",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Organization OrganizationUser.getOrgSSOInfo \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "39fd1ff0-7686-4989-a9e5-3c64eff23ef9",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should redirect user to SSO login page.",
                    "fullTitle": "Enterprise Organization OrganizationUser.getOrgSSOInfo Should redirect user to SSO login page.",
                    "timedOut": false,
                    "duration": 252,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar config = getImmutable(ssoConfig);\napi.put(\"/enterprise/v1/organizations/:org_uid/ssoconfig\".replace(\":org_uid\", _data.organization.uid))\n    .send(config)\n    .set('authtoken', _data.owner.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        var publicKeyFile = __dirname + \"/../../../__cert/okta.cert\";\n        var privateKeyFile = __dirname + \"/../../../__cert/SP1.pem\";\n        api.post(\"/enterprise/v1/organizations/:org_uid/sso/certs\".replace(\":org_uid\", _data.organization.uid))\n            .set('authtoken', _data.owner.authtoken)\n            .attach('signed_public_key', publicKeyFile)\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                api.post(\"/enterprise/v1/organizations/:org_uid/sso/enable\".replace(\":org_uid\", _data.organization.uid))\n                    .set('authtoken', _data.owner.authtoken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        api.get(\"/enterprise/v1/login/sso?org=\" + _data.organization.name)\n                            .expect(httpStatus.MOVED_TEMPORARILY)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    var url = \"https://dev-528399.oktapreview.com/app/builtiodev528399_oktasp1_1/exkbbi8vwj2OsHjbE0h7/sso/saml?SAMLRequest=\";\n                                    (res.headers.location.indexOf(ssoConfig.entry_point) == 0).should.equal(true);\n                                    done();\n                                }\n                            });\n                    });\n            });\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c9af39aa-aaca-4b5f-a173-29ce59654dd3",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "c9af39aa-aaca-4b5f-a173-29ce59654dd3"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 252,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "dedfdcb9-7d94-4f90-bfdc-f6e08004086d",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\organization\\invitationAccept.enterprise.js",
        "file": "\\controllers\\test\\organization\\invitationAccept.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "1eb46c04-eb3c-429e-b410-048eb0219f32",
            "title": "Organization",
            "fullFile": "D:\\api\\controllers\\test\\organization\\invitationAccept.enterprise.js",
            "file": "\\controllers\\test\\organization\\invitationAccept.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "39ca889f-cdcc-468d-a756-abf9539c1ffb",
                "title": "Organization.invitationAccept",
                "fullFile": "D:\\api\\controllers\\test\\organization\\invitationAccept.enterprise.js",
                "file": "\\controllers\\test\\organization\\invitationAccept.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Organization Organization.invitationAccept \"before each\" hook",
                    "timedOut": false,
                    "duration": 168,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        _data = data;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "81ca343d-14db-4659-856b-edf27ba9f1f9",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Organization Organization.invitationAccept \"after all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "17d6d3c7-05c1-46d1-a6fc-85e3741facb0",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Organization Organization.invitationAccept \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1f0eeb9f-b905-4388-ad9f-95e2c3eb6dfd",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should accept invitation.",
                    "fullTitle": "Enterprise Organization Organization.invitationAccept Should accept invitation.",
                    "timedOut": false,
                    "duration": 2978,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar email = \"test.user+1@raweng.com\";\napi.put(\"/enterprise/v1/organizations/:org_uid/transfer\".replace(\":org_uid\", org_uid))\n    .send({\n        \"email\": email\n    })\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            if (res.body.output.message == messageList.ORG_OWNERSHIP_INVITATION_SEND) {\n                signUpUser({\n                    done: done,\n                    email: email\n                }, function(res) {\n                    var newUserAuthtoken = res.body.output.authtoken;\n                    api.post(apiURL.replace(\":org_uid\", org_uid))\n                        .send({})\n                        .set('authtoken', newUserAuthtoken)\n                        .expect(httpStatus.OK)\n                        .end(function(err, res) {\n                            if (res.body.output.message == messageList.ORG_OWNERSHIP_INVITATION_ACCEPTED) {\n                                api.get(\"/enterprise/v1/organizations/:org_uid\".replace(\":org_uid\", org_uid))\n                                    .set('authtoken', newUserAuthtoken)\n                                    .expect(httpStatus.OK)\n                                    .end(function(err, res) {\n                                        res.body.output.org_account.email.should.equal(email);\n                                        done();\n                                    });\n                            } else {\n                                true.should.equal(false);\n                                done();\n                            }\n                        });\n                });\n            } else {\n                true.should.equal(false);\n                done();\n            }\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f7e3403a-1cea-4157-83ec-e56636e0392f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as invitation not found.",
                    "fullTitle": "Enterprise Organization Organization.invitationAccept Should give error as invitation not found.",
                    "timedOut": false,
                    "duration": 2717,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar email = \"test.user+1@raweng.com\";\napi.put(\"/enterprise/v1/organizations/:org_uid/transfer\".replace(\":org_uid\", org_uid))\n    .send({\n        \"email\": email\n    })\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            if (res.body.output.message == messageList.ORG_OWNERSHIP_INVITATION_SEND) {\n                signUpUser({\n                    done: done,\n                    email: email\n                }, function(res) {\n                    var userAuthtoken = res.body.output.authtoken;\n                    api.post(apiURL.replace(\":org_uid\", org_uid))\n                        .send({})\n                        .set('authtoken', userAuthtoken)\n                        .expect(httpStatus.OK)\n                        .end(function(err, res) {\n                            if (res.body.output.message == messageList.ORG_OWNERSHIP_INVITATION_ACCEPTED) {\n                                api.post(apiURL.replace(\":org_uid\", org_uid))\n                                    .send({})\n                                    .set('authtoken', userAuthtoken)\n                                    .expect(httpStatus.BAD_REQUEST)\n                                    .end(function(err, res) {\n                                        res.body.error.message.should.equal(messageList.ORG_OWNERSHIP_INVITATION_NOT_FOUND);\n                                        done();\n                                    });\n                            } else {\n                                true.should.equal(false);\n                                done();\n                            }\n                        });\n                });\n            } else {\n                true.should.equal(false);\n                done();\n            }\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "410ace6b-8481-4ebb-bde6-663f7cef4411",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should accept invitation by new SSO user.",
                    "fullTitle": "Enterprise Organization Organization.invitationAccept Should accept invitation by new SSO user.",
                    "timedOut": false,
                    "duration": 7093,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar email = \"amber.more@raweng.com\";\nvar _ssoConfig = getImmutable(ssoConfig);\nvar firstOwnerAuthtoken = _.first(_data.owner.authtoken);\napi.put(\"/enterprise/v1/organizations/:org_uid/ssoconfig\".replace(\":org_uid\", _data.organization.uid))\n    .send(_ssoConfig)\n    .set('authtoken', _data.owner.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        var publicKeyFile = __dirname + \"/../../../__cert/okta.cert\";\n        var privateKeyFile = __dirname + \"/../../../__cert/SP1.pem\";\n        api.post(\"/enterprise/v1/organizations/:org_uid/sso/certs\".replace(\":org_uid\", org_uid))\n            .set('authtoken', _data.admin.authtoken)\n            .attach('signed_public_key', publicKeyFile)\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                api.post(\"/enterprise/v1/organizations/:org_uid/sso/enable\".replace(\":org_uid\", _data.organization.uid))\n                    .set('authtoken', _data.owner.authtoken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        api.put(\"/enterprise/v1/organizations/:org_uid/transfer\".replace(\":org_uid\", org_uid))\n                            .send({\n                                \"email\": email\n                            })\n                            .set('authtoken', authToken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    if (res.body.output.message == messageList.ORG_OWNERSHIP_INVITATION_SEND) {\n                                        api.get(\"/enterprise/v1/login/sso?org=\" + _data.organization.name)\n                                            .expect(httpStatus.MOVED_TEMPORARILY)\n                                            .end(function(err, res) {\n                                                if (err) {\n                                                    done(err);\n                                                } else {\n                                                    if (res.headers.location.indexOf(ssoConfig.entry_point) == 0) {\n                                                        var data = usersData.SMALRespWithoutAuthtoken;\n                                                        api.post(\"/enterprise/v1/login/sso\")\n                                                            .send(data)\n                                                            .expect(httpStatus.MOVED_TEMPORARILY)\n                                                            .end(function(err, res) {\n                                                                if (err) {\n                                                                    done(err);\n                                                                } else {\n                                                                    var qs = querystring.parse(res.headers.location);\n                                                                    var newUserAuthToken = qs[\"sid\"] || qs[config.enterprise.sso.loginSuccessURL + \"?sid\"] || \"\";\n                                                                    api.get(\"/enterprise/v1/organizations/\" + _data.organization.uid)\n                                                                        .set('authtoken', newUserAuthToken)\n                                                                        .expect(httpStatus.OK)\n                                                                        .end(function(err, res) {\n                                                                            if (err) {\n                                                                                done(err);\n                                                                            } else {\n                                                                                var isValid = typeof(res.body.output.owner_invitation) != \"undefined\";\n                                                                                if (isValid) {\n                                                                                    _.each(res.body.output.organizations, function(orgItem) {\n                                                                                        isValid = isValid &&\n                                                                                            typeof(orgItem._id) == \"undefined\" &&\n                                                                                            typeof(orgItem.__v) == \"undefined\" &&\n                                                                                            typeof(orgItem.org_uid) != \"undefined\" &&\n                                                                                            typeof(orgItem.org_name) != \"undefined\" &&\n                                                                                            typeof(orgItem.avatar) != \"undefined\";\n                                                                                    });\n                                                                                    if (isValid) {\n                                                                                        api.post(apiURL.replace(\":org_uid\", org_uid))\n                                                                                            .send({})\n                                                                                            .set('authtoken', newUserAuthToken)\n                                                                                            .expect(httpStatus.OK)\n                                                                                            .end(function(err, res) {\n                                                                                                if (res.body.output.message == messageList.ORG_OWNERSHIP_INVITATION_ACCEPTED) {\n                                                                                                    api.get(\"/enterprise/v1/organizations/\" + _data.organization.uid)\n                                                                                                        .set('authtoken', newUserAuthToken)\n                                                                                                        .expect(httpStatus.OK)\n                                                                                                        .end(function(err, res) {\n                                                                                                            if (err) {\n                                                                                                                done(err);\n                                                                                                            } else {\n                                                                                                                if (typeof(res.body.output.owner_invitation) == \"undefined\" &&\n                                                                                                                    res.body.output.is_owner && res.body.output.is_admin &&\n                                                                                                                    res.body.output.is_developer) {\n                                                                                                                    true.should.equal(true);\n                                                                                                                    done();\n                                                                                                                } else {\n                                                                                                                    false.should.equal(true);\n                                                                                                                    done();\n                                                                                                                }\n                                                                                                            }\n                                                                                                        });\n                                                                                                } else {\n                                                                                                    false.should.equal(true);\n                                                                                                    done();\n                                                                                                }\n                                                                                            });\n                                                                                    } else {\n                                                                                        false.should.equal(true);\n                                                                                        done();\n                                                                                    }\n                                                                                } else {\n                                                                                    false.should.equal(true);\n                                                                                    done();\n                                                                                }\n                                                                            }\n                                                                        });\n                                                                }\n                                                            });\n                                                    } else {\n                                                        true.should.equal(false);\n                                                        done();\n                                                    }\n                                                }\n                                            });\n                                    } else {\n                                        true.should.equal(false);\n                                        done();\n                                    }\n                                }\n                            });\n                    });\n            });\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0ab2942e-404f-4b9d-87a9-466ae322b810",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as organization not found.",
                    "fullTitle": "Enterprise Organization Organization.invitationAccept Should give error as organization not found.",
                    "timedOut": false,
                    "duration": 21,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar email = \"test.user+1@raweng.com\";\napi.put(\"/enterprise/v1/organizations/:org_uid/transfer\".replace(\":org_uid\", \"FAKE_ORG\"))\n    .send({\n        \"email\": email\n    })\n    .set('authtoken', authToken)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_NOT_FOUND);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d6e90c2b-8448-47b0-9418-ea4a9087f271",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Organization Organization.invitationAccept Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL.replace(\":org_uid\", org_uid))\n    .send({})\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6163797c-18b8-4e5b-bdc0-f52781645905",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "f7e3403a-1cea-4157-83ec-e56636e0392f",
                  "410ace6b-8481-4ebb-bde6-663f7cef4411",
                  "0ab2942e-404f-4b9d-87a9-466ae322b810",
                  "d6e90c2b-8448-47b0-9418-ea4a9087f271",
                  "6163797c-18b8-4e5b-bdc0-f52781645905"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 12816,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "56e969c7-d8f5-4b0b-81a6-48c5ce4f8266",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\organization\\invitationReject.enterprise.js",
        "file": "\\controllers\\test\\organization\\invitationReject.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "f1cfa758-0201-4cdb-9de9-d7f0318c1132",
            "title": "Organization",
            "fullFile": "D:\\api\\controllers\\test\\organization\\invitationReject.enterprise.js",
            "file": "\\controllers\\test\\organization\\invitationReject.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "c38ea846-144e-42cf-902e-e31d23914ca0",
                "title": "Organization.invitationReject",
                "fullFile": "D:\\api\\controllers\\test\\organization\\invitationReject.enterprise.js",
                "file": "\\controllers\\test\\organization\\invitationReject.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Organization Organization.invitationReject \"before each\" hook",
                    "timedOut": false,
                    "duration": 178,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        _data = data;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6826cc6d-6655-483f-9828-0888eb5b46fe",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Organization Organization.invitationReject \"after all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c4ceaaea-3ace-4a97-a5f1-3377614fc1f8",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Organization Organization.invitationReject \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7214cb42-c1db-4893-acbe-882ac583d339",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should accept invitation.",
                    "fullTitle": "Enterprise Organization Organization.invitationReject Should accept invitation.",
                    "timedOut": false,
                    "duration": 2845,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar email = \"test.user+1@raweng.com\";\napi.put(\"/enterprise/v1/organizations/:org_uid/transfer\".replace(\":org_uid\", org_uid))\n    .send({\n        \"email\": email\n    })\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            if (res.body.output.message == messageList.ORG_OWNERSHIP_INVITATION_SEND) {\n                signUpUser({\n                    done: done,\n                    email: email\n                }, function(res) {\n                    api.post(apiURL.replace(\":org_uid\", org_uid))\n                        .send({})\n                        .set('authtoken', res.body.output.authtoken)\n                        .expect(httpStatus.OK)\n                        .end(function(err, res) {\n                            res.body.output.message.should.equal(messageList.ORG_OWNERSHIP_INVITATION_REJECTED);\n                            done();\n                        });\n                });\n            } else {\n                true.should.equal(false);\n                done();\n            }\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "499d5d4a-1645-406d-a6c9-561a9ca750e1",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as invitation not found.",
                    "fullTitle": "Enterprise Organization Organization.invitationReject Should give error as invitation not found.",
                    "timedOut": false,
                    "duration": 2741,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar email = \"test.user+1@raweng.com\";\napi.put(\"/enterprise/v1/organizations/:org_uid/transfer\".replace(\":org_uid\", org_uid))\n    .send({\n        \"email\": email\n    })\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            if (res.body.output.message == messageList.ORG_OWNERSHIP_INVITATION_SEND) {\n                signUpUser({\n                    done: done,\n                    email: email\n                }, function(res) {\n                    var userAuthtoken = res.body.output.authtoken;\n                    api.post(apiURL.replace(\":org_uid\", org_uid))\n                        .send({})\n                        .set('authtoken', userAuthtoken)\n                        .expect(httpStatus.OK)\n                        .end(function(err, res) {\n                            if (res.body.output.message == messageList.ORG_OWNERSHIP_INVITATION_REJECTED) {\n                                api.post(apiURL.replace(\":org_uid\", org_uid))\n                                    .send({})\n                                    .set('authtoken', userAuthtoken)\n                                    .expect(httpStatus.BAD_REQUEST)\n                                    .end(function(err, res) {\n                                        res.body.error.message.should.equal(messageList.ORG_OWNERSHIP_INVITATION_NOT_FOUND);\n                                        done();\n                                    });\n                            } else {\n                                true.should.equal(false);\n                                done();\n                            }\n                        });\n                });\n            } else {\n                true.should.equal(false);\n                done();\n            }\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c6032840-313d-426f-9d49-23c64829debb",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as organization not found.",
                    "fullTitle": "Enterprise Organization Organization.invitationReject Should give error as organization not found.",
                    "timedOut": false,
                    "duration": 19,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar email = \"test.user+1@raweng.com\";\napi.put(\"/enterprise/v1/organizations/:org_uid/transfer\".replace(\":org_uid\", \"FAKE_ORG\"))\n    .send({\n        \"email\": email\n    })\n    .set('authtoken', authToken)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_NOT_FOUND);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "446d6c19-e5c4-4fd0-b8ed-d5494bd85c2d",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Organization Organization.invitationReject Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL.replace(\":org_uid\", org_uid))\n    .send({})\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8094592a-d9d0-46b6-adf6-f27d76308453",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "499d5d4a-1645-406d-a6c9-561a9ca750e1",
                  "c6032840-313d-426f-9d49-23c64829debb",
                  "446d6c19-e5c4-4fd0-b8ed-d5494bd85c2d",
                  "8094592a-d9d0-46b6-adf6-f27d76308453"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 5612,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "5a658339-2f67-400c-bf8f-c66f373586b8",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\organization\\invite.enterprise.js",
        "file": "\\controllers\\test\\organization\\invite.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "195ef3be-c15a-43c5-846b-38aa5ebde0cf",
            "title": "Organization",
            "fullFile": "D:\\api\\controllers\\test\\organization\\invite.enterprise.js",
            "file": "\\controllers\\test\\organization\\invite.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "4d2fddfd-b8a7-4af2-87eb-bea9efd6187c",
                "title": "Organization.invite",
                "fullFile": "D:\\api\\controllers\\test\\organization\\invite.enterprise.js",
                "file": "\\controllers\\test\\organization\\invite.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Organization Organization.invite \"before each\" hook",
                    "timedOut": false,
                    "duration": 181,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        _data = data;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ebac556c-df81-48f8-9a2b-52a30641263c",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Organization Organization.invite \"after all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "84b79086-f3ca-48fb-a469-aa4decca3823",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Organization Organization.invite \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "638cd074-faff-4038-9fba-df9f03fe8fab",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should send invitation to existing flow user.",
                    "fullTitle": "Enterprise Organization Organization.invite Should send invitation to existing flow user.",
                    "timedOut": false,
                    "duration": 2746,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar email = \"test.user+1@raweng.com\";\nsignUpUser({\n    done: done,\n    email: email\n}, function(res) {\n    api.post(apiURL.replace(\":org_uid\", org_uid))\n        .send({\n            \"org_roles\": [_data.roles[\"Developer\"].uid],\n            \"emails\": [email]\n        })\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                if (res.body.output.message == messageList.ORG_INVITATION_SEND) {\n                    _models.OrganizationUser.findOne({\n                        email: email,\n                        org_uid: org_uid,\n                        deleted_at: null\n                    }, function(err, orgUser) {\n                        (typeof(orgUser) != \"undefined\").should.equal(true);\n                        done();\n                    });\n                } else {\n                    true.should.equal(false);\n                    done();\n                }\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fb73f850-d0c8-4d4f-8ee7-d474fa4c9233",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should only invite allowed count users.",
                    "fullTitle": "Enterprise Organization Organization.invite Should only invite allowed count users.",
                    "timedOut": false,
                    "duration": 2967,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar email = \"test.user+1@raweng.com\";\nsignUpUser({\n    done: done,\n    email: email\n}, function(res) {\n    api.post(apiURL.replace(\":org_uid\", org_uid))\n        .send({\n            \"org_roles\": [_data.roles[\"Developer\"].uid],\n            \"emails\": [email, \"test.user+1@raweng.com\", \"test.user+1@rawenG.com\", \"test.user+2@raweng.com\",\n                \"test.user+3@raweng.com\", \"test.user+4@raweng.com\", \"test.user+5@raweng.com\",\n                \"test.user+6@raweng.com\", \"test.user+7@raweng.com\"\n            ]\n        })\n        .set('authtoken', authToken)\n        .expect(httpStatus.BAD_REQUEST)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                var error_message = messageList.ORG_USER_MAX_LIMIT_REACHED;\n                error_message = error_message.replace(\"%%USER_COUNT%%\", 10);\n                res.body.error.message.should.equal(error_message);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "63c99b8a-e2d0-425d-8733-c0a7912d9b36",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should list projects of current organization.",
                    "fullTitle": "Enterprise Organization Organization.invite Should list projects of current organization.",
                    "timedOut": false,
                    "duration": 2814,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempOrgBody = getImmutable(orgBody);\ntempOrgBody.name = \"Org3\"\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\napi.post(\"/enterprise/v1/organizations\")\n    .send(tempOrgBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var org3 = res.body.output;\n            var new_org_uid = org3.uid;\n            var admin_authtoken = _data.admin.authtoken;\n            var role = getImmutable(roleBody);\n            role.name = \"role5\";\n            role.projects = [];\n            api.post(\"/enterprise/v1/organizations/:org_uid/role\".replace(\":org_uid\", new_org_uid))\n                .send(role)\n                .set('authtoken', authToken)\n                .expect(httpStatus.CREATED)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        var orgRole = res.body.output;\n                        api.post(apiURL.replace(\":org_uid\", new_org_uid))\n                            .send({\n                                \"org_roles\": [orgRole.uid],\n                                \"emails\": [_data.admin.email]\n                            })\n                            .set('authtoken', authToken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    api.get(\"/enterprise/v1/projects\")\n                                        .set('org_uid', new_org_uid)\n                                        .set('authtoken', admin_authtoken)\n                                        .expect(httpStatus.OK)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                var isValid = true;\n                                                _.each(res.body.output.projects, function(proj) {\n                                                    if (proj.org_uid != new_org_uid) {\n                                                        isValid = false;\n                                                    }\n                                                });\n                                                isValid.should.equal(true);\n                                                done();\n                                            }\n                                        });\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f256790f-58b2-4cbd-9ee1-0cfb899fd13b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not send invitation to existing organization user.",
                    "fullTitle": "Enterprise Organization Organization.invite Should not send invitation to existing organization user.",
                    "timedOut": false,
                    "duration": 49,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar email = _data.developer.email;\napi.post(apiURL.replace(\":org_uid\", org_uid))\n    .send({\n        \"org_roles\": [_data.roles[\"Developer\"].uid],\n        \"emails\": [email]\n    })\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            if (res.body.output.message == messageList.ORG_INVITATION_SEND) {\n                _models.OrganizationUser.find({\n                    email: email,\n                    org_uid: org_uid,\n                    deleted_at: null\n                }, function(err, orgUsers) {\n                    (orgUsers.length == 1).should.equal(true);\n                    done();\n                });\n            } else {\n                true.should.equal(false);\n                done();\n            }\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0bed8c75-5b69-45c0-b410-6078f94f44b4",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should send invitation to delete user from organization.",
                    "fullTitle": "Enterprise Organization Organization.invite Should send invitation to delete user from organization.",
                    "timedOut": false,
                    "duration": 2809,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar user_uid = \"\";\nvar email = _data.developer.email;\nvar inviteUser = function(callback) {\n    api.post(apiURL.replace(\":org_uid\", org_uid))\n        .send({\n            \"org_roles\": [_data.roles.Developer.uid],\n            \"emails\": [email]\n        })\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                if (res.body.output.message == messageList.ORG_INVITATION_SEND) {\n                    var tempLoginBody = getImmutable(loginBody);\n                    tempLoginBody.email = email;\n                    commonMock.flowLogin(httpmock, \"enterprise\");\n                    api.post(\"/enterprise/v1/login\")\n                        .send(tempLoginBody)\n                        .expect(httpStatus.OK)\n                        .end(function(err, res) {\n                            if (err) {\n                                done(err);\n                            } else {\n                                var userAuthToken = res.body.output.authtoken;\n                                commonMock.brainTreeClientToken(httpmock, \"enterprise\");\n                                api.get(\"/enterprise/v1/user\")\n                                    .set('authtoken', userAuthToken)\n                                    .set('org_uid', org_uid)\n                                    .expect(httpStatus.OK)\n                                    .end(function(err, res) {\n                                        if (err) {\n                                            done(err);\n                                        } else {\n                                            user_uid = res.body.output.uid;\n                                            _models.OrganizationUser.findOne({\n                                                user_uid: user_uid,\n                                                org_uid: org_uid,\n                                                deleted_at: null\n                                            }).lean().exec(function(err, orgUser) {\n                                                callback(err, orgUser);\n                                            });\n                                        }\n                                    });\n                            }\n                        });\n                } else {\n                    true.should.equal(false);\n                    done();\n                }\n            }\n        });\n};\n\n_models.OrganizationUser.findOne({\n    user_uid: _data.developer.uid\n}).lean().exec(function(error, orgUser) {\n    api.delete(\"/enterprise/v1/organizations/:org_uid/users/:org_user_uid\"\n            .replace(\":org_uid\", org_uid)\n            .replace(\":org_user_uid\", orgUser.uid))\n        .send({})\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                if (res.body.output.message == messageList.ORG_USER_DELETED_SUCCESS) {\n                    inviteUser(function(error, orgUser) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            (orgUser.uid != \"\" &&\n                                orgUser.user_uid == user_uid &&\n                                orgUser.invitation == null &&\n                                orgUser.org_uid == org_uid\n                            ).should.equal(true);\n                            done();\n                        }\n                    });\n                } else {\n                    true.should.equal(false);\n                    done();\n                }\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d003b27f-45e1-468f-81ea-cd18dddd4924",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give organization not found error.",
                    "fullTitle": "Enterprise Organization Organization.invite Should give organization not found error.",
                    "timedOut": false,
                    "duration": 20,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar email = \"test.user+1@raweng.com\";\napi.post(apiURL.replace(\":org_uid\", \"FAKE_ORG\"))\n    .send({\n        \"org_roles\": [_data.developer.uid],\n        \"emails\": [email]\n    })\n    .set('authtoken', authToken)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_NOT_FOUND);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9b7ccde7-a80c-4578-a421-0e2cab626ce5",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should send invitation to existing multiple flow users.",
                    "fullTitle": "Enterprise Organization Organization.invite Should send invitation to existing multiple flow users.",
                    "timedOut": false,
                    "duration": 5275,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar email = \"test.user+1@raweng.com\";\nsignUpUser({\n    done: done,\n    email: email\n}, function(res) {\n    var email = \"test.user+2@raweng.com\";\n    signUpUser({\n        done: done,\n        email: email\n    }, function(res) {\n        api.post(apiURL.replace(\":org_uid\", org_uid))\n            .send({\n                \"org_roles\": [_data.developer.uid],\n                \"emails\": [\"test.user+1@raweng.com\", \"test.user+2@raweng.com\"]\n            })\n            .set('authtoken', authToken)\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    res.body.output.message.should.equal(messageList.ORG_INVITATION_SEND);\n                    done();\n                }\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c25c1f5d-4864-4893-9de1-21d705a09db9",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should validate invitation body.",
                    "fullTitle": "Enterprise Organization Organization.invite Should validate invitation body.",
                    "timedOut": false,
                    "duration": 25,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL.replace(\":org_uid\", org_uid))\n    .send({})\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            (res.body.error.emails.message == messageList.ORG_INVITEE_EMAIL_SET_REQUIRED &&\n                res.body.error.org_roles.message == messageList.ORG_ROLE_SET_REQUIRED).should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "79d34cee-31d8-44e8-a057-3919a3caf57a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should validate email set.",
                    "fullTitle": "Enterprise Organization Organization.invite Should validate email set.",
                    "timedOut": false,
                    "duration": 25,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL.replace(\":org_uid\", org_uid))\n    .send({\n        \"org_roles\": [_data.developer.uid],\n        \"emails\": [\"test.user+1@raweng.com\", \"\"]\n    })\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            (res.body.error.emails.message == messageList.ORG_INVITEE_EMAIL_SET_REQUIRED).should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "70480fac-ba16-49ad-ac3c-ade40c2212f4",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should send invitation to new flow user.",
                    "fullTitle": "Enterprise Organization Organization.invite Should send invitation to new flow user.",
                    "timedOut": false,
                    "duration": 2638,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar email = \"test.user+1@raweng.com\";\napi.post(apiURL.replace(\":org_uid\", org_uid))\n    .send({\n        \"org_roles\": [_data.developer.uid],\n        \"emails\": [email]\n    })\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            if (res.body.output.message == messageList.ORG_INVITATION_SEND) {\n                signUpUser({\n                    done: done,\n                    email: email\n                }, function(res) {\n                    var userAuthToken = res.body.output.authtoken;\n                    commonMock.brainTreeClientToken(httpmock, \"enterprise\");\n                    api.get(\"/enterprise/v1/user\")\n                        .set('authtoken', userAuthToken)\n                        .set('org_uid', org_uid)\n                        .expect(httpStatus.OK)\n                        .end(function(err, res) {\n                            if (err) {\n                                done(err);\n                            } else {\n                                var isValid = res.body.output.uid != \"\" &&\n                                    typeof(res.body.output._id) == \"undefined\" &&\n                                    typeof(res.body.output.__v) == \"undefined\" &&\n                                    res.body.output.org_uid == org_uid;\n                                isValid.should.equal(true);\n                                done();\n                            }\n                        });\n                });\n            } else {\n                true.should.equal(false);\n                done();\n            }\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1d6adb22-43ab-4e33-8539-7a701421b63e",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give admin role required error.",
                    "fullTitle": "Enterprise Organization Organization.invite Should give admin role required error.",
                    "timedOut": false,
                    "duration": 36,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar email = \"test.user+1@raweng.com\";\napi.post(apiURL.replace(\":org_uid\", org_uid))\n    .send({\n        \"org_roles\": [_data.developer.uid],\n        \"emails\": [\"test.user+2@raweng.com\"]\n    })\n    .set('authtoken', _data.developer.authtoken)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_NOT_ADMIN);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e1359e7a-106e-4058-9894-b86acbc7ba73",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should send invitation to existing google user.",
                    "fullTitle": "Enterprise Organization Organization.invite Should send invitation to existing google user.",
                    "timedOut": false,
                    "duration": 2835,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar email = \"test.user+1000@raweng.com\";\ncommonMock.setSignUpMocks(httpmock, \"enterprise\", {\n    email: email,\n    access_token: plus1000User.access_token\n});\ncommonMock.googleLogin(httpmock, \"enterprise\", {\n    email: email\n});\napi.post(\"/enterprise/v1/login/google\")\n    .send(plus1000User)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            api.post(apiURL.replace(\":org_uid\", org_uid))\n                .send({\n                    \"org_roles\": [_data.developer.uid],\n                    \"emails\": [email]\n                })\n                .set('authtoken', authToken)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        if (res.body.output.message == messageList.ORG_INVITATION_SEND) {\n                            commonMock.googleLogin(httpmock, \"enterprise\", {\n                                email: email\n                            });\n                            api.post(\"/enterprise/v1/login/google\")\n                                .send(plus1000User)\n                                .expect(httpStatus.OK)\n                                .end(function(err, res) {\n                                    if (err) {\n                                        done(err);\n                                    } else {\n                                        var isValid = res.body.output.uid != \"\" &&\n                                            typeof(res.body.output._id) == \"undefined\" &&\n                                            typeof(res.body.output.__v) == \"undefined\";\n                                        if (isValid) {\n                                            var userAuthToken = res.body.output.authtoken;\n                                            commonMock.brainTreeClientToken(httpmock, \"enterprise\");\n                                            api.get(\"/enterprise/v1/user\")\n                                                .set('authtoken', userAuthToken)\n                                                .set('org_uid', org_uid)\n                                                .expect(httpStatus.OK)\n                                                .end(function(err, res) {\n                                                    if (err) {\n                                                        done(err);\n                                                    } else {\n                                                        var isValid = res.body.output.uid != \"\" &&\n                                                            typeof(res.body.output._id) == \"undefined\" &&\n                                                            typeof(res.body.output.__v) == \"undefined\" &&\n                                                            res.body.output.org_uid == org_uid;\n                                                        isValid.should.equal(true);\n                                                        done();\n                                                    }\n                                                });\n                                        } else {\n                                            true.should.equal(false);\n                                            done();\n                                        }\n                                    }\n                                });\n                        } else {\n                            true.should.equal(false);\n                            done();\n                        }\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "83f4d0ff-de0b-4e2c-9087-77e2ca94f316",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should send invitation to new google user.",
                    "fullTitle": "Enterprise Organization Organization.invite Should send invitation to new google user.",
                    "timedOut": false,
                    "duration": 2947,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar email = \"test.user+1000@raweng.com\";\napi.post(apiURL.replace(\":org_uid\", org_uid))\n    .send({\n        \"org_roles\": [_data.developer.uid],\n        \"emails\": [email]\n    })\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            if (res.body.output.message == messageList.ORG_INVITATION_SEND) {\n                commonMock.setSignUpMocks(httpmock, \"enterprise\", {\n                    email: email,\n                    access_token: plus1000User.access_token\n                });\n                commonMock.googleLogin(httpmock, \"enterprise\", {\n                    email: email\n                });\n                api.post(\"/enterprise/v1/login/google\")\n                    .send(plus1000User)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            var isValid = res.body.output.uid != \"\" &&\n                                typeof(res.body.output._id) == \"undefined\" &&\n                                typeof(res.body.output.__v) == \"undefined\";\n                            if (isValid) {\n                                var userAuthToken = res.body.output.authtoken;\n                                commonMock.brainTreeClientToken(httpmock, \"enterprise\");\n                                api.get(\"/enterprise/v1/user\")\n                                    .set('authtoken', userAuthToken)\n                                    .set('org_uid', org_uid)\n                                    .expect(httpStatus.OK)\n                                    .end(function(err, res) {\n                                        if (err) {\n                                            done(err);\n                                        } else {\n                                            var isValid = res.body.output.uid != \"\" &&\n                                                typeof(res.body.output._id) == \"undefined\" &&\n                                                typeof(res.body.output.__v) == \"undefined\" &&\n                                                res.body.output.org_uid == org_uid;\n                                            isValid.should.equal(true);\n                                            done();\n                                        }\n                                    });\n                            } else {\n                                true.should.equal(false);\n                                done();\n                            }\n                        }\n                    });\n            } else {\n                true.should.equal(false);\n                done();\n            }\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e14d816c-72a4-4430-a5c3-f08f744f71dc",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get organization plan for login user.",
                    "fullTitle": "Enterprise Organization Organization.invite Should get organization plan for login user.",
                    "timedOut": false,
                    "duration": 2822,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar email = \"test.user+03@raweng.com\";\napi.post(apiURL.replace(\":org_uid\", org_uid))\n    .send({\n        \"org_roles\": [_data.developer.uid],\n        \"emails\": [email]\n    })\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            if (res.body.output.message == messageList.ORG_INVITATION_SEND) {\n                var tempLoginBody = getImmutable(loginBody);\n                tempLoginBody.email = email;\n                commonMock.flowLogin(httpmock, \"enterprise\");\n                api.post(\"/enterprise/v1/login\")\n                    .send(tempLoginBody)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            var userAuthToken = res.body.output.authtoken;\n                            commonMock.brainTreeClientToken(httpmock, \"enterprise\");\n                            api.get(\"/enterprise/v1/user\")\n                                .set('authtoken', userAuthToken)\n                                .set('org_uid', org_uid)\n                                .expect(httpStatus.OK)\n                                .end(function(err, res) {\n                                    if (err) {\n                                        done(err);\n                                    } else {\n                                        var isValid = res.body.output.uid != \"\" &&\n                                            typeof(res.body.output._id) == \"undefined\" &&\n                                            typeof(res.body.output.__v) == \"undefined\" &&\n                                            typeof(res.body.output.user_plan) != \"undefined\" &&\n                                            res.body.output.org_uid == org_uid;\n                                        isValid.should.equal(true);\n                                        done();\n                                    }\n                                });\n                        }\n                    });\n            } else {\n                true.should.equal(false);\n                done();\n            }\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "121e1a61-ddf1-4cf7-a8b4-8137d4d57940",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Organization Organization.invite Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar email = \"test.user+1@raweng.com\";\napi.post(apiURL.replace(\":org_uid\", org_uid))\n    .send({\n        \"org_roles\": [_data.developer.uid],\n        \"emails\": [email]\n    })\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "df34c128-1349-45fa-ba4b-b502508ca459",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "fb73f850-d0c8-4d4f-8ee7-d474fa4c9233",
                  "63c99b8a-e2d0-425d-8733-c0a7912d9b36",
                  "f256790f-58b2-4cbd-9ee1-0cfb899fd13b",
                  "0bed8c75-5b69-45c0-b410-6078f94f44b4",
                  "d003b27f-45e1-468f-81ea-cd18dddd4924",
                  "9b7ccde7-a80c-4578-a421-0e2cab626ce5",
                  "c25c1f5d-4864-4893-9de1-21d705a09db9",
                  "79d34cee-31d8-44e8-a057-3919a3caf57a",
                  "70480fac-ba16-49ad-ac3c-ade40c2212f4",
                  "1d6adb22-43ab-4e33-8539-7a701421b63e",
                  "e1359e7a-106e-4058-9894-b86acbc7ba73",
                  "83f4d0ff-de0b-4e2c-9087-77e2ca94f316",
                  "e14d816c-72a4-4430-a5c3-f08f744f71dc",
                  "121e1a61-ddf1-4cf7-a8b4-8137d4d57940",
                  "df34c128-1349-45fa-ba4b-b502508ca459"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 28016,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "6a9889ef-39ec-4a22-9f98-5d394bbe094d",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\organization\\processSSOLogin.enterprise.js",
        "file": "\\controllers\\test\\organization\\processSSOLogin.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "0377e3be-b337-4ce3-99b2-b6d128e1edef",
            "title": "Organization",
            "fullFile": "D:\\api\\controllers\\test\\organization\\processSSOLogin.enterprise.js",
            "file": "\\controllers\\test\\organization\\processSSOLogin.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "7cd6635a-b6df-473d-94f6-3129b620ab15",
                "title": "OrganizationUser.processSSOLogin",
                "fullFile": "D:\\api\\controllers\\test\\organization\\processSSOLogin.enterprise.js",
                "file": "\\controllers\\test\\organization\\processSSOLogin.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Organization OrganizationUser.processSSOLogin \"before each\" hook",
                    "timedOut": false,
                    "duration": 367,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        _data = data;\n        org_uid = _data.organization.uid;\n        authToken = data.owner.authtoken;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ed01b328-b9ad-41d9-b92d-99301f96a3ca",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Organization OrganizationUser.processSSOLogin \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "07e9aeff-ab61-4915-81b4-fc2b0cc1ba51",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should allowed owner without SSO login.",
                    "fullTitle": "Enterprise Organization OrganizationUser.processSSOLogin Should allowed owner without SSO login.",
                    "timedOut": false,
                    "duration": 159,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar _ssoConfig = getImmutable(ssoConfig);\napi.put(\"/enterprise/v1/organizations/:org_uid/ssoconfig\".replace(\":org_uid\", _data.organization.uid))\n    .send(_ssoConfig)\n    .set('authtoken', _data.owner.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        api.post(\"/enterprise/v1/organizations/:org_uid/sso/enable\".replace(\":org_uid\", _data.organization.uid))\n            .set('authtoken', _data.owner.authtoken)\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                api.get(\"/enterprise/v1/user\")\n                    .set('authtoken', _data.owner.authtoken)\n                    .set('org_uid', _data.organization.uid)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            var isValid = res.body.output.uid != \"\" &&\n                                typeof(res.body.output._id) == \"undefined\" &&\n                                typeof(res.body.output.__v) == \"undefined\" &&\n                                typeof(res.body.output.organizations) != \"undefined\";\n                            if (isValid) {\n                                _.each(res.body.output.organizations, function(orgItem) {\n                                    isValid = isValid &&\n                                        typeof(orgItem._id) == \"undefined\" &&\n                                        typeof(orgItem.__v) == \"undefined\" &&\n                                        typeof(orgItem.org_uid) != \"undefined\" &&\n                                        typeof(orgItem.org_name) != \"undefined\" &&\n                                        typeof(orgItem.avatar) != \"undefined\";\n                                });\n                                isValid.should.equal(true);\n                                done();\n                            } else {\n                                false.should.equal(true);\n                                done();\n                            }\n                        }\n                    });\n            });\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "edd70dd2-8a6a-423e-8192-9da68f2ebb7b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should works without relaystate.",
                    "fullTitle": "Enterprise Organization OrganizationUser.processSSOLogin Should works without relaystate.",
                    "timedOut": false,
                    "duration": 511,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar _ssoConfig = getImmutable(ssoConfig);\napi.put(\"/enterprise/v1/organizations/:org_uid/ssoconfig\".replace(\":org_uid\", _data.organization.uid))\n    .send(_ssoConfig)\n    .set('authtoken', _data.owner.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        var publicKeyFile = __dirname + \"/../../../__cert/okta.cert\";\n        var privateKeyFile = __dirname + \"/../../../__cert/SP1.pem\";\n        api.post(\"/enterprise/v1/organizations/:org_uid/sso/certs\".replace(\":org_uid\", org_uid))\n            .set('authtoken', _data.admin.authtoken)\n            .attach('signed_public_key', publicKeyFile)\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                api.post(\"/enterprise/v1/organizations/:org_uid/sso/enable\".replace(\":org_uid\", _data.organization.uid))\n                    .set('authtoken', _data.owner.authtoken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        testCollection.createOrgUser({\n                            user: _data.admin,\n                            email: \"amber.more@raweng.com\",\n                            org_uid: _data.organization.uid,\n                            role: _data.roles[\"Admin\"]\n                        }, function(error, user) {\n                            api.get(\"/enterprise/v1/login/sso?org=\" + _data.organization.name)\n                                .expect(httpStatus.MOVED_TEMPORARILY)\n                                .end(function(err, res) {\n                                    if (err) {\n                                        done(err);\n                                    } else {\n                                        if (res.headers.location.indexOf(ssoConfig.entry_point) == 0) {\n                                            var data = getImmutable(usersData.SMALRespWithoutAuthtoken);\n                                            delete data.RelayState;\n                                            api.post(\"/enterprise/v1/login/sso?org=\" + _data.organization.name)\n                                                .send(data)\n                                                .expect(httpStatus.MOVED_TEMPORARILY)\n                                                .end(function(err, res) {\n                                                    if (err) {\n                                                        done(err);\n                                                    } else {\n                                                        var qs = querystring.parse(res.headers.location);\n                                                        var authtoken = qs[\"sid\"] || qs[config.enterprise.sso.loginSuccessURL + \"?sid\"] || \"\";\n                                                        var _config = config;\n                                                        api.get(\"/enterprise/v1/user\")\n                                                            .set({ 'authtoken': authtoken, org_uid: _data.organization.uid })\n                                                            .expect(httpStatus.OK)\n                                                            .end(function(err, res) {\n                                                                if (err) {\n                                                                    done(err);\n                                                                } else {\n                                                                    var isValid = res.body.output.uid != \"\" &&\n                                                                        typeof(res.body.output._id) == \"undefined\" &&\n                                                                        typeof(res.body.output.__v) == \"undefined\" &&\n                                                                        typeof(res.body.output.organizations) != \"undefined\";\n                                                                    if (isValid) {\n                                                                        _.each(res.body.output.organizations, function(orgItem) {\n                                                                            isValid = isValid &&\n                                                                                typeof(orgItem._id) == \"undefined\" &&\n                                                                                typeof(orgItem.__v) == \"undefined\" &&\n                                                                                typeof(orgItem.org_uid) != \"undefined\" &&\n                                                                                typeof(orgItem.org_name) != \"undefined\" &&\n                                                                                typeof(orgItem.avatar) != \"undefined\";\n                                                                        });\n                                                                        isValid.should.equal(true);\n                                                                        done();\n                                                                    } else {\n                                                                        false.should.equal(true);\n                                                                        done();\n                                                                    }\n                                                                }\n                                                            });\n                                                    }\n                                                });\n                                        } else {\n                                            true.should.equal(false);\n                                            done();\n                                        }\n                                    }\n                                });\n                        });\n                    });\n            });\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "298e2ab9-018c-4bc1-b8e2-ac69a6ca2f98",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should login admin user with SSO.",
                    "fullTitle": "Enterprise Organization OrganizationUser.processSSOLogin Should login admin user with SSO.",
                    "timedOut": false,
                    "duration": 563,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar _ssoConfig = getImmutable(ssoConfig);\napi.put(\"/enterprise/v1/organizations/:org_uid/ssoconfig\".replace(\":org_uid\", _data.organization.uid))\n    .send(_ssoConfig)\n    .set('authtoken', _data.owner.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        var publicKeyFile = __dirname + \"/../../../__cert/okta.cert\";\n        var privateKeyFile = __dirname + \"/../../../__cert/SP1.pem\";\n        api.post(\"/enterprise/v1/organizations/:org_uid/sso/certs\".replace(\":org_uid\", org_uid))\n            .set('authtoken', _data.admin.authtoken)\n            .attach('signed_public_key', publicKeyFile)\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                api.post(\"/enterprise/v1/organizations/:org_uid/sso/enable\".replace(\":org_uid\", _data.organization.uid))\n                    .set('authtoken', _data.owner.authtoken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        testCollection.createOrgUser({\n                            user: _data.admin,\n                            email: \"amber.more@raweng.com\",\n                            org_uid: _data.organization.uid,\n                            role: _data.roles[\"Admin\"]\n                        }, function(error, user) {\n                            api.get(\"/enterprise/v1/login/sso?org=\" + _data.organization.name)\n                                .expect(httpStatus.MOVED_TEMPORARILY)\n                                .end(function(err, res) {\n                                    if (err) {\n                                        done(err);\n                                    } else {\n                                        if (res.headers.location.indexOf(ssoConfig.entry_point) == 0) {\n                                            var data = usersData.SMALRespWithoutAuthtoken;\n                                            api.post(\"/enterprise/v1/login/sso\")\n                                                .send(data)\n                                                .expect(httpStatus.MOVED_TEMPORARILY)\n                                                .end(function(err, res) {\n                                                    if (err) {\n                                                        done(err);\n                                                    } else {\n                                                        var qs = querystring.parse(res.headers.location);\n                                                        var authtoken = qs[\"sid\"] || qs[config.enterprise.sso.loginSuccessURL + \"?sid\"] || \"\";\n                                                        api.get(\"/enterprise/v1/user\")\n                                                            .set('authtoken', authtoken)\n                                                            .set('org_uid', _data.organization.uid)\n                                                            .expect(httpStatus.OK)\n                                                            .end(function(err, res) {\n                                                                if (err) {\n                                                                    done(err);\n                                                                } else {\n                                                                    var isValid = res.body.output.uid != \"\" &&\n                                                                        typeof(res.body.output._id) == \"undefined\" &&\n                                                                        typeof(res.body.output.__v) == \"undefined\" &&\n                                                                        typeof(res.body.output.organizations) != \"undefined\";\n                                                                    if (isValid) {\n                                                                        _.each(res.body.output.organizations, function(orgItem) {\n                                                                            isValid = isValid &&\n                                                                                typeof(orgItem._id) == \"undefined\" &&\n                                                                                typeof(orgItem.__v) == \"undefined\" &&\n                                                                                typeof(orgItem.org_uid) != \"undefined\" &&\n                                                                                typeof(orgItem.org_name) != \"undefined\" &&\n                                                                                typeof(orgItem.avatar) != \"undefined\";\n                                                                        });\n                                                                        isValid.should.equal(true);\n                                                                        done();\n                                                                    } else {\n                                                                        false.should.equal(true);\n                                                                        done();\n                                                                    }\n                                                                }\n                                                            });\n                                                    }\n                                                });\n                                        } else {\n                                            true.should.equal(false);\n                                            done();\n                                        }\n                                    }\n                                });\n                        });\n                    });\n            });\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "633c1fd3-e971-4547-9068-df88d88f5624",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should overwrite user session management timeout.",
                    "fullTitle": "Enterprise Organization OrganizationUser.processSSOLogin Should overwrite user session management timeout.",
                    "timedOut": false,
                    "duration": 505,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar _ssoConfig = getImmutable(ssoConfig);\n_ssoConfig.session_time_out_hours = 5;\napi.put(\"/enterprise/v1/organizations/:org_uid/ssoconfig\".replace(\":org_uid\", _data.organization.uid))\n    .send(_ssoConfig)\n    .set('authtoken', _data.owner.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        var publicKeyFile = __dirname + \"/../../../__cert/okta.cert\";\n        var privateKeyFile = __dirname + \"/../../../__cert/SP1.pem\";\n        api.post(\"/enterprise/v1/organizations/:org_uid/sso/certs\".replace(\":org_uid\", org_uid))\n            .set('authtoken', _data.admin.authtoken)\n            .attach('signed_public_key', publicKeyFile)\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                api.post(\"/enterprise/v1/organizations/:org_uid/sso/enable\".replace(\":org_uid\", _data.organization.uid))\n                    .set('authtoken', _data.owner.authtoken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        testCollection.createOrgUser({\n                            user: _data.admin,\n                            email: \"amber.more@raweng.com\",\n                            org_uid: _data.organization.uid,\n                            role: _data.roles[\"Admin\"]\n                        }, function(error, user) {\n                            api.get(\"/enterprise/v1/login/sso?org=\" + _data.organization.name)\n                                .expect(httpStatus.MOVED_TEMPORARILY)\n                                .end(function(err, res) {\n                                    if (err) {\n                                        done(err);\n                                    } else {\n                                        if (res.headers.location.indexOf(ssoConfig.entry_point) == 0) {\n                                            var data = usersData.SMALRespWithoutAuthtoken;\n                                            api.post(\"/enterprise/v1/login/sso\")\n                                                .send(data)\n                                                .expect(httpStatus.MOVED_TEMPORARILY)\n                                                .end(function(err, res) {\n                                                    if (err) {\n                                                        done(err);\n                                                    } else {\n                                                        var qs = querystring.parse(res.headers.location);\n                                                        var authtoken = qs[\"sid\"] || qs[config.enterprise.sso.loginSuccessURL + \"?sid\"] || \"\";\n                                                        var date = moment(new Date());\n                                                        date.subtract({ hours: 4, minutes: 5 });\n                                                        _models.UserToken.findOneAndUpdate({\n                                                            authtoken: authtoken\n                                                        }, {\n                                                            idle_valid_till: date\n                                                        }, {\n                                                            new: true\n                                                        }, function(error, user) {\n                                                            api.get(\"/enterprise/v1/user\")\n                                                                .set('authtoken', authtoken)\n                                                                .set('org_uid', _data.organization.uid)\n                                                                .expect(httpStatus.OK)\n                                                                .end(function(err, res) {\n                                                                    if (err) {\n                                                                        done(err);\n                                                                    } else {\n                                                                        var isValid = res.body.output.uid != \"\" &&\n                                                                            typeof(res.body.output._id) == \"undefined\" &&\n                                                                            typeof(res.body.output.__v) == \"undefined\" &&\n                                                                            typeof(res.body.output.organizations) != \"undefined\";\n                                                                        if (isValid) {\n                                                                            _.each(res.body.output.organizations, function(orgItem) {\n                                                                                isValid = isValid &&\n                                                                                    typeof(orgItem._id) == \"undefined\" &&\n                                                                                    typeof(orgItem.__v) == \"undefined\" &&\n                                                                                    typeof(orgItem.org_uid) != \"undefined\" &&\n                                                                                    typeof(orgItem.org_name) != \"undefined\" &&\n                                                                                    typeof(orgItem.avatar) != \"undefined\";\n                                                                            });\n                                                                            isValid.should.equal(true);\n                                                                            done();\n                                                                        } else {\n                                                                            false.should.equal(true);\n                                                                            done();\n                                                                        }\n                                                                    }\n                                                                });\n                                                        });\n                                                    }\n                                                });\n                                        } else {\n                                            true.should.equal(false);\n                                            done();\n                                        }\n                                    }\n                                });\n                        });\n                    });\n            });\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "89a51d00-82e1-4032-ae6b-bcbeb76d7aad",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should do test login without enabling SSO.",
                    "fullTitle": "Enterprise Organization OrganizationUser.processSSOLogin Should do test login without enabling SSO.",
                    "timedOut": false,
                    "duration": 3095,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar _ssoConfig = getImmutable(ssoConfig);\nvar email = \"amber.more@raweng.com\";\nsignUpUser({\n    email: email\n}, function(res) {\n    var newUserAuthtoken = res.body.output.authtoken;\n    api.post(\"/enterprise/v1/organizations/:org_uid/invite\".replace(\":org_uid\", _data.organization.uid))\n        .send({\n            \"org_roles\": [_data.roles[\"Admin\"].uid],\n            \"emails\": [email]\n        })\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                if (res.body.output.message == messageList.ORG_INVITATION_SEND) {\n                    api.put(\"/enterprise/v1/organizations/:org_uid/ssoconfig\".replace(\":org_uid\", _data.organization.uid))\n                        .send(_ssoConfig)\n                        .set('authtoken', _data.owner.authtoken)\n                        .expect(httpStatus.OK)\n                        .end(function(err, res) {\n                            var publicKeyFile = __dirname + \"/../../../__cert/okta.cert\";\n                            var privateKeyFile = __dirname + \"/../../../__cert/SP1.pem\";\n                            api.post(\"/enterprise/v1/organizations/:org_uid/sso/certs\".replace(\":org_uid\", org_uid))\n                                .set('authtoken', _data.admin.authtoken)\n                                .attach('signed_public_key', publicKeyFile)\n                                .expect(httpStatus.OK)\n                                .end(function(err, res) {\n                                    /*api.post(\"/enterprise/v1/organizations/:org_uid/sso/enable\".replace(\":org_uid\", org_uid))\n                                        .send({})\n                                        .set('authtoken', _data.admin.authtoken)\n                                        .expect(httpStatus.OK)\n                                        .end(function(err, res) {*/\n                                    api.get(\"/enterprise/v1/login/sso?org=\" + _data.organization.name + \"&test=true\")\n                                        .expect(httpStatus.MOVED_TEMPORARILY)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                if (res.headers.location.indexOf(ssoConfig.entry_point) == 0) {\n                                                    var data = usersData.SMALRespWithoutAuthtoken;\n                                                    api.post(\"/enterprise/v1/login/sso\")\n                                                        .send(data)\n                                                        .expect(httpStatus.MOVED_TEMPORARILY)\n                                                        .end(function(err, res) {\n                                                            if (err) {\n                                                                done(err);\n                                                            } else {\n                                                                var qs = querystring.parse(res.headers.location);\n                                                                var authtoken = qs[\"sid\"] || qs[config.enterprise.sso.loginSuccessTestURL + \"?sid\"] || \"\";\n                                                                api.get(\"/enterprise/v1/user\")\n                                                                    .set('authtoken', authtoken)\n                                                                    .set('org_uid', _data.organization.uid)\n                                                                    .expect(httpStatus.OK)\n                                                                    .end(function(err, res) {\n                                                                        if (err) {\n                                                                            done(err);\n                                                                        } else {\n                                                                            var isValid = res.body.output.uid != \"\" &&\n                                                                                typeof(res.body.output._id) == \"undefined\" &&\n                                                                                typeof(res.body.output.__v) == \"undefined\" &&\n                                                                                typeof(res.body.output.organizations) != \"undefined\";\n                                                                            if (isValid) {\n                                                                                _.each(res.body.output.organizations, function(orgItem) {\n                                                                                    isValid = isValid &&\n                                                                                        typeof(orgItem._id) == \"undefined\" &&\n                                                                                        typeof(orgItem.__v) == \"undefined\" &&\n                                                                                        typeof(orgItem.org_uid) != \"undefined\" &&\n                                                                                        typeof(orgItem.org_name) != \"undefined\" &&\n                                                                                        typeof(orgItem.avatar) != \"undefined\";\n                                                                                });\n                                                                                isValid.should.equal(true);\n                                                                                done();\n                                                                            } else {\n                                                                                false.should.equal(true);\n                                                                                done();\n                                                                            }\n                                                                        }\n                                                                    });\n                                                            }\n                                                        });\n                                                } else {\n                                                    true.should.equal(false);\n                                                    done();\n                                                }\n                                            }\n                                        });\n\n\n                                    //});\n                                });\n                        });\n                } else {\n                    true.should.equal(false);\n                    done();\n                }\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "58c7abec-84ac-4bae-85ac-249004943a96",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should do other user SSO login without accepting invitation.",
                    "fullTitle": "Enterprise Organization OrganizationUser.processSSOLogin Should do other user SSO login without accepting invitation.",
                    "timedOut": false,
                    "duration": 2751,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar _ssoConfig = getImmutable(ssoConfig);\nvar email = \"amber.more@raweng.com\";\nsignUpUser({\n    email: email\n}, function(res) {\n    var newUserAuthtoken = res.body.output.authtoken;\n    api.post(\"/enterprise/v1/organizations/:org_uid/invite\".replace(\":org_uid\", _data.organization.uid))\n        .send({\n            \"org_roles\": [_data.roles[\"Admin\"].uid],\n            \"emails\": [email]\n        })\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                if (res.body.output.message == messageList.ORG_INVITATION_SEND) {\n                    api.put(\"/enterprise/v1/organizations/:org_uid/ssoconfig\".replace(\":org_uid\", _data.organization.uid))\n                        .send(_ssoConfig)\n                        .set('authtoken', _data.owner.authtoken)\n                        .expect(httpStatus.OK)\n                        .end(function(err, res) {\n                            var publicKeyFile = __dirname + \"/../../../__cert/okta.cert\";\n                            var privateKeyFile = __dirname + \"/../../../__cert/SP1.pem\";\n                            api.post(\"/enterprise/v1/organizations/:org_uid/sso/certs\".replace(\":org_uid\", org_uid))\n                                .set('authtoken', _data.admin.authtoken)\n                                .attach('signed_public_key', publicKeyFile)\n                                .expect(httpStatus.OK)\n                                .end(function(err, res) {\n                                    api.post(\"/enterprise/v1/organizations/:org_uid/sso/enable\".replace(\":org_uid\", org_uid))\n                                        .send({})\n                                        .set('authtoken', _data.owner.authtoken)\n                                        .expect(httpStatus.OK)\n                                        .end(function(err, res) {\n                                            api.get(\"/enterprise/v1/login/sso?org=\" + _data.organization.name)\n                                                .expect(httpStatus.MOVED_TEMPORARILY)\n                                                .end(function(err, res) {\n                                                    if (err) {\n                                                        done(err);\n                                                    } else {\n                                                        if (res.headers.location.indexOf(ssoConfig.entry_point) == 0) {\n                                                            var data = usersData.SMALRespWithoutAuthtoken;\n                                                            api.post(\"/enterprise/v1/login/sso\")\n                                                                .send(data)\n                                                                .expect(httpStatus.MOVED_TEMPORARILY)\n                                                                .end(function(err, res) {\n                                                                    if (err) {\n                                                                        done(err);\n                                                                    } else {\n                                                                        var qs = querystring.parse(res.headers.location);\n                                                                        var authtoken = qs[\"sid\"] || qs[config.enterprise.sso.loginSuccessURL + \"?sid\"] || \"\";\n                                                                        api.get(\"/enterprise/v1/user\")\n                                                                            .set('authtoken', authtoken)\n                                                                            .set('org_uid', _data.organization.uid)\n                                                                            .expect(httpStatus.OK)\n                                                                            .end(function(err, res) {\n                                                                                if (err) {\n                                                                                    done(err);\n                                                                                } else {\n                                                                                    var isValid = res.body.output.uid != \"\" &&\n                                                                                        typeof(res.body.output._id) == \"undefined\" &&\n                                                                                        typeof(res.body.output.__v) == \"undefined\" &&\n                                                                                        typeof(res.body.output.organizations) != \"undefined\";\n                                                                                    if (isValid) {\n                                                                                        _.each(res.body.output.organizations, function(orgItem) {\n                                                                                            isValid = isValid &&\n                                                                                                typeof(orgItem._id) == \"undefined\" &&\n                                                                                                typeof(orgItem.__v) == \"undefined\" &&\n                                                                                                typeof(orgItem.org_uid) != \"undefined\" &&\n                                                                                                typeof(orgItem.org_name) != \"undefined\" &&\n                                                                                                typeof(orgItem.avatar) != \"undefined\";\n                                                                                        });\n                                                                                        isValid.should.equal(true);\n                                                                                        done();\n                                                                                    } else {\n                                                                                        false.should.equal(true);\n                                                                                        done();\n                                                                                    }\n                                                                                }\n                                                                            });\n                                                                    }\n                                                                });\n                                                        } else {\n                                                            true.should.equal(false);\n                                                            done();\n                                                        }\n                                                    }\n                                                });\n                                        });\n                                });\n                        });\n                } else {\n                    true.should.equal(false);\n                    done();\n                }\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3308aa6d-2af2-4f9c-b9f9-d37beb3e4221",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should use same token for secondtime login if validtill satisfies.",
                    "fullTitle": "Enterprise Organization OrganizationUser.processSSOLogin Should use same token for secondtime login if validtill satisfies.",
                    "timedOut": false,
                    "duration": 659,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar _ssoConfig = getImmutable(ssoConfig);\nvar SSOLogin = function(sso_data, cb) {\n    var authtoken = \"\";\n    var ssoLogin = \"/enterprise/v1/login/sso?org=\" + _data.organization.name;\n    if (sso_data.RelayState) {\n        authtoken = sso_data.authtoken || \"\";\n        ssoLogin += \"&sid=\" + authtoken\n    }\n    api.get(ssoLogin)\n        .expect(httpStatus.MOVED_TEMPORARILY)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                if (res.headers.location.indexOf(ssoConfig.entry_point) == 0) {\n                    var qs = querystring.parse(res.headers.location);\n                    var rs = utils.getRelayState({\n                        body: {\n                            RelayState: qs.RelayState\n                        }\n                    });\n                    if ((rs.authtoken || \"\") == authtoken) {\n                        api.post(\"/enterprise/v1/login/sso\")\n                            .send(sso_data)\n                            .expect(httpStatus.MOVED_TEMPORARILY)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    var qs = querystring.parse(res.headers.location);\n                                    var authtoken = qs[\"sid\"] || qs[config.enterprise.sso.loginSuccessURL + \"?sid\"] || \"\";\n                                    api.get(\"/enterprise/v1/user\")\n                                        .set('authtoken', authtoken)\n                                        .set('org_uid', _data.organization.uid)\n                                        .expect(httpStatus.OK)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                var isValid = res.body.output.uid != \"\" &&\n                                                    typeof(res.body.output._id) == \"undefined\" &&\n                                                    typeof(res.body.output.__v) == \"undefined\" &&\n                                                    typeof(res.body.output.organizations) != \"undefined\";\n                                                if (isValid) {\n                                                    _.each(res.body.output.organizations, function(orgItem) {\n                                                        isValid = isValid &&\n                                                            typeof(orgItem._id) == \"undefined\" &&\n                                                            typeof(orgItem.__v) == \"undefined\" &&\n                                                            typeof(orgItem.org_uid) != \"undefined\" &&\n                                                            typeof(orgItem.org_name) != \"undefined\" &&\n                                                            typeof(orgItem.avatar) != \"undefined\";\n                                                    });\n                                                    if (isValid) {\n                                                        cb(isValid, authtoken);\n                                                    } else {\n                                                        false.should.equal(true);\n                                                        done();\n                                                    }\n                                                } else {\n                                                    false.should.equal(true);\n                                                    done();\n                                                }\n                                            }\n                                        });\n                                }\n                            });\n                    } else {\n                        true.should.equal(false);\n                        done();\n                    }\n                } else {\n                    true.should.equal(false);\n                    done();\n                }\n            }\n        });\n};\napi.put(\"/enterprise/v1/organizations/:org_uid/ssoconfig\".replace(\":org_uid\", _data.organization.uid))\n    .send(_ssoConfig)\n    .set('authtoken', _data.owner.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        var publicKeyFile = __dirname + \"/../../../__cert/okta.cert\";\n        var privateKeyFile = __dirname + \"/../../../__cert/SP1.pem\";\n        api.post(\"/enterprise/v1/organizations/:org_uid/sso/certs\".replace(\":org_uid\", org_uid))\n            .set('authtoken', _data.admin.authtoken)\n            .attach('signed_public_key', publicKeyFile)\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                api.post(\"/enterprise/v1/organizations/:org_uid/sso/enable\".replace(\":org_uid\", _data.organization.uid))\n                    .set('authtoken', _data.owner.authtoken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        testCollection.createOrgUser({\n                            user: _data.admin,\n                            email: \"amber.more@raweng.com\",\n                            org_uid: _data.organization.uid,\n                            role: _data.roles[\"Admin\"]\n                        }, function(error, user) {\n                            var data = usersData.SMALRespWithoutAuthtoken;\n                            SSOLogin(data, function(isValid, authtoken) {\n                                data.RelayState = encryption.encryptSync(JSON.stringify({\n                                    o: _data.organization.uid,\n                                    a: authtoken\n                                }), encryption.encryptSync());\n                                data.authtoken = authtoken;\n                                SSOLogin(data, function(isValid, authtoken) {\n                                    _models.OrganizationToken.find({}, function(error, tokens) {\n                                        (tokens.length == 1).should.equal(true);\n                                        done();\n                                    });\n                                });\n                            });\n                        });\n                    });\n            });\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "da603f75-6728-42a3-8976-76cc422e1d91",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should create another token for secondtime login if validtill not satisfies.",
                    "fullTitle": "Enterprise Organization OrganizationUser.processSSOLogin Should create another token for secondtime login if validtill not satisfies.",
                    "timedOut": false,
                    "duration": 695,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar _ssoConfig = getImmutable(ssoConfig);\nvar last_authtoken = \"\";\nvar SSOLogin = function(sso_data, cb) {\n    api.get(\"/enterprise/v1/login/sso?org=\" + _data.organization.name)\n        .expect(httpStatus.MOVED_TEMPORARILY)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                if (res.headers.location.indexOf(ssoConfig.entry_point) == 0) {\n                    api.post(\"/enterprise/v1/login/sso\")\n                        .send(sso_data)\n                        .expect(httpStatus.MOVED_TEMPORARILY)\n                        .end(function(err, res) {\n                            if (err) {\n                                done(err);\n                            } else {\n                                var qs = querystring.parse(res.headers.location);\n                                var authtoken = qs[\"sid\"] || qs[config.enterprise.sso.loginSuccessURL + \"?sid\"] || \"\";\n                                api.get(\"/enterprise/v1/user\")\n                                    .set('authtoken', authtoken)\n                                    .set('org_uid', _data.organization.uid)\n                                    .expect(httpStatus.OK)\n                                    .end(function(err, res) {\n                                        if (err) {\n                                            done(err);\n                                        } else {\n                                            var isValid = res.body.output.uid != \"\" &&\n                                                typeof(res.body.output._id) == \"undefined\" &&\n                                                typeof(res.body.output.__v) == \"undefined\" &&\n                                                typeof(res.body.output.organizations) != \"undefined\";\n                                            if (isValid) {\n                                                _.each(res.body.output.organizations, function(orgItem) {\n                                                    isValid = isValid &&\n                                                        typeof(orgItem._id) == \"undefined\" &&\n                                                        typeof(orgItem.__v) == \"undefined\" &&\n                                                        typeof(orgItem.org_uid) != \"undefined\" &&\n                                                        typeof(orgItem.org_name) != \"undefined\" &&\n                                                        typeof(orgItem.avatar) != \"undefined\";\n                                                });\n                                                if (isValid) {\n                                                    cb(isValid, authtoken);\n                                                } else {\n                                                    false.should.equal(true);\n                                                    done();\n                                                }\n                                            } else {\n                                                false.should.equal(true);\n                                                done();\n                                            }\n                                        }\n                                    });\n                            }\n                        });\n                } else {\n                    true.should.equal(false);\n                    done();\n                }\n            }\n        });\n};\napi.put(\"/enterprise/v1/organizations/:org_uid/ssoconfig\".replace(\":org_uid\", _data.organization.uid))\n    .send(_ssoConfig)\n    .set('authtoken', _data.owner.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        var publicKeyFile = __dirname + \"/../../../__cert/okta.cert\";\n        var privateKeyFile = __dirname + \"/../../../__cert/SP1.pem\";\n        api.post(\"/enterprise/v1/organizations/:org_uid/sso/certs\".replace(\":org_uid\", org_uid))\n            .set('authtoken', _data.admin.authtoken)\n            .attach('signed_public_key', publicKeyFile)\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                api.post(\"/enterprise/v1/organizations/:org_uid/sso/enable\".replace(\":org_uid\", _data.organization.uid))\n                    .set('authtoken', _data.owner.authtoken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        testCollection.createOrgUser({\n                            user: _data.admin,\n                            email: \"amber.more@raweng.com\",\n                            org_uid: _data.organization.uid,\n                            role: _data.roles[\"Admin\"]\n                        }, function(error, user) {\n                            var data = usersData.SMALRespWithoutAuthtoken;\n                            SSOLogin(data, function(isValid, authtoken) {\n                                data.RelayState = encryption.encryptSync(JSON.stringify({\n                                    o: _data.organization.uid,\n                                    a: authtoken\n                                }), encryption.encryptSync());\n                                _models.OrganizationToken.findOneAndUpdate({\n                                    org_uid: _data.organization.uid\n                                }, {\n                                    valid_till: new Date(2001, 12, 1)\n                                }, { new: true }, function(error, tokens) {\n                                    SSOLogin(data, function(isValid, authtoken) {\n                                        _models.OrganizationToken.find({}, function(error, tokens) {\n                                            (tokens.length == 2).should.equal(true);\n                                            done();\n                                        });\n                                    });\n                                });\n                            });\n                        });\n                    });\n            });\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a6955590-3de4-4700-b653-774570e9049e",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not do SSO login if SSO is disabled.",
                    "fullTitle": "Enterprise Organization OrganizationUser.processSSOLogin Should not do SSO login if SSO is disabled.",
                    "timedOut": false,
                    "duration": 2958,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar _ssoConfig = getImmutable(ssoConfig);\nvar email = \"amber.more@raweng.com\";\nvar loginWithSSO = function(status, callback) {\n    api.get(\"/enterprise/v1/login/sso?org=\" + _data.organization.name)\n        .expect(httpStatus.MOVED_TEMPORARILY)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                if (res.headers.location.indexOf(\"error\") > -1) {\n                    var qs = querystring.parse(res.headers.location);\n                    var error = qs[\"error\"] || qs[config.enterprise.sso.loginErrorURL + \"?error\"] || \"\";\n                    callback(error, null);\n                } else {\n                    if (res.headers.location.indexOf(ssoConfig.entry_point) == 0) {\n                        var data = usersData.SMALRespWithoutAuthtoken;\n                        api.post(\"/enterprise/v1/login/sso\")\n                            .send(data)\n                            .expect(httpStatus.MOVED_TEMPORARILY)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    var qs = querystring.parse(res.headers.location);\n                                    var authtoken = qs[\"sid\"] || qs[config.enterprise.sso.loginSuccessURL + \"?sid\"] || \"\";\n                                    api.get(\"/enterprise/v1/user\")\n                                        .set('authtoken', authtoken)\n                                        .set('org_uid', _data.organization.uid)\n                                        .expect(status)\n                                        .end(callback);\n                                }\n                            });\n                    } else {\n                        true.should.equal(false);\n                        done();\n                    }\n                }\n            }\n        });\n};\nsignUpUser({\n    email: email\n}, function(res) {\n    var newUserAuthtoken = res.body.output.authtoken;\n    api.post(\"/enterprise/v1/organizations/:org_uid/invite\".replace(\":org_uid\", _data.organization.uid))\n        .send({\n            \"org_roles\": [_data.roles[\"Admin\"].uid],\n            \"emails\": [email]\n        })\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                if (res.body.output.message == messageList.ORG_INVITATION_SEND) {\n                    api.put(\"/enterprise/v1/organizations/:org_uid/ssoconfig\".replace(\":org_uid\", _data.organization.uid))\n                        .send(_ssoConfig)\n                        .set('authtoken', _data.owner.authtoken)\n                        .expect(httpStatus.OK)\n                        .end(function(err, res) {\n                            var publicKeyFile = __dirname + \"/../../../__cert/okta.cert\";\n                            var privateKeyFile = __dirname + \"/../../../__cert/SP1.pem\";\n                            api.post(\"/enterprise/v1/organizations/:org_uid/sso/certs\".replace(\":org_uid\", org_uid))\n                                .set('authtoken', _data.admin.authtoken)\n                                .attach('signed_public_key', publicKeyFile)\n                                .expect(httpStatus.OK)\n                                .end(function(err, res) {\n                                    api.post(\"/enterprise/v1/organizations/:org_uid/sso/enable\".replace(\":org_uid\", org_uid))\n                                        .send({})\n                                        .set('authtoken', _data.owner.authtoken)\n                                        .expect(httpStatus.OK)\n                                        .end(function(err, res) {\n                                            loginWithSSO(httpStatus.OK, function(err, res) {\n                                                if (err) {\n                                                    done(err);\n                                                } else {\n                                                    var isValid = res.body.output.uid != \"\" &&\n                                                        typeof(res.body.output._id) == \"undefined\" &&\n                                                        typeof(res.body.output.__v) == \"undefined\" &&\n                                                        typeof(res.body.output.organizations) != \"undefined\";\n                                                    if (isValid) {\n                                                        api.post(\"/enterprise/v1/organizations/:org_uid/sso/disable\".replace(\":org_uid\", org_uid))\n                                                            .send({})\n                                                            .set('authtoken', _data.owner.authtoken)\n                                                            .expect(httpStatus.OK)\n                                                            .end(function(err, res) {\n                                                                loginWithSSO(httpStatus.BAD_REQUEST, function(err, res) {\n                                                                    err.should.equal(messageList.ORG_SSO_DISABLE);\n                                                                    done();\n                                                                });\n                                                            });\n                                                    } else {\n                                                        false.should.equal(true);\n                                                        done();\n                                                    }\n                                                }\n                                            });\n                                        });\n                                });\n                        });\n                } else {\n                    true.should.equal(false);\n                    done();\n                }\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "584bbd98-411a-40e3-90cf-49b67e73d08a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should logout all tokens.",
                    "fullTitle": "Enterprise Organization OrganizationUser.processSSOLogin Should logout all tokens.",
                    "timedOut": false,
                    "duration": 737,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar _ssoConfig = getImmutable(ssoConfig);\nvar last_authtoken = \"\";\nvar SSOLogin = function(cb) {\n    api.get(\"/enterprise/v1/login/sso?org=\" + _data.organization.name)\n        .expect(httpStatus.MOVED_TEMPORARILY)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                if (res.headers.location.indexOf(ssoConfig.entry_point) == 0) {\n                    var data = usersData.SMALRespWithoutAuthtoken;\n                    api.post(\"/enterprise/v1/login/sso\")\n                        .send(data)\n                        .expect(httpStatus.MOVED_TEMPORARILY)\n                        .end(function(err, res) {\n                            if (err) {\n                                done(err);\n                            } else {\n                                var qs = querystring.parse(res.headers.location);\n                                var authtoken = qs[\"sid\"] || qs[config.enterprise.sso.loginSuccessURL + \"?sid\"] || \"\";\n                                api.get(\"/enterprise/v1/user\")\n                                    .set('authtoken', authtoken)\n                                    .set('org_uid', _data.organization.uid)\n                                    .expect(httpStatus.OK)\n                                    .end(function(err, res) {\n                                        if (err) {\n                                            done(err);\n                                        } else {\n                                            var isValid = res.body.output.uid != \"\" &&\n                                                typeof(res.body.output._id) == \"undefined\" &&\n                                                typeof(res.body.output.__v) == \"undefined\" &&\n                                                typeof(res.body.output.organizations) != \"undefined\";\n                                            if (isValid) {\n                                                _.each(res.body.output.organizations, function(orgItem) {\n                                                    isValid = isValid &&\n                                                        typeof(orgItem._id) == \"undefined\" &&\n                                                        typeof(orgItem.__v) == \"undefined\" &&\n                                                        typeof(orgItem.org_uid) != \"undefined\" &&\n                                                        typeof(orgItem.org_name) != \"undefined\" &&\n                                                        typeof(orgItem.avatar) != \"undefined\";\n                                                });\n                                                if (isValid) {\n                                                    last_authtoken = authtoken;\n                                                    cb(isValid);\n                                                } else {\n                                                    false.should.equal(true);\n                                                    done();\n                                                }\n                                            } else {\n                                                false.should.equal(true);\n                                                done();\n                                            }\n                                        }\n                                    });\n                            }\n                        });\n                } else {\n                    true.should.equal(false);\n                    done();\n                }\n            }\n        });\n};\napi.put(\"/enterprise/v1/organizations/:org_uid/ssoconfig\".replace(\":org_uid\", _data.organization.uid))\n    .send(_ssoConfig)\n    .set('authtoken', _data.owner.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        var publicKeyFile = __dirname + \"/../../../__cert/okta.cert\";\n        var privateKeyFile = __dirname + \"/../../../__cert/SP1.pem\";\n        api.post(\"/enterprise/v1/organizations/:org_uid/sso/certs\".replace(\":org_uid\", org_uid))\n            .set('authtoken', _data.admin.authtoken)\n            .attach('signed_public_key', publicKeyFile)\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                api.post(\"/enterprise/v1/organizations/:org_uid/sso/enable\".replace(\":org_uid\", _data.organization.uid))\n                    .set('authtoken', _data.owner.authtoken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        testCollection.createOrgUser({\n                            user: _data.admin,\n                            email: \"amber.more@raweng.com\",\n                            org_uid: _data.organization.uid,\n                            role: _data.roles[\"Admin\"]\n                        }, function(error, user) {\n                            SSOLogin(function() {\n                                _models.OrganizationToken.findOneAndUpdate({\n                                    org_uid: _data.organization.uid\n                                }, {\n                                    valid_till: new Date(2001, 12, 1)\n                                }, { new: true }, function(error, tokens) {\n                                    SSOLogin(function() {\n                                        api.post(\"/enterprise/v1/logout\")\n                                            .set('authtoken', last_authtoken)\n                                            .expect(httpStatus.OK)\n                                            .end(function(err, res) {\n                                                _models.OrganizationToken.find({ authtoken: last_authtoken }, function(error, tokens) {\n                                                    var is_valid = true;\n                                                    _.each(tokens, function(item) {\n                                                        is_valid = is_valid && item.deleted_at != null;\n                                                    });\n                                                    is_valid.should.equal(true);\n                                                    done();\n                                                });\n                                            });\n                                    });\n                                });\n                            });\n                        });\n                    });\n            });\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7c81b471-31f0-4572-b60c-ec042ee572c6",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "edd70dd2-8a6a-423e-8192-9da68f2ebb7b",
                  "298e2ab9-018c-4bc1-b8e2-ac69a6ca2f98",
                  "633c1fd3-e971-4547-9068-df88d88f5624",
                  "89a51d00-82e1-4032-ae6b-bcbeb76d7aad",
                  "58c7abec-84ac-4bae-85ac-249004943a96",
                  "3308aa6d-2af2-4f9c-b9f9-d37beb3e4221",
                  "da603f75-6728-42a3-8976-76cc422e1d91",
                  "a6955590-3de4-4700-b653-774570e9049e",
                  "584bbd98-411a-40e3-90cf-49b67e73d08a",
                  "7c81b471-31f0-4572-b60c-ec042ee572c6"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 12633,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "4b965a4f-00ce-40ec-b7cc-ead9ca720d59",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\organization\\removeCerts.enterprise.js",
        "file": "\\controllers\\test\\organization\\removeCerts.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "77d58c49-4f0d-47d9-b950-b59d3143c74a",
            "title": "Organization",
            "fullFile": "D:\\api\\controllers\\test\\organization\\removeCerts.enterprise.js",
            "file": "\\controllers\\test\\organization\\removeCerts.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "7a7f80c7-57a3-49aa-8c94-b11649e499ae",
                "title": "Organization.removeCerts",
                "fullFile": "D:\\api\\controllers\\test\\organization\\removeCerts.enterprise.js",
                "file": "\\controllers\\test\\organization\\removeCerts.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Organization Organization.removeCerts \"before each\" hook",
                    "timedOut": false,
                    "duration": 190,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        _data = data;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4c844d9a-8b30-436c-84c0-bf2cfb249fbb",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Organization Organization.removeCerts \"after all\" hook",
                    "timedOut": false,
                    "duration": 6,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "testCollection.organizationRemoveRecords({}, function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "457048af-1349-4dcd-be03-e13f7bacabfb",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Organization Organization.removeCerts \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6f959d9c-92a7-40ae-9369-456ddfd11402",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should delete public SSO cert.",
                    "fullTitle": "Enterprise Organization Organization.removeCerts Should delete public SSO cert.",
                    "timedOut": false,
                    "duration": 137,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar publicKeyFile = __dirname + \"/../../../__cert/okta.cert\";\nvar privateKeyFile = __dirname + \"/../../../__cert/SP1.pem\";\napi.post(\"/enterprise/v1/organizations/:org_uid/sso/certs\".replace(\":org_uid\", org_uid))\n    .set('authtoken', authToken)\n    .attach('signed_public_key', publicKeyFile)\n    .attach('enc_private_key', privateKeyFile)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.uid != \"\" &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\" &&\n                res.body.output.sso_details.signed_public_key != \"\" &&\n                res.body.output.sso_details.enc_private_key != \"\";\n            if (isValid) {\n                api.delete(apiURL.replace(\":org_uid\", org_uid).replace(\":cert_type\", \"public\"))\n                    .set('authtoken', authToken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            res.body.output.message.should.equal(messageList.ORG_CERT_PUBLIC_DELETED_SUCCESS);\n                            done();\n                        }\n                    });\n            } else {\n                true.should.equal(false);\n                done();\n            }\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8705861d-f577-4197-aac5-1592696a178f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should delete private SSO cert.",
                    "fullTitle": "Enterprise Organization Organization.removeCerts Should delete private SSO cert.",
                    "timedOut": false,
                    "duration": 110,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar publicKeyFile = __dirname + \"/../../../__cert/okta.cert\";\nvar privateKeyFile = __dirname + \"/../../../__cert/SP1.pem\";\napi.post(\"/enterprise/v1/organizations/:org_uid/sso/certs\".replace(\":org_uid\", org_uid))\n    .set('authtoken', authToken)\n    .attach('signed_public_key', publicKeyFile)\n    .attach('enc_private_key', privateKeyFile)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.uid != \"\" &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\" &&\n                res.body.output.sso_details.signed_public_key != \"\" &&\n                res.body.output.sso_details.enc_private_key != \"\";\n            if (isValid) {\n                api.delete(apiURL.replace(\":org_uid\", org_uid).replace(\":cert_type\", \"private\"))\n                    .set('authtoken', authToken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            res.body.output.message.should.equal(messageList.ORG_CERT_PRIVATE_DELETED_SUCCESS);\n                            done();\n                        }\n                    });\n            } else {\n                true.should.equal(false);\n                done();\n            }\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cf3e3a64-acff-403c-8a77-c8b8be31760f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not get SSO certs by Developer.",
                    "fullTitle": "Enterprise Organization Organization.removeCerts Should not get SSO certs by Developer.",
                    "timedOut": false,
                    "duration": 28,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.delete(apiURL.replace(\":org_uid\", org_uid).replace(\":cert_type\", \"public\"))\n    .set('authtoken', _data.developer.authtoken)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_NOT_ADMIN);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "331aa391-f92e-43bb-b898-e65a1b0d41c1",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should gives invalid file type errors for both files.",
                    "fullTitle": "Enterprise Organization Organization.removeCerts Should gives invalid file type errors for both files.",
                    "timedOut": false,
                    "duration": 25,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.delete(apiURL.replace(\":org_uid\", org_uid).replace(\":cert_type\", \"public1\"))\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.error.message == messageList.ORG_INVALID_CERT_TYPE;\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3e86af56-dc3c-45f5-979b-b6c531b03409",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Organization Organization.removeCerts Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.delete(apiURL.replace(\":org_uid\", org_uid).replace(\":cert_type\", \"public\"))\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0c432b68-8915-45d0-868a-bd62d416cf55",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "8705861d-f577-4197-aac5-1592696a178f",
                  "cf3e3a64-acff-403c-8a77-c8b8be31760f",
                  "331aa391-f92e-43bb-b898-e65a1b0d41c1",
                  "3e86af56-dc3c-45f5-979b-b6c531b03409",
                  "0c432b68-8915-45d0-868a-bd62d416cf55"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 308,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "6fd9fc14-f2b3-45b2-a381-de6ba93f1676",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\organization\\transfer.enterprise.js",
        "file": "\\controllers\\test\\organization\\transfer.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "9e27cefe-7fc7-4912-a7cf-ae3c4d06d807",
            "title": "Organization",
            "fullFile": "D:\\api\\controllers\\test\\organization\\transfer.enterprise.js",
            "file": "\\controllers\\test\\organization\\transfer.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "bbabb386-a847-4108-bc36-0e84aa98f03f",
                "title": "Organization.transfer",
                "fullFile": "D:\\api\\controllers\\test\\organization\\transfer.enterprise.js",
                "file": "\\controllers\\test\\organization\\transfer.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Organization Organization.transfer \"before each\" hook",
                    "timedOut": false,
                    "duration": 362,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        _data = data;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c955b892-0576-4bfd-9510-6bdd2644eec6",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Organization Organization.transfer \"after all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "done();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4201f9ba-1714-435b-b49e-9649af7d1408",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Organization Organization.transfer \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f51a2701-97e8-42aa-bf06-5a1048bc20a8",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should send ownership invitation to existing flow user.",
                    "fullTitle": "Enterprise Organization Organization.transfer Should send ownership invitation to existing flow user.",
                    "timedOut": false,
                    "duration": 60,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.put(apiURL.replace(\":org_uid\", org_uid))\n    .send({\n        \"email\": _data.other_user.email\n    })\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            if (res.body.output.message == messageList.ORG_OWNERSHIP_INVITATION_SEND) {\n                _models.OrganizationOwnerInvitation.findOne({ org_uid: org_uid, email: _data.other_user.email }, function(error, orgInvitation) {\n                    if (error || !orgInvitation) {\n                        false.should.equal(true);\n                        done();\n                    } else {\n                        true.should.equal(true);\n                        done();\n                    }\n                });\n            } else {\n                true.should.equal(false);\n                done();\n            }\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e908abfd-c88f-4f79-949e-6305fa209635",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get ownership invitation.",
                    "fullTitle": "Enterprise Organization Organization.transfer Should get ownership invitation.",
                    "timedOut": false,
                    "duration": 104,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.put(apiURL.replace(\":org_uid\", org_uid))\n    .send({\n        \"email\": _data.other_user.email\n    })\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            if (res.body.output.message == messageList.ORG_OWNERSHIP_INVITATION_SEND) {\n                api.get(\"/enterprise/v1/organizations/:org_uid\".replace(\":org_uid\", org_uid))\n                    .set('authtoken', _data.other_user.authtoken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            res.body.output.owner_invitation.should.not.equal(undefined);\n                            done();\n                        }\n                    });\n            } else {\n                true.should.equal(false);\n                done();\n            }\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7a80792e-d0c8-44c9-be32-45ef66f37bed",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should limit ownership invitation.",
                    "fullTitle": "Enterprise Organization Organization.transfer Should limit ownership invitation.",
                    "timedOut": false,
                    "duration": 103,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(\"/enterprise/v1/organizations/:org_uid/invite\".replace(\":org_uid\", org_uid))\n    .send({\n        \"org_roles\": [_data.roles[\"Developer\"].uid],\n        \"emails\": [\"test.user+1@raweng.com\", \"test.user+1@rawenG.com\", \"test.user+2@raweng.com\",\n            \"test.user+3@raweng.com\", \"test.user+4@raweng.com\", \"test.user+5@raweng.com\"\n        ]\n    })\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            api.put(apiURL.replace(\":org_uid\", org_uid))\n                .send({\n                    \"email\": \"test.user+6@raweng.com\"\n                })\n                .set('authtoken', authToken)\n                .expect(httpStatus.BAD_REQUEST)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        var error_message = messageList.ORG_USER_MAX_LIMIT_REACHED;\n                        error_message = error_message.replace(\"%%USER_COUNT%%\", 10);\n                        res.body.error.message.should.equal(error_message);\n                        done();\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "988bd713-4970-4dae-a918-a7872f3eb6f1",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give organization not found error.",
                    "fullTitle": "Enterprise Organization Organization.transfer Should give organization not found error.",
                    "timedOut": false,
                    "duration": 20,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.put(apiURL.replace(\":org_uid\", \"FAKE_ORG\"))\n    .send({\n        \"email\": _data.other_user.email\n    })\n    .set('authtoken', authToken)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_NOT_FOUND);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8907b363-b29f-4f0f-8f4c-5b0f7bd335fe",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should validate ownership invitation body.",
                    "fullTitle": "Enterprise Organization Organization.transfer Should validate ownership invitation body.",
                    "timedOut": false,
                    "duration": 25,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.put(apiURL.replace(\":org_uid\", org_uid))\n    .send({})\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            (res.body.error.email.message == messageList.ORG_EMAIL_REQUIRED).should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b0d87ebd-cbef-46b5-8ea3-7400238b825a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should send ownership invitation to existing organization flow user.",
                    "fullTitle": "Enterprise Organization Organization.transfer Should send ownership invitation to existing organization flow user.",
                    "timedOut": false,
                    "duration": 50,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.put(apiURL.replace(\":org_uid\", org_uid))\n    .send({\n        \"email\": _data.developer.email\n    })\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            if (res.body.output.message == messageList.ORG_OWNERSHIP_INVITATION_SEND) {\n                _models.OrganizationOwnerInvitation.findOne({ org_uid: org_uid, email: _data.developer.email }, function(error, orgInvitation) {\n                    if (error || !orgInvitation) {\n                        false.should.equal(true);\n                        done();\n                    } else {\n                        true.should.equal(true);\n                        done();\n                    }\n                });\n            } else {\n                true.should.equal(false);\n                done();\n            }\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fa7c38d6-4e02-44b5-b4f5-52f62f44db92",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should send ownership invitation to new flow user.",
                    "fullTitle": "Enterprise Organization Organization.transfer Should send ownership invitation to new flow user.",
                    "timedOut": false,
                    "duration": 51,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar email = \"test.user+1000@raweng.com\";\napi.put(apiURL.replace(\":org_uid\", org_uid))\n    .send({\n        \"email\": email\n    })\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            if (res.body.output.message == messageList.ORG_OWNERSHIP_INVITATION_SEND) {\n                _models.OrganizationOwnerInvitation.findOne({ org_uid: org_uid, email: email }, function(error, orgInvitation) {\n                    if (error || !orgInvitation) {\n                        false.should.equal(true);\n                        done();\n                    } else {\n                        true.should.equal(true);\n                        done();\n                    }\n                });\n            } else {\n                true.should.equal(false);\n                done();\n            }\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f4f7e8f3-1eda-49fd-9a0d-980c1e980606",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should send ownership invitation to existing google user.",
                    "fullTitle": "Enterprise Organization Organization.transfer Should send ownership invitation to existing google user.",
                    "timedOut": false,
                    "duration": 2720,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar email = \"test.user+1000@raweng.com\";\nsignUpGoogleUser({\n    done: done,\n    email: email\n}, function(res) {\n    var new_user_uid = res.body.output.uid;\n    api.put(apiURL.replace(\":org_uid\", org_uid))\n        .send({\n            \"email\": email\n        })\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                if (res.body.output.message == messageList.ORG_OWNERSHIP_INVITATION_SEND) {\n                    _models.OrganizationOwnerInvitation.findOne({ org_uid: org_uid, email: email }, function(error, orgInvitation) {\n                        if (error || !orgInvitation) {\n                            false.should.equal(true);\n                            done();\n                        } else {\n                            true.should.equal(true);\n                            done();\n                        }\n                    });\n                } else {\n                    true.should.equal(false);\n                    done();\n                }\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "18d3715c-5ac3-470d-a787-dd7fa2f4d797",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should send ownership invitation to new google user.",
                    "fullTitle": "Enterprise Organization Organization.transfer Should send ownership invitation to new google user.",
                    "timedOut": false,
                    "duration": 47,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar email = \"test.user+1000@raweng.com\";\napi.put(apiURL.replace(\":org_uid\", org_uid))\n    .send({\n        \"email\": email\n    })\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            if (res.body.output.message == messageList.ORG_OWNERSHIP_INVITATION_SEND) {\n                _models.OrganizationOwnerInvitation.findOne({ org_uid: org_uid, email: email }, function(error, orgInvitation) {\n                    if (error || !orgInvitation) {\n                        false.should.equal(true);\n                        done();\n                    } else {\n                        true.should.equal(true);\n                        done();\n                    }\n                });\n            } else {\n                true.should.equal(false);\n                done();\n            }\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3e08ea7a-7745-420e-b1ed-bdf2a1ba47b0",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give owner required error for admin role user.",
                    "fullTitle": "Enterprise Organization Organization.transfer Should give owner required error for admin role user.",
                    "timedOut": false,
                    "duration": 34,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.put(apiURL.replace(\":org_uid\", org_uid))\n    .send({\n        \"email\": _data.developer.email\n    })\n    .set('authtoken', _data.admin.authtoken)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_NOT_OWNER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f5bb165e-a837-4447-85f4-525a2ccd9e5c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give owner required error for developer role user.",
                    "fullTitle": "Enterprise Organization Organization.transfer Should give owner required error for developer role user.",
                    "timedOut": false,
                    "duration": 34,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.put(apiURL.replace(\":org_uid\", org_uid))\n    .send({\n        \"email\": _data.developer.email\n    })\n    .set('authtoken', _data.developer.authtoken)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_NOT_OWNER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "65444ced-db5c-475f-8882-b1fd2364dc95",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Organization Organization.transfer Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.put(apiURL.replace(\":org_uid\", org_uid))\n    .send({\n        \"email\": _data.developer.email\n    })\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1295d3d1-e15e-4157-abdb-651d585ceddc",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "e908abfd-c88f-4f79-949e-6305fa209635",
                  "7a80792e-d0c8-44c9-be32-45ef66f37bed",
                  "988bd713-4970-4dae-a918-a7872f3eb6f1",
                  "8907b363-b29f-4f0f-8f4c-5b0f7bd335fe",
                  "b0d87ebd-cbef-46b5-8ea3-7400238b825a",
                  "fa7c38d6-4e02-44b5-b4f5-52f62f44db92",
                  "f4f7e8f3-1eda-49fd-9a0d-980c1e980606",
                  "18d3715c-5ac3-470d-a787-dd7fa2f4d797",
                  "3e08ea7a-7745-420e-b1ed-bdf2a1ba47b0",
                  "f5bb165e-a837-4447-85f4-525a2ccd9e5c",
                  "65444ced-db5c-475f-8882-b1fd2364dc95",
                  "1295d3d1-e15e-4157-abdb-651d585ceddc"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 3257,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "32b8873f-ae55-4723-ab2c-f77a71e02bfd",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\organization\\update.enterprise.js",
        "file": "\\controllers\\test\\organization\\update.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "8aff9756-cad3-42fa-9147-4b1ec692c8bf",
            "title": "Organization",
            "fullFile": "D:\\api\\controllers\\test\\organization\\update.enterprise.js",
            "file": "\\controllers\\test\\organization\\update.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "d41e7769-e0dc-4ced-880f-3ab1b92157a9",
                "title": "Organization.update",
                "fullFile": "D:\\api\\controllers\\test\\organization\\update.enterprise.js",
                "file": "\\controllers\\test\\organization\\update.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Organization Organization.update \"before each\" hook",
                    "timedOut": false,
                    "duration": 182,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        _data = data;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3216d4b3-2bf8-4ea6-8a9f-d539e5c901db",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Organization Organization.update \"after all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "819b0aad-cd9d-42f9-aca8-0dc708f0f696",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Organization Organization.update \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7d5c113c-392b-45cc-b11d-f68a316485bf",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should update organization details.",
                    "fullTitle": "Enterprise Organization Organization.update Should update organization details.",
                    "timedOut": false,
                    "duration": 56,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar body = {\n    'name': 'org3',\n    'sso_details': {\n        'name': 'sso',\n        'url': 'https://example.com'\n    },\n    'avatar': 'https://example.com/img1.png'\n};\nserver.agents[\"enterprise\"].s3.UploadAvatar = function(options, callback) {\n    callback(null, {\n        ETag: \"sdfdsf35s6dfsdfdsf6565656565655665\"\n    });\n};\nserver.agents[\"enterprise\"].s3.DownloadAvatar = function(options, callback) {\n    callback(null, body.avatar);\n};\napi.put(apiURL.replace(\":org_uid\", org_uid))\n    .send(body)\n    .set('authtoken', _data.admin.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var output = res.body.output || {};\n            (output.uid == org_uid &&\n                output.name == body.name &&\n                output.avatar == body.avatar).should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c11bf6cb-f674-407a-92bc-13b49d12ed04",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give organization not found error.",
                    "fullTitle": "Enterprise Organization Organization.update Should give organization not found error.",
                    "timedOut": false,
                    "duration": 21,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar body = {\n    'name': 'org3',\n    'sso_details': {\n        'name': 'sso',\n        'url': 'https://example.com'\n    },\n    'avatar': 'https://example.com/img1.png'\n};\nserver.agents[\"enterprise\"].s3.UploadAvatar = function(options, callback) {\n    callback(null, {\n        ETag: \"sdfdsf35s6dfsdfdsf6565656565655665\"\n    });\n};\nserver.agents[\"enterprise\"].s3.DownloadAvatar = function(options, callback) {\n    callback(null, body.avatar);\n};\napi.put(apiURL.replace(\":org_uid\", \"FAKE_ORG\"))\n    .send(body)\n    .set('authtoken', _data.admin.authtoken)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_NOT_FOUND);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "791eb9aa-ce45-400e-9876-1c0bb9a4e74e",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should update same name in organization details.",
                    "fullTitle": "Enterprise Organization Organization.update Should update same name in organization details.",
                    "timedOut": false,
                    "duration": 56,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar body = {\n    'name': 'org1',\n    'sso_details': {\n        'name': 'sso',\n        'url': 'https://example.com'\n    },\n    'avatar': 'https://example.com/img1.png'\n};\nserver.agents[\"enterprise\"].s3.UploadAvatar = function(options, callback) {\n    callback(null, {\n        ETag: \"sdfdsf35s6dfsdfdsf6565656565655665\"\n    });\n};\nserver.agents[\"enterprise\"].s3.DownloadAvatar = function(options, callback) {\n    callback(null, body.avatar);\n};\napi.put(apiURL.replace(\":org_uid\", org_uid))\n    .send(body)\n    .set('authtoken', _data.admin.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var output = res.body.output || {};\n            (output.uid == org_uid &&\n                output.name == body.name &&\n                output.avatar == body.avatar).should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bda1a985-b8dd-4995-b9ef-424343117f26",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should update organization details without name.",
                    "fullTitle": "Enterprise Organization Organization.update Should update organization details without name.",
                    "timedOut": false,
                    "duration": 56,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar body = {\n    'sso_details': {\n        'name': 'sso',\n        'url': 'https://example.com'\n    },\n    'avatar': 'https://example.com/img1.png'\n};\nserver.agents[\"enterprise\"].s3.UploadAvatar = function(options, callback) {\n    callback(null, {\n        ETag: \"sdfdsf35s6dfsdfdsf6565656565655665\"\n    });\n};\nserver.agents[\"enterprise\"].s3.DownloadAvatar = function(options, callback) {\n    callback(null, body.avatar);\n};\napi.put(apiURL.replace(\":org_uid\", org_uid))\n    .send(body)\n    .set('authtoken', _data.admin.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var output = res.body.output || {};\n            (output.uid == org_uid &&\n                output.name != \"\" &&\n                output.avatar == body.avatar).should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7bc654c4-8f53-481f-95cd-06291a5c2767",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give duplicate organization name error.",
                    "fullTitle": "Enterprise Organization Organization.update Should give duplicate organization name error.",
                    "timedOut": false,
                    "duration": 31,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar body = {\n    'name': 'org2',\n    'sso_details': {\n        'name': 'sso',\n        'url': 'https://example.com'\n    },\n    'avatar': 'https://example.com/img1.png'\n};\nserver.agents[\"enterprise\"].s3.UploadAvatar = function(options, callback) {\n    callback(null, {\n        ETag: \"sdfdsf35s6dfsdfdsf6565656565655665\"\n    });\n};\nserver.agents[\"enterprise\"].s3.DownloadAvatar = function(options, callback) {\n    callback(null, body.avatar);\n};\napi.put(apiURL.replace(\":org_uid\", org_uid))\n    .send(body)\n    .set('authtoken', _data.admin.authtoken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_DUPLICATE_NAME_ERROR);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5f7895b2-3918-46d0-b8f2-727b95a14c5a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should only allowed to update org details by owner and admin role user.",
                    "fullTitle": "Enterprise Organization Organization.update Should only allowed to update org details by owner and admin role user.",
                    "timedOut": false,
                    "duration": 29,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar body = {\n    'name': 'org3',\n    'sso_details': {\n        'name': 'sso',\n        'url': 'https://example.com'\n    },\n    'avatar': 'https://example.com/img1.png'\n};\nserver.agents[\"enterprise\"].s3.UploadAvatar = function(options, callback) {\n    callback(null, {\n        ETag: \"sdfdsf35s6dfsdfdsf6565656565655665\"\n    });\n};\nserver.agents[\"enterprise\"].s3.DownloadAvatar = function(options, callback) {\n    callback(null, body.avatar);\n};\napi.put(apiURL.replace(\":org_uid\", org_uid))\n    .send(body)\n    .set('authtoken', _data.developer.authtoken)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_NOT_ADMIN);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c9351f4b-0174-4bd5-849e-867fd9954da0",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Organization Organization.update Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar body = {\n    'name': 'org3',\n    'sso_details': {\n        'name': 'sso',\n        'url': 'https://example.com'\n    },\n    'avatar': 'https://example.com/img1.png'\n};\nserver.agents[\"enterprise\"].s3.UploadAvatar = function(options, callback) {\n    callback(null, {\n        ETag: \"sdfdsf35s6dfsdfdsf6565656565655665\"\n    });\n};\nserver.agents[\"enterprise\"].s3.DownloadAvatar = function(options, callback) {\n    callback(null, body.avatar);\n};\napi.put(apiURL.replace(\":org_uid\", org_uid))\n    .send(body)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d765c7d3-e852-432d-b7e4-6e30ac4cc7cb",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "c11bf6cb-f674-407a-92bc-13b49d12ed04",
                  "791eb9aa-ce45-400e-9876-1c0bb9a4e74e",
                  "bda1a985-b8dd-4995-b9ef-424343117f26",
                  "7bc654c4-8f53-481f-95cd-06291a5c2767",
                  "5f7895b2-3918-46d0-b8f2-727b95a14c5a",
                  "c9351f4b-0174-4bd5-849e-867fd9954da0",
                  "d765c7d3-e852-432d-b7e4-6e30ac4cc7cb"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 257,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "f904f9f8-69a9-4e15-8909-775853a6da55",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\organization\\updateAvatar.enterprise.js",
        "file": "\\controllers\\test\\organization\\updateAvatar.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "b9272532-ebfb-46ce-bc6b-ff3f19d96d63",
            "title": "Organization",
            "fullFile": "D:\\api\\controllers\\test\\organization\\updateAvatar.enterprise.js",
            "file": "\\controllers\\test\\organization\\updateAvatar.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "86f8000b-33e6-42ff-b2d3-4a36f3a75662",
                "title": "Organization.updateAvatar",
                "fullFile": "D:\\api\\controllers\\test\\organization\\updateAvatar.enterprise.js",
                "file": "\\controllers\\test\\organization\\updateAvatar.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Organization Organization.updateAvatar \"before each\" hook",
                    "timedOut": false,
                    "duration": 168,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        _data = data;\n        org_uid = data.organization.uid;\n        user_uid = data.organization.user_uid;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2a0d4229-d025-413d-8fd6-799084fbee0a",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Organization Organization.updateAvatar \"after all\" hook",
                    "timedOut": false,
                    "duration": 6,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "testCollection.organizationRemoveRecords({}, function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "590758be-50db-486d-8298-259a8c60ce2b",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Organization Organization.updateAvatar \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c93185c3-7eea-43cc-904a-6846b7d917bb",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Owner should update organization details.",
                    "fullTitle": "Enterprise Organization Organization.updateAvatar Owner should update organization details.",
                    "timedOut": false,
                    "duration": 57,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar body = {\n    'avatar': 'https://example.com/img1.png'\n};\nserver.agents[\"enterprise\"].s3.UploadAvatar = function(options, callback) {\n    callback(null, {\n        ETag: \"sdfdsf35s6dfsdfdsf6565656565655665\"\n    });\n};\nserver.agents[\"enterprise\"].s3.DownloadAvatar = function(options, callback) {\n    callback(null, body.avatar);\n};\napi.put(apiURL.replace(\":org_uid\", org_uid))\n    .send(body)\n    .set('authtoken', _data.owner.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var output = res.body.output || {};\n            (output.uid == org_uid &&\n                output.avatar == body.avatar).should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "17f992e2-3b0f-4424-b0dd-5c6b34caae5c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Owner should able to remove organization image.",
                    "fullTitle": "Enterprise Organization Organization.updateAvatar Owner should able to remove organization image.",
                    "timedOut": false,
                    "duration": 57,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar body = {\n    'avatar': null\n};\nserver.agents[\"enterprise\"].s3.UploadAvatar = function(options, callback) {\n    callback(null, {\n        ETag: \"sdfdsf35s6dfsdfdsf6565656565655665\"\n    });\n};\nserver.agents[\"enterprise\"].s3.DownloadAvatar = function(options, callback) {\n    callback(null, body.avatar);\n};\napi.put(apiURL.replace(\":org_uid\", org_uid))\n    .send(body)\n    .set('authtoken', _data.owner.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var output = res.body.output || {};\n            (output.uid == org_uid &&\n                output.avatar == body.avatar).should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1ad40f71-e7ae-4b06-bb3c-9d0c10a5bf85",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Admin should update organization details.",
                    "fullTitle": "Enterprise Organization Organization.updateAvatar Admin should update organization details.",
                    "timedOut": false,
                    "duration": 61,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar body = {\n    'avatar': 'https://example.com/img1.png'\n};\nserver.agents[\"enterprise\"].s3.UploadAvatar = function(options, callback) {\n    callback(null, {\n        ETag: \"sdfdsf35s6dfsdfdsf6565656565655665\"\n    });\n};\nserver.agents[\"enterprise\"].s3.DownloadAvatar = function(options, callback) {\n    callback(null, body.avatar);\n};\napi.put(apiURL.replace(\":org_uid\", org_uid))\n    .send(body)\n    .set('authtoken', _data.admin.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var output = res.body.output || {};\n            (output.uid == org_uid &&\n                output.avatar == body.avatar).should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "774d4c50-15e1-4e9f-b5e9-a20029a02d11",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Other roles should not update avatar.",
                    "fullTitle": "Enterprise Organization Organization.updateAvatar Other roles should not update avatar.",
                    "timedOut": false,
                    "duration": 30,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar body = {\n    'avatar': 'https://example.com/img1.png'\n};\nserver.agents[\"enterprise\"].s3.UploadAvatar = function(options, callback) {\n    callback(null, {\n        ETag: \"sdfdsf35s6dfsdfdsf6565656565655665\"\n    });\n};\nserver.agents[\"enterprise\"].s3.DownloadAvatar = function(options, callback) {\n    callback(null, body.avatar);\n};\napi.put(apiURL.replace(\":org_uid\", org_uid))\n    .send(body)\n    .set('authtoken', _data.developer.authtoken)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_NOT_ADMIN);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3f939606-2167-4447-8785-252a522a9d0c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Organization Organization.updateAvatar Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar body = {\n    'avatar': 'https://example.com/img1.png'\n};\nserver.agents[\"enterprise\"].s3.UploadAvatar = function(options, callback) {\n    callback(null, {\n        ETag: \"sdfdsf35s6dfsdfdsf6565656565655665\"\n    });\n};\nserver.agents[\"enterprise\"].s3.DownloadAvatar = function(options, callback) {\n    callback(null, body.avatar);\n};\napi.put(apiURL.replace(\":org_uid\", org_uid))\n    .send(body)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "64971373-535a-4a18-9282-1714d194057f",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "17f992e2-3b0f-4424-b0dd-5c6b34caae5c",
                  "1ad40f71-e7ae-4b06-bb3c-9d0c10a5bf85",
                  "774d4c50-15e1-4e9f-b5e9-a20029a02d11",
                  "3f939606-2167-4447-8785-252a522a9d0c",
                  "64971373-535a-4a18-9282-1714d194057f"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 212,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "4941ce01-3f38-4f48-bb82-b4ab2ef11d22",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\organization\\updateSSODetails.enterprise.js",
        "file": "\\controllers\\test\\organization\\updateSSODetails.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "68ac615a-846a-44b1-97f0-7a8024f61857",
            "title": "Organization",
            "fullFile": "D:\\api\\controllers\\test\\organization\\updateSSODetails.enterprise.js",
            "file": "\\controllers\\test\\organization\\updateSSODetails.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "05aa10a3-96a0-4e07-8239-7891c8319603",
                "title": "Organization.updateSSODetails",
                "fullFile": "D:\\api\\controllers\\test\\organization\\updateSSODetails.enterprise.js",
                "file": "\\controllers\\test\\organization\\updateSSODetails.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Organization Organization.updateSSODetails \"before each\" hook",
                    "timedOut": false,
                    "duration": 173,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        _data = data;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2a07d922-5926-46e4-acc7-9d05ac3f4f95",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Organization Organization.updateSSODetails \"after all\" hook",
                    "timedOut": false,
                    "duration": 6,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "testCollection.organizationRemoveRecords({}, function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "37ce2f41-7076-473a-a378-faea5a5acdc4",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Organization Organization.updateSSODetails \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0be63fb3-8c71-4eb3-80e9-4bb198c68621",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should update SSO Config details.",
                    "fullTitle": "Enterprise Organization Organization.updateSSODetails Should update SSO Config details.",
                    "timedOut": false,
                    "duration": 55,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar config = getImmutable(ssoConfig);\napi.put(apiURL.replace(\":org_uid\", org_uid))\n    .send(config)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.uid != \"\" &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\" &&\n                res.body.output.sso_details.entry_point == config.entry_point &&\n                res.body.output.sso_details.algo_type == config.algo_type &&\n                res.body.output.sso_details.session_time_out_hours == config.session_time_out_hours &&\n                res.body.output.sso_details.issuer == config.issuer\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9fac0992-7ed4-49f5-a649-5f89c3b3e23c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should validate SSO Config details.",
                    "fullTitle": "Enterprise Organization Organization.updateSSODetails Should validate SSO Config details.",
                    "timedOut": false,
                    "duration": 26,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar config = getImmutable(ssoConfig);\napi.put(apiURL.replace(\":org_uid\", org_uid))\n    .send({})\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.error.entry_point.message == messageList.ORG_SSO_ENTRY_POINT_REQUIRED &&\n                res.body.error.algo_type.message == messageList.ORG_SSO_ALGO_TYPE_REQUIRED &&\n                res.body.error.session_time_out_hours.message == messageList.ORG_SSO_SESSION_TIMEOUT_POSITIVE_REQUIRED;\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4c74b61b-58ec-47d3-ae31-f744ee94e8d1",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should update SSO Config details by admin.",
                    "fullTitle": "Enterprise Organization Organization.updateSSODetails Should update SSO Config details by admin.",
                    "timedOut": false,
                    "duration": 66,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar config = getImmutable(ssoConfig);\napi.put(apiURL.replace(\":org_uid\", org_uid))\n    .send(config)\n    .set('authtoken', _data.admin.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.uid != \"\" &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\" &&\n                res.body.output.sso_details.entry_point == config.entry_point &&\n                res.body.output.sso_details.algo_type == config.algo_type &&\n                res.body.output.sso_details.session_time_out_hours == config.session_time_out_hours\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ef96cda3-2b0f-4673-81bb-28501bb38e82",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not update SSO Config details by developer.",
                    "fullTitle": "Enterprise Organization Organization.updateSSODetails Should not update SSO Config details by developer.",
                    "timedOut": false,
                    "duration": 32,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar config = getImmutable(ssoConfig);\napi.put(apiURL.replace(\":org_uid\", org_uid))\n    .send(config)\n    .set('authtoken', _data.developer.authtoken)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_NOT_ADMIN);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "80f4b7f5-2c48-461c-a314-f1f88818425f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give organization not found error.",
                    "fullTitle": "Enterprise Organization Organization.updateSSODetails Should give organization not found error.",
                    "timedOut": false,
                    "duration": 22,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.put(apiURL.replace(\":org_uid\", \"FAKE_ORG\"))\n    .set('authtoken', authToken)\n    .send({})\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_NOT_FOUND);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ce4af660-a716-445c-8b09-8e29a6806cf2",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Organization Organization.updateSSODetails Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.put(apiURL.replace(\":org_uid\", \"FAKE_ORG\"))\n    .send({})\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "46a71d89-7d5f-4bc0-8f0b-cca066896516",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "9fac0992-7ed4-49f5-a649-5f89c3b3e23c",
                  "4c74b61b-58ec-47d3-ae31-f744ee94e8d1",
                  "ef96cda3-2b0f-4673-81bb-28501bb38e82",
                  "80f4b7f5-2c48-461c-a314-f1f88818425f",
                  "ce4af660-a716-445c-8b09-8e29a6806cf2",
                  "46a71d89-7d5f-4bc0-8f0b-cca066896516"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 209,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "56dfe0d9-0494-4489-a06a-3d730ddb196f",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\organization\\uploadCerts.enterprise.js",
        "file": "\\controllers\\test\\organization\\uploadCerts.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "85a8488f-895a-42c5-9525-7d35e0ed0fa9",
            "title": "Organization",
            "fullFile": "D:\\api\\controllers\\test\\organization\\uploadCerts.enterprise.js",
            "file": "\\controllers\\test\\organization\\uploadCerts.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "15393969-de31-4a4a-982f-eb38c7c4da0c",
                "title": "Organization.uploadCerts",
                "fullFile": "D:\\api\\controllers\\test\\organization\\uploadCerts.enterprise.js",
                "file": "\\controllers\\test\\organization\\uploadCerts.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Organization Organization.uploadCerts \"before each\" hook",
                    "timedOut": false,
                    "duration": 175,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        _data = data;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "32ffa082-f9f8-42bb-acba-d743f6cd9147",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Organization Organization.uploadCerts \"after all\" hook",
                    "timedOut": false,
                    "duration": 5,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "testCollection.organizationRemoveRecords({}, function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c5c00c5e-131d-4089-98aa-90fa63770a8a",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Organization Organization.uploadCerts \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6439eb12-fe52-4c79-b566-cdef648a5e05",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should upload SSO certs.",
                    "fullTitle": "Enterprise Organization Organization.uploadCerts Should upload SSO certs.",
                    "timedOut": false,
                    "duration": 67,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar publicKeyFile = __dirname + \"/../../../__cert/okta.cert\";\nvar privateKeyFile = __dirname + \"/../../../__cert/SP1.pem\";\napi.post(apiURL.replace(\":org_uid\", org_uid))\n    .set('authtoken', authToken)\n    .attach('signed_public_key', publicKeyFile)\n    .attach('enc_private_key', privateKeyFile)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.uid != \"\" &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\" &&\n                res.body.output.sso_details.signed_public_key != \"\" &&\n                res.body.output.sso_details.enc_private_key != \"\";\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2221ec5e-5c3b-47f8-9fb9-58465da8ec73",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should upload SSO certs by Admin.",
                    "fullTitle": "Enterprise Organization Organization.uploadCerts Should upload SSO certs by Admin.",
                    "timedOut": false,
                    "duration": 59,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar publicKeyFile = __dirname + \"/../../../__cert/okta.cert\";\nvar privateKeyFile = __dirname + \"/../../../__cert/SP1.pem\";\napi.post(apiURL.replace(\":org_uid\", org_uid))\n    .set('authtoken', _data.admin.authtoken)\n    .attach('signed_public_key', publicKeyFile)\n    .attach('enc_private_key', privateKeyFile)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.uid != \"\" &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\" &&\n                res.body.output.sso_details.signed_public_key != \"\" &&\n                res.body.output.sso_details.enc_private_key != \"\";\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "84815152-86da-4922-8bfc-b9a70aef60f4",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not upload SSO certs by Billing Manager.",
                    "fullTitle": "Enterprise Organization Organization.uploadCerts Should not upload SSO certs by Billing Manager.",
                    "timedOut": false,
                    "duration": 34,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar publicKeyFile = __dirname + \"/../../../__cert/okta.cert\";\nvar privateKeyFile = __dirname + \"/../../../__cert/SP1.pem\";\napi.post(apiURL.replace(\":org_uid\", org_uid))\n    .set('authtoken', _data.billing_manager.authtoken)\n    .attach('signed_public_key', publicKeyFile)\n    .attach('enc_private_key', privateKeyFile)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_NOT_ADMIN);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0f8c718d-46a2-4976-8ae7-e95263307eff",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not upload SSO certs by Developer.",
                    "fullTitle": "Enterprise Organization Organization.uploadCerts Should not upload SSO certs by Developer.",
                    "timedOut": false,
                    "duration": 30,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar publicKeyFile = __dirname + \"/../../../__cert/okta.cert\";\nvar privateKeyFile = __dirname + \"/../../../__cert/SP1.pem\";\napi.post(apiURL.replace(\":org_uid\", org_uid))\n    .set('authtoken', _data.developer.authtoken)\n    .attach('signed_public_key', publicKeyFile)\n    .attach('enc_private_key', privateKeyFile)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_NOT_ADMIN);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "649cbb26-c87d-480d-b09f-8947b10e53a9",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should upload only public key.",
                    "fullTitle": "Enterprise Organization Organization.uploadCerts Should upload only public key.",
                    "timedOut": false,
                    "duration": 71,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar publicKeyFile = __dirname + \"/../../../__cert/okta.cert\";\nvar privateKeyFile = __dirname + \"/../../../__cert/SP1.pem\";\napi.post(apiURL.replace(\":org_uid\", org_uid))\n    .set('authtoken', authToken)\n    .attach('signed_public_key', publicKeyFile)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.uid != \"\" &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\" &&\n                res.body.output.sso_details.signed_public_key != \"\";\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c3cd8d87-816f-4366-9f86-11380870d0fe",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should upload only private certificate.",
                    "fullTitle": "Enterprise Organization Organization.uploadCerts Should upload only private certificate.",
                    "timedOut": false,
                    "duration": 64,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar publicKeyFile = __dirname + \"/../../../__cert/okta.cert\";\nvar privateKeyFile = __dirname + \"/../../../__cert/SP1.pem\";\napi.post(apiURL.replace(\":org_uid\", org_uid))\n    .set('authtoken', authToken)\n    .attach('enc_private_key', privateKeyFile)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.uid != \"\" &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\" &&\n                res.body.output.sso_details.enc_private_key != \"\";\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ab871f71-6d75-4e63-8ed5-bc5d2e6bbe96",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should gives invalid public key file type error.",
                    "fullTitle": "Enterprise Organization Organization.uploadCerts Should gives invalid public key file type error.",
                    "timedOut": false,
                    "duration": 27,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar publicKeyFile = __dirname + \"/../../../__cert/okta.cert\";\nvar privateKeyFile = __dirname + \"/../../../__cert/SP1.pem\";\napi.post(apiURL.replace(\":org_uid\", org_uid))\n    .set('authtoken', authToken)\n    .attach('signed_public_key', privateKeyFile)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.error.signed_public_key.message == messageList.ORG_SSO_PUBLIC_CERT_FILE_TYPE_ERROR;\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "85a1496e-c22e-4259-9d1e-7d47fc86cb05",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should gives invalid private cert file type error.",
                    "fullTitle": "Enterprise Organization Organization.uploadCerts Should gives invalid private cert file type error.",
                    "timedOut": false,
                    "duration": 31,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar publicKeyFile = __dirname + \"/../../../__cert/okta.cert\";\nvar privateKeyFile = __dirname + \"/../../../__cert/SP1.pem\";\napi.post(apiURL.replace(\":org_uid\", org_uid))\n    .set('authtoken', authToken)\n    .attach('enc_private_key', publicKeyFile)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.error.enc_private_key.message == messageList.ORG_SSO_PRIVATE_KEY_FILE_TYPE_ERROR;\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c913677a-cfd6-44a0-9727-fe15c83e1c72",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should gives invalid file type errors for both files.",
                    "fullTitle": "Enterprise Organization Organization.uploadCerts Should gives invalid file type errors for both files.",
                    "timedOut": false,
                    "duration": 29,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar publicKeyFile = __dirname + \"/../../../__cert/okta.cert\";\nvar privateKeyFile = __dirname + \"/../../../__cert/SP1.pem\";\napi.post(apiURL.replace(\":org_uid\", org_uid))\n    .set('authtoken', authToken)\n    .attach('signed_public_key', privateKeyFile)\n    .attach('enc_private_key', publicKeyFile)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.error.signed_public_key.message == messageList.ORG_SSO_PUBLIC_CERT_FILE_TYPE_ERROR &&\n                res.body.error.enc_private_key.message == messageList.ORG_SSO_PRIVATE_KEY_FILE_TYPE_ERROR;\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7a41b0a9-3366-4b80-9f0b-58063b51305b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Organization Organization.uploadCerts Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL.replace(\":org_uid\", org_uid))\n    .send({})\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a63d56ed-01de-4cfa-8da0-56c70cf2cd52",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "2221ec5e-5c3b-47f8-9fb9-58465da8ec73",
                  "84815152-86da-4922-8bfc-b9a70aef60f4",
                  "0f8c718d-46a2-4976-8ae7-e95263307eff",
                  "649cbb26-c87d-480d-b09f-8947b10e53a9",
                  "c3cd8d87-816f-4366-9f86-11380870d0fe",
                  "ab871f71-6d75-4e63-8ed5-bc5d2e6bbe96",
                  "85a1496e-c22e-4259-9d1e-7d47fc86cb05",
                  "c913677a-cfd6-44a0-9727-fe15c83e1c72",
                  "7a41b0a9-3366-4b80-9f0b-58063b51305b",
                  "a63d56ed-01de-4cfa-8da0-56c70cf2cd52"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 420,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "86bd24c7-8913-418d-b27e-6b35e4fc9018",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\organizationRole\\create.enterprise.js",
        "file": "\\controllers\\test\\organizationRole\\create.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "70578556-dbf2-445e-8c8e-a4d7285360c2",
            "title": "Organization",
            "fullFile": "D:\\api\\controllers\\test\\organizationRole\\create.enterprise.js",
            "file": "\\controllers\\test\\organizationRole\\create.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "dfd10043-0e64-4b63-836e-0bd98ee73811",
                "title": "OrganizationRole.create",
                "fullFile": "D:\\api\\controllers\\test\\organizationRole\\create.enterprise.js",
                "file": "\\controllers\\test\\organizationRole\\create.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Organization OrganizationRole.create \"before each\" hook",
                    "timedOut": false,
                    "duration": 181,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        _data = data;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "da2384af-d086-4f21-a4e6-53a287dedcd6",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Organization OrganizationRole.create \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ad335df9-8e6c-47fd-9065-37064da9dd19",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should create organization role.",
                    "fullTitle": "Enterprise Organization OrganizationRole.create Should create organization role.",
                    "timedOut": false,
                    "duration": 57,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar role = getImmutable(roleBody);\nrole.name = \"role5\";\nrole.projects = [_data.org_projects[0].uid, _data.org_projects[1].uid];\napi.post(apiURL.replace(\":org_uid\", org_uid))\n    .send(role)\n    .set('authtoken', authToken)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.uid.should.not.equal(\"\");\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1711318d-b439-48c8-a786-7685e15ff654",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give organization not found error.",
                    "fullTitle": "Enterprise Organization OrganizationRole.create Should give organization not found error.",
                    "timedOut": false,
                    "duration": 19,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar role = getImmutable(roleBody);\nrole.name = \"role5\";\nrole.projects = [_data.org_projects[0].uid, _data.org_projects[1].uid];\napi.post(apiURL.replace(\":org_uid\", \"FAKE_ORG\"))\n    .send(role)\n    .set('authtoken', authToken)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_NOT_FOUND);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "73165b34-f31c-48ae-b7d1-bab6198f44b3",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should validate organization role body.",
                    "fullTitle": "Enterprise Organization OrganizationRole.create Should validate organization role body.",
                    "timedOut": false,
                    "duration": 24,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL.replace(\":org_uid\", org_uid))\n    .send({})\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            (res.body.error.name.message == messageList.ORG_ROLE_NAME_REQUIRED &&\n                res.body.error.projects.message == messageList.ORG_PROJECT_SET_REQUIRED).should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d3a5ed64-8767-490f-aa5d-b781900b14ff",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not allow to create organization role with duplicate name.",
                    "fullTitle": "Enterprise Organization OrganizationRole.create Should not allow to create organization role with duplicate name.",
                    "timedOut": false,
                    "duration": 77,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar role = getImmutable(roleBody);\nrole.name = \"role5\";\nrole.projects = [_data.org_projects[0].uid, _data.org_projects[1].uid];\napi.post(apiURL.replace(\":org_uid\", org_uid))\n    .send(role)\n    .set('authtoken', authToken)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            api.post(apiURL.replace(\":org_uid\", org_uid))\n                .send(role)\n                .set('authtoken', authToken)\n                .expect(httpStatus.BAD_REQUEST)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        res.body.error.message.should.equal(messageList.ORG_DUPLICATE_ROLE_NAME);\n                        done();\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bba7b707-7416-4c45-9ea0-15f0750c194d",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not allow to create organization role to user of other role.",
                    "fullTitle": "Enterprise Organization OrganizationRole.create Should not allow to create organization role to user of other role.",
                    "timedOut": false,
                    "duration": 29,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar role = getImmutable(roleBody);\nrole.name = \"role3\";\nrole.projects = [_data.org_projects[0].uid];\napi.post(apiURL.replace(\":org_uid\", org_uid))\n    .send(role)\n    .set('authtoken', _data.role1.authtoken)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_NOT_ADMIN);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4f48b532-d49f-4565-b97e-debc2fd1b5a9",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Organization OrganizationRole.create Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar role = getImmutable(roleBody);\nrole.name = \"role3\";\napi.post(apiURL)\n    .send(role)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a3ebe9c1-1c8c-42cb-aaab-d314b0d8410e",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "1711318d-b439-48c8-a786-7685e15ff654",
                  "73165b34-f31c-48ae-b7d1-bab6198f44b3",
                  "d3a5ed64-8767-490f-aa5d-b781900b14ff",
                  "bba7b707-7416-4c45-9ea0-15f0750c194d",
                  "4f48b532-d49f-4565-b97e-debc2fd1b5a9",
                  "a3ebe9c1-1c8c-42cb-aaab-d314b0d8410e"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 214,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "493f867e-52ad-48b2-8f95-894fd1751e31",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\organizationRole\\delete.enterprise.js",
        "file": "\\controllers\\test\\organizationRole\\delete.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "29552209-072c-4db3-b347-1227a660bde9",
            "title": "Organization",
            "fullFile": "D:\\api\\controllers\\test\\organizationRole\\delete.enterprise.js",
            "file": "\\controllers\\test\\organizationRole\\delete.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "0c89521f-3bfd-4b35-ad7d-434d56258f09",
                "title": "OrganizationRole.deleteRole",
                "fullFile": "D:\\api\\controllers\\test\\organizationRole\\delete.enterprise.js",
                "file": "\\controllers\\test\\organizationRole\\delete.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Organization OrganizationRole.deleteRole \"before each\" hook",
                    "timedOut": false,
                    "duration": 176,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        _data = data;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a4569462-173d-4026-a9e1-64d6d8dbed02",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Organization OrganizationRole.deleteRole \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2d72afc6-991e-4e05-a091-910ec73b0e60",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should delete organization role.",
                    "fullTitle": "Enterprise Organization OrganizationRole.deleteRole Should delete organization role.",
                    "timedOut": false,
                    "duration": 42,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar org_role_uid = _data.roles[\"role3\"].uid;\napi.delete(apiURL.replace(\":org_uid\", org_uid).replace(\":org_role_uid\", org_role_uid))\n    .send({})\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.message.should.equal(messageList.ORG_ROLE_DELETED_SUCCESS);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "680b85de-5755-4224-afab-ddcf713c84b7",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give organization not found error.",
                    "fullTitle": "Enterprise Organization OrganizationRole.deleteRole Should give organization not found error.",
                    "timedOut": false,
                    "duration": 19,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar org_role_uid = _data.roles[\"role1\"].uid;\napi.delete(apiURL.replace(\":org_uid\", \"FAKE_ORG\").replace(\":org_role_uid\", org_role_uid))\n    .send({})\n    .set('authtoken', authToken)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_NOT_FOUND);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fea4c3fe-b096-4e5e-9dd5-d1410d6506a2",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not delete Admin role.",
                    "fullTitle": "Enterprise Organization OrganizationRole.deleteRole Should not delete Admin role.",
                    "timedOut": false,
                    "duration": 26,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar org_role_uid = _data.roles[\"Admin\"].uid;\napi.delete(apiURL.replace(\":org_uid\", org_uid).replace(\":org_role_uid\", org_role_uid))\n    .send({})\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_DEFAULT_ROLE_CANNOT_DELETE);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4ba0ade6-2279-4a3e-b4ee-af82a1b1c62d",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not delete Billing Manager role.",
                    "fullTitle": "Enterprise Organization OrganizationRole.deleteRole Should not delete Billing Manager role.",
                    "timedOut": false,
                    "duration": 31,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar org_role_uid = _data.roles[\"Billing Manager\"].uid;\napi.delete(apiURL.replace(\":org_uid\", org_uid).replace(\":org_role_uid\", org_role_uid))\n    .send({})\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_DEFAULT_ROLE_CANNOT_DELETE);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fba0b022-3a33-4669-be10-703342d3098c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not delete Developer role.",
                    "fullTitle": "Enterprise Organization OrganizationRole.deleteRole Should not delete Developer role.",
                    "timedOut": false,
                    "duration": 30,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar org_role_uid = _data.roles[\"Developer\"].uid;\napi.delete(apiURL.replace(\":org_uid\", org_uid).replace(\":org_role_uid\", org_role_uid))\n    .send({})\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_DEFAULT_ROLE_CANNOT_DELETE);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9b3ed49a-658b-42ec-a522-414d257982b1",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not delete role if it is used.",
                    "fullTitle": "Enterprise Organization OrganizationRole.deleteRole Should not delete role if it is used.",
                    "timedOut": false,
                    "duration": 77,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.OrganizationUser.findOne({\n    user_uid: _data.developer.uid\n}).lean().exec(function(error, orgUser) {\n    api.put(\"/enterprise/v1/organizations/:org_uid/users/:org_user_uid/roles\".replace(\":org_uid\", org_uid).replace(\":org_user_uid\", orgUser.uid))\n        .send({\n            org_roles: [_data.roles[\"role3\"].uid]\n        })\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                api.delete(apiURL.replace(\":org_uid\", org_uid).replace(\":org_role_uid\", _data.roles[\"role3\"].uid))\n                    .set('authtoken', authToken)\n                    .expect(httpStatus.BAD_REQUEST)\n                    .end(function(err, res) {\n                        res.body.error.message.should.equal(messageList.ORG_ASSIGNED_ROLE_DELETE_ERROR);\n                        done();\n                    });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7db858fb-9760-4a85-b849-af294081869c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should delete role if it is unused.",
                    "fullTitle": "Enterprise Organization OrganizationRole.deleteRole Should delete role if it is unused.",
                    "timedOut": false,
                    "duration": 178,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.OrganizationUser.findOne({\n    user_uid: _data.developer.uid\n}).lean().exec(function(error, orgUser) {\n    api.put(\"/enterprise/v1/organizations/:org_uid/users/:org_user_uid/roles\".replace(\":org_uid\", org_uid).replace(\":org_user_uid\", orgUser.uid))\n        .send({\n            org_roles: [_data.roles[\"role3\"].uid]\n        })\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                api.delete(apiURL.replace(\":org_uid\", org_uid).replace(\":org_role_uid\", _data.roles[\"role3\"].uid))\n                    .set('authtoken', authToken)\n                    .expect(httpStatus.BAD_REQUEST)\n                    .end(function(err, res) {\n                        if (res.body.error.message == messageList.ORG_ASSIGNED_ROLE_DELETE_ERROR) {\n                            api.put(\"/enterprise/v1/organizations/:org_uid/users/:org_user_uid/roles\".replace(\":org_uid\", org_uid).replace(\":org_user_uid\", orgUser.uid))\n                                .send({\n                                    org_roles: []\n                                })\n                                .set('authtoken', authToken)\n                                .expect(httpStatus.OK)\n                                .end(function(err, res) {\n                                    if (err) {\n                                        done(err);\n                                    } else {\n                                        api.delete(apiURL.replace(\":org_uid\", org_uid).replace(\":org_role_uid\", _data.roles[\"role3\"].uid))\n                                            .send({})\n                                            .set('authtoken', authToken)\n                                            .expect(httpStatus.OK)\n                                            .end(function(err, res) {\n                                                if (err) {\n                                                    done(err);\n                                                } else {\n                                                    res.body.output.message.should.equal(messageList.ORG_ROLE_DELETED_SUCCESS);\n                                                    done();\n                                                }\n                                            });\n                                    }\n                                });\n                        } else {\n                            true.should.equal(false);\n                            done();\n                        }\n                    });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7e032041-f3dc-43d2-bcfb-8f996b155ee5",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should delete role if used user is removed.",
                    "fullTitle": "Enterprise Organization OrganizationRole.deleteRole Should delete role if used user is removed.",
                    "timedOut": false,
                    "duration": 178,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.OrganizationUser.findOne({\n    user_uid: _data.developer.uid\n}).lean().exec(function(error, orgUser) {\n    api.put(\"/enterprise/v1/organizations/:org_uid/users/:org_user_uid/roles\".replace(\":org_uid\", org_uid).replace(\":org_user_uid\", orgUser.uid))\n        .send({\n            org_roles: [_data.roles[\"role3\"].uid]\n        })\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                api.delete(apiURL.replace(\":org_uid\", org_uid).replace(\":org_role_uid\", _data.roles[\"role3\"].uid))\n                    .set('authtoken', authToken)\n                    .expect(httpStatus.BAD_REQUEST)\n                    .end(function(err, res) {\n                        if (res.body.error.message == messageList.ORG_ASSIGNED_ROLE_DELETE_ERROR) {\n                            api.delete(\"/enterprise/v1/organizations/:org_uid/users/:org_user_uid\".replace(\":org_uid\", org_uid).replace(\":org_user_uid\", orgUser.uid))\n                                .send({})\n                                .set('authtoken', authToken)\n                                .expect(httpStatus.OK)\n                                .end(function(err, res) {\n                                    if (err) {\n                                        done(err);\n                                    } else {\n                                        api.delete(apiURL.replace(\":org_uid\", org_uid).replace(\":org_role_uid\", _data.roles[\"role3\"].uid))\n                                            .send({})\n                                            .set('authtoken', authToken)\n                                            .expect(httpStatus.OK)\n                                            .end(function(err, res) {\n                                                if (err) {\n                                                    done(err);\n                                                } else {\n                                                    res.body.output.message.should.equal(messageList.ORG_ROLE_DELETED_SUCCESS);\n                                                    done();\n                                                }\n                                            });\n                                    }\n                                });\n                        } else {\n                            true.should.equal(false);\n                            done();\n                        }\n                    });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bc2e1702-15c4-4be7-9b93-c2c6e83abd16",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not allow to delete organization role to user of other role.",
                    "fullTitle": "Enterprise Organization OrganizationRole.deleteRole Should not allow to delete organization role to user of other role.",
                    "timedOut": false,
                    "duration": 26,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar org_role_uid = _data.roles[\"role1\"].uid;\napi.delete(apiURL.replace(\":org_uid\", org_uid).replace(\":org_role_uid\", org_role_uid))\n    .set('authtoken', _data.developer.authtoken)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_NOT_ADMIN);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2245cc0e-04c3-45a9-a4a2-21016303b2ea",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Organization OrganizationRole.deleteRole Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar org_role_uid = _data.roles[\"role1\"].uid;\napi.delete(apiURL.replace(\":org_uid\", org_uid).replace(\":org_role_uid\", org_role_uid))\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2391942d-5c22-4762-aea1-50e395b7ba09",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "680b85de-5755-4224-afab-ddcf713c84b7",
                  "fea4c3fe-b096-4e5e-9dd5-d1410d6506a2",
                  "4ba0ade6-2279-4a3e-b4ee-af82a1b1c62d",
                  "fba0b022-3a33-4669-be10-703342d3098c",
                  "9b3ed49a-658b-42ec-a522-414d257982b1",
                  "7db858fb-9760-4a85-b849-af294081869c",
                  "7e032041-f3dc-43d2-bcfb-8f996b155ee5",
                  "bc2e1702-15c4-4be7-9b93-c2c6e83abd16",
                  "2245cc0e-04c3-45a9-a4a2-21016303b2ea",
                  "2391942d-5c22-4762-aea1-50e395b7ba09"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 615,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "caeab19c-a716-4764-9699-f2639252a9d6",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\organizationRole\\list.enterprise.js",
        "file": "\\controllers\\test\\organizationRole\\list.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "99bd569d-8b9f-4bc7-bdcd-d6bbef2ef812",
            "title": "Organization",
            "fullFile": "D:\\api\\controllers\\test\\organizationRole\\list.enterprise.js",
            "file": "\\controllers\\test\\organizationRole\\list.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "771e61c7-9c25-4c2d-81c0-e70433529c8a",
                "title": "OrganizationRole.list",
                "fullFile": "D:\\api\\controllers\\test\\organizationRole\\list.enterprise.js",
                "file": "\\controllers\\test\\organizationRole\\list.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Organization OrganizationRole.list \"before each\" hook",
                    "timedOut": false,
                    "duration": 164,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        _data = data;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4434e8ea-6853-4ee8-b4d9-1b2f25adbcb4",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Organization OrganizationRole.list \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3dcdd4de-3c64-482a-875b-a3feb21ed217",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should list organization roles.",
                    "fullTitle": "Enterprise Organization OrganizationRole.list Should list organization roles.",
                    "timedOut": false,
                    "duration": 32,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL.replace(\":org_uid\", org_uid))\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (Array.isArray(res.body.output.objects)) {\n                isValid = res.body.output.count != 0 &&\n                    res.body.output.objects.length > 0;\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\";\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6d544b86-2759-4672-935f-f81604fff069",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give organization not found error.",
                    "fullTitle": "Enterprise Organization OrganizationRole.list Should give organization not found error.",
                    "timedOut": false,
                    "duration": 19,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL.replace(\":org_uid\", \"FAKE_ORG\"))\n    .set('authtoken', authToken)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_NOT_FOUND);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2e2fae89-bb3c-44b7-b81c-c13b17659d9c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should sort organization roles.",
                    "fullTitle": "Enterprise Organization OrganizationRole.list Should sort organization roles.",
                    "timedOut": false,
                    "duration": 29,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar orgGetUrl = apiURL.replace(\":org_uid\", org_uid) +\n    \"?skip=2&limit=2&field=name&direction=desc\";\napi.get(orgGetUrl)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (Array.isArray(res.body.output.objects)) {\n                isValid = res.body.output.count != 0 &&\n                    res.body.output.objects.length == 2;\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\";\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5ee9fc35-98b0-4122-b61d-a45a5588dc1c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should list of two organization roles.",
                    "fullTitle": "Enterprise Organization OrganizationRole.list Should list of two organization roles.",
                    "timedOut": false,
                    "duration": 30,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var orgGetUrl = apiURL.replace(\":org_uid\", org_uid) +\n    \"?skip=2&limit=2\";\napi.get(orgGetUrl)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (Array.isArray(res.body.output.objects)) {\n                isValid = res.body.output.count != 0 &&\n                    res.body.output.objects.length == 2;\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\";\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "35d34060-c43d-4b1f-86fd-e86d4c3d48ca",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should list of filter roles.",
                    "fullTitle": "Enterprise Organization OrganizationRole.list Should list of filter roles.",
                    "timedOut": false,
                    "duration": 30,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar orgGetUrl = apiURL.replace(\":org_uid\", org_uid) +\n    \"?query=role1\";\napi.get(orgGetUrl)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (Array.isArray(res.body.output.objects)) {\n                isValid = res.body.output.count != 0 &&\n                    res.body.output.objects.length == 1;\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\";\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cd01779c-eac4-485a-b49a-afe89c445f12",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give admin role required error.",
                    "fullTitle": "Enterprise Organization OrganizationRole.list Should give admin role required error.",
                    "timedOut": false,
                    "duration": 28,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL.replace(\":org_uid\", org_uid))\n    .set('authtoken', _data.role1.authtoken)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_NOT_ADMIN);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a9f4d4fe-0481-4fb4-8735-dbd25af26ca8",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Organization OrganizationRole.list Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL.replace(\":org_uid\", org_uid))\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "265308eb-711f-40a0-b8eb-c43925221438",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "6d544b86-2759-4672-935f-f81604fff069",
                  "2e2fae89-bb3c-44b7-b81c-c13b17659d9c",
                  "5ee9fc35-98b0-4122-b61d-a45a5588dc1c",
                  "35d34060-c43d-4b1f-86fd-e86d4c3d48ca",
                  "cd01779c-eac4-485a-b49a-afe89c445f12",
                  "a9f4d4fe-0481-4fb4-8735-dbd25af26ca8",
                  "265308eb-711f-40a0-b8eb-c43925221438"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 180,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "c61d87cf-cd0a-4014-8275-354b24e2426a",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\organizationRole\\update.enterprise.js",
        "file": "\\controllers\\test\\organizationRole\\update.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "59b5fa56-a3f7-4c9c-bc2f-6f805c7a9e15",
            "title": "Organization",
            "fullFile": "D:\\api\\controllers\\test\\organizationRole\\update.enterprise.js",
            "file": "\\controllers\\test\\organizationRole\\update.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "9f594085-2b28-42b9-b6bb-b49b8114105b",
                "title": "OrganizationRole.update",
                "fullFile": "D:\\api\\controllers\\test\\organizationRole\\update.enterprise.js",
                "file": "\\controllers\\test\\organizationRole\\update.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Organization OrganizationRole.update \"before each\" hook",
                    "timedOut": false,
                    "duration": 168,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        _data = data;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "de288188-1ebe-4f58-bd1c-a40da79b6874",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Organization OrganizationRole.update \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6a25f7b4-8d01-4b3b-86b4-2c5efe249fbb",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should update organization role.",
                    "fullTitle": "Enterprise Organization OrganizationRole.update Should update organization role.",
                    "timedOut": false,
                    "duration": 52,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar role = getImmutable(roleBody);\nrole.name = \"org2\";\nrole.projects = [_data.org_projects[0].uid];\nvar org_role_uid = _data.roles[\"role2\"].uid;\napi.put(apiURL.replace(\":org_uid\", org_uid).replace(\":org_role_uid\", org_role_uid))\n    .send(role)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            (res.body.output.uid != \"\" &&\n                res.body.output.name == role.name &&\n                res.body.output.projects.length == 1 &&\n                res.body.output.projects[0] == _data.org_projects[0].uid).should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "da5ff329-1587-4ffe-a9f5-908780e80485",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give role not found error.",
                    "fullTitle": "Enterprise Organization OrganizationRole.update Should give role not found error.",
                    "timedOut": false,
                    "duration": 30,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar role = getImmutable(roleBody);\nrole.name = \"org2\";\nrole.projects = [_data.org_projects[0].uid];\nvar org_role_uid = _data.roles[\"role2\"].uid;\napi.put(apiURL.replace(\":org_uid\", org_uid).replace(\":org_role_uid\", \"FAKE_ROLE\"))\n    .send(role)\n    .set('authtoken', authToken)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_ROLE_NOT_FOUND);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d90c3ba5-1174-4484-a52a-8ed895d5c428",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not update Admin role.",
                    "fullTitle": "Enterprise Organization OrganizationRole.update Should not update Admin role.",
                    "timedOut": false,
                    "duration": 32,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar role = getImmutable(roleBody);\nrole.name = \"org2\";\nrole.projects = [_data.org_projects[0].uid];\nvar org_role_uid = _data.roles[\"Admin\"].uid;\napi.put(apiURL.replace(\":org_uid\", org_uid).replace(\":org_role_uid\", org_role_uid))\n    .send(role)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_DEFAULT_ROLE_CANNOT_MODIFY);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "141a8753-4262-4bae-a5e6-d129644df23b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not update Billing Manager role.",
                    "fullTitle": "Enterprise Organization OrganizationRole.update Should not update Billing Manager role.",
                    "timedOut": false,
                    "duration": 30,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar role = getImmutable(roleBody);\nrole.name = \"org2\";\nrole.projects = [_data.org_projects[0].uid];\nvar org_role_uid = _data.roles[\"Billing Manager\"].uid;\napi.put(apiURL.replace(\":org_uid\", org_uid).replace(\":org_role_uid\", org_role_uid))\n    .send(role)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_DEFAULT_ROLE_CANNOT_MODIFY);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "692a7508-d85b-4609-ab05-b0d0bc068b00",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not update Developer role.",
                    "fullTitle": "Enterprise Organization OrganizationRole.update Should not update Developer role.",
                    "timedOut": false,
                    "duration": 30,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar role = getImmutable(roleBody);\nrole.name = \"org2\";\nrole.projects = [_data.org_projects[0].uid];\nvar org_role_uid = _data.roles[\"Developer\"].uid;\napi.put(apiURL.replace(\":org_uid\", org_uid).replace(\":org_role_uid\", org_role_uid))\n    .send(role)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_DEFAULT_ROLE_CANNOT_MODIFY);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "aaa63281-c329-4fe1-800d-67a4c4164ed1",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give organization not found error.",
                    "fullTitle": "Enterprise Organization OrganizationRole.update Should give organization not found error.",
                    "timedOut": false,
                    "duration": 20,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar role = getImmutable(roleBody);\nrole.name = \"org2\";\nrole.projects = [_data.org_projects[0].uid];\nvar org_role_uid = _data.roles[\"role2\"].uid;\napi.put(apiURL.replace(\":org_uid\", \"FAKE_ORG\").replace(\":org_role_uid\", org_role_uid))\n    .send(role)\n    .set('authtoken', authToken)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_NOT_FOUND);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "acd7868e-51ed-488f-99ce-71cd9b63bbda",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should validate organization role body.",
                    "fullTitle": "Enterprise Organization OrganizationRole.update Should validate organization role body.",
                    "timedOut": false,
                    "duration": 36,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar org_role_uid = _data.roles[\"role2\"].uid;\napi.put(apiURL.replace(\":org_uid\", org_uid).replace(\":org_role_uid\", org_role_uid))\n    .send({})\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            (res.body.error.name.message == messageList.ORG_ROLE_NAME_REQUIRED &&\n                res.body.error.projects.message == messageList.ORG_PROJECT_SET_REQUIRED).should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c427baf8-2e5d-4e5c-a9f5-0cadff2070ce",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should update organization projects.",
                    "fullTitle": "Enterprise Organization OrganizationRole.update Should update organization projects.",
                    "timedOut": false,
                    "duration": 41,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar role = getImmutable(roleBody);\nrole.name = \"role2\";\nrole.projects = [_data.org_projects[0].uid];\nvar org_role_uid = _data.roles[\"role2\"].uid;\napi.put(apiURL.replace(\":org_uid\", org_uid).replace(\":org_role_uid\", org_role_uid))\n    .send(role)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            (res.body.output.uid != \"\" &&\n                res.body.output.name == role.name &&\n                res.body.output.projects.length == 1 &&\n                res.body.output.projects[0] == _data.org_projects[0].uid).should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bb538c93-a92d-4bb9-ab35-b6aa0e93b8ff",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not allow to update organization role to user of other role.",
                    "fullTitle": "Enterprise Organization OrganizationRole.update Should not allow to update organization role to user of other role.",
                    "timedOut": false,
                    "duration": 29,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar role = getImmutable(roleBody);\nvar org_role_uid = _data.roles[\"role1\"].uid;\napi.put(apiURL.replace(\":org_uid\", org_uid).replace(\":org_role_uid\", org_role_uid))\n    .send(role)\n    .set('authtoken', _data.role1.authtoken)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_NOT_ADMIN);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c1e45186-f66c-46f2-a965-573859e30c0e",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Organization OrganizationRole.update Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar role = getImmutable(roleBody);\nvar org_role_uid = _data.roles[\"role1\"].uid;\napi.put(apiURL.replace(\":org_uid\", org_uid).replace(\":org_role_uid\", org_role_uid))\n    .send(role)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "98bdd3c2-75da-4a98-b1b3-a80b6282ff6d",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "da5ff329-1587-4ffe-a9f5-908780e80485",
                  "d90c3ba5-1174-4484-a52a-8ed895d5c428",
                  "141a8753-4262-4bae-a5e6-d129644df23b",
                  "692a7508-d85b-4609-ab05-b0d0bc068b00",
                  "aaa63281-c329-4fe1-800d-67a4c4164ed1",
                  "acd7868e-51ed-488f-99ce-71cd9b63bbda",
                  "c427baf8-2e5d-4e5c-a9f5-0cadff2070ce",
                  "bb538c93-a92d-4bb9-ab35-b6aa0e93b8ff",
                  "c1e45186-f66c-46f2-a965-573859e30c0e",
                  "98bdd3c2-75da-4a98-b1b3-a80b6282ff6d"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 308,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "44631729-944b-499c-918c-b68da50cd375",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\organizationUser\\assignedRoles.enterprise.js",
        "file": "\\controllers\\test\\organizationUser\\assignedRoles.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "2a43ad45-c7fd-4d99-b00d-71d961e92bd5",
            "title": "Organization",
            "fullFile": "D:\\api\\controllers\\test\\organizationUser\\assignedRoles.enterprise.js",
            "file": "\\controllers\\test\\organizationUser\\assignedRoles.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "5844b746-f5ba-42a1-bc65-98decdd7c580",
                "title": "OrganizationUser.assignedRoles",
                "fullFile": "D:\\api\\controllers\\test\\organizationUser\\assignedRoles.enterprise.js",
                "file": "\\controllers\\test\\organizationUser\\assignedRoles.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Organization OrganizationUser.assignedRoles \"before each\" hook",
                    "timedOut": false,
                    "duration": 197,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        _data = data;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "abb49c75-adf9-47cc-ad1a-fa583621a4cd",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Organization OrganizationUser.assignedRoles \"after each\" hook",
                    "timedOut": false,
                    "duration": 1,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "beb43bc2-fe2d-46d5-b380-361dc23976b0",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should assigned default project while assigning billing manger role.",
                    "fullTitle": "Enterprise Organization OrganizationUser.assignedRoles Should assigned default project while assigning billing manger role.",
                    "timedOut": false,
                    "duration": 42,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.OrganizationUser.findOne({\n    user_uid: _data.developer.uid\n}).lean().exec(function(error, orgUser) {\n    api.put(apiURL.replace(\":org_uid\", org_uid).replace(\":org_user_uid\", orgUser.uid))\n        .send({\n            org_roles: [_data.roles[\"Billing Manager\"].uid]\n        })\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                (res.body.output.roles[0].name == \"Billing Manager\").should.equal(true);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "51d64c2c-1aac-484f-945a-34fcca17d5de",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should assigned new role to organization user.",
                    "fullTitle": "Enterprise Organization OrganizationUser.assignedRoles Should assigned new role to organization user.",
                    "timedOut": false,
                    "duration": 38,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.OrganizationUser.findOne({\n    user_uid: _data.developer.uid\n}).lean().exec(function(error, orgUser) {\n    api.put(apiURL.replace(\":org_uid\", org_uid).replace(\":org_user_uid\", orgUser.uid))\n        .send({\n            org_roles: [_data.roles[\"role1\"].uid]\n        })\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                res.body.output.roles[0].name.should.equal(\"role1\");\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c0e725a1-cc5d-46f1-bb07-4bf970c03691",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should update allowed project list of user, if assigned roles changed.",
                    "fullTitle": "Enterprise Organization OrganizationUser.assignedRoles Should update allowed project list of user, if assigned roles changed.",
                    "timedOut": false,
                    "duration": 89,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.OrganizationUser.findOne({\n    user_uid: _data.developer.uid\n}).lean().exec(function(error, orgUser) {\n    api.put(apiURL.replace(\":org_uid\", org_uid).replace(\":org_user_uid\", orgUser.uid))\n        .send({\n            org_roles: [_data.roles[\"role3\"].uid]\n        })\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                api.get(\"/enterprise/v1/projects\")\n                    .set('authtoken', _data.developer.authtoken)\n                    .set('org_uid', org_uid)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        (res.body.output.projects || res.body.output.objects).length.should.equal(2);\n                        done();\n                    });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e585e55f-4dd2-4fc7-afe3-abaaead94251",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Organization OrganizationUser.assignedRoles Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.OrganizationUser.findOne({\n    user_uid: _data.developer.uid\n}).lean().exec(function(error, orgUser) {\n    api.put(apiURL.replace(\":org_uid\", org_uid).replace(\":org_user_uid\", orgUser.uid))\n        .send({\n            org_roles: [_data.roles[\"role3\"].uid]\n        })\n        .expect(httpStatus.UNAUTHORIZED)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9d2d8268-7283-4781-8101-712d0e2f0814",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "51d64c2c-1aac-484f-945a-34fcca17d5de",
                  "c0e725a1-cc5d-46f1-bb07-4bf970c03691",
                  "e585e55f-4dd2-4fc7-afe3-abaaead94251",
                  "9d2d8268-7283-4781-8101-712d0e2f0814"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 179,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "23b636a3-aec6-42f9-94ef-0c77a2e2ff4a",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\organizationUser\\currentUser.enterprise.js",
        "file": "\\controllers\\test\\organizationUser\\currentUser.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "6fef6a2b-9464-40d9-839f-5633a8066008",
            "title": "Organization",
            "fullFile": "D:\\api\\controllers\\test\\organizationUser\\currentUser.enterprise.js",
            "file": "\\controllers\\test\\organizationUser\\currentUser.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "208bee40-ccb4-4099-80e3-2b7086e164da",
                "title": "OrganizationUser.currentUser",
                "fullFile": "D:\\api\\controllers\\test\\organizationUser\\currentUser.enterprise.js",
                "file": "\\controllers\\test\\organizationUser\\currentUser.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Organization OrganizationUser.currentUser \"before each\" hook",
                    "timedOut": false,
                    "duration": 226,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        _data = data;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d26e329b-2f6e-48d3-b35b-a49d77ab7578",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Organization OrganizationUser.currentUser \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d8477354-6444-4647-b12b-a4e2f7ba538e",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get owner information in currentuser call.",
                    "fullTitle": "Enterprise Organization OrganizationUser.currentUser Should get owner information in currentuser call.",
                    "timedOut": false,
                    "duration": 27,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar config = getImmutable(ssoConfig);\napi.get(\"/enterprise/v1/user\")\n    .set('authtoken', _data.owner.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.uid != \"\" &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\";\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5679d324-5d4d-4013-9395-239ac99384bf",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get access for owner if SSO is enabled.",
                    "fullTitle": "Enterprise Organization OrganizationUser.currentUser Should get access for owner if SSO is enabled.",
                    "timedOut": false,
                    "duration": 264,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar config = getImmutable(ssoConfig);\napi.put(\"/enterprise/v1/organizations/:org_uid/ssoconfig\".replace(\":org_uid\", _data.organization.uid))\n    .send(config)\n    .set('authtoken', _data.owner.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        var publicKeyFile = __dirname + \"/../../../__cert/okta.cert\";\n        var privateKeyFile = __dirname + \"/../../../__cert/SP1.pem\";\n        api.post(\"/enterprise/v1/organizations/:org_uid/sso/certs\".replace(\":org_uid\", _data.organization.uid))\n            .set('authtoken', _data.admin.authtoken)\n            .attach('signed_public_key', publicKeyFile)\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                api.post(\"/enterprise/v1/organizations/:org_uid/sso/enable\".replace(\":org_uid\", _data.organization.uid))\n                    .set('authtoken', _data.owner.authtoken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        api.get(\"/enterprise/v1/user\")\n                            .set('org_uid', _data.organization.uid)\n                            .set('authtoken', _data.owner.authtoken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    var isValid = res.body.output.uid != \"\" &&\n                                        typeof(res.body.output._id) == \"undefined\" &&\n                                        typeof(res.body.output.__v) == \"undefined\";\n                                    isValid.should.equal(true);\n                                    done();\n                                }\n                            });\n                    });\n            });\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6757dea1-b42f-4ab5-b24f-2006f11f2f36",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not get access for admin if SSO is enabled.",
                    "fullTitle": "Enterprise Organization OrganizationUser.currentUser Should not get access for admin if SSO is enabled.",
                    "timedOut": false,
                    "duration": 242,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar config = getImmutable(ssoConfig);\napi.put(\"/enterprise/v1/organizations/:org_uid/ssoconfig\".replace(\":org_uid\", _data.organization.uid))\n    .send(config)\n    .set('authtoken', _data.owner.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        var publicKeyFile = __dirname + \"/../../../__cert/okta.cert\";\n        var privateKeyFile = __dirname + \"/../../../__cert/SP1.pem\";\n        api.post(\"/enterprise/v1/organizations/:org_uid/sso/certs\".replace(\":org_uid\", _data.organization.uid))\n            .set('authtoken', _data.admin.authtoken)\n            .attach('signed_public_key', publicKeyFile)\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                api.post(\"/enterprise/v1/organizations/:org_uid/sso/enable\".replace(\":org_uid\", _data.organization.uid))\n                    .set('authtoken', _data.owner.authtoken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        api.get(\"/enterprise/v1/user\")\n                            .set('org_uid', _data.organization.uid)\n                            .set('authtoken', _data.admin.authtoken)\n                            .expect(httpStatus.UNAUTHORIZED)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    res.body.error.message.should.equal(messageList.ACCESS_DENIED);\n                                    done();\n                                }\n                            });\n                    });\n            });\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7504cb34-1544-4bb9-bf8e-1e054e6dc173",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not get access for developer if SSO is enabled.",
                    "fullTitle": "Enterprise Organization OrganizationUser.currentUser Should not get access for developer if SSO is enabled.",
                    "timedOut": false,
                    "duration": 234,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar config = getImmutable(ssoConfig);\napi.put(\"/enterprise/v1/organizations/:org_uid/ssoconfig\".replace(\":org_uid\", _data.organization.uid))\n    .send(config)\n    .set('authtoken', _data.owner.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        var publicKeyFile = __dirname + \"/../../../__cert/okta.cert\";\n        var privateKeyFile = __dirname + \"/../../../__cert/SP1.pem\";\n        api.post(\"/enterprise/v1/organizations/:org_uid/sso/certs\".replace(\":org_uid\", _data.organization.uid))\n            .set('authtoken', _data.admin.authtoken)\n            .attach('signed_public_key', publicKeyFile)\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                api.post(\"/enterprise/v1/organizations/:org_uid/sso/enable\".replace(\":org_uid\", _data.organization.uid))\n                    .set('authtoken', _data.owner.authtoken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        api.get(\"/enterprise/v1/user\")\n                            .set('org_uid', _data.organization.uid)\n                            .set('authtoken', _data.developer.authtoken)\n                            .expect(httpStatus.UNAUTHORIZED)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    res.body.error.message.should.equal(messageList.ACCESS_DENIED);\n                                    done();\n                                }\n                            });\n                    });\n            });\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8a02dc55-8853-4843-bbf4-7d0cf31da370",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not get access for role1 if SSO is enabled.",
                    "fullTitle": "Enterprise Organization OrganizationUser.currentUser Should not get access for role1 if SSO is enabled.",
                    "timedOut": false,
                    "duration": 339,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar config = getImmutable(ssoConfig);\napi.put(\"/enterprise/v1/organizations/:org_uid/ssoconfig\".replace(\":org_uid\", _data.organization.uid))\n    .send(config)\n    .set('authtoken', _data.owner.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        var publicKeyFile = __dirname + \"/../../../__cert/okta.cert\";\n        var privateKeyFile = __dirname + \"/../../../__cert/SP1.pem\";\n        api.post(\"/enterprise/v1/organizations/:org_uid/sso/certs\".replace(\":org_uid\", _data.organization.uid))\n            .set('authtoken', _data.admin.authtoken)\n            .attach('signed_public_key', publicKeyFile)\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                api.post(\"/enterprise/v1/organizations/:org_uid/sso/enable\".replace(\":org_uid\", _data.organization.uid))\n                    .set('authtoken', _data.owner.authtoken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        api.get(\"/enterprise/v1/user\")\n                            .set('org_uid', _data.organization.uid)\n                            .set('authtoken', _data.role1.authtoken)\n                            .expect(httpStatus.UNAUTHORIZED)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    res.body.error.message.should.equal(messageList.ACCESS_DENIED);\n                                    done();\n                                }\n                            });\n                    });\n            });\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f01ce869-8c9e-45ce-ab10-8a51c8b2efad",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get organization owner information in currentuser call.",
                    "fullTitle": "Enterprise Organization OrganizationUser.currentUser Should get organization owner information in currentuser call.",
                    "timedOut": false,
                    "duration": 35,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar config = getImmutable(ssoConfig);\napi.get(\"/enterprise/v1/user\")\n    .set('org_uid', _data.organization.uid)\n    .set('authtoken', _data.owner.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.uid != \"\" &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\";\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "92cfaac3-3a23-4014-b7e2-f18762cee2ed",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get organization owner and sso information in currentuser call.",
                    "fullTitle": "Enterprise Organization OrganizationUser.currentUser Should get organization owner and sso information in currentuser call.",
                    "timedOut": false,
                    "duration": 38,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar config = getImmutable(ssoConfig);\napi.get(\"/enterprise/v1/user\")\n    .set('org_uid', _data.organization.uid)\n    .set('authtoken', _data.owner.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.uid != \"\" &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\";\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cf2fd388-ea2e-4453-b6ba-df62572a14da",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get organization information in currentuser call.",
                    "fullTitle": "Enterprise Organization OrganizationUser.currentUser Should get organization information in currentuser call.",
                    "timedOut": false,
                    "duration": 40,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(\"/enterprise/v1/user\")\n    .set('authtoken', _data.developer.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.uid != \"\" &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\" &&\n                typeof(res.body.output.organizations) != \"undefined\";\n            if (isValid) {\n                _.each(res.body.output.organizations, function(orgItem) {\n                    isValid = isValid &&\n                        typeof(orgItem._id) == \"undefined\" &&\n                        typeof(orgItem.__v) == \"undefined\" &&\n                        typeof(orgItem.org_uid) != \"undefined\" &&\n                        typeof(orgItem.org_name) != \"undefined\" &&\n                        typeof(orgItem.avatar) != \"undefined\";\n                });\n                isValid.should.equal(true);\n                done();\n            } else {\n                false.should.equal(true);\n                done();\n            }\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a7f44e9d-494e-43fc-8a5f-8ec22d6fe10f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get organization information in login call.",
                    "fullTitle": "Enterprise Organization OrganizationUser.currentUser Should get organization information in login call.",
                    "timedOut": false,
                    "duration": 213,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(\"/enterprise/v1/login\")\n    .send({\n        \"email\": _data.developer.email,\n        \"password\": \"Raw@1234\"\n    })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.uid != \"\" &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\" &&\n                typeof(res.body.output.organizations) != \"undefined\";\n            if (isValid) {\n                _.each(res.body.output.organizations, function(orgItem) {\n                    isValid = isValid &&\n                        typeof(orgItem._id) == \"undefined\" &&\n                        typeof(orgItem.__v) == \"undefined\" &&\n                        typeof(orgItem.org_uid) != \"undefined\" &&\n                        typeof(orgItem.org_name) != \"undefined\" &&\n                        typeof(orgItem.avatar) != \"undefined\";\n                });\n                isValid.should.equal(true);\n                done();\n            } else {\n                false.should.equal(true);\n                done();\n            }\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "361695ab-cd36-479b-8589-340501f66cc1",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get organization information in gmail login call.",
                    "fullTitle": "Enterprise Organization OrganizationUser.currentUser Should get organization information in gmail login call.",
                    "timedOut": false,
                    "duration": 67,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\ncommonMock.googleLogin(httpmock, \"enterprise\", {\n    \"email\": _data.developer.email\n});\napi.post(\"/enterprise/v1/login/google\")\n    .send({\n        \"access_token\": \"ya29.CjaXA59GmnRCMOCYxSm8kPuqY1H4k10wipfcQF6gFxAyAZXaokdxwQTW0ViQ1fG9m7-JVBkaUsM\"\n    })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.uid != \"\" &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\" &&\n                typeof(res.body.output.organizations) != \"undefined\";\n            if (isValid) {\n                _.each(res.body.output.organizations, function(orgItem) {\n                    isValid = isValid &&\n                        typeof(orgItem._id) == \"undefined\" &&\n                        typeof(orgItem.__v) == \"undefined\" &&\n                        typeof(orgItem.org_uid) != \"undefined\" &&\n                        typeof(orgItem.org_name) != \"undefined\" &&\n                        typeof(orgItem.avatar) != \"undefined\";\n                });\n                isValid.should.equal(true);\n                done();\n            } else {\n                false.should.equal(true);\n                done();\n            }\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "87f1fc9a-ad23-4a1e-8af0-192d4c0215a0",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get organization information in currentuser call of organization for Admin.",
                    "fullTitle": "Enterprise Organization OrganizationUser.currentUser Should get organization information in currentuser call of organization for Admin.",
                    "timedOut": false,
                    "duration": 51,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(\"/enterprise/v1/user\")\n    .set('org_uid', _data.organization.uid)\n    .set('authtoken', _data.admin.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.uid != \"\" &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\" &&\n                typeof(res.body.output.organizations) != \"undefined\";\n            if (isValid) {\n                _.each(res.body.output.organizations, function(orgItem) {\n                    isValid = isValid &&\n                        typeof(orgItem._id) == \"undefined\" &&\n                        typeof(orgItem.__v) == \"undefined\" &&\n                        typeof(orgItem.org_uid) != \"undefined\" &&\n                        typeof(orgItem.org_name) != \"undefined\" &&\n                        typeof(orgItem.avatar) != \"undefined\";\n                });\n                isValid.should.equal(true);\n                done();\n            } else {\n                false.should.equal(true);\n                done();\n            }\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2fbb93a0-78b2-49cd-ad8a-dfa990d66ea4",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get organization information in currentuser call of organization for Billing Manager.",
                    "fullTitle": "Enterprise Organization OrganizationUser.currentUser Should get organization information in currentuser call of organization for Billing Manager.",
                    "timedOut": false,
                    "duration": 53,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(\"/enterprise/v1/user\")\n    .set('org_uid', _data.organization.uid)\n    .set('authtoken', _data.billing_manager.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.uid != \"\" &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\" &&\n                typeof(res.body.output.organizations) != \"undefined\";\n            if (isValid) {\n                _.each(res.body.output.organizations, function(orgItem) {\n                    isValid = isValid &&\n                        typeof(orgItem._id) == \"undefined\" &&\n                        typeof(orgItem.__v) == \"undefined\" &&\n                        typeof(orgItem.org_uid) != \"undefined\" &&\n                        typeof(orgItem.org_name) != \"undefined\" &&\n                        typeof(orgItem.avatar) != \"undefined\";\n                });\n                isValid.should.equal(true);\n                done();\n            } else {\n                false.should.equal(true);\n                done();\n            }\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "982ccafe-1037-4217-93a6-28928f619d17",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "5679d324-5d4d-4013-9395-239ac99384bf",
                  "6757dea1-b42f-4ab5-b24f-2006f11f2f36",
                  "7504cb34-1544-4bb9-bf8e-1e054e6dc173",
                  "8a02dc55-8853-4843-bbf4-7d0cf31da370",
                  "f01ce869-8c9e-45ce-ab10-8a51c8b2efad",
                  "92cfaac3-3a23-4014-b7e2-f18762cee2ed",
                  "cf2fd388-ea2e-4453-b6ba-df62572a14da",
                  "a7f44e9d-494e-43fc-8a5f-8ec22d6fe10f",
                  "361695ab-cd36-479b-8589-340501f66cc1",
                  "87f1fc9a-ad23-4a1e-8af0-192d4c0215a0",
                  "2fbb93a0-78b2-49cd-ad8a-dfa990d66ea4",
                  "982ccafe-1037-4217-93a6-28928f619d17"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 1603,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "77778d3f-d86b-4189-8865-f35602ef84c1",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\organizationUser\\delete.enterprise.js",
        "file": "\\controllers\\test\\organizationUser\\delete.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "e4b115aa-b452-428f-a971-fc67f01d3f95",
            "title": "Organization",
            "fullFile": "D:\\api\\controllers\\test\\organizationUser\\delete.enterprise.js",
            "file": "\\controllers\\test\\organizationUser\\delete.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "ea4255bc-0957-4312-87df-258a657448e3",
                "title": "OrganizationUser.deleteOrgUser",
                "fullFile": "D:\\api\\controllers\\test\\organizationUser\\delete.enterprise.js",
                "file": "\\controllers\\test\\organizationUser\\delete.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Organization OrganizationUser.deleteOrgUser \"before each\" hook",
                    "timedOut": false,
                    "duration": 160,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        _data = data;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "365b46c4-746d-417a-911e-073f328a2827",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Organization OrganizationUser.deleteOrgUser \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "19623e99-68ba-4ef9-9c10-e2036537d544",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should delete organization user.",
                    "fullTitle": "Enterprise Organization OrganizationUser.deleteOrgUser Should delete organization user.",
                    "timedOut": false,
                    "duration": 35,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.OrganizationUser.findOne({\n    user_uid: _data.role1.uid\n}).lean().exec(function(error, orgUser) {\n    api.delete(apiURL.replace(\":org_uid\", org_uid).replace(\":org_user_uid\", orgUser.uid))\n        .send({})\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                res.body.output.message.should.equal(messageList.ORG_USER_DELETED_SUCCESS);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "29232dc7-5416-4ea0-97c9-22bda4225f62",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should delete organization admin user.",
                    "fullTitle": "Enterprise Organization OrganizationUser.deleteOrgUser Should delete organization admin user.",
                    "timedOut": false,
                    "duration": 35,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.OrganizationUser.findOne({\n    user_uid: _data.admin.uid\n}).lean().exec(function(error, orgUser) {\n    api.delete(apiURL.replace(\":org_uid\", org_uid).replace(\":org_user_uid\", orgUser.uid))\n        .send({})\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                res.body.output.message.should.equal(messageList.ORG_USER_DELETED_SUCCESS);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1d55b183-2e39-4730-92c8-7facef238af3",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give organization not found error.",
                    "fullTitle": "Enterprise Organization OrganizationUser.deleteOrgUser Should give organization not found error.",
                    "timedOut": false,
                    "duration": 27,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.OrganizationUser.findOne({\n    user_uid: _data.role1.uid\n}).lean().exec(function(error, orgUser) {\n    api.delete(apiURL.replace(\":org_uid\", \"FAKE_ORG\").replace(\":org_user_uid\", orgUser.uid))\n        .send({})\n        .set('authtoken', authToken)\n        .expect(httpStatus.NOT_FOUND)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                res.body.error.message.should.equal(messageList.ORG_NOT_FOUND);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "75846eff-886c-4487-a6a0-617ee7ce2609",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should delete Admin user.",
                    "fullTitle": "Enterprise Organization OrganizationUser.deleteOrgUser Should delete Admin user.",
                    "timedOut": false,
                    "duration": 37,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.OrganizationUser.findOne({\n    user_uid: _data.admin.uid\n}).lean().exec(function(error, orgUser) {\n    api.delete(apiURL.replace(\":org_uid\", org_uid).replace(\":org_user_uid\", orgUser.uid))\n        .send({})\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                res.body.output.message.should.equal(messageList.ORG_USER_DELETED_SUCCESS);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b131141c-fc17-4f79-927f-ed256dc9d7b3",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should delete Billing Manager user.",
                    "fullTitle": "Enterprise Organization OrganizationUser.deleteOrgUser Should delete Billing Manager user.",
                    "timedOut": false,
                    "duration": 32,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.OrganizationUser.findOne({\n    user_uid: _data.billing_manager.uid\n}).lean().exec(function(error, orgUser) {\n    api.delete(apiURL.replace(\":org_uid\", org_uid).replace(\":org_user_uid\", orgUser.uid))\n        .send({})\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                res.body.output.message.should.equal(messageList.ORG_USER_DELETED_SUCCESS);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8f568c0e-bdbd-4930-a0ed-6f3accdaacaf",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not delete owner.",
                    "fullTitle": "Enterprise Organization OrganizationUser.deleteOrgUser Should not delete owner.",
                    "timedOut": false,
                    "duration": 28,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.OrganizationUser.findOne({\n    org_uid: org_uid,\n    user_uid: _data.owner.uid\n}, function(err, orgUser) {\n    api.delete(apiURL.replace(\":org_uid\", org_uid).replace(\":org_user_uid\", orgUser.uid))\n        .send({})\n        .set('authtoken', authToken)\n        .expect(httpStatus.BAD_REQUEST)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                res.body.error.message.should.equal(messageList.ORG_OWNER_CANNOT_BE_DELETED);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d4c5e334-afbc-4aea-8cd8-487af7cd67dc",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give user not found error.",
                    "fullTitle": "Enterprise Organization OrganizationUser.deleteOrgUser Should give user not found error.",
                    "timedOut": false,
                    "duration": 28,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.delete(apiURL.replace(\":org_uid\", org_uid).replace(\":org_user_uid\", \"ABC\"))\n    .send({})\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_USER_NOT_FOUND);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "57f6024b-f72b-418d-8266-6d3ece7b98ae",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not allowed to delete user to Developer user.",
                    "fullTitle": "Enterprise Organization OrganizationUser.deleteOrgUser Should not allowed to delete user to Developer user.",
                    "timedOut": false,
                    "duration": 30,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.OrganizationUser.findOne({\n    org_uid: org_uid,\n    user_uid: _data.role1.uid\n}, function(err, orgUser) {\n    api.delete(apiURL.replace(\":org_uid\", org_uid).replace(\":org_user_uid\", orgUser.uid))\n        .send({})\n        .set('authtoken', _data.developer.authtoken)\n        .expect(httpStatus.UNAUTHORIZED)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                res.body.error.message.should.equal(messageList.ORG_NOT_ADMIN);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d756c809-c87b-40d3-8141-bfc5ec3773e1",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not allowed to delete user to Billing Manager user.",
                    "fullTitle": "Enterprise Organization OrganizationUser.deleteOrgUser Should not allowed to delete user to Billing Manager user.",
                    "timedOut": false,
                    "duration": 29,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n\n_models.OrganizationUser.findOne({\n    org_uid: org_uid,\n    user_uid: _data.role1.uid\n}, function(err, orgUser) {\n    api.delete(apiURL.replace(\":org_uid\", org_uid).replace(\":org_user_uid\", orgUser.uid))\n        .send({})\n        .set('authtoken', _data.billing_manager.authtoken)\n        .expect(httpStatus.UNAUTHORIZED)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                res.body.error.message.should.equal(messageList.ORG_NOT_ADMIN);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "350ece42-5dd7-49a1-828b-bd1cbff37d88",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not delete owner.",
                    "fullTitle": "Enterprise Organization OrganizationUser.deleteOrgUser Should not delete owner.",
                    "timedOut": false,
                    "duration": 29,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.OrganizationUser.findOne({\n    org_uid: org_uid,\n    user_uid: _data.owner.uid\n}, function(err, orgUser) {\n    api.delete(apiURL.replace(\":org_uid\", org_uid).replace(\":org_user_uid\", orgUser.uid))\n        .send({})\n        .set('authtoken', authToken)\n        .expect(httpStatus.BAD_REQUEST)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                res.body.error.message.should.equal(messageList.ORG_OWNER_CANNOT_BE_DELETED);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "713d2ede-f49d-4e53-9329-b3c8a902bbde",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Organization OrganizationUser.deleteOrgUser Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.OrganizationUser.findOne({\n    org_uid: org_uid,\n    user_uid: _data.owner.uid\n}, function(err, orgUser) {\n    api.delete(apiURL.replace(\":org_uid\", org_uid).replace(\":org_user_uid\", orgUser.uid))\n        .send({})\n        .expect(httpStatus.UNAUTHORIZED)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d73dc826-65ad-4f1c-995f-6c4b12267f38",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "29232dc7-5416-4ea0-97c9-22bda4225f62",
                  "1d55b183-2e39-4730-92c8-7facef238af3",
                  "75846eff-886c-4487-a6a0-617ee7ce2609",
                  "b131141c-fc17-4f79-927f-ed256dc9d7b3",
                  "8f568c0e-bdbd-4930-a0ed-6f3accdaacaf",
                  "d4c5e334-afbc-4aea-8cd8-487af7cd67dc",
                  "57f6024b-f72b-418d-8266-6d3ece7b98ae",
                  "d756c809-c87b-40d3-8141-bfc5ec3773e1",
                  "350ece42-5dd7-49a1-828b-bd1cbff37d88",
                  "713d2ede-f49d-4e53-9329-b3c8a902bbde",
                  "d73dc826-65ad-4f1c-995f-6c4b12267f38"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 318,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "544e3676-e53c-463c-8b16-5c0aa733709b",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\organizationUser\\list.enterprise.js",
        "file": "\\controllers\\test\\organizationUser\\list.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "fb97b04c-b6b3-4ffb-9822-0858a442f573",
            "title": "Organization",
            "fullFile": "D:\\api\\controllers\\test\\organizationUser\\list.enterprise.js",
            "file": "\\controllers\\test\\organizationUser\\list.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "35496bef-c010-4273-8d44-1aea7203aab4",
                "title": "OrganizationUser.list",
                "fullFile": "D:\\api\\controllers\\test\\organizationUser\\list.enterprise.js",
                "file": "\\controllers\\test\\organizationUser\\list.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Organization OrganizationUser.list \"before each\" hook",
                    "timedOut": false,
                    "duration": 182,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        _data = data;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2fadb5d9-6e5b-45cc-b3ae-eb10178446e2",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Organization OrganizationUser.list \"after each\" hook",
                    "timedOut": false,
                    "duration": 1,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cdf45082-35b5-4340-8b3d-e255ef47e14b",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should list organization users.",
                    "fullTitle": "Enterprise Organization OrganizationUser.list Should list organization users.",
                    "timedOut": false,
                    "duration": 34,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL.replace(\":org_uid\", org_uid))\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (Array.isArray(res.body.output.objects)) {\n                isValid = res.body.output.count > 0;\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\";\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d08b9aeb-6489-45a8-9ddd-d7411d5d6dac",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give organization not found error.",
                    "fullTitle": "Enterprise Organization OrganizationUser.list Should give organization not found error.",
                    "timedOut": false,
                    "duration": 442,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar email = \"test.user+1@raweng.com\";\nfetchRoles({\n    done: done,\n    org_uid: org_uid\n}, function(res) {\n    inviteUsers({\n        roles: res.body.output.objects,\n        user_uid: user_uid,\n        org_uid: org_uid\n    }, function() {\n        api.get(apiURL.replace(\":org_uid\", \"FAKE_ORG\"))\n            .set('authtoken', authToken)\n            .expect(httpStatus.NOT_FOUND)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    res.body.error.message.should.equal(messageList.ORG_NOT_FOUND);\n                    done();\n                }\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b7cce969-ffab-4ca6-bedf-29099a06eb69",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should sort organization users.",
                    "fullTitle": "Enterprise Organization OrganizationUser.list Should sort organization users.",
                    "timedOut": false,
                    "duration": 412,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar email = \"test.user+1@raweng.com\";\nfetchRoles({\n    done: done,\n    org_uid: org_uid\n}, function(res) {\n    inviteUsers({\n        roles: res.body.output.objects,\n        user_uid: user_uid,\n        org_uid: org_uid\n    }, function() {\n        var orgGetUrl = apiURL.replace(\":org_uid\", org_uid) +\n            \"?skip=2&limit=2&field=email&direction=desc\";\n        api.get(orgGetUrl)\n            .set('authtoken', authToken)\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    var isValid = false;\n                    if (Array.isArray(res.body.output.objects)) {\n                        isValid = res.body.output.count != 0 &&\n                            res.body.output.objects.length == 2;\n                        _.each(res.body.output.objects, function(item) {\n                            isValid = isValid &&\n                                typeof(item._id) == \"undefined\" &&\n                                typeof(item.__v) == \"undefined\";\n                        });\n                    }\n                    isValid.should.equal(true);\n                    done();\n                }\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8893f24d-9936-4b79-85da-e9a509f9337d",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should list two items of organization users.",
                    "fullTitle": "Enterprise Organization OrganizationUser.list Should list two items of organization users.",
                    "timedOut": false,
                    "duration": 418,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar email = \"test.user+1@raweng.com\";\nfetchRoles({\n    done: done,\n    org_uid: org_uid\n}, function(res) {\n    inviteUsers({\n        roles: res.body.output.objects,\n        user_uid: user_uid,\n        org_uid: org_uid\n    }, function() {\n        var orgGetUrl = apiURL.replace(\":org_uid\", org_uid) +\n            \"?skip=2&limit=2\";\n        api.get(orgGetUrl)\n            .set('authtoken', authToken)\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    var isValid = false;\n                    if (Array.isArray(res.body.output.objects)) {\n                        isValid = res.body.output.count != 0 &&\n                            res.body.output.objects.length == 2;\n                        _.each(res.body.output.objects, function(item) {\n                            isValid = isValid &&\n                                typeof(item._id) == \"undefined\" &&\n                                typeof(item.__v) == \"undefined\";\n                        });\n                    }\n                    isValid.should.equal(true);\n                    done();\n                }\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f49fed41-1a3f-42b0-918a-c33c22d6dd51",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should list of filter users.",
                    "fullTitle": "Enterprise Organization OrganizationUser.list Should list of filter users.",
                    "timedOut": false,
                    "duration": 420,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar email = \"test.user+1@raweng.com\";\nfetchRoles({\n    done: done,\n    org_uid: org_uid\n}, function(res) {\n    inviteUsers({\n        roles: res.body.output.objects,\n        user_uid: user_uid,\n        org_uid: org_uid\n    }, function() {\n        var orgGetUrl = apiURL.replace(\":org_uid\", org_uid) +\n            \"?query=test.user+1\";\n        api.get(orgGetUrl)\n            .set('authtoken', authToken)\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    var isValid = false;\n                    if (Array.isArray(res.body.output.objects)) {\n                        isValid = res.body.output.count != 0 &&\n                            res.body.output.objects.length > 0;\n                        _.each(res.body.output.objects, function(item) {\n                            isValid = isValid &&\n                                typeof(item._id) == \"undefined\" &&\n                                typeof(item.__v) == \"undefined\";\n                        });\n                    }\n                    isValid.should.equal(true);\n                    done();\n                }\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "209b357d-875b-4011-a216-5c5bc5c37a83",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get invitation object null after accepting invitation.",
                    "fullTitle": "Enterprise Organization OrganizationUser.list Should get invitation object null after accepting invitation.",
                    "timedOut": false,
                    "duration": 354,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar email = \"test.user+1@raweng.com\";\napi.post(\"/enterprise/v1/organizations/:org_uid/invite\".replace(\":org_uid\", org_uid))\n    .send({\n        \"org_roles\": [_data.roles[\"Developer\"].uid],\n        \"emails\": [email]\n    })\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            if (res.body.output.message == messageList.ORG_INVITATION_SEND) {\n                signUpUser({\n                    done: done,\n                    email: email\n                }, function(res) {\n                    api.post(\"/enterprise/v1/organizations/:org_uid/invitation/accept\".replace(\":org_uid\", org_uid))\n                        .send({})\n                        .set('authtoken', res.body.output.authtoken)\n                        .expect(httpStatus.OK)\n                        .end(function(err, res) {\n                            api.get(apiURL.replace(\":org_uid\", org_uid))\n                                .set('authtoken', authToken)\n                                .expect(httpStatus.OK)\n                                .end(function(err, res) {\n                                    if (err) {\n                                        done(err);\n                                    } else {\n                                        var isValid = false;\n                                        if (Array.isArray(res.body.output.objects)) {\n                                            isValid = res.body.output.count > 0;\n                                            _.each(res.body.output.objects, function(item) {\n                                                isValid = isValid &&\n                                                    typeof(item._id) == \"undefined\" &&\n                                                    typeof(item.__v) == \"undefined\" &&\n                                                    item.invitation == null;\n                                            });\n                                        }\n                                        isValid.should.equal(true);\n                                        done();\n                                    }\n                                });\n                        });\n                });\n            } else {\n                true.should.equal(false);\n                done();\n            }\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "39296817-d80f-4622-a3f0-f5bef1a5e574",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should list re-invited organization user.",
                    "fullTitle": "Enterprise Organization OrganizationUser.list Should list re-invited organization user.",
                    "timedOut": false,
                    "duration": 700,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar user_uid = \"\";\nvar email = _data.developer.email;\nvar inviteUser = function(callback) {\n    api.post(\"/enterprise/v1/organizations/:org_uid/invite\".replace(\":org_uid\", org_uid))\n        .send({\n            \"org_roles\": [_data.roles.Developer.uid],\n            \"emails\": [email]\n        })\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                if (res.body.output.message == messageList.ORG_INVITATION_SEND) {\n                    var tempLoginBody = getImmutable(loginBody);\n                    tempLoginBody.email = email;\n                    commonMock.flowLogin(httpmock, \"enterprise\");\n                    api.post(\"/enterprise/v1/login\")\n                        .send(tempLoginBody)\n                        .expect(httpStatus.OK)\n                        .end(function(err, res) {\n                            if (err) {\n                                done(err);\n                            } else {\n                                var userAuthToken = res.body.output.authtoken;\n                                api.post(\"/enterprise/v1/organizations/:org_uid/invitation/accept\".replace(\":org_uid\", org_uid))\n                                    .send({})\n                                    .set('authtoken', userAuthToken)\n                                    .expect(httpStatus.OK)\n                                    .end(function(err, res) {\n                                        commonMock.brainTreeClientToken(httpmock, \"enterprise\");\n                                        api.get(\"/enterprise/v1/user\")\n                                            .set('authtoken', userAuthToken)\n                                            .set('org_uid', org_uid)\n                                            .expect(httpStatus.OK)\n                                            .end(function(err, res) {\n                                                if (err) {\n                                                    done(err);\n                                                } else {\n                                                    user_uid = res.body.output.uid;\n                                                    _models.OrganizationUser.findOne({\n                                                        user_uid: user_uid,\n                                                        org_uid: org_uid,\n                                                        deleted_at: null\n                                                    }).lean().exec(function(err, orgUser) {\n                                                        callback(err, orgUser);\n                                                    });\n                                                }\n                                            });\n                                    });\n                            }\n                        });\n                } else {\n                    true.should.equal(false);\n                    done();\n                }\n            }\n        });\n};\n\n_models.OrganizationUser.findOne({\n    org_uid: org_uid,\n    user_uid: _data.developer.uid\n}).lean().exec(function(error, orgUser) {\n    api.get(apiURL.replace(\":org_uid\", org_uid))\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                api.delete(\"/enterprise/v1/organizations/:org_uid/users/:org_user_uid\"\n                        .replace(\":org_uid\", org_uid)\n                        .replace(\":org_user_uid\", orgUser.uid))\n                    .send({})\n                    .set('authtoken', authToken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            if (res.body.output.message == messageList.ORG_USER_DELETED_SUCCESS) {\n                                inviteUser(function(error, orgUser) {\n                                    if (err) {\n                                        done(err);\n                                    } else {\n                                        api.get(apiURL.replace(\":org_uid\", org_uid))\n                                            .set('authtoken', authToken)\n                                            .expect(httpStatus.OK)\n                                            .end(function(err, res) {\n                                                if (err) {\n                                                    done(err);\n                                                } else {\n                                                    var isValid = false;\n                                                    if (Array.isArray(res.body.output.objects)) {\n                                                        isValid = res.body.output.count > 0;\n                                                        _.each(res.body.output.objects, function(item) {\n                                                            isValid = isValid &&\n                                                                typeof(item._id) == \"undefined\" &&\n                                                                typeof(item.__v) == \"undefined\";\n                                                        });\n                                                    }\n                                                    isValid.should.equal(true);\n                                                    done();\n                                                }\n                                            });\n                                    }\n                                });\n                            } else {\n                                true.should.equal(false);\n                                done();\n                            }\n                        }\n                    });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f6801975-2b33-4a36-a47f-7c5980de08d7",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should list re-invited organization user before accepting second invitation.",
                    "fullTitle": "Enterprise Organization OrganizationUser.list Should list re-invited organization user before accepting second invitation.",
                    "timedOut": false,
                    "duration": 142,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar user_uid = \"\";\nvar email = _data.developer.email;\nvar inviteUser = function(callback) {\n    api.post(\"/enterprise/v1/organizations/:org_uid/invite\".replace(\":org_uid\", org_uid))\n        .send({\n            \"org_roles\": [_data.roles.Developer.uid],\n            \"emails\": [email]\n        })\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                if (res.body.output.message == messageList.ORG_INVITATION_SEND) {\n                    callback(err, res);\n                } else {\n                    true.should.equal(false);\n                    done();\n                }\n            }\n        });\n};\n\n_models.OrganizationUser.findOne({\n    user_uid: _data.developer.uid\n}).lean().exec(function(error, orgUser) {\n    api.delete(\"/enterprise/v1/organizations/:org_uid/users/:org_user_uid\"\n            .replace(\":org_uid\", org_uid)\n            .replace(\":org_user_uid\", orgUser.uid))\n        .send({})\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                if (res.body.output.message == messageList.ORG_USER_DELETED_SUCCESS) {\n                    inviteUser(function(error, orgUser) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            api.get(apiURL.replace(\":org_uid\", org_uid))\n                                .set('authtoken', authToken)\n                                .expect(httpStatus.OK)\n                                .end(function(err, res) {\n                                    if (err) {\n                                        done(err);\n                                    } else {\n                                        var isValid = false;\n                                        if (Array.isArray(res.body.output.objects)) {\n                                            isValid = res.body.output.count > 0;\n                                            _.each(res.body.output.objects, function(item) {\n                                                isValid = isValid &&\n                                                    typeof(item._id) == \"undefined\" &&\n                                                    typeof(item.__v) == \"undefined\";\n                                            });\n                                        }\n                                        isValid.should.equal(true);\n                                        done();\n                                    }\n                                });\n                        }\n                    });\n                } else {\n                    true.should.equal(false);\n                    done();\n                }\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "aeb8f2d2-e0b0-4d7a-979e-65d76edf540c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Organization OrganizationUser.list Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 419,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar email = \"test.user+1@raweng.com\";\nfetchRoles({\n    done: done,\n    org_uid: org_uid\n}, function(res) {\n    inviteUsers({\n        roles: res.body.output.objects,\n        user_uid: user_uid,\n        org_uid: org_uid\n    }, function() {\n        api.get(apiURL.replace(\":org_uid\", org_uid))\n            .expect(httpStatus.UNAUTHORIZED)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n                    done();\n                }\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f985803f-5739-458a-9442-8d7f72103cc5",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "d08b9aeb-6489-45a8-9ddd-d7411d5d6dac",
                  "b7cce969-ffab-4ca6-bedf-29099a06eb69",
                  "8893f24d-9936-4b79-85da-e9a509f9337d",
                  "f49fed41-1a3f-42b0-918a-c33c22d6dd51",
                  "209b357d-875b-4011-a216-5c5bc5c37a83",
                  "39296817-d80f-4622-a3f0-f5bef1a5e574",
                  "f6801975-2b33-4a36-a47f-7c5980de08d7",
                  "aeb8f2d2-e0b0-4d7a-979e-65d76edf540c",
                  "f985803f-5739-458a-9442-8d7f72103cc5"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 3341,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "8802f6b4-cd95-42d6-9db3-292c6a0ffe39",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\organizationUser\\removeSelf.enterprise.js",
        "file": "\\controllers\\test\\organizationUser\\removeSelf.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "ed03acd9-c713-4fa7-975d-d13bc403a444",
            "title": "Organization",
            "fullFile": "D:\\api\\controllers\\test\\organizationUser\\removeSelf.enterprise.js",
            "file": "\\controllers\\test\\organizationUser\\removeSelf.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "bd2cfb2e-bb96-4762-86d9-5bffee1b1942",
                "title": "OrganizationUser.removeSelf",
                "fullFile": "D:\\api\\controllers\\test\\organizationUser\\removeSelf.enterprise.js",
                "file": "\\controllers\\test\\organizationUser\\removeSelf.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Organization OrganizationUser.removeSelf \"before each\" hook",
                    "timedOut": false,
                    "duration": 166,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        _data = data;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b53d735c-4cc2-4d22-a78d-0223f4ceb815",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Organization OrganizationUser.removeSelf \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3121261b-9e40-49ef-b5c0-7d7b92d11b47",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should left organization.",
                    "fullTitle": "Enterprise Organization OrganizationUser.removeSelf Should left organization.",
                    "timedOut": false,
                    "duration": 41,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.delete(apiURL.replace(\":org_uid\", org_uid))\n    .send({})\n    .set('authtoken', _data.role1.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.message.should.equal(messageList.ORG_USER_LEFT_SUCCESS);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f89a91ff-2bac-43da-82f3-f502575b16c3",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should left organization if SSO is enable.",
                    "fullTitle": "Enterprise Organization OrganizationUser.removeSelf Should left organization if SSO is enable.",
                    "timedOut": false,
                    "duration": 275,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar config = getImmutable(ssoConfig);\napi.put(\"/enterprise/v1/organizations/:org_uid/ssoconfig\".replace(\":org_uid\", org_uid))\n    .send(config)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.uid != \"\" &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\" &&\n                res.body.output.sso_details.entry_point == config.entry_point &&\n                res.body.output.sso_details.algo_type == config.algo_type &&\n                res.body.output.sso_details.session_time_out_hours == config.session_time_out_hours\n            if (isValid) {\n                var publicKeyFile = __dirname + \"/../../../__cert/okta.cert\";\n                var privateKeyFile = __dirname + \"/../../../__cert/SP1.pem\";\n                api.post(\"/enterprise/v1/organizations/:org_uid/sso/certs\".replace(\":org_uid\", org_uid))\n                    .set('authtoken', _data.admin.authtoken)\n                    .attach('signed_public_key', publicKeyFile)\n                    .attach('enc_private_key', privateKeyFile)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        api.post(\"/enterprise/v1/organizations/:org_uid/sso/enable\".replace(\":org_uid\", org_uid))\n                            .send({})\n                            .set('authtoken', authToken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    if (res.body.output.enable_sso) {\n                                        api.delete(apiURL.replace(\":org_uid\", org_uid))\n                                            .send({})\n                                            .set('authtoken', _data.role1.authtoken)\n                                            .expect(httpStatus.OK)\n                                            .end(function(err, res) {\n                                                if (err) {\n                                                    done(err);\n                                                } else {\n                                                    res.body.output.message.should.equal(messageList.ORG_USER_LEFT_SUCCESS);\n                                                    done();\n                                                }\n                                            });\n                                    } else {\n                                        true.should.equal(false);\n                                        done();\n                                    }\n                                }\n                            });\n                    });\n            } else {\n                isValid.should.equal(false);\n                done();\n            }\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ef9f948e-d088-461e-bda2-45b18e2a91d5",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give organization not found error.",
                    "fullTitle": "Enterprise Organization OrganizationUser.removeSelf Should give organization not found error.",
                    "timedOut": false,
                    "duration": 19,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.delete(apiURL.replace(\":org_uid\", \"FAKE_ORG\"))\n    .send({})\n    .set('authtoken', _data.role1.authtoken)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_NOT_FOUND);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "84e6bb76-ebbd-4ca1-b08f-89c99c4794e9",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Owner sholud not leave organization.",
                    "fullTitle": "Enterprise Organization OrganizationUser.removeSelf Owner sholud not leave organization.",
                    "timedOut": false,
                    "duration": 26,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.delete(apiURL.replace(\":org_uid\", org_uid))\n    .send({})\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_OWNER_LEAVE_NOT_ALLOWED);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b6fed946-8c5a-4d0e-9bfa-f75f13c8b7c0",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Organization OrganizationUser.removeSelf Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.delete(apiURL.replace(\":org_uid\", org_uid))\n    .send({})\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a99db410-543d-4928-b7e5-77031bc4f2f5",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "f89a91ff-2bac-43da-82f3-f502575b16c3",
                  "ef9f948e-d088-461e-bda2-45b18e2a91d5",
                  "84e6bb76-ebbd-4ca1-b08f-89c99c4794e9",
                  "b6fed946-8c5a-4d0e-9bfa-f75f13c8b7c0",
                  "a99db410-543d-4928-b7e5-77031bc4f2f5"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 368,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "950686dd-a04c-4ca9-b90a-e4d703894df9",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\payment\\cancelBraintreeSubscription.enterprise.js",
        "file": "\\controllers\\test\\payment\\cancelBraintreeSubscription.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "a07dcf2f-0d77-44cd-af1f-55857daac007",
            "title": "Payment",
            "fullFile": "D:\\api\\controllers\\test\\payment\\cancelBraintreeSubscription.enterprise.js",
            "file": "\\controllers\\test\\payment\\cancelBraintreeSubscription.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "d24f56df-b7ea-4dfb-bcde-09f21e6dc219",
                "title": "Payment.cancelBraintreeSubscription",
                "fullFile": "D:\\api\\controllers\\test\\payment\\cancelBraintreeSubscription.enterprise.js",
                "file": "\\controllers\\test\\payment\\cancelBraintreeSubscription.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Payment Payment.cancelBraintreeSubscription \"before each\" hook",
                    "timedOut": false,
                    "duration": 402,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    commonMock.setSignUpMocks(httpmock, \"enterprise\");\n    api.post(\"/enterprise/v1/signup\")\n        .send(registrationBody)\n        .expect(httpStatus.CREATED)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                authToken = res.body.output.authtoken;\n                _id = res.body.output._id;\n                _braintreeCustId = res.body.output.braintree_customerId;\n                _userUid = res.body.output.uid;\n                subscribedPayload.options[\"braintree_customerId\"] = _braintreeCustId;\n                subscribedCanceledPayload.options[\"braintree_customerId\"] = _braintreeCustId;\n                //commonMock.braintreeSubscription(httpmock, \"enterprise\");\n                commonMock.braintreeSubscription(httpmock, \"enterprise\");\n                commonMock.braintreeUpdatePaymentMethod(httpmock, \"enterprise\");\n                api.post(\"/enterprise/v1/user/account/creditcards\")\n                    .send(saveCardBody)\n                    .set('authtoken', authToken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            commonMock.braintreeSubscription(httpmock, \"enterprise\");\n                            commonMock.intercomUserUpdate(httpmock, \"enterprise\");\n                            api.post(\"/v1/webhook/subscription/start\")\n                                .send(subscribedPayload)\n                                .expect(httpStatus.OK)\n                                .end(function(err, res) {\n                                    if (err) {\n                                        done(err);\n                                    } else {\n                                        done();\n                                    }\n                                });\n                        }\n                    });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "47965b10-ecfa-47e5-b960-71f8e76ce81a",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Payment Payment.cancelBraintreeSubscription \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d1d2d225-8460-4d08-8a84-67be908bb2cf",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should cancel subscription.",
                    "fullTitle": "Enterprise Payment Payment.cancelBraintreeSubscription Should cancel subscription.",
                    "timedOut": false,
                    "duration": 186,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.braintreeCancelSubscription(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(subscribedCanceledPayload)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            commonMock.brainTreeClientToken(httpmock, \"enterprise\");\n            api.get(\"/enterprise/v1/user\")\n                .set('authtoken', authToken)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    // After cancelation of subcription default plans get set.\n                    commonMock.braintreeFindSubscription(httpmock, \"enterprise\");\n                    commonMock.braintreeFindCard(httpmock, \"enterprise\");\n                    api.get(\"/enterprise/v1/user/account/subscription\")\n                        .set('authtoken', authToken)\n                        .expect(httpStatus.OK)\n                        .end(function(err, res) {\n                            if (err) {\n                                done(err);\n                            } else {\n                                (res.body.output.billingDetails.firstName ==\n                                    registrationBody.first_name + \" \" + registrationBody.last_name).should.equal(true);\n                                done();\n                            }\n                        });\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "32d71d29-b37a-49af-8fe8-d0ba43cca031",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should cancel subscription org user.",
                    "fullTitle": "Enterprise Payment Payment.cancelBraintreeSubscription Should cancel subscription org user.",
                    "timedOut": false,
                    "duration": 247,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRecordsEntry({}, function(data) {\n    commonMock.braintreeCancelSubscription(httpmock, \"enterprise\");\n    var temp_subscribedCanceledPayload = getImmutable(subscribedCanceledPayload);\n    temp_subscribedCanceledPayload.options.braintree_customerId = data.organization_account.braintree_customerId;\n    api.post(apiURL)\n        .send(temp_subscribedCanceledPayload)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                var org_uid = data.organization.uid;\n                var org_owner_authtoken = data.organization.uid;\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "52724d06-5750-4e6c-a053-e0e5505921df",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "32d71d29-b37a-49af-8fe8-d0ba43cca031",
                  "52724d06-5750-4e6c-a053-e0e5505921df"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 433,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "3b21a7f6-31a1-4b76-bf6d-ed65742680c9",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\payment\\createBraintreeSubscription.enterprise.js",
        "file": "\\controllers\\test\\payment\\createBraintreeSubscription.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "fbe7bc55-d778-4d27-a6db-7f99b4ab3314",
            "title": "Payment",
            "fullFile": "D:\\api\\controllers\\test\\payment\\createBraintreeSubscription.enterprise.js",
            "file": "\\controllers\\test\\payment\\createBraintreeSubscription.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "2bb2d840-0748-4ab0-bf94-49517bc1de8c",
                "title": "Payment.createBraintreeSubscription",
                "fullFile": "D:\\api\\controllers\\test\\payment\\createBraintreeSubscription.enterprise.js",
                "file": "\\controllers\\test\\payment\\createBraintreeSubscription.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Payment Payment.createBraintreeSubscription \"before each\" hook",
                    "timedOut": false,
                    "duration": 349,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    commonMock.setSignUpMocks(httpmock, \"enterprise\");\n    api.post(\"/enterprise/v1/signup\")\n        .send(registrationBody)\n        .expect(httpStatus.CREATED)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                authToken = res.body.output.authtoken;\n                _id = res.body.output._id;\n                _braintreeCustId = res.body.output.braintree_customerId;\n                _userUid = res.body.output.uid;\n                subscribedPayload.options[\"braintree_customerId\"] = _braintreeCustId;\n                commonMock.braintreeSubscription(httpmock, \"enterprise\");\n                commonMock.braintreeCancelSubscription(httpmock, \"enterprise\");\n                commonMock.braintreeUpdatePaymentMethod(httpmock, \"enterprise\");\n                api.post(\"/enterprise/v1/user/account/creditcards\")\n                    .send(saveCardBody)\n                    .set('authtoken', authToken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            done();\n                        }\n                    });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a28f61f3-af54-4b1e-8a6f-3542b55747c0",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Payment Payment.createBraintreeSubscription \"after each\" hook",
                    "timedOut": false,
                    "duration": 1,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "59750174-256d-402b-9e42-5f367af454c3",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should subscribed.",
                    "fullTitle": "Enterprise Payment Payment.createBraintreeSubscription Should subscribed.",
                    "timedOut": false,
                    "duration": 92,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.braintreeSubscription(httpmock, \"enterprise\");\ncommonMock.intercomUserUpdate(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(subscribedPayload)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            commonMock.brainTreeClientToken(httpmock, \"enterprise\");\n            api.get(\"/enterprise/v1/user\")\n                .set('authtoken', authToken)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    var _userUid = res.body.output.uid;\n                    var braintree_subscriptionId = res.body.output.braintree_subscriptionId;\n                    var isValid = _userUid != \"\" &&\n                        braintree_subscriptionId != \"\";\n                    isValid.should.equal(true);\n                    done();\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "237bf6a1-b38d-4a77-9511-f4eaeefaf0ba",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should subscribed for org user.",
                    "fullTitle": "Enterprise Payment Payment.createBraintreeSubscription Should subscribed for org user.",
                    "timedOut": false,
                    "duration": 222,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRecordsEntry({}, function(data) {\n    commonMock.braintreeSubscription(httpmock, \"enterprise\");\n    commonMock.intercomUserUpdate(httpmock, \"enterprise\");\n    var temp_subscribedPayload = getImmutable(subscribedPayload);\n    temp_subscribedPayload.options.braintree_customerId = data.organization_account.braintree_customerId;\n    api.post(apiURL)\n        .send(temp_subscribedPayload)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                commonMock.brainTreeClientToken(httpmock, \"enterprise\");\n                _models.User.findOne({\n                    braintree_customerId: data.organization_account.braintree_customerId\n                }, function(error, user) {\n                    var braintree_subscriptionId = user.braintree_subscriptionId;\n                    var isValid = braintree_subscriptionId != \"\";\n                    isValid.should.equal(true);\n                    done();\n                });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e9891dcd-ea17-45cc-9af3-cafdc4381879",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should reset credit limit email flag.",
                    "fullTitle": "Enterprise Payment Payment.createBraintreeSubscription Should reset credit limit email flag.",
                    "timedOut": false,
                    "duration": 96,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User._findOneAndUpdate({ \"uid\": _userUid }, { credit_limit_email: true }, function(err, feature) {\n    commonMock.braintreeSubscription(httpmock, \"enterprise\");\n    commonMock.intercomUserUpdate(httpmock, \"enterprise\");\n    api.post(apiURL)\n        .send(subscribedPayload)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                commonMock.brainTreeClientToken(httpmock, \"enterprise\");\n                api.get(\"/enterprise/v1/user\")\n                    .set('authtoken', authToken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        var _userUid = res.body.output.uid;\n                        var braintree_subscriptionId = res.body.output.braintree_subscriptionId;\n                        var credit_limit_email = res.body.output.credit_limit_email;\n                        var isValid = _userUid != \"\" &&\n                            braintree_subscriptionId != \"\" &&\n                            credit_limit_email == false;\n                        isValid.should.equal(true);\n                        done();\n                    });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "865395ca-c69b-4a64-b697-e9e88398e063",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "237bf6a1-b38d-4a77-9511-f4eaeefaf0ba",
                  "e9891dcd-ea17-45cc-9af3-cafdc4381879",
                  "865395ca-c69b-4a64-b697-e9e88398e063"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 410,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "efd5020f-e65c-4b67-a184-4c1cac3de381",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\payment\\disableAccount.enterprise.js",
        "file": "\\controllers\\test\\payment\\disableAccount.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "77726d31-a2b0-47dd-9ad5-b9a2c04fdc59",
            "title": "Payment",
            "fullFile": "D:\\api\\controllers\\test\\payment\\disableAccount.enterprise.js",
            "file": "\\controllers\\test\\payment\\disableAccount.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "99cf1696-d110-452a-ae63-b3396b7e8ed9",
                "title": "Payment.disableAccount",
                "fullFile": "D:\\api\\controllers\\test\\payment\\disableAccount.enterprise.js",
                "file": "\\controllers\\test\\payment\\disableAccount.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Enterprise Payment Payment.disableAccount \"before all\" hook",
                    "timedOut": false,
                    "duration": 334,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n    _models.Mail.remove({ $or: [{ to: new RegExp('^test.user+', \"i\") }, { to: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n        commonMock.setSignUpMocks(httpmock, \"enterprise\");\n        api.post(\"/enterprise/v1/signup\")\n            .send(registrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    authToken = res.body.output.authtoken;\n                    _id = res.body.output._id;\n                    commonMock.braintreeSubscription(httpmock, \"enterprise\");\n                    commonMock.braintreeUpdatePaymentMethod(httpmock, \"enterprise\");\n                    api.post(\"/enterprise/v1/user/account/creditcards\")\n                        .send(saveCardBody)\n                        .set('authtoken', authToken)\n                        .expect(httpStatus.OK)\n                        .end(function(err, res) {\n                            if (err) {\n                                done(err);\n                            } else {\n                                done();\n                            }\n                        });\n                }\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "56e89522-4ce1-4a44-a039-4a096bbb4ad3",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Payment Payment.disableAccount \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5f6eaa7d-37be-4932-a3b8-9c433fb71d57",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should disable register user plan.",
                    "fullTitle": "Enterprise Payment Payment.disableAccount Should disable register user plan.",
                    "timedOut": false,
                    "duration": 263,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.braintreeCancelSubscription(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send({})\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.force_suspend == false &&\n                res.body.output.set_disable_status &&\n                typeof(res.body.output.authtoken) == \"string\";\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9b6d0da1-3b4a-425c-b3bb-070f33ea4d0f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Payment Payment.disableAccount Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.braintreeCancelSubscription(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send({})\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ac67ec8e-81c6-48b4-a0ec-c0eca6ecedeb",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "9b6d0da1-3b4a-425c-b3bb-070f33ea4d0f",
                  "ac67ec8e-81c6-48b4-a0ec-c0eca6ecedeb"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 276,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "90d81fc3-cbe5-4d5d-92f2-abd1c375b045",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\payment\\errorWhileBraintreeSubscription.enterprise.js",
        "file": "\\controllers\\test\\payment\\errorWhileBraintreeSubscription.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "cc6560c2-2dd4-4fd5-8693-ca5363eb261c",
            "title": "Payment",
            "fullFile": "D:\\api\\controllers\\test\\payment\\errorWhileBraintreeSubscription.enterprise.js",
            "file": "\\controllers\\test\\payment\\errorWhileBraintreeSubscription.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "d9b024b5-15ee-4590-aacc-04d58f0a1693",
                "title": "Payment.errorWhileBraintreeSubscription",
                "fullFile": "D:\\api\\controllers\\test\\payment\\errorWhileBraintreeSubscription.enterprise.js",
                "file": "\\controllers\\test\\payment\\errorWhileBraintreeSubscription.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Payment Payment.errorWhileBraintreeSubscription \"before each\" hook",
                    "timedOut": false,
                    "duration": 349,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    commonMock.setSignUpMocks(httpmock, \"enterprise\");\n    api.post(\"/enterprise/v1/signup\")\n        .send(registrationBody)\n        .expect(httpStatus.CREATED)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                authToken = res.body.output.authtoken;\n                _id = res.body.output._id;\n                _braintreeCustId = res.body.output.braintree_customerId;\n                _userUid = res.body.output.uid;\n                subscriptionError.options[\"braintree_customerId\"] = _braintreeCustId;\n                commonMock.braintreeSubscription(httpmock, \"enterprise\");\n                commonMock.braintreeUpdatePaymentMethod(httpmock, \"enterprise\");\n                api.post(\"/enterprise/v1/user/account/creditcards\")\n                    .send(saveCardBody)\n                    .set('authtoken', authToken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            done();\n                        }\n                    });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "183cf174-ce56-449b-b7fa-2fcf527f3405",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Payment Payment.errorWhileBraintreeSubscription \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0003853a-f74c-4d0e-9d23-4871403ddabb",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should increment subscription failure count",
                    "fullTitle": "Enterprise Payment Payment.errorWhileBraintreeSubscription Should increment subscription failure count",
                    "timedOut": false,
                    "duration": 61,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.braintreeCancelSubscription(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(subscriptionError)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            commonMock.brainTreeClientToken(httpmock, \"enterprise\");\n            api.get(\"/enterprise/v1/user\")\n                .set('authtoken', authToken)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    res.body.output.subscription_failure_count.should.equal(1);\n                    done();\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9dded505-0710-4e17-bbe1-70e754259aa4",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should increment subscription failure count for org user.",
                    "fullTitle": "Enterprise Payment Payment.errorWhileBraintreeSubscription Should increment subscription failure count for org user.",
                    "timedOut": false,
                    "duration": 203,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRecordsEntry({}, function(data) {\n    commonMock.braintreeCancelSubscription(httpmock, \"enterprise\");\n    var temp_subscriptionError = getImmutable(subscriptionError);\n    temp_subscriptionError.options.braintree_customerId = data.organization_account.braintree_customerId;\n    api.post(apiURL)\n        .send(temp_subscriptionError)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                _models.User.findOne({\n                    uid: data.organization.user_uid\n                }, function(error, user) {\n                    user.subscription_failure_count.should.equal(1);\n                    done();\n                });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "99207eb9-3192-46f5-a166-1d307e6f035f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should suspend user, if subscription failure count is greater than two.",
                    "fullTitle": "Enterprise Payment Payment.errorWhileBraintreeSubscription Should suspend user, if subscription failure count is greater than two.",
                    "timedOut": false,
                    "duration": 63,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.braintreeCancelSubscription(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(subscriptionError)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            commonMock.braintreeCancelSubscription(httpmock, \"enterprise\");\n            api.post(apiURL)\n                .send(subscriptionError)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        commonMock.braintreeCancelSubscription(httpmock, \"enterprise\");\n                        api.post(apiURL)\n                            .send(subscriptionError)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    _models.User.findOne({\n                                        uid: _userUid\n                                    }, function(error, user) {\n                                        user.force_suspend.should.equal(true);\n                                        done();\n                                    });\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b3957622-cb3b-496d-a66d-845545727181",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should suspend user, if subscription failure count is greater than two for org user.",
                    "fullTitle": "Enterprise Payment Payment.errorWhileBraintreeSubscription Should suspend user, if subscription failure count is greater than two for org user.",
                    "timedOut": false,
                    "duration": 199,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRecordsEntry({}, function(data) {\n    var temp_subscriptionError = getImmutable(subscriptionError);\n    temp_subscriptionError.options.braintree_customerId = data.organization_account.braintree_customerId;\n    _models.User.findOneAndUpdate({\n        braintree_customerId: temp_subscriptionError.options.braintree_customerId\n    }, {\n        subscription_failure_count: 5\n    }, { new: true }, function(error, user) {\n        commonMock.braintreeCancelSubscription(httpmock, \"enterprise\");\n        api.post(apiURL)\n            .send(temp_subscriptionError)\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    _models.User.findOne({\n                        uid: data.organization_account.uid\n                    }, function(error, user) {\n                        user.force_suspend.should.equal(true);\n                        done();\n                    });\n                }\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "077c7eb3-5172-4a02-9efa-5805371c2bb0",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "9dded505-0710-4e17-bbe1-70e754259aa4",
                  "99207eb9-3192-46f5-a166-1d307e6f035f",
                  "b3957622-cb3b-496d-a66d-845545727181",
                  "077c7eb3-5172-4a02-9efa-5805371c2bb0"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 526,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "5e9bb35a-36f3-42bf-9383-82505f3b40bf",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\payment\\expiredInBraintreeSubscription.enterprise.js",
        "file": "\\controllers\\test\\payment\\expiredInBraintreeSubscription.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "f99b45b3-ffa0-49cb-ac69-9b261b8cfeae",
            "title": "Payment",
            "fullFile": "D:\\api\\controllers\\test\\payment\\expiredInBraintreeSubscription.enterprise.js",
            "file": "\\controllers\\test\\payment\\expiredInBraintreeSubscription.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "08627312-9537-4706-98e4-3f1aae4d62a1",
                "title": "Payment.expiredInBraintreeSubscription",
                "fullFile": "D:\\api\\controllers\\test\\payment\\expiredInBraintreeSubscription.enterprise.js",
                "file": "\\controllers\\test\\payment\\expiredInBraintreeSubscription.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Payment Payment.expiredInBraintreeSubscription \"before each\" hook",
                    "timedOut": false,
                    "duration": 389,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    commonMock.setSignUpMocks(httpmock, \"enterprise\");\n    api.post(\"/enterprise/v1/signup\")\n        .send(registrationBody)\n        .expect(httpStatus.CREATED)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                authToken = res.body.output.authtoken;\n                _id = res.body.output._id;\n                _braintreeCustId = res.body.output.braintree_customerId;\n                _userUid = res.body.output.uid;\n                subscribedPayload.options[\"braintree_customerId\"] = _braintreeCustId;\n                subscriptionExpire.options[\"braintree_customerId\"] = _braintreeCustId;\n                commonMock.braintreeSubscription(httpmock, \"enterprise\");\n                commonMock.braintreeUpdatePaymentMethod(httpmock, \"enterprise\");\n                api.post(\"/enterprise/v1/user/account/creditcards\")\n                    .send(saveCardBody)\n                    .set('authtoken', authToken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            commonMock.braintreeSubscription(httpmock, \"enterprise\");\n                            commonMock.intercomUserUpdate(httpmock, \"enterprise\");\n                            api.post(\"/v1/webhook/subscription/start\")\n                                .send(subscribedPayload)\n                                .expect(httpStatus.OK)\n                                .end(function(err, res) {\n                                    if (err) {\n                                        done(err);\n                                    } else {\n                                        done();\n                                    }\n                                });\n                        }\n                    });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "81529f64-a356-49c2-af99-f7484f7d7444",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Payment Payment.expiredInBraintreeSubscription \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2e4243ca-bfc3-4662-a8d4-91561575c94b",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should expired subscription.",
                    "fullTitle": "Enterprise Payment Payment.expiredInBraintreeSubscription Should expired subscription.",
                    "timedOut": false,
                    "duration": 82,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.braintreeCancelSubscription(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(subscriptionExpire)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            commonMock.brainTreeClientToken(httpmock, \"enterprise\");\n            api.get(\"/enterprise/v1/user\")\n                .set('authtoken', authToken)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        var isValid = res.body.output.force_suspend &&\n                            res.body.output.uid == _userUid;\n                        isValid.should.equal(true);\n                        done();\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "afac4620-5ab6-4091-bd25-8e0ecfbdaa3a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should expired subscription for org user.",
                    "fullTitle": "Enterprise Payment Payment.expiredInBraintreeSubscription Should expired subscription for org user.",
                    "timedOut": false,
                    "duration": 226,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRecordsEntry({}, function(data) {\n    commonMock.braintreeCancelSubscription(httpmock, \"enterprise\");\n    var temp_subscriptionExpire = getImmutable(subscriptionExpire);\n    temp_subscriptionExpire.options.braintree_customerId = data.organization_account.braintree_customerId;\n    api.post(apiURL)\n        .send(temp_subscriptionExpire)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                _models.User.findOne({\n                    uid: data.organization.user_uid\n                }, function(error, user) {\n                    user.force_suspend.should.equal(true);\n                    done();\n                });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "88913d78-eccb-464a-bb6c-4dc1edb80c51",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "afac4620-5ab6-4091-bd25-8e0ecfbdaa3a",
                  "88913d78-eccb-464a-bb6c-4dc1edb80c51"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 308,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "34ae1871-40ef-440d-9c39-6f61bd614da1",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\payment\\getBillByUIDOrg.enterprise.js",
        "file": "\\controllers\\test\\payment\\getBillByUIDOrg.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "338886dc-7ca4-4879-9d59-7e292b4bcae3",
            "title": "Payment",
            "fullFile": "D:\\api\\controllers\\test\\payment\\getBillByUIDOrg.enterprise.js",
            "file": "\\controllers\\test\\payment\\getBillByUIDOrg.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "3072360b-9a3c-4b07-b006-0bc60da0961b",
                "title": "Payment.getBillByUIDOrg",
                "fullFile": "D:\\api\\controllers\\test\\payment\\getBillByUIDOrg.enterprise.js",
                "file": "\\controllers\\test\\payment\\getBillByUIDOrg.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Payment Payment.getBillByUIDOrg \"before each\" hook",
                    "timedOut": false,
                    "duration": 1613,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_acc_authToken = _.first(data.organization_account.authtoken);\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        api.get(\"/enterprise/v1/projects\")\n            .set('org_uid', org_uid)\n            .set('authtoken', authToken)\n            .expect(httpStatus.OK)\n            .end(function(error, res) {\n                project_uid = _.first(res.body.output.projects).uid\n                saveBillEntries(\n                    _.extend(getImmutable(billBody), {\n                        authtoken: authToken\n                    }),\n                    function(error, bills) {\n                        savedBills = bills;\n                        done();\n                    });\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b0063eb1-76f3-4bc8-b224-3a7d094fd7af",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Payment Payment.getBillByUIDOrg \"after each\" hook",
                    "timedOut": false,
                    "duration": 10,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ntestCollection.organizationRemoveRecords({}, function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "54bf6ae3-348c-451c-be0f-4ab2e9a1f626",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should gives bill on providing bill uid.",
                    "fullTitle": "Enterprise Payment Payment.getBillByUIDOrg Should gives bill on providing bill uid.",
                    "timedOut": false,
                    "duration": 49,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL.replace(\":bill_uid\", savedBills[0].body.output.uid);\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.uid.should.equal(savedBills[0].body.output.uid);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "84d71ae6-5a7d-4493-a7e6-2a528f8a1c2d",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not gives bill on providing wrong bill uid.",
                    "fullTitle": "Enterprise Payment Payment.getBillByUIDOrg Should not gives bill on providing wrong bill uid.",
                    "timedOut": false,
                    "duration": 45,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL.replace(\":bill_uid\", \"flabc\");\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.USER_BILLS_NOT_EXISTS);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ea8e5d01-ce5d-4cc8-a936-12fc90c53a29",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Payment Payment.getBillByUIDOrg Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "71aa2c4a-8db2-4f10-ac91-6a7f40afdffd",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "84d71ae6-5a7d-4493-a7e6-2a528f8a1c2d",
                  "ea8e5d01-ce5d-4cc8-a936-12fc90c53a29",
                  "71aa2c4a-8db2-4f10-ac91-6a7f40afdffd"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 103,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "8e3f8d25-2f0e-481a-8a29-4224650dc725",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\payment\\getBillLogs.enterprise.js",
        "file": "\\controllers\\test\\payment\\getBillLogs.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "6b37576d-981f-4179-9814-3e347a44234b",
            "title": "Payment",
            "fullFile": "D:\\api\\controllers\\test\\payment\\getBillLogs.enterprise.js",
            "file": "\\controllers\\test\\payment\\getBillLogs.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "c1513f8b-128b-4b03-8fc8-212694937c47",
                "title": "Payment.getBillLogs",
                "fullFile": "D:\\api\\controllers\\test\\payment\\getBillLogs.enterprise.js",
                "file": "\\controllers\\test\\payment\\getBillLogs.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Enterprise Payment Payment.getBillLogs \"before all\" hook",
                    "timedOut": false,
                    "duration": 1578,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n    _models.Mail.remove({ $or: [{ to: new RegExp('^test.user+', \"i\") }, { to: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n        _models.Bill.remove({ flow_name: new RegExp('^utest_cases_', \"i\") }, function(error, user) {\n            commonMock.setSignUpMocks(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/signup\")\n                .send(registrationBody)\n                .expect(httpStatus.CREATED)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        authToken = res.body.output.authtoken;\n                        _id = res.body.output._id;\n                        uid = res.body.output.uid;\n                        apiURL = apiURL.replace(\":uid\", uid);\n                        saveBillEntries(\n                            _.extend(getImmutable(billBody), {\n                                authtoken: authToken\n                            }),\n                            function(error, bills) {\n                                savedBills = bills;\n                                done();\n                            });\n                    }\n                });\n        });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cb0b3564-078a-494b-b65a-86deb566c336",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Payment Payment.getBillLogs \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b0dff32e-079a-4725-9266-b7cfc6d28369",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get list of bills.",
                    "fullTitle": "Enterprise Payment Payment.getBillLogs Should get list of bills.",
                    "timedOut": false,
                    "duration": 39,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = typeof(res.body.output.count) == \"number\" &&\n                Array.isArray(res.body.output.objects);\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\";\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bbe23f6c-d769-4fe4-a346-0a2c2e25e41e",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should gives bill on filteration.",
                    "fullTitle": "Enterprise Payment Payment.getBillLogs Should gives bill on filteration.",
                    "timedOut": false,
                    "duration": 40,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?filter=utest_cases_1\"\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.count == 1 &&\n                Array.isArray(res.body.output.objects);\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\";\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "54881fae-bd52-4316-ae59-9aeae9cd9cdc",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not gives bill on filteration.",
                    "fullTitle": "Enterprise Payment Payment.getBillLogs Should not gives bill on filteration.",
                    "timedOut": false,
                    "duration": 37,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?filter=utest_cases_122\"\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.USER_BILLS_NOT_EXISTS);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "73d87f1a-fa28-45bf-9a61-b09de6fb710f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should gives bills on respective flow ids selections.",
                    "fullTitle": "Enterprise Payment Payment.getBillLogs Should gives bills on respective flow ids selections.",
                    "timedOut": false,
                    "duration": 40,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=fld5aaeb1211f273e3c41f01,fld5aaeb1211f273e3c41f02\"\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.count == 2 &&\n                Array.isArray(res.body.output.objects);\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\";\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "62986405-5add-45bd-ae2c-ba8ef43488be",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not gives bills on wrong flow ids selections.",
                    "fullTitle": "Enterprise Payment Payment.getBillLogs Should not gives bills on wrong flow ids selections.",
                    "timedOut": false,
                    "duration": 32,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=fld5aaeb1211f273e3c41f15,fld5aaeb1211f273e3c41f99\"\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.USER_BILLS_NOT_EXISTS);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9224f754-28d4-48e3-9ec6-2e4d45b204e0",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should gives bill on providing bill id.",
                    "fullTitle": "Enterprise Payment Payment.getBillLogs Should gives bill on providing bill id.",
                    "timedOut": false,
                    "duration": 40,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?bill_uid=\" + savedBills[0].body.output.uid;\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.count == 1 &&\n                Array.isArray(res.body.output.objects);\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\";\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a7768acf-3379-495e-b20c-1075a2e7aa15",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not gives bill on providing wrong bill id.",
                    "fullTitle": "Enterprise Payment Payment.getBillLogs Should not gives bill on providing wrong bill id.",
                    "timedOut": false,
                    "duration": 44,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?bill_uid=flabc\";\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.USER_BILLS_NOT_EXISTS);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "88d55fb7-17ae-42a0-b210-3517040f270f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should gives 2 bills after skiping 2 bills.",
                    "fullTitle": "Enterprise Payment Payment.getBillLogs Should gives 2 bills after skiping 2 bills.",
                    "timedOut": false,
                    "duration": 55,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?limit=2&skip=2\";\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            _models.Bill.find({\n                deleted_at: null,\n                user_uid: uid\n            }).sort({ \"created_at\": 1 }).lean().exec(function(error, bills) {\n                if (error) {\n                    done(error);\n                } else {\n                    //bills = bills;\n                    //bills = utils.sortBy(bills, \"created_at\", \"date\");\n                    var validOutput = false;\n                    if (res.body.output.count == 10) {\n                        validOutput = res.body.output.objects[0].uid == bills[2].uid &&\n                            res.body.output.objects[1].uid == bills[3].uid;\n                        if (validOutput) {\n                            _.each(res.body.output.objects, function(item) {\n                                validOutput = validOutput &&\n                                    typeof(item._id) == \"undefined\" &&\n                                    typeof(item.__v) == \"undefined\";\n                            });\n                        }\n                    }\n                    validOutput.should.equal(true);\n                    done();\n                }\n            });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f0699cec-79d8-4fd5-8028-f966d489c2fc",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should gives bills in ascending order.",
                    "fullTitle": "Enterprise Payment Payment.getBillLogs Should gives bills in ascending order.",
                    "timedOut": false,
                    "duration": 48,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?field=created_at&order=asc\";\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            _models.Bill.find({\n                deleted_at: null,\n                user_uid: uid\n            }).sort({ \"created_at\": 1 }).lean().exec(function(error, bills) {\n                if (error) {\n                    done(error);\n                } else {\n                    //bills = convert.getJSON(bills);\n                    //bills = utils.sortBy(bills, \"created_at\", \"date\");\n                    var validOutput = false;\n                    if (res.body.output.count == 10) {\n                        validOutput = res.body.output.objects[0].uid == bills[0].uid &&\n                            res.body.output.objects[9].uid == bills[9].uid;\n                        if (validOutput) {\n                            _.each(res.body.output.objects, function(item) {\n                                validOutput = validOutput &&\n                                    typeof(item._id) == \"undefined\" &&\n                                    typeof(item.__v) == \"undefined\";\n                            });\n                        }\n                    }\n                    validOutput.should.equal(true);\n                    done();\n                }\n            });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a3842675-03e5-45ef-b0a6-025594a5b4bc",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Payment Payment.getBillLogs Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "de04854f-cfc9-477a-9165-d1b8856ed036",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "bbe23f6c-d769-4fe4-a346-0a2c2e25e41e",
                  "54881fae-bd52-4316-ae59-9aeae9cd9cdc",
                  "73d87f1a-fa28-45bf-9a61-b09de6fb710f",
                  "62986405-5add-45bd-ae2c-ba8ef43488be",
                  "9224f754-28d4-48e3-9ec6-2e4d45b204e0",
                  "a7768acf-3379-495e-b20c-1075a2e7aa15",
                  "88d55fb7-17ae-42a0-b210-3517040f270f",
                  "f0699cec-79d8-4fd5-8028-f966d489c2fc",
                  "a3842675-03e5-45ef-b0a6-025594a5b4bc",
                  "de04854f-cfc9-477a-9165-d1b8856ed036"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 384,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "15893cdf-c9a4-4dce-b0f8-e1a360b6cabf",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\payment\\getBillLogsOrg.enterprise.js",
        "file": "\\controllers\\test\\payment\\getBillLogsOrg.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "cab73618-3d3f-4c81-8957-36e03f74e5b7",
            "title": "Payment",
            "fullFile": "D:\\api\\controllers\\test\\payment\\getBillLogsOrg.enterprise.js",
            "file": "\\controllers\\test\\payment\\getBillLogsOrg.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "9cda2c22-d3a1-4f26-9741-97c8f4f7eb6c",
                "title": "Payment.getBillLogsOrg",
                "fullFile": "D:\\api\\controllers\\test\\payment\\getBillLogsOrg.enterprise.js",
                "file": "\\controllers\\test\\payment\\getBillLogsOrg.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Payment Payment.getBillLogsOrg \"before each\" hook",
                    "timedOut": false,
                    "duration": 1786,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        saveBillEntries(\n            _.extend(getImmutable(billBody), {\n                authtoken: authToken\n            }),\n            function(error, bills) {\n                savedBills = bills;\n                done();\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "dbfc16f2-891c-4a31-b2e5-ac12bd2516d3",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Payment Payment.getBillLogsOrg \"after each\" hook",
                    "timedOut": false,
                    "duration": 9,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ntestCollection.organizationRemoveRecords({}, function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ef413995-224f-45d7-8cea-74a59f4ab58d",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get list of bills.",
                    "fullTitle": "Enterprise Payment Payment.getBillLogsOrg Should get list of bills.",
                    "timedOut": false,
                    "duration": 53,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = typeof(res.body.output.count) == \"number\" &&\n                Array.isArray(res.body.output.objects);\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\";\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7470c31c-df21-4b5d-9ac3-3785e787b53f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should gives bill on filteration.",
                    "fullTitle": "Enterprise Payment Payment.getBillLogsOrg Should gives bill on filteration.",
                    "timedOut": false,
                    "duration": 40,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?filter=utest_cases_1\"\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.count == 1 &&\n                Array.isArray(res.body.output.objects);\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\";\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6e86e17d-7b11-47fb-86f7-52496854ff14",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not gives bill on filteration.",
                    "fullTitle": "Enterprise Payment Payment.getBillLogsOrg Should not gives bill on filteration.",
                    "timedOut": false,
                    "duration": 48,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?filter=utest_cases_122\"\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.USER_BILLS_NOT_EXISTS);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "24f6dfc9-22f3-4dca-bea6-337c46e31cf5",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should gives bills on respective flow ids selections.",
                    "fullTitle": "Enterprise Payment Payment.getBillLogsOrg Should gives bills on respective flow ids selections.",
                    "timedOut": false,
                    "duration": 47,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=fld5aaeb1211f273e3c41f01,fld5aaeb1211f273e3c41f02\"\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.count == 2 &&\n                Array.isArray(res.body.output.objects);\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\";\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "72e8bac8-6d22-41b9-8106-381f74313c66",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not gives bills on wrong flow ids selections.",
                    "fullTitle": "Enterprise Payment Payment.getBillLogsOrg Should not gives bills on wrong flow ids selections.",
                    "timedOut": false,
                    "duration": 44,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=fld5aaeb1211f273e3c41f15,fld5aaeb1211f273e3c41f99\"\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.USER_BILLS_NOT_EXISTS);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "97dddf02-0141-4ee1-987e-d097e1de9801",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should gives bill on providing bill id.",
                    "fullTitle": "Enterprise Payment Payment.getBillLogsOrg Should gives bill on providing bill id.",
                    "timedOut": false,
                    "duration": 44,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?bill_uid=\" + savedBills[0].body.output.uid;\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.count == 1 &&\n                Array.isArray(res.body.output.objects);\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\";\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5303f0e0-3908-4ddb-9b7a-0879a6e01197",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not gives bill on providing wrong bill id.",
                    "fullTitle": "Enterprise Payment Payment.getBillLogsOrg Should not gives bill on providing wrong bill id.",
                    "timedOut": false,
                    "duration": 45,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?bill_uid=flabc\";\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.USER_BILLS_NOT_EXISTS);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9a0e1e2d-44ce-4e25-b052-28d36dc4c3c2",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should gives 2 bills after skiping 2 bills.",
                    "fullTitle": "Enterprise Payment Payment.getBillLogsOrg Should gives 2 bills after skiping 2 bills.",
                    "timedOut": false,
                    "duration": 49,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?limit=2&skip=2\";\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            _models.Bill.find({\n                deleted_at: null,\n                user_uid: org_account_uid\n            }).sort({ \"created_at\": 1 }).lean().exec(function(error, bills) {\n                if (error) {\n                    done(error);\n                } else {\n                    //bills = bills;\n                    //bills = utils.sortBy(bills, \"created_at\", \"date\");\n                    var validOutput = false;\n                    if (res.body.output.count == 10) {\n                        validOutput = res.body.output.objects[0].uid == bills[2].uid &&\n                            res.body.output.objects[1].uid == bills[3].uid;\n                        if (validOutput) {\n                            _.each(res.body.output.objects, function(item) {\n                                validOutput = validOutput &&\n                                    typeof(item._id) == \"undefined\" &&\n                                    typeof(item.__v) == \"undefined\";\n                            });\n                        }\n                    }\n                    validOutput.should.equal(true);\n                    done();\n                }\n            });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8b63a7e8-cf50-4c79-be24-50a6563aa4df",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should gives bills in ascending order.",
                    "fullTitle": "Enterprise Payment Payment.getBillLogsOrg Should gives bills in ascending order.",
                    "timedOut": false,
                    "duration": 57,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?field=created_at&order=asc\";\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            _models.Bill.find({\n                deleted_at: null,\n                user_uid: org_account_uid\n            }).sort({ \"created_at\": 1 }).lean().exec(function(error, bills) {\n                if (error) {\n                    done(error);\n                } else {\n                    //bills = convert.getJSON(bills);\n                    //bills = utils.sortBy(bills, \"created_at\", \"date\");\n                    var validOutput = false;\n                    if (res.body.output.count == 10) {\n                        validOutput = res.body.output.objects[0].uid == bills[0].uid &&\n                            res.body.output.objects[9].uid == bills[9].uid;\n                        if (validOutput) {\n                            _.each(res.body.output.objects, function(item) {\n                                validOutput = validOutput &&\n                                    typeof(item._id) == \"undefined\" &&\n                                    typeof(item.__v) == \"undefined\";\n                            });\n                        }\n                    }\n                    validOutput.should.equal(true);\n                    done();\n                }\n            });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "531a0091-9fe5-4e51-b2b6-24f6e91d3588",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Payment Payment.getBillLogsOrg Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a58c4e3c-7101-4ccf-af07-c95dd46f95f1",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "7470c31c-df21-4b5d-9ac3-3785e787b53f",
                  "6e86e17d-7b11-47fb-86f7-52496854ff14",
                  "24f6dfc9-22f3-4dca-bea6-337c46e31cf5",
                  "72e8bac8-6d22-41b9-8106-381f74313c66",
                  "97dddf02-0141-4ee1-987e-d097e1de9801",
                  "5303f0e0-3908-4ddb-9b7a-0879a6e01197",
                  "9a0e1e2d-44ce-4e25-b052-28d36dc4c3c2",
                  "8b63a7e8-cf50-4c79-be24-50a6563aa4df",
                  "531a0091-9fe5-4e51-b2b6-24f6e91d3588",
                  "a58c4e3c-7101-4ccf-af07-c95dd46f95f1"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 437,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "e5e4df0f-1493-4ba5-a5a9-1a87944c5ddf",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\payment\\getBraintreeToken.enterprise.js",
        "file": "\\controllers\\test\\payment\\getBraintreeToken.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "da904153-8449-4b3a-82c9-2036100cf792",
            "title": "Payment",
            "fullFile": "D:\\api\\controllers\\test\\payment\\getBraintreeToken.enterprise.js",
            "file": "\\controllers\\test\\payment\\getBraintreeToken.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "6aff717e-9e2e-4284-9355-ccba4046a892",
                "title": "Payment.getBraintreeToken",
                "fullFile": "D:\\api\\controllers\\test\\payment\\getBraintreeToken.enterprise.js",
                "file": "\\controllers\\test\\payment\\getBraintreeToken.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Enterprise Payment Payment.getBraintreeToken \"before all\" hook",
                    "timedOut": false,
                    "duration": 247,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n    _models.Mail.remove({ $or: [{ to: new RegExp('^test.user+', \"i\") }, { to: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n        commonMock.setSignUpMocks(httpmock, \"enterprise\");\n        api.post(\"/enterprise/v1/signup\")\n            .send(registrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    authToken = res.body.output.authtoken;\n                    _id = res.body.output._id;\n                    user_uid = res.body.output.uid;\n                    done();\n                }\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "15ae80f4-db99-4fca-9bc7-6bb47b767471",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Payment Payment.getBraintreeToken \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ebe6eada-4225-41ad-9e48-6b0c97472d4f",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get client braintree token.",
                    "fullTitle": "Enterprise Payment Payment.getBraintreeToken Should get client braintree token.",
                    "timedOut": false,
                    "duration": 56,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.brainTreeClientToken(httpmock, \"enterprise\");\napi.get(apiURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.token.should.not.equal(\"\");\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9659ed42-5931-4e55-a574-83a7e335a0ab",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get client braintree token, if user have braintree id is blank.",
                    "fullTitle": "Enterprise Payment Payment.getBraintreeToken Should get client braintree token, if user have braintree id is blank.",
                    "timedOut": false,
                    "duration": 93,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.brainTreeClientToken(httpmock, \"enterprise\");\napi.get(apiURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            _models.User.findOne({\n                uid: user_uid\n            }).lean().exec(function(err, user) {\n                if (err) {\n                    done(err);\n                } else {\n                    var braintree_customerId = user.braintree_customerId;\n                    _models.User.findOneAndUpdate({\n                        uid: user_uid\n                    }, {\n                        payment_set: \"\",\n                        braintree_customerId: \"\"\n                    }).lean().exec(function(err, user) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            commonMock.brainTreeCustomerCreate(httpmock, \"enterprise\");\n                            commonMock.brainTreeClientToken(httpmock, \"enterprise\");\n                            commonMock.brainTreeGenerateAuthToken(httpmock, \"enterprise\");\n                            api.get(apiURL)\n                                .set('authtoken', authToken)\n                                .expect(httpStatus.OK)\n                                .end(function(err, res) {\n                                    if (err) {\n                                        done(err);\n                                    } else {\n                                        _models.User.findOne({\n                                            uid: user_uid\n                                        }).lean().exec(function(err, user) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                (\n                                                    res.body.output.token != \"\" &&\n                                                    user.braintree_customerId != \"\"\n                                                ).should.equal(true);\n                                                done();\n                                            }\n                                        });\n                                    }\n                                });\n                        }\n                    });\n                }\n            });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "895e85be-de19-488c-a828-606df5b7fe1e",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get client braintree token, if user have invalid braintree id.",
                    "fullTitle": "Enterprise Payment Payment.getBraintreeToken Should get client braintree token, if user have invalid braintree id.",
                    "timedOut": false,
                    "duration": 95,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.brainTreeClientToken(httpmock, \"enterprise\");\napi.get(apiURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            _models.User.findOne({\n                uid: user_uid\n            }).lean().exec(function(error, user) {\n                if (err) {\n                    done(err);\n                } else {\n                    var braintree_customerId = user.braintree_customerId;\n                    _models.User.findOneAndUpdate({\n                        uid: user_uid\n                    }, {\n                        payment_set: \"\",\n                        braintree_customerId: \"00000005620\"\n                    }).lean().exec(function(error, user) {\n                        if (error) {\n                            done(error);\n                        } else {\n                            commonMock.brainTreeCustomerCreate(httpmock, \"enterprise\");\n                            commonMock.brainTreeClientToken(httpmock, \"enterprise\");\n                            commonMock.brainTreeGenerateAuthToken(httpmock, \"enterprise\");\n                            api.get(apiURL)\n                                .set('authtoken', authToken)\n                                .expect(httpStatus.OK)\n                                .end(function(err, res) {\n                                    if (err) {\n                                        done(err);\n                                    } else {\n                                        _models.User.findOne({\n                                            uid: user_uid\n                                        }).lean().exec(function(error, user) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                (\n                                                    res.body.output.token != \"\" &&\n                                                    user.braintree_customerId != \"\"\n                                                ).should.equal(true);\n                                                done();\n                                            }\n                                        });\n                                    }\n                                });\n                        }\n                    });\n                }\n            });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5cc77175-d179-4397-a1b6-43b781f757ca",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get client braintree token, if user have default invalid braintree id.",
                    "fullTitle": "Enterprise Payment Payment.getBraintreeToken Should get client braintree token, if user have default invalid braintree id.",
                    "timedOut": false,
                    "duration": 99,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.brainTreeClientToken(httpmock, \"enterprise\");\napi.get(apiURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            _models.User.findOne({\n                uid: user_uid\n            }).lean().exec(function(error, user) {\n                if (err) {\n                    done(err);\n                } else {\n                    var braintree_customerId = user.braintree_customerId;\n                    _models.User.findOneAndUpdate({\n                        uid: user_uid\n                    }, {\n                        payment_set: \"\",\n                        braintree_customerId: \"210934322\"\n                    }).lean().exec(function(error, user) {\n                        if (error) {\n                            done(error);\n                        } else {\n                            commonMock.brainTreeCustomerCreate(httpmock, \"enterprise\");\n                            commonMock.brainTreeClientToken(httpmock, \"enterprise\");\n                            commonMock.brainTreeGenerateAuthToken(httpmock, \"enterprise\");\n                            api.get(apiURL)\n                                .set('authtoken', authToken)\n                                .expect(httpStatus.OK)\n                                .end(function(err, res) {\n                                    if (err) {\n                                        done(err);\n                                    } else {\n                                        _models.User.findOne({\n                                            uid: user_uid\n                                        }).lean().exec(function(error, user) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                (\n                                                    res.body.output.token != \"\" &&\n                                                    user.braintree_customerId != \"\"\n                                                ).should.equal(true);\n                                                done();\n                                            }\n                                        });\n                                    }\n                                });\n                        }\n                    });\n                }\n            });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "40d245cc-b220-408e-a73a-7b78753bc4dd",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Payment Payment.getBraintreeToken Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.brainTreeClientToken(httpmock, \"enterprise\");\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ea59e753-b981-4bf6-a51d-0acd105bba44",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "9659ed42-5931-4e55-a574-83a7e335a0ab",
                  "895e85be-de19-488c-a828-606df5b7fe1e",
                  "5cc77175-d179-4397-a1b6-43b781f757ca",
                  "40d245cc-b220-408e-a73a-7b78753bc4dd",
                  "ea59e753-b981-4bf6-a51d-0acd105bba44"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 354,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "0f744b99-2c2b-4d4f-91cd-6aaca9b727c6",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\payment\\getBraintreeTokenOrg.enterprise.js",
        "file": "\\controllers\\test\\payment\\getBraintreeTokenOrg.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "ca48f91e-0e5f-43ce-bc38-64de56d32ecb",
            "title": "Payment",
            "fullFile": "D:\\api\\controllers\\test\\payment\\getBraintreeTokenOrg.enterprise.js",
            "file": "\\controllers\\test\\payment\\getBraintreeTokenOrg.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "aeb23b28-7dc9-44a2-823a-fc4c3cbc0bb8",
                "title": "Payment.getBraintreeTokenOrg",
                "fullFile": "D:\\api\\controllers\\test\\payment\\getBraintreeTokenOrg.enterprise.js",
                "file": "\\controllers\\test\\payment\\getBraintreeTokenOrg.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Payment Payment.getBraintreeTokenOrg \"before each\" hook",
                    "timedOut": false,
                    "duration": 200,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f5bf65d2-39ee-448a-b7a1-c338e8fa9b7f",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Payment Payment.getBraintreeTokenOrg \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "60c0fa48-77d4-4e2c-8e16-d58a533a5e63",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get client braintree token.",
                    "fullTitle": "Enterprise Payment Payment.getBraintreeTokenOrg Should get client braintree token.",
                    "timedOut": false,
                    "duration": 43,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.brainTreeClientToken(httpmock, \"enterprise\");\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.token.should.not.equal(\"\");\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7f3b1325-1bc5-4c13-ae7e-30b96146cdf2",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get client braintree token, if user have braintree id is blank.",
                    "fullTitle": "Enterprise Payment Payment.getBraintreeTokenOrg Should get client braintree token, if user have braintree id is blank.",
                    "timedOut": false,
                    "duration": 103,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.brainTreeClientToken(httpmock, \"enterprise\");\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            _models.User.findOne({\n                uid: org_account_uid\n            }).lean().exec(function(err, user) {\n                if (err) {\n                    done(err);\n                } else {\n                    var braintree_customerId = user.braintree_customerId;\n                    _models.User.findOneAndUpdate({\n                        uid: org_account_uid\n                    }, {\n                        payment_set: \"\",\n                        braintree_customerId: \"\"\n                    }).lean().exec(function(err, user) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            commonMock.brainTreeCustomerCreate(httpmock, \"enterprise\");\n                            commonMock.brainTreeClientToken(httpmock, \"enterprise\");\n                            commonMock.brainTreeGenerateAuthToken(httpmock, \"enterprise\");\n                            api.get(apiURL)\n                                .set('org_uid', org_uid)\n                                .set('authtoken', authToken)\n                                .expect(httpStatus.OK)\n                                .end(function(err, res) {\n                                    if (err) {\n                                        done(err);\n                                    } else {\n                                        _models.User.findOne({\n                                            uid: org_account_uid\n                                        }).lean().exec(function(err, user) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                (\n                                                    res.body.output.token != \"\" &&\n                                                    user.braintree_customerId != \"\"\n                                                ).should.equal(true);\n                                                done();\n                                            }\n                                        });\n                                    }\n                                });\n                        }\n                    });\n                }\n            });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "13b90311-076f-4a4a-bfb4-3c0e10b26043",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get client braintree token, if user have invalid braintree id.",
                    "fullTitle": "Enterprise Payment Payment.getBraintreeTokenOrg Should get client braintree token, if user have invalid braintree id.",
                    "timedOut": false,
                    "duration": 112,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.brainTreeClientToken(httpmock, \"enterprise\");\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            _models.User.findOne({\n                uid: org_account_uid\n            }).lean().exec(function(error, user) {\n                if (err) {\n                    done(err);\n                } else {\n                    var braintree_customerId = user.braintree_customerId;\n                    _models.User.findOneAndUpdate({\n                        uid: org_account_uid\n                    }, {\n                        payment_set: \"\",\n                        braintree_customerId: \"00000005620\"\n                    }).lean().exec(function(error, user) {\n                        if (error) {\n                            done(error);\n                        } else {\n                            commonMock.brainTreeCustomerCreate(httpmock, \"enterprise\");\n                            commonMock.brainTreeClientToken(httpmock, \"enterprise\");\n                            commonMock.brainTreeGenerateAuthToken(httpmock, \"enterprise\");\n                            api.get(apiURL)\n                                .set('org_uid', org_uid)\n                                .set('authtoken', authToken)\n                                .expect(httpStatus.OK)\n                                .end(function(err, res) {\n                                    if (err) {\n                                        done(err);\n                                    } else {\n                                        _models.User.findOne({\n                                            uid: org_account_uid\n                                        }).lean().exec(function(error, user) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                (\n                                                    res.body.output.token != \"\" &&\n                                                    user.braintree_customerId != \"\"\n                                                ).should.equal(true);\n                                                done();\n                                            }\n                                        });\n                                    }\n                                });\n                        }\n                    });\n                }\n            });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "37c12128-efde-4d90-b68c-ec1222245b9e",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get client braintree token, if user have default invalid braintree id.",
                    "fullTitle": "Enterprise Payment Payment.getBraintreeTokenOrg Should get client braintree token, if user have default invalid braintree id.",
                    "timedOut": false,
                    "duration": 99,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.brainTreeClientToken(httpmock, \"enterprise\");\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            _models.User.findOne({\n                uid: org_account_uid\n            }).lean().exec(function(error, user) {\n                if (err) {\n                    done(err);\n                } else {\n                    var braintree_customerId = user.braintree_customerId;\n                    _models.User.findOneAndUpdate({\n                        uid: org_account_uid\n                    }, {\n                        payment_set: \"\",\n                        braintree_customerId: \"210934322\"\n                    }).lean().exec(function(error, user) {\n                        if (error) {\n                            done(error);\n                        } else {\n                            commonMock.brainTreeCustomerCreate(httpmock, \"enterprise\");\n                            commonMock.brainTreeClientToken(httpmock, \"enterprise\");\n                            commonMock.brainTreeGenerateAuthToken(httpmock, \"enterprise\");\n                            api.get(apiURL)\n                                .set('org_uid', org_uid)\n                                .set('authtoken', authToken)\n                                .expect(httpStatus.OK)\n                                .end(function(err, res) {\n                                    if (err) {\n                                        done(err);\n                                    } else {\n                                        _models.User.findOne({\n                                            uid: org_account_uid\n                                        }).lean().exec(function(error, user) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                (\n                                                    res.body.output.token != \"\" &&\n                                                    user.braintree_customerId != \"\"\n                                                ).should.equal(true);\n                                                done();\n                                            }\n                                        });\n                                    }\n                                });\n                        }\n                    });\n                }\n            });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4265c449-5de1-46e9-89cf-395ce29fda2b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Payment Payment.getBraintreeTokenOrg Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.brainTreeClientToken(httpmock, \"enterprise\");\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "46708148-ad47-401c-9916-8a88b8a454a9",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "7f3b1325-1bc5-4c13-ae7e-30b96146cdf2",
                  "13b90311-076f-4a4a-bfb4-3c0e10b26043",
                  "37c12128-efde-4d90-b68c-ec1222245b9e",
                  "4265c449-5de1-46e9-89cf-395ce29fda2b",
                  "46708148-ad47-401c-9916-8a88b8a454a9"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 366,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "1d25f2b5-5a04-4e00-ad97-b3fc2d75db4a",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\payment\\getCardDetail.enterprise.js",
        "file": "\\controllers\\test\\payment\\getCardDetail.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "2100ddbd-f8f9-48e0-b78a-44b0bff1c747",
            "title": "Payment",
            "fullFile": "D:\\api\\controllers\\test\\payment\\getCardDetail.enterprise.js",
            "file": "\\controllers\\test\\payment\\getCardDetail.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "f541e7e1-d042-4846-8405-1fa7bee9e8b0",
                "title": "Payment.getCardDetail",
                "fullFile": "D:\\api\\controllers\\test\\payment\\getCardDetail.enterprise.js",
                "file": "\\controllers\\test\\payment\\getCardDetail.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Enterprise Payment Payment.getCardDetail \"before all\" hook",
                    "timedOut": false,
                    "duration": 209,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6d809f93-602b-4375-90cc-d8dbf7433356",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Payment Payment.getCardDetail \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "60f1952d-d973-42cf-a787-27d85f396e96",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get card details.",
                    "fullTitle": "Enterprise Payment Payment.getCardDetail Should get card details.",
                    "timedOut": false,
                    "duration": 52,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.braintreeFindCard(httpmock, \"enterprise\");\ncommonMock.braintreeFindSubscription(httpmock, \"enterprise\");\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.token.should.not.empty;\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ee427be6-9a87-4666-8813-200adab4078b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Payment Payment.getCardDetail Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "81b7d344-56e8-4757-bd0e-ace7c3bae017",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "ee427be6-9a87-4666-8813-200adab4078b",
                  "81b7d344-56e8-4757-bd0e-ace7c3bae017"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 59,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "b7bd3575-2da6-417b-805e-51101a459f0f",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\payment\\getCardDetailOrg.enterprise.js",
        "file": "\\controllers\\test\\payment\\getCardDetailOrg.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "5fb8a26e-82c7-4f81-8264-3a4f06161d8c",
            "title": "Payment",
            "fullFile": "D:\\api\\controllers\\test\\payment\\getCardDetailOrg.enterprise.js",
            "file": "\\controllers\\test\\payment\\getCardDetailOrg.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "1333df3e-1b97-434c-8438-b32faa59b4aa",
                "title": "Payment.getCardDetailOrg",
                "fullFile": "D:\\api\\controllers\\test\\payment\\getCardDetailOrg.enterprise.js",
                "file": "\\controllers\\test\\payment\\getCardDetailOrg.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Payment Payment.getCardDetailOrg \"before each\" hook",
                    "timedOut": false,
                    "duration": 169,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c9c43232-a81e-46fe-b129-a82a01ced6c7",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Payment Payment.getCardDetailOrg \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0e1e1f5c-a6f1-460b-9960-b643c8171679",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get card details.",
                    "fullTitle": "Enterprise Payment Payment.getCardDetailOrg Should get card details.",
                    "timedOut": false,
                    "duration": 54,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.braintreeFindCard(httpmock, \"enterprise\");\ncommonMock.braintreeFindSubscription(httpmock, \"enterprise\");\napi.get(apiURL)\n    .set(\"org_uid\", org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.token.should.not.empty;\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d27015c8-800e-49b1-80b5-4f6d05002c97",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Payment Payment.getCardDetailOrg Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set(\"org_uid\", org_uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e833308b-0b04-48c2-9e3c-36f3435395c5",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "d27015c8-800e-49b1-80b5-4f6d05002c97",
                  "e833308b-0b04-48c2-9e3c-36f3435395c5"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 62,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "c3a47a07-e20f-41e0-be93-af01d9755362",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\payment\\getClientTokenOrg.enterprise.js",
        "file": "\\controllers\\test\\payment\\getClientTokenOrg.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "a1e5034b-ba51-4b70-acbd-3c7381db2c91",
            "title": "Payment",
            "fullFile": "D:\\api\\controllers\\test\\payment\\getClientTokenOrg.enterprise.js",
            "file": "\\controllers\\test\\payment\\getClientTokenOrg.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "0565188b-7696-4778-b328-8bfa8150e681",
                "title": "Payment.getClientTokenOrg",
                "fullFile": "D:\\api\\controllers\\test\\payment\\getClientTokenOrg.enterprise.js",
                "file": "\\controllers\\test\\payment\\getClientTokenOrg.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Payment Payment.getClientTokenOrg \"before each\" hook",
                    "timedOut": false,
                    "duration": 172,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "33f3bf6e-69ca-488e-b305-cd39c8ad4b91",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Payment Payment.getClientTokenOrg \"after all\" hook",
                    "timedOut": false,
                    "duration": 5,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "testCollection.organizationRemoveRecords({}, function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ffd7d67d-2167-42aa-83c0-f1723fa81735",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Payment Payment.getClientTokenOrg \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2efb7757-7a7e-4d9e-8438-434da8ce530e",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get current user payment logs.",
                    "fullTitle": "Enterprise Payment Payment.getClientTokenOrg Should get current user payment logs.",
                    "timedOut": false,
                    "duration": 35,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = Array.isArray(res.body.output);\n            if (isValid) {\n                if (res.body.output.length > 0) {\n                    isValid = (_.first(res.body.output) || {}).user_uid == userUid;\n                }\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2855232a-9906-4baf-b001-89ca12b9e05d",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Payment Payment.getClientTokenOrg Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "802b77d4-23b8-4d48-a375-4b1b40ddfad6",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "2855232a-9906-4baf-b001-89ca12b9e05d",
                  "802b77d4-23b8-4d48-a375-4b1b40ddfad6"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 42,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "748c72d9-ebc2-4c66-b9e2-cf84d5861af2",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\payment\\getCreditDetails.enterprise.js",
        "file": "\\controllers\\test\\payment\\getCreditDetails.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "a4a4744f-58cd-4e0c-bbe9-6dd03430ff90",
            "title": "Payment",
            "fullFile": "D:\\api\\controllers\\test\\payment\\getCreditDetails.enterprise.js",
            "file": "\\controllers\\test\\payment\\getCreditDetails.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "094a6fa8-97ab-450e-9af1-eba99fa8f83e",
                "title": "Payment.getCreditDetails",
                "fullFile": "D:\\api\\controllers\\test\\payment\\getCreditDetails.enterprise.js",
                "file": "\\controllers\\test\\payment\\getCreditDetails.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Payment Payment.getCreditDetails \"before each\" hook",
                    "timedOut": false,
                    "duration": 575,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ndeleteAllInsertedRecords(function(error, output) {\n    if (error) {\n        done(error);\n    } else {\n        commonMock.setSignUpMocks(httpmock, \"enterprise\");\n        api.post(\"/enterprise/v1/signup\")\n            .send(registrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    authToken = res.body.output.authtoken;\n                    _id = res.body.output._id;\n                    saveInvoices({\n                        authToken: authToken,\n                        braintree_customerId: res.body.output.braintree_customerId || \"\",\n                        uid: res.body.output.uid || \"\"\n                    }, function() {\n                        var obj = {\n                            title: \"test1\",\n                            body_detail: \"test1\",\n                            email_body: \"test1\",\n                            agreement_link: \"http://example.com\",\n                            schedule_link: \"http://example.com\",\n                            attachment_link: \"http://example.com\",\n                            message: \"test msg\",\n                            email: \"test@example.com\",\n                            subject: \"test\"\n                        }\n                        _models.CreditDetail.create(obj, function(err, detail) {\n                            credit_details_uid = detail.uid;\n                            done();\n                        });\n                    });\n                }\n            });\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a442205f-cff8-4821-83cc-81e4add6e29e",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Payment Payment.getCreditDetails \"after all\" hook",
                    "timedOut": false,
                    "duration": 3,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "deleteAllInsertedRecords(function(error, output) {\n    if (error) {\n        done(error);\n    } else {\n        done();\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e42e4957-9576-4743-a3ca-c8f843cd1f8d",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Payment Payment.getCreditDetails \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5903b5d6-8c9e-42e0-9a23-7e13ccc740ec",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get credit details.",
                    "fullTitle": "Enterprise Payment Payment.getCreditDetails Should get credit details.",
                    "timedOut": false,
                    "duration": 37,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL.replace(\":uid\", credit_details_uid))\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.uid != \"\" &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\";\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "433de096-44fb-4d12-85ff-916a2555c287",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give credit details not found error.",
                    "fullTitle": "Enterprise Payment Payment.getCreditDetails Should give credit details not found error.",
                    "timedOut": false,
                    "duration": 43,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL.replace(\":uid\", \"FAKE_UID\"))\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.CARD_DETAIL_NOT_FOUND);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "923e7308-df59-4457-be92-2c279af0eaf7",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Payment Payment.getCreditDetails Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.braintreeUpdateCustomerPaymentDetail(httpmock, \"enterprise\");\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d47cf222-70b7-4897-8d4e-dc27b4b64435",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "433de096-44fb-4d12-85ff-916a2555c287",
                  "923e7308-df59-4457-be92-2c279af0eaf7",
                  "d47cf222-70b7-4897-8d4e-dc27b4b64435"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 89,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "2c930cb6-f279-42de-9db8-817bca269127",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\payment\\getPaymentLog.enterprise.js",
        "file": "\\controllers\\test\\payment\\getPaymentLog.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "de598acf-00a5-4bef-b4c6-00c590f189f4",
            "title": "Payment",
            "fullFile": "D:\\api\\controllers\\test\\payment\\getPaymentLog.enterprise.js",
            "file": "\\controllers\\test\\payment\\getPaymentLog.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "9ecee76e-bdad-497b-87db-3260e69f09d4",
                "title": "Payment.getPaymentLog",
                "fullFile": "D:\\api\\controllers\\test\\payment\\getPaymentLog.enterprise.js",
                "file": "\\controllers\\test\\payment\\getPaymentLog.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Payment Payment.getPaymentLog \"before each\" hook",
                    "timedOut": false,
                    "duration": 381,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ndeleteAllInsertedRecords(function(error, output) {\n    if (error) {\n        done(error);\n    } else {\n        commonMock.setSignUpMocks(httpmock, \"enterprise\");\n        api.post(\"/enterprise/v1/signup\")\n            .send(registrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    authToken = res.body.output.authtoken;\n                    _id = res.body.output._id;\n                    userUid = res.body.output.uid;\n                    savePaymentLogs({\n                        authToken: authToken,\n                        braintree_customerId: res.body.output.braintree_customerId || \"\",\n                        uid: res.body.output.uid || \"\"\n                    }, function() {\n                        done();\n                    });\n                }\n            });\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9066df32-6cc1-41ec-850f-1f16400e3e8c",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Payment Payment.getPaymentLog \"after all\" hook",
                    "timedOut": false,
                    "duration": 4,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "deleteAllInsertedRecords(function(error, output) {\n    if (error) {\n        done(error);\n    } else {\n        done();\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "48b0fc99-f8bc-46f7-a520-20b4be0fc3b2",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Payment Payment.getPaymentLog \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1729ce94-eda5-4cb2-a3d9-c3c8093b2c2e",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get current user payment logs.",
                    "fullTitle": "Enterprise Payment Payment.getPaymentLog Should get current user payment logs.",
                    "timedOut": false,
                    "duration": 42,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = Array.isArray(res.body.output);\n            if (isValid) {\n                if (res.body.output.length > 0) {\n                    isValid = (_.first(res.body.output) || {}).user_uid == userUid;\n                }\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e75d587c-5694-44c3-b1bd-873cf3ac09bc",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Payment Payment.getPaymentLog Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "55fd0ca1-d89f-4109-938a-b9da490ee68d",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "e75d587c-5694-44c3-b1bd-873cf3ac09bc",
                  "55fd0ca1-d89f-4109-938a-b9da490ee68d"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 52,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "edde63a8-06bb-4024-810a-238da31eacf4",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\payment\\getPaymentLogOrg.enterprise.js",
        "file": "\\controllers\\test\\payment\\getPaymentLogOrg.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "d9e55f49-fe1b-4b9d-a476-a5615c570fb7",
            "title": "Payment",
            "fullFile": "D:\\api\\controllers\\test\\payment\\getPaymentLogOrg.enterprise.js",
            "file": "\\controllers\\test\\payment\\getPaymentLogOrg.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "f7ce57d5-77a2-4ca3-90b4-64596909be98",
                "title": "Payment.getPaymentLogOrg",
                "fullFile": "D:\\api\\controllers\\test\\payment\\getPaymentLogOrg.enterprise.js",
                "file": "\\controllers\\test\\payment\\getPaymentLogOrg.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Payment Payment.getPaymentLogOrg \"before each\" hook",
                    "timedOut": false,
                    "duration": 174,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0cf35377-ac3b-449c-9bd0-54c939e28072",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Payment Payment.getPaymentLogOrg \"after all\" hook",
                    "timedOut": false,
                    "duration": 5,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "testCollection.organizationRemoveRecords({}, function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "215c3705-d975-4ac1-9954-91828b3e7541",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Payment Payment.getPaymentLogOrg \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e7f818cd-d89c-4efe-82df-643426685cd8",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get current user payment logs.",
                    "fullTitle": "Enterprise Payment Payment.getPaymentLogOrg Should get current user payment logs.",
                    "timedOut": false,
                    "duration": 35,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = Array.isArray(res.body.output);\n            if (isValid) {\n                if (res.body.output.length > 0) {\n                    isValid = (_.first(res.body.output) || {}).user_uid == userUid;\n                }\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1edc7abe-b243-4cf5-aeae-9a0b34db1bd8",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Payment Payment.getPaymentLogOrg Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fc1e87ae-8de5-462c-a490-ac229c2f380a",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "1edc7abe-b243-4cf5-aeae-9a0b34db1bd8",
                  "fc1e87ae-8de5-462c-a490-ac229c2f380a"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 42,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "ac4048d1-494b-4dda-b08c-4a4827088616",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\payment\\getPaymentSet.enterprise.js",
        "file": "\\controllers\\test\\payment\\getPaymentSet.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "412a7c96-9e3c-4e26-9dd0-16ea587908b9",
            "title": "Payment",
            "fullFile": "D:\\api\\controllers\\test\\payment\\getPaymentSet.enterprise.js",
            "file": "\\controllers\\test\\payment\\getPaymentSet.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "6280b10c-5d02-422b-8103-bdcd35f08ba8",
                "title": "Payment.getPaymentSet",
                "fullFile": "D:\\api\\controllers\\test\\payment\\getPaymentSet.enterprise.js",
                "file": "\\controllers\\test\\payment\\getPaymentSet.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Enterprise Payment Payment.getPaymentSet \"before all\" hook",
                    "timedOut": false,
                    "duration": 248,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n    _models.Mail.remove({ $or: [{ to: new RegExp('^test.user+', \"i\") }, { to: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n        commonMock.setSignUpMocks(httpmock, \"enterprise\");\n        api.post(\"/enterprise/v1/signup\")\n            .send(registrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(error, res) {\n                if (error) {\n                    done(error);\n                } else {\n                    var data = res.body.output;\n                    authToken = data.authtoken;\n                    _id = data._id;\n                    payment_set = data.payment_set;\n                    if (error) {\n                        done(error);\n                    } else {\n                        done();\n                    }\n                }\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3f79cda9-f34c-42e8-a3fa-b76c9d967a88",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Payment Payment.getPaymentSet \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f2d62308-987a-4b16-ad37-8f09bb8a3fe6",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get payment_set for user.",
                    "fullTitle": "Enterprise Payment Payment.getPaymentSet Should get payment_set for user.",
                    "timedOut": false,
                    "duration": 43,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.brainTreeClientToken(httpmock, \"enterprise\");\napi.get(apiURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = (res.body.output.payment_set != \"\" &&\n                res.body.output.payment_set != payment_set)\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6942bc5b-fa5e-4367-b485-6141b1b5cecb",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Payment Payment.getPaymentSet Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.brainTreeClientToken(httpmock, \"enterprise\");\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "627dc048-ba22-4432-b3c6-15a08f70025b",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "6942bc5b-fa5e-4367-b485-6141b1b5cecb",
                  "627dc048-ba22-4432-b3c6-15a08f70025b"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 56,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "34d6746a-7f83-4100-b6fd-fc0801a1d6ba",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\payment\\getPaymentSetOrg.enterprise.js",
        "file": "\\controllers\\test\\payment\\getPaymentSetOrg.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "6ad530e8-1baf-4229-83e0-aa2856c212ce",
            "title": "Payment",
            "fullFile": "D:\\api\\controllers\\test\\payment\\getPaymentSetOrg.enterprise.js",
            "file": "\\controllers\\test\\payment\\getPaymentSetOrg.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "8d1e3385-95ff-4781-9ddf-02a922d4923b",
                "title": "Payment.getPaymentSetOrg",
                "fullFile": "D:\\api\\controllers\\test\\payment\\getPaymentSetOrg.enterprise.js",
                "file": "\\controllers\\test\\payment\\getPaymentSetOrg.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Payment Payment.getPaymentSetOrg \"before each\" hook",
                    "timedOut": false,
                    "duration": 178,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "edbec387-875b-46e2-93ef-cfc578ae579e",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Payment Payment.getPaymentSetOrg \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fc6c5e81-de58-4e1d-8c8a-35905b9ddcb6",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get payment_set for user.",
                    "fullTitle": "Enterprise Payment Payment.getPaymentSetOrg Should get payment_set for user.",
                    "timedOut": false,
                    "duration": 49,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.brainTreeClientToken(httpmock, \"enterprise\");\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = (res.body.output.payment_set != \"\" &&\n                res.body.output.payment_set != payment_set)\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "373c2c85-8636-4d87-a42e-c0d721ed4b88",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Payment Payment.getPaymentSetOrg Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.brainTreeClientToken(httpmock, \"enterprise\");\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "071bb5a0-0ca9-4dca-b183-82dcfde403f8",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "373c2c85-8636-4d87-a42e-c0d721ed4b88",
                  "071bb5a0-0ca9-4dca-b183-82dcfde403f8"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 59,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "13be28a9-62ad-4c73-948f-091a9d5bab06",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\payment\\getStatistic.enterprise.js",
        "file": "\\controllers\\test\\payment\\getStatistic.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "8094ab55-e6a9-43dc-8486-df9838d73daf",
            "title": "Payment",
            "fullFile": "D:\\api\\controllers\\test\\payment\\getStatistic.enterprise.js",
            "file": "\\controllers\\test\\payment\\getStatistic.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "04caafa8-f600-4ea3-bb33-9ee8935b042a",
                "title": "Payment.getStatistic",
                "fullFile": "D:\\api\\controllers\\test\\payment\\getStatistic.enterprise.js",
                "file": "\\controllers\\test\\payment\\getStatistic.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Payment Payment.getStatistic \"before each\" hook",
                    "timedOut": false,
                    "duration": 279,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveRecords(function(error, output) {\n    commonMock.setSignUpMocks(httpmock, \"enterprise\");\n    api.post(\"/enterprise/v1/signup\")\n        .send(registrationBody)\n        .expect(httpStatus.CREATED)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                authToken = res.body.output.authtoken;\n                _id = res.body.output._id;\n                user_uid = res.body.output.uid;\n                email = res.body.output.email;\n                api.get(\"/enterprise/v1/user\")\n                    .set(\"authtoken\", authToken)\n                    .expect(httpStatus.CREATED)\n                    .end(function(err, res) {\n                        env_uid = res.body.output.env_uid;\n                        done();\n                    });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ec86bb26-fe8e-4832-9fa8-d8d355c94d5a",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Payment Payment.getStatistic \"after all\" hook",
                    "timedOut": false,
                    "duration": 8,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "removeRecords(function(error, output) {\n    if (error) {\n        done(error);\n    } else {\n        done();\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "943a5f85-ad91-497b-9db6-8241c3f2286c",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Payment Payment.getStatistic \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "66a47846-df7c-4d59-a5f6-3672ce8fab11",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get list of bills.",
                    "fullTitle": "Enterprise Payment Payment.getStatistic Should get list of bills.",
                    "timedOut": false,
                    "duration": 38,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (Array.isArray(res.body.output.objects)) {\n                isValid = res.body.output.objects.length == 0;\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cef94a63-c34f-4791-804d-7755cbff5133",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get count of triggers of current user.",
                    "fullTitle": "Enterprise Payment Payment.getStatistic Should get count of triggers of current user.",
                    "timedOut": false,
                    "duration": 71,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nsaveUserTriggers(function(error, triggers) {\n    var filterURL = apiURL + \"?get=triggercount\";\n    api.get(filterURL)\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(error, res) {\n            if (error) {\n                done(error);\n            } else {\n                (parseInt(res.body.output.objects) == 10).should.equal(true);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ee4ed316-6b72-40b7-ae7d-443dc8492a34",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get count of triggers of current user in specific range.",
                    "fullTitle": "Enterprise Payment Payment.getStatistic Should get count of triggers of current user in specific range.",
                    "timedOut": false,
                    "duration": 65,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nsaveUserTriggers(function(error, triggers) {\n    var frange = triggers[2].toJSON().created_at.toISOString();\n    var srange = triggers[8].toJSON().created_at.toISOString();\n    var filterURL = apiURL + \"?get=triggercount&frange=\" + frange + \"&srange=\" + srange;\n    api.get(filterURL)\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(error, res) {\n            if (error) {\n                done(error);\n            } else {\n                (parseInt(res.body.output.objects) > 0).should.equal(true);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b693f931-645a-445f-bdb9-7d26247d197b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get count of flows of current user.",
                    "fullTitle": "Enterprise Payment Payment.getStatistic Should get count of flows of current user.",
                    "timedOut": false,
                    "duration": 1041,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nsaveUserFlows(done, function(error, flows) {\n    var filterURL = apiURL + \"?get=flowcount\";\n    api.get(filterURL)\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(error, res) {\n            if (error) {\n                done(error);\n            } else {\n                (parseInt(res.body.output.objects) >= 10).should.equal(true);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c1a713aa-4db1-4b4c-8840-5c1f0c6e84f8",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get count of flows of current user in specific range.",
                    "fullTitle": "Enterprise Payment Payment.getStatistic Should get count of flows of current user in specific range.",
                    "timedOut": false,
                    "duration": 1099,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nsaveUserFlows(done, function(error, flows) {\n    var frange = new Date((new Date(flows[1].created_at)) - 300000).toISOString();\n    var srange = (new Date(flows[8].created_at)).toISOString();\n    var filterURL = apiURL + \"?get=flowcount&frange=\" + frange + \"&srange=\" + srange;\n    api.get(filterURL)\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(error, res) {\n            if (error) {\n                done(error);\n            } else {\n                (parseInt(res.body.output.objects) >= 9).should.equal(true);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3edc587d-d47e-45b1-b530-549a1185172c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get count of present flows of current user.",
                    "fullTitle": "Enterprise Payment Payment.getStatistic Should get count of present flows of current user.",
                    "timedOut": false,
                    "duration": 132,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nsaveFlowsPresent(function(error, flows) {\n    var filterURL = apiURL + \"?get=flowspresent\";\n    api.get(filterURL)\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(error, res) {\n            if (error) {\n                done(error);\n            } else {\n                parseInt(res.body.output.objects).should.not.equal(NaN);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b3247f0b-a220-4527-bee6-4ecfcc4cb2a8",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get count of present flows of current user in specific range.",
                    "fullTitle": "Enterprise Payment Payment.getStatistic Should get count of present flows of current user in specific range.",
                    "timedOut": false,
                    "duration": 126,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nsaveFlowsPresent(function(error, flows) {\n    var frange = new Date((new Date(flows[1].created_at.toISOString())) - 300000).toISOString();\n    var srange = flows[8].created_at.toISOString();\n    var filterURL = apiURL + \"?get=flowspresent&frange=\" + frange + \"&srange=\" + srange;\n    api.get(filterURL)\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(error, res) {\n            if (error) {\n                done(error);\n            } else {\n                parseInt(res.body.output.objects).should.not.equal(NaN);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1770918f-c3b1-42dd-897a-0195b2e0f6d7",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get count zero credits.",
                    "fullTitle": "Enterprise Payment Payment.getStatistic Should get count zero credits.",
                    "timedOut": false,
                    "duration": 294,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = getImmutable(registrationBody);\ntempRegistrationBody.email = \"test.user+1000@raweng.com\";\ncommonMock.setSignUpMocks(httpmock, \"enterprise\", {\n    email: tempRegistrationBody.email\n});\napi.post(\"/enterprise/v1/signup\")\n    .send(tempRegistrationBody)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var filterURL = apiURL + \"?get=credits\";\n            api.get(filterURL)\n                .set('authtoken', res.body.output.authtoken)\n                .expect(httpStatus.OK)\n                .end(function(error, res) {\n                    if (error) {\n                        done(error);\n                    } else {\n                        (parseInt(res.body.output.objects) == 0).should.equal(true);\n                        done();\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "06d7423c-048c-433c-ba60-2d511d71d5e1",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get count of flows and triggers of current user.",
                    "fullTitle": "Enterprise Payment Payment.getStatistic Should get count of flows and triggers of current user.",
                    "timedOut": false,
                    "duration": 151,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nsaveFlowsPresent(function(error, flows) {\n    var filterURL = apiURL + \"?get=flow_trigger\";\n    api.get(filterURL)\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(error, res) {\n            if (error) {\n                done(error);\n            } else {\n                (typeof(res.body.output.trigger) == \"number\" &&\n                    typeof(res.body.output.flows) == \"number\").should.equal(true);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ff7a90c6-f046-460f-8c34-0ba9f69f431b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get userstream count.",
                    "fullTitle": "Enterprise Payment Payment.getStatistic Should get userstream count.",
                    "timedOut": false,
                    "duration": 336,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nsaveBillEntries({\n    email: email,\n    authtoken: authToken,\n    user_uid: user_uid\n}, function(options, callback) {\n    saveUserStreamEntries({\n        email: email,\n        authtoken: authToken,\n        user_uid: user_uid\n    }, function(error, flows) {\n        var filterURL = apiURL + \"?get=librarydownload\";\n        api.get(filterURL)\n            .set('authtoken', authToken)\n            .expect(httpStatus.OK)\n            .end(function(error, res) {\n                if (error) {\n                    done(error);\n                } else {\n                    (typeof(res.body.output.objects) != \"undefined\").should.equal(true);\n                    done();\n                }\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "44752a41-8e70-448e-ad20-4980fd7c1331",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get library download count.",
                    "fullTitle": "Enterprise Payment Payment.getStatistic Should get library download count.",
                    "timedOut": false,
                    "duration": 346,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nsaveBillEntries({\n    email: email,\n    authtoken: authToken,\n}, function(options, callback) {\n    saveUserStreamEntries({\n        email: email,\n        authtoken: authToken,\n    }, function(error, flows) {\n        var filterURL = apiURL + \"?get=librarydownload\";\n        api.get(filterURL)\n            .set('authtoken', authToken)\n            .expect(httpStatus.OK)\n            .end(function(error, res) {\n                if (error) {\n                    done(error);\n                } else {\n                    (typeof(res.body.output.objects) != \"undefined\").should.equal(true);\n                    done();\n                }\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8a28d091-9a05-4d89-9287-88cd80ab2a0c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get flow shared count.",
                    "fullTitle": "Enterprise Payment Payment.getStatistic Should get flow shared count.",
                    "timedOut": false,
                    "duration": 337,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nsaveBillEntries({\n    email: email,\n    authtoken: authToken,\n}, function(options, callback) {\n    saveUserStreamEntries({\n        email: email,\n        authtoken: authToken,\n    }, function(error, flows) {\n        var filterURL = apiURL + \"?get=flowshared\";\n        api.get(filterURL)\n            .set('authtoken', authToken)\n            .expect(httpStatus.OK)\n            .end(function(error, res) {\n                if (error) {\n                    done(error);\n                } else {\n                    (typeof(res.body.output.objects) != \"undefined\").should.equal(true);\n                    done();\n                }\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d87706f6-4b70-4de3-8bf1-b8f027c2ca2f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get flow total run count.",
                    "fullTitle": "Enterprise Payment Payment.getStatistic Should get flow total run count.",
                    "timedOut": false,
                    "duration": 347,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nsaveBillEntries({\n    email: email,\n    authtoken: authToken,\n}, function(options, callback) {\n    saveUserStreamEntries({\n        email: email,\n        authtoken: authToken,\n    }, function(error, flows) {\n        var filterURL = apiURL + \"?get=totalrun\";\n        api.get(filterURL)\n            .set('authtoken', authToken)\n            .expect(httpStatus.OK)\n            .end(function(error, res) {\n                if (error) {\n                    done(error);\n                } else {\n                    (typeof(res.body.output.objects) != \"undefined\").should.equal(true);\n                    done();\n                }\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b1e3ed9d-ed56-4e91-8f4c-2389c284e01f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Payment Payment.getStatistic Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1c1d4bf9-7bc4-47c7-b5b2-22d0d5b424ad",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "cef94a63-c34f-4791-804d-7755cbff5133",
                  "ee4ed316-6b72-40b7-ae7d-443dc8492a34",
                  "b693f931-645a-445f-bdb9-7d26247d197b",
                  "c1a713aa-4db1-4b4c-8840-5c1f0c6e84f8",
                  "3edc587d-d47e-45b1-b530-549a1185172c",
                  "b3247f0b-a220-4527-bee6-4ecfcc4cb2a8",
                  "1770918f-c3b1-42dd-897a-0195b2e0f6d7",
                  "06d7423c-048c-433c-ba60-2d511d71d5e1",
                  "ff7a90c6-f046-460f-8c34-0ba9f69f431b",
                  "44752a41-8e70-448e-ad20-4980fd7c1331",
                  "8a28d091-9a05-4d89-9287-88cd80ab2a0c",
                  "d87706f6-4b70-4de3-8bf1-b8f027c2ca2f",
                  "b1e3ed9d-ed56-4e91-8f4c-2389c284e01f",
                  "1c1d4bf9-7bc4-47c7-b5b2-22d0d5b424ad"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 4392,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "02512cee-346a-4248-bbf8-369f5a533364",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\payment\\getStatisticMonthWise.enterprise.js",
        "file": "\\controllers\\test\\payment\\getStatisticMonthWise.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "3a70cc02-2fd6-4384-9478-d4ba4a9fae25",
            "title": "Payment",
            "fullFile": "D:\\api\\controllers\\test\\payment\\getStatisticMonthWise.enterprise.js",
            "file": "\\controllers\\test\\payment\\getStatisticMonthWise.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "eb1fe881-6d32-4a82-9b62-6975a3c0e00e",
                "title": "Payment.getStatisticMonthWise",
                "fullFile": "D:\\api\\controllers\\test\\payment\\getStatisticMonthWise.enterprise.js",
                "file": "\\controllers\\test\\payment\\getStatisticMonthWise.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Enterprise Payment Payment.getStatisticMonthWise \"before all\" hook",
                    "timedOut": false,
                    "duration": 598,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nremoveRecords(function() {\n    async.waterfall([\n        function(cbk) {\n            _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n                cbk(err, user);\n            })\n        },\n        function(userTrigger, cbk) {\n            api.post(\"/enterprise/v1/signup\")\n                .send(testData.testRegistrationBody)\n                .expect(httpStatus.CREATED)\n                .end(function(err, res) {\n                    authToken = res.body.output.authtoken;\n                    _id = res.body.output._id;\n                    user_uid = res.body.output.uid;\n                    email = res.body.output.email;\n                    cbk(err, res);\n                })\n        },\n        function(result, cbk) {\n            dummyUser = result.body.output;\n            testData.mongoUserTriggerObj.user_uid = dummyUser.uid;\n            _models.UserTrigger.create(testData.mongoUserTriggerObj, function(err, userTrigger) {\n                cbk(err, userTrigger);\n            })\n        },\n        function(userTrigger, cbk) {\n            var userTriggerObj = userTrigger;\n            var flowData = _.cloneDeep(testData.flowBody);\n            flowData.isExpress = false;\n            flowData.trigger.handlers = [userTriggerObj.uid]\n            async.parallel({\n                triggerFlow: function(cb) {\n                    createFlow(flowURL, flowData, dummyUser, function(err, result) {\n                        cb(err, result);\n                    })\n                },\n                inactiveFlow: function(cb) {\n                    var inactiveFlow = _.cloneDeep(flowData);\n                    inactiveFlow.active = false;\n                    createFlow(flowURL, inactiveFlow, dummyUser, function(err, result) {\n                        cb(err, result);\n                    })\n                },\n                draftFlow: function(cb) {\n                    var draftFlow = _.cloneDeep(flowData);\n                    draftFlow.is_draft = true;\n                    createFlow(flowURL, draftFlow, dummyUser, function(err, result) {\n                        cb(err, result);\n                    })\n                },\n                webHookFlow: function(cb) {\n                    var WHFlow = _.cloneDeep(flowData);\n                    WHFlow.trigger = testData.defaultTriggerObj;\n                    WHFlow.settings = testData.webHookSetting;\n                    WHFlow.active = true;\n                    WHFlow.settings = testData.webHookSetting;\n                    createFlow(flowURL, WHFlow, dummyUser, function(err, result) {\n                        cb(err, result);\n                    })\n                },\n                invalidEnvFlow: function(cb) {\n                    var IVWHFlow = _.cloneDeep(flowData);\n                    IVWHFlow.trigger = testData.defaultTriggerObj;\n                    IVWHFlow.settings = testData.webHookSetting;\n                    IVWHFlow.environment[0].params.push({ key: \"body\", required: true });\n                    createFlow(flowURL, IVWHFlow, dummyUser, function(err, result) {\n                        cb(err, result);\n                    })\n                }\n            }, function(err, result) {\n                cbk(err, result)\n            })\n        }\n    ], function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            userTriggerFlow = res.triggerFlow.body.output;\n            userDraftFlow = res.draftFlow.body.output;\n            userWebHookFlow = res.webHookFlow.body.output;\n            invalidEnvFlow = res.invalidEnvFlow.body.output;\n            inactiveFlow = res.inactiveFlow.body.output;\n            _models.newFlow.findOneAndUpdate({ uid: userWebHookFlow.uid }, {\n                current_month_run_time: 5,\n                total_run_count: 20\n            }, function(err, deletedFlows) {\n                done();\n            });\n        }\n    })\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4ca62010-e89a-4966-8bf4-ecc32a28d852",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Payment Payment.getStatisticMonthWise \"after all\" hook",
                    "timedOut": false,
                    "duration": 7,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveRecords(function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e0492802-39d6-41b0-8f41-c9a1920d0b97",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Payment Payment.getStatisticMonthWise \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bf026dd6-573d-4975-8f18-38b7f9565218",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get month wise flow statistic of current user.",
                    "fullTitle": "Enterprise Payment Payment.getStatisticMonthWise Should get month wise flow statistic of current user.",
                    "timedOut": false,
                    "duration": 40,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (isNaN(parseInt(res.body.output.current_month_run)) == false &&\n                isNaN(parseInt(res.body.output.total_run)) == false) {\n                isValid = parseInt(res.body.output.current_month_run) > 0 &&\n                    parseInt(res.body.output.total_run) > 0;\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1166293b-d206-41d6-a868-b94caf0529c8",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Payment Payment.getStatisticMonthWise Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7627f6ea-06a4-49b8-bb6a-5f4c3fdecd96",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "1166293b-d206-41d6-a868-b94caf0529c8",
                  "7627f6ea-06a4-49b8-bb6a-5f4c3fdecd96"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 48,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "b28e6a5b-8ad0-48be-97a8-90cb99cda439",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\payment\\getStatisticMonthWiseOrg.enterprise.js",
        "file": "\\controllers\\test\\payment\\getStatisticMonthWiseOrg.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "845f2681-f308-4e3b-bb6a-6f0ed4367605",
            "title": "Payment",
            "fullFile": "D:\\api\\controllers\\test\\payment\\getStatisticMonthWiseOrg.enterprise.js",
            "file": "\\controllers\\test\\payment\\getStatisticMonthWiseOrg.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "54b10207-f4c9-413f-be17-f8572b89d705",
                "title": "Payment.getStatisticMonthWiseOrg",
                "fullFile": "D:\\api\\controllers\\test\\payment\\getStatisticMonthWiseOrg.enterprise.js",
                "file": "\\controllers\\test\\payment\\getStatisticMonthWiseOrg.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Payment Payment.getStatisticMonthWiseOrg \"before each\" hook",
                    "timedOut": false,
                    "duration": 1322,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nremoveRecords(function() {\n    async.waterfall([\n        function(cbk) {\n            _models.User.remove({}, function(err, user) {\n                cbk(err, user);\n            })\n        },\n        function(userTrigger, cbk) {\n            api.post(\"/enterprise/v1/signup\")\n                .send(testData.testRegistrationBody)\n                .expect(httpStatus.CREATED)\n                .end(function(err, res) {\n                    authToken = res.body.output.authtoken;\n                    _id = res.body.output._id;\n                    user_uid = res.body.output.uid;\n                    email = res.body.output.email;\n                    createOrgEntries({\n                        done: done\n                    }, function() {\n                        cbk(err, res);\n                    });\n                })\n        },\n        function(result, cbk) {\n            dummyUser = result.body.output;\n            testData.mongoUserTriggerObj.user_uid = dummyUser.uid;\n            _models.UserTrigger.create(testData.mongoUserTriggerObj, function(err, userTrigger) {\n                cbk(err, userTrigger);\n            })\n        },\n        function(userTrigger, cbk) {\n            var userTriggerObj = userTrigger;\n            var flowData = _.cloneDeep(testData.flowBody);\n            flowData.isExpress = false;\n            flowData.trigger.handlers = [userTriggerObj.uid]\n            async.parallel({\n                triggerFlow: function(cb) {\n                    createFlow(flowURL, flowData, dummyUser, function(err, result) {\n                        cb(err, result);\n                    })\n                },\n                inactiveFlow: function(cb) {\n                    var inactiveFlow = _.cloneDeep(flowData);\n                    inactiveFlow.active = false;\n                    createFlow(flowURL, inactiveFlow, dummyUser, function(err, result) {\n                        cb(err, result);\n                    })\n                },\n                draftFlow: function(cb) {\n                    var draftFlow = _.cloneDeep(flowData);\n                    draftFlow.is_draft = true;\n                    createFlow(flowURL, draftFlow, dummyUser, function(err, result) {\n                        cb(err, result);\n                    })\n                },\n                webHookFlow: function(cb) {\n                    var WHFlow = _.cloneDeep(flowData);\n                    WHFlow.trigger = testData.defaultTriggerObj;\n                    WHFlow.settings = testData.webHookSetting;\n                    WHFlow.active = true;\n                    WHFlow.settings = testData.webHookSetting;\n                    createFlow(flowURL, WHFlow, dummyUser, function(err, result) {\n                        cb(err, result);\n                    })\n                },\n                invalidEnvFlow: function(cb) {\n                    var IVWHFlow = _.cloneDeep(flowData);\n                    IVWHFlow.trigger = testData.defaultTriggerObj;\n                    IVWHFlow.settings = testData.webHookSetting;\n                    IVWHFlow.environment[0].params.push({ key: \"body\", required: true });\n                    createFlow(flowURL, IVWHFlow, dummyUser, function(err, result) {\n                        cb(err, result);\n                    })\n                }\n            }, function(err, result) {\n                cbk(err, result)\n            })\n        }\n    ], function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            userTriggerFlow = res.triggerFlow.body.output;\n            userDraftFlow = res.draftFlow.body.output;\n            userWebHookFlow = res.webHookFlow.body.output;\n            invalidEnvFlow = res.invalidEnvFlow.body.output;\n            inactiveFlow = res.inactiveFlow.body.output;\n            _models.newFlow.findOneAndUpdate({ uid: userWebHookFlow.uid }, {\n                current_month_run_time: 5,\n                total_run_count: 20\n            }, function(err, deletedFlows) {\n                done();\n            });\n        }\n    })\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8347ee1b-659d-4e97-9233-0e982324ad6d",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Payment Payment.getStatisticMonthWiseOrg \"after all\" hook",
                    "timedOut": false,
                    "duration": 17,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveRecords(function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b5c273ee-25eb-4f08-9722-b20d2c81f80f",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Payment Payment.getStatisticMonthWiseOrg \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5b3509c5-a80b-4120-853d-383bd56778b8",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get month wise flow statistic of current user.",
                    "fullTitle": "Enterprise Payment Payment.getStatisticMonthWiseOrg Should get month wise flow statistic of current user.",
                    "timedOut": false,
                    "duration": 56,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (isNaN(parseInt(res.body.output.current_month_run)) == false &&\n                isNaN(parseInt(res.body.output.total_run)) == false) {\n                isValid = parseInt(res.body.output.current_month_run) > 0 &&\n                    parseInt(res.body.output.total_run) > 0;\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2700336c-58f7-493d-bec6-8e7bebd18ebf",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Payment Payment.getStatisticMonthWiseOrg Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "749da5da-3d4f-49ca-a146-a1e194e7094e",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "2700336c-58f7-493d-bec6-8e7bebd18ebf",
                  "749da5da-3d4f-49ca-a146-a1e194e7094e"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 65,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "b2ca5566-ec2e-4363-ae85-57e73357d50f",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\payment\\getStatisticOrg.enterprise.js",
        "file": "\\controllers\\test\\payment\\getStatisticOrg.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "cd9add10-7c22-46fa-b092-469f27aa946d",
            "title": "Payment",
            "fullFile": "D:\\api\\controllers\\test\\payment\\getStatisticOrg.enterprise.js",
            "file": "\\controllers\\test\\payment\\getStatisticOrg.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "01e369eb-850e-4d25-8b78-88b590beaf8e",
                "title": "Payment.getStatisticOrg",
                "fullFile": "D:\\api\\controllers\\test\\payment\\getStatisticOrg.enterprise.js",
                "file": "\\controllers\\test\\payment\\getStatisticOrg.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Payment Payment.getStatisticOrg \"before each\" hook",
                    "timedOut": false,
                    "duration": 259,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        api.get(\"/enterprise/v1/user\")\n            .set('org_uid', org_uid)\n            .set('authtoken', authToken)\n            .expect(httpStatus.OK)\n            .end(function(error, res) {\n                env_uid = res.body.output.env_uid;\n                api.get(\"/enterprise/v1/projects\")\n                    .set('org_uid', org_uid)\n                    .set('authtoken', authToken)\n                    .expect(httpStatus.OK)\n                    .end(function(error, res) {\n                        project_uid = _.first(res.body.output.projects).uid\n                        done();\n                    });\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4f18c783-8aaf-4f18-a294-d05029753b2a",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Payment Payment.getStatisticOrg \"after all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "535b340d-9f51-4c1f-9309-4c6fa7ca09c3",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get list of bills.",
                    "fullTitle": "Enterprise Payment Payment.getStatisticOrg Should get list of bills.",
                    "timedOut": false,
                    "duration": 53,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (Array.isArray(res.body.output.objects)) {\n                isValid = res.body.output.objects.length == 0;\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8199bfe5-1ccf-4175-b3cd-ff395e98c512",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get count of triggers of current user.",
                    "fullTitle": "Enterprise Payment Payment.getStatisticOrg Should get count of triggers of current user.",
                    "timedOut": false,
                    "duration": 103,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nsaveUserTriggers({\n    user_uid: org_account_uid,\n    project_uid: project_uid,\n    org_uid: org_uid\n}, function(error, triggers) {\n    var filterURL = apiURL + \"?get=triggercount\";\n    api.get(filterURL)\n        .set('org_uid', org_uid)\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(error, res) {\n            if (error) {\n                done(error);\n            } else {\n                (parseInt(res.body.output.objects) == 10).should.equal(true);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "84d80084-7497-4809-8412-80dd17e8d12a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get count of triggers of current user in specific range.",
                    "fullTitle": "Enterprise Payment Payment.getStatisticOrg Should get count of triggers of current user in specific range.",
                    "timedOut": false,
                    "duration": 74,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nsaveUserTriggers({\n    user_uid: org_account_uid,\n    project_uid: project_uid,\n    org_uid: org_uid\n}, function(error, triggers) {\n    var frange = triggers[2].toJSON().created_at.toISOString();\n    var srange = triggers[8].toJSON().created_at.toISOString();\n    var filterURL = apiURL + \"?get=triggercount&frange=\" + frange + \"&srange=\" + srange;\n    api.get(filterURL)\n        .set('org_uid', org_uid)\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(error, res) {\n            if (error) {\n                done(error);\n            } else {\n                (parseInt(res.body.output.objects) == 6).should.equal(true);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2a8b9dad-f23d-4da0-9c09-e30df7c188f0",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get count of flows of current user.",
                    "fullTitle": "Enterprise Payment Payment.getStatisticOrg Should get count of flows of current user.",
                    "timedOut": false,
                    "duration": 1106,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nsaveUserFlows(done, function(error, flows) {\n    var filterURL = apiURL + \"?get=flowcount\";\n    api.get(filterURL)\n        .set('org_uid', org_uid)\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(error, res) {\n            if (error) {\n                done(error);\n            } else {\n                (parseInt(res.body.output.objects) >= 10).should.equal(true);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d02c47d2-1e23-4eef-bbeb-c0922d6e7afd",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get count of flows of current user in specific range.",
                    "fullTitle": "Enterprise Payment Payment.getStatisticOrg Should get count of flows of current user in specific range.",
                    "timedOut": false,
                    "duration": 1087,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nsaveUserFlows(done, function(error, flows) {\n    var frange = new Date((new Date(flows[1].created_at)) - 300000).toISOString();\n    var srange = (new Date(flows[8].created_at)).toISOString();\n    var filterURL = apiURL + \"?get=flowcount&frange=\" + frange + \"&srange=\" + srange;\n    api.get(filterURL)\n        .set('org_uid', org_uid)\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(error, res) {\n            if (error) {\n                done(error);\n            } else {\n                (parseInt(res.body.output.objects) >= 10).should.equal(true);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2a1e9549-ed2c-494a-8be7-a6534e288da0",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get count of present flows of current user.",
                    "fullTitle": "Enterprise Payment Payment.getStatisticOrg Should get count of present flows of current user.",
                    "timedOut": false,
                    "duration": 1055,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nsaveFlowsPresent(function(error, flows) {\n    var filterURL = apiURL + \"?get=flowspresent\";\n    api.get(filterURL)\n        .set('org_uid', org_uid)\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(error, res) {\n            if (error) {\n                done(error);\n            } else {\n                (parseInt(res.body.output.objects) >= 9).should.equal(true);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "da01eab9-02b0-4582-a5af-f07d12e05a2d",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get count of present flows of current user in specific range.",
                    "fullTitle": "Enterprise Payment Payment.getStatisticOrg Should get count of present flows of current user in specific range.",
                    "timedOut": false,
                    "duration": 1056,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nsaveFlowsPresent(function(error, flows) {\n    var frange = new Date((new Date(flows[1].created_at)) - 300000).toISOString();\n    var srange = flows[8].created_at;\n    var filterURL = apiURL + \"?get=flowspresent&frange=\" + frange + \"&srange=\" + srange;\n    api.get(filterURL)\n        .set('org_uid', org_uid)\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(error, res) {\n            if (error) {\n                done(error);\n            } else {\n                (parseInt(res.body.output.objects) >= 9).should.equal(true);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3222ce8d-fce9-43c4-818b-30013822b9c2",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get count zero credits.",
                    "fullTitle": "Enterprise Payment Payment.getStatisticOrg Should get count zero credits.",
                    "timedOut": false,
                    "duration": 1244,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nsaveFlowsPresent(function(error, flows) {\n    var filterURL = apiURL + \"?get=credits\";\n    api.get(filterURL)\n        .set('org_uid', org_uid)\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(error, res) {\n            if (error) {\n                done(error);\n            } else {\n                (typeof(res.body.output.objects) == \"number\").should.equal(true);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9a164ed4-953b-446f-9f37-ff4242c20b28",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get count of flows and triggers of current user.",
                    "fullTitle": "Enterprise Payment Payment.getStatisticOrg Should get count of flows and triggers of current user.",
                    "timedOut": false,
                    "duration": 1164,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nsaveFlowsPresent(function(error, flows) {\n    var filterURL = apiURL + \"?get=flow_trigger\";\n    api.get(filterURL)\n        .set('org_uid', org_uid)\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(error, res) {\n            if (error) {\n                done(error);\n            } else {\n                (typeof(res.body.output.trigger) == \"number\" &&\n                    typeof(res.body.output.flows) == \"number\").should.equal(true);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8b797076-3c20-4cb3-b209-119635ff8ac2",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get userstream count.",
                    "fullTitle": "Enterprise Payment Payment.getStatisticOrg Should get userstream count.",
                    "timedOut": false,
                    "duration": 308,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nsaveBillEntries({\n    email: email,\n    authtoken: authToken,\n    user_uid: user_uid\n}, function(options, callback) {\n    saveUserStreamEntries({\n        email: email,\n        authtoken: authToken,\n        user_uid: user_uid\n    }, function(error, flows) {\n        var filterURL = apiURL + \"?get=librarydownload\";\n        api.get(filterURL)\n            .set('org_uid', org_uid)\n            .set('authtoken', authToken)\n            .expect(httpStatus.OK)\n            .end(function(error, res) {\n                if (error) {\n                    done(error);\n                } else {\n                    (typeof(res.body.output.objects) != \"undefined\").should.equal(true);\n                    done();\n                }\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "44deed48-fdd9-48f2-ab31-80d8275e993f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get library download count.",
                    "fullTitle": "Enterprise Payment Payment.getStatisticOrg Should get library download count.",
                    "timedOut": false,
                    "duration": 314,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nsaveBillEntries({\n    email: email,\n    authtoken: authToken,\n}, function(options, callback) {\n    saveUserStreamEntries({\n        email: email,\n        authtoken: authToken,\n    }, function(error, flows) {\n        var filterURL = apiURL + \"?get=librarydownload\";\n        api.get(filterURL)\n            .set('org_uid', org_uid)\n            .set('authtoken', authToken)\n            .expect(httpStatus.OK)\n            .end(function(error, res) {\n                if (error) {\n                    done(error);\n                } else {\n                    (typeof(res.body.output.objects) != \"undefined\").should.equal(true);\n                    done();\n                }\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "46076154-cc8e-48bc-b62c-10252d2fa130",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get flow shared count.",
                    "fullTitle": "Enterprise Payment Payment.getStatisticOrg Should get flow shared count.",
                    "timedOut": false,
                    "duration": 310,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nsaveBillEntries({\n    email: email,\n    authtoken: authToken,\n}, function(options, callback) {\n    saveUserStreamEntries({\n        email: email,\n        authtoken: authToken,\n    }, function(error, flows) {\n        var filterURL = apiURL + \"?get=flowshared\";\n        api.get(filterURL)\n            .set('org_uid', org_uid)\n            .set('authtoken', authToken)\n            .expect(httpStatus.OK)\n            .end(function(error, res) {\n                if (error) {\n                    done(error);\n                } else {\n                    (typeof(res.body.output.objects) != \"undefined\").should.equal(true);\n                    done();\n                }\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d5ececa3-77dd-4939-9d7f-168114e93a96",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get flow total run count.",
                    "fullTitle": "Enterprise Payment Payment.getStatisticOrg Should get flow total run count.",
                    "timedOut": false,
                    "duration": 306,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nsaveBillEntries({\n    email: email,\n    authtoken: authToken,\n}, function(options, callback) {\n    saveUserStreamEntries({\n        email: email,\n        authtoken: authToken,\n    }, function(error, flows) {\n        var filterURL = apiURL + \"?get=totalrun\";\n        api.get(filterURL)\n            .set('org_uid', org_uid)\n            .set('authtoken', authToken)\n            .expect(httpStatus.OK)\n            .end(function(error, res) {\n                if (error) {\n                    done(error);\n                } else {\n                    (typeof(res.body.output.objects) != \"undefined\").should.equal(true);\n                    done();\n                }\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c9656612-ae13-4586-a725-4cc0e0f6d5f7",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Payment Payment.getStatisticOrg Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cafa9cf4-7ecd-4e1a-8edb-2e8d10209aa3",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "8199bfe5-1ccf-4175-b3cd-ff395e98c512",
                  "84d80084-7497-4809-8412-80dd17e8d12a",
                  "2a8b9dad-f23d-4da0-9c09-e30df7c188f0",
                  "d02c47d2-1e23-4eef-bbeb-c0922d6e7afd",
                  "2a1e9549-ed2c-494a-8be7-a6534e288da0",
                  "da01eab9-02b0-4582-a5af-f07d12e05a2d",
                  "3222ce8d-fce9-43c4-818b-30013822b9c2",
                  "9a164ed4-953b-446f-9f37-ff4242c20b28",
                  "8b797076-3c20-4cb3-b209-119635ff8ac2",
                  "44deed48-fdd9-48f2-ab31-80d8275e993f",
                  "46076154-cc8e-48bc-b62c-10252d2fa130",
                  "d5ececa3-77dd-4939-9d7f-168114e93a96",
                  "c9656612-ae13-4586-a725-4cc0e0f6d5f7",
                  "cafa9cf4-7ecd-4e1a-8edb-2e8d10209aa3"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 8189,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "58356888-a462-471a-866e-414229b2fa4e",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\payment\\getSubscriptionDetailFromBraintree.enterprise.js",
        "file": "\\controllers\\test\\payment\\getSubscriptionDetailFromBraintree.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "88edfa3b-724e-4f93-a198-db7ad552a7c6",
            "title": "User",
            "fullFile": "D:\\api\\controllers\\test\\payment\\getSubscriptionDetailFromBraintree.enterprise.js",
            "file": "\\controllers\\test\\payment\\getSubscriptionDetailFromBraintree.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "f2a9bb28-3319-4482-ba09-06e7886e9636",
                "title": "Payment.getSubscriptionDetailFromBraintree",
                "fullFile": "D:\\api\\controllers\\test\\payment\\getSubscriptionDetailFromBraintree.enterprise.js",
                "file": "\\controllers\\test\\payment\\getSubscriptionDetailFromBraintree.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User Payment.getSubscriptionDetailFromBraintree \"before each\" hook",
                    "timedOut": false,
                    "duration": 245,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n    _models.Mail.remove({ $or: [{ to: new RegExp('^test.user+', \"i\") }, { to: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n        commonMock.setSignUpMocks(httpmock, \"enterprise\");\n        api.post(\"/enterprise/v1/signup\")\n            .send(registrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    authToken = res.body.output.authtoken;\n                    token = res.body.output.activation_token;\n                    _id = res.body.output._id;\n                    uid = res.body.output.uid;\n                    done();\n                }\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "349f8451-3a23-46d6-a6b8-2c24b2e95985",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User Payment.getSubscriptionDetailFromBraintree \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "df8dddcf-7b23-4ed8-a263-12e6dc18cac4",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should suspend user account.",
                    "fullTitle": "Enterprise User Payment.getSubscriptionDetailFromBraintree Should suspend user account.",
                    "timedOut": false,
                    "duration": 75,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.findOneAndUpdate({ uid: uid }, {\n    braintree_subscriptionId: \"FAKE_SUBSCRIPTION_ID\",\n    braintree_customerId: \"FAKE_ID\",\n    merchantid: \"FAKE_MERCHANT_ID\"\n}, function(error, user) {\n    commonMock.braintreeFindCard(httpmock, \"enterprise\");\n    commonMock.braintreeFindSubscription(httpmock, \"enterprise\");\n    api.get(apiURL)\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                (res.body.output.cardDetails.cardholderName == res.body.output.billingDetails.firstName && res.body.output.billingDetails.firstName == \"Amber More\").should.equal(true);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "76f28e4b-8d29-49dd-823a-d5bc72ab5c45",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give card detail not fount error.",
                    "fullTitle": "Enterprise User Payment.getSubscriptionDetailFromBraintree Should give card detail not fount error.",
                    "timedOut": false,
                    "duration": 42,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.CARD_DETAIL_CC_NOT_FOUND);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e9fe3e98-4c1f-490d-b944-87344731fc75",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise User Payment.getSubscriptionDetailFromBraintree Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.braintreeFindCard(httpmock, \"enterprise\");\ncommonMock.braintreeFindSubscription(httpmock, \"enterprise\");\napi.get(apiURL)\n    .send({})\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2221e060-0c65-44e6-bf6a-6f5581b67e60",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "76f28e4b-8d29-49dd-823a-d5bc72ab5c45",
                  "e9fe3e98-4c1f-490d-b944-87344731fc75",
                  "2221e060-0c65-44e6-bf6a-6f5581b67e60"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 125,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "1d826231-43c6-4d14-a32e-70f5c825e42f",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\payment\\getSubscriptionDetailFromBraintreeOrg.enterprise.js",
        "file": "\\controllers\\test\\payment\\getSubscriptionDetailFromBraintreeOrg.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "ba900fcd-8a8d-4631-b791-f6c2b7ef725a",
            "title": "User",
            "fullFile": "D:\\api\\controllers\\test\\payment\\getSubscriptionDetailFromBraintreeOrg.enterprise.js",
            "file": "\\controllers\\test\\payment\\getSubscriptionDetailFromBraintreeOrg.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "86f28244-a9f5-4ae7-a459-ea77daa10907",
                "title": "Payment.getSubscriptionDetailFromBraintreeOrg",
                "fullFile": "D:\\api\\controllers\\test\\payment\\getSubscriptionDetailFromBraintreeOrg.enterprise.js",
                "file": "\\controllers\\test\\payment\\getSubscriptionDetailFromBraintreeOrg.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User Payment.getSubscriptionDetailFromBraintreeOrg \"before each\" hook",
                    "timedOut": false,
                    "duration": 176,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8b543932-37c8-4515-8b00-b24fe662c128",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User Payment.getSubscriptionDetailFromBraintreeOrg \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "961a668b-6876-46f3-a626-0e31d08937ab",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should suspend user account.",
                    "fullTitle": "Enterprise User Payment.getSubscriptionDetailFromBraintreeOrg Should suspend user account.",
                    "timedOut": false,
                    "duration": 67,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.findOneAndUpdate({ uid: org_account_uid }, {\n    braintree_subscriptionId: \"FAKE_SUBSCRIPTION_ID\",\n    braintree_customerId: \"FAKE_ID\",\n    merchantid: \"FAKE_MERCHANT_ID\"\n}, function(error, user) {\n    commonMock.braintreeFindCard(httpmock, \"enterprise\");\n    commonMock.braintreeFindSubscription(httpmock, \"enterprise\");\n    api.get(apiURL)\n        .set('org_uid', org_uid)\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                (res.body.output.cardDetails.cardholderName == res.body.output.billingDetails.firstName && res.body.output.billingDetails.firstName == \"Amber More\").should.equal(true);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b3624938-0307-49ff-83f1-505fc6b34a80",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give card detail not fount error.",
                    "fullTitle": "Enterprise User Payment.getSubscriptionDetailFromBraintreeOrg Should give card detail not fount error.",
                    "timedOut": false,
                    "duration": 1743,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.CARD_DETAIL_CC_NOT_FOUND);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "55057521-1baa-47cd-8b79-0a15023f5bb3",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise User Payment.getSubscriptionDetailFromBraintreeOrg Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.braintreeFindCard(httpmock, \"enterprise\");\ncommonMock.braintreeFindSubscription(httpmock, \"enterprise\");\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .send({})\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5981f895-e386-4ea2-9258-48d851147985",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "b3624938-0307-49ff-83f1-505fc6b34a80",
                  "55057521-1baa-47cd-8b79-0a15023f5bb3",
                  "5981f895-e386-4ea2-9258-48d851147985"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 1819,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "537d2045-40ef-4681-910e-5fa86df4c169",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\payment\\pastDueInBraintreeSubscription.enterprise.js",
        "file": "\\controllers\\test\\payment\\pastDueInBraintreeSubscription.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "b95a09b5-b3d9-442b-9b5b-12f8a9cf4049",
            "title": "Payment",
            "fullFile": "D:\\api\\controllers\\test\\payment\\pastDueInBraintreeSubscription.enterprise.js",
            "file": "\\controllers\\test\\payment\\pastDueInBraintreeSubscription.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "ea1c2c6f-32c0-47f9-968b-93d699e1c3c2",
                "title": "Payment.pastDueInBraintreeSubscription",
                "fullFile": "D:\\api\\controllers\\test\\payment\\pastDueInBraintreeSubscription.enterprise.js",
                "file": "\\controllers\\test\\payment\\pastDueInBraintreeSubscription.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Payment Payment.pastDueInBraintreeSubscription \"before each\" hook",
                    "timedOut": false,
                    "duration": 418,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n\ntestCollection.organizationRemoveRecords({}, function() {\n    commonMock.setSignUpMocks(httpmock, \"enterprise\");\n    api.post(\"/enterprise/v1/signup\")\n        .send(registrationBody)\n        .expect(httpStatus.CREATED)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                authToken = res.body.output.authtoken;\n                _id = res.body.output._id;\n                _braintreeCustId = res.body.output.braintree_customerId;\n                _userUid = res.body.output.uid;\n                subscribedPayload.options[\"braintree_customerId\"] = _braintreeCustId;\n                subscriptionPastdue.options[\"braintree_customerId\"] = _braintreeCustId;\n                commonMock.braintreeSubscription(httpmock, \"enterprise\");\n                commonMock.braintreeUpdatePaymentMethod(httpmock, \"enterprise\");\n                api.post(\"/enterprise/v1/user/account/creditcards\")\n                    .send(saveCardBody)\n                    .set('authtoken', authToken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            commonMock.braintreeSubscription(httpmock, \"enterprise\");\n                            commonMock.intercomUserUpdate(httpmock, \"enterprise\");\n                            api.post(\"/v1/webhook/subscription/start\")\n                                .send(subscribedPayload)\n                                .expect(httpStatus.OK)\n                                .end(function(err, res) {\n                                    if (err) {\n                                        done(err);\n                                    } else {\n                                        done();\n                                    }\n                                });\n                        }\n                    });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2c7d6563-b639-45e8-b713-e9388128a005",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Payment Payment.pastDueInBraintreeSubscription \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f7b120bc-d70b-44aa-9fbc-287e41b31f45",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should subscription pastdue.",
                    "fullTitle": "Enterprise Payment Payment.pastDueInBraintreeSubscription Should subscription pastdue.",
                    "timedOut": false,
                    "duration": 38,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.braintreeSubscription(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(subscriptionPastdue)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.message.should.equal(messageList.BRAINTREE_WEBHOOK_NOTED);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "31704086-67c7-4a14-8579-aba9baa48380",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should subscription pastdue.",
                    "fullTitle": "Enterprise Payment Payment.pastDueInBraintreeSubscription Should subscription pastdue.",
                    "timedOut": false,
                    "duration": 199,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRecordsEntry({}, function(data) {\n    commonMock.braintreeSubscription(httpmock, \"enterprise\");\n    var temp_subscriptionPastdue = getImmutable(subscriptionPastdue);\n    temp_subscriptionPastdue.options.braintree_customerId = data.organization_account.braintree_customerId;\n    api.post(apiURL)\n        .send(temp_subscriptionPastdue)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                res.body.output.message.should.equal(messageList.BRAINTREE_WEBHOOK_NOTED);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6f475937-1cb0-4b6a-beb8-d7ee504fe0da",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "31704086-67c7-4a14-8579-aba9baa48380",
                  "6f475937-1cb0-4b6a-beb8-d7ee504fe0da"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 237,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "16a57a1d-b4e5-40d4-bf4c-a3404467d6f4",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\payment\\saveCardInBrainTree.enterprise.js",
        "file": "\\controllers\\test\\payment\\saveCardInBrainTree.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "b2c93f1c-a604-43c0-b074-2d9b63ce2c0e",
            "title": "Payment",
            "fullFile": "D:\\api\\controllers\\test\\payment\\saveCardInBrainTree.enterprise.js",
            "file": "\\controllers\\test\\payment\\saveCardInBrainTree.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "5ea5b3d3-9df7-473a-86e6-d47074393a20",
                "title": "Payment.SaveCardInBrainTree",
                "fullFile": "D:\\api\\controllers\\test\\payment\\saveCardInBrainTree.enterprise.js",
                "file": "\\controllers\\test\\payment\\saveCardInBrainTree.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Payment Payment.SaveCardInBrainTree \"before each\" hook",
                    "timedOut": false,
                    "duration": 279,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    signupUser({}, done, function(res) {\n        authToken = res.body.output.authtoken;\n        _id = res.body.output._id;\n        uid = res.body.output.uid;\n        plan_uid = res.body.output.plan[0].uid;\n        savePlanEntries({\n            count: 5\n        }, function(error, planEntries) {\n            _planEntries = planEntries;\n            done();\n        });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8c0d0e7b-ec90-4941-83d8-1f242023917b",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Payment Payment.SaveCardInBrainTree \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bba2b6ee-7f7b-4825-ade7-26654a739ad5",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should save credit card.",
                    "fullTitle": "Enterprise Payment Payment.SaveCardInBrainTree Should save credit card.",
                    "timedOut": false,
                    "duration": 93,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.braintreeUpdatePaymentMethod(httpmock, \"enterprise\");\ncommonMock.braintreeSubscription(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(saveCardBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var flag = (((res.body.output.plan || [{\n                braintree_plan: \"\"\n            }])[0].braintree_plan || \"\") == saveCardBody.data.selectedPlan.braintree_plan);\n            (flag && res.body.output.metadata.test_flag).should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5e18c89c-1da0-44b1-95ac-282d232890bb",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Apply promocode while saving card in braintree.",
                    "fullTitle": "Enterprise Payment Payment.SaveCardInBrainTree Apply promocode while saving card in braintree.",
                    "timedOut": false,
                    "duration": 169,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napplyPromoCode({}, done, function(res) {\n    if (((res.body.output.plan[0] || { \"plan_price\": \"\" }).plan_price || \"\") == \"\") {\n        true.should.equal(false);\n        done();\n    } else {\n        api.get(\"/enterprise/v1/user\")\n            .set('authtoken', authToken)\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    var user = res.body.output;\n                    var isValid = typeof(user._id) == \"undefined\" &&\n                        typeof(user.__v) == \"undefined\" &&\n                        user.user_plan.reimburse.credits == 100005 &&\n                        user.user_plan.reimburse.period == 30 &&\n                        user.user_plan.trigger.count == 22;\n                    isValid.should.equal(true);\n                    done();\n                }\n            });\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1b2b36fe-e853-4f05-b099-075fce4532ca",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give invalid parameters error.",
                    "fullTitle": "Enterprise Payment Payment.SaveCardInBrainTree Should give invalid parameters error.",
                    "timedOut": false,
                    "duration": 37,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.braintreeUpdatePaymentMethod(httpmock, \"enterprise\");\ncommonMock.braintreeSubscription(httpmock, \"enterprise\");\nvar tempSaveCardBody = getImmutable(saveCardBody);\ndelete tempSaveCardBody.data.cardholderName;\ndelete tempSaveCardBody.data.selectedPlan;\ndelete tempSaveCardBody.data.nonce;\ndelete tempSaveCardBody.data.company;\ndelete tempSaveCardBody.data.billing_address1;\napi.post(apiURL)\n    .send(tempSaveCardBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.error.name.message == messageList.SAVE_CARD_CUSTOMER_NAME_RQUIRED &&\n                res.body.error[\"selectedPlan.braintree_plan\"].message == messageList.SAVE_CARD_BRAINTREE_PLAN_REQUIRED &&\n                res.body.error.nonce.message == messageList.SAVE_CARD_NONCE_RQUIRED &&\n                res.body.error.company.message == messageList.SAVE_CARD_COMPANY_RQUIRED &&\n                res.body.error.billing_address1.message == messageList.SAVE_CARD_STREET_ADDRESS_RQUIRED;\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8751c6cd-06ae-4c50-914d-7cb14582cbce",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give invalid parameters error for empty parameters.",
                    "fullTitle": "Enterprise Payment Payment.SaveCardInBrainTree Should give invalid parameters error for empty parameters.",
                    "timedOut": false,
                    "duration": 38,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.braintreeUpdatePaymentMethod(httpmock, \"enterprise\");\ncommonMock.braintreeSubscription(httpmock, \"enterprise\");\nvar tempSaveCardBody = getImmutable(saveCardBody);\ntempSaveCardBody.data.cardholderName = \" \";\ntempSaveCardBody.data.selectedPlan.braintree_plan = \" \";\ntempSaveCardBody.data.nonce = \" \";\ntempSaveCardBody.data.company = \" \";\ntempSaveCardBody.data.billing_address1 = \" \";\napi.post(apiURL)\n    .send(tempSaveCardBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.error.name.message == messageList.SAVE_CARD_CUSTOMER_NAME_RQUIRED &&\n                res.body.error[\"selectedPlan.braintree_plan\"].message == messageList.SAVE_CARD_BRAINTREE_PLAN_REQUIRED &&\n                res.body.error.nonce.message == messageList.SAVE_CARD_NONCE_RQUIRED &&\n                res.body.error.company.message == messageList.SAVE_CARD_COMPANY_RQUIRED &&\n                res.body.error.billing_address1.message == messageList.SAVE_CARD_STREET_ADDRESS_RQUIRED;\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4a317947-d1a4-4d2d-bf5b-143b423629eb",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give invalid parameters error for empty name parameter.",
                    "fullTitle": "Enterprise Payment Payment.SaveCardInBrainTree Should give invalid parameters error for empty name parameter.",
                    "timedOut": false,
                    "duration": 47,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.braintreeUpdatePaymentMethod(httpmock, \"enterprise\");\ncommonMock.braintreeSubscription(httpmock, \"enterprise\");\nvar tempSaveCardBody = getImmutable(saveCardBody);\ndelete tempSaveCardBody.data.cardholderName;\ntempSaveCardBody.data.name = \" \";\ntempSaveCardBody.data.selectedPlan.braintree_plan = \" \";\ntempSaveCardBody.data.nonce = \" \";\ntempSaveCardBody.data.company = \" \";\ntempSaveCardBody.data.billing_address1 = \" \";\napi.post(apiURL)\n    .send(tempSaveCardBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.error.name.message == messageList.SAVE_CARD_CUSTOMER_NAME_RQUIRED &&\n                res.body.error[\"selectedPlan.braintree_plan\"].message == messageList.SAVE_CARD_BRAINTREE_PLAN_REQUIRED &&\n                res.body.error.nonce.message == messageList.SAVE_CARD_NONCE_RQUIRED &&\n                res.body.error.company.message == messageList.SAVE_CARD_COMPANY_RQUIRED &&\n                res.body.error.billing_address1.message == messageList.SAVE_CARD_STREET_ADDRESS_RQUIRED;\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b632de4a-c467-435e-b576-c8726eab12b5",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error if wrong promocode is provide.",
                    "fullTitle": "Enterprise Payment Payment.SaveCardInBrainTree Should give error if wrong promocode is provide.",
                    "timedOut": false,
                    "duration": 37,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napplyPromoCode({\n    promo_code: \"FAKE_PROMOCODE\",\n    status: httpStatus.BAD_REQUEST\n}, done, function(res) {\n    res.body.error.message.should.equal(messageList.PROMOCODE_INVALID);\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3ecaf2f7-e3d7-4295-87ae-8a55c0f13d09",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Apply another promocode while saving card in braintree.",
                    "fullTitle": "Enterprise Payment Payment.SaveCardInBrainTree Apply another promocode while saving card in braintree.",
                    "timedOut": false,
                    "duration": 265,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napplyPromoCodeToAlreadyApplyPromocode({}, done, function(user) {\n    var isValid = typeof(user._id) == \"undefined\" &&\n        typeof(user.__v) == \"undefined\" &&\n        user.user_plan.reimburse.credits == 100005 &&\n        user.user_plan.reimburse.period == 30 &&\n        user.user_plan.trigger.count == 22;\n    isValid.should.equal(true);\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "79fa0334-8ac3-49d8-b678-7ed5d3b4f58f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not allowed to apply promocode if second time subscribe plan is not allowed.",
                    "fullTitle": "Enterprise Payment Payment.SaveCardInBrainTree Should not allowed to apply promocode if second time subscribe plan is not allowed.",
                    "timedOut": false,
                    "duration": 144,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.Plan.findOne({\n    uid: plan_uid\n}, function(error, plan) {\n    addPromcode({\n        count: 2,\n        promo_code: \"PROMO_CODE\",\n        domain: \"raweng.com\",\n        redemption_count: 1,\n        redemption_start: moment(new Date()).subtract(1, 'days'),\n        redemption_end: moment(new Date()).add(1, 'days'),\n        allowed_plans: [plan],\n        default_plan: null,\n        addon_credits: 5,\n        addon_flows: 2,\n        addon_triggers: 2,\n        addon_trial_days: 10,\n        braintree_discount_id: \"PROMO_CODE\",\n        promo_features_expiration: moment(new Date()).add(10, 'days')\n    }, function(error, promoCodes) {\n        addPromcodeToUser({\n            promo_code: promoCodes[0].promo_code\n        }, function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                var userPromoCode = res.body.output;\n                if (userPromoCode.user_uid == uid &&\n                    userPromoCode.uid != \"\") {\n                    commonMock.brainTreeClientToken(httpmock, \"enterprise\");\n                    api.get(\"/enterprise/v1/user\")\n                        .set('authtoken', authToken)\n                        .expect(httpStatus.OK)\n                        .end(function(err, res) {\n                            if (err) {\n                                done(err);\n                            } else {\n                                var isValid = res.body.output.uid == uid &&\n                                    typeof(res.body.output._id) == \"undefined\" &&\n                                    typeof(res.body.output.__v) == \"undefined\" &&\n                                    res.body.output.subscription.days == 40;\n                                var firstPrommoCode = res.body.output.user_promocode.promo_code;\n                                if (isValid) {\n                                    commonMock.braintreeUpdatePaymentMethod(httpmock, \"enterprise\");\n                                    commonMock.braintreeSubscription(httpmock, \"enterprise\");\n                                    var tempSaveCardBody = getImmutable(saveCardBody);\n                                    tempSaveCardBody.data.promo_code = promoCodes[1].promo_code;\n                                    api.post(apiURL)\n                                        .send(tempSaveCardBody)\n                                        .set('authtoken', authToken)\n                                        .expect(httpStatus.BAD_REQUEST)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                res.body.error.message.should.equal(messageList.PROMOCODE_NOT_ALLOWED_PLAN);\n                                                done();\n                                            }\n                                        });\n                                } else {\n                                    true.should.equal(false);\n                                    done();\n                                }\n                            }\n                        });\n                } else {\n                    true.should.equal(false);\n                    done();\n                }\n            }\n        });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0fe0c1b4-cc3f-4317-9289-6ce6c1cb4c6f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not allowed to apply promocode if second time subscribe plan is not allowed and revoked_promo is set to true.",
                    "fullTitle": "Enterprise Payment Payment.SaveCardInBrainTree Should not allowed to apply promocode if second time subscribe plan is not allowed and revoked_promo is set to true.",
                    "timedOut": false,
                    "duration": 137,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.Plan.findOne({\n    uid: plan_uid\n}, function(error, plan) {\n    addPromcode({\n        count: 2,\n        promo_code: \"PROMO_CODE\",\n        domain: \"raweng.com\",\n        redemption_count: 1,\n        redemption_start: moment(new Date()).subtract(1, 'days'),\n        redemption_end: moment(new Date()).add(1, 'days'),\n        allowed_plans: [plan],\n        default_plan: null,\n        addon_credits: 5,\n        addon_flows: 2,\n        addon_triggers: 2,\n        addon_trial_days: 10,\n        braintree_discount_id: \"PROMO_CODE\",\n        promo_features_expiration: moment(new Date()).add(10, 'days')\n    }, function(error, promoCodes) {\n        addPromcodeToUser({\n            promo_code: promoCodes[0].promo_code\n        }, function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                var userPromoCode = res.body.output;\n                if (userPromoCode.user_uid == uid &&\n                    userPromoCode.uid != \"\") {\n                    commonMock.brainTreeClientToken(httpmock, \"enterprise\");\n                    api.get(\"/enterprise/v1/user\")\n                        .set('authtoken', authToken)\n                        .expect(httpStatus.OK)\n                        .end(function(err, res) {\n                            if (err) {\n                                done(err);\n                            } else {\n                                var isValid = res.body.output.uid == uid &&\n                                    typeof(res.body.output._id) == \"undefined\" &&\n                                    typeof(res.body.output.__v) == \"undefined\" &&\n                                    res.body.output.subscription.days == 40;\n                                var firstPrommoCode = res.body.output.user_promocode.promo_code;\n                                if (isValid) {\n                                    commonMock.braintreeUpdatePaymentMethod(httpmock, \"enterprise\");\n                                    commonMock.braintreeSubscription(httpmock, \"enterprise\");\n                                    var tempSaveCardBody = getImmutable(saveCardBody);\n                                    tempSaveCardBody.data.promo_code = promoCodes[0].promo_code;\n                                    tempSaveCardBody.data.revoked_promo = true;\n                                    api.post(apiURL)\n                                        .send(tempSaveCardBody)\n                                        .set('authtoken', authToken)\n                                        .expect(httpStatus.BAD_REQUEST)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                res.body.error.message.should.equal(messageList.PROMOCODE_NOT_ALLOWED_PLAN);\n                                                done();\n                                            }\n                                        });\n                                } else {\n                                    true.should.equal(false);\n                                    done();\n                                }\n                            }\n                        });\n                } else {\n                    true.should.equal(false);\n                    done();\n                }\n            }\n        });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "32ffa09b-2fcf-4cf8-84a8-c3d47091a3a3",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not show empty plan_price on save credit card.",
                    "fullTitle": "Enterprise Payment Payment.SaveCardInBrainTree Should not show empty plan_price on save credit card.",
                    "timedOut": false,
                    "duration": 93,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.braintreeUpdatePaymentMethod(httpmock, \"enterprise\");\ncommonMock.braintreeSubscription(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(saveCardBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            ((res.body.output.plan[0] || { \"plan_price\": \"\" }).plan_price || \"\")\n            .should.not.equal(\"\");\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2b2179c5-2f8c-4611-8967-531241c93e86",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should save credit card and cancel earlier subscription.",
                    "fullTitle": "Enterprise Payment Payment.SaveCardInBrainTree Should save credit card and cancel earlier subscription.",
                    "timedOut": false,
                    "duration": 224,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.braintreeUpdatePaymentMethod(httpmock, \"enterprise\");\ncommonMock.braintreeSubscription(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(saveCardBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            commonMock.braintreeCancelSubscription(httpmock, \"enterprise\");\n            commonMock.braintreeUpdatePaymentMethod(httpmock, \"enterprise\");\n            commonMock.braintreeSubscription(httpmock, \"enterprise\");\n            api.post(apiURL)\n                .send(saveCardBody)\n                .set('authtoken', authToken)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        ((res.body.output.plan || [{\n                            braintree_plan: \"\"\n                        }])[0].braintree_plan || \"\").should.equal(saveCardBody.data.selectedPlan.braintree_plan);\n                        done();\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "82a8454a-0952-48a9-88e4-fcddf8ac0b8b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should save credit card and ignore already subscription cancellation error.",
                    "fullTitle": "Enterprise Payment Payment.SaveCardInBrainTree Should save credit card and ignore already subscription cancellation error.",
                    "timedOut": false,
                    "duration": 211,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.braintreeUpdatePaymentMethod(httpmock, \"enterprise\");\ncommonMock.braintreeSubscription(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(saveCardBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            commonMock.braintreeAlreadyCancelSubscription(httpmock, \"enterprise\");\n            commonMock.braintreeUpdatePaymentMethod(httpmock, \"enterprise\");\n            commonMock.braintreeSubscription(httpmock, \"enterprise\");\n            api.post(apiURL)\n                .send(saveCardBody)\n                .set('authtoken', authToken)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        ((res.body.output.plan || [{\n                            braintree_plan: \"\"\n                        }])[0].braintree_plan || \"\").should.equal(saveCardBody.data.selectedPlan.braintree_plan);\n                        done();\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3a41e0f3-b3c9-4eec-9188-695dc7370272",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Payment Payment.SaveCardInBrainTree Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.braintreeCancelSubscription(httpmock, \"enterprise\");\ncommonMock.braintreeSubscription(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(saveCardBody)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "da952ea6-e858-41d4-89b8-aefb237fd817",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "5e18c89c-1da0-44b1-95ac-282d232890bb",
                  "1b2b36fe-e853-4f05-b099-075fce4532ca",
                  "8751c6cd-06ae-4c50-914d-7cb14582cbce",
                  "4a317947-d1a4-4d2d-bf5b-143b423629eb",
                  "b632de4a-c467-435e-b576-c8726eab12b5",
                  "3ecaf2f7-e3d7-4295-87ae-8a55c0f13d09",
                  "79fa0334-8ac3-49d8-b678-7ed5d3b4f58f",
                  "0fe0c1b4-cc3f-4317-9289-6ce6c1cb4c6f",
                  "32ffa09b-2fcf-4cf8-84a8-c3d47091a3a3",
                  "2b2179c5-2f8c-4611-8967-531241c93e86",
                  "82a8454a-0952-48a9-88e4-fcddf8ac0b8b",
                  "3a41e0f3-b3c9-4eec-9188-695dc7370272",
                  "da952ea6-e858-41d4-89b8-aefb237fd817"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 1506,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "cc908f63-23c9-4b78-8856-d067b83b7681",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\payment\\updatePaymentDetails.enterprise.js",
        "file": "\\controllers\\test\\payment\\updatePaymentDetails.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "fa1e8a8a-b438-4f05-a5a5-6070942960ee",
            "title": "Payment",
            "fullFile": "D:\\api\\controllers\\test\\payment\\updatePaymentDetails.enterprise.js",
            "file": "\\controllers\\test\\payment\\updatePaymentDetails.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "35ca76cd-7ba5-441c-91f5-23c926bddc45",
                "title": "Payment.updatePaymentDetails",
                "fullFile": "D:\\api\\controllers\\test\\payment\\updatePaymentDetails.enterprise.js",
                "file": "\\controllers\\test\\payment\\updatePaymentDetails.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Payment Payment.updatePaymentDetails \"before each\" hook",
                    "timedOut": false,
                    "duration": 392,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n    _models.Mail.remove({ $or: [{ to: new RegExp('^test.user+', \"i\") }, { to: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n        commonMock.setSignUpMocks(httpmock, \"enterprise\");\n        api.post(\"/enterprise/v1/signup\")\n            .send(registrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    var data = res.body.output;\n                    authToken = data.authtoken;\n                    _id = data._id;\n                    //braintreeToken = data.payment_set;\n                    //updatePaymentBody.data.token = braintreeToken;\n                    //done();\n                    commonMock.braintreeUpdatePaymentMethod(httpmock, \"enterprise\");\n                    commonMock.braintreeSubscription(httpmock, \"enterprise\");\n                    var userUid = res.body.output.uid;\n                    api.post(\"/enterprise/v1/user/account/creditcards\")\n                        .send(saveCardBody)\n                        .set('authtoken', authToken)\n                        .expect(httpStatus.OK)\n                        .end(function(err, res) {\n                            if (err) {\n                                done(err);\n                            } else {\n                                //updatePaymentBody.data.token = res.body.output.token;\n                                done();\n                            }\n                        });\n                }\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "212f5080-2baa-4d19-87bf-1efd96c3300c",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Payment Payment.updatePaymentDetails \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "25585a69-3df1-437a-bf78-a8222fa13f3b",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should update payment method.",
                    "fullTitle": "Enterprise Payment Payment.updatePaymentDetails Should update payment method.",
                    "timedOut": false,
                    "duration": 48,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.braintreeUpdatePaymentDetail(httpmock, \"enterprise\");\napi.put(apiURL)\n    .send(updatePaymentBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            (res.body.output || {}).cardholderName.should.equal(updatePaymentBody.data.billing.cardholderName);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ebc48203-7760-4412-968f-51e06c0bfdbc",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should update payment method with firstName field.",
                    "fullTitle": "Enterprise Payment Payment.updatePaymentDetails Should update payment method with firstName field.",
                    "timedOut": false,
                    "duration": 67,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.braintreeUpdatePaymentDetail(httpmock, \"enterprise\");\nvar userDetails = getImmutable(updatePaymentBody);\nuserDetails.data.billing.firstName = userDetails.data.billing.cardholderName;\ndelete userDetails.data.billing.cardholderName;\napi.put(apiURL)\n    .send(updatePaymentBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            (res.body.output || {}).cardholderName.should.equal(updatePaymentBody.data.billing.cardholderName);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c15fbac6-f591-4451-a36b-79f6f9d39fe6",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give invalid parameters error.",
                    "fullTitle": "Enterprise Payment Payment.updatePaymentDetails Should give invalid parameters error.",
                    "timedOut": false,
                    "duration": 50,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.braintreeUpdatePaymentMethod(httpmock, \"enterprise\");\ncommonMock.braintreeSubscription(httpmock, \"enterprise\");\nvar tempSaveCardBody = getImmutable(saveCardBody);\ndelete tempSaveCardBody.data.cardholderName;\ndelete tempSaveCardBody.data.nonce;\ndelete tempSaveCardBody.data.token;\ndelete tempSaveCardBody.data.company;\ndelete tempSaveCardBody.data.streetAddress;\napi.put(apiURL)\n    .send(tempSaveCardBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.error[\"billing.name\"].message == messageList.UPDATE_PAYMENT_BILLING_NAME_REQUIRED &&\n                res.body.error.nonce.message == messageList.UPDATE_PAYMENT_NONCE_REQUIRED &&\n                res.body.error.token.message == messageList.UPDATE_PAYMENT_TOKEN_REQUIRED &&\n                res.body.error[\"billing.company\"].message == messageList.UPDATE_PAYMENT_COMPANY_REQUIRED &&\n                res.body.error[\"billing.streetAddress\"].message == messageList.UPDATE_PAYMENT_STREET_ADDRESS_REQUIRED;\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cc10dab5-928f-445d-a0eb-4811e62b29cf",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give invalid parameters error for empty parameters.",
                    "fullTitle": "Enterprise Payment Payment.updatePaymentDetails Should give invalid parameters error for empty parameters.",
                    "timedOut": false,
                    "duration": 36,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.braintreeUpdatePaymentMethod(httpmock, \"enterprise\");\ncommonMock.braintreeSubscription(httpmock, \"enterprise\");\nvar tempSaveCardBody = getImmutable(saveCardBody);\ntempSaveCardBody.data.cardholderName = \" \";\ntempSaveCardBody.data.nonce = \" \";\ntempSaveCardBody.data.token = \" \";\ntempSaveCardBody.data.company = \" \";\ntempSaveCardBody.data.streetAddress = \" \";\napi.put(apiURL)\n    .send(tempSaveCardBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.error[\"billing.name\"].message == messageList.UPDATE_PAYMENT_BILLING_NAME_REQUIRED &&\n                res.body.error.nonce.message == messageList.UPDATE_PAYMENT_NONCE_REQUIRED &&\n                res.body.error.token.message == messageList.UPDATE_PAYMENT_TOKEN_REQUIRED &&\n                res.body.error[\"billing.company\"].message == messageList.UPDATE_PAYMENT_COMPANY_REQUIRED &&\n                res.body.error[\"billing.streetAddress\"].message == messageList.UPDATE_PAYMENT_STREET_ADDRESS_REQUIRED;\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b6dd6ccf-710a-4938-9d7f-509c802c45f9",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Payment Payment.updatePaymentDetails Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.braintreeUpdatePaymentDetail(httpmock, \"enterprise\");\napi.put(apiURL)\n    .send(updatePaymentBody)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "76dba142-54bf-4282-9565-5ba0abcce9d7",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "ebc48203-7760-4412-968f-51e06c0bfdbc",
                  "c15fbac6-f591-4451-a36b-79f6f9d39fe6",
                  "cc10dab5-928f-445d-a0eb-4811e62b29cf",
                  "b6dd6ccf-710a-4938-9d7f-509c802c45f9",
                  "76dba142-54bf-4282-9565-5ba0abcce9d7"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 211,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "f63a3de6-ba1a-4ed6-a92b-082271aa681f",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\payment\\updatePaymentSet.enterprise.js",
        "file": "\\controllers\\test\\payment\\updatePaymentSet.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "419ac299-f41a-47ff-8ffe-9b24d6408b1b",
            "title": "Payment",
            "fullFile": "D:\\api\\controllers\\test\\payment\\updatePaymentSet.enterprise.js",
            "file": "\\controllers\\test\\payment\\updatePaymentSet.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "c2d44d3a-c586-438e-a730-0f01c1d3cbe7",
                "title": "Payment.UpdatePaymentSet",
                "fullFile": "D:\\api\\controllers\\test\\payment\\updatePaymentSet.enterprise.js",
                "file": "\\controllers\\test\\payment\\updatePaymentSet.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Payment Payment.UpdatePaymentSet \"before each\" hook",
                    "timedOut": false,
                    "duration": 276,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n    _models.Mail.remove({ $or: [{ to: new RegExp('^test.user+', \"i\") }, { to: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n        commonMock.setSignUpMocks(httpmock, \"enterprise\");\n        api.post(\"/enterprise/v1/signup\")\n            .send(registrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(error, res) {\n                if (error) {\n                    done(error);\n                } else {\n                    var data = res.body.output;\n                    authToken = data.authtoken;\n                    _id = data._id;\n                    payment_set = data.payment_set;\n                    if (error) {\n                        done(error);\n                    } else {\n                        done();\n                    }\n                }\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7ab2a90d-1335-42c2-b705-d987c250eb7c",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Payment Payment.UpdatePaymentSet \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a30a2f5c-a572-4ee8-811a-3e9660172ef8",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should update payment_set for user.",
                    "fullTitle": "Enterprise Payment Payment.UpdatePaymentSet Should update payment_set for user.",
                    "timedOut": false,
                    "duration": 78,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.brainTreeClientToken(httpmock, \"enterprise\");\napi.put(apiURL)\n    .send({})\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.payment_set.should.not.equal(\"\");\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f17fa52c-b6b3-483b-8239-65c3713b7fd0",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Payment Payment.UpdatePaymentSet Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.brainTreeClientToken(httpmock, \"enterprise\");\napi.put(apiURL)\n    .send({})\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5d8e1de5-cd50-4d9a-9d18-9914dc958531",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "f17fa52c-b6b3-483b-8239-65c3713b7fd0",
                  "5d8e1de5-cd50-4d9a-9d18-9914dc958531"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 88,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "f33d2163-98a8-46b7-9260-506253c7282d",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\payment\\upgradeAccount.enterprise.js",
        "file": "\\controllers\\test\\payment\\upgradeAccount.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "2b8a9e31-84ec-4c88-81f0-e47df2b734ec",
            "title": "Payment",
            "fullFile": "D:\\api\\controllers\\test\\payment\\upgradeAccount.enterprise.js",
            "file": "\\controllers\\test\\payment\\upgradeAccount.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "8451b561-0b41-4624-84eb-5d9c48129666",
                "title": "Payment.upgradeAccount",
                "fullFile": "D:\\api\\controllers\\test\\payment\\upgradeAccount.enterprise.js",
                "file": "\\controllers\\test\\payment\\upgradeAccount.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Payment Payment.upgradeAccount \"before each\" hook",
                    "timedOut": false,
                    "duration": 420,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ndeleteAllInsertedRecords(function(error, output) {\n    if (error) {\n        done(error);\n    } else {\n        commonMock.setSignUpMocks(httpmock, \"enterprise\");\n        api.post(\"/enterprise/v1/signup\")\n            .send(registrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    authToken = res.body.output.authtoken;\n                    _id = res.body.output._id;\n                    saveInvoices({\n                        authToken: authToken,\n                        braintree_customerId: res.body.output.braintree_customerId || \"\",\n                        uid: res.body.output.uid || \"\"\n                    }, function() {\n                        done();\n                    });\n                }\n            });\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7c0c7407-7a66-4407-9708-ba5efb6ee996",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Payment Payment.upgradeAccount \"after all\" hook",
                    "timedOut": false,
                    "duration": 3,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "deleteAllInsertedRecords(function(error, output) {\n    if (error) {\n        done(error);\n    } else {\n        done();\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a7271067-cd99-4711-a805-032003a30164",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Payment Payment.upgradeAccount \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "451b2b4e-8983-4172-8215-8277e6c77c52",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should update payment method.",
                    "fullTitle": "Enterprise Payment Payment.upgradeAccount Should update payment method.",
                    "timedOut": false,
                    "duration": 59,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.braintreeUpdateCustomerPaymentDetail(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(upgradeAccountBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.uid != \"\" &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\";\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "75edcec2-d981-432f-9f6a-a873ff76f324",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Payment Payment.upgradeAccount Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.braintreeUpdateCustomerPaymentDetail(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(upgradeAccountBody)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "715d7232-5d62-40f8-bbfa-662b535854a3",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "75edcec2-d981-432f-9f6a-a873ff76f324",
                  "715d7232-5d62-40f8-bbfa-662b535854a3"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 68,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "bc8f5f25-3ba4-4fc3-9c16-2b6e4870b080",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\plans\\getAllPlanFaq.enterprise.js",
        "file": "\\controllers\\test\\plans\\getAllPlanFaq.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "cf63f36b-4f13-462d-b7d4-211ce2c3349f",
            "title": "Plan",
            "fullFile": "D:\\api\\controllers\\test\\plans\\getAllPlanFaq.enterprise.js",
            "file": "\\controllers\\test\\plans\\getAllPlanFaq.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "2f5f1397-7903-40eb-92cd-f088802959ab",
                "title": "Plan.getAllPlanFaq",
                "fullFile": "D:\\api\\controllers\\test\\plans\\getAllPlanFaq.enterprise.js",
                "file": "\\controllers\\test\\plans\\getAllPlanFaq.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Enterprise Plan Plan.getAllPlanFaq \"before all\" hook",
                    "timedOut": false,
                    "duration": 1,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bcd442db-7a97-42c7-8d26-4fa73fc9c06f",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Plan Plan.getAllPlanFaq \"after all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\nthis.timeout(apiTimeOut);\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "eb9390e2-cbaf-4e40-b8b1-a1a8cc72461f",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get list of plans faqs.",
                    "fullTitle": "Enterprise Plan Plan.getAllPlanFaq Should get list of plans faqs.",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = Array.isArray(res.body.output);\n            if (isValid) {\n                _.each(res.body.output, function(item) {\n                    isValid = isValid && typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\";\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "40e27a48-6e5f-4234-82d2-af13dd25e4ce",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "40e27a48-6e5f-4234-82d2-af13dd25e4ce"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 14,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "7c93a2e7-0c9c-4dbd-873c-8f35f893a376",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\plans\\getFeatures.enterprise.js",
        "file": "\\controllers\\test\\plans\\getFeatures.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "1b9d8668-8674-4249-a2c7-12977eaee0ea",
            "title": "Plan",
            "fullFile": "D:\\api\\controllers\\test\\plans\\getFeatures.enterprise.js",
            "file": "\\controllers\\test\\plans\\getFeatures.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "1077a6f7-2497-452b-960a-94fc2c2649cd",
                "title": "plans.getFeatures",
                "fullFile": "D:\\api\\controllers\\test\\plans\\getFeatures.enterprise.js",
                "file": "\\controllers\\test\\plans\\getFeatures.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Enterprise Plan plans.getFeatures \"before all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6c961178-2d87-43cd-b0e5-f0c14bee5f5f",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Plan plans.getFeatures \"after all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\nthis.timeout(apiTimeOut);\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a36ad2c5-f710-42cd-94ae-5a2b6d2ee4a3",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get list of features.",
                    "fullTitle": "Enterprise Plan plans.getFeatures Should get list of features.",
                    "timedOut": false,
                    "duration": 41,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = Array.isArray(res.body.output);\n            if (isValid) {\n                _.each(res.body.output, function(item) {\n                    isValid = isValid && typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\";\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e7fbe030-7e52-4171-a955-e174af1183ea",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of features in specific range.",
                    "fullTitle": "Enterprise Plan plans.getFeatures Should get list of features in specific range.",
                    "timedOut": false,
                    "duration": 29,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar paramURL = apiURL + \"?skip=2&limit=2\";\napi.get(paramURL)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = Array.isArray(res.body.output);\n            if (isValid) {\n                _.each(res.body.output, function(item) {\n                    isValid = isValid && typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\";\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ef88b2ed-0128-46f3-9751-66b820b9f6f2",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of features with query by feature name.",
                    "fullTitle": "Enterprise Plan plans.getFeatures Should get list of features with query by feature name.",
                    "timedOut": false,
                    "duration": 52,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var featureName = ((res.body.output || [])[0] || {}).feature_name || \"\";\n            var paramURL = apiURL + \"?query=\" + featureName;\n            api.get(paramURL)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        var isValid = false;\n                        if (Array.isArray(res.body.output)) {\n                            isValid = res.body.output.length >= 1;\n                            _.each(res.body.output, function(item) {\n                                isValid = isValid && typeof(item._id) == \"undefined\" &&\n                                    typeof(item.__v) == \"undefined\";\n                            });\n                        }\n                        isValid.should.equal(true);\n                        done();\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "68af79ba-b4de-4680-8b47-6c342497b72f",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "e7fbe030-7e52-4171-a955-e174af1183ea",
                  "ef88b2ed-0128-46f3-9751-66b820b9f6f2",
                  "68af79ba-b4de-4680-8b47-6c342497b72f"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 122,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "db0a165b-ae08-4478-9f5e-062abc9b44b4",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\plans\\getFeaturesCount.enterprise.js",
        "file": "\\controllers\\test\\plans\\getFeaturesCount.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "55466bf4-4ba2-4b1a-855b-78f4859da74b",
            "title": "Plan",
            "fullFile": "D:\\api\\controllers\\test\\plans\\getFeaturesCount.enterprise.js",
            "file": "\\controllers\\test\\plans\\getFeaturesCount.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "5b31335b-be6f-458e-89be-5415c820a2b6",
                "title": "Plan.getFeaturesCount",
                "fullFile": "D:\\api\\controllers\\test\\plans\\getFeaturesCount.enterprise.js",
                "file": "\\controllers\\test\\plans\\getFeaturesCount.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Enterprise Plan Plan.getFeaturesCount \"before all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a3aa1444-8919-484d-b3a2-295b022fa242",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Plan Plan.getFeaturesCount \"after all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6ca96a61-2777-4b63-b1ee-a6e0e6699a28",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get count of features.",
                    "fullTitle": "Enterprise Plan Plan.getFeaturesCount Should get count of features.",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (isNaN(parseInt(res.body.output.count)) == false) {\n                isValid = parseInt(res.body.output.count) > 0;\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "42f84974-4421-44cc-817f-fcf57e9635b9",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "42f84974-4421-44cc-817f-fcf57e9635b9"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 14,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "97fdeeac-8f44-4ed6-8838-4c840bca7f0d",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\plans\\getOrgPlansData.enterprise.js",
        "file": "\\controllers\\test\\plans\\getOrgPlansData.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "312c1eb1-9354-45af-821e-17253fb29c5c",
            "title": "Plan",
            "fullFile": "D:\\api\\controllers\\test\\plans\\getOrgPlansData.enterprise.js",
            "file": "\\controllers\\test\\plans\\getOrgPlansData.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "3ce9b60f-929e-4d4d-a844-faa75f67d1d5",
                "title": "Plan.getOrgPlansData",
                "fullFile": "D:\\api\\controllers\\test\\plans\\getOrgPlansData.enterprise.js",
                "file": "\\controllers\\test\\plans\\getOrgPlansData.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Enterprise Plan Plan.getOrgPlansData \"before all\" hook",
                    "timedOut": false,
                    "duration": 316,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveEntries(function() {\n    commonMock.setSignUpMocks(httpmock, \"enterprise\");\n    api.post(\"/enterprise/v1/signup\")\n        .send(registrationBody)\n        .expect(httpStatus.CREATED)\n        .end(function(error, res) {\n            if (error) {\n                done(error);\n            } else {\n                authToken = res.body.output.authtoken;\n                user_uid = res.body.output.uid;\n                _id = res.body.output._id;\n                savePlanEntries({\n                    authtoken: authToken\n                }, function(error, tempPlanEntries) {\n                    savePlanEntries({\n                        authtoken: authToken,\n                        plan_type: \"enterprise_organization\"\n                    }, function(error, planEntries) {\n                        if (error) {\n                            done(error);\n                        } else {\n                            _planEntries = planEntries;\n                            done();\n                        }\n                    });\n                });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "973f0571-96f2-4733-b48d-fcacdd6de5a3",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Plan Plan.getOrgPlansData \"after all\" hook",
                    "timedOut": false,
                    "duration": 9,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveEntries(function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3b71e535-ae53-4e78-8e4a-b9981b1e92e8",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Plan Plan.getOrgPlansData \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "78ab06b5-ee85-4f54-a5d8-6af9fc13c754",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get list of plans.",
                    "fullTitle": "Enterprise Plan Plan.getOrgPlansData Should get list of plans.",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = Array.isArray(res.body.output);\n            if (isValid) {\n                _.each(res.body.output, function(item) {\n                    isValid = isValid && typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\" &&\n                        item.plan_type == \"enterprise_organization\";\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c5b812a8-bbc3-492e-9543-1b2858e77c2e",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of organization required plans.",
                    "fullTitle": "Enterprise Plan Plan.getOrgPlansData Should get list of organization required plans.",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?get=require\";\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = Array.isArray(res.body.output);\n            if (isValid) {\n                _.each(res.body.output, function(item) {\n                    isValid = isValid && typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\" &&\n                        item.plan_type == \"enterprise_organization\";\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1e1e44da-ddf3-43ed-8e48-848f7ce719ce",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get limited list of plans based on skip/limit.",
                    "fullTitle": "Enterprise Plan Plan.getOrgPlansData Should get limited list of plans based on skip/limit.",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?skip=2&limit=2\";\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (Array.isArray(res.body.output)) {\n                isValid = res.body.output.length == 2;\n                _.each(res.body.output, function(item) {\n                    isValid = isValid && typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\" &&\n                        item.plan_type == \"enterprise_organization\";\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b9c12df8-54ab-4d70-8f41-3cb5fba28c70",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get limited list of plans based on skip/limit.",
                    "fullTitle": "Enterprise Plan Plan.getOrgPlansData Should get limited list of plans based on skip/limit.",
                    "timedOut": false,
                    "duration": 30,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?skip=2&limit=2\";\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (Array.isArray(res.body.output)) {\n                isValid = res.body.output.length == 2;\n                _.each(res.body.output, function(item) {\n                    isValid = isValid && typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\" &&\n                        item.plan_type == \"enterprise_organization\";\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4def9a40-f049-42a2-acf6-e104281e6c37",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get filter list of plans.",
                    "fullTitle": "Enterprise Plan Plan.getOrgPlansData Should get filter list of plans.",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?query=utest_cases_\";\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (Array.isArray(res.body.output)) {\n                isValid = res.body.output.length == 10;\n                _.each(res.body.output, function(item) {\n                    isValid = isValid && typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\" &&\n                        item.plan_type == \"enterprise_organization\";\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d4974a22-3337-4852-8fda-be9eae90140f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get filter limited list of plans based on skip/limit.",
                    "fullTitle": "Enterprise Plan Plan.getOrgPlansData Should get filter limited list of plans based on skip/limit.",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?skip=2&limit=2&query=utest_cases_\";\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (Array.isArray(res.body.output)) {\n                isValid = res.body.output.length == 2;\n                _.each(res.body.output, function(item) {\n                    isValid = isValid && typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\" &&\n                        item.plan_type == \"enterprise_organization\";\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b57d2659-fbec-479b-8155-5e9cb318b512",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get filter limited list of plans based on skip/limit and name in descending order.",
                    "fullTitle": "Enterprise Plan Plan.getOrgPlansData Should get filter limited list of plans based on skip/limit and name in descending order.",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?skip=2&limit=2&query=utest_cases_&field=name&direction=desc\";\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (Array.isArray(res.body.output)) {\n                isValid = res.body.output[0].uid == _planEntries[7].uid &&\n                    res.body.output[1].uid == _planEntries[6].uid;\n\n                _.each(res.body.output, function(item) {\n                    isValid = isValid && typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\" &&\n                        item.plan_type == \"enterprise_organization\";\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3d672647-6c60-45ad-a783-7290711158f0",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "c5b812a8-bbc3-492e-9543-1b2858e77c2e",
                  "1e1e44da-ddf3-43ed-8e48-848f7ce719ce",
                  "b9c12df8-54ab-4d70-8f41-3cb5fba28c70",
                  "4def9a40-f049-42a2-acf6-e104281e6c37",
                  "d4974a22-3337-4852-8fda-be9eae90140f",
                  "b57d2659-fbec-479b-8155-5e9cb318b512",
                  "3d672647-6c60-45ad-a783-7290711158f0"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 120,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "8eb6c9fb-b91b-4622-98a2-410d001a741a",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\plans\\getPlanById.enterprise.js",
        "file": "\\controllers\\test\\plans\\getPlanById.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "305eae68-8e9b-4d6b-9b36-4efac033bb53",
            "title": "Plan",
            "fullFile": "D:\\api\\controllers\\test\\plans\\getPlanById.enterprise.js",
            "file": "\\controllers\\test\\plans\\getPlanById.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "ee2f1563-f1bf-4cdf-a2e4-ed157b653570",
                "title": "Plan.getPlanById",
                "fullFile": "D:\\api\\controllers\\test\\plans\\getPlanById.enterprise.js",
                "file": "\\controllers\\test\\plans\\getPlanById.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Enterprise Plan Plan.getPlanById \"before all\" hook",
                    "timedOut": false,
                    "duration": 291,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveEntries(function() {\n    commonMock.setSignUpMocks(httpmock, \"enterprise\");\n    api.post(\"/enterprise/v1/signup\")\n        .send(registrationBody)\n        .expect(httpStatus.CREATED)\n        .end(function(error, res) {\n            if (error) {\n                done(error);\n            } else {\n                authToken = res.body.output.authtoken;\n                user_uid = res.body.output.uid;\n                _id = res.body.output._id;\n                //apiURL = apiURL.replace(\":uid\", res.body.output.uid);\n                savePlanEntries({\n                    authtoken: authToken\n                }, function(error, planEntries) {\n                    if (error) {\n                        done(error);\n                    } else {\n                        _planEntries = planEntries;\n                        done();\n                    }\n                });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "55b6713c-a9f2-4235-8b13-f54d2746ddef",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Plan Plan.getPlanById \"after all\" hook",
                    "timedOut": false,
                    "duration": 7,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveEntries(function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7ed29ec0-3aaa-4aad-a5d1-54074356b327",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Plan Plan.getPlanById \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "494949b5-80ba-4def-9dfb-ab9ad72738a3",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get plan by id.",
                    "fullTitle": "Enterprise Plan Plan.getPlanById Should get plan by id.",
                    "timedOut": false,
                    "duration": 41,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar paramURL = apiURL.replace(\":plan_uid\", _planUid)\napi.get(paramURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.uid.should.equal(_planUid);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4d7ffd99-abbb-497a-b7e2-0c1d74adbf73",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Plan Plan.getPlanById Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar paramURL = apiURL.replace(\":plan_uid\", _planUid)\napi.get(paramURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b2db1878-4a65-4b45-889b-25c3c2e8d20e",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "4d7ffd99-abbb-497a-b7e2-0c1d74adbf73",
                  "b2db1878-4a65-4b45-889b-25c3c2e8d20e"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 48,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "606eb650-5a9f-42a1-863e-1723ab8afb6d",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\plans\\getPlansCount.enterprise.js",
        "file": "\\controllers\\test\\plans\\getPlansCount.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "15f466d6-20fb-4c7a-b8dd-837d78155617",
            "title": "Plan",
            "fullFile": "D:\\api\\controllers\\test\\plans\\getPlansCount.enterprise.js",
            "file": "\\controllers\\test\\plans\\getPlansCount.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "cf66c523-6fe9-467b-a2fd-7201831a8c96",
                "title": "Plan.getPlansCount",
                "fullFile": "D:\\api\\controllers\\test\\plans\\getPlansCount.enterprise.js",
                "file": "\\controllers\\test\\plans\\getPlansCount.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Enterprise Plan Plan.getPlansCount \"before all\" hook",
                    "timedOut": false,
                    "duration": 300,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveEntries(function() {\n    commonMock.setSignUpMocks(httpmock, \"enterprise\");\n    api.post(\"/enterprise/v1/signup\")\n        .send(registrationBody)\n        .expect(httpStatus.CREATED)\n        .end(function(error, res) {\n            if (error) {\n                done(error);\n            } else {\n                authToken = res.body.output.authtoken;\n                user_uid = res.body.output.uid;\n                _id = res.body.output._id;\n                savePlanEntries({\n                    authtoken: authToken\n                }, function(error, planEntries) {\n                    if (error) {\n                        done(error);\n                    } else {\n                        _planEntries = planEntries;\n                        done();\n                    }\n                });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f17381c4-f2b6-4ad2-b2d5-00f0b9620e6a",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Plan Plan.getPlansCount \"after all\" hook",
                    "timedOut": false,
                    "duration": 3,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveEntries(function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "61868f12-7d4b-4ca9-8c7a-8a8728e65fc7",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Plan Plan.getPlansCount \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8e76a0af-a1c2-4bb9-98f4-33f1c47479db",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get count of plans.",
                    "fullTitle": "Enterprise Plan Plan.getPlansCount Should get count of plans.",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            isNaN(parseInt(res.body.output.count)).should.equal(false);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cb577f65-a8e8-411d-9064-07f83191752e",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "cb577f65-a8e8-411d-9064-07f83191752e"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 13,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "4938dc32-45ff-4b13-96f7-e97aa5ac5353",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\plans\\getPlansData.enterprise.js",
        "file": "\\controllers\\test\\plans\\getPlansData.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "300d15a6-772b-4335-9f27-f0b6d67c193a",
            "title": "Plan",
            "fullFile": "D:\\api\\controllers\\test\\plans\\getPlansData.enterprise.js",
            "file": "\\controllers\\test\\plans\\getPlansData.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "90a50327-0d8a-4537-aef0-263a7521dde1",
                "title": "Plan.getPlansData",
                "fullFile": "D:\\api\\controllers\\test\\plans\\getPlansData.enterprise.js",
                "file": "\\controllers\\test\\plans\\getPlansData.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Enterprise Plan Plan.getPlansData \"before all\" hook",
                    "timedOut": false,
                    "duration": 310,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveEntries(function() {\n    commonMock.setSignUpMocks(httpmock, \"enterprise\");\n    api.post(\"/enterprise/v1/signup\")\n        .send(registrationBody)\n        .expect(httpStatus.CREATED)\n        .end(function(error, res) {\n            if (error) {\n                done(error);\n            } else {\n                authToken = res.body.output.authtoken;\n                user_uid = res.body.output.uid;\n                _id = res.body.output._id;\n                savePlanEntries({\n                    authtoken: authToken\n                }, function(error, planEntries) {\n                    if (error) {\n                        done(error);\n                    } else {\n                        _planEntries = planEntries;\n                        done();\n                    }\n                });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "feda41f6-58a5-42e3-b4c7-680d1726eeea",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Plan Plan.getPlansData \"after all\" hook",
                    "timedOut": false,
                    "duration": 5,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveEntries(function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "74ca59b4-c0db-4647-ac18-1584b2bbd6ce",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Plan Plan.getPlansData \"after each\" hook",
                    "timedOut": false,
                    "duration": 1,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bb8d16f4-c266-4977-99b0-619f3041e0b6",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get list of plans.",
                    "fullTitle": "Enterprise Plan Plan.getPlansData Should get list of plans.",
                    "timedOut": false,
                    "duration": 44,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = Array.isArray(res.body.output);\n            if (isValid) {\n                _.each(res.body.output, function(item) {\n                    isValid = isValid && typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\";\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "395fd25c-9458-417d-9912-8ef92b4a92be",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get limited list of plans based on skip/limit.",
                    "fullTitle": "Enterprise Plan Plan.getPlansData Should get limited list of plans based on skip/limit.",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?skip=2&limit=2\";\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (Array.isArray(res.body.output)) {\n                isValid = res.body.output.length == 2;\n                _.each(res.body.output, function(item) {\n                    isValid = isValid && typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\";\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1469cf82-2edd-4d4e-b54b-1c146c86617f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get filter list of plans.",
                    "fullTitle": "Enterprise Plan Plan.getPlansData Should get filter list of plans.",
                    "timedOut": false,
                    "duration": 19,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?query=utest_cases_\";\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (Array.isArray(res.body.output)) {\n                isValid = res.body.output.length == 10;\n                _.each(res.body.output, function(item) {\n                    isValid = isValid && typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\";\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a70fa8f2-6376-4e18-a2e5-749438208d67",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get filter limited list of plans based on skip/limit.",
                    "fullTitle": "Enterprise Plan Plan.getPlansData Should get filter limited list of plans based on skip/limit.",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?skip=2&limit=2&query=utest_cases_\";\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (Array.isArray(res.body.output)) {\n                isValid = res.body.output.length == 2;\n                _.each(res.body.output, function(item) {\n                    isValid = isValid && typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\";\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f3fad4e4-2615-410e-b3f3-756f4cb5782e",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get filter limited list of plans based on skip/limit and name in descending order.",
                    "fullTitle": "Enterprise Plan Plan.getPlansData Should get filter limited list of plans based on skip/limit and name in descending order.",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?skip=2&limit=2&query=utest_cases_&field=name&direction=desc\";\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (Array.isArray(res.body.output)) {\n                isValid = res.body.output[0].uid == _planEntries[7].uid &&\n                    res.body.output[1].uid == _planEntries[6].uid;\n\n                _.each(res.body.output, function(item) {\n                    isValid = isValid && typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\";\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fd06b1c2-0006-4553-9a64-081db690f4cc",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "395fd25c-9458-417d-9912-8ef92b4a92be",
                  "1469cf82-2edd-4d4e-b54b-1c146c86617f",
                  "a70fa8f2-6376-4e18-a2e5-749438208d67",
                  "f3fad4e4-2615-410e-b3f3-756f4cb5782e",
                  "fd06b1c2-0006-4553-9a64-081db690f4cc"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 105,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "b40591f4-adfc-47db-a881-40741290ba0d",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\plans\\getRequiredPlans.enterprise.js",
        "file": "\\controllers\\test\\plans\\getRequiredPlans.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "0cb4e880-b8a2-40bd-8fe6-62e857c928bc",
            "title": "Plan",
            "fullFile": "D:\\api\\controllers\\test\\plans\\getRequiredPlans.enterprise.js",
            "file": "\\controllers\\test\\plans\\getRequiredPlans.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "028b4a73-77eb-4a3f-bc20-bc3ee2aa933b",
                "title": "Plan.getRequiredPlans",
                "fullFile": "D:\\api\\controllers\\test\\plans\\getRequiredPlans.enterprise.js",
                "file": "\\controllers\\test\\plans\\getRequiredPlans.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Enterprise Plan Plan.getRequiredPlans \"before all\" hook",
                    "timedOut": false,
                    "duration": 1,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "11f19a42-1e48-4479-b309-3e24f97e4146",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Plan Plan.getRequiredPlans \"after all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f6857d26-005d-433d-b421-fed9194693d8",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get list of required plans.",
                    "fullTitle": "Enterprise Plan Plan.getRequiredPlans Should get list of required plans.",
                    "timedOut": false,
                    "duration": 457,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = Array.isArray(res.body.output);\n            if (isValid) {\n                _.each(res.body.output, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\";\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a88a3eb6-58a7-4a46-a157-6a08b92891ae",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "a88a3eb6-58a7-4a46-a157-6a08b92891ae"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 457,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "36d911c4-9177-4459-a730-b8aa9e226cc6",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\plans\\getViewPlans.enterprise.js",
        "file": "\\controllers\\test\\plans\\getViewPlans.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "07fe3990-12de-49e3-a33b-a1f436491c2d",
            "title": "Plan",
            "fullFile": "D:\\api\\controllers\\test\\plans\\getViewPlans.enterprise.js",
            "file": "\\controllers\\test\\plans\\getViewPlans.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "4b6b6024-5a4f-4332-a8cd-c04a26e49cfd",
                "title": "Plan.getViewPlans",
                "fullFile": "D:\\api\\controllers\\test\\plans\\getViewPlans.enterprise.js",
                "file": "\\controllers\\test\\plans\\getViewPlans.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Enterprise Plan Plan.getViewPlans \"before all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3ce887a0-4fd8-4ec1-b933-7b5be2503fd9",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Plan Plan.getViewPlans \"after all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c3781aca-bc06-4ca0-95b3-858e8f1e9979",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get list of viewed plans.",
                    "fullTitle": "Enterprise Plan Plan.getViewPlans Should get list of viewed plans.",
                    "timedOut": false,
                    "duration": 254,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = Array.isArray(res.body.output);\n            if (isValid) {\n                _.each(res.body.output, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\";\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "63397c5c-6282-4837-90f7-be8025c174cf",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "63397c5c-6282-4837-90f7-be8025c174cf"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 254,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "96d15d1d-93a2-4fb3-a7f3-f87f0d50db57",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\plans\\planSendMail.enterprise.js",
        "file": "\\controllers\\test\\plans\\planSendMail.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "12398fa6-05ba-4e44-bf7d-2c651581d2c9",
            "title": "Plan",
            "fullFile": "D:\\api\\controllers\\test\\plans\\planSendMail.enterprise.js",
            "file": "\\controllers\\test\\plans\\planSendMail.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "eabb20ca-cde3-4406-aa35-698045db6846",
                "title": "Plan.planSendMail",
                "fullFile": "D:\\api\\controllers\\test\\plans\\planSendMail.enterprise.js",
                "file": "\\controllers\\test\\plans\\planSendMail.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Plan Plan.planSendMail \"before each\" hook",
                    "timedOut": false,
                    "duration": 179,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "70349ec5-95af-4cf2-b767-92de5e038066",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Plan Plan.planSendMail \"after each\" hook",
                    "timedOut": false,
                    "duration": 7,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "93655254-6a85-4125-a865-877f1a38a039",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get list of plans faqs.",
                    "fullTitle": "Enterprise Plan Plan.planSendMail Should get list of plans faqs.",
                    "timedOut": false,
                    "duration": 31,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.sendMailFlowExecution(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(planSendBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.message.should.equal(\"Mail send successfully.\");\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fde60b80-c3d0-492a-b300-3542b67bd75f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Plan Plan.planSendMail Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .send(planSendBody)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3b59334f-5c01-4d36-baab-3dfc3b7afdc0",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "fde60b80-c3d0-492a-b300-3542b67bd75f",
                  "3b59334f-5c01-4d36-baab-3dfc3b7afdc0"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 39,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "f790108b-ac98-4bb3-82f2-13081fdbafcd",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\project\\createProject.js",
        "file": "\\controllers\\test\\project\\createProject.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "cc61b26e-5d3e-447c-bd81-391ae902555a",
            "title": "Project.Create",
            "fullFile": "D:\\api\\controllers\\test\\project\\createProject.js",
            "file": "\\controllers\\test\\project\\createProject.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Project.Create \"before all\" hook",
                "timedOut": false,
                "duration": 182,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data;\n        dummyUser = orgData.owner;\n        dummyUser.authtoken = dummyUser.authtoken;\n        done()\n    });\n})",
                "err": {},
                "isRoot": false,
                "uuid": "02e1fcb9-2213-4a0f-b2f5-5873d5fb8f6a",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Project.Create \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.parallel([\n        function(cb) {\n            _models.Project.remove({\n                    uid: {\n                        \"$in\": [project.uid, adminOwnProject.uid, developerOwnProject.uid]\n                    }\n                },\n                function(err) {\n                    cb(err)\n                })\n        }\n    ],\n    function(err, result) {\n        if (err) {\n            done(err)\n        } else {\n            done()\n        }\n    })",
                "err": {},
                "isRoot": false,
                "uuid": "ef1f1d44-f5bb-4023-bdf1-20eb35486ae0",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise Project.Create Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "df096ff5-e142-4b06-8837-efe349201b1e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should create project, if data is valid.",
                "fullTitle": "Enterprise Project.Create Should create project, if data is valid.",
                "timedOut": false,
                "duration": 50,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nprojectData.owner_uid = dummyUser.uid\nprojectData.created_by = dummyUser.uid\nprojectData.updated_by = dummyUser.uid\nprojectData.env_uid = 'flc9f0bbfd3393a79903fda5'\napi.post(apiURL)\n    .set({ authtoken: dummyUser.authtoken })\n    .send(projectData)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            project = res.body.output\n            expect(project.name).equal(projectData.name);\n            expect(project).to.have.any.keys(['name', 'created_by', 'flow_count', 'icons', 'updated_by', 'locked_by', 'owner_uid']);\n            _models.UserConfig.findOne({ project_uid: project.uid, name: 'default' }, function(err, result) {\n                if (err) {\n                    done(err);\n                } else {\n                    expect(result.name).equal('default');\n                    done();\n                }\n            })\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "09bf085c-d24f-4937-913a-622ecdd45511",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should create project, if developer tried to create a project in an valid org.",
                "fullTitle": "Enterprise Project.Create Should create project, if developer tried to create a project in an valid org.",
                "timedOut": false,
                "duration": 82,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar developerProject = _.cloneDeep(projectData)\ndeveloperProject.name = 'developerProject'\ndeveloperProject.owner_uid = orgData.developer.uid\ndeveloperProject.created_by = orgData.developer.uid\ndeveloperProject.updated_by = orgData.developer.uid\ndeveloperProject.env_uid = 'flc9f0bbfd3393a79903fda5'\napi.post(apiURL)\n    .set({ authtoken: orgData.developer.authtoken, org_uid: orgData.organization.uid })\n    .send(developerProject)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            developerOwnProject = res.body.output\n            expect(developerOwnProject.name).equal(developerProject.name);\n            expect(developerOwnProject).to.have.any.keys(['name', 'created_by', 'flow_count', 'icons', 'updated_by', 'locked_by', 'owner_uid']);\n            _models.UserConfig.findOne({ project_uid: developerOwnProject.uid, name: config.default_project }, function(err, result) {\n                if (err) {\n                    done(err);\n                } else {\n                    expect(result.name).equal(config.default_project);\n                    done();\n                }\n            })\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "5de12859-d151-44bc-bd39-bc62075638bb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should create project, if admin tried to create a project in an valid org.",
                "fullTitle": "Enterprise Project.Create Should create project, if admin tried to create a project in an valid org.",
                "timedOut": false,
                "duration": 79,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar adminProject = _.cloneDeep(projectData)\nadminProject.name = 'adminProject'\nadminProject.owner_uid = dummyUser.uid\nadminProject.created_by = dummyUser.uid\nadminProject.updated_by = dummyUser.uid\nadminProject.env_uid = dummyUser.default_env\napi.post(apiURL)\n    .set({ authtoken: orgData.admin.authtoken, org_uid: orgData.organization.uid })\n    .send(adminProject)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            adminOwnProject = res.body.output\n            expect(adminOwnProject.name).equal(adminProject.name);\n            expect(adminOwnProject).to.have.all.keys(['uid', 'name', 'created_by', 'updated_by',\n                'owner_uid', 'updated_at', 'created_at', 'flow_count', 'icons', 'env_uid', 'org_uid', 'deleted_at'\n            ]);\n            _models.UserConfig.findOne({ project_uid: adminOwnProject.uid, name: config.default_project }, function(err, result) {\n                if (err) {\n                    done(err);\n                } else {\n                    expect(result.name).equal(config.default_project);\n                    done();\n                }\n            })\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "199577ae-1bd3-4833-be33-607248895cc7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error,  if billing manger tied to create a project in an org.",
                "fullTitle": "Enterprise Project.Create Should get error,  if billing manger tied to create a project in an org.",
                "timedOut": false,
                "duration": 77,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nprojectData.owner_uid = dummyUser.uid\nprojectData.created_by = dummyUser.uid\nprojectData.updated_by = dummyUser.uid\nprojectData.env_uid = dummyUser.default_env\napi.post(apiURL)\n    .set({ authtoken: orgData.billing_manager.authtoken, org_uid: orgData.organization.uid })\n    .send(projectData)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).equal(messageList.ACCESS_DENIED);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "1ee23932-3091-408a-80b8-1a914ad58d35",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error,  if normal tied to create a project in an org.",
                "fullTitle": "Enterprise Project.Create Should get error,  if normal tied to create a project in an org.",
                "timedOut": false,
                "duration": 62,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nprojectData.owner_uid = dummyUser.uid\nprojectData.created_by = dummyUser.uid\nprojectData.updated_by = dummyUser.uid\nprojectData.env_uid = dummyUser.default_env\napi.post(apiURL)\n    .set({ authtoken: orgData.role1.authtoken, org_uid: orgData.organization.uid })\n    .send(projectData)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).equal(messageList.ACCESS_DENIED);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "a6c2b98c-9e93-4108-849e-d5b10bd65323",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error if user tried to create project with name already exists in an environment.",
                "fullTitle": "Enterprise Project.Create Should get error if user tried to create project with name already exists in an environment.",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nprojectData.user_uid = dummyUser.uid\nprojectData.env_uid = dummyUser.default_env\napi.post(apiURL)\n    .set({ authtoken: dummyUser.authtoken })\n    .send(projectData)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).equal(messageList.PROJECT_NAME_UNIQUE_ERROR);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "1027285a-3194-4b76-b5bb-c8dac164adf4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error if  project name is blank.",
                "fullTitle": "Enterprise Project.Create Should get error if  project name is blank.",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nprojectData.name = ''\nprojectData.user_uid = dummyUser.uid\nprojectData.env_uid = dummyUser.default_env\napi.post(apiURL)\n    .set({ authtoken: dummyUser.authtoken })\n    .send(projectData)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            expect(res.body.error.name.message).equal(messageList.PROJECT_NAME_REQUIRED);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "fa675064-788d-463f-aa04-761e65b4bc86",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "df096ff5-e142-4b06-8837-efe349201b1e",
              "09bf085c-d24f-4937-913a-622ecdd45511",
              "5de12859-d151-44bc-bd39-bc62075638bb",
              "199577ae-1bd3-4833-be33-607248895cc7",
              "1ee23932-3091-408a-80b8-1a914ad58d35",
              "a6c2b98c-9e93-4108-849e-d5b10bd65323",
              "1027285a-3194-4b76-b5bb-c8dac164adf4",
              "fa675064-788d-463f-aa04-761e65b4bc86"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 423,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "d0f7c279-d518-4a68-99c6-c318a02521ce",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\project\\createProjectParam.js",
        "file": "\\controllers\\test\\project\\createProjectParam.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "96f6dcf8-4257-4fc3-8857-85ab857fc570",
            "title": "ProjectParam.Create",
            "fullFile": "D:\\api\\controllers\\test\\project\\createProjectParam.js",
            "file": "\\controllers\\test\\project\\createProjectParam.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise ProjectParam.Create \"before all\" hook",
                "timedOut": false,
                "duration": 199,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data;\n        async.waterfall([\n            function(cbk) {\n                dummyUser = orgData.owner;\n                projectData.owner_uid = dummyUser.uid\n                projectData.env_uid = dummyUser.default_env\n                api.post(projectURL)\n                    .set('authtoken', dummyUser.authtoken)\n                    .send(projectData)\n                    .expect(httpStatus.CREATED)\n                    .end(function(err, result) {\n                        cbk(err, result);\n                    })\n            }\n        ], function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                project = res.body.output\n                done()\n            }\n        })\n    })\n})",
                "err": {},
                "isRoot": false,
                "uuid": "31256fc4-af6b-493c-96ac-a63949efa7f1",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise ProjectParam.Create \"after all\" hook",
                "timedOut": false,
                "duration": 3,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.parallel([\n    function(cb) {\n        _models.Project.remove({ uid: project.uid }, function(err) {\n            cb(err)\n        })\n    },\n    function(cb) {\n        _models.ConfigSchema.remove({ uid: configSchema.uid }, function(err) {\n            cb(err)\n        })\n    }\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "acf03495-c5f0-41fa-bee8-31412062b42f",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise ProjectParam.Create Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .send(paramData)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "5e966eaf-d39d-4a42-93de-827399b5a609",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should create project param, if user send valid data.",
                "fullTitle": "Enterprise ProjectParam.Create Should create project param, if user send valid data.",
                "timedOut": false,
                "duration": 53,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set({ authtoken: dummyUser.authtoken, project_uid: project.uid })\n    .send(paramData)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output.length).equal(2);\n            _models.ConfigSchema.find({ user_uid: dummyUser.uid, type: 'param' }, function(err, results) {\n                expect(results).length.gt(0);\n                done();\n            })\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "c3ea07fd-05d0-452b-82be-368d8dd307ad",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should give empty array in response, if user send data which is not in same project.",
                "fullTitle": "Enterprise ProjectParam.Create Should give empty array in response, if user send data which is not in same project.",
                "timedOut": false,
                "duration": 40,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set({ authtoken: dummyUser.authtoken, project_uid: project.uid })\n    .send([{\n        uid: \"dummy\",\n        key: \"key\",\n        value: \"value\",\n        \"required\": false,\n        \"isPassword\": true,\n        \"hasError\": false\n    }])\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output.length).equal(0);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "e787de01-f9d7-44cf-b8be-a47757674f74",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should create project param within an org, if user send valid data.",
                "fullTitle": "Enterprise ProjectParam.Create Should create project param within an org, if user send valid data.",
                "timedOut": false,
                "duration": 63,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set({ authtoken: orgData.admin.authtoken, org_uid: orgData.organization.uid })\n    .send(paramData)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output.length).equal(2);\n            _models.ConfigSchema.find({ org_uid: orgData.organization.uid, type: 'param' }, function(err, results) {\n                expect(results).length.gt(0);\n                done();\n            })\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "f80d3a9e-9605-4fa7-bc71-5bdfd393af3e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if project not found.",
                "fullTitle": "Enterprise ProjectParam.Create Should get error, if project not found.",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set({ authtoken: dummyUser.authtoken, project_uid: 'ABC' })\n    .send({})\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).equal(messageList.PROJECT_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "9507b2b6-bca5-46e5-a53b-9d35833aff8c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "5e966eaf-d39d-4a42-93de-827399b5a609",
              "c3ea07fd-05d0-452b-82be-368d8dd307ad",
              "e787de01-f9d7-44cf-b8be-a47757674f74",
              "f80d3a9e-9605-4fa7-bc71-5bdfd393af3e",
              "9507b2b6-bca5-46e5-a53b-9d35833aff8c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 198,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "0c83bea5-85c9-4ae9-98fc-c36df3c051d2",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\project\\deleteProject.js",
        "file": "\\controllers\\test\\project\\deleteProject.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "e1aa383f-07ff-477f-ae3a-3d5900ae3bf1",
            "title": "Project.Delete",
            "fullFile": "D:\\api\\controllers\\test\\project\\deleteProject.js",
            "file": "\\controllers\\test\\project\\deleteProject.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Project.Delete \"before all\" hook",
                "timedOut": false,
                "duration": 222,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data\n        async.waterfall([\n            function(cbk) {\n                dummyUser = orgData.owner;\n                dummyUser.authtoken = dummyUser.authtoken\n                projectData.owner_uid = dummyUser.uid\n                projectData.env_uid = dummyUser.default_env\n                api.post(apiURL)\n                    .set('authtoken', dummyUser.authtoken)\n                    .send(projectData)\n                    .expect(httpStatus.CREATED)\n                    .end(function(err, result) {\n                        cbk(err, result);\n                    })\n            }\n        ], function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                project = res.body.output\n                done()\n            }\n        })\n    });\n})",
                "err": {},
                "isRoot": false,
                "uuid": "a02f1e7a-1b5a-4bde-9dc4-b3249640e501",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Project.Delete \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.parallel([\n    function(cb) {\n        _models.Project.remove({ uid: project.uid }, function(err) {\n            cb(err)\n        })\n    }\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "f140c519-8ff6-4fa0-b3d9-40d996e4fe1a",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise Project.Delete Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.delete(apiURL + project.uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "6e2bc027-2a41-477d-9545-27ac874796fa",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error if user tried to delete project which is not exists.",
                "fullTitle": "Enterprise Project.Delete Should get error if user tried to delete project which is not exists.",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nprojectData.user_uid = dummyUser.uid\nprojectData.env_uid = dummyUser.default_env\napi.delete(apiURL + 'project.uid')\n    .set({ authtoken: dummyUser.authtoken, env_uid: dummyUser.env_uid || dummyUser.default_env })\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).equal(messageList.PROJECT_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "9f2b5811-c3e3-4cf1-a825-440691c31230",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error if user tried to delete project which is default.",
                "fullTitle": "Enterprise Project.Delete Should get error if user tried to delete project which is default.",
                "timedOut": false,
                "duration": 46,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nprojectData.user_uid = dummyUser.uid\nprojectData.env_uid = dummyUser.default_env\napi.delete(apiURL + dummyUser.default_project)\n    .set({ authtoken: dummyUser.authtoken, env_uid: dummyUser.env_uid || dummyUser.default_env })\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).equal(messageList.DEFAULT_PROJECT_DELETE_ERROR);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "71a33f36-2a9f-4514-85dc-4999eb5e0c4c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should delete project, if user send valid data.",
                "fullTitle": "Enterprise Project.Delete Should delete project, if user send valid data.",
                "timedOut": false,
                "duration": 50,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nprojectData.name = 'updated project'\napi.delete(apiURL + project.uid)\n    .set({ authtoken: dummyUser.authtoken, env_uid: dummyUser.env_uid || dummyUser.default_env })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output.message).to.be.equal(messageList.PROJECT_DELETE_SUCCESS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "6aac54a3-2482-45e0-959f-d2a1637fc7e6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if normal user tried to delete Project which is allocated to him.",
                "fullTitle": "Enterprise Project.Delete Should get error, if normal user tried to delete Project which is allocated to him.",
                "timedOut": false,
                "duration": 46,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar proj1 = _.find(orgData.org_projects, { name: 'proj1' })\napi.delete(apiURL + proj1.uid)\n    .set({ authtoken: orgData.role1.authtoken, org_uid: orgData.organization.uid })\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //expect(res.body.output).to.have.any.keys(['project', 'flows', 'configs'])\n            expect(res.body.error.message).equal(messageList.ACCESS_DENIED);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "3f38deff-7d9d-47be-ae0d-02699d64db32",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if normal user tried to delete Project which allocated to him but org_uid not passed in header.",
                "fullTitle": "Enterprise Project.Delete Should get error, if normal user tried to delete Project which allocated to him but org_uid not passed in header.",
                "timedOut": false,
                "duration": 43,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar proj1 = _.find(orgData.org_projects, { name: 'proj1' })\napi.delete(apiURL + proj1.uid)\n    .set({ authtoken: orgData.role1.authtoken })\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //expect(res.body.output).to.have.any.keys(['project', 'flows', 'configs'])\n            expect(res.body.error.message).equal(messageList.ACCESS_DENIED);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "98c8eb3e-805f-42c6-a53d-b7744abf331d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should not delete project, if normal user tried to delete Project which is not allocated to him.",
                "fullTitle": "Enterprise Project.Delete Should not delete project, if normal user tried to delete Project which is not allocated to him.",
                "timedOut": false,
                "duration": 64,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar proj3 = _.find(orgData.org_projects, { name: 'proj3' })\napi.delete(apiURL + proj3.uid)\n    .set({ authtoken: orgData.role1.authtoken, org_uid: orgData.organization.uid })\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //expect(res.body.output).to.have.any.keys(['project', 'flows', 'configs'])\n            expect(res.body.error.message).equal(messageList.ACCESS_DENIED);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "3640f0d0-ed3b-4cf8-b1b2-cdb5c07c1ee0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if billing manager tried to delete Project which is not allocated to him.",
                "fullTitle": "Enterprise Project.Delete Should get error, if billing manager tried to delete Project which is not allocated to him.",
                "timedOut": false,
                "duration": 53,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar proj1 = _.find(orgData.org_projects, { name: 'proj1' })\napi.delete(apiURL + proj1.uid)\n    .set({ authtoken: orgData.billing_manager.authtoken, org_uid: orgData.organization.uid })\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //expect(res.body.output).to.have.any.keys(['project', 'flows', 'configs'])\n            expect(res.body.error.message).equal(messageList.ACCESS_DENIED);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "7f09622b-b0f7-407a-9822-9c64c1b6987f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should delete project, if admin of org tried to delete Project.",
                "fullTitle": "Enterprise Project.Delete Should delete project, if admin of org tried to delete Project.",
                "timedOut": false,
                "duration": 72,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar proj2 = _.find(orgData.org_projects, { name: 'proj2' })\ntestData.mongoUserTriggerObj.user_uid = dummyUser.uid;\ntestData.mongoUserTriggerObj.project_uid = proj2.uid\n_models.UserTrigger.create(testData.mongoUserTriggerObj, function(err, userTrigger) {\n    api.delete(apiURL + proj2.uid)\n        .set({ authtoken: orgData.admin.authtoken, org_uid: orgData.organization.uid })\n        .send(projectData)\n        .expect(httpStatus.BAD_REQUEST)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                expect(res.body.error.message).to.be.equal(messageList.PROJECT_HAS_TRIGGER);\n                _models.UserTrigger.remove({uid: userTrigger.uid}, function(err){\n                    done(err);\n                })\n            }\n        });\n})",
                "err": {},
                "isRoot": false,
                "uuid": "41ec2fb8-b4ff-43f1-8da6-056b727c82ca",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should delete project, if admin of org tried to delete Project.",
                "fullTitle": "Enterprise Project.Delete Should delete project, if admin of org tried to delete Project.",
                "timedOut": false,
                "duration": 82,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar proj2 = _.find(orgData.org_projects, { name: 'proj2' })\napi.delete(apiURL + proj2.uid)\n    .set({ authtoken: orgData.admin.authtoken, org_uid: orgData.organization.uid })\n    .send(projectData)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //expect(res.body.output).to.have.any.keys(['project', 'flows', 'configs'])\n            expect(res.body.output.message).to.be.equal(messageList.PROJECT_DELETE_SUCCESS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "accc8df8-4f93-4d89-995f-520a6ca1baaf",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should delete project, if developer of org tried to delete Project.",
                "fullTitle": "Enterprise Project.Delete Should delete project, if developer of org tried to delete Project.",
                "timedOut": false,
                "duration": 70,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar proj1 = _.find(orgData.org_projects, { name: 'proj1' })\napi.delete(apiURL + proj1.uid)\n    .set({ authtoken: orgData.developer.authtoken, org_uid: orgData.organization.uid })\n    .send(projectData)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //expect(res.body.output).to.have.any.keys(['project', 'flows', 'configs'])\n            expect(res.body.output.message).to.be.equal(messageList.PROJECT_DELETE_SUCCESS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "81870ae5-bf59-4fc4-9232-896bead5666c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "6e2bc027-2a41-477d-9545-27ac874796fa",
              "9f2b5811-c3e3-4cf1-a825-440691c31230",
              "71a33f36-2a9f-4514-85dc-4999eb5e0c4c",
              "6aac54a3-2482-45e0-959f-d2a1637fc7e6",
              "3f38deff-7d9d-47be-ae0d-02699d64db32",
              "98c8eb3e-805f-42c6-a53d-b7744abf331d",
              "3640f0d0-ed3b-4cf8-b1b2-cdb5c07c1ee0",
              "7f09622b-b0f7-407a-9822-9c64c1b6987f",
              "41ec2fb8-b4ff-43f1-8da6-056b727c82ca",
              "accc8df8-4f93-4d89-995f-520a6ca1baaf",
              "81870ae5-bf59-4fc4-9232-896bead5666c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 564,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "4fd1f14b-1af7-4d0a-8a69-1934e2f096f8",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\project\\deleteProjectParam.js",
        "file": "\\controllers\\test\\project\\deleteProjectParam.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "c9310d97-03cc-4a15-87a6-e24ea4008429",
            "title": "ProjectParam.Delete",
            "fullFile": "D:\\api\\controllers\\test\\project\\deleteProjectParam.js",
            "file": "\\controllers\\test\\project\\deleteProjectParam.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise ProjectParam.Delete \"before all\" hook",
                "timedOut": false,
                "duration": 361,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(user, cbk) {\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    },\n    function(result, cbk) {\n        dummyUser = result.body.output;\n        projectData.owner_uid = dummyUser.uid\n        projectData.env_uid = dummyUser.default_env\n        api.post(projectURL)\n            .set('authtoken', dummyUser.authtoken)\n            .send(projectData)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    },\n    function(res, cbk) {\n        project = res.body.output\n        api.post(apiURL)\n            .set({ authtoken: dummyUser.authtoken, project_uid: project.uid })\n            .send(paramData)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                cbk(err, res)\n            })\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        configSchema = res.body.output\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "168cfbd7-d538-44a1-a3a7-b9189eb39bfe",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise ProjectParam.Delete \"after all\" hook",
                "timedOut": false,
                "duration": 5,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.parallel([\n    function(cb) {\n        _models.Project.remove({ uid: project.uid }, function(err) {\n            cb(err)\n        })\n    },\n    function(cb) {\n        _models.ConfigSchema.remove({ uid: configSchema.uid }, function(err) {\n            cb(err)\n        })\n    }\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "37ba4fbd-3b45-41c9-95c6-6c120e0a1a7e",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise ProjectParam.Delete Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.delete(apiURL + configSchema.uid)\n    .send(paramData)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "f57a8f34-696c-4955-aaa1-7e082230c238",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should delete project param, if user send valid data.",
                "fullTitle": "Enterprise ProjectParam.Delete Should delete project param, if user send valid data.",
                "timedOut": false,
                "duration": 64,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.delete(apiURL + configSchema.uid)\n    .set({ authtoken: dummyUser.authtoken, project_uid: project.uid })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output.message).equal(messageList.PARAMS_DELETE_SUCCESS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "4a31cbe6-0737-4306-8d4b-ed2d5d73dc35",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if project not found.",
                "fullTitle": "Enterprise ProjectParam.Delete Should get error, if project not found.",
                "timedOut": false,
                "duration": 36,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.delete(apiURL + project.uid)\n    .set({ authtoken: dummyUser.authtoken, project_uid: 'ABC' })\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).equal(messageList.PROJECT_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "54756dc5-b11b-4e3c-aca1-61b6498456b8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if configSchema not found.",
                "fullTitle": "Enterprise ProjectParam.Delete Should get error, if configSchema not found.",
                "timedOut": false,
                "duration": 45,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.delete(apiURL + project.uid)\n    .set({ authtoken: dummyUser.authtoken, project_uid: project.uid })\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).equal(messageList.NO_DATA_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "4f50b051-754c-4062-a7c6-4ffb461cd567",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f57a8f34-696c-4955-aaa1-7e082230c238",
              "4a31cbe6-0737-4306-8d4b-ed2d5d73dc35",
              "54756dc5-b11b-4e3c-aca1-61b6498456b8",
              "4f50b051-754c-4062-a7c6-4ffb461cd567"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 151,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "a4a7154e-27f4-42e5-b125-500fc3a33e6e",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\project\\getProject.js",
        "file": "\\controllers\\test\\project\\getProject.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "6576b46c-b89a-44ce-9da9-b66bcceca0ee",
            "title": "Project.Get",
            "fullFile": "D:\\api\\controllers\\test\\project\\getProject.js",
            "file": "\\controllers\\test\\project\\getProject.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Project.Get \"before all\" hook",
                "timedOut": false,
                "duration": 296,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data;\n        async.waterfall([\n            function(cbk) {\n                dummyUser = orgData.owner\n                dummyUser.authtoken = dummyUser.authtoken\n                projectData.owner_uid = dummyUser.uid\n                projectData.env_uid = dummyUser.default_env\n                api.post(apiURL)\n                    .set('authtoken', dummyUser.authtoken)\n                    .send(projectData)\n                    .expect(httpStatus.CREATED)\n                    .end(function(err, result) {\n                        cbk(err, result);\n                    })\n            },\n            function(res, cbk) {\n                project = res.body.output\n                flowData.created_by = dummyUser.uid\n                flowData.updated_by = dummyUser.uid\n                flowData.project_uid = project.uid\n                api.post(flowURL)\n                    .set('authtoken', dummyUser.authtoken)\n                    .send(flowData)\n                    .expect(httpStatus.CREATED)\n                    .end(function(err, res) {\n                        cbk(err, res)\n                    })\n            }\n        ], function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                userFlow = res.body.output\n                done()\n            }\n        })\n    })\n})",
                "err": {},
                "isRoot": false,
                "uuid": "d3afb36a-6f58-419d-8f50-1215ec3c07e6",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Project.Get \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.parallel([\n    function(cb) {\n        _models.Project.remove({ uid: project.uid }, function(err) {\n            cb(err)\n        })\n    }\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "5c1a8e67-059e-411b-a3ab-8b7206433b4e",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise Project.Get Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + project.uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "3e79209e-3a25-44fd-95ef-8e96ed307805",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if user tried to get project which not exists in an environment.",
                "fullTitle": "Enterprise Project.Get Should get error, if user tried to get project which not exists in an environment.",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nprojectData.owner_uid = dummyUser.uid\nprojectData.env_uid = dummyUser.default_env\napi.get(apiURL + 'project.uid')\n    .set({ authtoken: dummyUser.authtoken })\n    .send(projectData)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).equal(messageList.PROJECT_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "098d89bb-e64e-4922-b776-43ec09edb26d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get project, if user send valid data.",
                "fullTitle": "Enterprise Project.Get Should get project, if user send valid data.",
                "timedOut": false,
                "duration": 48,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + project.uid)\n    .set({ authtoken: dummyUser.authtoken })\n    .send(projectData)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //expect(res.body.output).to.have.any.keys(['project', 'flows', 'configs'])\n            expect(res.body.output.name).equal(projectData.name);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "2bad551e-26ba-4a8d-b0df-c5cce6390868",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get project, if normal user tried to get Project which is allocated to him.",
                "fullTitle": "Enterprise Project.Get Should get project, if normal user tried to get Project which is allocated to him.",
                "timedOut": false,
                "duration": 50,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar proj1 = _.find(orgData.org_projects, { name: 'proj1' })\napi.get(apiURL + proj1.uid)\n    .set({ authtoken: orgData.role1.authtoken, org_uid: orgData.organization.uid })\n    .send(projectData)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //expect(res.body.output).to.have.any.keys(['project', 'flows', 'configs'])\n            expect(res.body.output.name).equal(proj1.name);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "e9eb2075-e387-4431-ab3a-5a5ffdf401f8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if normal user tried to get Project which is not allocated to him.",
                "fullTitle": "Enterprise Project.Get Should get error, if normal user tried to get Project which is not allocated to him.",
                "timedOut": false,
                "duration": 49,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar proj3 = _.find(orgData.org_projects, { name: 'proj3' })\napi.get(apiURL + proj3.uid)\n    .set({ authtoken: orgData.role1.authtoken, org_uid: orgData.organization.uid })\n    .send(projectData)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //expect(res.body.output).to.have.any.keys(['project', 'flows', 'configs'])\n            expect(res.body.error.message).equal(messageList.ACCESS_DENIED);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "3001bad0-490c-44c5-9535-07b1ef702602",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if billing manager tried to get Project which is not allocated to him.",
                "fullTitle": "Enterprise Project.Get Should get error, if billing manager tried to get Project which is not allocated to him.",
                "timedOut": false,
                "duration": 44,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar proj1 = _.find(orgData.org_projects, { name: 'proj1' })\napi.get(apiURL + proj1.uid)\n    .set({ authtoken: orgData.billing_manager.authtoken, org_uid: orgData.organization.uid })\n    .send(projectData)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //expect(res.body.output).to.have.any.keys(['project', 'flows', 'configs'])\n            expect(res.body.error.message).equal(messageList.ACCESS_DENIED);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "482ed909-4cd4-49d8-93c7-4c4dc3885528",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get project, if admin of org tried to get Project.",
                "fullTitle": "Enterprise Project.Get Should get project, if admin of org tried to get Project.",
                "timedOut": false,
                "duration": 49,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar proj1 = _.find(orgData.org_projects, { name: 'proj1' })\napi.get(apiURL + proj1.uid)\n    .set({ authtoken: orgData.admin.authtoken, org_uid: orgData.organization.uid })\n    .send(projectData)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //expect(res.body.output).to.have.any.keys(['project', 'flows', 'configs'])\n            expect(res.body.output.name).equal(proj1.name);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "373c987c-a55b-4c88-9eac-8c6a82854e8f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get project, if developer of org tried to get Project.",
                "fullTitle": "Enterprise Project.Get Should get project, if developer of org tried to get Project.",
                "timedOut": false,
                "duration": 56,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar proj1 = _.find(orgData.org_projects, { name: 'proj1' })\napi.get(apiURL + proj1.uid)\n    .set({ authtoken: orgData.developer.authtoken, org_uid: orgData.organization.uid })\n    .send(projectData)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //expect(res.body.output).to.have.any.keys(['project', 'flows', 'configs'])\n            expect(res.body.output.name).equal(proj1.name);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "e09c1859-113e-4b4a-a762-9d6114c91165",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "3e79209e-3a25-44fd-95ef-8e96ed307805",
              "098d89bb-e64e-4922-b776-43ec09edb26d",
              "2bad551e-26ba-4a8d-b0df-c5cce6390868",
              "e9eb2075-e387-4431-ab3a-5a5ffdf401f8",
              "3001bad0-490c-44c5-9535-07b1ef702602",
              "482ed909-4cd4-49d8-93c7-4c4dc3885528",
              "373c987c-a55b-4c88-9eac-8c6a82854e8f",
              "e09c1859-113e-4b4a-a762-9d6114c91165"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 334,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "6ecc061c-e4f6-4add-8cdd-916606081ab6",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\project\\getProjectParam.js",
        "file": "\\controllers\\test\\project\\getProjectParam.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "779ec274-e4fd-47ef-9c51-6017bc0c0602",
            "title": "ProjectParam.Get",
            "fullFile": "D:\\api\\controllers\\test\\project\\getProjectParam.js",
            "file": "\\controllers\\test\\project\\getProjectParam.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise ProjectParam.Get \"before all\" hook",
                "timedOut": false,
                "duration": 359,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(user, cbk) {\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    },\n    function(result, cbk) {\n        dummyUser = result.body.output;\n        projectData.owner_uid = dummyUser.uid\n        projectData.env_uid = dummyUser.default_env\n        api.post(projectURL)\n            .set('authtoken', dummyUser.authtoken)\n            .send(projectData)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    },\n    function(res, cbk) {\n        project = res.body.output\n        api.post(apiURL)\n            .set({ authtoken: dummyUser.authtoken, project_uid: project.uid })\n            .send(paramData)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                cbk(err, res)\n            })\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        configSchema = res.body.output\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "8f628215-e51c-427d-b837-181f7120b6ee",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise ProjectParam.Get \"after all\" hook",
                "timedOut": false,
                "duration": 2,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.parallel([\n    function(cb) {\n        _models.Project.remove({ uid: project.uid }, function(err) {\n            cb(err)\n        })\n    },\n    function(cb) {\n        _models.ConfigSchema.remove({ uid: configSchema.uid }, function(err) {\n            cb(err)\n        })\n    }\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "d3a0ba1a-490a-41ef-aac3-4c6250bbb7db",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise ProjectParam.Get Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + configSchema.uid)\n    .send(paramData)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "fbaa9c58-e452-47d0-a07d-4b77320d7564",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get project param, if user send valid data.",
                "fullTitle": "Enterprise ProjectParam.Get Should get project param, if user send valid data.",
                "timedOut": false,
                "duration": 65,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + configSchema.uid)\n    .set({ authtoken: dummyUser.authtoken, project_uid: project.uid })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output.key).equal(paramData.key);\n            expect(res.body.output.value).equal(paramData.value);\n            expect(res.body.output).not.have.all.keys(['param'])\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "58ce168c-5520-4542-96a4-4a7bf6331435",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if project not found.",
                "fullTitle": "Enterprise ProjectParam.Get Should get error, if project not found.",
                "timedOut": false,
                "duration": 58,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + project.uid)\n    .set({ authtoken: dummyUser.authtoken, project_uid: 'ABC' })\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).equal(messageList.PROJECT_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "a9f60cac-8d62-451d-b1c0-2f42e3cdddd2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if configSchema not found.",
                "fullTitle": "Enterprise ProjectParam.Get Should get error, if configSchema not found.",
                "timedOut": false,
                "duration": 47,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + project.uid)\n    .set({ authtoken: dummyUser.authtoken, project_uid: project.uid })\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).equal(messageList.NO_DATA_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "dffcf072-8e29-4c63-8ea5-98a2decbe38c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "fbaa9c58-e452-47d0-a07d-4b77320d7564",
              "58ce168c-5520-4542-96a4-4a7bf6331435",
              "a9f60cac-8d62-451d-b1c0-2f42e3cdddd2",
              "dffcf072-8e29-4c63-8ea5-98a2decbe38c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 179,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "013f81f5-06f0-4c1c-9c16-54c5e6708f96",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\project\\listProjectParams.js",
        "file": "\\controllers\\test\\project\\listProjectParams.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "9774754a-80e0-4e88-b5a5-70f196d8cd65",
            "title": "ProjectParam.List",
            "fullFile": "D:\\api\\controllers\\test\\project\\listProjectParams.js",
            "file": "\\controllers\\test\\project\\listProjectParams.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise ProjectParam.List \"before all\" hook",
                "timedOut": false,
                "duration": 401,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(user, cbk) {\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    },\n    function(result, cbk) {\n        dummyUser = result.body.output;\n        projectData.owner_uid = dummyUser.uid\n        projectData.env_uid = dummyUser.default_env\n        api.post(projectURL)\n            .set('authtoken', dummyUser.authtoken)\n            .send(projectData)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    },\n    function(res, cbk) {\n        project = res.body.output\n        api.post(apiURL)\n            .set({ authtoken: dummyUser.authtoken, project_uid: project.uid })\n            .send(paramData)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                cbk(err, res)\n            })\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        configSchema = res.body.output\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "6fa8461d-f601-441e-8709-e35ca39bfeac",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise ProjectParam.List \"after all\" hook",
                "timedOut": false,
                "duration": 5,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.parallel([\n    function(cb) {\n        _models.Project.remove({ uid: project.uid }, function(err) {\n            cb(err)\n        })\n    },\n    function(cb) {\n        _models.ConfigSchema.remove({ uid: configSchema.uid }, function(err) {\n            cb(err)\n        })\n    }\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "989ef149-d206-48be-baec-502e6f9c5713",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise ProjectParam.List Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .send(paramData)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "109a7633-2b2a-4867-a97d-8ab62e26740c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get project params, if user send valid data.",
                "fullTitle": "Enterprise ProjectParam.List Should get project params, if user send valid data.",
                "timedOut": false,
                "duration": 57,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set({ authtoken: dummyUser.authtoken, project_uid: project.uid })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output.length).equal(1)\n            expect(_.first(res.body.output)).not.have.all.keys(['param'])\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "a56c92b5-2096-496c-89ff-565657ebda5e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "109a7633-2b2a-4867-a97d-8ab62e26740c",
              "a56c92b5-2096-496c-89ff-565657ebda5e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 68,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "a825f4ed-6e94-46aa-9760-51039bd15004",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\project\\listProjects.js",
        "file": "\\controllers\\test\\project\\listProjects.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "10661473-2ad9-4211-b73f-4ee4b2f2448f",
            "title": "Project.List",
            "fullFile": "D:\\api\\controllers\\test\\project\\listProjects.js",
            "file": "\\controllers\\test\\project\\listProjects.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Project.List \"before all\" hook",
                "timedOut": false,
                "duration": 226,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data;\n        async.waterfall([\n            function(cbk) {\n                dummyUser = orgData.owner;\n                dummyUser.authtoken = dummyUser.authtoken;\n                projectData.owner_uid = dummyUser.uid\n                projectData.env_uid = dummyUser.default_env\n                api.post(apiURL)\n                    .set('authtoken', dummyUser.authtoken)\n                    .send(projectData)\n                    .expect(httpStatus.CREATED)\n                    .end(function(err, result) {\n                        cbk(err, result);\n                    })\n            }\n        ], function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                project = res.body.output\n                done()\n            }\n        })\n    });\n})",
                "err": {},
                "isRoot": false,
                "uuid": "ca2d543d-ac5e-4a4b-ba5b-bf65b2f9a4b5",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Project.List \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.parallel([\n    function(cb) {\n        _models.Project.remove({ uid: project.uid }, function(err) {\n            cb(err)\n        })\n    }\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "a48aea3b-5fe0-4289-b1b8-c53283848584",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise Project.List Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "d3494fac-6206-4dbb-9862-391f0fa8e7ee",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get project list.",
                "fullTitle": "Enterprise Project.List Should get project list.",
                "timedOut": false,
                "duration": 38,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set({ authtoken: dummyUser.authtoken })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output.projects.length).equal(2);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "ffe3f5b3-5649-49ff-b38c-7316326c0e2e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get project list.",
                "fullTitle": "Enterprise Project.List Should get project list.",
                "timedOut": false,
                "duration": 42,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n\napi.get(apiURL + '?q=' + projectData.name)\n    .set({ authtoken: dummyUser.authtoken })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(_.first(res.body.output.projects).name).equal(projectData.name);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "f98f606a-0841-4580-8ba9-a8bd9a296479",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "billing manager should get defualt project only in list call.",
                "fullTitle": "Enterprise Project.List billing manager should get defualt project only in list call.",
                "timedOut": false,
                "duration": 49,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set({ authtoken: orgData.billing_manager.authtoken, org_uid: orgData.organization.uid })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output.count).to.be.equal(1)\n            expect(_.first(res.body.output.projects).name).to.be.equal(config.default_project)\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "fe9df50c-4662-4494-ac05-b5de0f66df43",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "admin should get all projects of an org in list call.",
                "fullTitle": "Enterprise Project.List admin should get all projects of an org in list call.",
                "timedOut": false,
                "duration": 52,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set({ authtoken: orgData.admin.authtoken, org_uid: orgData.organization.uid })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output.count).to.be.equal(5)\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "451ede0a-b9de-4c39-b55a-ff78e54da5f1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "custom role user should get projects assigned to him in list call.",
                "fullTitle": "Enterprise Project.List custom role user should get projects assigned to him in list call.",
                "timedOut": false,
                "duration": 54,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set({ authtoken: orgData.role1.authtoken, org_uid: orgData.organization.uid })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output.count).to.be.equal(3)\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "eca0cb63-53c8-4ba2-9b17-747857733f9a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "owner of org should get all projects of org.",
                "fullTitle": "Enterprise Project.List owner of org should get all projects of org.",
                "timedOut": false,
                "duration": 51,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set({ authtoken: dummyUser.authtoken, org_uid: orgData.organization.uid })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output.projects.length).equal(5);\n            expect(res.body.output.projects[0].org_uid).equal(orgData.organization.uid);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "f915c85c-a60b-405a-924e-c0cf6a7e74e1",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d3494fac-6206-4dbb-9862-391f0fa8e7ee",
              "ffe3f5b3-5649-49ff-b38c-7316326c0e2e",
              "f98f606a-0841-4580-8ba9-a8bd9a296479",
              "fe9df50c-4662-4494-ac05-b5de0f66df43",
              "451ede0a-b9de-4c39-b55a-ff78e54da5f1",
              "eca0cb63-53c8-4ba2-9b17-747857733f9a",
              "f915c85c-a60b-405a-924e-c0cf6a7e74e1"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 293,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "46f56bf7-2bb4-431c-bb32-f182a72c4883",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\project\\updateProject.js",
        "file": "\\controllers\\test\\project\\updateProject.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "b13950dc-9c6c-4d6b-982d-2d25f7d71cda",
            "title": "Project.Update",
            "fullFile": "D:\\api\\controllers\\test\\project\\updateProject.js",
            "file": "\\controllers\\test\\project\\updateProject.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Project.Update \"before all\" hook",
                "timedOut": false,
                "duration": 299,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(user, cbk) {\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    },\n    function(result, cbk) {\n        dummyUser = result.body.output;\n        projectData.user_uid = dummyUser.uid\n        projectData.env_uid = dummyUser.default_env\n        api.post(apiURL)\n            .set('authtoken', dummyUser.authtoken)\n            .send(projectData)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        project = res.body.output\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "343c0e7e-69d3-4599-a821-f4190cdd4148",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Project.Update \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.parallel([\n    function(cb) {\n        _models.Project.remove({ uid: project.uid }, function(err) {\n            cb(err)\n        })\n    }\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "082d6f9f-fce7-40c1-9ff6-73ad6629192b",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise Project.Update Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put(apiURL + project.uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "9b6179b8-42e3-4b66-9982-b9d8cc576a56",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if user tried to update project which not exists in an environment.",
                "fullTitle": "Enterprise Project.Update Should get error, if user tried to update project which not exists in an environment.",
                "timedOut": false,
                "duration": 44,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nprojectData.owner_uid = dummyUser.uid\nprojectData.env_uid = dummyUser.default_env\napi.put(apiURL + 'project.uid')\n    .set({ authtoken: dummyUser.authtoken })\n    .send(projectData)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).equal(messageList.PROJECT_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "91985226-6cd7-4e7a-9345-c186baf1ae53",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error if user tried to update project with name already exists in an environment.",
                "fullTitle": "Enterprise Project.Update Should get error if user tried to update project with name already exists in an environment.",
                "timedOut": false,
                "duration": 46,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar project1 = _.cloneDeep(projectData)\nproject1.owner_uid = dummyUser.uid\nproject1.env_uid = dummyUser.default_env\napi.put(apiURL + project.uid)\n    .set({ authtoken: dummyUser.authtoken, env_uid: dummyUser.env_uid || dummyUser.default_env })\n    .send(project1)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).equal(messageList.PROJECT_NAME_UNIQUE_ERROR);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "33b6533c-03d5-4f89-bf67-ca8d1d630726",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error if user tried to update project which is default.",
                "fullTitle": "Enterprise Project.Update Should get error if user tried to update project which is default.",
                "timedOut": false,
                "duration": 46,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar project1 = _.cloneDeep(projectData)\nproject1.owner_uid = dummyUser.uid\nproject1.env_uid = dummyUser.default_env\napi.put(apiURL + dummyUser.default_project)\n    .set({ authtoken: dummyUser.authtoken, env_uid: dummyUser.env_uid || dummyUser.default_env })\n    .send(project1)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).equal(messageList.DEFAULT_PROJECT_DELETE_ERROR);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "081f81f2-4340-44f6-8ecc-758cbd56563c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should update project, if user send valid data.",
                "fullTitle": "Enterprise Project.Update Should update project, if user send valid data.",
                "timedOut": false,
                "duration": 60,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nprojectData.name = 'updated project'\napi.put(apiURL + project.uid)\n    .set({ authtoken: dummyUser.authtoken })\n    .send(projectData)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output.name).equal(projectData.name);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "bc9a6810-e7d5-4262-abf4-c6653158fc93",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error if  project name is blank.",
                "fullTitle": "Enterprise Project.Update Should get error if  project name is blank.",
                "timedOut": false,
                "duration": 38,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nprojectData.name = ''\nprojectData.owner_uid = dummyUser.uid\nprojectData.env_uid = dummyUser.default_env\napi.put(apiURL + project.uid)\n    .set({ authtoken: dummyUser.authtoken, env_uid: dummyUser.env_uid || dummyUser.default_env })\n    .send(projectData)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            expect(res.body.error.name.message).equal(messageList.PROJECT_NAME_REQUIRED);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "d6cf3e5f-9b76-4c5a-bd07-41604c7d1168",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9b6179b8-42e3-4b66-9982-b9d8cc576a56",
              "91985226-6cd7-4e7a-9345-c186baf1ae53",
              "33b6533c-03d5-4f89-bf67-ca8d1d630726",
              "081f81f2-4340-44f6-8ecc-758cbd56563c",
              "bc9a6810-e7d5-4262-abf4-c6653158fc93",
              "d6cf3e5f-9b76-4c5a-bd07-41604c7d1168"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 242,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "dd3b4e22-ee1c-48a8-8490-1919d2bde52b",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\project\\updateProjectParam.js",
        "file": "\\controllers\\test\\project\\updateProjectParam.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "516e4e8e-e709-484e-a60a-f07902fd5115",
            "title": "ProjectParam.Update",
            "fullFile": "D:\\api\\controllers\\test\\project\\updateProjectParam.js",
            "file": "\\controllers\\test\\project\\updateProjectParam.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise ProjectParam.Update \"before all\" hook",
                "timedOut": false,
                "duration": 255,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data;\n        async.waterfall([\n            function(cbk) {\n                dummyUser = orgData.owner;\n                dummyUser.authtoken = dummyUser.authtoken;\n                projectData.owner_uid = dummyUser.uid\n                projectData.env_uid = dummyUser.default_env\n                api.post(projectURL)\n                    .set('authtoken', dummyUser.authtoken)\n                    .send(projectData)\n                    .expect(httpStatus.CREATED)\n                    .end(function(err, result) {\n                        cbk(err, result);\n                    })\n            },\n            function(res, cbk) {\n                project = res.body.output\n                api.post(apiURL)\n                    .set({ authtoken: dummyUser.authtoken, project_uid: project.uid })\n                    .send(paramData)\n                    .expect(httpStatus.CREATED)\n                    .end(function(err, res) {\n                        cbk(err, res)\n                    })\n            }\n        ], function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                configSchema = res.body.output\n                done()\n            }\n        })\n    });\n})",
                "err": {},
                "isRoot": false,
                "uuid": "3e9a0543-043e-4dc5-98af-d0ab52395877",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise ProjectParam.Update \"after all\" hook",
                "timedOut": false,
                "duration": 6,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.parallel([\n    function(cb) {\n        _models.Project.remove({ uid: project.uid }, function(err) {\n            cb(err)\n        })\n    },\n    function(cb) {\n        _models.ConfigSchema.remove({ uid: configSchema.uid }, function(err) {\n            cb(err)\n        })\n    }\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "b87e2a93-a3a3-45e2-bad5-44270132d234",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise ProjectParam.Update Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put(apiURL + configSchema.uid)\n    .send(paramData)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "f230191a-601c-4c6b-8105-ba2cabd135c8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should update project param, if user send valid data.",
                "fullTitle": "Enterprise ProjectParam.Update Should update project param, if user send valid data.",
                "timedOut": false,
                "duration": 46,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar paramData2 = {\n    key: \"key2\",\n    value: \"value2\",\n    required: false,\n    isPassword: true,\n    hasError: false\n}\nparamData2.key = 'key2'\napi.put(apiURL + configSchema.uid)\n    .set({ authtoken: dummyUser.authtoken, project_uid: project.uid })\n    .send(paramData2)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output.param.key).equal(paramData2.key);\n            expect(res.body.output.param.value).equal(paramData2.value);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "7c5e70b6-0359-4c50-ac88-2500af2defb5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if unauthorised user tried to update data of other user.",
                "fullTitle": "Enterprise ProjectParam.Update Should get error, if unauthorised user tried to update data of other user.",
                "timedOut": false,
                "duration": 42,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put(apiURL + project.uid)\n    .set({ authtoken: orgData.role1.authtoken })\n    .send({})\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).equal(messageList.NO_DATA_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "7c50ebc6-c120-4ee8-be8a-e87bb0167b51",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if project not found.",
                "fullTitle": "Enterprise ProjectParam.Update Should get error, if project not found.",
                "timedOut": false,
                "duration": 32,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put(apiURL + project.uid)\n    .set({ authtoken: dummyUser.authtoken, project_uid: 'ABC' })\n    .send({})\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).equal(messageList.PROJECT_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "7f1d80de-ee0b-41ac-b635-510afd97091d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if configSchema not found.",
                "fullTitle": "Enterprise ProjectParam.Update Should get error, if configSchema not found.",
                "timedOut": false,
                "duration": 42,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar paramData3 = {\n    key: \"key2\",\n    value: \"value2\",\n    required: false,\n    isPassword: true,\n    hasError: false\n}\nparamData3.key = 'key2'\napi.put(apiURL + project.uid)\n    .set({ authtoken: dummyUser.authtoken, project_uid: project.uid })\n    .send(paramData3)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).equal(messageList.NO_DATA_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "5b50f1dd-0a98-49bf-89da-c8e4d0d820b9",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f230191a-601c-4c6b-8105-ba2cabd135c8",
              "7c5e70b6-0359-4c50-ac88-2500af2defb5",
              "7c50ebc6-c120-4ee8-be8a-e87bb0167b51",
              "7f1d80de-ee0b-41ac-b635-510afd97091d",
              "5b50f1dd-0a98-49bf-89da-c8e4d0d820b9"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 171,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "58541463-98ce-47f1-a2e9-e195aeb7599e",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\promoCode\\create.enterprise.js",
        "file": "\\controllers\\test\\promoCode\\create.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "27af1537-b14b-473b-963e-f14481742330",
            "title": "PromoCode",
            "fullFile": "D:\\api\\controllers\\test\\promoCode\\create.enterprise.js",
            "file": "\\controllers\\test\\promoCode\\create.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "f8de38de-5965-4b9c-b940-3646c9116117",
                "title": "PromoCode.Create",
                "fullFile": "D:\\api\\controllers\\test\\promoCode\\create.enterprise.js",
                "file": "\\controllers\\test\\promoCode\\create.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise PromoCode PromoCode.Create \"before each\" hook",
                    "timedOut": false,
                    "duration": 27,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n    _models.Plan.remove({ $or: [{ name: new RegExp('^RANDOM_PLAN+', \"i\") }, { name: new RegExp('^utest_cases_Standard+', \"i\") }] }, function(error, plan) {\n        _models.Mail.remove({ $or: [{ to: new RegExp('^test.user+', \"i\") }, { to: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n            _models.Promocode.remove({}, function(error, promo) {\n                _models.UserPromocode.remove({}, function(error, userPromos) {\n                    savePlanEntries({\n                        count: 5\n                    }, function(error, planEntries) {\n                        _planEntries = planEntries;\n                        done();\n                    });\n                });\n            });\n        });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "08c9ba22-45ea-4dd9-b860-d6812817a4be",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise PromoCode PromoCode.Create \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5cc2f249-2539-4eee-b3ac-c3e0572f551e",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should add only promocode to user.",
                    "fullTitle": "Enterprise PromoCode PromoCode.Create Should add only promocode to user.",
                    "timedOut": false,
                    "duration": 251,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\naddPromcode({\n    count: 1,\n    promo_code: \"PROMO_CODE\",\n    domain: \"raweng.com\",\n    redemption_count: 1,\n    redemption_start: moment(new Date()).subtract(1, 'days'),\n    redemption_end: moment(new Date()).add(1, 'days'),\n    allowed_plans: [],\n    default_plan: null,\n    addon_credits: 5,\n    addon_flows: 2,\n    addon_triggers: 2,\n    addon_trial_days: 10,\n    braintree_discount_id: \"\",\n    promo_features_expiration: moment(new Date()).add(10, 'days')\n}, function(error, promoCodes) {\n    signUpUser({\n        promo_code: promoCodes[0].promo_code\n    }, function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            (res.body.output.uid != \"\").should.equal(true);\n            done();\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a238be47-82d1-4582-9479-e0957f838842",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as promocode is not allowed for trial plan.",
                    "fullTitle": "Enterprise PromoCode PromoCode.Create Should give error as promocode is not allowed for trial plan.",
                    "timedOut": false,
                    "duration": 41,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\naddPromcode({\n    count: 1,\n    promo_code: \"PROMO_CODE\",\n    domain: \"raweng.com\",\n    redemption_count: 1,\n    redemption_start: moment(new Date()).subtract(1, 'days'),\n    redemption_end: moment(new Date()).add(1, 'days'),\n    allowed_plans: [_planEntries[0]],\n    default_plan: null,\n    addon_credits: 5,\n    addon_flows: 2,\n    addon_triggers: 2,\n    addon_trial_days: 10,\n    braintree_discount_id: \"\",\n    promo_features_expiration: moment(new Date()).add(10, 'days')\n}, function(error, promoCodes) {\n    signUpUser({\n        promo_code: promoCodes[0].promo_code,\n        status: httpStatus.BAD_REQUEST\n    }, function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            (res.body.error.message).should.equal(messageList.PROMOCODE_NOT_ALLOWED_FOR_DEFAULT);\n            done();\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8f534a4d-37f6-4c27-bf84-7f677363d7b1",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should add promocode and its default plan to user.",
                    "fullTitle": "Enterprise PromoCode PromoCode.Create Should add promocode and its default plan to user.",
                    "timedOut": false,
                    "duration": 261,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\naddPromcode({\n    count: 1,\n    promo_code: \"PROMO_CODE\",\n    domain: \"raweng.com\",\n    redemption_count: 1,\n    redemption_start: moment(new Date()).subtract(1, 'days'),\n    redemption_end: moment(new Date()).add(1, 'days'),\n    allowed_plans: [_planEntries[0]],\n    default_plan: _planEntries[0],\n    addon_credits: 5,\n    addon_flows: 2,\n    addon_triggers: 2,\n    addon_trial_days: 10,\n    braintree_discount_id: \"\",\n    promo_features_expiration: moment(new Date()).add(10, 'days')\n}, function(error, promoCodes) {\n    signUpUser({\n        promo_code: promoCodes[0].promo_code\n    }, function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            (res.body.output.uid != \"\" &&\n                res.body.output.plan[0].uid == _planEntries[0].uid).should.equal(true);\n            done();\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0c14affe-b551-4a3c-9383-f4eced01cbce",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should add promocode to user and return proper user_plan.",
                    "fullTitle": "Enterprise PromoCode PromoCode.Create Should add promocode to user and return proper user_plan.",
                    "timedOut": false,
                    "duration": 289,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\naddPromcode({\n    count: 1,\n    promo_code: \"PROMO_CODE\",\n    domain: \"raweng.com\",\n    redemption_count: 1,\n    redemption_start: moment(new Date()).subtract(1, 'days'),\n    redemption_end: moment(new Date()).add(1, 'days'),\n    allowed_plans: [_planEntries[0]],\n    default_plan: _planEntries[0],\n    addon_credits: 5,\n    addon_flows: 2,\n    addon_triggers: 2,\n    addon_trial_days: 10,\n    braintree_discount_id: \"\",\n    promo_features_expiration: moment(new Date()).add(10, 'days')\n}, function(error, promoCodes) {\n    signUpUser({\n        promo_code: promoCodes[0].promo_code\n    }, function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var user = res.body.output;\n            var isValid = typeof(user._id) == \"undefined\" &&\n                typeof(user.__v) == \"undefined\" &&\n                user.user_plan.reimburse.credits == 2505 &&\n                user.user_plan.reimburse.period == 30 &&\n                user.user_plan.trigger.count == 7;\n            isValid.should.equal(true);\n            done();\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b9faf653-988a-4aec-861f-20420121d860",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as promocode invalid domain.",
                    "fullTitle": "Enterprise PromoCode PromoCode.Create Should give error as promocode invalid domain.",
                    "timedOut": false,
                    "duration": 33,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\naddPromcode({\n    count: 1,\n    promo_code: \"PROMO_CODE\",\n    domain: \"raweng.com\",\n    redemption_count: 1,\n    redemption_start: moment(new Date()).subtract(1, 'days'),\n    redemption_end: moment(new Date()).add(1, 'days'),\n    allowed_plans: [_planEntries[0]],\n    default_plan: _planEntries[0],\n    addon_credits: 5,\n    addon_flows: 2,\n    addon_triggers: 2,\n    addon_trial_days: 10,\n    braintree_discount_id: \"\",\n    promo_features_expiration: moment(new Date()).add(10, 'days')\n}, function(error, promoCodes) {\n    signUpUser({\n        promo_code: promoCodes[0].promo_code,\n        email: \"test.user+1@built.io\",\n        status: httpStatus.BAD_REQUEST\n    }, function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            (res.body.error.message).should.equal(messageList.PROMOCODE_DOMAIN_NOT_ALLOWED);\n            done();\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "565582cd-cbd7-498d-945b-07cad44c3031",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as invalid promocode.",
                    "fullTitle": "Enterprise PromoCode PromoCode.Create Should give error as invalid promocode.",
                    "timedOut": false,
                    "duration": 35,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\naddPromcode({\n    count: 1,\n    promo_code: \"PROMO_CODE\",\n    domain: \"raweng.com\",\n    redemption_count: 1,\n    redemption_start: moment(new Date()).subtract(1, 'days'),\n    redemption_end: moment(new Date()).add(1, 'days'),\n    allowed_plans: [_planEntries[0]],\n    default_plan: _planEntries[0],\n    addon_credits: 5,\n    addon_flows: 2,\n    addon_triggers: 2,\n    addon_trial_days: 10,\n    braintree_discount_id: \"\",\n    promo_features_expiration: moment(new Date()).add(10, 'days')\n}, function(error, promoCodes) {\n    signUpUser({\n        promo_code: \"FAKE_PROMO_CODE\",\n        status: httpStatus.BAD_REQUEST\n    }, function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            (res.body.error.message).should.equal(messageList.PROMOCODE_INVALID);\n            done();\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "084c2259-46c8-4b64-a1e2-fa41618098d5",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give invalid promocode error for future promocode.",
                    "fullTitle": "Enterprise PromoCode PromoCode.Create Should give invalid promocode error for future promocode.",
                    "timedOut": false,
                    "duration": 47,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\naddPromcode({\n    count: 1,\n    promo_code: \"PROMO_CODE\",\n    domain: \"raweng.com\",\n    redemption_count: 1,\n    redemption_start: moment(new Date()).add(2, 'days'),\n    redemption_end: moment(new Date()).add(3, 'days'),\n    allowed_plans: [_planEntries[0]],\n    default_plan: _planEntries[0],\n    addon_credits: 5,\n    addon_flows: 2,\n    addon_triggers: 2,\n    addon_trial_days: 10,\n    braintree_discount_id: \"\",\n    promo_features_expiration: moment(new Date()).add(10, 'days')\n}, function(error, promoCodes) {\n    signUpUser({\n        promo_code: promoCodes[0].promo_code,\n        status: httpStatus.BAD_REQUEST\n    }, function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            (res.body.error.message).should.equal(messageList.PROMOCODE_INVALID);\n            done();\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bfbe32c5-9de5-4926-a512-c404b54d30bd",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give promocode expire error.",
                    "fullTitle": "Enterprise PromoCode PromoCode.Create Should give promocode expire error.",
                    "timedOut": false,
                    "duration": 39,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\naddPromcode({\n    count: 1,\n    promo_code: \"PROMO_CODE\",\n    domain: \"raweng.com\",\n    redemption_count: 1,\n    redemption_start: moment(new Date()).subtract(2, 'days'),\n    redemption_end: moment(new Date()).subtract(1, 'days'),\n    allowed_plans: [_planEntries[0]],\n    default_plan: _planEntries[0],\n    addon_credits: 5,\n    addon_flows: 2,\n    addon_triggers: 2,\n    addon_trial_days: 10,\n    braintree_discount_id: \"\",\n    promo_features_expiration: moment(new Date()).add(10, 'days')\n}, function(error, promoCodes) {\n    signUpUser({\n        promo_code: promoCodes[0].promo_code,\n        status: httpStatus.BAD_REQUEST\n    }, function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            (res.body.error.message).should.equal(messageList.PROMOCODE_EXPIRED);\n            done();\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "28c96be7-fc60-4d02-9898-65bd7e21f421",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should allocate promocode to only two users.",
                    "fullTitle": "Enterprise PromoCode PromoCode.Create Should allocate promocode to only two users.",
                    "timedOut": false,
                    "duration": 571,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\naddPromcode({\n    count: 1,\n    promo_code: \"PROMO_CODE\",\n    domain: \"raweng.com\",\n    redemption_count: 2,\n    redemption_start: moment(new Date()).subtract(1, 'days'),\n    redemption_end: moment(new Date()).add(1, 'days'),\n    allowed_plans: [_planEntries[0]],\n    default_plan: _planEntries[0],\n    addon_credits: 5,\n    addon_flows: 2,\n    addon_triggers: 2,\n    addon_trial_days: 10,\n    braintree_discount_id: \"\",\n    promo_features_expiration: moment(new Date()).add(10, 'days')\n}, function(error, promoCodes) {\n    signUpUser({\n        email: \"test.user+1@raweng.com\",\n        promo_code: promoCodes[0].promo_code\n    }, function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            if (res.body.output.uid != \"\" &&\n                res.body.output.plan[0].uid == _planEntries[0].uid) {\n                signUpUser({\n                    email: \"test.user+2@raweng.com\",\n                    promo_code: promoCodes[0].promo_code\n                }, function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        if (res.body.output.uid != \"\" &&\n                            res.body.output.plan[0].uid == _planEntries[0].uid) {\n                            signUpUser({\n                                email: \"test.user+3@raweng.com\",\n                                promo_code: promoCodes[0].promo_code,\n                                status: httpStatus.BAD_REQUEST\n                            }, function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    (res.body.error.message).should.equal(messageList.PROMOCODE_OVER_REDEMPT);\n                                    done();\n                                }\n                            });\n                        } else {\n                            true.should.equal(false);\n                            done();\n                        }\n                    }\n                });\n            } else {\n                true.should.equal(false);\n                done();\n            }\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "356dec6b-b696-4081-98c1-57078e787718",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should add promocode add signup.",
                    "fullTitle": "Enterprise PromoCode PromoCode.Create Should add promocode add signup.",
                    "timedOut": false,
                    "duration": 262,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\naddPromcode({\n    count: 1,\n    promo_code: \"PROMO_CODE\",\n    domain: \"gmail.com\",\n    redemption_count: 1,\n    redemption_start: moment(new Date()).subtract(1, 'days'),\n    redemption_end: moment(new Date()).add(1, 'days'),\n    allowed_plans: [],\n    default_plan: null,\n    addon_credits: 5,\n    addon_flows: 2,\n    addon_triggers: 2,\n    addon_trial_days: 10,\n    braintree_discount_id: \"\",\n    promo_features_expiration: moment(new Date()).add(10, 'days')\n}, function(error, promoCodes) {\n    commonMock.setSignUpMocks(httpmock, \"enterprise\");\n    var tempRegistrationBody = getImmutable(registrationBody);\n    tempRegistrationBody.promo_code = promoCodes[0].promo_code;\n    tempRegistrationBody.email = \"test.user@gmail.com\";\n    api.post(\"/enterprise/v1/signup\")\n        .send(tempRegistrationBody)\n        .expect(httpStatus.CREATED)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                res.body.output.subscription.days.should.equal(40);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ac08a6d6-c011-4a7f-afad-0caac6f73a15",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "a238be47-82d1-4582-9479-e0957f838842",
                  "8f534a4d-37f6-4c27-bf84-7f677363d7b1",
                  "0c14affe-b551-4a3c-9383-f4eced01cbce",
                  "b9faf653-988a-4aec-861f-20420121d860",
                  "565582cd-cbd7-498d-945b-07cad44c3031",
                  "084c2259-46c8-4b64-a1e2-fa41618098d5",
                  "bfbe32c5-9de5-4926-a512-c404b54d30bd",
                  "28c96be7-fc60-4d02-9898-65bd7e21f421",
                  "356dec6b-b696-4081-98c1-57078e787718",
                  "ac08a6d6-c011-4a7f-afad-0caac6f73a15"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 1829,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "6c1b10fe-a59d-4621-aa6f-459ed8224694",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\promoCode\\getUserList.enterprise.js",
        "file": "\\controllers\\test\\promoCode\\getUserList.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "e7aa7fbf-eb1f-4b8d-9d3b-0f03f91fbcc1",
            "title": "PromoCode",
            "fullFile": "D:\\api\\controllers\\test\\promoCode\\getUserList.enterprise.js",
            "file": "\\controllers\\test\\promoCode\\getUserList.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "8c0376f2-f9b9-46e0-aa07-3772f049d0c2",
                "title": "PromoCode.getUserList",
                "fullFile": "D:\\api\\controllers\\test\\promoCode\\getUserList.enterprise.js",
                "file": "\\controllers\\test\\promoCode\\getUserList.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise PromoCode PromoCode.getUserList \"before each\" hook",
                    "timedOut": false,
                    "duration": 7876,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveRecords(function() {\n    savePlanEntries({\n        count: 5\n    }, function(error, planEntries) {\n        _planEntries = planEntries;\n        addPromcode({\n            count: 1,\n            promo_code: \"PROMO_CODE\",\n            domain: \"raweng.com\",\n            redemption_count: 30,\n            redemption_start: moment(new Date()).subtract(1, 'days'),\n            redemption_end: moment(new Date()).add(1, 'days'),\n            allowed_plans: [],\n            default_plan: _planEntries[0],\n            addon_credits: 5,\n            addon_flows: 2,\n            addon_active_flows: 2,\n            addon_triggers: 2,\n            addon_trial_days: 10,\n            braintree_discount_id: \"\",\n            promo_features_expiration: moment(new Date()).add(10, 'days')\n        }, function(error, promoCodes) {\n            addUsersWithPromocode({\n                count: 30,\n                promo_code: promoCodes[0].promo_code\n            }, function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    done();\n                }\n            });\n        });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1dfc2610-3f24-4a17-9f66-e2a457d0d26e",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise PromoCode PromoCode.getUserList \"after all\" hook",
                    "timedOut": false,
                    "duration": 8,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\nremoveRecords(function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3a44ce3a-7ded-4452-974d-70adf309e7bf",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get list users.",
                    "fullTitle": "Enterprise PromoCode PromoCode.getUserList Should get list users.",
                    "timedOut": false,
                    "duration": 273,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set(\"ui_admin_key\", config.UI_ADMIN_KEY)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isArray = Array.isArray(res.body.output.objects);\n            isArray.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f0f4dd47-5085-47c2-8882-bf34f57c4523",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should add promocode to user and return proper user_plan.",
                    "fullTitle": "Enterprise PromoCode PromoCode.getUserList Should add promocode to user and return proper user_plan.",
                    "timedOut": false,
                    "duration": 320,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set(\"ui_admin_key\", config.UI_ADMIN_KEY)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isArray = Array.isArray(res.body.output.objects);\n            if (isArray) {\n                var isValid = true;\n                _.forEach(res.body.output.objects, function(user) {\n                    if (user.plan[0].uid == _planEntries[0].uid) {\n                        isValid = isValid && user.uid != \"\" &&\n                            typeof(user._id) == \"undefined\" &&\n                            typeof(user.__v) == \"undefined\" &&\n                            user.user_plan.reimburse.credits == 1005 &&\n                            user.user_plan.reimburse.period == 30 &&\n                            user.user_plan.trigger.count == 42 &&\n                            user.user_plan.flow.count == 102;\n                    }\n                });\n                isValid.should.equal(true);\n            } else {\n                true.should.equal(false);\n            }\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ab9fe50b-9cae-401c-809c-184bb63c061c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of users by considering skip.",
                    "fullTitle": "Enterprise PromoCode PromoCode.getUserList Should get list of users by considering skip.",
                    "timedOut": false,
                    "duration": 322,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?skip=5\";\napi.get(filterURL)\n    .set(\"ui_admin_key\", config.UI_ADMIN_KEY)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            (Array.isArray(res.body.output.objects) &&\n                res.body.output.objects.length == 25 &&\n                res.body.output.count == 30).should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4e39006c-5960-47c6-be3e-49482e36d5d0",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of users by considering limit.",
                    "fullTitle": "Enterprise PromoCode PromoCode.getUserList Should get list of users by considering limit.",
                    "timedOut": false,
                    "duration": 71,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?limit=5\";\napi.get(filterURL)\n    .set(\"ui_admin_key\", config.UI_ADMIN_KEY)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            (Array.isArray(res.body.output.objects) &&\n                res.body.output.objects.length == 5 &&\n                res.body.output.count == 30).should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c56b39d1-2b3f-4e5a-9294-eaa379cdec95",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of promocode applied users by considering skip/limit.",
                    "fullTitle": "Enterprise PromoCode PromoCode.getUserList Should get list of promocode applied users by considering skip/limit.",
                    "timedOut": false,
                    "duration": 139,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?skip=5&limit=10\";\napi.get(filterURL)\n    .set(\"ui_admin_key\", config.UI_ADMIN_KEY)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            (Array.isArray(res.body.output.objects) &&\n                res.body.output.objects.length == 10 &&\n                res.body.output.count == 30).should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ae94cb46-5a9f-439e-ab3b-c32e0b389a73",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "f0f4dd47-5085-47c2-8882-bf34f57c4523",
                  "ab9fe50b-9cae-401c-809c-184bb63c061c",
                  "4e39006c-5960-47c6-be3e-49482e36d5d0",
                  "c56b39d1-2b3f-4e5a-9294-eaa379cdec95",
                  "ae94cb46-5a9f-439e-ab3b-c32e0b389a73"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 1125,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "45e8d9d9-bfde-40dc-aca5-940e4388952e",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\promoCode\\userPromocodeAdd.enterprise.js",
        "file": "\\controllers\\test\\promoCode\\userPromocodeAdd.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "4d57b043-5c47-4c23-bd87-2e832425d21b",
            "title": "PromoCode",
            "fullFile": "D:\\api\\controllers\\test\\promoCode\\userPromocodeAdd.enterprise.js",
            "file": "\\controllers\\test\\promoCode\\userPromocodeAdd.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "3955ebd6-f7b1-401e-a51e-64a775eb2445",
                "title": "PromoCode.userPromocodeAdd",
                "fullFile": "D:\\api\\controllers\\test\\promoCode\\userPromocodeAdd.enterprise.js",
                "file": "\\controllers\\test\\promoCode\\userPromocodeAdd.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeAdd \"before each\" hook",
                    "timedOut": false,
                    "duration": 275,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({}, function(error, user) {\n    _models.Plan.remove({ $or: [{ name: new RegExp('^RANDOM_PLAN+', \"i\") }, { name: new RegExp('^utest_cases_Standard+', \"i\") }] }, function(error, plan) {\n        _models.Mail.remove({}, function(error, user) {\n            _models.Promocode.remove({}, function(error, promo) {\n                _models.UserPromocode.remove({}, function(error, userPromos) {\n                    signUpUser({}, function(err, res) {\n                        authToken = res.body.output.authtoken;\n                        token = res.body.output.activation_token;\n                        _id = res.body.output._id;\n                        uid = res.body.output.uid;\n                        savePlanEntries({\n                            count: 5\n                        }, function(error, planEntries) {\n                            _planEntries = planEntries;\n                            done();\n                        });\n                    });\n                });\n            });\n        });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e58a984c-3f7d-4112-849f-5568a0964a6d",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeAdd \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0188ef12-bfa1-4dec-80f3-2e6cfefe95b6",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should add promocode to user.",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeAdd Should add promocode to user.",
                    "timedOut": false,
                    "duration": 90,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\naddPromcode({\n    count: 1,\n    promo_code: \"PROMO_CODE\",\n    domain: \"raweng.com\",\n    redemption_count: 1,\n    redemption_start: moment(new Date()).subtract(1, 'days'),\n    redemption_end: moment(new Date()).add(1, 'days'),\n    allowed_plans: [],\n    default_plan: null,\n    addon_credits: 5,\n    addon_flows: 2,\n    addon_triggers: 2,\n    addon_trial_days: 10,\n    braintree_discount_id: \"\",\n    promo_features_expiration: moment(new Date()).add(10, 'days')\n}, function(error, promoCodes) {\n    addPromcodeToUser({\n        promo_code: promoCodes[0].promo_code\n    }, function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var userPromoCode = res.body.output;\n            if (userPromoCode.user_uid == uid &&\n                userPromoCode.uid != \"\") {\n                commonMock.brainTreeClientToken(httpmock, \"enterprise\");\n                api.get(\"/enterprise/v1/user\")\n                    .set('authtoken', authToken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            var isValid = res.body.output.uid == uid &&\n                                typeof(res.body.output._id) == \"undefined\" &&\n                                typeof(res.body.output.__v) == \"undefined\" &&\n                                res.body.output.subscription.days == 40;\n                            isValid.should.equal(true);\n                            done();\n                        }\n                    });\n            } else {\n                true.should.equal(false);\n                done();\n            }\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e1f349c3-1124-46e4-97c8-8a9626e897e5",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should add promocode to user and return proper user_plan.",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeAdd Should add promocode to user and return proper user_plan.",
                    "timedOut": false,
                    "duration": 314,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\naddPromcode({\n    count: 1,\n    promo_code: \"PROMO_CODE\",\n    domain: \"raweng.com\",\n    redemption_count: 1,\n    redemption_start: moment(new Date()).subtract(1, 'days'),\n    redemption_end: moment(new Date()).add(1, 'days'),\n    allowed_plans: [],\n    default_plan: null,\n    addon_credits: 5,\n    addon_flows: 2,\n    addon_triggers: 2,\n    addon_trial_days: 10,\n    braintree_discount_id: \"\",\n    promo_features_expiration: moment(new Date()).add(10, 'days')\n}, function(error, promoCodes) {\n    signUpUser({\n        email: \"test.user+1@raweng.com\",\n        plan: _planEntries[0].name\n    }, function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var authtoken = res.body.output.authtoken;\n            var user_uid = res.body.output.uid;\n            addPromcodeToUser({\n                promo_code: promoCodes[0].promo_code,\n                user_uid: user_uid,\n                status: httpStatus.OK\n            }, function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    api.get(\"/enterprise/v1/user\")\n                        .set('authtoken', authtoken)\n                        .expect(httpStatus.OK)\n                        .end(function(err, res) {\n                            if (err) {\n                                done(err);\n                            } else {\n                                var user = res.body.output;\n                                var isValid = user.uid == user_uid &&\n                                    typeof(user._id) == \"undefined\" &&\n                                    typeof(user.__v) == \"undefined\" &&\n                                    user.user_plan.reimburse.credits == 1005 &&\n                                    user.user_plan.reimburse.period == 30 &&\n                                    user.user_plan.trigger.count == 42 &&\n                                    user.user_plan.flow.count == 102;\n                                isValid.should.equal(true);\n                                done();\n                            }\n                        });\n                }\n            });\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "31d2d31c-1f93-42ae-b81d-c9597cd2e55a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should re-again redempt another promocode.",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeAdd Should re-again redempt another promocode.",
                    "timedOut": false,
                    "duration": 70,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\naddPromcode({\n    count: 2,\n    promo_code: \"PROMO_CODE\",\n    domain: \"raweng.com\",\n    redemption_count: 1,\n    redemption_start: moment(new Date()).subtract(1, 'days'),\n    redemption_end: moment(new Date()).add(1, 'days'),\n    allowed_plans: [],\n    default_plan: null,\n    addon_credits: 5,\n    addon_flows: 2,\n    addon_triggers: 2,\n    addon_trial_days: 10,\n    braintree_discount_id: \"\",\n    promo_features_expiration: moment(new Date()).add(10, 'days')\n}, function(error, promoCodes) {\n    addPromcodeToUser({\n        promo_code: promoCodes[0].promo_code\n    }, function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var userPromoCode = res.body.output;\n            if (userPromoCode.user_uid == uid && userPromoCode.uid != \"\") {\n                var promocode_uid = userPromoCode.promocode_uid[0];\n                addPromcodeToUser({\n                    promo_code: promoCodes[1].promo_code\n                }, function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        var userPromoCode = res.body.output;\n                        (userPromoCode.user_uid == uid &&\n                            userPromoCode.uid != \"\" &&\n                            userPromoCode.promocode_uid[0] != promocode_uid).should.equal(true);\n                        done();\n                    }\n                });\n            } else {\n                true.should.equal(false);\n                done();\n            }\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a5b4daca-cf3b-4c41-ae3d-6d749eda96a3",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should allocate promocode to only two users.",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeAdd Should allocate promocode to only two users.",
                    "timedOut": false,
                    "duration": 558,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\naddPromcode({\n    count: 1,\n    promo_code: \"PROMO_CODE\",\n    domain: \"raweng.com\",\n    redemption_count: 2,\n    redemption_start: moment(new Date()).subtract(1, 'days'),\n    redemption_end: moment(new Date()).add(1, 'days'),\n    allowed_plans: [],\n    default_plan: null,\n    addon_credits: 5,\n    addon_flows: 2,\n    addon_triggers: 2,\n    addon_trial_days: 10,\n    braintree_discount_id: \"\",\n    promo_features_expiration: moment(new Date()).add(10, 'days')\n}, function(error, promoCodes) {\n    addPromcodeToUser({\n        promo_code: promoCodes[0].promo_code\n    }, function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var userPromoCode = res.body.output;\n            if (userPromoCode.user_uid == uid && userPromoCode.uid != \"\") {\n                signUpUser({\n                    email: \"test.user+1@raweng.com\"\n                }, function(err, res) {\n                    var userUID1 = res.body.output.uid;\n                    addPromcodeToUser({\n                        promo_code: promoCodes[0].promo_code,\n                        user_uid: userUID1\n                    }, function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            var userPromoCode = res.body.output;\n                            if (userPromoCode.user_uid == userUID1 && userPromoCode.uid != \"\") {\n                                signUpUser({\n                                    email: \"test.user+2@raweng.com\"\n                                }, function(err, res) {\n                                    var userUID2 = res.body.output.uid;\n                                    addPromcodeToUser({\n                                        promo_code: promoCodes[0].promo_code,\n                                        status: httpStatus.BAD_REQUEST\n                                    }, function(err, res) {\n                                        if (err) {\n                                            done(err);\n                                        } else {\n                                            (res.body.error.message).should.equal(messageList.PROMOCODE_OVER_REDEMPT);\n                                            done();\n                                        }\n                                    });\n                                });\n                            } else {\n                                true.should.equal(false);\n                                done();\n                            }\n                        }\n                    });\n                });\n            } else {\n                true.should.equal(false);\n                done();\n            }\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e4f935f7-fcfa-439a-86cd-71264ca6fc92",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should allocate promocode if user plan is included in allowed_plans.",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeAdd Should allocate promocode if user plan is included in allowed_plans.",
                    "timedOut": false,
                    "duration": 269,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\naddPromcode({\n    count: 1,\n    promo_code: \"PROMO_CODE\",\n    domain: \"raweng.com\",\n    redemption_count: 1,\n    redemption_start: moment(new Date()).subtract(1, 'days'),\n    redemption_end: moment(new Date()).add(1, 'days'),\n    allowed_plans: [_planEntries[0]],\n    default_plan: null,\n    addon_credits: 5,\n    addon_flows: 2,\n    addon_triggers: 2,\n    addon_trial_days: 10,\n    braintree_discount_id: \"\",\n    promo_features_expiration: moment(new Date()).add(10, 'days')\n}, function(error, promoCodes) {\n    var promocode_uid = promoCodes[0].uid;\n    signUpUser({\n        email: \"test.user+1@raweng.com\",\n        plan: _planEntries[0].name\n    }, function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            addPromcodeToUser({\n                promo_code: promoCodes[0].promo_code,\n                status: httpStatus.OK,\n                user_uid: res.body.output.uid\n            }, function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    res.body.output.uid.should.not.equal(\"\");\n                    done();\n                }\n            });\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d68ffc27-df55-4438-aca6-af987122de0d",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as user is not allowed to redempt promocode.",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeAdd Should give error as user is not allowed to redempt promocode.",
                    "timedOut": false,
                    "duration": 276,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\naddPromcode({\n    count: 1,\n    promo_code: \"PROMO_CODE\",\n    domain: \"raweng.com\",\n    redemption_count: 1,\n    redemption_start: moment(new Date()).subtract(1, 'days'),\n    redemption_end: moment(new Date()).add(1, 'days'),\n    allowed_plans: [_planEntries[1]],\n    default_plan: null,\n    addon_credits: 5,\n    addon_flows: 2,\n    addon_triggers: 2,\n    addon_trial_days: 10,\n    braintree_discount_id: \"\",\n    promo_features_expiration: moment(new Date()).add(10, 'days')\n}, function(error, promoCodes) {\n    var promocode_uid = promoCodes[0].uid;\n    signUpUser({\n        email: \"test.user+1@raweng.com\",\n        plan: _planEntries[0].name\n    }, function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            addPromcodeToUser({\n                promo_code: promoCodes[0].promo_code,\n                user_uid: res.body.output.uid,\n                status: httpStatus.BAD_REQUEST\n            }, function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    (res.body.error.message).should.equal(messageList.PROMOCODE_NOT_ALLOWED_PLAN);\n                    done();\n                }\n            });\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bfbcdd57-476b-4d5a-860d-7edae8eba907",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error if promocode is already reverted.",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeAdd Should give error if promocode is already reverted.",
                    "timedOut": false,
                    "duration": 274,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\naddPromcode({\n    count: 1,\n    promo_code: \"PROMO_CODE\",\n    domain: \"raweng.com\",\n    redemption_count: 1,\n    redemption_start: moment(new Date()).subtract(1, 'days'),\n    redemption_end: moment(new Date()).add(1, 'days'),\n    allowed_plans: [],\n    default_plan: null,\n    addon_credits: 5,\n    addon_flows: 2,\n    addon_triggers: 2,\n    addon_trial_days: 10,\n    braintree_discount_id: \"\",\n    promo_features_expiration: moment(new Date()).add(10, 'days')\n}, function(error, promoCodes) {\n    signUpUser({\n        email: \"test.user+1@raweng.com\",\n        plan: _planEntries[0].name\n    }, function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var user_uid = res.body.output.uid;\n            addPromcodeToUser({\n                promo_code: promoCodes[0].promo_code,\n                user_uid: user_uid,\n                status: httpStatus.OK\n            }, function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    _models.UserPromocode.findOneAndUpdate({\n                        uid: res.body.output.uid\n                    }, {\n                        deleted_at: new Date()\n                    }, function(error, userPromo) {\n                        if (error) {\n                            done(error);\n                        } else {\n                            addPromcodeToUser({\n                                promo_code: promoCodes[0].promo_code,\n                                user_uid: user_uid,\n                                status: httpStatus.BAD_REQUEST\n                            }, function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    (res.body.error.message).should.equal(messageList.PROMOCODE_IS_ALREADY_ALLOCATED);\n                                    done();\n                                }\n                            });\n                        }\n                    })\n                }\n            });\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bb7631c9-61eb-4878-8374-a5f3f2bbd40d",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give promocode expire error.",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeAdd Should give promocode expire error.",
                    "timedOut": false,
                    "duration": 23,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\naddPromcode({\n    count: 1,\n    promo_code: \"PROMO_CODE\",\n    domain: \"raweng.com\",\n    redemption_count: 1,\n    redemption_start: moment(new Date()).subtract(2, 'days'),\n    redemption_end: moment(new Date()).subtract(1, 'days'),\n    allowed_plans: [],\n    default_plan: null,\n    addon_credits: 5,\n    addon_flows: 2,\n    addon_triggers: 2,\n    addon_trial_days: 10,\n    braintree_discount_id: \"\",\n    promo_features_expiration: moment(new Date()).add(10, 'days')\n}, function(error, promoCodes) {\n    addPromcodeToUser({\n        promo_code: promoCodes[0].promo_code,\n        status: httpStatus.BAD_REQUEST\n    }, function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            (res.body.error.message).should.equal(messageList.PROMOCODE_EXPIRED);\n            done();\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5043479c-e505-414f-a040-56614b73292a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give invalid promocode error for future promocode.",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeAdd Should give invalid promocode error for future promocode.",
                    "timedOut": false,
                    "duration": 18,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\naddPromcode({\n    count: 1,\n    promo_code: \"PROMO_CODE\",\n    domain: \"raweng.com\",\n    redemption_count: 1,\n    redemption_start: moment(new Date()).add(2, 'days'),\n    redemption_end: moment(new Date()).add(3, 'days'),\n    allowed_plans: [],\n    default_plan: null,\n    addon_credits: 5,\n    addon_flows: 2,\n    addon_triggers: 2,\n    addon_trial_days: 10,\n    braintree_discount_id: \"\",\n    promo_features_expiration: moment(new Date()).add(10, 'days')\n}, function(error, promoCodes) {\n    addPromcodeToUser({\n        promo_code: promoCodes[0].promo_code,\n        status: httpStatus.BAD_REQUEST\n    }, function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            (res.body.error.message).should.equal(messageList.PROMOCODE_INVALID);\n            done();\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5261a397-8e83-4a49-83c2-747755f3be2b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as promo code already redempt.",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeAdd Should give error as promo code already redempt.",
                    "timedOut": false,
                    "duration": 47,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\naddPromcode({\n    count: 1,\n    promo_code: \"PROMO_CODE\",\n    domain: \"raweng.com\",\n    redemption_count: 2,\n    redemption_start: moment(new Date()).subtract(1, 'days'),\n    redemption_end: moment(new Date()).add(1, 'days'),\n    allowed_plans: [],\n    default_plan: null,\n    addon_credits: 5,\n    addon_flows: 2,\n    addon_triggers: 2,\n    addon_trial_days: 10,\n    braintree_discount_id: \"\",\n    promo_features_expiration: moment(new Date()).add(10, 'days')\n}, function(error, promoCodes) {\n    addPromcodeToUser({\n        promo_code: promoCodes[0].promo_code\n    }, function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var userPromoCode = res.body.output;\n            if (userPromoCode.user_uid == uid && userPromoCode.uid != \"\") {\n                addPromcodeToUser({\n                    promo_code: promoCodes[0].promo_code,\n                    status: httpStatus.BAD_REQUEST\n                }, function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        (res.body.error.message).should.equal(messageList.PROMOCODE_IS_ALREADY_ALLOCATED);\n                        done();\n                    }\n                });\n            } else {\n                true.should.equal(false);\n                done();\n            }\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4c1687fd-230a-4419-a8fb-b1928f6925b5",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as invalid promocode.",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeAdd Should give error as invalid promocode.",
                    "timedOut": false,
                    "duration": 17,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\naddPromcode({\n    count: 1,\n    promo_code: \"PROMO_CODE\",\n    domain: \"raweng.com\",\n    redemption_count: 1,\n    redemption_start: moment(new Date()).subtract(1, 'days'),\n    redemption_end: moment(new Date()).add(1, 'days'),\n    allowed_plans: [],\n    default_plan: null,\n    addon_credits: 5,\n    addon_flows: 2,\n    addon_triggers: 2,\n    addon_trial_days: 10,\n    braintree_discount_id: \"\",\n    promo_features_expiration: moment(new Date()).add(10, 'days')\n}, function(error, promoCodes) {\n    addPromcodeToUser({\n        promo_code: \"FAKE_PROMO_CODE\",\n        status: httpStatus.BAD_REQUEST\n    }, function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            (res.body.error.message).should.equal(messageList.PROMOCODE_INVALID);\n            done();\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "61eee816-2bea-4a00-adff-1c11bfb7286f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as promocode invalid domain.",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeAdd Should give error as promocode invalid domain.",
                    "timedOut": false,
                    "duration": 252,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\naddPromcode({\n    count: 1,\n    promo_code: \"PROMO_CODE\",\n    domain: \"raweng.com\",\n    redemption_count: 1,\n    redemption_start: moment(new Date()).subtract(1, 'days'),\n    redemption_end: moment(new Date()).add(1, 'days'),\n    allowed_plans: [],\n    default_plan: null,\n    addon_credits: 5,\n    addon_flows: 2,\n    addon_triggers: 2,\n    addon_trial_days: 10,\n    braintree_discount_id: \"\",\n    promo_features_expiration: moment(new Date()).add(10, 'days')\n}, function(error, promoCodes) {\n    signUpUser({\n        email: \"test.user@built.io\"\n    }, function(err, res) {\n        addPromcodeToUser({\n            promo_code: promoCodes[0].promo_code,\n            status: httpStatus.BAD_REQUEST,\n            user_uid: res.body.output.uid\n        }, function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                (res.body.error.message).should.equal(messageList.PROMOCODE_DOMAIN_NOT_ALLOWED);\n                done();\n            }\n        });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b2d952d0-e43f-4721-a082-ec5cab7a6835",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "e1f349c3-1124-46e4-97c8-8a9626e897e5",
                  "31d2d31c-1f93-42ae-b81d-c9597cd2e55a",
                  "a5b4daca-cf3b-4c41-ae3d-6d749eda96a3",
                  "e4f935f7-fcfa-439a-86cd-71264ca6fc92",
                  "d68ffc27-df55-4438-aca6-af987122de0d",
                  "bfbcdd57-476b-4d5a-860d-7edae8eba907",
                  "bb7631c9-61eb-4878-8374-a5f3f2bbd40d",
                  "5043479c-e505-414f-a040-56614b73292a",
                  "5261a397-8e83-4a49-83c2-747755f3be2b",
                  "4c1687fd-230a-4419-a8fb-b1928f6925b5",
                  "61eee816-2bea-4a00-adff-1c11bfb7286f",
                  "b2d952d0-e43f-4721-a082-ec5cab7a6835"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 2208,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "753d657a-de45-45df-821c-3650f7b6a847",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\promoCode\\userPromocodeDelete.enterprise.js",
        "file": "\\controllers\\test\\promoCode\\userPromocodeDelete.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "9c615d9d-1108-41d5-a802-21aca720bfa4",
            "title": "PromoCode",
            "fullFile": "D:\\api\\controllers\\test\\promoCode\\userPromocodeDelete.enterprise.js",
            "file": "\\controllers\\test\\promoCode\\userPromocodeDelete.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "ba8d9272-79c5-40f1-b836-b261cc7825d8",
                "title": "PromoCode.userPromocodeDelete",
                "fullFile": "D:\\api\\controllers\\test\\promoCode\\userPromocodeDelete.enterprise.js",
                "file": "\\controllers\\test\\promoCode\\userPromocodeDelete.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeDelete \"before each\" hook",
                    "timedOut": false,
                    "duration": 263,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n    _models.Plan.remove({ $or: [{ name: new RegExp('^RANDOM_PLAN+', \"i\") }, { name: new RegExp('^utest_cases_Standard+', \"i\") }] }, function(error, plan) {\n        _models.Mail.remove({ $or: [{ to: new RegExp('^test.user+', \"i\") }, { to: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n            _models.Promocode.remove({}, function(error, promo) {\n                _models.UserPromocode.remove({}, function(error, userPromos) {\n                    signUpUser({}, function(err, res) {\n                        authToken = res.body.output.authtoken;\n                        token = res.body.output.activation_token;\n                        _id = res.body.output._id;\n                        uid = res.body.output.uid;\n                        savePlanEntries({\n                            count: 5\n                        }, function(error, planEntries) {\n                            _planEntries = planEntries;\n                            done();\n                        });\n                    });\n                });\n            });\n        });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2ec1b1d8-85ce-49bc-af15-3be10e7e8e9e",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeDelete \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "85e6b9c7-db75-405e-8b62-b0223a973ed7",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should delete user promocode.",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeDelete Should delete user promocode.",
                    "timedOut": false,
                    "duration": 46,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\naddPromcode({\n    count: 1,\n    promo_code: \"PROMO_CODE\",\n    domain: \"raweng.com\",\n    redemption_count: 1,\n    redemption_start: moment(new Date()).subtract(1, 'days'),\n    redemption_end: moment(new Date()).add(1, 'days'),\n    allowed_plans: [],\n    default_plan: null,\n    addon_credits: 5,\n    addon_flows: 2,\n    addon_triggers: 2,\n    addon_trial_days: 10,\n    braintree_discount_id: \"\",\n    promo_features_expiration: moment(new Date()).add(10, 'days')\n}, function(error, promoCodes) {\n    addPromcodeToUser({\n        promo_code: promoCodes[0].promo_code\n    }, function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var userPromoCode = res.body.output;\n            var user_promo_uid = userPromoCode.uid || \"\";\n            api.delete(apiURL)\n                .set(\"ui_admin_key\", config.UI_ADMIN_KEY)\n                .send({\n                    user_promo_uid: user_promo_uid\n                })\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        (res.body.output.message).should.equal(messageList.PROMOCODE_REVOKED_SUCCESSFULLY);\n                        done();\n                    }\n                });\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ec7d9800-9235-4c07-b64d-233e585ebaaf",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give promocode already revoked error.",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeDelete Should give promocode already revoked error.",
                    "timedOut": false,
                    "duration": 52,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\naddPromcode({\n    count: 1,\n    promo_code: \"PROMO_CODE\",\n    domain: \"raweng.com\",\n    redemption_count: 1,\n    redemption_start: moment(new Date()).subtract(1, 'days'),\n    redemption_end: moment(new Date()).add(1, 'days'),\n    allowed_plans: [],\n    default_plan: null,\n    addon_credits: 5,\n    addon_flows: 2,\n    addon_triggers: 2,\n    addon_trial_days: 10,\n    braintree_discount_id: \"\",\n    promo_features_expiration: moment(new Date()).add(10, 'days')\n}, function(error, promoCodes) {\n    addPromcodeToUser({\n        promo_code: promoCodes[0].promo_code\n    }, function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var userPromoCode = res.body.output;\n            var user_promo_uid = userPromoCode.uid || \"\";\n            _models.UserPromocode.findOneAndUpdate({\n                uid: user_promo_uid\n            }, {\n                deleted_at: new Date()\n            }, function(error, userPromoCode) {\n                if (error) {\n                    done(err);\n                } else {\n                    api.delete(apiURL)\n                        .set(\"ui_admin_key\", config.UI_ADMIN_KEY)\n                        .send({\n                            user_promo_uid: user_promo_uid\n                        })\n                        .expect(httpStatus.BAD_REQUEST)\n                        .end(function(err, res) {\n                            if (err) {\n                                done(err);\n                            } else {\n                                (res.body.error.message).should.equal(messageList.PROMOCODE_ALREADY_REVOKED);\n                                done();\n                            }\n                        });\n                }\n            });\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "60f45601-4c17-4417-aebc-ac642550f6bd",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "ec7d9800-9235-4c07-b64d-233e585ebaaf",
                  "60f45601-4c17-4417-aebc-ac642550f6bd"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 98,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "80d6a1bf-7465-4bbd-818c-eff72c14fa94",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\promoCode\\userPromocodeList.enterprise.js",
        "file": "\\controllers\\test\\promoCode\\userPromocodeList.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "67a90133-9f81-4b7d-823e-93d363902d7f",
            "title": "PromoCode",
            "fullFile": "D:\\api\\controllers\\test\\promoCode\\userPromocodeList.enterprise.js",
            "file": "\\controllers\\test\\promoCode\\userPromocodeList.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "6ff45c0d-1d07-4dda-bc3a-8b3a897a76d1",
                "title": "PromoCode.userPromocodeList",
                "fullFile": "D:\\api\\controllers\\test\\promoCode\\userPromocodeList.enterprise.js",
                "file": "\\controllers\\test\\promoCode\\userPromocodeList.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeList \"before all\" hook",
                    "timedOut": false,
                    "duration": 8614,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveRecords(function() {\n    savePlanEntries({\n        count: 5\n    }, function(error, planEntries) {\n        _planEntries = planEntries;\n        addPromcode({\n            count: 1,\n            promo_code: \"PROMO_CODE\",\n            domain: \"raweng.com\",\n            redemption_count: 30,\n            redemption_start: moment(new Date()).subtract(1, 'days'),\n            redemption_end: moment(new Date()).add(1, 'days'),\n            allowed_plans: [],\n            default_plan: null,\n            addon_credits: 5,\n            addon_flows: 2,\n            addon_triggers: 2,\n            addon_trial_days: 10,\n            braintree_discount_id: \"\",\n            promo_features_expiration: moment(new Date()).add(10, 'days')\n        }, function(error, promoCodes) {\n            addUsersWithPromocode({\n                count: 30,\n                promo_code: promoCodes[0].promo_code\n            }, function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    done();\n                }\n            });\n        });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e9ee43d7-ddfc-4930-86ee-110c3ec10a0d",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeList \"after all\" hook",
                    "timedOut": false,
                    "duration": 10,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\nremoveRecords(function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "216c3e1c-26de-468c-bcc8-20ba69b543bf",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get list promocode applied users.",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeList Should get list promocode applied users.",
                    "timedOut": false,
                    "duration": 46,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set(\"ui_admin_key\", config.UI_ADMIN_KEY)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output.objects).to.be.a('array');\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "73dffa9f-7288-4b12-829b-38c3e032f10e",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of promocode applied users by considering skip.",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeList Should get list of promocode applied users by considering skip.",
                    "timedOut": false,
                    "duration": 39,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?skip=5\";\napi.get(filterURL)\n    .set(\"ui_admin_key\", config.UI_ADMIN_KEY)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            (Array.isArray(res.body.output.objects) &&\n                res.body.output.objects.length == 25 &&\n                res.body.output.count == 30).should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2b480fea-1441-466c-b64e-62c821dd8500",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of promocode applied users by considering limit.",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeList Should get list of promocode applied users by considering limit.",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?limit=5\";\napi.get(filterURL)\n    .set(\"ui_admin_key\", config.UI_ADMIN_KEY)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            (Array.isArray(res.body.output.objects) &&\n                res.body.output.objects.length == 5 &&\n                res.body.output.count == 30).should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "35a34fca-dc36-43d8-95a6-1a9b3cdaf735",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of promocode by applying email filter.",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeList Should get list of promocode by applying email filter.",
                    "timedOut": false,
                    "duration": 26,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?limit=5&email=test.user+1\";\napi.get(filterURL)\n    .set(\"ui_admin_key\", config.UI_ADMIN_KEY)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (Array.isArray(res.body.output.objects) &&\n                res.body.output.objects.length == 5 &&\n                res.body.output.count == 11) {\n                isValid = true;\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid && item.user.email.indexOf(\"test.user+1\") == 0;\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7bab87ac-a193-42ea-b049-8dd9ea48141f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of promocode by applying uid filter.",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeList Should get list of promocode by applying uid filter.",
                    "timedOut": false,
                    "duration": 22,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?limit=5&uid=\" + user_uid;\napi.get(filterURL)\n    .set(\"ui_admin_key\", config.UI_ADMIN_KEY)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (Array.isArray(res.body.output.objects) &&\n                res.body.output.objects.length == 1 &&\n                res.body.output.count == 1) {\n                isValid = true;\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid && item.user.uid == user_uid;\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f33a2104-cd2e-439e-8a3f-c70be8fd9775",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give first preference to email filter.",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeList Should give first preference to email filter.",
                    "timedOut": false,
                    "duration": 29,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?limit=5&uid=\" + user_uid + \"&email=test.user+1\";\napi.get(filterURL)\n    .set(\"ui_admin_key\", config.UI_ADMIN_KEY)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (Array.isArray(res.body.output.objects) &&\n                res.body.output.objects.length == 5 &&\n                res.body.output.count == 11) {\n                isValid = true;\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid && item.user.email.indexOf(\"test.user+1\") == 0;\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c0466d56-be96-4f19-8720-b8e33672cc18",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of promocode applied users by considering skip/limit.",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeList Should get list of promocode applied users by considering skip/limit.",
                    "timedOut": false,
                    "duration": 24,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?skip=5&limit=10\";\napi.get(filterURL)\n    .set(\"ui_admin_key\", config.UI_ADMIN_KEY)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            (Array.isArray(res.body.output.objects) &&\n                res.body.output.objects.length == 10 &&\n                res.body.output.count == 30).should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "40f5f513-7220-4ec1-9dfd-88af14ded80a",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "73dffa9f-7288-4b12-829b-38c3e032f10e",
                  "2b480fea-1441-466c-b64e-62c821dd8500",
                  "35a34fca-dc36-43d8-95a6-1a9b3cdaf735",
                  "7bab87ac-a193-42ea-b049-8dd9ea48141f",
                  "f33a2104-cd2e-439e-8a3f-c70be8fd9775",
                  "c0466d56-be96-4f19-8720-b8e33672cc18",
                  "40f5f513-7220-4ec1-9dfd-88af14ded80a"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 199,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "bc06bd66-1719-4eb8-bb4c-3f10138de414",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\promoCode\\userPromocodeRedempt.enterprise.js",
        "file": "\\controllers\\test\\promoCode\\userPromocodeRedempt.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "da10d6ce-b725-46e4-997c-405a67948710",
            "title": "PromoCode",
            "fullFile": "D:\\api\\controllers\\test\\promoCode\\userPromocodeRedempt.enterprise.js",
            "file": "\\controllers\\test\\promoCode\\userPromocodeRedempt.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "d01324da-1c42-49cc-8c22-f70daea82154",
                "title": "PromoCode.userPromocodeRedempt",
                "fullFile": "D:\\api\\controllers\\test\\promoCode\\userPromocodeRedempt.enterprise.js",
                "file": "\\controllers\\test\\promoCode\\userPromocodeRedempt.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeRedempt \"before each\" hook",
                    "timedOut": false,
                    "duration": 291,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n    _models.Plan.remove({ $or: [{ name: new RegExp('^RANDOM_PLAN+', \"i\") }, { name: new RegExp('^utest_cases_Standard+', \"i\") }] }, function(error, plan) {\n        _models.Mail.remove({ $or: [{ to: new RegExp('^test.user+', \"i\") }, { to: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n            _models.Promocode.remove({}, function(error, promo) {\n                _models.UserPromocode.remove({}, function(error, userPromos) {\n                    signUpUser({}, function(err, res) {\n                        authToken = res.body.output.authtoken;\n                        token = res.body.output.activation_token;\n                        _id = res.body.output._id;\n                        uid = res.body.output.uid;\n                        savePlanEntries({\n                            count: 5\n                        }, function(error, planEntries) {\n                            _planEntries = planEntries;\n                            done();\n                        });\n                    });\n                });\n            });\n        });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a845982b-2610-4f78-b3a2-5be83665a935",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeRedempt \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4a32b654-b7f5-454e-9b18-bd406e54561a",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should add promocode to user.",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeRedempt Should add promocode to user.",
                    "timedOut": false,
                    "duration": 114,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\naddPromcode({\n    count: 1,\n    promo_code: \"PROMO_CODE\",\n    domain: \"raweng.com\",\n    redemption_count: 1,\n    redemption_start: moment(new Date()).subtract(1, 'days'),\n    redemption_end: moment(new Date()).add(1, 'days'),\n    allowed_plans: [],\n    default_plan: null,\n    addon_credits: 5,\n    addon_flows: 2,\n    addon_triggers: 2,\n    addon_trial_days: 10,\n    braintree_discount_id: \"\",\n    promo_features_expiration: moment(new Date()).add(10, 'days')\n}, function(error, promoCodes) {\n    redemptPromcodeToUser({\n        promo_code: promoCodes[0].promo_code\n    }, function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var userPromoCode = res.body.output;\n            if (userPromoCode.user_uid == uid &&\n                userPromoCode.uid != \"\") {\n                api.get(\"/enterprise/v1/user\")\n                    .set(\"authtoken\", authToken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            res.body.output.subscription.days.should.equal(40);\n                            done();\n                        }\n                    });\n            } else {\n                true.should.equal(false);\n                done();\n            }\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f7fc75d7-a975-4fb1-9ef6-54a54fa946f9",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should properly add promocode fatures to standard plan.",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeRedempt Should properly add promocode fatures to standard plan.",
                    "timedOut": false,
                    "duration": 362,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nsignUpUser({\n    \"email\": \"test.user+1@raweng.com\",\n    \"plan\": \"Standard Plan (Annual)\"\n}, function(err, res) {\n    var userFeatures = {};\n    userFeatures.flow_count = res.body.output.user_plan.flow.count;\n    userFeatures.flow_active = res.body.output.user_plan.flow.active;\n    userFeatures.trigger_count = res.body.output.user_plan.trigger.count;\n    userFeatures.days = (res.body.output.user_plan.reimburse || {}).period || 0;\n    userFeatures.credits = (res.body.output.user_plan.reimburse || {}).credits || 0;\n    authToken = res.body.output.authtoken || \"\";\n    uid = res.body.output.uid || \"\";\n    addPromcode({\n        count: 1,\n        promo_code: \"PROMO_CODE\",\n        domain: \"raweng.com\",\n        redemption_count: 1,\n        redemption_start: moment(new Date()).subtract(1, 'days'),\n        redemption_end: moment(new Date()).add(1, 'days'),\n        allowed_plans: [],\n        default_plan: null,\n        addon_credits: 5,\n        addon_flows: 2,\n        addon_triggers: 2,\n        addon_trial_days: 10,\n        braintree_discount_id: \"\",\n        promo_features_expiration: moment(new Date()).add(10, 'days')\n    }, function(error, promoCodes) {\n        redemptPromcodeToUser({\n            promo_code: promoCodes[0].promo_code\n        }, function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                var userPromoCode = res.body.output;\n                if (userPromoCode.user_uid == uid &&\n                    userPromoCode.uid != \"\") {\n                    api.get(\"/enterprise/v1/user\")\n                        .set(\"authtoken\", authToken)\n                        .expect(httpStatus.OK)\n                        .end(function(err, res) {\n                            var userNewFeatures = {};\n                            userNewFeatures.flow_count = res.body.output.user_plan.flow.count;\n                            userNewFeatures.flow_active = res.body.output.user_plan.flow.active;\n                            userNewFeatures.trigger_count = res.body.output.user_plan.trigger.count;\n                            userNewFeatures.days = (res.body.output.user_plan.reimburse || {}).period || 0;\n                            userNewFeatures.credits = (res.body.output.user_plan.reimburse || {}).credits || 0;\n                            (userFeatures.flow_count == userNewFeatures.flow_count &&\n                                userFeatures.flow_active == userNewFeatures.flow_active &&\n                                (userFeatures.trigger_count + 2) == userNewFeatures.trigger_count &&\n                                userFeatures.days == userNewFeatures.days &&\n                                (userFeatures.credits + 5) == userNewFeatures.credits).should.equal(true);\n                            done();\n                        });\n                } else {\n                    true.should.equal(false);\n                    done();\n                }\n            }\n        });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "404e6c60-6735-49d6-b196-711cca9e0181",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should re-again redempt another promocode.",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeRedempt Should re-again redempt another promocode.",
                    "timedOut": false,
                    "duration": 123,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\naddPromcode({\n    count: 2,\n    promo_code: \"PROMO_CODE\",\n    domain: \"raweng.com\",\n    redemption_count: 1,\n    redemption_start: moment(new Date()).subtract(1, 'days'),\n    redemption_end: moment(new Date()).add(1, 'days'),\n    allowed_plans: [],\n    default_plan: null,\n    addon_credits: 5,\n    addon_flows: 2,\n    addon_triggers: 2,\n    addon_trial_days: 10,\n    braintree_discount_id: \"\",\n    promo_features_expiration: moment(new Date()).add(10, 'days')\n}, function(error, promoCodes) {\n    redemptPromcodeToUser({\n        promo_code: promoCodes[0].promo_code\n    }, function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var userPromoCode = res.body.output;\n            if (userPromoCode.user_uid == uid && userPromoCode.uid != \"\") {\n                var promocode_uid = userPromoCode.promocode_uid[0];\n                redemptPromcodeToUser({\n                    promo_code: promoCodes[1].promo_code\n                }, function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        var userPromoCode = res.body.output;\n                        (userPromoCode.user_uid == uid &&\n                            userPromoCode.uid != \"\" &&\n                            userPromoCode.promocode_uid[0] != promocode_uid).should.equal(true);\n                        done();\n                    }\n                });\n            } else {\n                true.should.equal(false);\n                done();\n            }\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8412cc78-47ee-47b0-8ec4-d739b2951bc0",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should allocate promocode to only two users.",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeRedempt Should allocate promocode to only two users.",
                    "timedOut": false,
                    "duration": 645,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\naddPromcode({\n    count: 1,\n    promo_code: \"PROMO_CODE\",\n    domain: \"raweng.com\",\n    redemption_count: 2,\n    redemption_start: moment(new Date()).subtract(1, 'days'),\n    redemption_end: moment(new Date()).add(1, 'days'),\n    allowed_plans: [],\n    default_plan: null,\n    addon_credits: 5,\n    addon_flows: 2,\n    addon_triggers: 2,\n    addon_trial_days: 10,\n    braintree_discount_id: \"\",\n    promo_features_expiration: moment(new Date()).add(10, 'days')\n}, function(error, promoCodes) {\n    redemptPromcodeToUser({\n        promo_code: promoCodes[0].promo_code\n    }, function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var userPromoCode = res.body.output;\n            if (userPromoCode.user_uid == uid && userPromoCode.uid != \"\") {\n                signUpUser({\n                    email: \"test.user+1@raweng.com\"\n                }, function(err, res) {\n                    var userUID1 = res.body.output.uid;\n                    var authtoken1 = res.body.output.authtoken;\n                    redemptPromcodeToUser({\n                        promo_code: promoCodes[0].promo_code,\n                        authtoken: authtoken1\n                    }, function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            var userPromoCode = res.body.output;\n                            if (userPromoCode.user_uid == userUID1 && userPromoCode.uid != \"\") {\n                                signUpUser({\n                                    email: \"test.user+2@raweng.com\"\n                                }, function(err, res) {\n                                    var userUID2 = res.body.output.uid;\n                                    var authtoken2 = res.body.output.authtoken;\n                                    redemptPromcodeToUser({\n                                        promo_code: promoCodes[0].promo_code,\n                                        status: httpStatus.BAD_REQUEST,\n                                        authtoken: authtoken2\n                                    }, function(err, res) {\n                                        if (err) {\n                                            done(err);\n                                        } else {\n                                            (res.body.error.message).should.equal(messageList.PROMOCODE_OVER_REDEMPT);\n                                            done();\n                                        }\n                                    });\n                                });\n                            } else {\n                                true.should.equal(false);\n                                done();\n                            }\n                        }\n                    });\n                });\n            } else {\n                true.should.equal(false);\n                done();\n            }\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "36cb624e-8e76-4b56-92c5-a444534dd233",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should allocate promocode if user plan is included in allowed_plans.",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeRedempt Should allocate promocode if user plan is included in allowed_plans.",
                    "timedOut": false,
                    "duration": 286,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\naddPromcode({\n    count: 1,\n    promo_code: \"PROMO_CODE\",\n    domain: \"raweng.com\",\n    redemption_count: 1,\n    redemption_start: moment(new Date()).subtract(1, 'days'),\n    redemption_end: moment(new Date()).add(1, 'days'),\n    allowed_plans: [_planEntries[0]],\n    default_plan: null,\n    addon_credits: 5,\n    addon_flows: 2,\n    addon_triggers: 2,\n    addon_trial_days: 10,\n    braintree_discount_id: \"\",\n    promo_features_expiration: moment(new Date()).add(10, 'days')\n}, function(error, promoCodes) {\n    var promocode_uid = promoCodes[0].uid;\n    signUpUser({\n        email: \"test.user+1@raweng.com\",\n        plan: _planEntries[0].name\n    }, function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var authtoken1 = res.body.output.authtoken;\n            redemptPromcodeToUser({\n                promo_code: promoCodes[0].promo_code,\n                status: httpStatus.OK,\n                user_uid: res.body.output.uid,\n                authtoken: authtoken1\n            }, function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    res.body.output.uid.should.not.equal(\"\");\n                    done();\n                }\n            });\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ce7d240d-6a22-45fb-8bbe-a59caf47dfa9",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as user is not allowed to redempt promocode.",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeRedempt Should give error as user is not allowed to redempt promocode.",
                    "timedOut": false,
                    "duration": 333,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\naddPromcode({\n    count: 1,\n    promo_code: \"PROMO_CODE\",\n    domain: \"raweng.com\",\n    redemption_count: 1,\n    redemption_start: moment(new Date()).subtract(1, 'days'),\n    redemption_end: moment(new Date()).add(1, 'days'),\n    allowed_plans: [_planEntries[1]],\n    default_plan: null,\n    addon_credits: 5,\n    addon_flows: 2,\n    addon_triggers: 2,\n    addon_trial_days: 10,\n    braintree_discount_id: \"\",\n    promo_features_expiration: moment(new Date()).add(10, 'days')\n}, function(error, promoCodes) {\n    var promocode_uid = promoCodes[0].uid;\n    signUpUser({\n        email: \"test.user+1@raweng.com\",\n        plan: _planEntries[0].name\n    }, function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            redemptPromcodeToUser({\n                promo_code: promoCodes[0].promo_code,\n                user_uid: res.body.output.uid,\n                status: httpStatus.BAD_REQUEST\n            }, function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    (res.body.error.message).should.equal(messageList.PROMOCODE_NOT_ALLOWED_PLAN);\n                    done();\n                }\n            });\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2b8e9a48-da31-4ac8-8137-2afe89155046",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give promocode expire error.",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeRedempt Should give promocode expire error.",
                    "timedOut": false,
                    "duration": 48,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\naddPromcode({\n    count: 1,\n    promo_code: \"PROMO_CODE\",\n    domain: \"raweng.com\",\n    redemption_count: 1,\n    redemption_start: moment(new Date()).subtract(2, 'days'),\n    redemption_end: moment(new Date()).subtract(1, 'days'),\n    allowed_plans: [],\n    default_plan: null,\n    addon_credits: 5,\n    addon_flows: 2,\n    addon_triggers: 2,\n    addon_trial_days: 10,\n    braintree_discount_id: \"\",\n    promo_features_expiration: moment(new Date()).add(10, 'days')\n}, function(error, promoCodes) {\n    redemptPromcodeToUser({\n        promo_code: promoCodes[0].promo_code,\n        status: httpStatus.BAD_REQUEST\n    }, function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            (res.body.error.message).should.equal(messageList.PROMOCODE_EXPIRED);\n            done();\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c356315c-d286-45d4-8a14-e96ee30e75a5",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give invalid promocode error for future promocode.",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeRedempt Should give invalid promocode error for future promocode.",
                    "timedOut": false,
                    "duration": 64,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\naddPromcode({\n    count: 1,\n    promo_code: \"PROMO_CODE\",\n    domain: \"raweng.com\",\n    redemption_count: 1,\n    redemption_start: moment(new Date()).add(2, 'days'),\n    redemption_end: moment(new Date()).add(3, 'days'),\n    allowed_plans: [],\n    default_plan: null,\n    addon_credits: 5,\n    addon_flows: 2,\n    addon_triggers: 2,\n    addon_trial_days: 10,\n    braintree_discount_id: \"\",\n    promo_features_expiration: moment(new Date()).add(10, 'days')\n}, function(error, promoCodes) {\n    redemptPromcodeToUser({\n        promo_code: promoCodes[0].promo_code,\n        status: httpStatus.BAD_REQUEST\n    }, function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            (res.body.error.message).should.equal(messageList.PROMOCODE_INVALID);\n            done();\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e0f18e79-f69e-40a6-a98f-2b0cf0431d64",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as promo code already redempt.",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeRedempt Should give error as promo code already redempt.",
                    "timedOut": false,
                    "duration": 159,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\naddPromcode({\n    count: 1,\n    promo_code: \"PROMO_CODE\",\n    domain: \"raweng.com\",\n    redemption_count: 2,\n    redemption_start: moment(new Date()).subtract(1, 'days'),\n    redemption_end: moment(new Date()).add(1, 'days'),\n    allowed_plans: [],\n    default_plan: null,\n    addon_credits: 5,\n    addon_flows: 2,\n    addon_triggers: 2,\n    addon_trial_days: 10,\n    braintree_discount_id: \"\",\n    promo_features_expiration: moment(new Date()).add(10, 'days')\n}, function(error, promoCodes) {\n    redemptPromcodeToUser({\n        promo_code: promoCodes[0].promo_code\n    }, function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var userPromoCode = res.body.output;\n            if (userPromoCode.user_uid == uid && userPromoCode.uid != \"\") {\n                redemptPromcodeToUser({\n                    promo_code: promoCodes[0].promo_code,\n                    status: httpStatus.BAD_REQUEST\n                }, function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        (res.body.error.message).should.equal(messageList.PROMOCODE_IS_ALREADY_ALLOCATED);\n                        done();\n                    }\n                });\n            } else {\n                true.should.equal(false);\n                done();\n            }\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fd6ced8a-c17d-42a8-a47f-7e469b4c51c5",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as invalid promocode.",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeRedempt Should give error as invalid promocode.",
                    "timedOut": false,
                    "duration": 51,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\naddPromcode({\n    count: 1,\n    promo_code: \"PROMO_CODE\",\n    domain: \"raweng.com\",\n    redemption_count: 1,\n    redemption_start: moment(new Date()).subtract(1, 'days'),\n    redemption_end: moment(new Date()).add(1, 'days'),\n    allowed_plans: [],\n    default_plan: null,\n    addon_credits: 5,\n    addon_flows: 2,\n    addon_triggers: 2,\n    addon_trial_days: 10,\n    braintree_discount_id: \"\",\n    promo_features_expiration: moment(new Date()).add(10, 'days')\n}, function(error, promoCodes) {\n    redemptPromcodeToUser({\n        promo_code: \"FAKE_PROMO_CODE\",\n        status: httpStatus.BAD_REQUEST\n    }, function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            (res.body.error.message).should.equal(messageList.PROMOCODE_INVALID);\n            done();\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b4018625-e3d3-4393-b474-09c111feafa8",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as promocode invalid domain.",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeRedempt Should give error as promocode invalid domain.",
                    "timedOut": false,
                    "duration": 318,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\naddPromcode({\n    count: 1,\n    promo_code: \"PROMO_CODE\",\n    domain: \"raweng.com\",\n    redemption_count: 1,\n    redemption_start: moment(new Date()).subtract(1, 'days'),\n    redemption_end: moment(new Date()).add(1, 'days'),\n    allowed_plans: [],\n    default_plan: null,\n    addon_credits: 5,\n    addon_flows: 2,\n    addon_triggers: 2,\n    addon_trial_days: 10,\n    braintree_discount_id: \"\",\n    promo_features_expiration: moment(new Date()).add(10, 'days')\n}, function(error, promoCodes) {\n    signUpUser({\n        email: \"test.user@built.io\"\n    }, function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var authtoken1 = res.body.output.authtoken;\n            redemptPromcodeToUser({\n                promo_code: promoCodes[0].promo_code,\n                status: httpStatus.BAD_REQUEST,\n                user_uid: res.body.output.uid,\n                authtoken: authtoken1\n            }, function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    (res.body.error.message).should.equal(messageList.PROMOCODE_DOMAIN_NOT_ALLOWED);\n                    done();\n                }\n            });\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e12af754-1ade-4f29-ac48-7127f0b617e9",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "f7fc75d7-a975-4fb1-9ef6-54a54fa946f9",
                  "404e6c60-6735-49d6-b196-711cca9e0181",
                  "8412cc78-47ee-47b0-8ec4-d739b2951bc0",
                  "36cb624e-8e76-4b56-92c5-a444534dd233",
                  "ce7d240d-6a22-45fb-8bbe-a59caf47dfa9",
                  "2b8e9a48-da31-4ac8-8137-2afe89155046",
                  "c356315c-d286-45d4-8a14-e96ee30e75a5",
                  "e0f18e79-f69e-40a6-a98f-2b0cf0431d64",
                  "fd6ced8a-c17d-42a8-a47f-7e469b4c51c5",
                  "b4018625-e3d3-4393-b474-09c111feafa8",
                  "e12af754-1ade-4f29-ac48-7127f0b617e9"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 2503,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "68ed60e7-fb0f-4aaa-bb4b-713f2a8107d1",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\templates\\getTemplate.enterprise.js",
        "file": "\\controllers\\test\\templates\\getTemplate.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "0a06d719-b9ad-40d7-96ff-886f005b4283",
            "title": "Templates.getTemplate",
            "fullFile": "D:\\api\\controllers\\test\\templates\\getTemplate.enterprise.js",
            "file": "\\controllers\\test\\templates\\getTemplate.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Templates.getTemplate \"before all\" hook",
                "timedOut": false,
                "duration": 268,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(user, cbk) {\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            });\n    },\n    function(result, cbk) {\n        dummyUser = result.body.output;\n        var templateBody = testData.templateBody;\n        templateBody.author = dummyUser._id\n        _models.Template.create(templateBody, function(err, res) {\n            cbk(err, res);\n        })\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        userTemplate = res.toJSON();\n        done();\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "e6db9515-28d9-408e-ad7a-2c4d0e28d4d6",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Templates.getTemplate \"after all\" hook",
                "timedOut": false,
                "duration": 11,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.parallel([\n    function(cb) {\n        _models.User.remove({ uid: dummyUser.uid }, function(err) {\n            cb(err)\n        });\n    },\n    function(cb) {\n        _models.Template.remove({ uid: userTemplate.uid }, function(err) {\n            cb(err)\n        });\n    },\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n});",
                "err": {},
                "isRoot": false,
                "uuid": "5e6bea3c-9b83-45b0-93df-2d82165f6f43",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Templates.getTemplate Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + userTemplate.uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "95c24a18-4d13-43fa-add3-7976b0c3e280",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if template not found.",
                "fullTitle": "Enterprise Templates.getTemplate Should get error, if template not found.",
                "timedOut": false,
                "duration": 83,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + 'dummyTemplate')\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.TEMPLATE_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "c511e028-753f-446a-86a5-45fd1158a011",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get template.",
                "fullTitle": "Enterprise Templates.getTemplate Should get template.",
                "timedOut": false,
                "duration": 79,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + userTemplate.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output.name).to.be.equal(testData.templateBody.name);\n            expect(res.body.output).not.to.have.all.keys(['_id', '__v']);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "350acb05-e6c0-4e99-b246-d94387820efd",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "95c24a18-4d13-43fa-add3-7976b0c3e280",
              "c511e028-753f-446a-86a5-45fd1158a011",
              "350acb05-e6c0-4e99-b246-d94387820efd"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 174,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "7771f5b0-9eff-434e-af25-8b7b6befde30",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\templates\\importTemplate.enterprise.js",
        "file": "\\controllers\\test\\templates\\importTemplate.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "6f854739-37d2-4860-af33-604c11d8bc0a",
            "title": "Templates.importTemplate",
            "fullFile": "D:\\api\\controllers\\test\\templates\\importTemplate.enterprise.js",
            "file": "\\controllers\\test\\templates\\importTemplate.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Templates.importTemplate \"before all\" hook",
                "timedOut": false,
                "duration": 267,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data\n        async.waterfall([\n            function(cbk) {\n                dummyUser = orgData.owner;\n                dummyUser.authtoken = dummyUser.authtoken\n                var templateBody = _.cloneDeep(testData.templateBody);\n                templateBody.author = dummyUser._id\n                _models.Template.create(templateBody, function(err, res) {\n                    cbk(err, res);\n                })\n            },\n            function(result, cbk) {\n                userTemplate = result.toJSON();\n                var templateBodyWithFlowData = _.cloneDeep(testData.templateBodyWithFlowData);\n                var encrypt = encryption.encryptMultipleSync([templateBodyWithFlowData.environment, templateBodyWithFlowData.activities], encryption.getKeySync())\n                templateBodyWithFlowData.author = dummyUser._id\n                templateBodyWithFlowData.environment = encrypt[0]\n                templateBodyWithFlowData.activities = encrypt[1]\n                _models.Template.create(templateBodyWithFlowData, function(err, res) {\n                    cbk(err, res);\n                })\n            }\n        ], function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                userTemplateWithFlowData = res.toJSON();\n                tempWithFlowData.data.template_uid = userTemplateWithFlowData.uid;\n                done();\n            }\n        })\n    })\n})",
                "err": {},
                "isRoot": false,
                "uuid": "450893d9-f2dd-4b13-b880-3591292f347a",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Templates.importTemplate \"after all\" hook",
                "timedOut": false,
                "duration": 14,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.parallel([\n    function(cb) {\n        _models.User.remove({ uid: dummyUser.uid }, function(err) {\n            cb(err)\n        });\n    },\n    function(cb) {\n        _models.Template.remove({ uid: { $in: [userTemplate.uid, userTemplateWithFlowData.uid] } }, function(err) {\n            cb(err)\n        });\n    },\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n});",
                "err": {},
                "isRoot": false,
                "uuid": "c3b69b21-e5d0-44b9-af4e-c192fa3cc6da",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Templates.importTemplate Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .send(data)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "32db99b5-a8a4-412a-8eed-721e37a2c2c3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should import template with flow_data, if template data is valid.",
                "fullTitle": "Enterprise Templates.importTemplate Should import template with flow_data, if template data is valid.",
                "timedOut": false,
                "duration": 126,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(tempWithFlowData)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var flow = res.body.output\n            expect(flow).to.be.any.keys(['uid']);\n            expect(flow.flow_version).to.be.equal(1);\n            done();\n            //_models.ConfigSchema.find({ type: 'param', project_uid: flow.project_uid }, function(err, result) {\n            //    if (err) {\n            //        done(err)\n            //    } else {\n            //        expect(_.first(result).uid).equal(_.first(tempWithFlowData.data.project_params).uid)\n            //        done();\n            //    }\n            //})\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "c1c94b39-68d0-40ce-85dc-a041ca7446af",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should import template in org with flow_data, if template data is valid.",
                "fullTitle": "Enterprise Templates.importTemplate Should import template in org with flow_data, if template data is valid.",
                "timedOut": false,
                "duration": 335,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set({ 'authtoken': dummyUser.authtoken, org_uid: orgData.organization.uid })\n    .send(tempWithFlowData)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output).to.be.any.keys(['uid']);\n            expect(res.body.output.org_uid).to.be.equal(orgData.organization.uid);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "110c1223-a485-48fa-8c1f-fe06c3e9e9d2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should import template without flow_data, if template data is valid.",
                "fullTitle": "Enterprise Templates.importTemplate Should import template without flow_data, if template data is valid.",
                "timedOut": false,
                "duration": 93,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post('/enterprise/v1/templates/import')\n    .set('authtoken', dummyUser.authtoken)\n    .send({ uid: userTemplate.uid })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output).to.be.any.keys(['uid']);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "8d1dbb46-3950-45d8-86c2-ad6c9f176037",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if template not found.",
                "fullTitle": "Enterprise Templates.importTemplate Should get error, if template not found.",
                "timedOut": false,
                "duration": 63,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ntempWithFlowData.data.template_uid = 'dummyTemplate'\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(tempWithFlowData)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.TEMPLATE_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "d0b71813-a19b-4206-877b-8354061ac29b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "32db99b5-a8a4-412a-8eed-721e37a2c2c3",
              "c1c94b39-68d0-40ce-85dc-a041ca7446af",
              "110c1223-a485-48fa-8c1f-fe06c3e9e9d2",
              "8d1dbb46-3950-45d8-86c2-ad6c9f176037",
              "d0b71813-a19b-4206-877b-8354061ac29b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 626,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "5b96a34e-c850-40e1-83c5-360c4cd46f3c",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\templates\\listTagsOfTemplates.enterprise.js",
        "file": "\\controllers\\test\\templates\\listTagsOfTemplates.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "e5bc0b16-6bd4-42a9-b642-8d233caca8b8",
            "title": "Template.ListTagsOfTemplates",
            "fullFile": "D:\\api\\controllers\\test\\templates\\listTagsOfTemplates.enterprise.js",
            "file": "\\controllers\\test\\templates\\listTagsOfTemplates.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Template.ListTagsOfTemplates \"before all\" hook",
                "timedOut": false,
                "duration": 312,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\n_models.User.remove({ email: testData.testRegistrationBody.email }, function(error, user) {\n    api.post(\"/enterprise/v1/signup\")\n        .send(testData.testRegistrationBody)\n        .expect(httpStatus.CREATED)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                dummyUser = res.body.output;\n                done();\n            }\n        });\n});",
                "err": {},
                "isRoot": false,
                "uuid": "5eb3a52e-99bf-4a6c-af45-045b232f6459",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should get list of templates by Tags.",
                "fullTitle": "Enterprise Template.ListTagsOfTemplates Should get list of templates by Tags.",
                "timedOut": false,
                "duration": 35,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.should.be.instanceOf(Array);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "df339789-2afe-4c7c-bc81-a5b34bb41e5c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "df339789-2afe-4c7c-bc81-a5b34bb41e5c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 35,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "bb2cce55-fb7f-48c8-ac68-38076fef0a1d",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\templates\\listTemplateIcons.enterprise.js",
        "file": "\\controllers\\test\\templates\\listTemplateIcons.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "c24e91bc-c868-406b-bb46-61a647c03169",
            "title": "Templates.listTemplatesIcon",
            "fullFile": "D:\\api\\controllers\\test\\templates\\listTemplateIcons.enterprise.js",
            "file": "\\controllers\\test\\templates\\listTemplateIcons.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Templates.listTemplatesIcon \"before all\" hook",
                "timedOut": false,
                "duration": 294,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(user, cbk) {\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            });\n    }\n], function(err, result) {\n    if (err) {\n        done(err);\n    } else {\n        dummyUser = result.body.output;\n        done();\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "0549f3c0-b467-490f-8013-45db13598077",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Templates.listTemplatesIcon \"after all\" hook",
                "timedOut": false,
                "duration": 2,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.parallel([\n    function(cb) {\n        _models.User.remove({ uid: dummyUser.uid }, function(err) {\n            cb(err)\n        });\n    }\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n});",
                "err": {},
                "isRoot": false,
                "uuid": "5b6db635-9c67-4a80-8708-588baf0cfa3d",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Templates.listTemplatesIcon Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "ff6d4d93-ecc6-40e4-a56d-cd5290ff94eb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of icons of templates.",
                "fullTitle": "Enterprise Templates.listTemplatesIcon Should get list of icons of templates.",
                "timedOut": false,
                "duration": 70,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.should.be.instanceOf(Array);\n            expect(_.first(res.body.output)).to.have.all.keys(['category', 'category_icons']);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "a21b8072-0273-4704-970f-ff20322304f5",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ff6d4d93-ecc6-40e4-a56d-cd5290ff94eb",
              "a21b8072-0273-4704-970f-ff20322304f5"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 86,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "91127feb-ba33-4a66-bff3-53bd893416eb",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\templates\\listTemplates.enterprise.js",
        "file": "\\controllers\\test\\templates\\listTemplates.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "e49fdec6-6923-46e8-85a1-04186e517d30",
            "title": "Templates.list",
            "fullFile": "D:\\api\\controllers\\test\\templates\\listTemplates.enterprise.js",
            "file": "\\controllers\\test\\templates\\listTemplates.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Templates.list \"before all\" hook",
                "timedOut": false,
                "duration": 303,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(user, cbk) {\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            });\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        dummyUser = res.body.output;\n        done();\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "f7757119-b17b-4b11-805c-4cc1a93d143a",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Templates.list \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.parallel([\n    function(cb) {\n        _models.User.remove({ uid: dummyUser.uid }, function(err) {\n            cb(err)\n        });\n    }\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n});",
                "err": {},
                "isRoot": false,
                "uuid": "2932c1f4-822d-44fe-a8db-a64492c332d6",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should get list template.",
                "fullTitle": "Enterprise Templates.list Should get list template.",
                "timedOut": false,
                "duration": 56,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.should.be.instanceOf(Array);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "ea51ddcb-018a-46ac-854f-dc2299b562cd",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ea51ddcb-018a-46ac-854f-dc2299b562cd"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 56,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "048ce81c-c4fa-4ef1-9792-b3bcfd4d4bd0",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\templates\\listTemplateServices.enterprise.js",
        "file": "\\controllers\\test\\templates\\listTemplateServices.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "c65a4960-c968-4877-a75c-f5865d520561",
            "title": "Templates.listTemplateServices",
            "fullFile": "D:\\api\\controllers\\test\\templates\\listTemplateServices.enterprise.js",
            "file": "\\controllers\\test\\templates\\listTemplateServices.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Templates.listTemplateServices \"before all\" hook",
                "timedOut": false,
                "duration": 381,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(user, cbk) {\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            });\n    },\n    function(result, cbk) {\n        dummyUser = result.body.output;\n        api.get('/enterprise/v1/templatesicon')\n            .set('authtoken', dummyUser.authtoken)\n            .expect(httpStatus.OK)\n            .end(function(err, result) {\n                cbk(err, result);\n            });\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        templates = res.body.output;\n        done();\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "e27f1163-ff17-48cc-b36f-a8a7ddaf9fd6",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Templates.listTemplateServices \"after all\" hook",
                "timedOut": false,
                "duration": 2,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.parallel([\n    function(cb) {\n        _models.User.remove({ uid: dummyUser.uid }, function(err) {\n            cb(err)\n        });\n    }\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n});",
                "err": {},
                "isRoot": false,
                "uuid": "fc5488b4-9d42-4a2d-b16e-25f2b9ecb7ae",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should get list of services of template.",
                "fullTitle": "Enterprise Templates.listTemplateServices Should get list of services of template.",
                "timedOut": false,
                "duration": 39,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + '/' + templates[0].category + '/services')\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output).to.have.all.keys(['count', 'objects']);\n            expect(_.first(_.first(res.body.output.objects).category)).to.be.equal(templates[0].category);\n            expect(_.first(_.first(res.body.output.objects).activities)).to.be.String;\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "4291694a-f6b7-47b9-a796-821ead43a1d4",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "4291694a-f6b7-47b9-a796-821ead43a1d4"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 39,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "b893b2d4-4898-4d86-ad60-65687a263392",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\trigger\\createUserTrigger.enterprise.js",
        "file": "\\controllers\\test\\trigger\\createUserTrigger.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "f862b570-c203-4c9a-afdc-3544738b363e",
            "title": "Trigger.CreateUserTrigger",
            "fullFile": "D:\\api\\controllers\\test\\trigger\\createUserTrigger.enterprise.js",
            "file": "\\controllers\\test\\trigger\\createUserTrigger.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Trigger.CreateUserTrigger \"before all\" hook",
                "timedOut": false,
                "duration": 431,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data\n        async.waterfall([\n            function(cbk) {\n                api.get('/enterprise/v1/user')\n                    .set('authtoken', orgData.owner.authtoken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            dummyUser = res.body.output;\n                            cbk(err, dummyUser)\n                        }\n                    });\n            },\n            function(dummyUser, cbk) {\n                _models.Project.findOne({\n                    name: config.default_project,\n                    owner_uid: dummyUser.uid\n                }, function(err, project) {\n                    cbk(err, project)\n                })\n            },\n            function(result, cbk) {\n                api.post(flowURL)\n                    .set('authtoken', dummyUser.authtoken)\n                    .send(testData.enterpriseFlowBody)\n                    .expect(httpStatus.CREATED)\n                    .end(function(err, res) {\n                        cbk(err, res)\n                    })\n            }\n        ], function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                userFlow = res.body.output;\n                done()\n            }\n        })\n    });\n})",
                "err": {},
                "isRoot": false,
                "uuid": "6f497778-aeb7-476a-9218-7a68810baa4d",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Trigger.CreateUserTrigger \"after all\" hook",
                "timedOut": false,
                "duration": 14,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nhttpmock.cleanAll();\nasync.parallel([\n    function(cb) {\n        _models.newFlow.remove({ uid: userFlow.uid }, function(err) {\n            cb(err)\n        })\n    },\n    function(cb) {\n        createdTriggers.push(userTrigger.uid)\n        _models.UserTrigger.remove({ uid: { $in: createdTriggers } }, function(err) {\n            cb(err)\n        })\n    },\n    function(cb) {\n        clearRecords(function(err, result) {\n            cb(err, result)\n        })\n    }\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "24264c9c-fc33-4305-9306-6afb1cca9b1e",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise Trigger.CreateUserTrigger Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "729b94d0-c513-44c1-8267-07472d4ea09c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error if \"trigger\" key missing in request body.",
                "fullTitle": "Enterprise Trigger.CreateUserTrigger Should get error if \"trigger\" key missing in request body.",
                "timedOut": false,
                "duration": 46,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar triggerData = _.clone(testData.enterpriseFlowBody);\ntriggerData = _.omit(triggerData, 'trigger');\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(triggerData)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "9e87ba16-44b9-4d95-8e1c-d5c263517ba6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error if trigger data is invalid in request body.",
                "fullTitle": "Enterprise Trigger.CreateUserTrigger Should get error if trigger data is invalid in request body.",
                "timedOut": false,
                "duration": 52,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar triggerData = _.clone(testData.triggerBody);\ntriggerData = _.omit(triggerData.trigger, 'name');\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(triggerData)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "09c15bdb-9ec0-4a14-9791-384a14b22c0c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error if user-auth token is invalid.",
                "fullTitle": "Enterprise Trigger.CreateUserTrigger Should get error if user-auth token is invalid.",
                "timedOut": false,
                "duration": 43,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { path: triggerPath, body: triggerPath }\ncommonMock.triggerCreateExchangeTokenError(opt)\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(testData.triggerBody)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ERROR_WHILE_EXCHANGING_TOKEN);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "1597b903-70f1-4ba3-a29c-593b9604ea0a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should create trigger, if trigger data is valid.",
                "fullTitle": "Enterprise Trigger.CreateUserTrigger Should create trigger, if trigger data is valid.",
                "timedOut": false,
                "duration": 101,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.waterfall([\n    function(cbk) {\n        testData.mongoUserTriggerObj.user_uid = dummyUser.uid;\n        var trigUID = testData.expressTriggerResponse.uid;\n        // _models.UserTrigger.remove({uid: trigUID}, function(err, ut) {\n        _models.UserTrigger.create(testData.mongoUserTriggerObj, function(err, ut) {\n                var data = { uid: trigUID }\n                _models.UserTrigger.findOneAndUpdate({ uid: ut.uid }, data, { new: true }, function(err, userTrig) {\n                    cbk(err, userTrig);\n                })\n            })\n            // })\n    },\n    function(ut, cbk) {\n        var opt = { path: triggerPath, body: triggerPath }\n        commonMock.triggerCreateSuccess(opt);\n        var opt1 = { path: triggerPath, getPath: getTriggerPath + '/handlers', body: { \"unset\": [/^fl\\w*/] }, update: true, times: 2 };\n        commonMock.triggerPushSuccess(opt1);\n        var opt2 = { path: triggerPath, getPath: getTriggerPath + '/handlers', body: { \"push\": [/^fl\\w*/] }, update: true, times: 2 };\n        commonMock.triggerPushSuccess(opt2);\n        var opt3 = { path: triggerPath, getPath: getTriggerPath + '/handlers', body: { \"pull\": [/^fl\\w*/] }, update: true, times: 2 };\n        commonMock.triggerPushSuccess(opt3);\n        var triggerData = _.cloneDeep(testData.triggerEnterpriseBody);\n        triggerData.trigger.flow = userFlow.uid\n        api.post(apiURL)\n            .set('authtoken', dummyUser.authtoken)\n            .send(triggerData)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                cbk(err, res)\n            });\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        userTrigger = res.body.output;\n        expect(userTrigger).to.have.any.keys(_.keys(testData.getUserTriggerResponse))\n        expect(userTrigger).not.to.have.all.keys(['_id', '__v']);\n        _models.UserTrigger.remove({ uid: userTrigger.uid }, function(err) {\n            done(err)\n        })\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "daa7b32a-cd1e-40c3-8b07-bc165ad654b5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should create trigger within organization.",
                "fullTitle": "Enterprise Trigger.CreateUserTrigger Should create trigger within organization.",
                "timedOut": false,
                "duration": 251,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.waterfall([\n    function(cbk) {\n        testData.mongoUserTriggerObj.user_uid = orgData.organization.user_uid;\n        testData.mongoUserTriggerObj.org_uid = orgData.organization.uid;\n        var trigUID = testData.expressTriggerResponse.uid;\n        // _models.UserTrigger.remove({uid: trigUID}, function(err, ut) {\n        _models.UserTrigger.create(testData.mongoUserTriggerObj, function(err, ut) {\n            var data = { uid: trigUID }\n            _models.UserTrigger.findOneAndUpdate({ uid: ut.uid }, data, { new: true }, function(err, userTrig) {\n                cbk(err, userTrig);\n            })\n        })\n    },\n    function(userTrig, cbk) {\n        api.post(flowURL)\n            .set({ 'authtoken': dummyUser.authtoken, org_uid: orgData.organization.uid })\n            .send(testData.enterpriseFlowBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                cbk(err, res, org)\n            })\n    },\n    function(res, org, cbk) {\n        orgFlow = res.body.output\n        var opt = { path: triggerPath, body: triggerPath }\n        commonMock.triggerCreateSuccess(opt);\n        var opt1 = { path: triggerPath, getPath: getTriggerPath + '/handlers', body: { \"unset\": [/^fl\\w*/] }, update: true };\n        commonMock.triggerPushSuccess(opt1);\n        var opt2 = { path: triggerPath, getPath: getTriggerPath + '/handlers', body: { \"push\": [/^fl\\w*/] }, update: true };\n        commonMock.triggerPushSuccess(opt2);\n        var opt3 = { path: triggerPath, getPath: getTriggerPath + '/handlers', body: { \"pull\": [/^fl\\w*/] }, update: true };\n        commonMock.triggerPushSuccess(opt3);\n        var triggerData = _.cloneDeep(testData.triggerEnterpriseBody);\n        triggerData.trigger.flow = orgFlow.uid\n        api.post(apiURL)\n            .set({ authtoken: dummyUser.authtoken, org_uid: orgData.organization.uid })\n            .send(triggerData)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                cbk(err, res, org)\n            });\n    }\n], function(err, res, org) {\n    if (err) {\n        done(err);\n    } else {\n        userTrigger = res.body.output;\n        expect(userTrigger).to.have.any.keys(_.keys(testData.getUserTriggerResponse))\n        expect(userTrigger).not.to.have.all.keys(['_id', '__v']);\n        expect(userTrigger.org_uid).to.equal(orgData.organization.uid);\n        expect(userTrigger.user_uid).to.equal(orgData.organization.user_uid);\n        done();\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "a561655c-cb2e-4e79-b7c8-cbf5589d6e02",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if user trigger limit exceeds.",
                "fullTitle": "Enterprise Trigger.CreateUserTrigger Should get error, if user trigger limit exceeds.",
                "timedOut": false,
                "duration": 52,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.waterfall([\n    function(cbk) {\n        userTriggerLimit = (dummyUser.user_plan.trigger || {}).count\n        var triggerData = _.cloneDeep(testData.mongoUserTriggerObj)\n        triggerData.user_uid = dummyUser.uid;\n        async.times(userTriggerLimit, function(n, next) {\n            _models.UserTrigger.create(triggerData, function(err, userTrigger) {\n                next(err, userTrigger);\n            })\n        }, function(err, result) {\n            createdTriggers = _.map(_.flattenDeep(result), 'uid')\n            cbk(err, result)\n        })\n    },\n    function(result, cbk) {\n        var triggerData = _.cloneDeep(testData.triggerEnterpriseBody);\n        triggerData.trigger.flow = userFlow.uid\n        api.post(apiURL)\n            .set('authtoken', dummyUser.authtoken)\n            .send(triggerData)\n            .expect(httpStatus.BAD_REQUEST)\n            .end(function(err, res) {\n                cbk(err, res)\n            });\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        var errMSG = \"Your current plan does not allow using more than \" + userTriggerLimit + \" trigger(s) in your workflows. Please delete a trigger or upgrade your account before creating a new one.\";\n        expect(res.body.error.message).to.be.equal(errMSG);\n        done();\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "32bbedb7-7aac-45e6-bc29-820d6cedb9f7",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "729b94d0-c513-44c1-8267-07472d4ea09c",
              "9e87ba16-44b9-4d95-8e1c-d5c263517ba6",
              "09c15bdb-9ec0-4a14-9791-384a14b22c0c",
              "1597b903-70f1-4ba3-a29c-593b9604ea0a",
              "daa7b32a-cd1e-40c3-8b07-bc165ad654b5",
              "a561655c-cb2e-4e79-b7c8-cbf5589d6e02",
              "32bbedb7-7aac-45e6-bc29-820d6cedb9f7"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 555,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "368a7298-4177-4ae0-8391-5eb2093684e9",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\trigger\\deleteUserTrigger.enterprise.js",
        "file": "\\controllers\\test\\trigger\\deleteUserTrigger.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "16708e2a-50f3-4074-b27f-bb68bb47f079",
            "title": "Trigger.DeleteUserTrigger",
            "fullFile": "D:\\api\\controllers\\test\\trigger\\deleteUserTrigger.enterprise.js",
            "file": "\\controllers\\test\\trigger\\deleteUserTrigger.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Trigger.DeleteUserTrigger \"before all\" hook",
                "timedOut": false,
                "duration": 269,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\n_models.User.remove({ email: testData.testRegistrationBody.email }, function(error, user) {\n    api.post(\"/enterprise/v1/signup\")\n        .send(testData.testRegistrationBody)\n        .expect(httpStatus.CREATED)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                dummyUser = res.body.output;\n                done();\n            }\n        });\n});",
                "err": {},
                "isRoot": false,
                "uuid": "bdc0776f-3e09-4385-957f-36f932b6841e",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise Trigger.DeleteUserTrigger Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.delete(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "150c1b30-4523-42b6-a04b-e46e86abb5a5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if trigger not found.",
                "fullTitle": "Enterprise Trigger.DeleteUserTrigger Should get error, if trigger not found.",
                "timedOut": false,
                "duration": 69,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { path: triggerPath, body: triggerPath };\ncommonMock.triggerDeleteNotFound(opt);\napi.delete(apiURL404)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.TRIGGER_NOT_FOUND);\n            httpmock.cleanAll();\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "361d65b7-fa75-4d02-8de3-cf158c579a20",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should delete trigger, if trigger is found.",
                "fullTitle": "Enterprise Trigger.DeleteUserTrigger Should delete trigger, if trigger is found.",
                "timedOut": false,
                "duration": 76,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { path: triggerPath, body: triggerPath };\ncommonMock.triggerDeleteSuccess(opt);\ntestData.mongoUserTriggerObj.user_uid = dummyUser.uid;\n//testData.mongoUserTriggerObj.project_uid = project.uid;\ntestData.mongoUserTriggerObj.uid = 'dummyTrigger'\n_models.UserTrigger.create(testData.mongoUserTriggerObj, function(err, result) {\n    //cbk(err, userTrigger);\n    if (err) {\n        done(err)\n    } else {\n        api.delete(apiURL)\n            .set('authtoken', dummyUser.authtoken)\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    res.body.output.message.should.equal(messageList.TRIGGER_DELETED_SUCCESSFULLY);\n                    done();\n                }\n            });\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "67573b84-212c-4e4a-a730-1a3bea128ee9",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "150c1b30-4523-42b6-a04b-e46e86abb5a5",
              "361d65b7-fa75-4d02-8de3-cf158c579a20",
              "67573b84-212c-4e4a-a730-1a3bea128ee9"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 154,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "19c28475-8418-4dda-9cbb-b65d0c2af5a0",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\trigger\\executeUserTrigger.enterprise.js",
        "file": "\\controllers\\test\\trigger\\executeUserTrigger.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "0dba68a6-48b0-4a85-a4e8-d5ccff47c399",
            "title": "Trigger.ExecuteUserTrigger",
            "fullFile": "D:\\api\\controllers\\test\\trigger\\executeUserTrigger.enterprise.js",
            "file": "\\controllers\\test\\trigger\\executeUserTrigger.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Trigger.ExecuteUserTrigger \"before all\" hook",
                "timedOut": false,
                "duration": 297,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\n_models.User.remove({ email: testData.testRegistrationBody.email }, function(error, user) {\n    api.post(\"/enterprise/v1/signup\")\n        .send(testData.testRegistrationBody)\n        .expect(httpStatus.CREATED)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                dummyUser = res.body.output;\n                done();\n            }\n        });\n});",
                "err": {},
                "isRoot": false,
                "uuid": "556ffca9-64be-4428-8fd7-6216ae9ae221",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise Trigger.ExecuteUserTrigger Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "48f3bc7f-aef1-469a-aad3-61ba051bc700",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if trigger not found.",
                "fullTitle": "Enterprise Trigger.ExecuteUserTrigger Should get error, if trigger not found.",
                "timedOut": false,
                "duration": 60,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { path: triggerPath, body: triggerPath };\ncommonMock.triggerExecuteNotFound(opt);\napi.get(apiURL404)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.TRIGGER_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "1d83bdbb-7725-4fcc-961d-3d8fcc6a7124",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should execute trigger, if trigger is found.",
                "fullTitle": "Enterprise Trigger.ExecuteUserTrigger Should execute trigger, if trigger is found.",
                "timedOut": false,
                "duration": 58,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { path: triggerPath, body: triggerPath };\ncommonMock.triggerExecuteSuccess(opt);\napi.get(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.message.should.equal(messageList.TRIGGER_EXECUTED_SUCCESSFULLY);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "4672b003-a736-4ae2-aced-6a5d2b72a5bc",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "48f3bc7f-aef1-469a-aad3-61ba051bc700",
              "1d83bdbb-7725-4fcc-961d-3d8fcc6a7124",
              "4672b003-a736-4ae2-aced-6a5d2b72a5bc"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 127,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "15885191-26c2-4871-b28d-4a08b51baff1",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\trigger\\getUserTrigger.enterprise.js",
        "file": "\\controllers\\test\\trigger\\getUserTrigger.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "95c627c5-1e97-474c-9be9-dad4254c3e68",
            "title": "Trigger.GetUserTrigger",
            "fullFile": "D:\\api\\controllers\\test\\trigger\\getUserTrigger.enterprise.js",
            "file": "\\controllers\\test\\trigger\\getUserTrigger.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Trigger.GetUserTrigger \"before all\" hook",
                "timedOut": false,
                "duration": 285,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(user, cbk) {\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    },\n    function(result, cbk) {\n        dummyUser = result.body.output;\n        _models.Project.findOne({ name: config.default_project, owner_uid: dummyUser.uid }, function(err, project) {\n            cbk(err, project)\n        })\n    },\n    function(project, cbk) {\n        testData.mongoUserTriggerObj.user_uid = dummyUser.uid;\n        testData.mongoUserTriggerObj.project_uid = project.uid;\n        _models.UserTrigger.create(testData.mongoUserTriggerObj, function(err, userTrigger) {\n            cbk(err, userTrigger);\n        })\n    }\n], function(err, userTrigger) {\n    if (err) {\n        done(err);\n    } else {\n        userTriggerObj = userTrigger\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "a8fa535e-8f94-4d9a-954b-4c29fed02201",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Trigger.GetUserTrigger \"after all\" hook",
                "timedOut": false,
                "duration": 11,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nhttpmock.cleanAll();\n_models.UserTrigger.remove({ uid: userTriggerObj.uid }, function(err, userTrigger) {\n    if (err) {\n        done(err)\n    } else {\n        clearRecords(function(err, result) {\n            done(err)\n        })\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "66c8a536-74da-4c2a-bdd4-499b75003e14",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Trigger.GetUserTrigger Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + userTriggerObj.uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "8b034f5c-14b0-4440-8846-7406d25b03bf",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if trigger is not found.",
                "fullTitle": "Enterprise Trigger.GetUserTrigger Should get error, if trigger is not found.",
                "timedOut": false,
                "duration": 41,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL404)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.TRIGGER_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "c75790c7-9d06-423a-9079-66033aa50eeb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if trigger server is not responding.",
                "fullTitle": "Enterprise Trigger.GetUserTrigger Should get error, if trigger server is not responding.",
                "timedOut": false,
                "duration": 42,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { path: triggerPath, body: triggerPath };\ncommonMock.triggerRequestTimeout(opt);\napi.get(apiURL + userTriggerObj.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.GATEWAY_TIMEOUT)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).to.be.equal(messageList.TRIGGER_SERVER_DOWN)\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "9916edbd-43b9-4d38-888a-00421f1aa411",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get user-trigger, if trigger is found.",
                "fullTitle": "Enterprise Trigger.GetUserTrigger Should get user-trigger, if trigger is found.",
                "timedOut": false,
                "duration": 44,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { path: triggerPath, body: triggerPath };\ncommonMock.triggerGetSuccess(opt);\napi.get(apiURL + userTriggerObj.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output).to.have.any.keys(_.keys(testData.getUserTriggerResponse))\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "fe204a00-34e9-418b-8dea-c965350e7f65",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8b034f5c-14b0-4440-8846-7406d25b03bf",
              "c75790c7-9d06-423a-9079-66033aa50eeb",
              "9916edbd-43b9-4d38-888a-00421f1aa411",
              "fe204a00-34e9-418b-8dea-c965350e7f65"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 143,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "8a88b82f-6d7a-4cbe-99a2-b76c876dd48e",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\trigger\\getUserTriggerByAuth.enterprise.js",
        "file": "\\controllers\\test\\trigger\\getUserTriggerByAuth.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "89b0c4a2-4d85-4fc0-a2a3-6f4872d6763b",
            "title": "Trigger.GetUserTriggerByAuth",
            "fullFile": "D:\\api\\controllers\\test\\trigger\\getUserTriggerByAuth.enterprise.js",
            "file": "\\controllers\\test\\trigger\\getUserTriggerByAuth.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Trigger.GetUserTriggerByAuth \"before all\" hook",
                "timedOut": false,
                "duration": 268,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\n_models.User.remove({ email: testData.testRegistrationBody.email }, function(error, user) {\n    api.post(\"/enterprise/v1/signup\")\n        .send(testData.testRegistrationBody)\n        .expect(httpStatus.CREATED)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                dummyUser = res.body.output;\n                done();\n            }\n        });\n});",
                "err": {},
                "isRoot": false,
                "uuid": "82a03f55-ebd7-4761-bc62-4fb804d5037b",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Trigger.GetUserTriggerByAuth Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "98398f4a-2f48-4355-a9b9-7e294a77ac40",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if \"uid\" param is missing.",
                "fullTitle": "Enterprise Trigger.GetUserTriggerByAuth Should get error, if \"uid\" param is missing.",
                "timedOut": false,
                "duration": 40,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send()\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "1cd8c9c3-d41f-4085-9469-21327a1721fb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get user-triggers, if auth uid is present and valid.",
                "fullTitle": "Enterprise Trigger.GetUserTriggerByAuth Should get user-triggers, if auth uid is present and valid.",
                "timedOut": false,
                "duration": 53,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(searchParam)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.should.be.instanceOf(Array);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "843c8bfd-a51e-4f7d-b90a-b9246a0512a0",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "98398f4a-2f48-4355-a9b9-7e294a77ac40",
              "1cd8c9c3-d41f-4085-9469-21327a1721fb",
              "843c8bfd-a51e-4f7d-b90a-b9246a0512a0"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 101,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "5bbcc563-16f3-4e0d-8c5e-79bf9ef74696",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\trigger\\listTriggers.enterprise.js",
        "file": "\\controllers\\test\\trigger\\listTriggers.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "5c737862-b645-45ed-a0ed-8605b7feb077",
            "title": "Trigger.ListTriggers",
            "fullFile": "D:\\api\\controllers\\test\\trigger\\listTriggers.enterprise.js",
            "file": "\\controllers\\test\\trigger\\listTriggers.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Trigger.ListTriggers \"before all\" hook",
                "timedOut": false,
                "duration": 241,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\n_models.User.remove({ email: testData.testRegistrationBody.email }, function(error, user) {\n    api.post(\"/enterprise/v1/signup\")\n        .send(testData.testRegistrationBody)\n        .expect(httpStatus.CREATED)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                dummyUser = res.body.output;\n                done();\n            }\n        });\n});",
                "err": {},
                "isRoot": false,
                "uuid": "ef62596c-7e7a-4c17-912e-93036d0174c5",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should get list of triggers.",
                "fullTitle": "Enterprise Trigger.ListTriggers Should get list of triggers.",
                "timedOut": false,
                "duration": 43,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.should.be.instanceOf(Array);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "2c3e579d-3934-4742-97d9-d321061906be",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Trigger.ListTriggers Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "90693f65-48fb-44c0-a0d6-514514c952b5",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2c3e579d-3934-4742-97d9-d321061906be",
              "90693f65-48fb-44c0-a0d6-514514c952b5"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 52,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "c569efa6-c32e-4abe-9db9-cc220831a113",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\trigger\\listUserTriggers.enterprise.js",
        "file": "\\controllers\\test\\trigger\\listUserTriggers.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "9fbc7ea3-452c-4094-9434-ca8682829f85",
            "title": "Trigger.ListUserTriggers",
            "fullFile": "D:\\api\\controllers\\test\\trigger\\listUserTriggers.enterprise.js",
            "file": "\\controllers\\test\\trigger\\listUserTriggers.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Trigger.ListUserTriggers \"before all\" hook",
                "timedOut": false,
                "duration": 254,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(user, cbk) {\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    },\n    function(result, cbk) {\n        dummyUser = result.body.output;\n        _models.Project.findOne({ name: config.default_project, owner_uid: dummyUser.uid }, function(err, project) {\n            cbk(err, project)\n        })\n    },\n    function(project, cbk) {\n        testData.mongoUserTriggerObj.user_uid = dummyUser.uid;\n        testData.mongoUserTriggerObj.project_uid = project.uid;\n        testData.mongoUserTriggerObj.env_uid = project.env_uid;\n        _models.UserTrigger.create(testData.mongoUserTriggerObj, function(err, userTrigger) {\n            cbk(err, userTrigger);\n        })\n    }\n], function(err, userTrigger) {\n    if (err) {\n        done(err);\n    } else {\n        userTriggerObj = userTrigger\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "3b4ee40b-f41b-48d9-a0da-10821be29222",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Trigger.ListUserTriggers \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n_models.UserTrigger.remove({ uid: userTriggerObj.uid }, function(err, userTrigger) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "6edf6f92-4305-4320-9dde-ce77ca9cfda9",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should get list of triggers.",
                "fullTitle": "Enterprise Trigger.ListUserTriggers Should get list of triggers.",
                "timedOut": false,
                "duration": 47,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var response = res.body.output\n            response.should.be.instanceOf(Array);\n            expect(_.first(_.first(response).triggers)).to.have.any.keys(_.keys(testData.getUserTriggerResponse))\n            expect(_.first(_.first(response).triggers)).not.to.have.all.keys(['_id', '__v']);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "ab77d46b-6c2b-42b7-b01d-cde057a73739",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Trigger.ListUserTriggers Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "f3614ffd-1bf8-4f2e-8d58-fd69d7ef2ec5",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ab77d46b-6c2b-42b7-b01d-cde057a73739",
              "f3614ffd-1bf8-4f2e-8d58-fd69d7ef2ec5"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 56,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "104e8a6e-4924-4997-90db-434a32909e1f",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\trigger\\pullUserTrigger.enterprise.js",
        "file": "\\controllers\\test\\trigger\\pullUserTrigger.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "16aefbdc-251a-4aa0-af6a-2ea07f05632b",
            "title": "Trigger.PullUserTrigger",
            "fullFile": "D:\\api\\controllers\\test\\trigger\\pullUserTrigger.enterprise.js",
            "file": "\\controllers\\test\\trigger\\pullUserTrigger.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Trigger.PullUserTrigger \"before all\" hook",
                "timedOut": false,
                "duration": 346,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(user, cbk) {\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    },\n    function(result, cbk) {\n        dummyUser = result.body.output;\n        testData.mongoUserTriggerObj.user_uid = dummyUser.uid;\n        _models.UserTrigger.create(testData.mongoUserTriggerObj, function(err, userTrigger) {\n            cbk(err, userTrigger);\n        })\n    },\n    function(userTrigger, cbk) {\n        userTriggerObj = userTrigger\n        testData.flowBody.trigger.handlers = [userTriggerObj.uid]\n        api.post(flowURL)\n            .set('authtoken', dummyUser.authtoken)\n            .send(testData.flowBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                cbk(err, res)\n            })\n    },\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        userFlow = res.body.output;\n        pullTriggerData = {\n            \"trigger\": {\n                \"flow_uid\": userFlow.uid,\n                \"uid\": userTriggerObj.uid,\n                \"provider\": \"clock\"\n            }\n        }\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "95b34415-9b5e-4b95-a3c6-604f7bb05e4d",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Trigger.PullUserTrigger \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nhttpmock.cleanAll();\nasync.parallel([\n    function(cb) {\n        _models.newFlow.remove({ uid: userFlow.uid }, function(err) {\n            cb(err)\n        })\n    },\n    function(cb) {\n        _models.UserTrigger.remove({ uid: userTriggerObj.uid }, function(err, deletedUserTrigger) {\n            cb(err, deletedUserTrigger);\n        })\n    },\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "50c44e53-4b3d-45bd-954e-cc2897251753",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise Trigger.PullUserTrigger Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "d00db9cc-9b60-4910-9f08-7e770d93932a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error if \"trigger\" key missing in request body.",
                "fullTitle": "Enterprise Trigger.PullUserTrigger Should get error if \"trigger\" key missing in request body.",
                "timedOut": false,
                "duration": 56,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar data = _.clone(pullTriggerData);\ndata = _.omit(data, 'trigger');\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(data)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "d4101347-8cea-4e9f-bf9b-158bf1555125",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error if \"flow_uid\" key missing in request body.",
                "fullTitle": "Enterprise Trigger.PullUserTrigger Should get error if \"flow_uid\" key missing in request body.",
                "timedOut": false,
                "duration": 43,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar data = _.clone(pullTriggerData);\ndata = _.omit(data.trigger, 'flow_uid');\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(data)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "3e556488-2484-4c63-b0de-5ced98e61eaf",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should pull trigger, if trigger data is valid.",
                "fullTitle": "Enterprise Trigger.PullUserTrigger Should pull trigger, if trigger data is valid.",
                "timedOut": false,
                "duration": 63,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { path: triggerPath, getPath: getTriggerPath + '/handlers', body: { \"unset\": [/^fl\\w*/] } };\ncommonMock.triggerPullSuccess(opt);\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(pullTriggerData)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output.flow.trigger.handlers).to.be.empty\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "302c9063-a37f-44c4-bc84-8697799964b5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error if trigger not found.",
                "fullTitle": "Enterprise Trigger.PullUserTrigger Should get error if trigger not found.",
                "timedOut": false,
                "duration": 37,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar data = _.clone(pullTriggerData);\ndata.trigger.uid = 'dummyTrigger';\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(data)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.TRIGGER_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "60ce088b-5ba8-4948-bd15-21dba71e3335",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d00db9cc-9b60-4910-9f08-7e770d93932a",
              "d4101347-8cea-4e9f-bf9b-158bf1555125",
              "3e556488-2484-4c63-b0de-5ced98e61eaf",
              "302c9063-a37f-44c4-bc84-8697799964b5",
              "60ce088b-5ba8-4948-bd15-21dba71e3335"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 208,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "cffca1ea-31a0-49d2-ab59-293c38d54100",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\trigger\\testUserTrigger.enterprise.js",
        "file": "\\controllers\\test\\trigger\\testUserTrigger.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "7fc70a33-2b06-45b4-b9e8-9066f57c7d28",
            "title": "Trigger.TestUserTrigger",
            "fullFile": "D:\\api\\controllers\\test\\trigger\\testUserTrigger.enterprise.js",
            "file": "\\controllers\\test\\trigger\\testUserTrigger.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Trigger.TestUserTrigger \"before all\" hook",
                "timedOut": false,
                "duration": 286,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data\n        async.waterfall([\n            function(cbk) {\n                api.get('/enterprise/v1/user')\n                    .set('authtoken', orgData.owner.authtoken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            dummyUser = res.body.output;\n                            cbk(err, dummyUser)\n                        }\n                    });\n            },\n            function(dummyUser, cbk) {\n                _models.Project.findOne({\n                    name: config.default_project,\n                    owner_uid: dummyUser.uid\n                }, function(err, project) {\n                    cbk(err, project)\n                })\n            },\n            function(result, cbk) {\n                api.post(flowURL)\n                    .set('authtoken', dummyUser.authtoken)\n                    .send(testData.enterpriseFlowBody)\n                    .expect(httpStatus.CREATED)\n                    .end(function(err, res) {\n                        cbk(err, res)\n                    })\n            }\n        ], function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                userFlow = res.body.output;\n                done()\n            }\n        })\n    });\n})",
                "err": {},
                "isRoot": false,
                "uuid": "7a08181c-3c46-48d5-ad3d-09c8b76d226f",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Trigger.TestUserTrigger \"after all\" hook",
                "timedOut": false,
                "duration": 2,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nhttpmock.cleanAll();\nasync.parallel([\n    function(cb) {\n        _models.newFlow.remove({ uid: userFlow.uid }, function(err) {\n            cb(err)\n        })\n    },\n    function(cb) {\n        createdTriggers.push(userTrigger.uid)\n        _models.UserTrigger.remove({ uid: { $in: createdTriggers } }, function(err) {\n            cb(err)\n        })\n    }\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "a7591a12-8486-4ff1-9439-f95d3f21994e",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise Trigger.TestUserTrigger Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "0c246d0d-2660-4af2-8dba-6db36ddeb88c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error if \"trigger\" key missing in request body.",
                "fullTitle": "Enterprise Trigger.TestUserTrigger Should get error if \"trigger\" key missing in request body.",
                "timedOut": false,
                "duration": 32,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar triggerData = _.clone(testData.enterpriseFlowBody);\ntriggerData = _.omit(triggerData, 'trigger');\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(triggerData)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "c697d588-c108-43a6-b6fa-7d58be743c45",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error if trigger data is invalid in request body.",
                "fullTitle": "Enterprise Trigger.TestUserTrigger Should get error if trigger data is invalid in request body.",
                "timedOut": false,
                "duration": 218,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar triggerData = _.clone(testData.triggerBody);\ntriggerData = _.omit(triggerData.trigger, 'name');\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(triggerData)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "edf70aa8-e2ec-4c3c-abf8-0d3a79bd46d6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error if user-auth token is invalid.",
                "fullTitle": "Enterprise Trigger.TestUserTrigger Should get error if user-auth token is invalid.",
                "timedOut": false,
                "duration": 40,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { path: triggerPath, body: triggerPath }\ncommonMock.triggerCreateExchangeTokenError(opt)\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(testData.triggerBody)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ERROR_WHILE_EXCHANGING_TOKEN);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "1e921969-0255-434f-857a-e7e8a76ec526",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should test trigger, if trigger data is valid.",
                "fullTitle": "Enterprise Trigger.TestUserTrigger Should test trigger, if trigger data is valid.",
                "timedOut": false,
                "duration": 53,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.waterfall([\n    function(cbk) {\n        testData.mongoUserTriggerObj.user_uid = dummyUser.uid;\n        var trigUID = testData.expressTriggerResponse.uid;\n        // _models.UserTrigger.remove({uid: trigUID}, function(err, ut) {\n        _models.UserTrigger.create(testData.mongoUserTriggerObj, function(err, ut) {\n                var data = { uid: trigUID }\n                _models.UserTrigger.findOneAndUpdate({ uid: ut.uid }, data, { new: true }, function(err, userTrig) {\n                    cbk(err, userTrig);\n                })\n            })\n            // })\n    },\n    function(ut, cbk) {\n        var opt = { path: triggerPath, body: triggerPath }\n        commonMock.triggerCreateSuccess(opt);\n        var opt1 = { path: triggerPath, getPath: getTriggerPath + '/handlers', body: { \"unset\": [/^fl\\w*/] }, update: true, times: 2 };\n        commonMock.triggerPushSuccess(opt1);\n        var opt2 = { path: triggerPath, getPath: getTriggerPath + '/handlers', body: { \"push\": [/^fl\\w*/] }, update: true, times: 2 };\n        commonMock.triggerPushSuccess(opt2);\n        var opt3 = { path: triggerPath, getPath: getTriggerPath + '/handlers', body: { \"pull\": [/^fl\\w*/] }, update: true, times: 2 };\n        commonMock.triggerPushSuccess(opt3);\n        var triggerData = _.cloneDeep(testData.triggerEnterpriseBody);\n        triggerData.trigger.flow = userFlow.uid\n        api.post(apiURL)\n            .set('authtoken', dummyUser.authtoken)\n            .send(triggerData)\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                cbk(err, res)\n            });\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        userTrigger = res.body.output;\n        expect(userTrigger).to.have.any.keys(_.keys(testData.getUserTriggerResponse))\n        expect(userTrigger).not.to.have.all.keys(['_id', '__v']);\n        _models.UserTrigger.remove({ uid: userTrigger.uid }, function(err) {\n            done(err)\n        })\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "14ce1ebb-10c9-4424-a7da-fd03d774b001",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0c246d0d-2660-4af2-8dba-6db36ddeb88c",
              "c697d588-c108-43a6-b6fa-7d58be743c45",
              "edf70aa8-e2ec-4c3c-abf8-0d3a79bd46d6",
              "1e921969-0255-434f-857a-e7e8a76ec526",
              "14ce1ebb-10c9-4424-a7da-fd03d774b001"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 350,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "5a863fcb-3fc5-48c3-a4d3-f58d43daa75d",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\trigger\\updateUserTrigger.enterprise.js",
        "file": "\\controllers\\test\\trigger\\updateUserTrigger.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "8c5ac540-a336-4ffc-b18f-084906893b5b",
            "title": "Trigger.UpdateUserTrigger",
            "fullFile": "D:\\api\\controllers\\test\\trigger\\updateUserTrigger.enterprise.js",
            "file": "\\controllers\\test\\trigger\\updateUserTrigger.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Trigger.UpdateUserTrigger \"before all\" hook",
                "timedOut": false,
                "duration": 257,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(user, cbk) {\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    },\n    function(result, cbk) {\n        dummyUser = result.body.output;\n        _models.Project.findOne({ name: config.default_project, owner_uid: dummyUser.uid }, function(err, project) {\n            cbk(err, project)\n        })\n    },\n    function(project, cbk) {\n        testData.mongoUserTriggerObj.user_uid = dummyUser.uid;\n        testData.mongoUserTriggerObj.project_uid = project.uid;\n        _models.UserTrigger.create(testData.mongoUserTriggerObj, function(err, userTrigger) {\n            cbk(err, userTrigger);\n        })\n    }\n], function(err, userTrigger) {\n    if (err) {\n        done(err);\n    } else {\n        userTriggerObj = userTrigger\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "80d50d0a-3ce2-475d-9a6e-3a391d27b4db",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Trigger.UpdateUserTrigger \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nhttpmock.cleanAll();\n_models.UserTrigger.remove({ uid: userTriggerObj.uid }, function(err, userTrigger) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "cecddeef-c457-4057-a1bb-62b535995afd",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise Trigger.UpdateUserTrigger Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put(apiURL + userTriggerObj.uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "4c4a8f77-d23e-4ac4-99ec-00dee9eb717e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if \"trigger\" key missing in request body.",
                "fullTitle": "Enterprise Trigger.UpdateUserTrigger Should get error, if \"trigger\" key missing in request body.",
                "timedOut": false,
                "duration": 47,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar triggerData = _.cloneDeep(testData.triggerBody);\ntriggerData = _.omit(triggerData, 'trigger');\napi.put(apiURL + userTriggerObj.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .send(triggerData)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "acfdfb25-1914-46ce-b6a2-9786e1b6e7f7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if trigger data is invalid in request body.",
                "fullTitle": "Enterprise Trigger.UpdateUserTrigger Should get error, if trigger data is invalid in request body.",
                "timedOut": false,
                "duration": 44,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar triggerData = _.clone(testData.triggerBody);\ntriggerData = _.omit(triggerData.trigger, 'name');\napi.put(apiURL + userTriggerObj.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .send(triggerData)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "1a993ddf-1db1-4558-bc72-f923e7948ed4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if user-auth token is invalid.",
                "fullTitle": "Enterprise Trigger.UpdateUserTrigger Should get error, if user-auth token is invalid.",
                "timedOut": false,
                "duration": 59,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { path: triggerPath, body: triggerPath };\ncommonMock.triggerUpdateExchangeTokenError(opt);\napi.put(apiURL + userTriggerObj.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .send(testData.triggerBody)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ERROR_WHILE_EXCHANGING_TOKEN);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "14edc5cb-1107-4094-b2ed-be1e72b0b6e8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should update trigger, if trigger data is valid.",
                "fullTitle": "Enterprise Trigger.UpdateUserTrigger Should update trigger, if trigger data is valid.",
                "timedOut": false,
                "duration": 60,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { path: triggerPath, body: triggerPath };\ncommonMock.triggerUpdateSuccess(opt);\napi.put(apiURL + userTriggerObj.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .send(testData.triggerBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var userTrigger = res.body.output;\n            expect(userTrigger).to.have.any.keys(_.keys(testData.getUserTriggerResponse))\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "93b602d9-2f22-4219-a551-fd5f8b90d884",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if trigger not found.",
                "fullTitle": "Enterprise Trigger.UpdateUserTrigger Should get error, if trigger not found.",
                "timedOut": false,
                "duration": 55,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { path: triggerPath, body: triggerPath };\ncommonMock.triggerUpdateNotFound(opt);\napi.put(apiURL + 'dummyTrigger')\n    .set('authtoken', dummyUser.authtoken)\n    .send(testData.triggerBody)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.TRIGGER_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "764919cc-b560-4353-9ccd-c1a461e60e06",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "4c4a8f77-d23e-4ac4-99ec-00dee9eb717e",
              "acfdfb25-1914-46ce-b6a2-9786e1b6e7f7",
              "1a993ddf-1db1-4558-bc72-f923e7948ed4",
              "14edc5cb-1107-4094-b2ed-be1e72b0b6e8",
              "93b602d9-2f22-4219-a551-fd5f8b90d884",
              "764919cc-b560-4353-9ccd-c1a461e60e06"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 275,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "604bfe91-aa69-479a-a9e7-587aba82b2c3",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\trigger\\upsertUserTrigger.enterprise.js",
        "file": "\\controllers\\test\\trigger\\upsertUserTrigger.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "f5459253-2989-4648-8e18-56962eff0022",
            "title": "Trigger.UpsertUserTrigger",
            "fullFile": "D:\\api\\controllers\\test\\trigger\\upsertUserTrigger.enterprise.js",
            "file": "\\controllers\\test\\trigger\\upsertUserTrigger.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Trigger.UpsertUserTrigger \"before all\" hook",
                "timedOut": false,
                "duration": 258,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data\n        async.waterfall([\n            function(cbk) {\n                dummyUser = orgData.owner;\n                dummyUser.authtoken = dummyUser.authtoken;\n                _models.Project.findOne({\n                    name: config.default_project,\n                    owner_uid: dummyUser.uid\n                }, function(err, project) {\n                    cbk(err, project)\n                })\n            },\n            function(project, cbk) {\n                testData.mongoUserTriggerObj.user_uid = dummyUser.uid;\n                testData.mongoUserTriggerObj.project_uid = project.uid;\n                _models.UserTrigger.create(testData.mongoUserTriggerObj, function(err, userTrigger) {\n                    cbk(err, userTrigger);\n                })\n            },\n            function(userTrigger, cbk) {\n                userTriggerObj = userTrigger;\n                testData.flowBody.trigger.handlers = [userTriggerObj]\n                var flow = _.cloneDeep(testData.flowBody)\n                flow.active = false;\n                api.post(flowURL)\n                    .set('authtoken', dummyUser.authtoken)\n                    .send(flow)\n                    .expect(httpStatus.CREATED)\n                    .end(function(err, res) {\n                        cbk(err, res)\n                    })\n            }\n        ], function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                userFlow = res.body.output;\n                upsertData = { flow_uid: userFlow.uid, trigger_uid: userTriggerObj.uid }\n                done()\n            }\n        })\n    });\n})",
                "err": {},
                "isRoot": false,
                "uuid": "78f000a7-db2e-433e-a8f1-8bd19e99ab25",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Trigger.UpsertUserTrigger \"after all\" hook",
                "timedOut": false,
                "duration": 10,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nhttpmock.cleanAll();\nasync.parallel([\n    function(cb) {\n        _models.newFlow.remove({ uid: userFlow.uid }, function(err) {\n            cb(err)\n        })\n    },\n    function(cb) {\n        _models.UserTrigger.remove({ uid: userTriggerObj.uid }, function(err, deletedUserTrigger) {\n            cb(err, deletedUserTrigger);\n        })\n    },\n    function(cb) {\n        clearRecords(function(err, result) {\n            cb(err, result)\n        })\n    }\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "0ac8d7fa-a82f-49b3-8f3c-ee63ee40b161",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise Trigger.UpsertUserTrigger Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "87728648-09ad-45b7-bb75-79a548906e48",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error if \"trigger_uid\" key missing in request body.",
                "fullTitle": "Enterprise Trigger.UpsertUserTrigger Should get error if \"trigger_uid\" key missing in request body.",
                "timedOut": false,
                "duration": 43,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar data = _.cloneDeep(upsertData);\ndata = _.omit(data, 'trigger_uid');\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(data)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "95bc0092-faf6-4627-90a0-6058f264c45f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error if \"flow_uid\" key missing in request body.",
                "fullTitle": "Enterprise Trigger.UpsertUserTrigger Should get error if \"flow_uid\" key missing in request body.",
                "timedOut": false,
                "duration": 35,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar data = _.cloneDeep(upsertData);\ndata = _.omit(data, 'flow_uid');\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(data)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "ac4f148d-7cbc-4ff0-9f65-a4e31804350e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error if flow not found.",
                "fullTitle": "Enterprise Trigger.UpsertUserTrigger Should get error if flow not found.",
                "timedOut": false,
                "duration": 43,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar data = _.cloneDeep(upsertData);\ndata.flow_uid = 'dummyFlow';\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(data)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.FLOW_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "14078b28-74c5-4298-9754-5e949b29aee7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should upsert trigger and keep flow in in-active state if plan exceeds and trigger data is valid.",
                "fullTitle": "Enterprise Trigger.UpsertUserTrigger Should upsert trigger and keep flow in in-active state if plan exceeds and trigger data is valid.",
                "timedOut": false,
                "duration": 350,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { path: triggerPath, getPath: getTriggerPath + '/handlers', body: { \"unset\": [/^fl\\w*/] }, update: true, times: 2 };\ncommonMock.triggerPullSuccess(opt);\nopt.body = { \"push\": [/^fl\\w*/] }\ncommonMock.triggerPushSuccess(opt);\nvar flowData = testData.enterpriseFlowBody\nasync.times(5, function(n, next) {\n    createFlow(flowURL, flowData, dummyUser, function(err, flow) {\n        next(err, flow)\n    })\n}, function(err, results) {\n    if (err) {\n        done(err)\n    } else {\n        var triggerData = testData.triggerEnterpriseBody;\n        triggerData.trigger.flow = userFlow.uid\n        api.post(apiURL)\n            .set('authtoken', dummyUser.authtoken)\n            .send(upsertData)\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    expect(res.body.output.uid).to.be.equal(upsertData.trigger_uid)\n                    expect(res.body.output).not.to.have.all.keys(['_id', '__v']);\n                    _models.newFlow.findOne({ uid: userFlow.uid }, function(err, result) {\n                        if (err) {\n                            done(err)\n                        } else {\n                            expect(result.active).to.be.equal(false)\n                            done();\n                        }\n                    })\n                }\n            });\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "b4aac78a-76c6-4a4c-8093-aade16fb3067",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should upsert trigger within organization.",
                "fullTitle": "Enterprise Trigger.UpsertUserTrigger Should upsert trigger within organization.",
                "timedOut": false,
                "duration": 184,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { path: triggerPath, getPath: getTriggerPath + '/handlers', body: { \"unset\": [/^fl\\w*/] }, update: true };\ncommonMock.triggerPullSuccess(opt);\nopt.body = { \"push\": [/^fl\\w*/] }\ncommonMock.triggerPushSuccess(opt);\nvar tempOrgBody = orgBody;\n// var opt = { path: getTriggerPath, body: getTriggerPath, times: 2 };\n// commonMock.triggerCreateSuccess(opt);\nasync.waterfall([\n    function(cbk) {\n        //dummyUser = result.body.output;\n        _models.Project.findOne({ name: config.default_project, owner_uid: orgData.organization.user_uid }, function(err, project) {\n            cbk(err, project, org)\n        })\n    },\n    function(project, org, cbk) {\n        testData.mongoUserTriggerObj.user_uid = orgData.organization.user_uid;\n        testData.mongoUserTriggerObj.project_uid = project.uid;\n        testData.mongoUserTriggerObj.org_uid = orgData.organization.uid;\n        var trigUID = testData.expressTriggerResponse.uid;\n        // _models.UserTrigger.remove({uid: trigUID}, function(err, ut) {\n        _models.UserTrigger.create(testData.mongoUserTriggerObj, function(err, ut) {\n                var data = { uid: trigUID }\n                _models.UserTrigger.findOneAndUpdate({ uid: ut.uid }, data, { new: true }, function(err, userTrig) {\n                    cbk(err, userTrig, org);\n                })\n            })\n            // })\n    },\n    function(userTrig, org, cbk) {\n        api.post(flowURL)\n            .set({ 'authtoken': dummyUser.authtoken, org_uid: orgData.organization.uid })\n            .send(testData.enterpriseFlowBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                cbk(err, res, org, userTrig)\n            })\n    },\n    function(res, org, userTrig, cbk) {\n        orgFlow = res.body.output\n        upsertData.flow_uid = orgFlow.uid;\n        upsertData.trigger_uid = userTrig.uid;\n        var opt = { path: triggerPath, body: triggerPath }\n        commonMock.triggerCreateSuccess(opt);\n        var triggerData = testData.triggerEnterpriseBody;\n        triggerData.trigger.flow = orgFlow.uid\n        api.post(apiURL)\n            .set({ authtoken: dummyUser.authtoken, org_uid: orgData.organization.uid })\n            .send(upsertData)\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                cbk(err, res, org)\n            });\n\n    }\n], function(err, res, org) {\n    if (err) {\n        done(err);\n    } else {\n        expect(res.body.output.uid).to.be.equal(upsertData.trigger_uid)\n            // expect(res.body.output.org_uid).to.be.equal(orgData.organization.uid)\n            // expect(res.body.output.user_uid).to.be.equal(orgData.organization.user_uid)\n        expect(res.body.output).not.to.have.all.keys(['_id', '__v']);\n        expect(res.body.output.project_uid).not.to.be.null;\n        done();\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "90db23f4-fa54-442a-8d4b-7baaf0110f0b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "87728648-09ad-45b7-bb75-79a548906e48",
              "95bc0092-faf6-4627-90a0-6058f264c45f",
              "ac4f148d-7cbc-4ff0-9f65-a4e31804350e",
              "14078b28-74c5-4298-9754-5e949b29aee7",
              "b4aac78a-76c6-4a4c-8093-aade16fb3067",
              "90db23f4-fa54-442a-8d4b-7baaf0110f0b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 666,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "21ac2f0c-e72e-4998-afa2-5e4214a37536",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\userAuth\\createUserAuth.enterprise.js",
        "file": "\\controllers\\test\\userAuth\\createUserAuth.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "87fe4046-f8ce-4bfa-95d8-122fad81de22",
            "title": "UserAuth",
            "fullFile": "D:\\api\\controllers\\test\\userAuth\\createUserAuth.enterprise.js",
            "file": "\\controllers\\test\\userAuth\\createUserAuth.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "884d63a4-8549-4467-ae3b-7f5385dc5ebc",
                "title": "UserAuth.createUserAuth",
                "fullFile": "D:\\api\\controllers\\test\\userAuth\\createUserAuth.enterprise.js",
                "file": "\\controllers\\test\\userAuth\\createUserAuth.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Enterprise UserAuth UserAuth.createUserAuth \"before all\" hook",
                    "timedOut": false,
                    "duration": 34,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.createFlowUser({}, function(error, user) {\n        if (error) {\n            done(error);\n        } else {\n            authToken = user.authtoken;\n            token = user.activation_token;\n            _id = user._id;\n            uid = user.uid;\n            done();\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1a7e3ada-8408-48d9-aafe-31f7b210e3d6",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise UserAuth UserAuth.createUserAuth \"after all\" hook",
                    "timedOut": false,
                    "duration": 7,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\nclearRecords(function(err, result) {\n    done(err);\n})",
                    "err": {},
                    "isRoot": false,
                    "uuid": "784559a1-44c9-4215-9537-d2c36e1e08d8",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should create user auth.",
                    "fullTitle": "Enterprise UserAuth UserAuth.createUserAuth Should create user auth.",
                    "timedOut": false,
                    "duration": 44,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .send(userAuthyBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.uid != \"\" &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\";\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0724e03e-bfc7-4ecb-8d37-0e44c80f4b8a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should create user auth within organization.",
                    "fullTitle": "Enterprise UserAuth UserAuth.createUserAuth Should create user auth within organization.",
                    "timedOut": false,
                    "duration": 3884,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempOrgBody = orgBody;\nasync.waterfall([\n    function(cbk) {\n        createOrgPlans(function() {\n            api.post('/enterprise/v1/organizations')\n                .send(tempOrgBody)\n                .set('authtoken', authToken)\n                .expect(httpStatus.CREATED)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        var org = res.body.output;\n                        _models.User.findOne({\n                            uid: res.body.output.user_uid\n                        }).lean().exec(function(err, user) {\n                            cbk(err, org)\n                        });\n                    }\n                });\n        });\n    },\n    function(org, cbk) {\n        api.post(apiURL)\n            .send(userAuthyBody)\n            .set({ authtoken: authToken, org_uid: org.uid })\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                cbk(err, res, org)\n            });\n    }\n], function(err, res, org) {\n    if (err) {\n        done(err);\n    } else {\n        var userAuth = res.body.output\n        var isValid = userAuth.uid != \"\" &&\n            typeof(userAuth._id) == \"undefined\" &&\n            typeof(userAuth.__v) == \"undefined\";\n        isValid.should.equal(true);\n        expect(userAuth).to.have.any.keys(['uid', 'org_uid', 'env_uid', 'project_uid']);\n        expect(userAuth.org_uid).equal(org.uid);\n        expect(userAuth.user).equal(org.org_account.uid);\n        done();\n    }\n})",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7316458d-8872-4663-b611-376cc9a94ae0",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as auth name is not provided.",
                    "fullTitle": "Enterprise UserAuth UserAuth.createUserAuth Should give error as auth name is not provided.",
                    "timedOut": false,
                    "duration": 33,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempUserAuthyBody = global.getImmutable(userAuthyBody);\ndelete tempUserAuthyBody.name;\napi.post(apiURL)\n    .send(tempUserAuthyBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.name.message.should.equal(messageList.USER_AUTH_NAME_REQUIRED);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ca6eed73-a54a-48cc-bba7-27d5cc358674",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should create auth when category is not provided.",
                    "fullTitle": "Enterprise UserAuth UserAuth.createUserAuth Should create auth when category is not provided.",
                    "timedOut": false,
                    "duration": 40,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempUserAuthyBody = global.getImmutable(userAuthyBody);\ndelete tempUserAuthyBody.category;\napi.post(apiURL)\n    .send(tempUserAuthyBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.uid != \"\" &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\";\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5160d954-cfe2-4dba-9c5c-e717a66f5431",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as auth data is not provided.",
                    "fullTitle": "Enterprise UserAuth UserAuth.createUserAuth Should give error as auth data is not provided.",
                    "timedOut": false,
                    "duration": 35,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempUserAuthyBody = global.getImmutable(userAuthyBody);\ndelete tempUserAuthyBody.data;\napi.post(apiURL)\n    .send(tempUserAuthyBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.data.message.should.equal(messageList.USER_AUTH_DATA_REQUIRED);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2ea2deea-8dbf-4f7d-9574-d546ae4b2446",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise UserAuth UserAuth.createUserAuth Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .send(userAuthyBody)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "22a2cd11-7f25-4d0a-b8dc-1a3c40dbb009",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "0724e03e-bfc7-4ecb-8d37-0e44c80f4b8a",
                  "7316458d-8872-4663-b611-376cc9a94ae0",
                  "ca6eed73-a54a-48cc-bba7-27d5cc358674",
                  "5160d954-cfe2-4dba-9c5c-e717a66f5431",
                  "2ea2deea-8dbf-4f7d-9574-d546ae4b2446",
                  "22a2cd11-7f25-4d0a-b8dc-1a3c40dbb009"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 4044,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "850c9abb-1ab1-4095-9f4c-1344ecdb5170",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\userAuth\\deleteUserAuth.enterprise.js",
        "file": "\\controllers\\test\\userAuth\\deleteUserAuth.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "b31e515e-b309-4329-9577-8876fa9151af",
            "title": "UserAuth",
            "fullFile": "D:\\api\\controllers\\test\\userAuth\\deleteUserAuth.enterprise.js",
            "file": "\\controllers\\test\\userAuth\\deleteUserAuth.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "b03f16ca-fdaf-45d4-b014-bcf1ef8b9dcc",
                "title": "UserAuth.deleteUserAuth",
                "fullFile": "D:\\api\\controllers\\test\\userAuth\\deleteUserAuth.enterprise.js",
                "file": "\\controllers\\test\\userAuth\\deleteUserAuth.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise UserAuth UserAuth.deleteUserAuth \"before each\" hook",
                    "timedOut": false,
                    "duration": 59,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.createFlowUser({}, function(error, user) {\n        if (error) {\n            done(error);\n        } else {\n            authToken = user.authtoken;\n            token = user.activation_token;\n            _id = user._id;\n            uid = user.uid;\n            apiURL = apiURL.replace(\":user_uid\", uid);\n            api.post(apiURL)\n                .send(userAuthyBody)\n                .set('authtoken', authToken)\n                .expect(httpStatus.CREATED)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        _authUid = res.body.output.uid;\n                        done();\n                    }\n                });\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4b0ae64a-c953-48e2-9cfe-bfaf91507bb9",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise UserAuth UserAuth.deleteUserAuth \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0dad1003-dfdf-4362-868c-cbd3838d9c07",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should delete user auth.",
                    "fullTitle": "Enterprise UserAuth UserAuth.deleteUserAuth Should delete user auth.",
                    "timedOut": false,
                    "duration": 41,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar deleteAPIURL = apiURL + \"/\" + _authUid;\nvar opt = { path: '/oauth/' + _authUid };\ncommonMock.authDeleteSuccess(opt);\napi.delete(deleteAPIURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.message.should.equal(messageList.USER_AUTH_DELETED_SUCCESSFULLY);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bbe9dc73-d88c-46ec-b0e4-f3b790ab6e60",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not delete another user's auth.",
                    "fullTitle": "Enterprise UserAuth UserAuth.deleteUserAuth Should not delete another user's auth.",
                    "timedOut": false,
                    "duration": 279,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar opt = { path: '/oauth/' + _authUid };\ncommonMock.authNotFound(opt);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.email = \"test.user+1@raweng.com\";\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\napi.post(\"/enterprise/v1/signup\")\n    .send(tempRegistrationBody)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            anotherUserAuthToken = res.body.output.authtoken;\n            anotherUserUid = res.body.output._id;\n            var deleteAPIURL = apiURL + \"/\" + _authUid;\n            api.delete(deleteAPIURL)\n                .set('authtoken', anotherUserAuthToken)\n                .expect(httpStatus.NOT_FOUND)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        res.body.error.message.should.equal(messageList.USER_AUTH_NOT_FOUND);\n                        done();\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d429afef-de5f-4984-b6f7-0c506328d767",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise UserAuth UserAuth.deleteUserAuth Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar deleteAPIURL = apiURL + \"/\" + _authUid;\napi.delete(deleteAPIURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0c3a1f59-c6de-49b3-9ca0-1594a2b85c1c",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "bbe9dc73-d88c-46ec-b0e4-f3b790ab6e60",
                  "d429afef-de5f-4984-b6f7-0c506328d767",
                  "0c3a1f59-c6de-49b3-9ca0-1594a2b85c1c"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 328,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "94b09e15-a209-4c3d-a373-fe457535c7e4",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\userAuth\\findUserAuth.enterprise.js",
        "file": "\\controllers\\test\\userAuth\\findUserAuth.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "2a4481b4-9a1a-4b1d-86ca-1b2ecb859dbf",
            "title": "UserAuth",
            "fullFile": "D:\\api\\controllers\\test\\userAuth\\findUserAuth.enterprise.js",
            "file": "\\controllers\\test\\userAuth\\findUserAuth.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "694bc98c-87ff-474e-80aa-f6af7fdafcc8",
                "title": "UserAuth.findUserAuth",
                "fullFile": "D:\\api\\controllers\\test\\userAuth\\findUserAuth.enterprise.js",
                "file": "\\controllers\\test\\userAuth\\findUserAuth.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Enterprise UserAuth UserAuth.findUserAuth \"before all\" hook",
                    "timedOut": false,
                    "duration": 63,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.createFlowUser({}, function(error, user) {\n        if (error) {\n            done(error);\n        } else {\n            authToken = user.authtoken;\n            token = user.activation_token;\n            _id = user._id;\n            uid = user.uid;\n            apiURL = apiURL.replace(\":user_uid\", uid);\n            api.post(apiURL)\n                .send(userAuthyBody)\n                .set('authtoken', authToken)\n                .expect(httpStatus.CREATED)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        _authUid = res.body.output.uid;\n                        done();\n                    }\n                });\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1ce24127-37f0-4806-99c6-0649b68aecb8",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise UserAuth UserAuth.findUserAuth \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b6e695b8-fd73-403b-927a-f8a884eea743",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should find user auth.",
                    "fullTitle": "Enterprise UserAuth UserAuth.findUserAuth Should find user auth.",
                    "timedOut": false,
                    "duration": 37,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar getAPIURL = apiURL + \"/\" + _authUid;\napi.get(getAPIURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.uid.should.equal(_authUid);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8ebb0bed-7abb-44bf-a3b8-a92bc37dd9ab",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error, if user auth not found.",
                    "fullTitle": "Enterprise UserAuth UserAuth.findUserAuth Should give error, if user auth not found.",
                    "timedOut": false,
                    "duration": 33,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar getAPIURL = apiURL + \"/dummyAuth\";\napi.get(getAPIURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.USER_AUTH_NOT_FOUND);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "20e4e3c4-d63e-48c3-97f7-0f18978b34c7",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise UserAuth UserAuth.findUserAuth Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 18,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar getAPIURL = apiURL + \"/\" + _authUid;\napi.get(getAPIURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a0f6e9fe-76ac-49e6-b392-172784fadc6b",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "8ebb0bed-7abb-44bf-a3b8-a92bc37dd9ab",
                  "20e4e3c4-d63e-48c3-97f7-0f18978b34c7",
                  "a0f6e9fe-76ac-49e6-b392-172784fadc6b"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 88,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "41dc4f1f-2439-460e-9c1c-2bbf0effa455",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\userAuth\\getUserAuthList.enterprise.js",
        "file": "\\controllers\\test\\userAuth\\getUserAuthList.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "a86176a5-51a6-4d6c-b477-4630b16d0be4",
            "title": "UserAuth",
            "fullFile": "D:\\api\\controllers\\test\\userAuth\\getUserAuthList.enterprise.js",
            "file": "\\controllers\\test\\userAuth\\getUserAuthList.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "1ff46c57-18a5-479f-8bb6-eb18e8628469",
                "title": "UserAuth.getUserAuthList",
                "fullFile": "D:\\api\\controllers\\test\\userAuth\\getUserAuthList.enterprise.js",
                "file": "\\controllers\\test\\userAuth\\getUserAuthList.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise UserAuth UserAuth.getUserAuthList \"before each\" hook",
                    "timedOut": false,
                    "duration": 1466,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    saveUserAuthForOneUser(\"test.user@raweng.com\", done, function() {\n        saveUserAuthForOneUser(\"test.user+10@raweng.com\", done, function() {\n            done();\n        });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8d0aafe1-ebba-4ae8-8bb7-e4f2fef3898d",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise UserAuth UserAuth.getUserAuthList \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "243622fc-ea34-4e0e-918b-07473112d6e0",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get user auths list group by type.",
                    "fullTitle": "Enterprise UserAuth UserAuth.getUserAuthList Should get user auths list group by type.",
                    "timedOut": false,
                    "duration": 64,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (Array.isArray(res.body.output)) {\n                isValid = res.body.output[0].userauths.length == 10;\n                _.each(res.body.output[0].userauths, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) != \"undefined\" &&\n                        typeof(item.__v) == \"undefined\";\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b5567f59-5b18-43c0-b376-f129082b565b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user auths.",
                    "fullTitle": "Enterprise UserAuth UserAuth.getUserAuthList Should get list of user auths.",
                    "timedOut": false,
                    "duration": 50,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?list=true\";\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (Array.isArray(res.body.output)) {\n                isValid = res.body.output.length == 10;\n                _.each(res.body.output, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) != \"undefined\" &&\n                        typeof(item.__v) == \"undefined\";\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3a7106d9-cc84-43c2-ae35-dde387a37c37",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get limited list of user auths based on skip/limit.",
                    "fullTitle": "Enterprise UserAuth UserAuth.getUserAuthList Should get limited list of user auths based on skip/limit.",
                    "timedOut": false,
                    "duration": 49,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?list=true&skip=2&limit=2&field=created_at&direction=asc\";\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (Array.isArray(res.body.output)) {\n                isValid = res.body.output.length == 2;\n                _.each(res.body.output, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) != \"undefined\" &&\n                        typeof(item.__v) == \"undefined\";\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "765d99e1-32ce-47e8-a43b-e74dd8189de5",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get limited list of user auths based on skip/limit in description descending order.",
                    "fullTitle": "Enterprise UserAuth UserAuth.getUserAuthList Should get limited list of user auths based on skip/limit in description descending order.",
                    "timedOut": false,
                    "duration": 37,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?list=true&skip=2&limit=2&field=description&direction=desc\";\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (Array.isArray(res.body.output)) {\n                isValid = res.body.output.length == 2;\n                _.each(res.body.output, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) != \"undefined\" &&\n                        typeof(item.__v) == \"undefined\";\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6e7817d3-9087-4414-bde3-12cd048492b8",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise UserAuth UserAuth.getUserAuthList Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7d2214c1-aaaf-4390-b458-23dde8a1458d",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "b5567f59-5b18-43c0-b376-f129082b565b",
                  "3a7106d9-cc84-43c2-ae35-dde387a37c37",
                  "765d99e1-32ce-47e8-a43b-e74dd8189de5",
                  "6e7817d3-9087-4414-bde3-12cd048492b8",
                  "7d2214c1-aaaf-4390-b458-23dde8a1458d"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 212,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "1b2ff61e-a4d4-4e14-8bb2-c1729714820e",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\userAuth\\updateUserAuth.enterprise.js",
        "file": "\\controllers\\test\\userAuth\\updateUserAuth.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "4171f6cf-e862-434d-9178-b970bbb76dc8",
            "title": "UserAuth",
            "fullFile": "D:\\api\\controllers\\test\\userAuth\\updateUserAuth.enterprise.js",
            "file": "\\controllers\\test\\userAuth\\updateUserAuth.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "93332f09-7bdc-4297-8cd9-e7b2a2f09a04",
                "title": "UserAuth.updateUserAuth",
                "fullFile": "D:\\api\\controllers\\test\\userAuth\\updateUserAuth.enterprise.js",
                "file": "\\controllers\\test\\userAuth\\updateUserAuth.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise UserAuth UserAuth.updateUserAuth \"before each\" hook",
                    "timedOut": false,
                    "duration": 428,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.createFlowUser({}, function(error, user) {\n        if (error) {\n            done(error);\n        } else {\n            authToken = user.authtoken;\n            token = user.activation_token;\n            _id = user._id;\n            uid = user.uid;\n            apiURL = apiURL.replace(\":uid\", uid);\n            saveUserAuthEntries({\n                authtoken: authToken\n            }, function(error, userAuthEntries) {\n                _userAuthEntries = userAuthEntries;\n                done();\n            });\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1fec24bf-1088-48c0-adbe-26db7aad17c6",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise UserAuth UserAuth.updateUserAuth \"after all\" hook",
                    "timedOut": false,
                    "duration": 10,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveRecords(function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0fb566af-732a-4bee-abe7-f01988ce2931",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise UserAuth UserAuth.updateUserAuth \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "98a40387-dd84-4da1-ac2a-e1be2472ecd0",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should update user auth.",
                    "fullTitle": "Enterprise UserAuth UserAuth.updateUserAuth Should update user auth.",
                    "timedOut": false,
                    "duration": 58,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempUserAuthyBody = global.getImmutable(_userAuthEntries[0].body.output);\ntempUserAuthyBody.name = \"utest_cases_MODIFIED\";\nparamURL = apiURL.replace(\":auth_uid\", tempUserAuthyBody.uid);\napi.put(paramURL)\n    .send(tempUserAuthyBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.uid != \"\" &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\";\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "09038cc0-cf2a-4615-aaa3-6f632e58dac0",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should update user auth within organization.",
                    "fullTitle": "Enterprise UserAuth UserAuth.updateUserAuth Should update user auth within organization.",
                    "timedOut": false,
                    "duration": 4341,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempOrgBody = orgBody;\nvar userAuth = {\n    \"category\": \"google\",\n    \"name\": \"utest_cases_org\",\n    \"data\": {\n        \"code\": \"o2t:a0738c29-7775-4cbf-88df-d2718b7cbb7d\",\n        \"keys\": [\n            \"access_token\"\n        ]\n    },\n    \"description\": \"google_drive login\",\n    \"type\": \"google_drive\",\n    \"icon\": \"google-drive\"\n};\nasync.waterfall([\n    function(cbk) {\n        createOrgPlans(function() {\n            api.post('/enterprise/v1/organizations')\n                .send(tempOrgBody)\n                .set('authtoken', authToken)\n                .expect(httpStatus.CREATED)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        var org = res.body.output;\n                        _models.User.findOne({\n                            uid: res.body.output.user_uid\n                        }).lean().exec(function(err, user) {\n                            cbk(err, org)\n                        });\n                    }\n                });\n        });\n    },\n    function(org, cbk) {\n        api.post('/enterprise/v1/user/auths')\n            .send(userAuth)\n            .set({ authtoken: authToken, org_uid: org.uid })\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                cbk(err, res, org)\n            });\n    },\n    function(res, org, cbk) {\n        var tempUserAuthyBody = res.body.output\n        tempUserAuthyBody.name = \"utest_cases_MODIFIED\";\n        paramURL = apiURL.replace(\":auth_uid\", tempUserAuthyBody.uid);\n        api.put(paramURL)\n            .send(tempUserAuthyBody)\n            .set({ authtoken: authToken, org_uid: org.uid })\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                cbk(err, res, org)\n            });\n    }\n], function(err, res, org) {\n    if (err) {\n        done(err);\n    } else {\n        var userAuth = res.body.output\n        var isValid = userAuth.uid != \"\" &&\n            typeof(userAuth._id) == \"undefined\" &&\n            typeof(userAuth.__v) == \"undefined\";\n        isValid.should.equal(true);\n        expect(userAuth).to.have.any.keys(['uid', 'org_uid', 'env_uid', 'project_uid']);\n        expect(userAuth.org_uid).equal(org.uid);\n        expect(userAuth.user).equal(org.org_account.uid);\n        done();\n    }\n})",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ba13180e-8a8a-44b7-bc8c-585936dbb5d6",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as auth name is not provided.",
                    "fullTitle": "Enterprise UserAuth UserAuth.updateUserAuth Should give error as auth name is not provided.",
                    "timedOut": false,
                    "duration": 35,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempUserAuthyBody = global.getImmutable(_userAuthEntries[0].body.output);\ndelete tempUserAuthyBody.name;\nparamURL = apiURL.replace(\":auth_uid\", tempUserAuthyBody.uid);\napi.put(paramURL)\n    .send(tempUserAuthyBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.name.message.should.equal(messageList.USER_AUTH_NAME_REQUIRED);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4dfb8779-35fd-4a40-af57-2bda421a1bea",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error, if user auth not found.",
                    "fullTitle": "Enterprise UserAuth UserAuth.updateUserAuth Should give error, if user auth not found.",
                    "timedOut": false,
                    "duration": 37,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempUserAuthyBody = global.getImmutable(_userAuthEntries[0].body.output);\nparamURL = apiURL.replace(\":auth_uid\", \"dummyAuth\");\ntempUserAuthyBody.uid = \"dummyAuth\"\napi.put(paramURL)\n    .send(tempUserAuthyBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.USER_AUTH_NOT_FOUND);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e44e31af-998e-4e0d-b3db-b7f7cfa158d7",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as auth data is not provided.",
                    "fullTitle": "Enterprise UserAuth UserAuth.updateUserAuth Should give error as auth data is not provided.",
                    "timedOut": false,
                    "duration": 28,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempUserAuthyBody = global.getImmutable(_userAuthEntries[0].body.output);\ndelete tempUserAuthyBody.data;\nparamURL = apiURL.replace(\":auth_uid\", tempUserAuthyBody.uid);\napi.put(paramURL)\n    .send(tempUserAuthyBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.data.message.should.equal(messageList.USER_AUTH_DATA_REQUIRED);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e3bb6e5a-f307-4171-a2c6-30067e8076ee",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error, if user auth not found.",
                    "fullTitle": "Enterprise UserAuth UserAuth.updateUserAuth Should give error, if user auth not found.",
                    "timedOut": false,
                    "duration": 47,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempUserAuthyBody = global.getImmutable(_userAuthEntries[0].body.output);\nparamURL = apiURL.replace(\":auth_uid\", \"dummyAuth\");\ntempUserAuthyBody.uid = \"dummyAuth\"\napi.put(paramURL)\n    .send(tempUserAuthyBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.USER_AUTH_NOT_FOUND);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9691c7d0-49b9-4b5b-b7fd-a10ebda938d5",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise UserAuth UserAuth.updateUserAuth Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempUserAuthyBody = global.getImmutable(_userAuthEntries[0].body.output);\ntempUserAuthyBody.name = \"utest_cases_MODIFIED\";\nparamURL = apiURL.replace(\":auth_uid\", tempUserAuthyBody.uid);\napi.put(paramURL)\n    .send(tempUserAuthyBody)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "46bcb69a-0ef5-4f60-b2e5-264d61076896",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "09038cc0-cf2a-4615-aaa3-6f632e58dac0",
                  "ba13180e-8a8a-44b7-bc8c-585936dbb5d6",
                  "4dfb8779-35fd-4a40-af57-2bda421a1bea",
                  "e44e31af-998e-4e0d-b3db-b7f7cfa158d7",
                  "e3bb6e5a-f307-4171-a2c6-30067e8076ee",
                  "9691c7d0-49b9-4b5b-b7fd-a10ebda938d5",
                  "46bcb69a-0ef5-4f60-b2e5-264d61076896"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 4558,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "f2c0c967-c7da-4dbd-869c-226729c6cf19",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\userAuth\\updateUserAuthName.enterprise.js",
        "file": "\\controllers\\test\\userAuth\\updateUserAuthName.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "917a8ed9-dda2-4218-94a0-8a043f602454",
            "title": "UserAuth",
            "fullFile": "D:\\api\\controllers\\test\\userAuth\\updateUserAuthName.enterprise.js",
            "file": "\\controllers\\test\\userAuth\\updateUserAuthName.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "d33a8949-3fa5-437e-b5fe-057f24cfac1f",
                "title": "UserAuth.updateUserAuthName",
                "fullFile": "D:\\api\\controllers\\test\\userAuth\\updateUserAuthName.enterprise.js",
                "file": "\\controllers\\test\\userAuth\\updateUserAuthName.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Enterprise UserAuth UserAuth.updateUserAuthName \"before all\" hook",
                    "timedOut": false,
                    "duration": 1899,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveRecords(function() {\n    commonMock.setSignUpMocks(httpmock, \"enterprise\");\n    api.post(\"/enterprise/v1/signup\")\n        .send(registrationBody)\n        .expect(httpStatus.CREATED)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                saveUserAuthEntries({\n                    authtoken: res.body.output.authtoken\n                }, function(error, userAuthEntries) {\n                    _userAuthEntries0 = userAuthEntries;\n                    var tempRegistrationBody = global.getImmutable(registrationBody);\n                    tempRegistrationBody.email = \"test.user+101@raweng.com\";\n                    commonMock.setSignUpMocks(httpmock, \"enterprise\");\n                    api.post(\"/enterprise/v1/signup\")\n                        .send(tempRegistrationBody)\n                        .expect(httpStatus.CREATED)\n                        .end(function(err, res) {\n                            if (err) {\n                                done(err);\n                            } else {\n                                authToken = res.body.output.authtoken;\n                                _id = res.body.output._id;\n\n                                saveUserAuthEntries({\n                                    authtoken: authToken\n                                }, function(error, userAuthEntries) {\n                                    _userAuthEntries1 = userAuthEntries;\n                                    done();\n                                });\n                            }\n                        });\n                });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4bc65aea-7d2a-474a-af2e-a0e150147994",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise UserAuth UserAuth.updateUserAuthName \"after all\" hook",
                    "timedOut": false,
                    "duration": 4,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveRecords(function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "22b2827d-243b-4656-b22b-5fcaa816d15d",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise UserAuth UserAuth.updateUserAuthName \"after each\" hook",
                    "timedOut": false,
                    "duration": 1,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "79cdc868-21a5-4aaf-a732-9319da2fa908",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should update user auth.",
                    "fullTitle": "Enterprise UserAuth UserAuth.updateUserAuthName Should update user auth.",
                    "timedOut": false,
                    "duration": 54,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempUserAuthyBody = global.getImmutable(_userAuthEntries1[0].body.output);\ntempUserAuthyBody.name = \"utest_cases_MODIFIED\";\nvar paramApiURL = apiURL.replace(\":auth_uid\", tempUserAuthyBody.uid);\napi.put(paramApiURL)\n    .send(tempUserAuthyBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.name.should.equal(\"utest_cases_MODIFIED\");\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2499929a-6203-4276-8e80-34fc205f9f5a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as authname is required.",
                    "fullTitle": "Enterprise UserAuth UserAuth.updateUserAuthName Should give error as authname is required.",
                    "timedOut": false,
                    "duration": 59,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempUserAuthyBody = global.getImmutable(_userAuthEntries0[0].body.output);\ntempUserAuthyBody.name = \"utest_cases_MODIFIED\";\nvar paramApiURL = apiURL.replace(\":auth_uid\", tempUserAuthyBody.uid);\napi.put(paramApiURL)\n    .send(tempUserAuthyBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.USER_AUTH_NOT_FOUND);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c23b72c8-6f9a-450b-bb7f-eb65fb7c47d5",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as authname is required.",
                    "fullTitle": "Enterprise UserAuth UserAuth.updateUserAuthName Should give error as authname is required.",
                    "timedOut": false,
                    "duration": 56,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempUserAuthyBody = global.getImmutable(_userAuthEntries1[0].body.output);\ndelete tempUserAuthyBody.name;\nvar paramApiURL = apiURL.replace(\":auth_uid\", tempUserAuthyBody.uid);\napi.put(paramApiURL)\n    .send(tempUserAuthyBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.name.message.should.equal(messageList.USER_AUTH_NAME_REQUIRED);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "577fd186-3eb0-4f1f-9c06-83970ffca3d5",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise UserAuth UserAuth.updateUserAuthName Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempUserAuthyBody = global.getImmutable(_userAuthEntries1[0].body.output);\ntempUserAuthyBody.name = \"utest_cases_MODIFIED\";\nvar paramApiURL = apiURL.replace(\":auth_uid\", tempUserAuthyBody.uid);\napi.put(paramApiURL)\n    .send(tempUserAuthyBody)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a9fc7a69-da61-42dc-93ad-a831e2b1cc41",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "2499929a-6203-4276-8e80-34fc205f9f5a",
                  "c23b72c8-6f9a-450b-bb7f-eb65fb7c47d5",
                  "577fd186-3eb0-4f1f-9c06-83970ffca3d5",
                  "a9fc7a69-da61-42dc-93ad-a831e2b1cc41"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 177,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "04f86242-12b4-43f1-9a4c-cd9c90fcb829",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\userConfig\\getConfigData.enterprise.js",
        "file": "\\controllers\\test\\userConfig\\getConfigData.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "72f48ecf-67f5-4342-bedf-858fcf3afab7",
            "title": "UserConfig.GetConfigData",
            "fullFile": "D:\\api\\controllers\\test\\userConfig\\getConfigData.enterprise.js",
            "file": "\\controllers\\test\\userConfig\\getConfigData.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise UserConfig.GetConfigData \"before all\" hook",
                "timedOut": false,
                "duration": 317,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data;\n        async.waterfall([\n            function(cbk) {\n                dummyUser = orgData.owner;\n                dummyUser.authtoken = dummyUser.authtoken;\n                testData.mongoUserTriggerObj.user_uid = dummyUser.uid;\n                _models.UserTrigger.create(testData.mongoUserTriggerObj, function(err, userTrigger) {\n                    cbk(err, userTrigger);\n                })\n            },\n            function(userTrigger, cbk) {\n                userTriggerObj = userTrigger\n                _id = dummyUser._id\n                flowData.trigger.handlers = [userTriggerObj]\n                api.post(flowURL)\n                    .set('authtoken', dummyUser.authtoken)\n                    .send(flowData)\n                    .expect(httpStatus.CREATED)\n                    .end(function(err, res) {\n                        cbk(err, res)\n                    })\n            }\n        ], function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                userFlow = res.body.output;\n                var query = _models.ConfigData.find({ flow_uid: userFlow.uid })\n                query.lean().exec(function(err, results) {\n                    if (err) {\n                        done(err)\n                    } else {\n                        configData = results\n                        done()\n                    }\n                })\n            }\n        })\n    });\n})",
                "err": {},
                "isRoot": false,
                "uuid": "e3079682-4515-4485-ae5e-eb766ebd64fb",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise UserConfig.GetConfigData \"after all\" hook",
                "timedOut": false,
                "duration": 6,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nhttpmock.cleanAll();\nasync.parallel([\n    function(cb) {\n        _models.ConfigData.remove({ uid: { $in: _.map(configData, 'uid') } }, function(err) {\n            cb(err)\n        })\n    },\n    function(cb) {\n        _models.newFlow.remove({ uid: userFlow.uid }, function(err) {\n            cb(err)\n        })\n    }\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "7311e280-23de-4727-9bcb-58a7961857f8",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise UserConfig.GetConfigData Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ndata.active_config = 'default'\nvar triggerConfigData = _.find(configData, { activity_id: 'start' })\napi.get(apiURL + dummyUser.default_config + '/configdata')\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "c6784942-c17f-4896-9c63-333a0b846682",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if user config uid is invalid.",
                "fullTitle": "Enterprise UserConfig.GetConfigData Should get error, if user config uid is invalid.",
                "timedOut": false,
                "duration": 42,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + 'dummyUser.default_config/configdata')\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.USER_CONFIG_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "26bc1b5f-06cc-45d6-8612-884e286b3b25",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get config data.",
                "fullTitle": "Enterprise UserConfig.GetConfigData Should get config data.",
                "timedOut": false,
                "duration": 58,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + dummyUser.default_config + '/configdata')\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output.length).to.be.above(1);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "12fdf37b-a6ed-4de4-8a49-068beaf59c6b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c6784942-c17f-4896-9c63-333a0b846682",
              "26bc1b5f-06cc-45d6-8612-884e286b3b25",
              "12fdf37b-a6ed-4de4-8a49-068beaf59c6b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 111,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "96c3755a-39f3-42ac-9dd7-a95ee6b35c41",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\userConfig\\getUsage.enterprise.js",
        "file": "\\controllers\\test\\userConfig\\getUsage.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "f08e9db9-2d8f-49b9-b040-9bd508af70f0",
            "title": "ConfigData.getUsage",
            "fullFile": "D:\\api\\controllers\\test\\userConfig\\getUsage.enterprise.js",
            "file": "\\controllers\\test\\userConfig\\getUsage.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise ConfigData.getUsage \"before all\" hook",
                "timedOut": false,
                "duration": 363,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(user, cbk) {\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    },\n    function(res, cbk) {\n        dummyUser = res.body.output;\n        var opt = { path: getTriggerPath, body: getTriggerPath };\n        commonMock.triggerGetSuccess(opt);\n        opt.getPath = getTriggerPath + '/handlers';\n        opt.body = { \"pull\": [/^fl\\w*/] };\n        commonMock.triggerPullSuccess(opt);\n        opt.body = { \"push\": [/^fl\\w*/] };\n        commonMock.triggerPushSuccess(opt);\n\n        api.post('/enterprise/v1/flows')\n            .set('authtoken', dummyUser.authtoken)\n            .send(flowWithAllData)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                cbk(err, res)\n            });\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        userConfig = res.body.output\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "21b64da8-101d-4e46-8cb3-9064fe3826ff",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise ConfigData.getUsage \"after all\" hook",
                "timedOut": false,
                "duration": 2,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nhttpmock.cleanAll();\n_models.ConfigData.remove({ user_uid: dummyUser.uid }, function(err) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "f530422e-2573-4540-b80b-f4c416a05bca",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise ConfigData.getUsage Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "77c48b9b-53d8-455d-99fe-00efa5d65e05",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of auth usage, if data is valid.",
                "fullTitle": "Enterprise ConfigData.getUsage Should get list of auth usage, if data is valid.",
                "timedOut": false,
                "duration": 48,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + '?auth=fl05b96ad7388b364a4d1f7c')\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(_.first(res.body.output)).to.have.any.keys(['activities', 'name', 'uid', 'flow_version']);;\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "54d92f0e-b61b-4929-bf28-542dbe41ee2a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of trigger usage, if data is valid.",
                "fullTitle": "Enterprise ConfigData.getUsage Should get list of trigger usage, if data is valid.",
                "timedOut": false,
                "duration": 213,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { path: getTriggerPath, body: getTriggerPath };\ncommonMock.triggerGetSuccess(opt);\nopt.getPath = getTriggerPath + '/handlers';\nopt.body = { \"pull\": [/^fl\\w*/] };\ncommonMock.triggerPullSuccess(opt);\nopt.body = { \"push\": [/^fl\\w*/] };\ncommonMock.triggerPushSuccess(opt);\n\napi.put('/enterprise/v1/flows/' + userConfig.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .send(flowWithAllData)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        //cbk(err, res)\n        api.get(apiURL + '?trigger=tgb00434df13b4b8564796af')\n            .set('authtoken', dummyUser.authtoken)\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    expect(_.first(res.body.output)).to.have.any.keys(['name', 'uid', 'flow_version']);;\n                    done();\n                }\n            });\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "0c91b1e1-4dc7-4833-9421-2340e520521b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of connection usage, if data is valid.",
                "fullTitle": "Enterprise ConfigData.getUsage Should get list of connection usage, if data is valid.",
                "timedOut": false,
                "duration": 47,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + '?connection=fl3ade9788e74f0554ec1852')\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(_.first(res.body.output)).to.have.any.keys(['activities', 'name', 'uid', 'flow_version']);;\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "0a29bf39-d5fe-415b-b466-bcce71c4f67e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of agent usage, if data is valid.",
                "fullTitle": "Enterprise ConfigData.getUsage Should get list of agent usage, if data is valid.",
                "timedOut": false,
                "duration": 58,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + '?agent=ega6fdbacca405caf12f0c15f')\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(_.first(res.body.output)).to.have.any.keys(['activities', 'name', 'uid', 'flow_version']);;\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "66f200c2-159f-4a09-a020-bb40c24a5ecc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of agent usage, if data is valid.",
                "fullTitle": "Enterprise ConfigData.getUsage Should get list of agent usage, if data is valid.",
                "timedOut": false,
                "duration": 77,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + '?param=random')\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(_.first(res.body.output)).to.have.any.keys(['activities', 'name', 'uid', 'flow_version']);;\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "b3e9c1d2-998e-4603-98d7-e51b218c4e5a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "77c48b9b-53d8-455d-99fe-00efa5d65e05",
              "54d92f0e-b61b-4929-bf28-542dbe41ee2a",
              "0c91b1e1-4dc7-4833-9421-2340e520521b",
              "0a29bf39-d5fe-415b-b466-bcce71c4f67e",
              "66f200c2-159f-4a09-a020-bb40c24a5ecc",
              "b3e9c1d2-998e-4603-98d7-e51b218c4e5a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 451,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "756b4447-aeaf-453e-959b-3fc4659a0d78",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\userConfig\\listConfigData.enterprise.js",
        "file": "\\controllers\\test\\userConfig\\listConfigData.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "85e7e836-1f05-4cf4-8f08-e1391c277401",
            "title": "ConfigData.List",
            "fullFile": "D:\\api\\controllers\\test\\userConfig\\listConfigData.enterprise.js",
            "file": "\\controllers\\test\\userConfig\\listConfigData.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise ConfigData.List \"before all\" hook",
                "timedOut": false,
                "duration": 389,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(user, cbk) {\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    },\n    function(res, cbk) {\n        dummyUser = res.body.output;\n        api.post('/enterprise/v1/flows')\n            .set('authtoken', dummyUser.authtoken)\n            .send(testData.flowBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                cbk(err, res)\n            });\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        userConfig = res.body.output\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "e0e8e00b-7b1f-4920-b2f2-58688fed16f9",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise ConfigData.List \"after all\" hook",
                "timedOut": false,
                "duration": 2,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nhttpmock.cleanAll();\n_models.ConfigData.remove({ user_uid: dummyUser.uid }, function(err) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "394f1f0a-f29b-49c2-aae8-ff4a4239a3ca",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise ConfigData.List Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "3112fcaa-d70e-4366-acbe-b9eb181dfcf1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of user configs, if data is valid.",
                "fullTitle": "Enterprise ConfigData.List Should get list of user configs, if data is valid.",
                "timedOut": false,
                "duration": 63,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output).to.be.array;\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "5a49ca0d-49ed-470b-9182-2196ab07526d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "3112fcaa-d70e-4366-acbe-b9eb181dfcf1",
              "5a49ca0d-49ed-470b-9182-2196ab07526d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 77,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "ada5e0db-34e1-4074-97e9-a7d21d700faf",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\userConfig\\listConfigSchema.enterprise.js",
        "file": "\\controllers\\test\\userConfig\\listConfigSchema.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "4db21401-d1a5-4ffe-8e3b-19ba78a6644d",
            "title": "ConfigSchema.List",
            "fullFile": "D:\\api\\controllers\\test\\userConfig\\listConfigSchema.enterprise.js",
            "file": "\\controllers\\test\\userConfig\\listConfigSchema.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise ConfigSchema.List \"before all\" hook",
                "timedOut": false,
                "duration": 418,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(user, cbk) {\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    },\n    function(res, cbk) {\n        dummyUser = res.body.output;\n        api.post('/enterprise/v1/flows')\n            .set('authtoken', dummyUser.authtoken)\n            .send(testData.flowBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                cbk(err, res)\n            });\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        userConfig = res.body.output\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "9b1e98d5-4be5-4437-8d45-6922c874c4a9",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise ConfigSchema.List \"after all\" hook",
                "timedOut": false,
                "duration": 3,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nhttpmock.cleanAll();\n_models.ConfigSchema.remove({ uid: dummyUser.uid }, function(err) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "a812230e-c721-4a60-b146-da1fa7734e9c",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise ConfigSchema.List Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "e90fe21a-1c06-489f-95e9-58a36b930c25",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of user configs, if data is valid.",
                "fullTitle": "Enterprise ConfigSchema.List Should get list of user configs, if data is valid.",
                "timedOut": false,
                "duration": 85,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output).to.be.array;\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "9199dc30-19bd-4af5-b356-f584f2fbac0e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e90fe21a-1c06-489f-95e9-58a36b930c25",
              "9199dc30-19bd-4af5-b356-f584f2fbac0e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 98,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "e1a29878-79a2-4b8f-9b72-34a7481cfd24",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\userConfig\\updateConfigData.enterprise.js",
        "file": "\\controllers\\test\\userConfig\\updateConfigData.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "d8927195-8816-45a0-a484-a133617a8e97",
            "title": "UserConfig.UpdateConfigData",
            "fullFile": "D:\\api\\controllers\\test\\userConfig\\updateConfigData.enterprise.js",
            "file": "\\controllers\\test\\userConfig\\updateConfigData.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise UserConfig.UpdateConfigData \"before all\" hook",
                "timedOut": false,
                "duration": 348,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data;\n        async.waterfall([\n            function(cbk) {\n                dummyUser = orgData.owner;\n                dummyUser.authtoken = dummyUser.authtoken;\n                testData.mongoUserTriggerObj.user_uid = dummyUser.uid;\n                _models.UserTrigger.create(testData.mongoUserTriggerObj, function(err, userTrigger) {\n                    cbk(err, userTrigger);\n                })\n            },\n            function(userTrigger, cbk) {\n                userTriggerObj = userTrigger\n                _id = dummyUser._id\n                flowData.trigger.handlers = [userTriggerObj]\n                api.post(flowURL)\n                    .set('authtoken', dummyUser.authtoken)\n                    .send(flowData)\n                    .expect(httpStatus.CREATED)\n                    .end(function(err, res) {\n                        cbk(err, res)\n                    })\n            }\n        ], function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                userFlow = res.body.output;\n                var query = _models.ConfigData.find({ flow_uid: userFlow.uid })\n                query.lean().exec(function(err, results) {\n                    if (err) {\n                        done(err)\n                    } else {\n                        configData = results\n                        done()\n                    }\n                })\n            }\n        })\n    });\n})",
                "err": {},
                "isRoot": false,
                "uuid": "5ccf1c8b-a787-4ea7-9335-dbed4a990163",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise UserConfig.UpdateConfigData \"after all\" hook",
                "timedOut": false,
                "duration": 5,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nhttpmock.cleanAll();\nasync.parallel([\n    function(cb) {\n        _models.ConfigData.remove({ uid: { $in: _.map(configData, 'uid') } }, function(err) {\n            cb(err)\n        })\n    },\n    function(cb) {\n        _models.newFlow.remove({ uid: userFlow.uid }, function(err) {\n            cb(err)\n        })\n    }\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "e8d7ea6c-a01b-4601-807b-e9c0203e7cbc",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise UserConfig.UpdateConfigData Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ndata.active_config = 'default'\nvar triggerConfigData = _.find(configData, { activity_id: 'start' })\napi.put(apiURL + triggerConfigData.uid)\n    .send(data)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "fed03e60-becb-4305-b097-3a4a841c0254",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if user config uid is invalid.",
                "fullTitle": "Enterprise UserConfig.UpdateConfigData Should get error, if user config uid is invalid.",
                "timedOut": false,
                "duration": 55,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ndata.config_uid = 'dummyConfig'\napi.put(apiURL + configData.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .send(data)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.USER_CONFIG_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "9f4e6ef1-b631-4d6e-a1d0-d30b2ee19f1b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if same record already present.",
                "fullTitle": "Enterprise UserConfig.UpdateConfigData Should get error, if same record already present.",
                "timedOut": false,
                "duration": 47,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar authConfigData = _.find(configData, { activity_id: 'a0' })\nvar connConfigData = _.find(configData, { activity_id: 'a1' })\napi.put(apiURL + authConfigData.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .send(connConfigData)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.RECORD_ALREADY_PRESENT);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "39792873-e36f-42bd-8fc3-85dfb51e7804",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should update config data and update flow for auth remove.",
                "fullTitle": "Enterprise UserConfig.UpdateConfigData Should update config data and update flow for auth remove.",
                "timedOut": false,
                "duration": 95,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { path: getTriggerPath, body: getTriggerPath };\ncommonMock.triggerGetSuccess(opt);\nvar authConfigData = _.find(configData, { activity_id: 'a0' })\ndelete authConfigData.auth\n    //authConfigData.auth = 'dummyAuth'\napi.put(apiURL + authConfigData.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .send(authConfigData)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var flowConfigData = res.body.output\n            expect(flowConfigData.auth).to.be.equal(undefined);\n            var query = _models.newFlow.findOne({ uid: flowConfigData.flow_uid })\n            query.lean().exec(function(err, flow) {\n                if (err) {\n                    done(err)\n                } else {\n                    expect(flow.is_draft).to.be.equal(true);\n                    expect(flow.trigger.handlers.length).to.be.equal(1);\n                    var error = _.filter(flow.errors_obj, { id: 'a0-token' })\n                    expect(error.length).to.be.gte(1);\n                    done();\n                }\n            })\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "5b439bb3-be23-4b7e-a0a1-b2869ce4299e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should update config data and update flow for connection remove.",
                "fullTitle": "Enterprise UserConfig.UpdateConfigData Should update config data and update flow for connection remove.",
                "timedOut": false,
                "duration": 89,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { path: getTriggerPath, body: getTriggerPath };\ncommonMock.triggerGetSuccess(opt);\nvar connConfigData = _.find(configData, { activity_id: 'a1' })\ndelete connConfigData.connection\napi.put(apiURL + connConfigData.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .send(connConfigData)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var flowConfigData = res.body.output\n            expect(flowConfigData.connection).to.be.equal(undefined);\n            var query = _models.newFlow.findOne({ uid: flowConfigData.flow_uid })\n            query.lean().exec(function(err, flow) {\n                if (err) {\n                    done(err)\n                } else {\n                    expect(flow.is_draft).to.be.equal(true);\n                    var error = _.filter(flow.errors_obj, { id: 'a1-connection' })\n                    expect(error.length).to.be.gte(1);\n                    done();\n                }\n            })\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "222f2aec-829c-4c0b-ad16-82e399efca33",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should update config data and update flow for agent remove.",
                "fullTitle": "Enterprise UserConfig.UpdateConfigData Should update config data and update flow for agent remove.",
                "timedOut": false,
                "duration": 88,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { path: getTriggerPath, body: getTriggerPath };\ncommonMock.triggerGetSuccess(opt);\nvar agentConfigData = _.find(configData, { activity_id: 'a2' })\ndelete agentConfigData.agent\napi.put(apiURL + agentConfigData.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .send(agentConfigData)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var flowConfigData = res.body.output\n            expect(flowConfigData.agent).to.be.equal(undefined);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "a7c73784-be87-4ceb-9617-cf9adbac8431",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if config data uid is invalid.",
                "fullTitle": "Enterprise UserConfig.UpdateConfigData Should get error, if config data uid is invalid.",
                "timedOut": false,
                "duration": 44,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar connConfigData = _.find(configData, { activity_id: 'a1' })\nconnConfigData.flow_uid = 'abc'\napi.put(apiURL + 'dummyConfigData')\n    .set('authtoken', dummyUser.authtoken)\n    .send(connConfigData)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.RECORD_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "664d0a9c-c1cd-4af2-aa19-bc22bc3fc2f1",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "fed03e60-becb-4305-b097-3a4a841c0254",
              "9f4e6ef1-b631-4d6e-a1d0-d30b2ee19f1b",
              "39792873-e36f-42bd-8fc3-85dfb51e7804",
              "5b439bb3-be23-4b7e-a0a1-b2869ce4299e",
              "222f2aec-829c-4c0b-ad16-82e399efca33",
              "a7c73784-be87-4ceb-9617-cf9adbac8431",
              "664d0a9c-c1cd-4af2-aa19-bc22bc3fc2f1"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 429,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "52ae25eb-d683-4416-b3f0-c9e715c2ef24",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\userLogs\\downloadLogsBasedOnBillUid.enterprise.js",
        "file": "\\controllers\\test\\userLogs\\downloadLogsBasedOnBillUid.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "aa3e000c-50aa-45e3-ab6b-4189688b1cd3",
            "title": "UserLogs",
            "fullFile": "D:\\api\\controllers\\test\\userLogs\\downloadLogsBasedOnBillUid.enterprise.js",
            "file": "\\controllers\\test\\userLogs\\downloadLogsBasedOnBillUid.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "7642c86a-b9c2-4266-bbcc-e947b49ceaaf",
                "title": "UserLogs.downloadLogsBasedOnBillUid",
                "fullFile": "D:\\api\\controllers\\test\\userLogs\\downloadLogsBasedOnBillUid.enterprise.js",
                "file": "\\controllers\\test\\userLogs\\downloadLogsBasedOnBillUid.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Enterprise UserLogs UserLogs.downloadLogsBasedOnBillUid \"before all\" hook",
                    "timedOut": false,
                    "duration": 3563,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveEntries(function() {\n    commonMock.setSignUpMocks(httpmock, \"enterprise\");\n    api.post(\"/enterprise/v1/signup\")\n        .send(registrationBody)\n        .expect(httpStatus.CREATED)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                fillEntries(res.body.output.uid, res.body.output.authtoken, function(error, result) {\n                    if (error) {\n                        done(error);\n                    } else {\n                        var tempImmutableSignupObject = getImmutable(registrationBody);\n                        tempImmutableSignupObject.email = \"test.user+101@raweng.com\";\n                        commonMock.setSignUpMocks(httpmock, \"enterprise\", {\n                            email: tempImmutableSignupObject.email\n                        });\n                        api.post(\"/enterprise/v1/signup\")\n                            .send(tempImmutableSignupObject)\n                            .expect(httpStatus.CREATED)\n                            .end(function(error, res) {\n                                if (error) {\n                                    done(error);\n                                } else {\n                                    authToken = res.body.output.authtoken;\n                                    user_uid = res.body.output.uid;\n                                    fillEntries(res.body.output.uid, res.body.output.authtoken, function(error, result) {\n                                        if (error) {\n                                            done(error);\n                                        } else {\n                                            done();\n                                        }\n                                    });\n                                }\n                            });\n                    }\n                });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d0ec38f7-a086-4b69-99da-7381c356aeab",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise UserLogs UserLogs.downloadLogsBasedOnBillUid \"after all\" hook",
                    "timedOut": false,
                    "duration": 5,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveEntries(function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b273d5c2-dca7-452c-b283-62129675f4a0",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get list of bill logs.",
                    "fullTitle": "Enterprise UserLogs UserLogs.downloadLogsBasedOnBillUid Should get list of bill logs.",
                    "timedOut": false,
                    "duration": 65,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar paramURL = apiURL.replace(\":bill_uid\", secondBillUid) + \"?authtoken=\" + authToken;\napi.get(paramURL)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f62569b5-87b8-4f4c-b473-629ae0295dfe",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise UserLogs UserLogs.downloadLogsBasedOnBillUid Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar paramURL = apiURL.replace(\":bill_uid\", secondBillUid);\napi.get(paramURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ce61f778-2bf2-4c5f-a194-a7edcfc31b40",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "f62569b5-87b8-4f4c-b473-629ae0295dfe",
                  "ce61f778-2bf2-4c5f-a194-a7edcfc31b40"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 77,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "b18a8aee-8a40-4810-8d2d-0a394b9cd4ea",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\userLogs\\downloadLogsBasedOnBillUidOrg.enterprise.js",
        "file": "\\controllers\\test\\userLogs\\downloadLogsBasedOnBillUidOrg.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "1715eede-f1cc-48d0-934f-0115ea9aeee0",
            "title": "UserLogs",
            "fullFile": "D:\\api\\controllers\\test\\userLogs\\downloadLogsBasedOnBillUidOrg.enterprise.js",
            "file": "\\controllers\\test\\userLogs\\downloadLogsBasedOnBillUidOrg.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "0983798a-1205-49be-b21b-e354358c1fe3",
                "title": "UserLogs.downloadLogsBasedOnBillUidOrg",
                "fullFile": "D:\\api\\controllers\\test\\userLogs\\downloadLogsBasedOnBillUidOrg.enterprise.js",
                "file": "\\controllers\\test\\userLogs\\downloadLogsBasedOnBillUidOrg.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise UserLogs UserLogs.downloadLogsBasedOnBillUidOrg \"before each\" hook",
                    "timedOut": false,
                    "duration": 1795,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_acc_authToken = _.first(data.organization_account.authtoken);\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        api.get(\"/enterprise/v1/projects\")\n            .set('org_uid', org_uid)\n            .set('authtoken', authToken)\n            .expect(httpStatus.OK)\n            .end(function(error, res) {\n                project_uid = _.first(res.body.output.projects).uid\n                api.get(\"/enterprise/v1/user\")\n                    .set('org_uid', org_uid)\n                    .set('authtoken', authToken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        env_uid = res.body.output.env_uid;\n                        fillEntries(user_uid, authToken, function(error, result) {\n                            if (error) {\n                                done(error);\n                            } else {\n                                done();\n                            }\n                        });\n                    });\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6d776b92-c692-4883-81f3-dcab191606c0",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise UserLogs UserLogs.downloadLogsBasedOnBillUidOrg \"after each\" hook",
                    "timedOut": false,
                    "duration": 9,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ntestCollection.organizationRemoveRecords({}, function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3c3a0c82-1a12-4eed-bd5a-9aaaf25a2672",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get list of bill logs.",
                    "fullTitle": "Enterprise UserLogs UserLogs.downloadLogsBasedOnBillUidOrg Should get list of bill logs.",
                    "timedOut": false,
                    "duration": 59,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar paramURL = apiURL.replace(\":bill_uid\", secondBillUid) + \"?authtoken=\" + authToken;\napi.get(paramURL)\n    .set(\"org_uid\", org_uid)\n    .set(\"project_uid\", project_uid)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "08663b2d-96f0-4be2-940e-2f38ad69b5fa",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise UserLogs UserLogs.downloadLogsBasedOnBillUidOrg Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar paramURL = apiURL.replace(\":bill_uid\", secondBillUid);\napi.get(paramURL)\n    .set(\"org_uid\", org_uid)\n    .set(\"project_uid\", project_uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d8f4b80a-aeca-4d02-b372-4ec38170aa47",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "08663b2d-96f0-4be2-940e-2f38ad69b5fa",
                  "d8f4b80a-aeca-4d02-b372-4ec38170aa47"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 70,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "4859c6a0-1bf2-47d9-9b48-043d31930654",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\userLogs\\getDebugMessage.enterprise.js",
        "file": "\\controllers\\test\\userLogs\\getDebugMessage.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "6a0a9455-6f42-46d4-ac14-04fa7998d40f",
            "title": "logs",
            "fullFile": "D:\\api\\controllers\\test\\userLogs\\getDebugMessage.enterprise.js",
            "file": "\\controllers\\test\\userLogs\\getDebugMessage.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "922e3b22-e678-42ad-9bbc-70a7a7fcac0b",
                "title": "UserLogs.getDebugMessage",
                "fullFile": "D:\\api\\controllers\\test\\userLogs\\getDebugMessage.enterprise.js",
                "file": "\\controllers\\test\\userLogs\\getDebugMessage.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise logs UserLogs.getDebugMessage \"before each\" hook",
                    "timedOut": false,
                    "duration": 566,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nclearRecords(function() {\n    _models.User.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n        _models.Mail.remove({ $or: [{ to: new RegExp('^test.user+', \"i\") }, { to: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n            _models.Log.remove({ flow_name: new RegExp('^utest_cases_', \"i\") }, function(error, user) {\n                commonMock.setSignUpMocks(httpmock, \"enterprise\");\n                api.post(\"/enterprise/v1/signup\")\n                    .send(registrationBody)\n                    .expect(httpStatus.CREATED)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            authToken = res.body.output.authtoken;\n                            api.get(\"/enterprise/v1/user\")\n                                .set('authtoken', authToken)\n                                .expect(httpStatus.OK)\n                                .end(function(err, res) {\n                                    user_uid = res.body.output.uid;\n                                    env_uid = res.body.output.env_uid;\n                                    saveUserLogs({\n                                            authtoken: authToken,\n                                            user_uid: user_uid\n                                        },\n                                        function(error, userLogs) {\n                                            _userLogs = userLogs;\n                                            done();\n                                        });\n                                });\n                        }\n                    });\n            });\n        });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5e74c66b-f053-4bef-ac06-954737fd2e52",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise logs UserLogs.getDebugMessage \"after all\" hook",
                    "timedOut": false,
                    "duration": 1,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.Log.remove({ flow_name: new RegExp('^utest_cases_', \"i\") }, function(error, user) {\n    if (error) {\n        done(error);\n    } else {\n        done();\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6d49f5c3-b864-40e7-8697-a89b458c4ad5",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get list of user logs.",
                    "fullTitle": "Enterprise logs UserLogs.getDebugMessage Should get list of user logs.",
                    "timedOut": false,
                    "duration": 47,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar log_uid = _userLogs[0].body.output.uid;\nvar paramURL = apiURL.replace(\":log_uid\", log_uid);\napi.get(paramURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.uid.should.equal(log_uid);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "da280e16-4deb-49a5-9e42-944cd051b11e",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise logs UserLogs.getDebugMessage Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "beee595e-601f-44de-93a4-faeed49947f1",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "da280e16-4deb-49a5-9e42-944cd051b11e",
                  "beee595e-601f-44de-93a4-faeed49947f1"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 57,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "92982e1e-0e0a-4a01-87a7-e708b5dcdeba",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\userLogs\\getDebugMessageOrg.enterprise.js",
        "file": "\\controllers\\test\\userLogs\\getDebugMessageOrg.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "4a31141d-73b7-4003-b1d9-a43d069d843e",
            "title": "logs",
            "fullFile": "D:\\api\\controllers\\test\\userLogs\\getDebugMessageOrg.enterprise.js",
            "file": "\\controllers\\test\\userLogs\\getDebugMessageOrg.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "42d9e968-2787-44ad-a536-b1cc197bc486",
                "title": "UserLogs.getDebugMessageOrg",
                "fullFile": "D:\\api\\controllers\\test\\userLogs\\getDebugMessageOrg.enterprise.js",
                "file": "\\controllers\\test\\userLogs\\getDebugMessageOrg.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise logs UserLogs.getDebugMessageOrg \"before each\" hook",
                    "timedOut": false,
                    "duration": 710,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_acc_authToken = _.first(data.organization_account.authtoken);\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        api.get(\"/enterprise/v1/projects\")\n            .set('org_uid', org_uid)\n            .set('authtoken', authToken)\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                project_uid = _.first(res.body.output.projects).uid\n                api.get(\"/enterprise/v1/user\")\n                    .set('org_uid', org_uid)\n                    .set('authtoken', authToken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        env_uid = res.body.output.env_uid;\n                        saveUserLogs({\n                                authtoken: authToken,\n                                user_uid: user_uid\n                            },\n                            function(error, userLogs) {\n                                _userLogs = userLogs;\n                                done();\n                            });\n                    });\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "793f760b-7275-4190-9618-ed9a3c38de18",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise logs UserLogs.getDebugMessageOrg \"after each\" hook",
                    "timedOut": false,
                    "duration": 8,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ntestCollection.organizationRemoveRecords({}, function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "df2732a3-a3f9-46ad-9a35-9677940fb10b",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get list of user logs.",
                    "fullTitle": "Enterprise logs UserLogs.getDebugMessageOrg Should get list of user logs.",
                    "timedOut": false,
                    "duration": 47,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar log_uid = _userLogs[0].body.output.uid;\nvar paramURL = apiURL.replace(\":log_uid\", log_uid);\napi.get(paramURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.uid.should.equal(log_uid);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "72378985-c47a-4356-9efd-3e71d5b2833a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise logs UserLogs.getDebugMessageOrg Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5bec2770-89eb-4e2a-b392-495537079baa",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "72378985-c47a-4356-9efd-3e71d5b2833a",
                  "5bec2770-89eb-4e2a-b392-495537079baa"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 55,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "71a0a794-1969-4e69-b59f-dea049fed921",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\userLogs\\getLogs.enterprise.js",
        "file": "\\controllers\\test\\userLogs\\getLogs.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "72725774-4ed2-48c2-97ab-ff7173f20cd2",
            "title": "logs",
            "fullFile": "D:\\api\\controllers\\test\\userLogs\\getLogs.enterprise.js",
            "file": "\\controllers\\test\\userLogs\\getLogs.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "23495d6b-a569-4430-a84c-8fba41bc0f6a",
                "title": "UserLogs.getLogs",
                "fullFile": "D:\\api\\controllers\\test\\userLogs\\getLogs.enterprise.js",
                "file": "\\controllers\\test\\userLogs\\getLogs.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise logs UserLogs.getLogs \"before each\" hook",
                    "timedOut": false,
                    "duration": 431,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        api.get(\"/enterprise/v1/user\")\n            .set('authtoken', authToken)\n            .expect(httpStatus.OK)\n            .end(function(error, res) {\n                saveUserLogs({\n                        authtoken: authToken,\n                        user_uid: user_uid\n                    },\n                    function(error, userLogs) {\n                        savedUserLogs = userLogs;\n                        done();\n                    });\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a9e45922-9001-47a8-9f04-dc42b5ea161e",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise logs UserLogs.getLogs \"after each\" hook",
                    "timedOut": false,
                    "duration": 8,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ntestCollection.organizationRemoveRecords({}, function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f65972e1-1e31-4837-abe8-b7129b65b1cf",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get list of user logs.",
                    "fullTitle": "Enterprise logs UserLogs.getLogs Should get list of user logs.",
                    "timedOut": false,
                    "duration": 55,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = Array.isArray(res.body.output.objects);\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\";\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "11e7d3df-e147-4475-8939-26f3171a617b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get limited list of user logs based on skip/limit.",
                    "fullTitle": "Enterprise logs UserLogs.getLogs Should get limited list of user logs based on skip/limit.",
                    "timedOut": false,
                    "duration": 38,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar skipLimitURL = apiURL + \"?limit=2&skip=2\";\napi.get(skipLimitURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (res.body.output.count == 5) {\n                isValid = Array.isArray(res.body.output.objects) &&\n                    res.body.output.objects.length == 2;\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9609b82d-134d-4c5c-885e-abb72da6305f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise logs UserLogs.getLogs Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2f21c220-ddee-4608-b397-7541b0c18ddb",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "11e7d3df-e147-4475-8939-26f3171a617b",
                  "9609b82d-134d-4c5c-885e-abb72da6305f",
                  "2f21c220-ddee-4608-b397-7541b0c18ddb"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 105,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "96699b6e-6758-477c-b7b9-55e5a5ce06ed",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\userLogs\\getLogsBasedOnBillUid.enterprise.js",
        "file": "\\controllers\\test\\userLogs\\getLogsBasedOnBillUid.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "c16ed803-53bd-461b-a1d4-3991c3df62ac",
            "title": "UserLogs",
            "fullFile": "D:\\api\\controllers\\test\\userLogs\\getLogsBasedOnBillUid.enterprise.js",
            "file": "\\controllers\\test\\userLogs\\getLogsBasedOnBillUid.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "0f6a1388-7702-4b09-86ac-068fd6343002",
                "title": "UserLogs.getLogsBasedOnBillUid",
                "fullFile": "D:\\api\\controllers\\test\\userLogs\\getLogsBasedOnBillUid.enterprise.js",
                "file": "\\controllers\\test\\userLogs\\getLogsBasedOnBillUid.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise UserLogs UserLogs.getLogsBasedOnBillUid \"before each\" hook",
                    "timedOut": false,
                    "duration": 1681,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveEntries(function() {\n    commonMock.setSignUpMocks(httpmock, \"enterprise\");\n    api.post(\"/enterprise/v1/signup\")\n        .send(registrationBody)\n        .expect(httpStatus.CREATED)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                authToken = res.body.output.authtoken;\n\n                api.get(\"/enterprise/v1/user\")\n                    .set('authtoken', authToken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        user_uid = res.body.output.uid;\n                        env_uid = res.body.output.env_uid;\n                        fillEntries(res.body.output.uid, res.body.output.authtoken, function(error, result) {\n                            if (error) {\n                                done(error);\n                            } else {\n                                done();\n                            }\n                        });\n                    });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "77d99e57-3a4f-4604-b638-ffa32f7e0053",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise UserLogs UserLogs.getLogsBasedOnBillUid \"after all\" hook",
                    "timedOut": false,
                    "duration": 6,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveEntries(function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3ab03272-5f16-4c0b-ac4a-3a9a457f8e8e",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get list of bill logs.",
                    "fullTitle": "Enterprise UserLogs UserLogs.getLogsBasedOnBillUid Should get list of bill logs.",
                    "timedOut": false,
                    "duration": 57,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar paramURL = apiURL.replace(\":bill_uid\", secondBillUid);\napi.get(paramURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (Array.isArray(res.body.output.objects)) {\n                isValid = res.body.output.objects.length == 10;\n                if (isValid) {\n                    _.each(res.body.output.objects, function(item) {\n                        isValid = isValid &&\n                            item.user_uid == user_uid &&\n                            typeof(item._id) == \"undefined\" &&\n                            typeof(item.__v) == \"undefined\";\n                    });\n                }\n            }\n            isValid.should.be.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f8b6e755-f692-4111-9a2a-5ca4ebefede8",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get limited list of bill logs based on skip/limit.",
                    "fullTitle": "Enterprise UserLogs UserLogs.getLogsBasedOnBillUid Should get limited list of bill logs based on skip/limit.",
                    "timedOut": false,
                    "duration": 41,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar paramURL = apiURL.replace(\":bill_uid\", secondBillUid) + \"?skip=2&limit=2\";\napi.get(paramURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = Array.isArray(res.body.output.objects);\n            isValid.should.be.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ec19a5de-4775-41c4-9f5a-2196607367f2",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get limited list of bill logs based on skip/limit in descending order of message.",
                    "fullTitle": "Enterprise UserLogs UserLogs.getLogsBasedOnBillUid Should get limited list of bill logs based on skip/limit in descending order of message.",
                    "timedOut": false,
                    "duration": 46,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar paramURL = apiURL.replace(\":bill_uid\", secondBillUid) + \"?skip=2&limit=2&field=message&direction=asc\";\napi.get(paramURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = Array.isArray(res.body.output.objects);\n            isValid.should.be.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a6c4c33b-b2c7-4a8d-a499-cbbced21d7f8",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of bill old logs.",
                    "fullTitle": "Enterprise UserLogs UserLogs.getLogsBasedOnBillUid Should get list of bill old logs.",
                    "timedOut": false,
                    "duration": 57,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar paramURL = apiURL.replace(\":bill_uid\", secondBillUid);\napi.get(paramURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (Array.isArray(res.body.output.objects)) {\n                //isValid = res.body.output.objects.length == 10;\n                isValid = true; //res.body.output.objects.length == 10;\n            }\n            isValid.should.be.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a1d706fa-dff9-462e-b0ef-e04115221506",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get limited list of bill old logs based on skip/limit.",
                    "fullTitle": "Enterprise UserLogs UserLogs.getLogsBasedOnBillUid Should get limited list of bill old logs based on skip/limit.",
                    "timedOut": false,
                    "duration": 54,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar paramURL = apiURL.replace(\":bill_uid\", firstBillUid) + \"?skip=2&limit=2\";\napi.get(paramURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (Array.isArray(res.body.output.objects)) {\n                /*\n                isValid = res.body.output.objects[0].uid == _oldLogEntries[7].body.output.uid &&\n                    res.body.output.objects[1].uid == _oldLogEntries[6].body.output.uid;\n                */\n                isValid = true; //res.body.output.objects.length == 2;\n            }\n            isValid.should.be.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6d353357-2450-4c12-9eae-a155649154d2",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get limited list of bill old logs based on skip/limit in descending order of message.",
                    "fullTitle": "Enterprise UserLogs UserLogs.getLogsBasedOnBillUid Should get limited list of bill old logs based on skip/limit in descending order of message.",
                    "timedOut": false,
                    "duration": 50,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar paramURL = apiURL.replace(\":bill_uid\", firstBillUid) + \"?skip=2&limit=2&field=message&direction=asc\";\napi.get(paramURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (Array.isArray(res.body.output.objects)) {\n                isValid = true; //res.body.output.objects.length == 2;\n            }\n            isValid.should.be.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "56405bfc-0ba7-4865-b117-64cd48708e95",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise UserLogs UserLogs.getLogsBasedOnBillUid Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar paramURL = apiURL.replace(\":bill_uid\", secondBillUid);\napi.get(paramURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7509f41c-f6d1-414d-8124-4bc7518e4a18",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "f8b6e755-f692-4111-9a2a-5ca4ebefede8",
                  "ec19a5de-4775-41c4-9f5a-2196607367f2",
                  "a6c4c33b-b2c7-4a8d-a499-cbbced21d7f8",
                  "a1d706fa-dff9-462e-b0ef-e04115221506",
                  "6d353357-2450-4c12-9eae-a155649154d2",
                  "56405bfc-0ba7-4865-b117-64cd48708e95",
                  "7509f41c-f6d1-414d-8124-4bc7518e4a18"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 318,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "e9aded90-b288-45da-815a-2672c57fb9d8",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\userLogs\\getLogsBasedOnBillUidOrg.enterprise.js",
        "file": "\\controllers\\test\\userLogs\\getLogsBasedOnBillUidOrg.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "f4cb8806-3470-47a8-abbc-7422de457ec2",
            "title": "UserLogs",
            "fullFile": "D:\\api\\controllers\\test\\userLogs\\getLogsBasedOnBillUidOrg.enterprise.js",
            "file": "\\controllers\\test\\userLogs\\getLogsBasedOnBillUidOrg.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "a6eac72b-9854-4db1-acb3-55765d30193b",
                "title": "UserLogs.getLogsBasedOnBillUidOrg",
                "fullFile": "D:\\api\\controllers\\test\\userLogs\\getLogsBasedOnBillUidOrg.enterprise.js",
                "file": "\\controllers\\test\\userLogs\\getLogsBasedOnBillUidOrg.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise UserLogs UserLogs.getLogsBasedOnBillUidOrg \"before each\" hook",
                    "timedOut": false,
                    "duration": 1843,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_acc_authToken = _.first(data.organization_account.authtoken);\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        api.get(\"/enterprise/v1/projects\")\n            .set('org_uid', org_uid)\n            .set('authtoken', authToken)\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                project_uid = _.first(res.body.output.projects).uid\n                api.get(\"/enterprise/v1/user\")\n                    .set('org_uid', org_uid)\n                    .set('authtoken', authToken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        env_uid = res.body.output.env_uid;\n                        fillEntries(user_uid, authToken, function(error, result) {\n                            if (error) {\n                                done(error);\n                            } else {\n                                done();\n                            }\n                        });\n                    });\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fd52ae76-a902-4ebd-8be3-8620e590a47c",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise UserLogs UserLogs.getLogsBasedOnBillUidOrg \"after each\" hook",
                    "timedOut": false,
                    "duration": 11,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2b30f696-0482-4d82-96a7-5b142dc7b859",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get list of bill logs.",
                    "fullTitle": "Enterprise UserLogs UserLogs.getLogsBasedOnBillUidOrg Should get list of bill logs.",
                    "timedOut": false,
                    "duration": 51,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar paramURL = apiURL.replace(\":bill_uid\", secondBillUid);\napi.get(paramURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (Array.isArray(res.body.output.objects)) {\n                isValid = res.body.output.objects.length == 10;\n                if (isValid) {\n                    _.each(res.body.output.objects, function(item) {\n                        isValid = isValid &&\n                            item.user_uid == org_account_uid &&\n                            typeof(item._id) == \"undefined\" &&\n                            typeof(item.__v) == \"undefined\";\n                    });\n                }\n            }\n            isValid.should.be.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2ac53e83-8d2f-4358-8f68-709ea35e60cc",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get limited list of bill logs based on skip/limit.",
                    "fullTitle": "Enterprise UserLogs UserLogs.getLogsBasedOnBillUidOrg Should get limited list of bill logs based on skip/limit.",
                    "timedOut": false,
                    "duration": 51,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar paramURL = apiURL.replace(\":bill_uid\", secondBillUid) + \"?skip=2&limit=2\";\napi.get(paramURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = Array.isArray(res.body.output.objects);\n            isValid.should.be.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ed83c7da-65a4-4115-9604-58dfeb60a1b2",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get limited list of bill logs based on skip/limit in descending order of message.",
                    "fullTitle": "Enterprise UserLogs UserLogs.getLogsBasedOnBillUidOrg Should get limited list of bill logs based on skip/limit in descending order of message.",
                    "timedOut": false,
                    "duration": 49,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar paramURL = apiURL.replace(\":bill_uid\", secondBillUid) + \"?skip=2&limit=2&field=message&direction=asc\";\napi.get(paramURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = Array.isArray(res.body.output.objects);\n            isValid.should.be.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0d2f06ac-c828-4a7d-8780-96aebcdb288e",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of bill old logs.",
                    "fullTitle": "Enterprise UserLogs UserLogs.getLogsBasedOnBillUidOrg Should get list of bill old logs.",
                    "timedOut": false,
                    "duration": 52,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar paramURL = apiURL.replace(\":bill_uid\", firstBillUid);\napi.get(paramURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (Array.isArray(res.body.output.objects)) {\n                //isValid = res.body.output.objects.length == 10;\n                isValid = res.body.output.objects.length == 10;\n            }\n            isValid.should.be.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "af3c8bcc-7455-43a8-a885-7576e88504c2",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get limited list of bill old logs based on skip/limit.",
                    "fullTitle": "Enterprise UserLogs UserLogs.getLogsBasedOnBillUidOrg Should get limited list of bill old logs based on skip/limit.",
                    "timedOut": false,
                    "duration": 59,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar paramURL = apiURL.replace(\":bill_uid\", firstBillUid) + \"?skip=2&limit=2\";\napi.get(paramURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (Array.isArray(res.body.output.objects)) {\n                /*\n                isValid = res.body.output.objects[0].uid == _oldLogEntries[7].body.output.uid &&\n                    res.body.output.objects[1].uid == _oldLogEntries[6].body.output.uid;\n                */\n                isValid = res.body.output.objects.length == 2;\n            }\n            isValid.should.be.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1813653a-1d0b-49a4-b4dc-c56e6257ac29",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get limited list of bill old logs based on skip/limit in descending order of message.",
                    "fullTitle": "Enterprise UserLogs UserLogs.getLogsBasedOnBillUidOrg Should get limited list of bill old logs based on skip/limit in descending order of message.",
                    "timedOut": false,
                    "duration": 54,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar paramURL = apiURL.replace(\":bill_uid\", firstBillUid) + \"?skip=2&limit=2&field=message&direction=asc\";\napi.get(paramURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (Array.isArray(res.body.output.objects)) {\n                /*\n                isValid = res.body.output.objects[0].uid == _oldLogEntries[2].body.output.uid &&\n                    res.body.output.objects[1].uid == _oldLogEntries[3].body.output.uid;\n                */\n                isValid = res.body.output.objects.length == 2;\n            }\n            isValid.should.be.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "823f81a2-93dc-4ab1-9987-667b4159808c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise UserLogs UserLogs.getLogsBasedOnBillUidOrg Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar paramURL = apiURL.replace(\":bill_uid\", secondBillUid);\napi.get(paramURL)\n    .set('org_uid', org_uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cc196f30-6813-43db-89a5-53cd01905c15",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "2ac53e83-8d2f-4358-8f68-709ea35e60cc",
                  "ed83c7da-65a4-4115-9604-58dfeb60a1b2",
                  "0d2f06ac-c828-4a7d-8780-96aebcdb288e",
                  "af3c8bcc-7455-43a8-a885-7576e88504c2",
                  "1813653a-1d0b-49a4-b4dc-c56e6257ac29",
                  "823f81a2-93dc-4ab1-9987-667b4159808c",
                  "cc196f30-6813-43db-89a5-53cd01905c15"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 327,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "1fe673aa-5b31-48a4-a4df-6b2d92259496",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\userLogs\\getLogsOrg.enterprise.js",
        "file": "\\controllers\\test\\userLogs\\getLogsOrg.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "8ab6f389-f9e7-4e69-bed5-1827e8917917",
            "title": "logs",
            "fullFile": "D:\\api\\controllers\\test\\userLogs\\getLogsOrg.enterprise.js",
            "file": "\\controllers\\test\\userLogs\\getLogsOrg.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "609cbda5-8f66-4e80-954e-1f2d6e89c19a",
                "title": "UserLogs.getLogs",
                "fullFile": "D:\\api\\controllers\\test\\userLogs\\getLogsOrg.enterprise.js",
                "file": "\\controllers\\test\\userLogs\\getLogsOrg.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise logs UserLogs.getLogs \"before each\" hook",
                    "timedOut": false,
                    "duration": 485,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_acc_authToken = _.first(data.organization_account.authtoken);\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        api.get(\"/enterprise/v1/projects\")\n            .set('org_uid', org_uid)\n            .set('authtoken', authToken)\n            .expect(httpStatus.OK)\n            .end(function(error, res) {\n                project_uid = _.first(res.body.output.projects).uid\n                api.get(\"/enterprise/v1/user\")\n                    .set('org_uid', org_uid)\n                    .set('authtoken', authToken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        env_uid = res.body.output.env_uid;\n                        saveUserLogs({\n                                authtoken: authToken,\n                                user_uid: user_uid\n                            },\n                            function(error, userLogs) {\n                                savedUserLogs = userLogs;\n                                done();\n                            });\n                    });\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2a29b136-3d32-46f5-a1b2-df99bb30edb9",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise logs UserLogs.getLogs \"after each\" hook",
                    "timedOut": false,
                    "duration": 11,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ntestCollection.organizationRemoveRecords({}, function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cab6fd90-6c5f-4b72-8f77-972419ba5553",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get list of user logs.",
                    "fullTitle": "Enterprise logs UserLogs.getLogs Should get list of user logs.",
                    "timedOut": false,
                    "duration": 50,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = Array.isArray(res.body.output.objects);\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\";\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7cac76f1-81b3-48ef-af2a-ff9f79c8fe90",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get limited list of user logs based on skip/limit.",
                    "fullTitle": "Enterprise logs UserLogs.getLogs Should get limited list of user logs based on skip/limit.",
                    "timedOut": false,
                    "duration": 55,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar skipLimitURL = apiURL + \"?limit=2&skip=2\";\napi.get(skipLimitURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = Array.isArray(res.body.output.objects);\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\";\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "97053d14-e3c7-4076-b67b-78b73db2d84f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise logs UserLogs.getLogs Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "98dbc0cb-21c5-4133-9774-71c2fa186cd6",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "7cac76f1-81b3-48ef-af2a-ff9f79c8fe90",
                  "97053d14-e3c7-4076-b67b-78b73db2d84f",
                  "98dbc0cb-21c5-4133-9774-71c2fa186cd6"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 116,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "c79adb2e-4f76-4bcc-884f-62eaa90b184b",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\users\\activate.enterprise.js",
        "file": "\\controllers\\test\\users\\activate.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "f8068c04-5400-40a3-a11e-f5fd70f56dd0",
            "title": "User",
            "fullFile": "D:\\api\\controllers\\test\\users\\activate.enterprise.js",
            "file": "\\controllers\\test\\users\\activate.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "4621ca30-dedc-466e-a063-d14420d3c1f3",
                "title": "User.activate",
                "fullFile": "D:\\api\\controllers\\test\\users\\activate.enterprise.js",
                "file": "\\controllers\\test\\users\\activate.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.activate \"before each\" hook",
                    "timedOut": false,
                    "duration": 20,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.createFlowUser({}, function(error, user) {\n        if (error) {\n            done(error);\n        } else {\n            authToken = user.authtoken;\n            token = user.activation_token;\n            _id = user._id;\n            uid = user.uid;\n            done();\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1c48cc8e-a92f-4ba1-88d4-8d48341d40c9",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User User.activate \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d277867a-7819-43a4-bf85-9272c3d06799",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should activate account.",
                    "fullTitle": "Enterprise User User.activate Should activate account.",
                    "timedOut": false,
                    "duration": 17,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .send({\n        user_uid: uid,\n        token: token\n    })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.message.should.equal(messageList.USER_ACTIVATION_ACTIVATED_SUCCESSFULLY);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2d209e33-e0a4-446a-ad67-e8fc834884a2",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should activate account after activation_expired gets false.",
                    "fullTitle": "Enterprise User User.activate Should activate account after activation_expired gets false.",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.findOneAndUpdate({\n    uid: uid\n}, {\n    activation_expired: true,\n    active: false\n}, function(error, result) {\n    api.post(apiURL)\n        .send({\n            user_uid: uid,\n            token: token\n        })\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                _models.User.findOne({\n                    uid: uid\n                }).lean().exec(function(error, user) {\n                    (user.activation_expired == false && user.active).should.equal(true);\n                    done();\n                });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a88c0686-09d4-4f75-a07d-50146e48bc3c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should activate account, when user is lock.",
                    "fullTitle": "Enterprise User User.activate Should activate account, when user is lock.",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.findOneAndUpdate({ \"uid\": uid }, {\n    failed_login_count: 7\n}, { new: true }, function(err, user) {\n    api.post(\"/enterprise/v1/user/activate\")\n        .send({\n            user_uid: uid,\n            token: token\n        })\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                res.body.output.message.should.equal(messageList.USER_ACTIVATION_ACTIVATED_SUCCESSFULLY);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5442bbd6-a5db-4212-99ad-d3ae9352cb52",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should allowed to raised forgot password request, for 5 times invalid login attempt user.",
                    "fullTitle": "Enterprise User User.activate Should allowed to raised forgot password request, for 5 times invalid login attempt user.",
                    "timedOut": false,
                    "duration": 18,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempBody = getImmutable(loginBody);\ntempBody.password = \"abc123\";\nvar loginCount = [];\n_models.User.findOneAndUpdate({\n    uid: uid\n}, {\n    failed_login_count: 5\n}, { new: true }, function(error, result) {\n    if (error) {\n        done(error);\n    } else {\n        api.post(\"/enterprise/v1/user/activate\")\n            .send({\n                user_uid: uid,\n                token: token\n            })\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    res.body.output.message.should.equal(messageList.USER_ACTIVATION_ACTIVATED_SUCCESSFULLY);\n                    done();\n                }\n            });\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2cb75150-f976-4f1c-a5a5-03369d69db9b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as email not register.",
                    "fullTitle": "Enterprise User User.activate Should give error as email not register.",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .send({\n        user_uid: uid,\n        token: \"FAKE_CODE\"\n    })\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.USER_ACTIVATION_INCORRECT_CODE);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a3582526-55d7-404c-b0f1-f77cd22d8078",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "2d209e33-e0a4-446a-ad67-e8fc834884a2",
                  "a88c0686-09d4-4f75-a07d-50146e48bc3c",
                  "5442bbd6-a5db-4212-99ad-d3ae9352cb52",
                  "2cb75150-f976-4f1c-a5a5-03369d69db9b",
                  "a3582526-55d7-404c-b0f1-f77cd22d8078"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 75,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "4e9f94cc-2dff-4a6e-ba63-1fec88c8cf93",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\users\\authyContact.enterprise.js",
        "file": "\\controllers\\test\\users\\authyContact.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "be6b971e-9da8-4753-b776-880a7d1643eb",
            "title": "User",
            "fullFile": "D:\\api\\controllers\\test\\users\\authyContact.enterprise.js",
            "file": "\\controllers\\test\\users\\authyContact.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "925c63cc-9e89-4a4b-853d-e5a758e21fd6",
                "title": "User.authyContact",
                "fullFile": "D:\\api\\controllers\\test\\users\\authyContact.enterprise.js",
                "file": "\\controllers\\test\\users\\authyContact.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.authyContact \"before each\" hook",
                    "timedOut": false,
                    "duration": 258,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({ deleted_at: null }, function(error, user) {\n    _models.Mail.remove({ deleted_at: null }, function(error, user) {\n        _models.Authy.remove({ deleted_at: null }, function(error, user) {\n            commonMock.setSignUpMocks(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/signup\")\n                .send(registrationBody)\n                .expect(httpStatus.CREATED)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        authToken = res.body.output.authtoken;\n                        _id = res.body.output._id;\n                        apiURL = apiURL.replace(\":uid\", res.body.output.uid);\n                        done();\n                    }\n                });\n        });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bdb2a62f-eaf6-43de-bff2-da81244a2cab",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User User.authyContact \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3db6eff2-9f6a-4341-a278-aa5407ed5a8f",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get error, if user is unauthorised.",
                    "fullTitle": "Enterprise User User.authyContact Should get error, if user is unauthorised.",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable({});\ntempRegistrationBody.authy_number = \"9619982150\";\ntempRegistrationBody.country_code = \"91\";\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\")\napi.put(apiURL)\n    .send(tempRegistrationBody)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "05c5c5df-d5da-4bd2-a82c-4374c9dcc89b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should register phone number with authy.",
                    "fullTitle": "Enterprise User User.authyContact Should register phone number with authy.",
                    "timedOut": false,
                    "duration": 83,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable({});\ntempRegistrationBody.authy_number = \"9619982150\";\ntempRegistrationBody.country_code = \"91\";\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\napi.put(apiURL)\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.authy_number == tempRegistrationBody.authy_number &&\n                res.body.output.enable_twofa == \"enable\";\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d41f24e8-30a9-4c81-980c-0dd3ee52cfba",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get default plan.",
                    "fullTitle": "Enterprise User User.authyContact Should get default plan.",
                    "timedOut": false,
                    "duration": 84,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable({});\ntempRegistrationBody.authy_number = \"9619982150\";\ntempRegistrationBody.country_code = \"91\";\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\napi.put(apiURL)\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (res.body.output.plan.length == 1) {\n                var defaultPlan = _.first(_.filter(server.plan.list, function(plan) {\n                    //return (plan || {}).enterprise_plan || false;\n                    return ((plan || {}).plan_type || \"\") == \"enterprise\";\n                })) || {};\n                defaultPlan = utils.skipAttr(convert.getJSON(defaultPlan));\n                isValid = res.body.output.plan[0].uid == defaultPlan.uid;\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3e6fb8c5-788f-4596-be73-3e68cfbcb5a6",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get default attributes.",
                    "fullTitle": "Enterprise User User.authyContact Should get default attributes.",
                    "timedOut": false,
                    "duration": 73,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable({});\ntempRegistrationBody.authy_number = \"9619982150\";\ntempRegistrationBody.country_code = \"91\";\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\napi.put(apiURL)\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (res.body.output.plan.length == 1) {\n                isValid = utils.isHaveKeyVals(res.body.output, [\n                        \"first_name\", \"flow_uid\", \"job_title\", \"last_name\", \"locale\",\n                        \"merchantid\", \"payment_set\", \"subscription\"\n                    ]) &&\n                    res.body.output.subscription.days == server.plan.enterprise.TrialPeriod &&\n                    moment(new Date(res.body.output.subscription.start_date)).format(\"YYYY-MM-DD\") ==\n                    moment(new Date()).format(\"YYYY-MM-DD\");\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d9fbd2d5-3df7-4999-b59a-a131f147d4b8",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as authy number is required.",
                    "fullTitle": "Enterprise User User.authyContact Should give error as authy number is required.",
                    "timedOut": false,
                    "duration": 47,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable({});\n//tempRegistrationBody.authy_number = \"9619982150\";\ntempRegistrationBody.country_code = \"91\";\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\napi.put(apiURL)\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.error.authy_number.message == messageList.AUTHY_NUMBER_IS_REQUIRED;\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cde7d559-5a62-4f62-bc33-6a5ea30055cc",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as authy country code is required.",
                    "fullTitle": "Enterprise User User.authyContact Should give error as authy country code is required.",
                    "timedOut": false,
                    "duration": 56,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable({});\ntempRegistrationBody.authy_number = \"9619982150\";\n//tempRegistrationBody.country_code = \"91\";\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\napi.put(apiURL)\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.error.country_code.message == messageList.AUTHY_COUNTRY_CODE_IS_REQUIRED;\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "45dcbeae-bccb-4000-a844-e290efa6f506",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should de-register and then register same phone number with authy.",
                    "fullTitle": "Enterprise User User.authyContact Should de-register and then register same phone number with authy.",
                    "timedOut": false,
                    "duration": 179,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable({});\ntempRegistrationBody.authy_number = \"9619982150\";\ntempRegistrationBody.country_code = \"91\";\n\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\napi.put(apiURL)\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var oldAuthyUserID = res.body.output.authy_user_uid;\n            commonMock.authyNumberChange(httpmock, \"enterprise\");\n            commonMock.authyDelete(httpmock, \"enterprise\");\n            api.put(apiURL)\n                .send(tempRegistrationBody)\n                .set('authtoken', authToken)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        var isValid =\n                            res.body.output.authy_user_uid == oldAuthyUserID &&\n                            (res.body.output.authy_user_uid || \"\") != \"\" &&\n                            (oldAuthyUserID || \"\") != \"\" &&\n                            res.body.output.enable_twofa == \"enable\";\n                        isValid.should.equal(true);\n                        done();\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "26ebb1bf-2693-4c48-9dfa-836957ba656b",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "05c5c5df-d5da-4bd2-a82c-4374c9dcc89b",
                  "d41f24e8-30a9-4c81-980c-0dd3ee52cfba",
                  "3e6fb8c5-788f-4596-be73-3e68cfbcb5a6",
                  "d9fbd2d5-3df7-4999-b59a-a131f147d4b8",
                  "cde7d559-5a62-4f62-bc33-6a5ea30055cc",
                  "45dcbeae-bccb-4000-a844-e290efa6f506",
                  "26ebb1bf-2693-4c48-9dfa-836957ba656b"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 532,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "02c4743b-df48-440e-aa8e-305ac8ea9be8",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\users\\cancelTwoFA.enterprise.js",
        "file": "\\controllers\\test\\users\\cancelTwoFA.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "c39a431d-f32e-47a5-bb1c-3c66d0b54bd4",
            "title": "User",
            "fullFile": "D:\\api\\controllers\\test\\users\\cancelTwoFA.enterprise.js",
            "file": "\\controllers\\test\\users\\cancelTwoFA.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "04ed5714-5142-4cd6-8696-c4400ba27969",
                "title": "User.cancelTwoFA",
                "fullFile": "D:\\api\\controllers\\test\\users\\cancelTwoFA.enterprise.js",
                "file": "\\controllers\\test\\users\\cancelTwoFA.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.cancelTwoFA \"before each\" hook",
                    "timedOut": false,
                    "duration": 248,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({ deleted_at: null }, function(error, user) {\n    _models.Mail.remove({ deleted_at: null }, function(error, user) {\n        _models.Authy.remove({ deleted_at: null }, function(error, user) {\n            commonMock.setSignUpMocks(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/signup\")\n                .send(registrationBody)\n                .expect(httpStatus.CREATED)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        authToken = res.body.output.authtoken;\n                        _id = res.body.output._id;\n                        uid = res.body.output.uid;\n                        done();\n                    }\n                });\n        });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7e71ab71-9403-497e-bbef-24ed6a094066",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User User.cancelTwoFA \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bf0a2a52-b375-4001-b299-e1fc1309ceb3",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should cancel twofa.",
                    "fullTitle": "Enterprise User User.cancelTwoFA Should cancel twofa.",
                    "timedOut": false,
                    "duration": 231,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.authy_number = \"9619982150\";\ntempRegistrationBody.country_code = \"91\";\ndelete tempRegistrationBody.password;\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\napi.put(\"/enterprise/v1/user\")\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var authy_userId = res.body.output.authy_user_uid;\n            commonMock.authySMSVerification(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/authy/sms\")\n                .send({\n                    authy_id: authy_userId\n                })\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                        api.post(\"/enterprise/v1/authy/verifyotp\")\n                            .send({\n                                authy_user_uid: authy_userId,\n                                token: otpBody.token,\n                                option_selected: \"otp\"\n                            })\n                            .set('authtoken', authToken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    var enable_twofa = res.body.output.enable_twofa;\n                                    if (enable_twofa == \"verified\") {\n                                        api.post(apiURL)\n                                            .send({})\n                                            .set('authtoken', authToken)\n                                            .expect(httpStatus.OK)\n                                            .end(function(err, res) {\n                                                if (err) {\n                                                    done(err);\n                                                } else {\n                                                    var isValid =\n                                                        res.body.output.enable_twofa == \"disable\" &&\n                                                        res.body.output.authy_user_uid == \"\" &&\n                                                        res.body.output.is_twofa_sms_enabled == false;\n                                                    isValid.should.equal(true);\n                                                    done();\n                                                }\n                                            });\n                                    } else {\n                                        true.should.equal(false);\n                                    }\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9487e2c4-facc-4a22-8a8c-37f560864ca9",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should cancel twofa if same email account exists in express.",
                    "fullTitle": "Enterprise User User.cancelTwoFA Should cancel twofa if same email account exists in express.",
                    "timedOut": false,
                    "duration": 2978,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"express\");\napi.post(\"/express/v1/login\")\n    .send({\n        email: registrationBody.email,\n        password: registrationBody.password\n    })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var tempRegistrationBody = global.getImmutable(registrationBody);\n            tempRegistrationBody.authy_number = \"9619982150\";\n            tempRegistrationBody.country_code = \"91\";\n            delete tempRegistrationBody.password;\n            commonMock.authyNumberChange(httpmock, \"enterprise\");\n            commonMock.authyDelete(httpmock, \"enterprise\");\n            api.put(\"/enterprise/v1/user\")\n                .send(tempRegistrationBody)\n                .set('authtoken', authToken)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        var authy_userId = res.body.output.authy_user_uid;\n                        commonMock.authySMSVerification(httpmock, \"enterprise\");\n                        api.post(\"/enterprise/v1/authy/sms\")\n                            .send({\n                                authy_id: authy_userId\n                            })\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                                    api.post(\"/enterprise/v1/authy/verifyotp\")\n                                        .send({\n                                            authy_user_uid: authy_userId,\n                                            token: otpBody.token,\n                                            option_selected: \"otp\"\n                                        })\n                                        .set('authtoken', authToken)\n                                        .expect(httpStatus.OK)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                var enable_twofa = res.body.output.enable_twofa;\n                                                if (enable_twofa == \"verified\") {\n                                                    api.post(apiURL)\n                                                        .send({})\n                                                        .set('authtoken', authToken)\n                                                        .expect(httpStatus.OK)\n                                                        .end(function(err, res) {\n                                                            if (err) {\n                                                                done(err);\n                                                            } else {\n                                                                var isValid =\n                                                                    res.body.output.enable_twofa == \"disable\" &&\n                                                                    res.body.output.authy_user_uid == \"\" &&\n                                                                    res.body.output.is_twofa_sms_enabled == false;\n                                                                isValid.should.equal(true);\n                                                                done();\n                                                            }\n                                                        });\n                                                } else {\n                                                    true.should.equal(false);\n                                                }\n                                            }\n                                        });\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c9aabf49-6769-4382-b61c-43bc0f663ca3",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get default plan for cancel twofa.",
                    "fullTitle": "Enterprise User User.cancelTwoFA Should get default plan for cancel twofa.",
                    "timedOut": false,
                    "duration": 224,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.authy_number = \"9619982150\";\ntempRegistrationBody.country_code = \"91\";\ndelete tempRegistrationBody.password;\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\napi.put(\"/enterprise/v1/user\")\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var authy_userId = res.body.output.authy_user_uid;\n            commonMock.authySMSVerification(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/authy/sms\")\n                .send({\n                    authy_id: authy_userId\n                })\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                        api.post(\"/enterprise/v1/authy/verifyotp\")\n                            .send({\n                                authy_user_uid: authy_userId,\n                                token: otpBody.token,\n                                option_selected: \"otp\"\n                            })\n                            .set('authtoken', authToken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    var enable_twofa = res.body.output.enable_twofa;\n                                    if (enable_twofa == \"verified\") {\n                                        api.post(apiURL)\n                                            .send({})\n                                            .set('authtoken', authToken)\n                                            .expect(httpStatus.OK)\n                                            .end(function(err, res) {\n                                                if (err) {\n                                                    done(err);\n                                                } else {\n                                                    var isValid = false;\n                                                    if (res.body.output.plan.length == 1) {\n                                                        var defaultPlan = _.first(_.filter(server.plan.list, function(plan) {\n                                                            //return (plan || {}).express_plan || false;\n                                                            return ((plan || {}).plan_type || \"\") == \"enterprise\";\n                                                        })) || {};\n                                                        defaultPlan = utils.skipAttr(convert.getJSON(defaultPlan));\n                                                        isValid = res.body.output.plan[0].uid == defaultPlan.uid;\n                                                    }\n                                                    isValid.should.equal(true);\n                                                    done();\n                                                }\n                                            });\n                                    } else {\n                                        true.should.equal(false);\n                                    }\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6ea01d2b-7daf-4bd1-823c-9add312fbd66",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get default attributes for cancel twofa.",
                    "fullTitle": "Enterprise User User.cancelTwoFA Should get default attributes for cancel twofa.",
                    "timedOut": false,
                    "duration": 225,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.authy_number = \"9619982150\";\ntempRegistrationBody.country_code = \"91\";\ndelete tempRegistrationBody.password;\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\napi.put(\"/enterprise/v1/user\")\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var authy_userId = res.body.output.authy_user_uid;\n            commonMock.authySMSVerification(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/authy/sms\")\n                .send({\n                    authy_id: authy_userId\n                })\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                        api.post(\"/enterprise/v1/authy/verifyotp\")\n                            .send({\n                                authy_user_uid: authy_userId,\n                                token: otpBody.token,\n                                option_selected: \"otp\"\n                            })\n                            .set('authtoken', authToken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    var enable_twofa = res.body.output.enable_twofa;\n                                    if (enable_twofa == \"verified\") {\n                                        api.post(apiURL)\n                                            .send({})\n                                            .set('authtoken', authToken)\n                                            .expect(httpStatus.OK)\n                                            .end(function(err, res) {\n                                                if (err) {\n                                                    done(err);\n                                                } else {\n                                                    var isValid = false;\n                                                    if (res.body.output.plan.length == 1) {\n                                                        isValid = utils.isHaveKeyVals(res.body.output, [\n                                                                \"first_name\", \"flow_uid\", \"job_title\", \"last_name\", \"locale\",\n                                                                \"merchantid\", \"payment_set\", \"subscription\"\n                                                            ]) &&\n                                                            res.body.output.subscription.days == server.plan.enterprise.TrialPeriod &&\n                                                            moment(new Date(res.body.output.subscription.start_date)).format(\"YYYY-MM-DD\") ==\n                                                            moment(new Date()).format(\"YYYY-MM-DD\");\n                                                    }\n                                                    isValid.should.equal(true);\n                                                    done();\n                                                }\n                                            });\n                                    } else {\n                                        true.should.equal(false);\n                                    }\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "de8392d0-5048-41f8-b72e-9e95a9037c27",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should cancel twofa for google login.",
                    "fullTitle": "Enterprise User User.cancelTwoFA Should cancel twofa for google login.",
                    "timedOut": false,
                    "duration": 377,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\ncommonMock.googleLogin(httpmock, \"enterprise\");\napi.post(\"/enterprise/v1/login/google\")\n    .send(loginBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            authToken = res.body.output.authtoken;\n            _id = res.body.output._id;\n\n            var tempRegistrationBody = global.getImmutable(registrationBody);\n            tempRegistrationBody.authy_number = \"9619982150\";\n            tempRegistrationBody.country_code = \"91\";\n            delete tempRegistrationBody.password;\n            commonMock.authyNumberChange(httpmock, \"enterprise\");\n            commonMock.authyDelete(httpmock, \"enterprise\");\n\n            api.put(\"/enterprise/v1/user\")\n                .send(tempRegistrationBody)\n                .set('authtoken', authToken)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        var authy_userId = res.body.output.authy_user_uid;\n                        commonMock.authySMSVerification(httpmock, \"enterprise\");\n                        api.post(\"/enterprise/v1/authy/sms\")\n                            .send({\n                                authy_id: authy_userId\n                            })\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                                    api.post(\"/enterprise/v1/authy/verifyotp\")\n                                        .send({\n                                            authy_user_uid: authy_userId,\n                                            token: otpBody.token,\n                                            option_selected: \"otp\"\n                                        })\n                                        .set('authtoken', authToken)\n                                        .expect(httpStatus.OK)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                var enable_twofa = res.body.output.enable_twofa;\n                                                commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                                                if (enable_twofa == \"verified\") {\n                                                    api.post(apiURL)\n                                                        .send({})\n                                                        .set('authtoken', authToken)\n                                                        .expect(httpStatus.OK)\n                                                        .end(function(err, res) {\n                                                            if (err) {\n                                                                done(err);\n                                                            } else {\n                                                                var isValid =\n                                                                    res.body.output.enable_twofa == \"disable\" &&\n                                                                    res.body.output.authy_user_uid == \"\" &&\n                                                                    res.body.output.is_twofa_sms_enabled == false;\n                                                                isValid.should.equal(true);\n                                                                done();\n                                                            }\n                                                        });\n                                                } else {\n                                                    true.should.equal(false);\n                                                }\n                                            }\n                                        });\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "599d8b6c-cb94-4a2f-baa5-db5e59a28d6b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get default plan for cancel twofa with google login.",
                    "fullTitle": "Enterprise User User.cancelTwoFA Should get default plan for cancel twofa with google login.",
                    "timedOut": false,
                    "duration": 339,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\ncommonMock.googleLogin(httpmock, \"enterprise\");\napi.post(\"/enterprise/v1/login/google\")\n    .send(loginBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            authToken = res.body.output.authtoken;\n            _id = res.body.output._id;\n\n            var tempRegistrationBody = global.getImmutable(registrationBody);\n            tempRegistrationBody.authy_number = \"9619982150\";\n            tempRegistrationBody.country_code = \"91\";\n            delete tempRegistrationBody.password;\n            commonMock.authyNumberChange(httpmock, \"enterprise\");\n            commonMock.authyDelete(httpmock, \"enterprise\");\n\n            api.put(\"/enterprise/v1/user\")\n                .send(tempRegistrationBody)\n                .set('authtoken', authToken)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        var authy_userId = res.body.output.authy_user_uid;\n                        commonMock.authySMSVerification(httpmock, \"enterprise\");\n                        api.post(\"/enterprise/v1/authy/sms\")\n                            .send({\n                                authy_id: authy_userId\n                            })\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                                    api.post(\"/enterprise/v1/authy/verifyotp\")\n                                        .send({\n                                            authy_user_uid: authy_userId,\n                                            token: otpBody.token,\n                                            option_selected: \"otp\"\n                                        })\n                                        .set('authtoken', authToken)\n                                        .expect(httpStatus.OK)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                var enable_twofa = res.body.output.enable_twofa;\n                                                if (enable_twofa == \"verified\") {\n                                                    api.post(apiURL)\n                                                        .send({})\n                                                        .set('authtoken', authToken)\n                                                        .expect(httpStatus.OK)\n                                                        .end(function(err, res) {\n                                                            if (err) {\n                                                                done(err);\n                                                            } else {\n                                                                var isValid = false;\n                                                                if (res.body.output.plan.length == 1) {\n                                                                    var defaultPlan = _.first(_.filter(server.plan.list, function(plan) {\n                                                                        //return (plan || {}).express_plan || false;\n                                                                        return ((plan || {}).plan_type || \"\") == \"enterprise\";\n                                                                    })) || {};\n                                                                    defaultPlan = utils.skipAttr(convert.getJSON(defaultPlan));\n                                                                    isValid = res.body.output.plan[0].uid == defaultPlan.uid;\n                                                                }\n                                                                isValid.should.equal(true);\n                                                                done();\n                                                            }\n                                                        });\n                                                } else {\n                                                    true.should.equal(false);\n                                                }\n                                            }\n                                        });\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7c684a6e-5845-475c-b46f-4e3b7a412e8b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get default attributes for cancel twofa with google login.",
                    "fullTitle": "Enterprise User User.cancelTwoFA Should get default attributes for cancel twofa with google login.",
                    "timedOut": false,
                    "duration": 350,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\ncommonMock.googleLogin(httpmock, \"enterprise\");\napi.post(\"/enterprise/v1/login/google\")\n    .send(loginBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            authToken = res.body.output.authtoken;\n            _id = res.body.output._id;\n\n            var tempRegistrationBody = global.getImmutable(registrationBody);\n            tempRegistrationBody.authy_number = \"9619982150\";\n            tempRegistrationBody.country_code = \"91\";\n            delete tempRegistrationBody.password;\n            commonMock.authyNumberChange(httpmock, \"enterprise\");\n            commonMock.authyDelete(httpmock, \"enterprise\");\n\n            api.put(\"/enterprise/v1/user\")\n                .send(tempRegistrationBody)\n                .set('authtoken', authToken)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        var authy_userId = res.body.output.authy_user_uid;\n                        commonMock.authySMSVerification(httpmock, \"enterprise\");\n                        api.post(\"/enterprise/v1/authy/sms\")\n                            .send({\n                                authy_id: authy_userId\n                            })\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                                    api.post(\"/enterprise/v1/authy/verifyotp\")\n                                        .send({\n                                            authy_user_uid: authy_userId,\n                                            token: otpBody.token,\n                                            option_selected: \"otp\"\n                                        })\n                                        .set('authtoken', authToken)\n                                        .expect(httpStatus.OK)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                var enable_twofa = res.body.output.enable_twofa;\n                                                if (enable_twofa == \"verified\") {\n                                                    api.post(apiURL)\n                                                        .send({})\n                                                        .set('authtoken', authToken)\n                                                        .expect(httpStatus.OK)\n                                                        .end(function(err, res) {\n                                                            if (err) {\n                                                                done(err);\n                                                            } else {\n                                                                var isValid = false;\n                                                                if (res.body.output.plan.length == 1) {\n                                                                    isValid = utils.isHaveKeyVals(res.body.output, [\n                                                                            \"first_name\", \"flow_uid\", \"job_title\", \"last_name\", \"locale\",\n                                                                            \"merchantid\", \"payment_set\", \"subscription\"\n                                                                        ]) &&\n                                                                        res.body.output.subscription.days == server.plan.enterprise.TrialPeriod &&\n                                                                        moment(new Date(res.body.output.subscription.start_date)).format(\"YYYY-MM-DD\") ==\n                                                                        moment(new Date()).format(\"YYYY-MM-DD\");\n                                                                }\n                                                                isValid.should.equal(true);\n                                                                done();\n                                                            }\n                                                        });\n                                                } else {\n                                                    true.should.equal(false);\n                                                }\n                                            }\n                                        });\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0622b7ec-04f8-448f-9fce-10598985bff6",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise User User.cancelTwoFA Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .send({})\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0f8e870a-5e37-460a-ac41-50685eab0b5d",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "9487e2c4-facc-4a22-8a8c-37f560864ca9",
                  "c9aabf49-6769-4382-b61c-43bc0f663ca3",
                  "6ea01d2b-7daf-4bd1-823c-9add312fbd66",
                  "de8392d0-5048-41f8-b72e-9e95a9037c27",
                  "599d8b6c-cb94-4a2f-baa5-db5e59a28d6b",
                  "7c684a6e-5845-475c-b46f-4e3b7a412e8b",
                  "0622b7ec-04f8-448f-9fce-10598985bff6",
                  "0f8e870a-5e37-460a-ac41-50685eab0b5d"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 4733,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "d300a7e8-d5ac-4376-ae6d-b1a2429b2f2e",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\users\\changeFirstTime.enterprise.js",
        "file": "\\controllers\\test\\users\\changeFirstTime.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "25389ce0-8adb-4eb4-bd41-5871ad964339",
            "title": "User",
            "fullFile": "D:\\api\\controllers\\test\\users\\changeFirstTime.enterprise.js",
            "file": "\\controllers\\test\\users\\changeFirstTime.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "293604b8-2d0a-43d0-9d4a-98cbe87be990",
                "title": "User.changeFirstTime",
                "fullFile": "D:\\api\\controllers\\test\\users\\changeFirstTime.enterprise.js",
                "file": "\\controllers\\test\\users\\changeFirstTime.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.changeFirstTime \"before each\" hook",
                    "timedOut": false,
                    "duration": 244,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n    _models.Mail.remove({ $or: [{ to: new RegExp('^test.user+', \"i\") }, { to: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n        commonMock.setSignUpMocks(httpmock, \"enterprise\");\n        api.post(\"/enterprise/v1/signup\")\n            .send(registrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    authToken = res.body.output.authtoken;\n                    uid = res.body.output.uid;\n                    done();\n                }\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ab80baea-f7ff-4191-92bd-326e2f18c0b4",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User User.changeFirstTime \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "43bebe76-218a-41c0-bbb6-dfe7b9b69e03",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should set first time login false.",
                    "fullTitle": "Enterprise User User.changeFirstTime Should set first time login false.",
                    "timedOut": false,
                    "duration": 99,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.put(apiURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.first_login.should.equal(false);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4e2f69cc-cc53-41c3-a6cc-39e4583546f6",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get organizations details for firsttime login.",
                    "fullTitle": "Enterprise User User.changeFirstTime Should get organizations details for firsttime login.",
                    "timedOut": false,
                    "duration": 216,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        api.put(apiURL)\n            .set('authtoken', data.role1.authtoken)\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    res.body.output.organizations.length == 1;\n                    done();\n                }\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "083b5dac-82a7-4fa8-83ff-b36ba017ad5f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should set first time login false if user is expired.",
                    "fullTitle": "Enterprise User User.changeFirstTime Should set first time login false if user is expired.",
                    "timedOut": false,
                    "duration": 68,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.findOneAndUpdate({\n    uid: uid\n}, {\n    activation_token: \"fl554d45sfdsfdsf54554\",\n    activation_expired: true,\n    active: false,\n    created_at: new Date(2017, 00, 01),\n    subscription: {\n        \"start_date\": new Date(2017, 00, 01),\n        \"hasUnlimitedPlan\": false,\n        \"days\": 30,\n        \"expired\": false\n    }\n}, { new: true }, function(err, activity) {\n    if (err) {\n        done(err);\n    } else {\n        api.put(apiURL)\n            .set('authtoken', authToken)\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    res.body.output.first_login.should.equal(false);\n                    done();\n                }\n            });\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "04290acc-ce4b-424a-81b9-d9621e3833b0",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise User User.changeFirstTime Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.put(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "264b1af0-4047-47da-a5a9-5ee0f90fe5b0",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "4e2f69cc-cc53-41c3-a6cc-39e4583546f6",
                  "083b5dac-82a7-4fa8-83ff-b36ba017ad5f",
                  "04290acc-ce4b-424a-81b9-d9621e3833b0",
                  "264b1af0-4047-47da-a5a9-5ee0f90fe5b0"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 390,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "28820a69-ed96-4bb4-bbb4-5d407b859359",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\users\\changePassword.enterprise.js",
        "file": "\\controllers\\test\\users\\changePassword.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "f08fcd87-5c04-4a2f-adb0-d8f9376da137",
            "title": "User",
            "fullFile": "D:\\api\\controllers\\test\\users\\changePassword.enterprise.js",
            "file": "\\controllers\\test\\users\\changePassword.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "953a96b4-fe6b-4a04-be03-57821fed8f2e",
                "title": "User.changePassword",
                "fullFile": "D:\\api\\controllers\\test\\users\\changePassword.enterprise.js",
                "file": "\\controllers\\test\\users\\changePassword.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.changePassword \"before each\" hook",
                    "timedOut": false,
                    "duration": 238,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n    _models.Mail.remove({ $or: [{ to: new RegExp('^test.user+', \"i\") }, { to: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n        _models.Authy.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n            commonMock.setSignUpMocks(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/signup\")\n                .send(registrationBody)\n                .expect(httpStatus.CREATED)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        authToken = res.body.output.authtoken;\n                        _id = res.body.output._id;\n                        apiURL = apiURL.replace(\":uid\", res.body.output.uid);\n                        done();\n                    }\n                });\n        });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "18ea125e-520b-4d60-8830-5f90df63b8bb",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User User.changePassword \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "77186fcb-5e5c-4d0b-a401-5c1a063f87a9",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should update new password.",
                    "fullTitle": "Enterprise User User.changePassword Should update new password.",
                    "timedOut": false,
                    "duration": 402,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = {};\ntempRegistrationBody.password = \"Raw@1235\";\ntempRegistrationBody.password_confirmation = \"Raw@1235\";\ntempRegistrationBody.oldpassword = \"Raw@1234\";\napi.put(apiURL)\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.uid.should.not.equal(\"\");\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "036be2e9-f25b-4d2f-87f2-84739ae2b9aa",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as invalid password format.",
                    "fullTitle": "Enterprise User User.changePassword Should give error as invalid password format.",
                    "timedOut": false,
                    "duration": 46,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = {};\ntempRegistrationBody.password = \"Raw\";\ntempRegistrationBody.password_confirmation = \"Raw\";\ntempRegistrationBody.oldpassword = \"Raw@1234\";\napi.put(apiURL)\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.password.message.should.equal(messageList.USER_REG_INVALID_PASSWORD);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bbb570ed-04a6-4e23-941b-1d5d592ccd22",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as password is required.",
                    "fullTitle": "Enterprise User User.changePassword Should give error as password is required.",
                    "timedOut": false,
                    "duration": 47,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = {};\n//tempRegistrationBody.password = \"Raw@1235\";\ntempRegistrationBody.password_confirmation = \"Raw@1235\";\ntempRegistrationBody.oldpassword = \"Raw@1234\";\napi.put(apiURL)\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.password.message.should.equal(messageList.USER_REG_INVALID_PASSWORD);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "aaba01e9-d885-423c-add8-4f2c73619fdf",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as confirm password is required.",
                    "fullTitle": "Enterprise User User.changePassword Should give error as confirm password is required.",
                    "timedOut": false,
                    "duration": 38,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = {};\ntempRegistrationBody.password = \"Raw@1235\";\n//tempRegistrationBody.password_confirmation = \"Raw@1235\";\ntempRegistrationBody.oldpassword = \"Raw@1234\";\napi.put(apiURL)\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.password_confirmation.message.should.equal(messageList.USER_PASS_NOT_MATCH_WITH_CONFIRM_PASS);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c4d059c1-3e37-4dfb-9fde-465384bb23cd",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as old password is required.",
                    "fullTitle": "Enterprise User User.changePassword Should give error as old password is required.",
                    "timedOut": false,
                    "duration": 46,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = {};\ntempRegistrationBody.password = \"Raw@1235\";\ntempRegistrationBody.password_confirmation = \"Raw@1235\";\n//tempRegistrationBody.oldpassword = \"Raw@1234\";\napi.put(apiURL)\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.oldpassword.message.should.equal(messageList.USER_CHANGE_PASSWARD_OLD_PASSWORD_REQUIRED);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ca9a7fa1-d69e-4cd4-be4e-48b77e1c029a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as password and confirm passwords are different.",
                    "fullTitle": "Enterprise User User.changePassword Should give error as password and confirm passwords are different.",
                    "timedOut": false,
                    "duration": 38,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = {};\ntempRegistrationBody.password = \"Raw@1235\";\ntempRegistrationBody.password_confirmation = \"Raw@1236\";\ntempRegistrationBody.oldpassword = \"Raw@1234\";\napi.put(apiURL)\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.password_confirmation.message.should.equal(messageList.USER_PASS_NOT_MATCH_WITH_CONFIRM_PASS);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8fc8a8fe-17d3-42aa-acf4-eb0f0756e533",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise User User.changePassword Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = {};\ntempRegistrationBody.password = \"Raw@1235\";\ntempRegistrationBody.password_confirmation = \"Raw@1236\";\ntempRegistrationBody.oldpassword = \"Raw@1234\";\napi.put(apiURL)\n    .send(tempRegistrationBody)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b0b0213a-bb26-44f1-9835-bce54c919847",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "036be2e9-f25b-4d2f-87f2-84739ae2b9aa",
                  "bbb570ed-04a6-4e23-941b-1d5d592ccd22",
                  "aaba01e9-d885-423c-add8-4f2c73619fdf",
                  "c4d059c1-3e37-4dfb-9fde-465384bb23cd",
                  "ca9a7fa1-d69e-4cd4-be4e-48b77e1c029a",
                  "8fc8a8fe-17d3-42aa-acf4-eb0f0756e533",
                  "b0b0213a-bb26-44f1-9835-bce54c919847"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 626,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "13260468-2386-480b-b610-25f6faf3df6c",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\users\\checkMyEmail.enterprise.js",
        "file": "\\controllers\\test\\users\\checkMyEmail.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "bec24164-692a-47e4-8711-fe2e466012b9",
            "title": "User",
            "fullFile": "D:\\api\\controllers\\test\\users\\checkMyEmail.enterprise.js",
            "file": "\\controllers\\test\\users\\checkMyEmail.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "8c304620-2fcb-4808-b647-b9183100476e",
                "title": "User.checkMyEmail",
                "fullFile": "D:\\api\\controllers\\test\\users\\checkMyEmail.enterprise.js",
                "file": "\\controllers\\test\\users\\checkMyEmail.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.checkMyEmail \"before each\" hook",
                    "timedOut": false,
                    "duration": 232,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n    _models.Mail.remove({ $or: [{ to: new RegExp('^test.user+', \"i\") }, { to: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n        _models.Authy.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n            commonMock.setSignUpMocks(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/signup\")\n                .send(registrationBody)\n                .expect(httpStatus.CREATED)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        authToken = res.body.output.authtoken;\n                        _id = res.body.output._id;\n                        done();\n                    }\n                });\n        });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "965a9b86-3975-4e2d-b318-596efab0377b",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User User.checkMyEmail \"after each\" hook",
                    "timedOut": false,
                    "duration": 1,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c646f972-20a9-432f-8667-93a6b81a8812",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should give false for block status after first fail login attempt.",
                    "fullTitle": "Enterprise User User.checkMyEmail Should give false for block status after first fail login attempt.",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar paramURL = apiURL + \"?email=test.user@raweng.com\";\napi.get(paramURL)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.block.should.equal(false);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "394b5f26-c190-4530-8531-1e3b98282656",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give true for show_captcha status for user.",
                    "fullTitle": "Enterprise User User.checkMyEmail Should give true for show_captcha status for user.",
                    "timedOut": false,
                    "duration": 682,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(\"/enterprise/v1/login\")\n    .send({\n        \"email\": \"test.user@raweng.com\",\n        \"password\": \"Raw@123456\"\n    })\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            api.post(\"/enterprise/v1/login\")\n                .send({\n                    \"email\": \"test.user@raweng.com\",\n                    \"password\": \"Raw@123456\"\n                })\n                .expect(httpStatus.UNAUTHORIZED)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        api.post(\"/enterprise/v1/login\")\n                            .send({\n                                \"email\": \"test.user@raweng.com\",\n                                \"password\": \"Raw@123456\"\n                            })\n                            .expect(httpStatus.UNAUTHORIZED)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    var paramURL = apiURL + \"?email=test.user@raweng.com\";\n                                    api.get(paramURL)\n                                        .expect(httpStatus.OK)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                res.body.output.show_captcha.should.equal(true);\n                                                done();\n                                            }\n                                        });\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "18a00205-2634-46cf-8e0b-d69f2f751823",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give false for show_captcha status after two fail login attempts.",
                    "fullTitle": "Enterprise User User.checkMyEmail Should give false for show_captcha status after two fail login attempts.",
                    "timedOut": false,
                    "duration": 438,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(\"/enterprise/v1/login\")\n    .send({\n        \"email\": \"test.user@raweng.com\",\n        \"password\": \"Raw@123456\"\n    })\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            api.post(\"/enterprise/v1/login\")\n                .send({\n                    \"email\": \"test.user@raweng.com\",\n                    \"password\": \"Raw@123456\"\n                })\n                .expect(httpStatus.UNAUTHORIZED)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        var paramURL = apiURL + \"?email=test.user@raweng.com\";\n                        api.get(paramURL)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    res.body.output.show_captcha.should.equal(false);\n                                    done();\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c6a10f67-c688-4831-a5b3-1ea17320968b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give true block status for user.",
                    "fullTitle": "Enterprise User User.checkMyEmail Should give true block status for user.",
                    "timedOut": false,
                    "duration": 1325,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(\"/enterprise/v1/login\")\n    .send({\n        \"email\": \"test.user@raweng.com\",\n        \"password\": \"Raw@123456\"\n    })\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            api.post(\"/enterprise/v1/login\")\n                .send({\n                    \"email\": \"test.user@raweng.com\",\n                    \"password\": \"Raw@123456\"\n                })\n                .expect(httpStatus.UNAUTHORIZED)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        api.post(\"/enterprise/v1/login\")\n                            .send({\n                                \"email\": \"test.user@raweng.com\",\n                                \"password\": \"Raw@123456\"\n                            })\n                            .expect(httpStatus.UNAUTHORIZED)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n\n                                    api.post(\"/enterprise/v1/login\")\n                                        .send({\n                                            \"email\": \"test.user@raweng.com\",\n                                            \"password\": \"Raw@123456\"\n                                        })\n                                        .expect(httpStatus.UNAUTHORIZED)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n\n                                                api.post(\"/enterprise/v1/login\")\n                                                    .send({\n                                                        \"email\": \"test.user@raweng.com\",\n                                                        \"password\": \"Raw@123456\"\n                                                    })\n                                                    .expect(httpStatus.UNAUTHORIZED)\n                                                    .end(function(err, res) {\n                                                        if (err) {\n                                                            done(err);\n                                                        } else {\n                                                            api.post(\"/enterprise/v1/login\")\n                                                                .send({\n                                                                    \"email\": \"test.user@raweng.com\",\n                                                                    \"password\": \"Raw@123456\"\n                                                                })\n                                                                .expect(httpStatus.UNAUTHORIZED)\n                                                                .end(function(err, res) {\n                                                                    if (err) {\n                                                                        done(err);\n                                                                    } else {\n                                                                        var paramURL = apiURL + \"?email=test.user@raweng.com\";\n                                                                        api.get(paramURL)\n                                                                            .expect(httpStatus.OK)\n                                                                            .end(function(err, res) {\n                                                                                if (err) {\n                                                                                    done(err);\n                                                                                } else {\n                                                                                    res.body.output.block.should.equal(true);\n                                                                                    done();\n                                                                                }\n                                                                            });\n\n\n                                                                    }\n                                                                });\n                                                        }\n                                                    });\n                                            }\n                                        });\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b7e7d10f-cb6a-44c5-912e-d1a87b78486c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give false for block status after fifth fail login attempts.",
                    "fullTitle": "Enterprise User User.checkMyEmail Should give false for block status after fifth fail login attempts.",
                    "timedOut": false,
                    "duration": 1119,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(\"/enterprise/v1/login\")\n    .send({\n        \"email\": \"test.user@raweng.com\",\n        \"password\": \"Raw@123456\"\n    })\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            api.post(\"/enterprise/v1/login\")\n                .send({\n                    \"email\": \"test.user@raweng.com\",\n                    \"password\": \"Raw@123456\"\n                })\n                .expect(httpStatus.UNAUTHORIZED)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        api.post(\"/enterprise/v1/login\")\n                            .send({\n                                \"email\": \"test.user@raweng.com\",\n                                \"password\": \"Raw@123456\"\n                            })\n                            .expect(httpStatus.UNAUTHORIZED)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n\n                                    api.post(\"/enterprise/v1/login\")\n                                        .send({\n                                            \"email\": \"test.user@raweng.com\",\n                                            \"password\": \"Raw@123456\"\n                                        })\n                                        .expect(httpStatus.UNAUTHORIZED)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n\n                                                api.post(\"/enterprise/v1/login\")\n                                                    .send({\n                                                        \"email\": \"test.user@raweng.com\",\n                                                        \"password\": \"Raw@123456\"\n                                                    })\n                                                    .expect(httpStatus.UNAUTHORIZED)\n                                                    .end(function(err, res) {\n                                                        if (err) {\n                                                            done(err);\n                                                        } else {\n\n                                                            var paramURL = apiURL + \"?email=test.user@raweng.com\";\n                                                            api.get(paramURL)\n                                                                .expect(httpStatus.OK)\n                                                                .end(function(err, res) {\n                                                                    if (err) {\n                                                                        done(err);\n                                                                    } else {\n                                                                        res.body.output.block.should.equal(false);\n                                                                        done();\n                                                                    }\n                                                                });\n                                                        }\n                                                    });\n                                            }\n                                        });\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e21f7617-f7d3-4606-94f5-0f3d2658afa7",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "394b5f26-c190-4530-8531-1e3b98282656",
                  "18a00205-2634-46cf-8e0b-d69f2f751823",
                  "c6a10f67-c688-4831-a5b3-1ea17320968b",
                  "b7e7d10f-cb6a-44c5-912e-d1a87b78486c",
                  "e21f7617-f7d3-4606-94f5-0f3d2658afa7"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 3575,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "0b205eee-4df4-4d0b-9d6d-e811ebba35f9",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\users\\clearPendingUserStream.enterprise.js",
        "file": "\\controllers\\test\\users\\clearPendingUserStream.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "402ba74e-4daa-4d40-8ed0-d31272cd178d",
            "title": "User",
            "fullFile": "D:\\api\\controllers\\test\\users\\clearPendingUserStream.enterprise.js",
            "file": "\\controllers\\test\\users\\clearPendingUserStream.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "daae63b3-40a4-4ffd-88d3-b1191a87dc49",
                "title": "User.clearPendingUserStream",
                "fullFile": "D:\\api\\controllers\\test\\users\\clearPendingUserStream.enterprise.js",
                "file": "\\controllers\\test\\users\\clearPendingUserStream.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.clearPendingUserStream \"before each\" hook",
                    "timedOut": false,
                    "duration": 2423,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveEntries(function() {\n    commonMock.setSignUpMocks(httpmock, \"enterprise\");\n    api.post(\"/enterprise/v1/signup\")\n        .send(registrationBody)\n        .expect(httpStatus.CREATED)\n        .end(function(error, res) {\n            if (error) {\n                done(error);\n            } else {\n                authToken = res.body.output.authtoken;\n                user_uid = res.body.output.uid;\n                _id = res.body.output._id;\n                saveBillEntries({\n                    user_uid: user_uid,\n                    authtoken: authToken,\n                    email: res.body.output.email\n                }, function(error, billEntries) {\n                    if (error) {\n                        done(error);\n                    } else {\n                        _billEntries = billEntries;\n                        saveUserStreamEntries({\n                            user_uid: user_uid,\n                            authtoken: authToken,\n                            email: res.body.output.email\n                        }, function(error, userStreamEntries) {\n                            if (error) {\n                                done(error);\n                            } else {\n                                _userStreamEntries = userStreamEntries;\n                                done();\n                            }\n                        });\n                    }\n                });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4fc76436-29ca-4c08-b336-dfaa63d1e07c",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User User.clearPendingUserStream \"after each\" hook",
                    "timedOut": false,
                    "duration": 3,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nhttpmock.cleanAll();\nremoveEntries(function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4db26030-dddc-4822-a854-5ba2cd4a8d39",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should clear pending stream of user.",
                    "fullTitle": "Enterprise User User.clearPendingUserStream Should clear pending stream of user.",
                    "timedOut": false,
                    "duration": 59,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('authtoken', authToken)\n    .send({\n        stream_ids: [userStreamIDs[0], userStreamIDs[1]]\n    })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            _models.UserStream.find({ user_uid: user_uid }, function(error, userStreams) {\n                var isValid01 = true,\n                    isValid02 = true;\n                _.each(userStreams, function(item) {\n                    if (item.uid == userStreamIDs[0] || item.uid == userStreamIDs[1]) {\n                        isValid01 = isValid01 && item.pending_view == false;\n                    } else {\n                        isValid02 = isValid02 && item.pending_view;\n                    }\n                });\n                (isValid01 && isValid02).should.equal(true);\n                done();\n            });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1244415a-aaa0-40e3-bfda-31447dfe5a80",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give ids required error.",
                    "fullTitle": "Enterprise User User.clearPendingUserStream Should give ids required error.",
                    "timedOut": false,
                    "duration": 48,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.USER_STREAM_REQUIRED_IDS);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3483d77f-8bef-488b-aca8-eedc5fb23956",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise User User.clearPendingUserStream Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .send({\n        stream_ids: [userStreamIDs[0], userStreamIDs[1]]\n    })\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5aa4b0ba-6d49-4d0d-9b40-0ff0e2f9ebcb",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "1244415a-aaa0-40e3-bfda-31447dfe5a80",
                  "3483d77f-8bef-488b-aca8-eedc5fb23956",
                  "5aa4b0ba-6d49-4d0d-9b40-0ff0e2f9ebcb"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 115,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "813143e2-40c9-49dc-afcb-968ee4115f7f",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\users\\create.enterprise.js",
        "file": "\\controllers\\test\\users\\create.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "8bf96ca0-3e79-4754-a1a8-22244917c033",
            "title": "User",
            "fullFile": "D:\\api\\controllers\\test\\users\\create.enterprise.js",
            "file": "\\controllers\\test\\users\\create.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "f406a337-3d7a-44af-bf1d-a7a4341c2230",
                "title": "User.Create",
                "fullFile": "D:\\api\\controllers\\test\\users\\create.enterprise.js",
                "file": "\\controllers\\test\\users\\create.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.Create \"before each\" hook",
                    "timedOut": false,
                    "duration": 8,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "removeRecords(function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2db53162-42e9-474a-92e6-6272d5dc5db0",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User User.Create \"after each\" hook",
                    "timedOut": false,
                    "duration": 5,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "removeRecords(function() {\n    httpmock.cleanAll();\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "75075c42-0473-4016-9a06-4bec38602758",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should return success output on pass of valid parameters.",
                    "fullTitle": "Enterprise User User.Create Should return success output on pass of valid parameters.",
                    "timedOut": false,
                    "duration": 239,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(registrationBody)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            (res.body.output.email == registrationBody.email &&\n                res.body.output.marketo_lead_id != \"\" &&\n                (res.body.output.authtoken || \"\") != \"\" &&\n                res.body.output.flow_uid != \"\").should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "498f003b-45c4-45b2-92c8-e8e7e9ec357c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should add promocode add signup.",
                    "fullTitle": "Enterprise User User.Create Should add promocode add signup.",
                    "timedOut": false,
                    "duration": 261,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\naddPromcode({\n    count: 1,\n    promo_code: \"PROMO_CODE\",\n    domain: \"gmail.com\",\n    redemption_count: 1,\n    redemption_start: moment(new Date()).subtract(1, 'days'),\n    redemption_end: moment(new Date()).add(1, 'days'),\n    allowed_plans: [],\n    default_plan: null,\n    addon_credits: 5,\n    addon_flows: 2,\n    addon_triggers: 2,\n    addon_trial_days: 10,\n    braintree_discount_id: \"\",\n    promo_features_expiration: moment(new Date()).add(10, 'days')\n}, function(error, promoCodes) {\n    commonMock.setSignUpMocks(httpmock, \"enterprise\");\n    var tempRegistrationBody = getImmutable(registrationBody);\n    tempRegistrationBody.promo_code = promoCodes[0].promo_code;\n    api.post(apiURL)\n        .send(tempRegistrationBody)\n        .expect(httpStatus.CREATED)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                res.body.output.subscription.days.should.equal(40);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "20abeb31-08f3-41e3-9ac5-673607b42af9",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should add promocode fatures with default plan.",
                    "fullTitle": "Enterprise User User.Create Should add promocode fatures with default plan.",
                    "timedOut": false,
                    "duration": 253,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.Plan.findOne({ \"uid\": \"fl6f0c5a598b56e5e4e3fbf5\" }, function(error, plan) {\n    var plan_id = null;\n    if (plan) {\n        plan_id = plan._id;\n    }\n    addPromcode({\n        count: 1,\n        promo_code: \"PROMO_CODE\",\n        domain: \"gmail.com\",\n        redemption_count: 1,\n        redemption_start: moment(new Date()).subtract(1, 'days'),\n        redemption_end: moment(new Date()).add(1, 'days'),\n        allowed_plans: [],\n        default_plan: plan_id,\n        addon_credits: 5,\n        addon_flows: 2,\n        addon_triggers: 2,\n        addon_trial_days: 10,\n        braintree_discount_id: \"\",\n        promo_features_expiration: moment(new Date()).add(10, 'days')\n    }, function(error, promoCodes) {\n        commonMock.setSignUpMocks(httpmock, \"enterprise\");\n        var tempRegistrationBody = getImmutable(registrationBody);\n        tempRegistrationBody.promo_code = promoCodes[0].promo_code;\n        api.post(apiURL)\n            .send(tempRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    var userNewFeatures = {};\n                    userNewFeatures.flow_count = res.body.output.user_plan.flow.count;\n                    userNewFeatures.flow_active = res.body.output.user_plan.flow.active;\n                    userNewFeatures.trigger_count = res.body.output.user_plan.trigger.count;\n                    userNewFeatures.days = (res.body.output.user_plan.reimburse || {}).period || 0;\n                    userNewFeatures.credits = (res.body.output.user_plan.reimburse || {}).credits || 0;\n                    (userNewFeatures.credits == 10005 && userNewFeatures.days == 30 &&\n                        userNewFeatures.trigger_count == 12).should.equal(true);\n                    done();\n                }\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a4831b1c-99bf-4c66-8553-90ed23a87ba4",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should return success output for intercom error output.",
                    "fullTitle": "Enterprise User User.Create Should return success output for intercom error output.",
                    "timedOut": false,
                    "duration": 236,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar service = \"enterprise\";\nvar options = {\n};\ncommonMock.brainTreeCustomerCreate(httpmock, service, {\n    email: options.email,\n    access_token: options.access_token\n});\ncommonMock.brainTreeClientToken(httpmock, service, {\n    email: options.email,\n    access_token: options.access_token\n});\ncommonMock.brainTreeGenerateAuthToken(httpmock, service, {\n    email: options.email,\n    access_token: options.access_token\n});\ncommonMock.intercomUserError(httpmock, service, {\n    email: options.email,\n    access_token: options.access_token,\n    times: 2\n});\ncommonMock.marketoGetToken(httpmock, service, {});\ncommonMock.marketoCreateLead(httpmock, service, {});\napi.post(apiURL)\n    .send(registrationBody)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.email.should.equal(registrationBody.email);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "de653cf7-acc5-4229-a246-d30ec3e04876",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should return success output if same user with blank user_type exists.",
                    "fullTitle": "Enterprise User User.Create Should return success output if same user with blank user_type exists.",
                    "timedOut": false,
                    "duration": 467,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(registrationBody)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            _models.User.findOneAndUpdate({\n                uid: res.body.output.uid\n            }, {\n                user_type: null\n            }, { new: true }, function(error, user) {\n                commonMock.setSignUpMocks(httpmock, \"enterprise\");\n                api.post(apiURL)\n                    .send(registrationBody)\n                    .expect(httpStatus.CREATED)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            res.body.output.email.should.equal(registrationBody.email);\n                            done();\n                        }\n                    });\n            });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3315abda-842c-451b-9f15-9fabf0a890a0",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not allowed to create enterprise account, if express account exists.",
                    "fullTitle": "Enterprise User User.Create Should not allowed to create enterprise account, if express account exists.",
                    "timedOut": false,
                    "duration": 2840,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"express\");\napi.post(\"/express/v1/signup\")\n    .send(registrationBody)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            commonMock.setSignUpMocks(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/signup\")\n                .send(registrationBody)\n                .expect(httpStatus.BAD_REQUEST)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        res.body.error.message.should.equal(messageList.EXPRESS_ACCOUNT_ALREADY_EXISTS);\n                        done();\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "75ee696e-e47c-4578-a6c8-80140c5835f3",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should allowed to create enterprise account, if other partner account exists.",
                    "fullTitle": "Enterprise User User.Create Should allowed to create enterprise account, if other partner account exists.",
                    "timedOut": false,
                    "duration": 2752,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"express\");\napi.post(\"/express/v1/signup\")\n    .send(registrationBody)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            _models.User.findOneAndUpdate({\n                uid: res.body.output.uid\n            }, {\n                user_type: \"box\"\n            }, {\n                new: true\n            }, function(error, result) {\n                commonMock.setSignUpMocks(httpmock, \"enterprise\");\n                api.post(\"/enterprise/v1/signup\")\n                    .send(registrationBody)\n                    .expect(httpStatus.CREATED)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            res.body.output.email.should.equal(registrationBody.email);\n                            done();\n                        }\n                    });\n            });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ea3f1a39-f65a-453e-873a-5a56c6699986",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give user already exists error.",
                    "fullTitle": "Enterprise User User.Create Should give user already exists error.",
                    "timedOut": false,
                    "duration": 3278,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.email = \"test.user+1@raweng.com\";\ncommonMock.setSignUpMocks(httpmock, \"enterprise\", {\n    email: tempRegistrationBody.email\n});\napi.post(\"/enterprise/v1/signup\")\n    .send(tempRegistrationBody)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var tempLoginBody = {\n                email: tempRegistrationBody.email,\n                password: tempRegistrationBody.password,\n            };\n            commonMock.setSignUpMocks(httpmock, \"express\", {\n                email: tempRegistrationBody.email\n            });\n            commonMock.flowLogin(httpmock, \"express\", {\n                email: tempRegistrationBody.email\n            });\n            api.post(\"/express/v1/login\")\n                .send(tempLoginBody)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        api.post(\"/enterprise/v1/signup\")\n                            .send(tempRegistrationBody)\n                            .expect(httpStatus.BAD_REQUEST)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    res.body.error.message.should.equal(messageList.USER_ALREADY_EXISTS);\n                                    done();\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4a483170-04b6-4a92-87b2-83d1183bdb49",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not allowed to create user for invalid password.",
                    "fullTitle": "Enterprise User User.Create Should not allowed to create user for invalid password.",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.password = \"built@12\";\ntempRegistrationBody.password_confirmation = \"built@12\";\napi.post(apiURL)\n    .send(tempRegistrationBody)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValidError = res.body.error.password.message ==\n                messageList.USER_REG_INVALID_PASSWORD;\n            isValidError.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ea82feb4-be3a-45f9-a23a-ebedb356f001",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get default plan.",
                    "fullTitle": "Enterprise User User.Create Should get default plan.",
                    "timedOut": false,
                    "duration": 245,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(registrationBody)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (res.body.output.plan.length == 1) {\n                var defaultPlan = _.first(_.filter(server.plan.list, function(plan) {\n                    //return (plan || {}).express_plan || false;\n                    return ((plan || {}).plan_type || \"\") == \"enterprise\";\n                })) || {};\n                defaultPlan = utils.skipAttr(convert.getJSON(defaultPlan));\n                isValid = res.body.output.plan[0].uid == defaultPlan.uid;\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3ace6263-d6ce-4fa8-9456-98bc4373e202",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get default attributes.",
                    "fullTitle": "Enterprise User User.Create Should get default attributes.",
                    "timedOut": false,
                    "duration": 253,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(registrationBody)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (res.body.output.plan.length == 1) {\n                isValid = utils.isHaveKeyVals(res.body.output, [\n                        \"first_name\", \"flow_uid\", \"job_title\", \"last_name\", \"locale\",\n                        \"merchantid\", \"payment_set\", \"subscription\"\n                    ]) &&\n                    res.body.output.subscription.days == server.plan.enterprise.TrialPeriod &&\n                    moment(new Date(res.body.output.subscription.start_date)).format(\"YYYY-MM-DD\") ==\n                    moment(new Date()).format(\"YYYY-MM-DD\");\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f8538f20-44e7-47ca-81bd-bb2b160dec40",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get plan provided trial days.",
                    "fullTitle": "Enterprise User User.Create Should get plan provided trial days.",
                    "timedOut": false,
                    "duration": 248,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\ncreatePlan(0, function(trialPeriodPlan) {\n    var tmpRegBody = getImmutable(registrationBody);\n    tmpRegBody.plan = trialPeriodPlan.name;\n    api.post(apiURL)\n        .send(tmpRegBody)\n        .expect(httpStatus.CREATED)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                var isValid = false;\n                if (res.body.output.plan.length == 1) {\n                    isValid = utils.isHaveKeyVals(res.body.output, [\n                            \"first_name\", \"flow_uid\", \"job_title\", \"last_name\", \"locale\",\n                            \"merchantid\", \"payment_set\", \"subscription\"\n                        ]) &&\n                        res.body.output.subscription.days == 180 &&\n                        moment(new Date(res.body.output.subscription.start_date)).format(\"YYYY-MM-DD\") ==\n                        moment(new Date()).format(\"YYYY-MM-DD\");\n                }\n                isValid.should.equal(true);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ad193329-c723-485c-aace-c38d19ee1dce",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get enterprise default trial days.",
                    "fullTitle": "Enterprise User User.Create Should get enterprise default trial days.",
                    "timedOut": false,
                    "duration": 244,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\ncreatePlan(1, function(trialPeriodPlan) {\n    var tmpRegBody = getImmutable(registrationBody);\n    tmpRegBody.plan = trialPeriodPlan.name;\n    api.post(apiURL)\n        .send(tmpRegBody)\n        .expect(httpStatus.CREATED)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                var isValid = false;\n                if (res.body.output.plan.length == 1) {\n                    isValid = utils.isHaveKeyVals(res.body.output, [\n                            \"first_name\", \"flow_uid\", \"job_title\", \"last_name\", \"locale\",\n                            \"merchantid\", \"payment_set\", \"subscription\"\n                        ]) &&\n                        res.body.output.subscription.days ==\n                        config.service_types.enterprise.default_trial_days &&\n                        moment(new Date(res.body.output.subscription.start_date)).format(\"YYYY-MM-DD\") ==\n                        moment(new Date()).format(\"YYYY-MM-DD\");\n                }\n                isValid.should.equal(true);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c51f2a16-b126-43c9-9c7e-17d551af7dde",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get plan provided trial days for days as false.",
                    "fullTitle": "Enterprise User User.Create Should get plan provided trial days for days as false.",
                    "timedOut": false,
                    "duration": 243,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\ncreatePlan(2, function(trialPeriodPlan) {\n    var tmpRegBody = getImmutable(registrationBody);\n    tmpRegBody.plan = trialPeriodPlan.name;\n    api.post(apiURL)\n        .send(tmpRegBody)\n        .expect(httpStatus.CREATED)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                var isValid = false;\n                if (res.body.output.plan.length == 1) {\n                    isValid = utils.isHaveKeyVals(res.body.output, [\n                            \"first_name\", \"flow_uid\", \"job_title\", \"last_name\", \"locale\",\n                            \"merchantid\", \"payment_set\", \"subscription\"\n                        ]) &&\n                        res.body.output.subscription.days == 90 &&\n                        typeof(res.body.output.subscription.start_date) == \"undefined\";\n                }\n                isValid.should.equal(true);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "dd173eb3-53d7-433f-973c-6b560fa3920f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get zero trial days for days as false.",
                    "fullTitle": "Enterprise User User.Create Should get zero trial days for days as false.",
                    "timedOut": false,
                    "duration": 256,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\ncreatePlan(3, function(trialPeriodPlan) {\n    var tmpRegBody = getImmutable(registrationBody);\n    tmpRegBody.plan = trialPeriodPlan.name;\n    api.post(apiURL)\n        .send(tmpRegBody)\n        .expect(httpStatus.CREATED)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                var isValid = false;\n                if (res.body.output.plan.length == 1) {\n                    isValid = utils.isHaveKeyVals(res.body.output, [\n                            \"first_name\", \"flow_uid\", \"job_title\", \"last_name\", \"locale\",\n                            \"merchantid\", \"payment_set\", \"subscription\"\n                        ]) &&\n                        res.body.output.subscription.days == 0 &&\n                        typeof(res.body.output.subscription.start_date) == \"undefined\";\n                }\n                isValid.should.equal(true);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "776f86e0-c3a7-4faf-bd98-2de19f2f076d",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not copy authtoken from request header.",
                    "fullTitle": "Enterprise User User.Create Should not copy authtoken from request header.",
                    "timedOut": false,
                    "duration": 257,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\napi.post(apiURL)\n    .set('authtoken', \"TEST_TEST\")\n    .send(registrationBody)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.email = registrationBody.email;\n            if (isValid) {\n                api.get(\"/enterprise/v1/user\")\n                    .set('authtoken', \"TEST_TEST\")\n                    .expect(httpStatus.UNAUTHORIZED)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n                            done();\n                        }\n                    });\n            } else {\n                true.should.equal(false);\n                done();\n            }\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0ead2693-58d9-4d50-aa50-c8af18d1c80d",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should create braintree user on successfull registration of user.",
                    "fullTitle": "Enterprise User User.Create Should create braintree user on successfull registration of user.",
                    "timedOut": false,
                    "duration": 229,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(registrationBody)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.email.should.equal(registrationBody.email);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d693455d-1353-4de4-8def-0da86b414c82",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should return error for invalid email.",
                    "fullTitle": "Enterprise User User.Create Should return error for invalid email.",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.email = \"ambermore\";\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(tempRegistrationBody)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValidError = res.body.error.email.message ==\n                messageList.USER_REG_EMAIL_NOT_VALID;\n            isValidError.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "27d8ba93-9b8b-4e1a-b280-f0e19f3ff118",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should return error for empty first_name.",
                    "fullTitle": "Enterprise User User.Create Should return error for empty first_name.",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ndelete tempRegistrationBody.first_name;\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(tempRegistrationBody)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValidError = res.body.error.first_name.message ==\n                messageList.USER_REG_FIRST_NAME_EMPTY;\n            isValidError.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "da1b67ac-f642-48a0-8458-a74b2ee7ecd9",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should return error for empty last_name.",
                    "fullTitle": "Enterprise User User.Create Should return error for empty last_name.",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ndelete tempRegistrationBody.last_name;\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(tempRegistrationBody)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValidError = res.body.error.last_name.message ==\n                messageList.USER_REG_LAST_NAME_EMPTY;\n            isValidError.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3edc96be-d8df-42af-8497-b013c0c041d4",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should return error for not accepting terms.",
                    "fullTitle": "Enterprise User User.Create Should return error for not accepting terms.",
                    "timedOut": false,
                    "duration": 25,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ndelete tempRegistrationBody.terms;\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(tempRegistrationBody)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValidError = res.body.error.terms.message ==\n                messageList.USER_REG_TERMS_NOT_ACCEPTED;\n            isValidError.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5b5c998c-a014-4cb3-b72e-823707ccfc55",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should return error for not providing invalid terms.",
                    "fullTitle": "Enterprise User User.Create Should return error for not providing invalid terms.",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.terms = \"true123\";\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(tempRegistrationBody)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValidError = res.body.error.terms.message ==\n                messageList.USER_REG_TERMS_NOT_ACCEPTED;\n            isValidError.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a78b872b-cebf-4fbd-ab04-5b41df2552b0",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should return error for not passing password.",
                    "fullTitle": "Enterprise User User.Create Should return error for not passing password.",
                    "timedOut": false,
                    "duration": 17,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ndelete tempRegistrationBody.password;\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(tempRegistrationBody)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValidError = res.body.error.password.message ==\n                messageList.USER_REG_INVALID_PASSWORD;\n            isValidError.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2aff1221-ec12-4c5e-be2d-193f733758b5",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should return error for not passing valid password accordingly to criteria.",
                    "fullTitle": "Enterprise User User.Create Should return error for not passing valid password accordingly to criteria.",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.password = \"raw\";\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(tempRegistrationBody)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValidError = res.body.error.password.message ==\n                messageList.USER_REG_INVALID_PASSWORD;\n            isValidError.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f644958b-f46a-43ce-83b9-1ceb7011245b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should return error for not passing confirm password.",
                    "fullTitle": "Enterprise User User.Create Should return error for not passing confirm password.",
                    "timedOut": false,
                    "duration": 19,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ndelete tempRegistrationBody.password_confirmation;\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(tempRegistrationBody)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValidError = res.body.error.password_confirmation.message ==\n                messageList.USER_REG_MATCHED_CONFIRM_PASSWORD;\n            isValidError.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "dd50d9cd-b10e-430e-a7db-5fdeb905b63b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should return error for passing different confirm password.",
                    "fullTitle": "Enterprise User User.Create Should return error for passing different confirm password.",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.password_confirmation = \"a\";\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(tempRegistrationBody)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValidError = res.body.error.password_confirmation.message ==\n                messageList.USER_REG_MATCHED_CONFIRM_PASSWORD;\n            isValidError.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "55d6a006-038e-452c-82f4-f096024ad441",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Register user should be enterprise user.",
                    "fullTitle": "Enterprise User User.Create Register user should be enterprise user.",
                    "timedOut": false,
                    "duration": 232,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(registrationBody)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.user_type.should.equal(config.service_types.enterprise.name);\n            expect(res.body.output.prod_env).is.not.null\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "50e60046-31ca-42be-82ed-fa9a6a23f281",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should set braintree_customerId.",
                    "fullTitle": "Enterprise User User.Create Should set braintree_customerId.",
                    "timedOut": false,
                    "duration": 236,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(registrationBody)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.braintree_customerId.should.not.empty;\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7d7b3d7b-2c6f-49f0-b1ad-f2c4bc8061b2",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should set merchantid.",
                    "fullTitle": "Enterprise User User.Create Should set merchantid.",
                    "timedOut": false,
                    "duration": 242,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(registrationBody)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.merchantid.should.not.empty;\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2fd5c45c-7aa4-406d-b440-0f278921753e",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not allowed user to register with same email.",
                    "fullTitle": "Enterprise User User.Create Should not allowed user to register with same email.",
                    "timedOut": false,
                    "duration": 300,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(registrationBody)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            commonMock.setSignUpMocks(httpmock, \"enterprise\");\n            api.post(apiURL)\n                .send(registrationBody)\n                .expect(httpStatus.BAD_REQUEST)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        res.body.error.message.should.equal(messageList.USER_ALREADY_EXISTS);\n                        done();\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "23ad6e22-54d9-4b2b-b636-5b332ea8420e",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should update profile fields properly.",
                    "fullTitle": "Enterprise User User.Create Should update profile fields properly.",
                    "timedOut": false,
                    "duration": 253,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar jobTitle = \"Tech Architect\";\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.job_title = jobTitle;\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(tempRegistrationBody)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.job_title.should.equal(jobTitle);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6da84833-1bbd-4612-aacd-bf59fcb020d7",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should return success on valid plan selected.",
                    "fullTitle": "Enterprise User User.Create Should return success on valid plan selected.",
                    "timedOut": false,
                    "duration": 227,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar jobTitle = \"Tech Architect\";\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.plan = \"ciscosparkvip2017\";\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(tempRegistrationBody)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var plan = res.body.output.plan[0] || {};\n            var isValid = (plan.name == tempRegistrationBody.plan ||\n                    plan.braintree_plan == tempRegistrationBody.plan) &&\n                plan.plan_type == \"enterprise\";\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "71cb804d-fcef-4ffc-a8c5-c549dee244e7",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should return error on invalid plan selection.",
                    "fullTitle": "Enterprise User User.Create Should return error on invalid plan selection.",
                    "timedOut": false,
                    "duration": 29,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar jobTitle = \"Tech Architect\";\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.plan = \"ABC Plan\";\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(tempRegistrationBody)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.INVALID_PLAN_SELECTED);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ed1f73eb-68c8-4306-a3c4-b18bc838d43d",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should set default plan, if plan is not provided.",
                    "fullTitle": "Enterprise User User.Create Should set default plan, if plan is not provided.",
                    "timedOut": false,
                    "duration": 266,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(registrationBody)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var plan = res.body.output.plan[0] || {};\n            var isValid = plan.name == server.plan.enterprise.name &&\n                plan.braintree_plan == server.plan.enterprise.braintree_plan;\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "452a3ccb-f017-44d6-9bf2-095432081e1c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should send welcome email.",
                    "fullTitle": "Enterprise User User.Create Should send welcome email.",
                    "timedOut": false,
                    "duration": 284,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n///global.isTestSuit = false;\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar expectedEmail = {\n    \"to\": \"test.user@raweng.com\",\n    \"from\": \"Built.io Flow Enterprise Support <noreply-flowdev@raweng.com>\",\n    \"title\": \"No Title\",\n    \"subject\": \"Activate Your Account\",\n    \"html\": \"\"\n};\nmockMailer.expectEmail(5, function(sentEmail) {\n    return expectedEmail.to == sentEmail.to &&\n        expectedEmail.from == sentEmail.from &&\n        expectedEmail.title == sentEmail.title &&\n        expectedEmail.subject == sentEmail.subject;\n}, done);\napi.post(apiURL)\n    .send(registrationBody)\n    .end(function(err, res) {\n        done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "76e30492-1524-4eda-89a9-098cc2280189",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "498f003b-45c4-45b2-92c8-e8e7e9ec357c",
                  "20abeb31-08f3-41e3-9ac5-673607b42af9",
                  "a4831b1c-99bf-4c66-8553-90ed23a87ba4",
                  "de653cf7-acc5-4229-a246-d30ec3e04876",
                  "3315abda-842c-451b-9f15-9fabf0a890a0",
                  "75ee696e-e47c-4578-a6c8-80140c5835f3",
                  "ea3f1a39-f65a-453e-873a-5a56c6699986",
                  "4a483170-04b6-4a92-87b2-83d1183bdb49",
                  "ea82feb4-be3a-45f9-a23a-ebedb356f001",
                  "3ace6263-d6ce-4fa8-9456-98bc4373e202",
                  "f8538f20-44e7-47ca-81bd-bb2b160dec40",
                  "ad193329-c723-485c-aace-c38d19ee1dce",
                  "c51f2a16-b126-43c9-9c7e-17d551af7dde",
                  "dd173eb3-53d7-433f-973c-6b560fa3920f",
                  "776f86e0-c3a7-4faf-bd98-2de19f2f076d",
                  "0ead2693-58d9-4d50-aa50-c8af18d1c80d",
                  "d693455d-1353-4de4-8def-0da86b414c82",
                  "27d8ba93-9b8b-4e1a-b280-f0e19f3ff118",
                  "da1b67ac-f642-48a0-8458-a74b2ee7ecd9",
                  "3edc96be-d8df-42af-8497-b013c0c041d4",
                  "5b5c998c-a014-4cb3-b72e-823707ccfc55",
                  "a78b872b-cebf-4fbd-ab04-5b41df2552b0",
                  "2aff1221-ec12-4c5e-be2d-193f733758b5",
                  "f644958b-f46a-43ce-83b9-1ceb7011245b",
                  "dd50d9cd-b10e-430e-a7db-5fdeb905b63b",
                  "55d6a006-038e-452c-82f4-f096024ad441",
                  "50e60046-31ca-42be-82ed-fa9a6a23f281",
                  "7d7b3d7b-2c6f-49f0-b1ad-f2c4bc8061b2",
                  "2fd5c45c-7aa4-406d-b440-0f278921753e",
                  "23ad6e22-54d9-4b2b-b636-5b332ea8420e",
                  "6da84833-1bbd-4612-aacd-bf59fcb020d7",
                  "71cb804d-fcef-4ffc-a8c5-c549dee244e7",
                  "ed1f73eb-68c8-4306-a3c4-b18bc838d43d",
                  "452a3ccb-f017-44d6-9bf2-095432081e1c",
                  "76e30492-1524-4eda-89a9-098cc2280189"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 14517,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "23175fd5-8963-48db-8451-ecd524ed57ea",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\users\\creditOverLimitMail.enterprise.js",
        "file": "\\controllers\\test\\users\\creditOverLimitMail.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "dcad3546-0324-449f-a27e-03ac17976876",
            "title": "User",
            "fullFile": "D:\\api\\controllers\\test\\users\\creditOverLimitMail.enterprise.js",
            "file": "\\controllers\\test\\users\\creditOverLimitMail.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "2e9fd3fc-dff0-4a32-9e49-596b2fc196cb",
                "title": "User.creditOverLimitMail",
                "fullFile": "D:\\api\\controllers\\test\\users\\creditOverLimitMail.enterprise.js",
                "file": "\\controllers\\test\\users\\creditOverLimitMail.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.creditOverLimitMail \"before each\" hook",
                    "timedOut": false,
                    "duration": 263,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nclearRecords(function() {\n    _models.User.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n        _models.Mail.remove({ $or: [{ to: new RegExp('^test.user+', \"i\") }, { to: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n            _models.Authy.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n                commonMock.setSignUpMocks(httpmock, \"enterprise\");\n                api.post(\"/enterprise/v1/signup\")\n                    .send(registrationBody)\n                    .expect(httpStatus.CREATED)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            authToken = res.body.output.authtoken;\n                            _id = res.body.output._id;\n                            uid = res.body.output.uid;\n                            apiURL = apiURL.replace(\":uid\", uid);\n                            done();\n                        }\n                    });\n            });\n        });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "022be4af-f7c6-42b6-897d-383c5d06b6a4",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User User.creditOverLimitMail \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bd518474-3776-4253-814f-46d2f9c35836",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should process credit over limit.",
                    "fullTitle": "Enterprise User User.creditOverLimitMail Should process credit over limit.",
                    "timedOut": false,
                    "duration": 57,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .send({\n        user_uid: uid,\n        percent_used: 90\n    })\n    .set(\"ui_admin_key\", config.UI_ADMIN_KEY)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.message == \"done\";\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f5769780-a0cd-49a1-8607-2ea531064a35",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should process credit over limit for organizations.",
                    "fullTitle": "Enterprise User User.creditOverLimitMail Should process credit over limit for organizations.",
                    "timedOut": false,
                    "duration": 2033,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncreateOrgPlans(function() {\n    createOrg({\n        done: done\n    }, function(org) {\n        var email = \"test.user+1@raweng.com\";\n        fetchRoles({\n            done: done,\n            org_uid: org.uid\n        }, function(res) {\n            inviteUsers({\n                roles: res.body.output.objects,\n                user_uid: \"\",\n                org_uid: org.uid\n            }, function() {\n                api.post(apiURL)\n                    .send({\n                        user_uid: org.org_account.uid,\n                        percent_used: 90\n                    })\n                    .set(\"ui_admin_key\", config.UI_ADMIN_KEY)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            var isValid = res.body.message == \"done\";\n                            isValid.should.equal(true);\n                            done();\n                        }\n                    });\n            });\n        });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "642780e4-9559-4f26-b745-2576b6d31fe6",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should skip credit over limit.",
                    "fullTitle": "Enterprise User User.creditOverLimitMail Should skip credit over limit.",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.findOneAndUpdate({\n        \"uid\": uid\n    }, {\n        credit_limit_email: true\n    },\n    function(err, updatedUser) {\n        api.post(apiURL)\n            .send({\n                user_uid: uid,\n                percent_used: 90\n            })\n            .set(\"ui_admin_key\", config.UI_ADMIN_KEY)\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    var isValid = res.body.message == \"skipped\";\n                    isValid.should.equal(true);\n                    done();\n                }\n            });\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2f3ff419-6d08-49ee-b52a-f28fb3c4d6db",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "f5769780-a0cd-49a1-8607-2ea531064a35",
                  "642780e4-9559-4f26-b745-2576b6d31fe6",
                  "2f3ff419-6d08-49ee-b52a-f28fb3c4d6db"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 2103,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "dbbde10b-35c7-4aa5-9318-6d8664255174",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\users\\disableTwoFA.enterprise.js",
        "file": "\\controllers\\test\\users\\disableTwoFA.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "1954ce65-4a22-483b-95ab-f8d40e550ec4",
            "title": "User",
            "fullFile": "D:\\api\\controllers\\test\\users\\disableTwoFA.enterprise.js",
            "file": "\\controllers\\test\\users\\disableTwoFA.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "67172ddc-ae32-4040-aa1c-321b2bcf8052",
                "title": "User.disableTwoFA",
                "fullFile": "D:\\api\\controllers\\test\\users\\disableTwoFA.enterprise.js",
                "file": "\\controllers\\test\\users\\disableTwoFA.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.disableTwoFA \"before each\" hook",
                    "timedOut": false,
                    "duration": 262,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({ deleted_at: null }, function(error, user) {\n    _models.Mail.remove({ deleted_at: null }, function(error, user) {\n        _models.Authy.remove({ deleted_at: null }, function(error, user) {\n            commonMock.setSignUpMocks(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/signup\")\n                .send(registrationBody)\n                .expect(httpStatus.CREATED)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        authToken = res.body.output.authtoken;\n                        _id = res.body.output._id;\n                        done();\n                    }\n                });\n        });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ae652b01-5f1b-4cc0-9493-0e99df6c4163",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User User.disableTwoFA \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3ebb07f7-e7b8-4fb2-b3c1-1466c404642f",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should disable twofa.",
                    "fullTitle": "Enterprise User User.disableTwoFA Should disable twofa.",
                    "timedOut": false,
                    "duration": 253,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.authy_number = \"9619982150\";\ntempRegistrationBody.country_code = \"91\";\ndelete tempRegistrationBody.password;\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\napi.put(\"/enterprise/v1/user\")\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var authy_userId = res.body.output.authy_user_uid;\n            commonMock.authySMSVerification(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/authy/sms\")\n                .send({\n                    authy_id: authy_userId\n                })\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                        api.post(\"/enterprise/v1/authy/verifyotp\")\n                            .send({\n                                authy_user_uid: authy_userId,\n                                token: otpBody.token,\n                                option_selected: \"otp\"\n                            })\n                            .set('authtoken', authToken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    var enable_twofa = res.body.output.enable_twofa;\n                                    if (enable_twofa == \"verified\") {\n                                        api.post(apiURL)\n                                            .send({})\n                                            .set('authtoken', authToken)\n                                            .expect(httpStatus.OK)\n                                            .end(function(err, res) {\n                                                if (err) {\n                                                    done(err);\n                                                } else {\n                                                    var isValid =\n                                                        res.body.output.enable_twofa == \"disable\" &&\n                                                        res.body.output.authy_user_uid == \"\" &&\n                                                        res.body.output.is_twofa_sms_enabled == false;\n                                                    isValid.should.equal(true);\n                                                    done();\n                                                }\n                                            });\n                                    } else {\n                                        true.should.equal(false);\n                                    }\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "07367cc8-6fae-4a71-aa3c-a77087fbe5a6",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get default plan for disable twofa.",
                    "fullTitle": "Enterprise User User.disableTwoFA Should get default plan for disable twofa.",
                    "timedOut": false,
                    "duration": 250,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.authy_number = \"9619982150\";\ntempRegistrationBody.country_code = \"91\";\ndelete tempRegistrationBody.password;\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\napi.put(\"/enterprise/v1/user\")\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var authy_userId = res.body.output.authy_user_uid;\n            commonMock.authySMSVerification(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/authy/sms\")\n                .send({\n                    authy_id: authy_userId\n                })\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                        api.post(\"/enterprise/v1/authy/verifyotp\")\n                            .send({\n                                authy_user_uid: authy_userId,\n                                token: otpBody.token,\n                                option_selected: \"otp\"\n                            })\n                            .set('authtoken', authToken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    var enable_twofa = res.body.output.enable_twofa;\n                                    if (enable_twofa == \"verified\") {\n                                        api.post(apiURL)\n                                            .send({})\n                                            .set('authtoken', authToken)\n                                            .expect(httpStatus.OK)\n                                            .end(function(err, res) {\n                                                if (err) {\n                                                    done(err);\n                                                } else {\n                                                    var isValid = false;\n                                                    if (res.body.output.plan.length == 1) {\n                                                        var defaultPlan = _.first(_.filter(server.plan.list, function(plan) {\n                                                            //return (plan || {}).enterprise_plan || false;\n                                                            return ((plan || {}).plan_type || \"\") == \"enterprise\";\n                                                        })) || {};\n                                                        defaultPlan = utils.skipAttr(convert.getJSON(defaultPlan));\n                                                        isValid = res.body.output.plan[0].uid == defaultPlan.uid;\n                                                    }\n                                                    isValid.should.equal(true);\n                                                    done();\n                                                }\n                                            });\n                                    } else {\n                                        true.should.equal(false);\n                                    }\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "41e9e25b-d7b6-4b1e-9152-7b3b4516943a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get default attributes for disable twofa.",
                    "fullTitle": "Enterprise User User.disableTwoFA Should get default attributes for disable twofa.",
                    "timedOut": false,
                    "duration": 351,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.authy_number = \"9619982150\";\ntempRegistrationBody.country_code = \"91\";\ndelete tempRegistrationBody.password;\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\napi.put(\"/enterprise/v1/user\")\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var authy_userId = res.body.output.authy_user_uid;\n            commonMock.authySMSVerification(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/authy/sms\")\n                .send({\n                    authy_id: authy_userId\n                })\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                        api.post(\"/enterprise/v1/authy/verifyotp\")\n                            .send({\n                                authy_user_uid: authy_userId,\n                                token: otpBody.token,\n                                option_selected: \"otp\"\n                            })\n                            .set('authtoken', authToken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    var enable_twofa = res.body.output.enable_twofa;\n                                    if (enable_twofa == \"verified\") {\n                                        api.post(apiURL)\n                                            .send({})\n                                            .set('authtoken', authToken)\n                                            .expect(httpStatus.OK)\n                                            .end(function(err, res) {\n                                                if (err) {\n                                                    done(err);\n                                                } else {\n                                                    var isValid = false;\n                                                    if (res.body.output.plan.length == 1) {\n                                                        isValid = utils.isHaveKeyVals(res.body.output, [\n                                                                \"first_name\", \"flow_uid\", \"job_title\", \"last_name\", \"locale\",\n                                                                \"merchantid\", \"payment_set\", \"subscription\"\n                                                            ]) &&\n                                                            res.body.output.subscription.days == server.plan.enterprise.TrialPeriod &&\n                                                            moment(new Date(res.body.output.subscription.start_date)).format(\"YYYY-MM-DD\") ==\n                                                            moment(new Date()).format(\"YYYY-MM-DD\");\n                                                    }\n                                                    isValid.should.equal(true);\n                                                    done();\n                                                }\n                                            });\n                                    } else {\n                                        true.should.equal(false);\n                                    }\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6c98a432-5645-472a-b0e2-b35a78d8f2a6",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should disable twofa for google login.",
                    "fullTitle": "Enterprise User User.disableTwoFA Should disable twofa for google login.",
                    "timedOut": false,
                    "duration": 341,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\ncommonMock.googleLogin(httpmock, \"enterprise\");\napi.post(\"/enterprise/v1/login/google\")\n    .send(loginBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            authToken = res.body.output.authtoken;\n            _id = res.body.output._id;\n            var tempRegistrationBody = global.getImmutable(registrationBody);\n            tempRegistrationBody.authy_number = \"9619982150\";\n            tempRegistrationBody.country_code = \"91\";\n            delete tempRegistrationBody.password;\n            commonMock.authyNumberChange(httpmock, \"enterprise\");\n            commonMock.authyDelete(httpmock, \"enterprise\");\n            api.put(\"/enterprise/v1/user\")\n                .send(tempRegistrationBody)\n                .set('authtoken', authToken)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        var authy_userId = res.body.output.authy_user_uid;\n                        commonMock.authySMSVerification(httpmock, \"enterprise\");\n                        api.post(\"/enterprise/v1/authy/sms\")\n                            .send({\n                                authy_id: authy_userId\n                            })\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                                    api.post(\"/enterprise/v1/authy/verifyotp\")\n                                        .send({\n                                            authy_user_uid: authy_userId,\n                                            token: otpBody.token,\n                                            option_selected: \"otp\"\n                                        })\n                                        .set('authtoken', authToken)\n                                        .expect(httpStatus.OK)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                var enable_twofa = res.body.output.enable_twofa;\n                                                if (enable_twofa == \"verified\") {\n                                                    api.post(apiURL)\n                                                        .send({})\n                                                        .set('authtoken', authToken)\n                                                        .expect(httpStatus.OK)\n                                                        .end(function(err, res) {\n                                                            if (err) {\n                                                                done(err);\n                                                            } else {\n                                                                var isValid =\n                                                                    res.body.output.enable_twofa == \"disable\" &&\n                                                                    res.body.output.authy_user_uid == \"\" &&\n                                                                    res.body.output.is_twofa_sms_enabled == false;\n                                                                isValid.should.equal(true);\n                                                                done();\n                                                            }\n                                                        });\n                                                } else {\n                                                    true.should.equal(false);\n                                                }\n                                            }\n                                        });\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a1bbd76f-d348-4bff-b545-1252939f47b0",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get default plan for google login.",
                    "fullTitle": "Enterprise User User.disableTwoFA Should get default plan for google login.",
                    "timedOut": false,
                    "duration": 414,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\ncommonMock.googleLogin(httpmock, \"enterprise\");\napi.post(\"/enterprise/v1/login/google\")\n    .send(loginBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            authToken = res.body.output.authtoken;\n            _id = res.body.output._id;\n            var tempRegistrationBody = global.getImmutable(registrationBody);\n            tempRegistrationBody.authy_number = \"9619982150\";\n            tempRegistrationBody.country_code = \"91\";\n            delete tempRegistrationBody.password;\n            commonMock.authyNumberChange(httpmock, \"enterprise\");\n            commonMock.authyDelete(httpmock, \"enterprise\");\n            api.put(\"/enterprise/v1/user\")\n                .send(tempRegistrationBody)\n                .set('authtoken', authToken)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        var authy_userId = res.body.output.authy_user_uid;\n                        commonMock.authySMSVerification(httpmock, \"enterprise\");\n                        api.post(\"/enterprise/v1/authy/sms\")\n                            .send({\n                                authy_id: authy_userId\n                            })\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                                    api.post(\"/enterprise/v1/authy/verifyotp\")\n                                        .send({\n                                            authy_user_uid: authy_userId,\n                                            token: otpBody.token,\n                                            option_selected: \"otp\"\n                                        })\n                                        .set('authtoken', authToken)\n                                        .expect(httpStatus.OK)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                var enable_twofa = res.body.output.enable_twofa;\n                                                if (enable_twofa == \"verified\") {\n                                                    api.post(apiURL)\n                                                        .send({})\n                                                        .set('authtoken', authToken)\n                                                        .expect(httpStatus.OK)\n                                                        .end(function(err, res) {\n                                                            if (err) {\n                                                                done(err);\n                                                            } else {\n                                                                var isValid = false;\n                                                                if (res.body.output.plan.length == 1) {\n                                                                    var defaultPlan = _.first(_.filter(server.plan.list, function(plan) {\n                                                                        //return (plan || {}).enterprise_plan || false;\n                                                                        return ((plan || {}).plan_type || \"\") == \"enterprise\";\n                                                                    })) || {};\n                                                                    defaultPlan = utils.skipAttr(convert.getJSON(defaultPlan));\n                                                                    isValid = res.body.output.plan[0].uid == defaultPlan.uid;\n                                                                }\n                                                                isValid.should.equal(true);\n                                                                done();\n                                                            }\n                                                        });\n                                                } else {\n                                                    true.should.equal(false);\n                                                }\n                                            }\n                                        });\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cf0b1294-b2d2-431a-a8c4-ff0b1fc0419a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get default attributes for google login.",
                    "fullTitle": "Enterprise User User.disableTwoFA Should get default attributes for google login.",
                    "timedOut": false,
                    "duration": 366,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\ncommonMock.googleLogin(httpmock, \"enterprise\");\napi.post(\"/enterprise/v1/login/google\")\n    .send(loginBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            authToken = res.body.output.authtoken;\n            _id = res.body.output._id;\n            var tempRegistrationBody = global.getImmutable(registrationBody);\n            tempRegistrationBody.authy_number = \"9619982150\";\n            tempRegistrationBody.country_code = \"91\";\n            delete tempRegistrationBody.password;\n            commonMock.authyNumberChange(httpmock, \"enterprise\");\n            commonMock.authyDelete(httpmock, \"enterprise\");\n            api.put(\"/enterprise/v1/user\")\n                .send(tempRegistrationBody)\n                .set('authtoken', authToken)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        var authy_userId = res.body.output.authy_user_uid;\n                        commonMock.authySMSVerification(httpmock, \"enterprise\");\n                        api.post(\"/enterprise/v1/authy/sms\")\n                            .send({\n                                authy_id: authy_userId\n                            })\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                                    api.post(\"/enterprise/v1/authy/verifyotp\")\n                                        .send({\n                                            authy_user_uid: authy_userId,\n                                            token: otpBody.token,\n                                            option_selected: \"otp\"\n                                        })\n                                        .set('authtoken', authToken)\n                                        .expect(httpStatus.OK)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                var enable_twofa = res.body.output.enable_twofa;\n                                                if (enable_twofa == \"verified\") {\n                                                    api.post(apiURL)\n                                                        .send({})\n                                                        .set('authtoken', authToken)\n                                                        .expect(httpStatus.OK)\n                                                        .end(function(err, res) {\n                                                            if (err) {\n                                                                done(err);\n                                                            } else {\n                                                                var isValid = false;\n                                                                if (res.body.output.plan.length == 1) {\n                                                                    isValid = utils.isHaveKeyVals(res.body.output, [\n                                                                            \"first_name\", \"flow_uid\", \"job_title\", \"last_name\", \"locale\",\n                                                                            \"merchantid\", \"payment_set\", \"subscription\"\n                                                                        ]) &&\n                                                                        res.body.output.subscription.days == server.plan.enterprise.TrialPeriod &&\n                                                                        moment(new Date(res.body.output.subscription.start_date)).format(\"YYYY-MM-DD\") ==\n                                                                        moment(new Date()).format(\"YYYY-MM-DD\");\n                                                                }\n                                                                isValid.should.equal(true);\n                                                                done();\n                                                            }\n                                                        });\n                                                } else {\n                                                    true.should.equal(false);\n                                                }\n                                            }\n                                        });\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9a4ca3c2-d184-4c53-b2e2-852875c79bc6",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise User User.disableTwoFA Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .send({})\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d23f4675-d934-4074-8ebf-de4367dd44f6",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "07367cc8-6fae-4a71-aa3c-a77087fbe5a6",
                  "41e9e25b-d7b6-4b1e-9152-7b3b4516943a",
                  "6c98a432-5645-472a-b0e2-b35a78d8f2a6",
                  "a1bbd76f-d348-4bff-b545-1252939f47b0",
                  "cf0b1294-b2d2-431a-a8c4-ff0b1fc0419a",
                  "9a4ca3c2-d184-4c53-b2e2-852875c79bc6",
                  "d23f4675-d934-4074-8ebf-de4367dd44f6"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 1982,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "61060fb3-cfcf-4f65-9ebc-17bf2c8bcfb4",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\users\\forceSuspendUser.enterprise.js",
        "file": "\\controllers\\test\\users\\forceSuspendUser.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "50a3fb1b-14dc-4c66-b676-9051ca82838f",
            "title": "User",
            "fullFile": "D:\\api\\controllers\\test\\users\\forceSuspendUser.enterprise.js",
            "file": "\\controllers\\test\\users\\forceSuspendUser.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "dfe2071e-7554-4c7e-9d31-89c49a3499f4",
                "title": "User.forceSuspendUser",
                "fullFile": "D:\\api\\controllers\\test\\users\\forceSuspendUser.enterprise.js",
                "file": "\\controllers\\test\\users\\forceSuspendUser.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.forceSuspendUser \"before each\" hook",
                    "timedOut": false,
                    "duration": 258,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n    _models.Mail.remove({ $or: [{ to: new RegExp('^test.user+', \"i\") }, { to: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n        commonMock.setSignUpMocks(httpmock, \"enterprise\");\n        api.post(\"/enterprise/v1/signup\")\n            .send(registrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    authToken = res.body.output.authtoken;\n                    token = res.body.output.activation_token;\n                    _id = res.body.output._id;\n                    uid = res.body.output.uid;\n                    done();\n                }\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d09b8d55-3558-45ec-b25f-98a8960c61b4",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User User.forceSuspendUser \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6c6e36e9-880d-42fe-905f-fd8f12e89003",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should suspend user account.",
                    "fullTitle": "Enterprise User User.forceSuspendUser Should suspend user account.",
                    "timedOut": false,
                    "duration": 50,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('authtoken', authToken)\n    .send({})\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.force_suspend.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "12b92914-3fe5-4284-8483-2844d00fb39c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise User User.forceSuspendUser Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .send({})\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6676e12b-2818-4b01-a015-2fbe195e9d7f",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "12b92914-3fe5-4284-8483-2844d00fb39c",
                  "6676e12b-2818-4b01-a015-2fbe195e9d7f"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 60,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "351464b1-0a6a-48c2-9358-28d4bb61ac6f",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\users\\forgotPassword.enterprise.js",
        "file": "\\controllers\\test\\users\\forgotPassword.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "d75f974a-6d34-407b-b58f-a1f81a7140c8",
            "title": "User",
            "fullFile": "D:\\api\\controllers\\test\\users\\forgotPassword.enterprise.js",
            "file": "\\controllers\\test\\users\\forgotPassword.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "ca40473b-8e1f-43ce-ab40-7e1571cdb40c",
                "title": "User.forgotPassword",
                "fullFile": "D:\\api\\controllers\\test\\users\\forgotPassword.enterprise.js",
                "file": "\\controllers\\test\\users\\forgotPassword.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.forgotPassword \"before each\" hook",
                    "timedOut": false,
                    "duration": 240,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n    _models.Mail.remove({ $or: [{ to: new RegExp('^test.user+', \"i\") }, { to: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n        commonMock.setSignUpMocks(httpmock, \"enterprise\");\n        api.post(\"/enterprise/v1/signup\")\n            .send(registrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    authToken = res.body.output.authtoken;\n                    _id = res.body.output._id;\n                    activationToken = res.body.output.activation_token;\n                    uid = res.body.output.uid;\n                    done();\n                }\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "697eabc9-67c1-4c3e-a84c-f9b430ba431d",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User User.forgotPassword \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "093e441a-06e5-4bbf-9653-6eae3c0ff260",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should send forgot password email.",
                    "fullTitle": "Enterprise User User.forgotPassword Should send forgot password email.",
                    "timedOut": false,
                    "duration": 30,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(\"/enterprise/v1/user/activate\")\n    .send({\n        user_uid: uid,\n        token: activationToken\n    })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            commonMock.captchaVerification(httpmock, \"enterprise\");\n            api.post(apiURL)\n                .send({\n                    email: registrationBody.email,\n                    captcha_code: \"03AHJ_Vuu_lnKuNq-eLmTlTmWe6Aozhp6z0uLva1JGwwIKCkGu0x3S-8qFAHtZxL3TuJatYJnGOxta3250lueM1wWWb89Lk1zNeobupy-bg579yiGTwr4_IHsN_eWANc40w_EToNjf4mmeKxLbspOGq9YEZlWFb6d5pNnT--ImOkvcoiqwrmKjQIKPEoJBlXbuTL2NfNrrEPjhCpnmSQR6z3CRD1G-V3sVFeBbzHjoatg2wpFgnS5ikf42hNcq6JP0TwhQ86pwCqZ86JKm2UQe1ISxQUOckNXx6dG9NuCjypFmEsvOaL7qrhmcbp77hfzNamTEt1GVpNBlpKMtND6FDn8X05Ni3xoZDDhjZzRvlJQWf9ygHjsVByEEQv5GU9l1f4CI1gPbulwHQFN3d_8S0mbpBOfI-YQ_fE3lSWp0dDA2mxdDXOVi7tQgIBZhRFPAa8Jt9R9_TaSch6Ygq6qrkkIuekVIs6jSsLsLavpKZgtUkLJcf1RaUUZharASNuMIt3_s9EbWM42WCs8aMLWPo8qMu4pKa6cS5Bd3D-TFTBmtADFpOvDHjqfXqX_PemEg_ZVEXUYYGQ3YhJhESe8OCuxWqcs84Jzyln7-BIxYrMEDOgejqPrUc8nOU9F2o-MtjWohx_8ci0-078Fg6UGPWUGqZ2ttrvK9mIkFi1iQVhTcThPEFH2SoG993B3YqmEagHtBwOid2pNzYY_hAffXSSvURdJstiZi7qV_ZNxnJ9CSlljI8erdb4cPSrIY8XIEahiC-q3ODrATTXfkv5iGXeYI7_rDO0DmH3OS5g9rmFZb4RTows9Gmp8xOA91_faynmaM0009rOjYx0pxAqZZECTJu20Qyvbu0_d-dd7n7vMPHvoEMqbXQhXQO62zBK-h3PRRWQlLdFgwj498SgMsFkbo1SBRi1943w\"\n                })\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        res.body.output.message.should.equal(messageList.USER_FP_USER_SENT_MAIL);\n                        done();\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ca9cb176-ffb8-46ff-be79-0a1a02cabc81",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error for account activation.",
                    "fullTitle": "Enterprise User User.forgotPassword Should give error for account activation.",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.captchaVerification(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send({\n        email: registrationBody.email,\n        captcha_code: \"03AHJ_Vuu_lnKuNq-eLmTlTmWe6Aozhp6z0uLva1JGwwIKCkGu0x3S-8qFAHtZxL3TuJatYJnGOxta3250lueM1wWWb89Lk1zNeobupy-bg579yiGTwr4_IHsN_eWANc40w_EToNjf4mmeKxLbspOGq9YEZlWFb6d5pNnT--ImOkvcoiqwrmKjQIKPEoJBlXbuTL2NfNrrEPjhCpnmSQR6z3CRD1G-V3sVFeBbzHjoatg2wpFgnS5ikf42hNcq6JP0TwhQ86pwCqZ86JKm2UQe1ISxQUOckNXx6dG9NuCjypFmEsvOaL7qrhmcbp77hfzNamTEt1GVpNBlpKMtND6FDn8X05Ni3xoZDDhjZzRvlJQWf9ygHjsVByEEQv5GU9l1f4CI1gPbulwHQFN3d_8S0mbpBOfI-YQ_fE3lSWp0dDA2mxdDXOVi7tQgIBZhRFPAa8Jt9R9_TaSch6Ygq6qrkkIuekVIs6jSsLsLavpKZgtUkLJcf1RaUUZharASNuMIt3_s9EbWM42WCs8aMLWPo8qMu4pKa6cS5Bd3D-TFTBmtADFpOvDHjqfXqX_PemEg_ZVEXUYYGQ3YhJhESe8OCuxWqcs84Jzyln7-BIxYrMEDOgejqPrUc8nOU9F2o-MtjWohx_8ci0-078Fg6UGPWUGqZ2ttrvK9mIkFi1iQVhTcThPEFH2SoG993B3YqmEagHtBwOid2pNzYY_hAffXSSvURdJstiZi7qV_ZNxnJ9CSlljI8erdb4cPSrIY8XIEahiC-q3ODrATTXfkv5iGXeYI7_rDO0DmH3OS5g9rmFZb4RTows9Gmp8xOA91_faynmaM0009rOjYx0pxAqZZECTJu20Qyvbu0_d-dd7n7vMPHvoEMqbXQhXQO62zBK-h3PRRWQlLdFgwj498SgMsFkbo1SBRi1943w\"\n    })\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.USER_FP_ACTIVATE_YOUR_ACCOUNT);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2fad9aa3-0e19-4dc3-a6ca-455e8c5a247a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as email not register.",
                    "fullTitle": "Enterprise User User.forgotPassword Should give error as email not register.",
                    "timedOut": false,
                    "duration": 198,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.captchaVerification(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send({\n        email: \"test.user.example.unit.test@example.com\",\n        captcha_code: \"03AHJ_Vuu_lnKuNq-eLmTlTmWe6Aozhp6z0uLva1JGwwIKCkGu0x3S-8qFAHtZxL3TuJatYJnGOxta3250lueM1wWWb89Lk1zNeobupy-bg579yiGTwr4_IHsN_eWANc40w_EToNjf4mmeKxLbspOGq9YEZlWFb6d5pNnT--ImOkvcoiqwrmKjQIKPEoJBlXbuTL2NfNrrEPjhCpnmSQR6z3CRD1G-V3sVFeBbzHjoatg2wpFgnS5ikf42hNcq6JP0TwhQ86pwCqZ86JKm2UQe1ISxQUOckNXx6dG9NuCjypFmEsvOaL7qrhmcbp77hfzNamTEt1GVpNBlpKMtND6FDn8X05Ni3xoZDDhjZzRvlJQWf9ygHjsVByEEQv5GU9l1f4CI1gPbulwHQFN3d_8S0mbpBOfI-YQ_fE3lSWp0dDA2mxdDXOVi7tQgIBZhRFPAa8Jt9R9_TaSch6Ygq6qrkkIuekVIs6jSsLsLavpKZgtUkLJcf1RaUUZharASNuMIt3_s9EbWM42WCs8aMLWPo8qMu4pKa6cS5Bd3D-TFTBmtADFpOvDHjqfXqX_PemEg_ZVEXUYYGQ3YhJhESe8OCuxWqcs84Jzyln7-BIxYrMEDOgejqPrUc8nOU9F2o-MtjWohx_8ci0-078Fg6UGPWUGqZ2ttrvK9mIkFi1iQVhTcThPEFH2SoG993B3YqmEagHtBwOid2pNzYY_hAffXSSvURdJstiZi7qV_ZNxnJ9CSlljI8erdb4cPSrIY8XIEahiC-q3ODrATTXfkv5iGXeYI7_rDO0DmH3OS5g9rmFZb4RTows9Gmp8xOA91_faynmaM0009rOjYx0pxAqZZECTJu20Qyvbu0_d-dd7n7vMPHvoEMqbXQhXQO62zBK-h3PRRWQlLdFgwj498SgMsFkbo1SBRi1943w\"\n    })\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.USER_FP_USER_NOT_REGISTER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b51e7ca9-a0b6-4d40-be9f-e27490f29d20",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should allowed to raised forgot password request, when user is locked.",
                    "fullTitle": "Enterprise User User.forgotPassword Should allowed to raised forgot password request, when user is locked.",
                    "timedOut": false,
                    "duration": 31,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.findOneAndUpdate({ \"uid\": uid }, {\n    failed_login_count: 7\n}, { new: true }, function(err, user) {\n    api.post(\"/enterprise/v1/user/activate\")\n        .send({\n            user_uid: uid,\n            token: activationToken\n        })\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                commonMock.captchaVerification(httpmock, \"enterprise\");\n                api.post(apiURL)\n                    .send({\n                        email: registrationBody.email,\n                        captcha_code: \"03AHJ_Vuu_lnKuNq-eLmTlTmWe6Aozhp6z0uLva1JGwwIKCkGu0x3S-8qFAHtZxL3TuJatYJnGOxta3250lueM1wWWb89Lk1zNeobupy-bg579yiGTwr4_IHsN_eWANc40w_EToNjf4mmeKxLbspOGq9YEZlWFb6d5pNnT--ImOkvcoiqwrmKjQIKPEoJBlXbuTL2NfNrrEPjhCpnmSQR6z3CRD1G-V3sVFeBbzHjoatg2wpFgnS5ikf42hNcq6JP0TwhQ86pwCqZ86JKm2UQe1ISxQUOckNXx6dG9NuCjypFmEsvOaL7qrhmcbp77hfzNamTEt1GVpNBlpKMtND6FDn8X05Ni3xoZDDhjZzRvlJQWf9ygHjsVByEEQv5GU9l1f4CI1gPbulwHQFN3d_8S0mbpBOfI-YQ_fE3lSWp0dDA2mxdDXOVi7tQgIBZhRFPAa8Jt9R9_TaSch6Ygq6qrkkIuekVIs6jSsLsLavpKZgtUkLJcf1RaUUZharASNuMIt3_s9EbWM42WCs8aMLWPo8qMu4pKa6cS5Bd3D-TFTBmtADFpOvDHjqfXqX_PemEg_ZVEXUYYGQ3YhJhESe8OCuxWqcs84Jzyln7-BIxYrMEDOgejqPrUc8nOU9F2o-MtjWohx_8ci0-078Fg6UGPWUGqZ2ttrvK9mIkFi1iQVhTcThPEFH2SoG993B3YqmEagHtBwOid2pNzYY_hAffXSSvURdJstiZi7qV_ZNxnJ9CSlljI8erdb4cPSrIY8XIEahiC-q3ODrATTXfkv5iGXeYI7_rDO0DmH3OS5g9rmFZb4RTows9Gmp8xOA91_faynmaM0009rOjYx0pxAqZZECTJu20Qyvbu0_d-dd7n7vMPHvoEMqbXQhXQO62zBK-h3PRRWQlLdFgwj498SgMsFkbo1SBRi1943w\"\n                    })\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            res.body.output.message.should.equal(messageList.USER_FP_USER_SENT_MAIL);\n                            done();\n                        }\n                    });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "38d52a5a-7842-44fc-8cc4-24c6c2cf2955",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should allowed to raised forgot password request, for 5 times invalid login attempt user.",
                    "fullTitle": "Enterprise User User.forgotPassword Should allowed to raised forgot password request, for 5 times invalid login attempt user.",
                    "timedOut": false,
                    "duration": 1156,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempBody = getImmutable(loginBody);\ntempBody.password = \"abc123\";\nvar loginCount = [];\napi.post(\"/enterprise/v1/login\")\n    .send(tempBody)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            if (res.body.error.message == messageList.USER_LOGIN_INVALID_CREDENTIAL)\n                loginCount.push(res.body.error.failed_login_count);\n            api.post(\"/enterprise/v1/login\")\n                .send(tempBody)\n                .expect(httpStatus.UNAUTHORIZED)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        if (res.body.error.message == messageList.USER_LOGIN_INVALID_CREDENTIAL)\n                            loginCount.push(res.body.error.failed_login_count);\n                        api.post(\"/enterprise/v1/login\")\n                            .send(tempBody)\n                            .expect(httpStatus.UNAUTHORIZED)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    if (res.body.error.message == messageList.USER_LOGIN_INVALID_CREDENTIAL)\n                                        loginCount.push(res.body.error.failed_login_count);\n                                    api.post(\"/enterprise/v1/login\")\n                                        .send(tempBody)\n                                        .expect(httpStatus.UNAUTHORIZED)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                if (res.body.error.message == messageList.USER_LOGIN_CAPTCHA_REQUIRED)\n                                                    loginCount.push(res.body.error.failed_login_count);\n                                                api.post(\"/enterprise/v1/login\")\n                                                    .send(tempBody)\n                                                    .expect(httpStatus.UNAUTHORIZED)\n                                                    .end(function(err, res) {\n                                                        if (err) {\n                                                            done(err);\n                                                        } else {\n                                                            if (res.body.error.message == messageList.USER_LOGIN_CAPTCHA_REQUIRED)\n                                                                loginCount.push(res.body.error.failed_login_count);\n                                                            var isValid =\n                                                                loginCount[0] == 1 &&\n                                                                loginCount[1] == 2 &&\n                                                                loginCount[2] == 3 &&\n                                                                loginCount[3] == 4 &&\n                                                                loginCount[4] == 5;\n                                                            if (isValid) {\n                                                                _models.User.findOneAndUpdate({ uid: uid }, {\n                                                                        active: true\n                                                                    },\n                                                                    function(error, user) {\n                                                                        commonMock.captchaVerification(httpmock, \"enterprise\");\n                                                                        api.post(apiURL)\n                                                                            .send({\n                                                                                email: registrationBody.email,\n                                                                                captcha_code: \"03AHJ_Vuu_lnKuNq-eLmTlTmWe6Aozhp6z0uLva1JGwwIKCkGu0x3S-8qFAHtZxL3TuJatYJnGOxta3250lueM1wWWb89Lk1zNeobupy-bg579yiGTwr4_IHsN_eWANc40w_EToNjf4mmeKxLbspOGq9YEZlWFb6d5pNnT--ImOkvcoiqwrmKjQIKPEoJBlXbuTL2NfNrrEPjhCpnmSQR6z3CRD1G-V3sVFeBbzHjoatg2wpFgnS5ikf42hNcq6JP0TwhQ86pwCqZ86JKm2UQe1ISxQUOckNXx6dG9NuCjypFmEsvOaL7qrhmcbp77hfzNamTEt1GVpNBlpKMtND6FDn8X05Ni3xoZDDhjZzRvlJQWf9ygHjsVByEEQv5GU9l1f4CI1gPbulwHQFN3d_8S0mbpBOfI-YQ_fE3lSWp0dDA2mxdDXOVi7tQgIBZhRFPAa8Jt9R9_TaSch6Ygq6qrkkIuekVIs6jSsLsLavpKZgtUkLJcf1RaUUZharASNuMIt3_s9EbWM42WCs8aMLWPo8qMu4pKa6cS5Bd3D-TFTBmtADFpOvDHjqfXqX_PemEg_ZVEXUYYGQ3YhJhESe8OCuxWqcs84Jzyln7-BIxYrMEDOgejqPrUc8nOU9F2o-MtjWohx_8ci0-078Fg6UGPWUGqZ2ttrvK9mIkFi1iQVhTcThPEFH2SoG993B3YqmEagHtBwOid2pNzYY_hAffXSSvURdJstiZi7qV_ZNxnJ9CSlljI8erdb4cPSrIY8XIEahiC-q3ODrATTXfkv5iGXeYI7_rDO0DmH3OS5g9rmFZb4RTows9Gmp8xOA91_faynmaM0009rOjYx0pxAqZZECTJu20Qyvbu0_d-dd7n7vMPHvoEMqbXQhXQO62zBK-h3PRRWQlLdFgwj498SgMsFkbo1SBRi1943w\"\n                                                                            })\n                                                                            .expect(httpStatus.OK)\n                                                                            .end(function(err, res) {\n                                                                                if (err) {\n                                                                                    done(err);\n                                                                                } else {\n                                                                                    res.body.output.message.should.equal(messageList.USER_FP_USER_SENT_MAIL);\n                                                                                    done();\n                                                                                }\n                                                                            });\n                                                                    });\n                                                            } else {\n                                                                false.should.equal(true);\n                                                            }\n                                                        }\n                                                    });\n                                            }\n                                        });\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f8568585-4e0c-4a65-8012-4a89a600232c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give captcha verification fail error.",
                    "fullTitle": "Enterprise User User.forgotPassword Should give captcha verification fail error.",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .send({\n        email: \"test.user.example.unit.test@example.com\",\n        captcha_code: \"\"\n    })\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.CAPTCHA_VERIFICATION_FAIL);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a48c2fbc-9f95-41ca-b352-0c0977a13841",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "ca9cb176-ffb8-46ff-be79-0a1a02cabc81",
                  "2fad9aa3-0e19-4dc3-a6ca-455e8c5a247a",
                  "b51e7ca9-a0b6-4d40-be9f-e27490f29d20",
                  "38d52a5a-7842-44fc-8cc4-24c6c2cf2955",
                  "f8568585-4e0c-4a65-8012-4a89a600232c",
                  "a48c2fbc-9f95-41ca-b352-0c0977a13841"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 1436,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "d532717f-4ee6-4407-bb2c-e0a5f3dffd99",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\users\\generateSupportKey.enterprise.js",
        "file": "\\controllers\\test\\users\\generateSupportKey.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "e33c3cc4-47b7-4628-8712-edbe69795438",
            "title": "User",
            "fullFile": "D:\\api\\controllers\\test\\users\\generateSupportKey.enterprise.js",
            "file": "\\controllers\\test\\users\\generateSupportKey.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "88815fd3-1e33-43d8-8244-886005ef8984",
                "title": "User.generateSupportKey",
                "fullFile": "D:\\api\\controllers\\test\\users\\generateSupportKey.enterprise.js",
                "file": "\\controllers\\test\\users\\generateSupportKey.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.generateSupportKey \"before each\" hook",
                    "timedOut": false,
                    "duration": 249,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n    _models.Mail.remove({ $or: [{ to: new RegExp('^test.user+', \"i\") }, { to: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n        commonMock.setSignUpMocks(httpmock, \"enterprise\");\n        api.post(\"/enterprise/v1/signup\")\n            .send(registrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    authToken = res.body.output.authtoken;\n                    token = res.body.output.activation_token;\n                    _id = res.body.output._id;\n                    uid = res.body.output.uid;\n                    done();\n                }\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6da57985-9223-4d10-a2c8-a29c3317f712",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User User.generateSupportKey \"after each\" hook",
                    "timedOut": false,
                    "duration": 1,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "db17e992-4cbf-407f-a5a1-aec136e55f4b",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should generate support key.",
                    "fullTitle": "Enterprise User User.generateSupportKey Should generate support key.",
                    "timedOut": false,
                    "duration": 226,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncheckSupportKey(done, function(isValid) {\n    isValid.should.equal(true);\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "550bf5b7-9786-410b-b292-f300b95e97db",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should generate support key for second time.",
                    "fullTitle": "Enterprise User User.generateSupportKey Should generate support key for second time.",
                    "timedOut": false,
                    "duration": 684,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncheckSupportKey(done, function(isValid) {\n    var firstTime = isValid;\n    api.post(\"/enterprise/v1/login\")\n        .send({\n            email: registrationBody.email,\n            password: registrationBody.password\n        })\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                authToken = res.body.output.authtoken;\n                checkSupportKey(done, function(isValid) {\n                    var secondTime = isValid;\n                    (firstTime && secondTime).should.equal(true);\n                    done();\n                });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3e1f8b4f-315b-4581-b0ea-316cc05ae5e5",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should generate support key for third time.",
                    "fullTitle": "Enterprise User User.generateSupportKey Should generate support key for third time.",
                    "timedOut": false,
                    "duration": 1084,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncheckSupportKey(done, function(isValid) {\n    var firstTime = isValid;\n    api.post(\"/enterprise/v1/login\")\n        .send({\n            email: registrationBody.email,\n            password: registrationBody.password\n        })\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                authToken = res.body.output.authtoken;\n                checkSupportKey(done, function(isValid) {\n                    var secondTime = isValid;\n                    api.post(\"/enterprise/v1/login\")\n                        .send({\n                            email: registrationBody.email,\n                            password: registrationBody.password\n                        })\n                        .expect(httpStatus.OK)\n                        .end(function(err, res) {\n                            if (err) {\n                                done(err);\n                            } else {\n                                authToken = res.body.output.authtoken;\n                                checkSupportKey(done, function(isValid) {\n                                    var thirdTime = isValid;\n                                    (firstTime && secondTime && thirdTime).should.equal(true);\n                                    done();\n                                });\n                            }\n                        });\n                });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8a1b0c73-2bcb-4a12-8a78-e29bc3126765",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should person should not be generating suport key.",
                    "fullTitle": "Enterprise User User.generateSupportKey Should person should not be generating suport key.",
                    "timedOut": false,
                    "duration": 245,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncheckSupportKey(done, function(isValid, user) {\n    api.post(apiURL)\n        .set('authtoken', user.authtoken)\n        .send({})\n        .expect(httpStatus.BAD_REQUEST)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                res.body.error.message.should.equal(messageList.SUPPORT_PERSON_SUPPORT_KEY_GENERATION_ERROR);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5a7f0fcf-1cdd-4545-8391-ca5e2016f223",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise User User.generateSupportKey Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .send({})\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "00d741fe-696d-40e8-b9c9-f76fc8b74b84",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "550bf5b7-9786-410b-b292-f300b95e97db",
                  "3e1f8b4f-315b-4581-b0ea-316cc05ae5e5",
                  "8a1b0c73-2bcb-4a12-8a78-e29bc3126765",
                  "5a7f0fcf-1cdd-4545-8391-ca5e2016f223",
                  "00d741fe-696d-40e8-b9c9-f76fc8b74b84"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 2247,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "0fcb65f4-f43b-4dc3-b698-0a23e666d238",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\users\\getAutoRefresh.enterprise.js",
        "file": "\\controllers\\test\\users\\getAutoRefresh.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "8c1a0048-da8c-4550-b8f0-c6d33722deff",
            "title": "User",
            "fullFile": "D:\\api\\controllers\\test\\users\\getAutoRefresh.enterprise.js",
            "file": "\\controllers\\test\\users\\getAutoRefresh.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "2d66a7d7-3646-427b-85a3-7bfbf80b2492",
                "title": "User.getAutoRefresh",
                "fullFile": "D:\\api\\controllers\\test\\users\\getAutoRefresh.enterprise.js",
                "file": "\\controllers\\test\\users\\getAutoRefresh.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.getAutoRefresh \"before each\" hook",
                    "timedOut": false,
                    "duration": 243,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n    _models.Mail.remove({ $or: [{ to: new RegExp('^test.user+', \"i\") }, { to: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n        _models.Authy.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n            commonMock.setSignUpMocks(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/signup\")\n                .send(registrationBody)\n                .expect(httpStatus.CREATED)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        authToken = res.body.output.authtoken;\n                        token = res.body.output.activation_token;\n                        _id = res.body.output._id;\n                        uid = res.body.output.uid;\n                        done();\n                    }\n                });\n        });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ee892951-5247-4bc8-a99e-cbdf4d52a0c2",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User User.getAutoRefresh \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4ee068d5-1313-4ca9-81cd-ac0425468b4e",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get auto_refresh to true.",
                    "fullTitle": "Enterprise User User.getAutoRefresh Should get auto_refresh to true.",
                    "timedOut": false,
                    "duration": 108,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.put(\"/enterprise/v1/user/autorefresh\")\n    .send({\n        auto_refresh: true\n    })\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            api.get(\"/enterprise/v1/user/autorefresh\")\n                .set('authtoken', authToken)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        res.body.output.auto_refresh.should.equal(true);\n                        done();\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7a429fbc-01e7-4ec7-9439-8b076698f7fb",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should gives error as valid parameters required.",
                    "fullTitle": "Enterprise User User.getAutoRefresh Should gives error as valid parameters required.",
                    "timedOut": false,
                    "duration": 44,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.put(\"/enterprise/v1/user/autorefresh\")\n    .send({\n        auto_refresh: \"true1\"\n    })\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "455d0986-dfa3-4f80-bf4b-30babf39812a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise User User.getAutoRefresh Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.put(\"/enterprise/v1/user/autorefresh\")\n    .send({\n        auto_refresh: true\n    })\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3ffd63bc-a3ad-491a-8544-360eadae4884",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "7a429fbc-01e7-4ec7-9439-8b076698f7fb",
                  "455d0986-dfa3-4f80-bf4b-30babf39812a",
                  "3ffd63bc-a3ad-491a-8544-360eadae4884"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 161,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "7b003572-0a2b-486a-95ed-14b03cc0da2b",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\users\\getAvatar.enterprise.js",
        "file": "\\controllers\\test\\users\\getAvatar.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "ef8a136a-c3b6-4943-b811-01a907a8a3ff",
            "title": "User",
            "fullFile": "D:\\api\\controllers\\test\\users\\getAvatar.enterprise.js",
            "file": "\\controllers\\test\\users\\getAvatar.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "939e11e0-4d3e-4e00-ad23-bac2749ccd89",
                "title": "User.getAvatar",
                "fullFile": "D:\\api\\controllers\\test\\users\\getAvatar.enterprise.js",
                "file": "\\controllers\\test\\users\\getAvatar.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.getAvatar \"before each\" hook",
                    "timedOut": false,
                    "duration": 245,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n    _models.Mail.remove({ $or: [{ to: new RegExp('^test.user+', \"i\") }, { to: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n        commonMock.setSignUpMocks(httpmock, \"enterprise\");\n        api.post(\"/enterprise/v1/signup\")\n            .send(registrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    authToken = res.body.output.authtoken;\n                    _id = res.body.output._id;\n                    user_uid = res.body.output.uid;\n                    done();\n                }\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d536ca1d-c835-4df4-82a7-9c4026ae0628",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User User.getAvatar \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "37da33e8-ff81-44ce-9b1d-d218ba7beb41",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get avatar.",
                    "fullTitle": "Enterprise User User.getAvatar Should get avatar.",
                    "timedOut": false,
                    "duration": 82,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.myCroppedImage = \"https://example.com/region/fl3769c85311cc403d31ff45\";\nserver.agents[\"enterprise\"].s3.UploadAvatar = function(options, callback) {\n    callback(null, {\n        ETag: \"sdfdsf35s6dfsdfdsf6565656565655665\"\n    });\n};\nserver.agents[\"enterprise\"].s3.DownloadAvatar = function(options, callback) {\n    callback(null, tempRegistrationBody.myCroppedImage);\n};\ncommonMock.avatarGetURL(httpmock, \"enterprise\", {});\napi.put(\"/enterprise/v1/user/avatar\")\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            api.get(apiURL.replace(\":user_uid\", user_uid))\n                .set('authtoken', authToken)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        res.body.length.should.equal(2114);\n                        done();\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "794524aa-e73d-4db4-8436-785ff88f5906",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get default avatar.",
                    "fullTitle": "Enterprise User User.getAvatar Should get default avatar.",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nserver.agents[\"enterprise\"].s3.DownloadAvatar = function(options, callback) {\n    callback(null, \"https://example.com/region/fl3769c85311cc403d31ff45\");\n};\ncommonMock.avatarGetURL(httpmock, \"enterprise\", {});\napi.get(apiURL.replace(\":user_uid\", \"default\"))\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.length.should.equal(2114);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "47b291a3-1921-4179-a32f-b3a821402fe7",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "794524aa-e73d-4db4-8436-785ff88f5906",
                  "47b291a3-1921-4179-a32f-b3a821402fe7"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 95,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "6e39ae6c-f962-42a1-a7f5-4b7fc479b1fc",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\users\\getCreditInfo.enterprise.js",
        "file": "\\controllers\\test\\users\\getCreditInfo.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "b254aecc-76a2-4003-a80c-61a2c28e74b9",
            "title": "User",
            "fullFile": "D:\\api\\controllers\\test\\users\\getCreditInfo.enterprise.js",
            "file": "\\controllers\\test\\users\\getCreditInfo.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "0018ca26-8bef-43e3-8ce8-aa73a957ac16",
                "title": "User.getCreditInfo",
                "fullFile": "D:\\api\\controllers\\test\\users\\getCreditInfo.enterprise.js",
                "file": "\\controllers\\test\\users\\getCreditInfo.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.getCreditInfo \"before each\" hook",
                    "timedOut": false,
                    "duration": 217,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_acc_authToken = _.first(data.organization_account.authtoken);\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n\n        api.get(\"/enterprise/v1/user\")\n            .set('authtoken', authToken)\n            .expect(httpStatus.OK)\n            .end(function(error, res) {\n                userPlan = res.body.output.user_plan;\n                done();\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0fcb786f-42b1-4efd-94aa-58196c0f0090",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise User User.getCreditInfo \"after all\" hook",
                    "timedOut": false,
                    "duration": 13,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    httpmock.cleanAll();\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4e81cc43-116a-4f0c-9899-6c90b32ee4ad",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get credits info of authenticated user.",
                    "fullTitle": "Enterprise User User.getCreditInfo Should get credits info of authenticated user.",
                    "timedOut": false,
                    "duration": 27,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            (typeof(res.body.output.available) != \"undefined\").should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "24bf9d80-f0ca-43a6-98d9-22e11cd9ee80",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise User User.getCreditInfo Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "50b1bf82-8cff-404d-9b2b-c21bd692f6a1",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "24bf9d80-f0ca-43a6-98d9-22e11cd9ee80",
                  "50b1bf82-8cff-404d-9b2b-c21bd692f6a1"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 35,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "7df5fd2b-c738-44ff-83eb-2a3acdeebca2",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\users\\getCreditInfoOrg.enterprise.js",
        "file": "\\controllers\\test\\users\\getCreditInfoOrg.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "4f103a45-3a8c-44f4-b944-9d91b52c66bd",
            "title": "User",
            "fullFile": "D:\\api\\controllers\\test\\users\\getCreditInfoOrg.enterprise.js",
            "file": "\\controllers\\test\\users\\getCreditInfoOrg.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "17e874a2-e6fb-4d25-8a54-7a6ae022ecf3",
                "title": "User.getCreditInfoOrg",
                "fullFile": "D:\\api\\controllers\\test\\users\\getCreditInfoOrg.enterprise.js",
                "file": "\\controllers\\test\\users\\getCreditInfoOrg.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.getCreditInfoOrg \"before each\" hook",
                    "timedOut": false,
                    "duration": 175,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        userPlan = data.owner.user_plan;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1155b6fa-afd0-4510-afa7-07fa31282f26",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise User User.getCreditInfoOrg \"after all\" hook",
                    "timedOut": false,
                    "duration": 6,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    httpmock.cleanAll();\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "51521fc6-62cd-4211-a201-72e1146a86d9",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get credit info of organization.",
                    "fullTitle": "Enterprise User User.getCreditInfoOrg Should get credit info of organization.",
                    "timedOut": false,
                    "duration": 40,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        //console.log(err, res.body.error);\n        if (err) {\n            done(err);\n        } else {\n            (typeof(res.body.output.available) != \"undefined\").should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5e2a3f50-1f13-45b4-863f-4764a616624a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise User User.getCreditInfoOrg Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4bf83586-d38f-4ade-9404-e28d265dc426",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "5e2a3f50-1f13-45b4-863f-4764a616624a",
                  "4bf83586-d38f-4ade-9404-e28d265dc426"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 47,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "7ded34f9-0988-4cb6-953e-6c7d7a868429",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\users\\getCurrentUser.enterprise.js",
        "file": "\\controllers\\test\\users\\getCurrentUser.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "6981f353-4195-4441-b5ed-52a90832f7d9",
            "title": "User",
            "fullFile": "D:\\api\\controllers\\test\\users\\getCurrentUser.enterprise.js",
            "file": "\\controllers\\test\\users\\getCurrentUser.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "1d9707e8-bde2-44e5-b57a-abec391403fd",
                "title": "User.getCurrentUser",
                "fullFile": "D:\\api\\controllers\\test\\users\\getCurrentUser.enterprise.js",
                "file": "\\controllers\\test\\users\\getCurrentUser.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.getCurrentUser \"before each\" hook",
                    "timedOut": false,
                    "duration": 264,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nasync.waterfall([\n    function(cbk) {\n        _models.Sessions.remove({}, function(error, user) {\n            _models.User.remove({}, function(error, user) {\n                _models.UserToken.remove({}, function(error, user) {\n                    _models.Mail.remove({}, function(error, user) {\n                        commonMock.setSignUpMocks(httpmock, \"enterprise\");\n                        api.post(\"/enterprise/v1/signup\")\n                            .send(registrationBody)\n                            .expect(httpStatus.CREATED)\n                            .end(function(err, res) {\n                                authToken = res.body.output.authtoken;\n                                cbk(err, res)\n                            });\n                    });\n                });\n            });\n        });\n    }\n], function(err, result) {\n    if (err) {\n        done(err);\n    } else {\n        done();\n    }\n})",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3f0cbc80-d011-486c-b06f-2708f3624e0f",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise User User.getCurrentUser \"after all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d437c341-2901-4159-82c0-53a1de1b6976",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User User.getCurrentUser \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a622223f-16a7-4e54-981b-bcb729b08eda",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should unauthenticate session after 4 hours.",
                    "fullTitle": "Enterprise User User.getCurrentUser Should unauthenticate session after 4 hours.",
                    "timedOut": false,
                    "duration": 75,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.brainTreeClientToken(httpmock, \"enterprise\");\napi.get(apiURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var date = moment(new Date());\n            date.subtract({ hours: 4, minutes: 5 });\n            _models.UserToken.findOneAndUpdate({\n                authtoken: authToken\n            }, {\n                idle_valid_till: date\n            }, {\n                new: true\n            }, function(error, user) {\n                api.get(apiURL)\n                    .set('authtoken', authToken)\n                    .expect(httpStatus.UNAUTHORIZED)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n                            done();\n                        }\n                    });\n            });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9a1aa9b1-2f3c-4a71-aa2d-e6469382b5d0",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get current user.",
                    "fullTitle": "Enterprise User User.getCurrentUser Should get current user.",
                    "timedOut": false,
                    "duration": 57,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.brainTreeClientToken(httpmock, \"enterprise\");\napi.get(apiURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.uid != \"\" &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\";\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4574bf57-32e7-45df-a53a-9c08780dee2d",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise User User.getCurrentUser Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.brainTreeClientToken(httpmock, \"enterprise\");\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e5f8c582-bcf6-45d1-bf56-f12596b594a0",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "9a1aa9b1-2f3c-4a71-aa2d-e6469382b5d0",
                  "4574bf57-32e7-45df-a53a-9c08780dee2d",
                  "e5f8c582-bcf6-45d1-bf56-f12596b594a0"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 141,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "13288921-a2a5-4aa9-883f-2a90040c9bab",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\users\\getDistinctNamesOrg.enterprise.js",
        "file": "\\controllers\\test\\users\\getDistinctNamesOrg.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "2c116201-df75-4c89-8130-0be4ac9a8526",
            "title": "User",
            "fullFile": "D:\\api\\controllers\\test\\users\\getDistinctNamesOrg.enterprise.js",
            "file": "\\controllers\\test\\users\\getDistinctNamesOrg.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "85f6a26d-860c-4bdc-97af-21ac52564bae",
                "title": "User.getUserStreamDistinctFlowNamesOrg",
                "fullFile": "D:\\api\\controllers\\test\\users\\getDistinctNamesOrg.enterprise.js",
                "file": "\\controllers\\test\\users\\getDistinctNamesOrg.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Enterprise User User.getUserStreamDistinctFlowNamesOrg \"before all\" hook",
                    "timedOut": false,
                    "duration": 2047,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        api.get(\"/enterprise/v1/user\")\n            .set('org_uid', org_uid)\n            .set('authtoken', authToken)\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                env_uid = res.body.output.env_uid;\n                saveBillEntries({\n                    user_uid: user_uid,\n                    authtoken: authToken,\n                    email: data.owner.email\n                }, function(error, billEntries) {\n                    if (error) {\n                        done(error);\n                    } else {\n                        _billEntries = billEntries;\n                        saveUserStreamEntries({\n                            user_uid: user_uid,\n                            authtoken: authToken,\n                            email: data.owner.email\n                        }, function(error, userStreamEntries) {\n                            if (error) {\n                                done(error);\n                            } else {\n                                _userStreamEntries = userStreamEntries;\n                                done();\n                            }\n                        });\n                    }\n                });\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5724c43f-da01-40ba-bf57-54f1a20b4571",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise User User.getUserStreamDistinctFlowNamesOrg \"after all\" hook",
                    "timedOut": false,
                    "duration": 14,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveEntries(function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a1a6506c-c0b0-4c5a-a264-cb6c4b612a95",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get distinct list of flow names in user stream.",
                    "fullTitle": "Enterprise User User.getUserStreamDistinctFlowNamesOrg Should get distinct list of flow names in user stream.",
                    "timedOut": false,
                    "duration": 47,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL.replace(\"{type}\", \"workflows\"))\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = Array.isArray(res.body.output.objects);\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "79144a2d-1a12-4521-9016-7f21b401ecab",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get distinct list of flow based on projects.",
                    "fullTitle": "Enterprise User User.getUserStreamDistinctFlowNamesOrg Should get distinct list of flow based on projects.",
                    "timedOut": false,
                    "duration": 53,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar userStreamURL = apiURL.replace(\"{type}\", \"workflows\") + \"&project_uid=\" + project_uids[0] + \",\" + project_uids[1];\napi.get(userStreamURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = Array.isArray(res.body.output.objects);\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3b41060a-7c49-4ef8-8eb4-7f9769e004bb",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get distinct list of projects names in user stream.",
                    "fullTitle": "Enterprise User User.getUserStreamDistinctFlowNamesOrg Should get distinct list of projects names in user stream.",
                    "timedOut": false,
                    "duration": 49,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL.replace(\"{type}\", \"projects\"))\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = Array.isArray(res.body.output.objects);\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ce6d84d2-34f0-46b6-8483-c740a680b5a3",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise User User.getUserStreamDistinctFlowNamesOrg Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "adaa46b2-2d7a-4d59-a386-0476b51c41c0",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "79144a2d-1a12-4521-9016-7f21b401ecab",
                  "3b41060a-7c49-4ef8-8eb4-7f9769e004bb",
                  "ce6d84d2-34f0-46b6-8483-c740a680b5a3",
                  "adaa46b2-2d7a-4d59-a386-0476b51c41c0"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 158,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "e7d983a9-92d1-48e2-8674-84ade8fef975",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\users\\getPlanUsesCheck.enterprise.js",
        "file": "\\controllers\\test\\users\\getPlanUsesCheck.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "98723199-43d2-4e76-80cc-f2de221eab7a",
            "title": "User",
            "fullFile": "D:\\api\\controllers\\test\\users\\getPlanUsesCheck.enterprise.js",
            "file": "\\controllers\\test\\users\\getPlanUsesCheck.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "17b1d060-1d65-4ff3-b744-f77b2ae18926",
                "title": "User.getPlanUsesCheck",
                "fullFile": "D:\\api\\controllers\\test\\users\\getPlanUsesCheck.enterprise.js",
                "file": "\\controllers\\test\\users\\getPlanUsesCheck.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.getPlanUsesCheck \"before each\" hook",
                    "timedOut": false,
                    "duration": 2865,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveEntries(function() {\n    async.waterfall([\n        function(cbk) {\n            _models.User.remove({}, function(error, user) {\n                commonMock.setSignUpMocks(httpmock, \"enterprise\");\n                api.post(\"/enterprise/v1/signup\")\n                    .send(testData.testRegistrationBody)\n                    .expect(httpStatus.CREATED)\n                    .end(function(err, res) {\n                        authToken = res.body.output.authtoken;\n                        api.get(\"/enterprise/v1/user\")\n                            .set('authtoken', authToken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                env_uid = res.body.output.env_uid;\n                                user_uid = res.body.output.uid;\n                                cbk(err, res);\n                            });\n                    });\n            });\n        },\n        function(res, cbk) {\n            saveBillEntries({\n                    done: done,\n                    authtoken: authToken\n                },\n                function(error, bills) {\n                    savedBills = bills;\n                    cbk(null, savedBills);\n                });\n        },\n        function(res, cbk) {\n            saveUserTriggers({\n                    done: done,\n                    authtoken: authToken\n                },\n                function(error, bills) {\n                    savedBills = bills;\n                    cbk(null, savedBills);\n                });\n        },\n        function(res, cbk) {\n            saveUserFlows({\n                    done: done,\n                    authtoken: authToken\n                },\n                function(error, userFlows) {\n                    cbk(null, userFlows);\n                });\n        }\n    ], function(err, results) {\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bd92ac6c-bd2b-4987-9abc-8753a37342f7",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise User User.getPlanUsesCheck \"after all\" hook",
                    "timedOut": false,
                    "duration": 2,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveEntries(function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7a8d7dd5-79ed-47a2-9a46-c51d061a0d58",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User User.getPlanUsesCheck \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a1bdca17-6932-4cf5-8243-b808254981f7",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get plan uses stats.",
                    "fullTitle": "Enterprise User User.getPlanUsesCheck Should get plan uses stats.",
                    "timedOut": false,
                    "duration": 53,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = isNaN(parseInt(res.body.output.trigger_count)) == false &&\n                isNaN(parseInt(res.body.output.flow_count)) == false &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\";\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3a7b020f-b7da-4441-af41-ada8d1088631",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "3a7b020f-b7da-4441-af41-ada8d1088631"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 53,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "bccd2f6b-a539-4b81-8bac-ad311c88adc4",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\users\\getPlanUsesCheckOrg.enterprise.js",
        "file": "\\controllers\\test\\users\\getPlanUsesCheckOrg.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "f117c78f-ba2c-4686-9c8d-ebc6f0c0d6f8",
            "title": "User",
            "fullFile": "D:\\api\\controllers\\test\\users\\getPlanUsesCheckOrg.enterprise.js",
            "file": "\\controllers\\test\\users\\getPlanUsesCheckOrg.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "9f0ec223-679d-465c-8085-e495cb2990c9",
                "title": "User.getPlanUsesCheckOrg",
                "fullFile": "D:\\api\\controllers\\test\\users\\getPlanUsesCheckOrg.enterprise.js",
                "file": "\\controllers\\test\\users\\getPlanUsesCheckOrg.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.getPlanUsesCheckOrg \"before each\" hook",
                    "timedOut": false,
                    "duration": 2581,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nasync.waterfall([\n    function(cbk) {\n        testCollection.organizationRemoveRecords({}, function() {\n            testCollection.organizationRecordsEntry({}, function(data) {\n                authToken = data.owner.authtoken;\n                user_uid = data.organization_account.uid;\n                org_acc_authToken = _.first(data.organization_account.authtoken);\n                org_account_uid = data.organization_account.uid;\n                org_uid = data.organization.uid;\n                api.get(\"/enterprise/v1/user\")\n                    .set('org_uid', org_uid)\n                    .set('authtoken', authToken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        env_uid = res.body.output.env_uid;\n                        user_uid = res.body.output.uid;\n                        cbk(null, res);\n                    });\n            });\n        });\n    },\n    function(res, cbk) {\n        saveBillEntries({\n                done: done,\n                authtoken: authToken\n            },\n            function(error, bills) {\n                savedBills = bills;\n                cbk(null, savedBills);\n            });\n    },\n    function(res, cbk) {\n        saveUserTriggers({\n                done: done,\n                authtoken: authToken\n            },\n            function(error, bills) {\n                savedBills = bills;\n                cbk(null, savedBills);\n            });\n    },\n    function(res, cbk) {\n        saveUserFlows({\n                done: done,\n                authtoken: authToken\n            },\n            function(error, userFlows) {\n                cbk(null, userFlows);\n            });\n    }\n], function(err, results) {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0f08ce4b-bec5-48ff-8136-c9fd03c8122a",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise User User.getPlanUsesCheckOrg \"after all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a538fa0b-5a5d-4f89-a65e-a5251554d2af",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User User.getPlanUsesCheckOrg \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "44d7b08d-1f93-4603-a58b-ad5909ef9adb",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get plan uses stats.",
                    "fullTitle": "Enterprise User User.getPlanUsesCheckOrg Should get plan uses stats.",
                    "timedOut": false,
                    "duration": 58,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('authtoken', authToken)\n    .set('org_uid', org_uid)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = isNaN(parseInt(res.body.output.trigger_count)) == false &&\n                isNaN(parseInt(res.body.output.flow_count)) == false &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\";\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9b90457b-34fb-4922-9046-d9c01629721b",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "9b90457b-34fb-4922-9046-d9c01629721b"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 58,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "e020fbb8-f7c6-46b9-bddf-72467b5ec793",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\users\\getSupportKey.enterprise.js",
        "file": "\\controllers\\test\\users\\getSupportKey.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "91b20e13-b52d-4823-b4bd-1ea312b5ea47",
            "title": "User",
            "fullFile": "D:\\api\\controllers\\test\\users\\getSupportKey.enterprise.js",
            "file": "\\controllers\\test\\users\\getSupportKey.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "43e0bb54-dc09-4b09-86b4-3c04e11eb35e",
                "title": "User.getSupportKey",
                "fullFile": "D:\\api\\controllers\\test\\users\\getSupportKey.enterprise.js",
                "file": "\\controllers\\test\\users\\getSupportKey.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.getSupportKey \"before each\" hook",
                    "timedOut": false,
                    "duration": 238,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n    _models.Mail.remove({ $or: [{ to: new RegExp('^test.user+', \"i\") }, { to: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n        commonMock.setSignUpMocks(httpmock, \"enterprise\");\n        api.post(\"/enterprise/v1/signup\")\n            .send(registrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    authToken = res.body.output.authtoken;\n                    token = res.body.output.activation_token;\n                    _id = res.body.output._id;\n                    uid = res.body.output.uid;\n                    done();\n                }\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5aa65d6c-b3c3-4744-aa59-25d543247203",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User User.getSupportKey \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b907c65d-24ae-4d53-b373-5466d89cf75a",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get support key.",
                    "fullTitle": "Enterprise User User.getSupportKey Should get support key.",
                    "timedOut": false,
                    "duration": 89,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('authtoken', authToken)\n    .send({})\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        api.get(apiURL)\n            .set('authtoken', authToken)\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    res.body.output.supportKey.should.not.equal(\"\");\n                    done();\n                }\n            });\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f72132eb-50ed-4f16-895d-4f2854743701",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise User User.getSupportKey Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1c38b403-0e1e-4c7f-8099-2b0ca724b39d",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "f72132eb-50ed-4f16-895d-4f2854743701",
                  "1c38b403-0e1e-4c7f-8099-2b0ca724b39d"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 100,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "4c11c4c6-3c62-4d28-a5ab-f03214df958b",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\users\\getTransactionsInfo.enterprise.js",
        "file": "\\controllers\\test\\users\\getTransactionsInfo.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "ef6cc2af-d6e0-47d4-a3bd-c06626f5b414",
            "title": "User",
            "fullFile": "D:\\api\\controllers\\test\\users\\getTransactionsInfo.enterprise.js",
            "file": "\\controllers\\test\\users\\getTransactionsInfo.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "ee3727ef-0bd2-483c-8d51-64998574ebdd",
                "title": "User.getTransactionsInfo",
                "fullFile": "D:\\api\\controllers\\test\\users\\getTransactionsInfo.enterprise.js",
                "file": "\\controllers\\test\\users\\getTransactionsInfo.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.getTransactionsInfo \"before each\" hook",
                    "timedOut": false,
                    "duration": 412,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_acc_authToken = _.first(data.organization_account.authtoken);\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n\n        api.get(\"/enterprise/v1/user\")\n            .set('authtoken', authToken)\n            .expect(httpStatus.OK)\n            .end(function(error, res) {\n                userPlan = res.body.output.user_plan;\n                done();\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "265fe56a-1c22-4524-97a1-2dd33a5eaa22",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise User User.getTransactionsInfo \"after all\" hook",
                    "timedOut": false,
                    "duration": 12,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    httpmock.cleanAll();\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8a31bf1e-ac4a-416a-b7f4-62a1882d1dc8",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get transactions info of authenticated user.",
                    "fullTitle": "Enterprise User User.getTransactionsInfo Should get transactions info of authenticated user.",
                    "timedOut": false,
                    "duration": 29,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            (typeof(res.body.output.available) != \"undefined\").should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0ff40bc8-8fa7-4766-bf3d-abfdf6e6bdb6",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise User User.getTransactionsInfo Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "95695a6d-208e-4f0c-9f6d-3aa58e4585d6",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "0ff40bc8-8fa7-4766-bf3d-abfdf6e6bdb6",
                  "95695a6d-208e-4f0c-9f6d-3aa58e4585d6"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 38,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "f302d89a-a75c-40c1-a9ef-50ba9c61b0dd",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\users\\getTransactionsInfoOrg.enterprise.js",
        "file": "\\controllers\\test\\users\\getTransactionsInfoOrg.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "4a44dded-8ff7-4b7c-8167-862b28c60035",
            "title": "User",
            "fullFile": "D:\\api\\controllers\\test\\users\\getTransactionsInfoOrg.enterprise.js",
            "file": "\\controllers\\test\\users\\getTransactionsInfoOrg.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "74db3049-f0a3-4a99-89b6-df777591ef54",
                "title": "User.getTransactionsInfoOrg",
                "fullFile": "D:\\api\\controllers\\test\\users\\getTransactionsInfoOrg.enterprise.js",
                "file": "\\controllers\\test\\users\\getTransactionsInfoOrg.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.getTransactionsInfoOrg \"before each\" hook",
                    "timedOut": false,
                    "duration": 224,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        userPlan = data.owner.user_plan;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a2838586-1a03-4f78-8a12-56c6b011b55d",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise User User.getTransactionsInfoOrg \"after all\" hook",
                    "timedOut": false,
                    "duration": 6,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    httpmock.cleanAll();\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c503237a-a728-4ba9-92a2-65717a2c0caf",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get transactions info of organization.",
                    "fullTitle": "Enterprise User User.getTransactionsInfoOrg Should get transactions info of organization.",
                    "timedOut": false,
                    "duration": 48,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        //console.log(err, res.body.error);\n        if (err) {\n            done(err);\n        } else {\n            (typeof(res.body.output.available) != \"undefined\").should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8596c82a-5759-4381-bd12-d10ca0e29600",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise User User.getTransactionsInfoOrg Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "82d5d215-dbc4-4654-be65-edfede257796",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "8596c82a-5759-4381-bd12-d10ca0e29600",
                  "82d5d215-dbc4-4654-be65-edfede257796"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 57,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "ad1bf2a3-eff8-4899-a3f8-2acd3854cf28",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\users\\getUserById.enterprise.js",
        "file": "\\controllers\\test\\users\\getUserById.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "e33b685c-0769-4705-9745-43a76932a372",
            "title": "User",
            "fullFile": "D:\\api\\controllers\\test\\users\\getUserById.enterprise.js",
            "file": "\\controllers\\test\\users\\getUserById.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "202e7fcf-7b2e-43fe-a140-d114cbcce6e5",
                "title": "User.getUserById",
                "fullFile": "D:\\api\\controllers\\test\\users\\getUserById.enterprise.js",
                "file": "\\controllers\\test\\users\\getUserById.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Enterprise User User.getUserById \"before all\" hook",
                    "timedOut": false,
                    "duration": 519,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveEntries(function() {\n    commonMock.setSignUpMocks(httpmock, \"enterprise\");\n    api.post(\"/enterprise/v1/signup\")\n        .send(registrationBody)\n        .expect(httpStatus.CREATED)\n        .end(function(error, res) {\n            if (error) {\n                done(error);\n            } else {\n                authToken = res.body.output.authtoken;\n                user_uid = res.body.output.uid;\n                _id = res.body.output._id;\n                var tempRegistrationBody = global.getImmutable(registrationBody);\n                tempRegistrationBody.email = \"test.user+2@raweng.com\";\n                commonMock.setSignUpMocks(httpmock, \"enterprise\");\n                api.post(\"/enterprise/v1/signup\")\n                    .send(tempRegistrationBody)\n                    .expect(httpStatus.CREATED)\n                    .end(function(error, res) {\n                        if (error) {\n                            done(error);\n                        } else {\n                            other_user_uid = res.body.output.uid;\n                            done();\n                        }\n                    });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f5f18a5d-6779-446c-96cf-551f73d869b4",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise User User.getUserById \"after all\" hook",
                    "timedOut": false,
                    "duration": 2,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveEntries(function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "15bb169b-1f04-4ba0-a61e-c2153ce96510",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User User.getUserById \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6fe8f023-38f7-4d3b-b0fa-3c43fcb62f6a",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get user based on user uid.",
                    "fullTitle": "Enterprise User User.getUserById Should get user based on user uid.",
                    "timedOut": false,
                    "duration": 39,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar apiURLWithID = apiURL.replace(\":user_uid\", other_user_uid);\napi.get(apiURLWithID)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.uid.should.equal(other_user_uid);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ef823c61-13bb-4935-a6b8-29c53cc99d8c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get user not found error.",
                    "fullTitle": "Enterprise User User.getUserById Should get user not found error.",
                    "timedOut": false,
                    "duration": 52,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar apiURLWithID = apiURL.replace(\":user_uid\", \"ABC\");\napi.get(apiURLWithID)\n    .set('authtoken', authToken)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.USER_NOT_FOUND);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "776c23a7-9876-4beb-b044-23a4b59391dd",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise User User.getUserById Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar apiURLWithID = apiURL.replace(\":user_uid\", other_user_uid);\napi.get(apiURLWithID)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a821bca1-98c7-44e6-83f6-95ff632b74e8",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "ef823c61-13bb-4935-a6b8-29c53cc99d8c",
                  "776c23a7-9876-4beb-b044-23a4b59391dd",
                  "a821bca1-98c7-44e6-83f6-95ff632b74e8"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 102,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "ac416eed-b942-46ee-a67c-52c9af13fda8",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\users\\getUserCount.enterprise.js",
        "file": "\\controllers\\test\\users\\getUserCount.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "e9f234d9-b6fe-4518-a025-98b06b57d402",
            "title": "User",
            "fullFile": "D:\\api\\controllers\\test\\users\\getUserCount.enterprise.js",
            "file": "\\controllers\\test\\users\\getUserCount.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "57435336-4b8b-4f05-bd4d-aee57c564e63",
                "title": "User.getUserCount",
                "fullFile": "D:\\api\\controllers\\test\\users\\getUserCount.enterprise.js",
                "file": "\\controllers\\test\\users\\getUserCount.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Enterprise User User.getUserCount \"before all\" hook",
                    "timedOut": false,
                    "duration": 266,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveEntries(function() {\n    commonMock.setSignUpMocks(httpmock, \"enterprise\");\n    api.post(\"/enterprise/v1/signup\")\n        .send(registrationBody)\n        .expect(httpStatus.CREATED)\n        .end(function(error, res) {\n            if (error) {\n                done(error);\n            } else {\n                authToken = res.body.output.authtoken;\n                user_uid = res.body.output.uid;\n                _id = res.body.output._id;\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7a994a67-b0cd-4ea3-a2b4-a3b2d4548892",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise User User.getUserCount \"after all\" hook",
                    "timedOut": false,
                    "duration": 2,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveEntries(function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8028af4f-c46a-4b7b-9b8b-788367ed9f77",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User User.getUserCount \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4dd300d8-af12-439d-94fd-8bdf794b20a2",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get register user count.",
                    "fullTitle": "Enterprise User User.getUserCount Should get register user count.",
                    "timedOut": false,
                    "duration": 49,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            isNaN(parseInt(res.body.output.count)).should.equal(false);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "47d6f5ee-442b-4338-99b3-02ffd017d2bf",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise User User.getUserCount Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ce722243-b1a4-455b-904d-41b68e5f3554",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "47d6f5ee-442b-4338-99b3-02ffd017d2bf",
                  "ce722243-b1a4-455b-904d-41b68e5f3554"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 60,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "8fea7574-c3fe-4f53-918a-da734ab06a60",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\users\\getUserFlowExecutionList.enterprise.js",
        "file": "\\controllers\\test\\users\\getUserFlowExecutionList.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "f397bbc3-4fb0-4245-a3b8-dcedfbfd55d8",
            "title": "User",
            "fullFile": "D:\\api\\controllers\\test\\users\\getUserFlowExecutionList.enterprise.js",
            "file": "\\controllers\\test\\users\\getUserFlowExecutionList.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "0b2ee2bb-a6e6-4407-94f5-903a7c50c41c",
                "title": "Users.getUserFlowExecutionList",
                "fullFile": "D:\\api\\controllers\\test\\users\\getUserFlowExecutionList.enterprise.js",
                "file": "\\controllers\\test\\users\\getUserFlowExecutionList.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User Users.getUserFlowExecutionList \"before each\" hook",
                    "timedOut": false,
                    "duration": 545,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_org_uid = utils.generateUID();\nremoveEntries(function() {\n    commonMock.setSignUpMocks(httpmock, \"enterprise\");\n    api.post(\"/enterprise/v1/signup\")\n        .send(registrationBody)\n        .expect(httpStatus.CREATED)\n        .end(function(error, res) {\n            if (error) {\n                done(error);\n            } else {\n                authToken = res.body.output.authtoken;\n                user_uid = res.body.output.uid;\n                _id = res.body.output._id;\n                api.get(\"/enterprise/v1/user\")\n                    .set('authtoken', authToken)\n                    .expect(httpStatus.OK)\n                    .end(function(error, res) {\n                        _env_uid = res.body.output.env_uid;\n                        saveBillEntries({\n                            org_uid: _org_uid,\n                            user_uid: user_uid,\n                            env_uid: _env_uid,\n                            authtoken: authToken,\n                            email: res.body.output.email\n                        }, function(error, billEntries) {\n                            if (error) {\n                                done(error);\n                            } else {\n                                _billEntries = billEntries;\n                                done();\n                            }\n                        });\n                    });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1c3fb95a-fcc9-42f9-8d3d-9d34accbfc05",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise User Users.getUserFlowExecutionList \"after all\" hook",
                    "timedOut": false,
                    "duration": 6,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveEntries(function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "089129c0-9824-435d-8bb1-141e2ea3f5f2",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get list of user streams of flow-execution for particular flow_uid.",
                    "fullTitle": "Enterprise User Users.getUserFlowExecutionList Should get list of user streams of flow-execution for particular flow_uid.",
                    "timedOut": false,
                    "duration": 55,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL.replace(\":flow_uid\", flow_uid);\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects)) {\n                isValid = true;\n            }\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\" &&\n                        item.flow_uid == flow_uid;\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "02dfc55f-eed3-44aa-96a8-afd85a8038c5",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get limited list of user streams of flow-execution based on skip/limit.",
                    "fullTitle": "Enterprise User Users.getUserFlowExecutionList Should get limited list of user streams of flow-execution based on skip/limit.",
                    "timedOut": false,
                    "duration": 52,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL.replace(\":flow_uid\", flow_uid) + \"?skip=1&limit=1\";\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects));\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "10ddef2d-23b9-4afc-92a0-09b3d090f476",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise User Users.getUserFlowExecutionList Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL.replace(\":flow_uid\", flow_uid);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1628681c-cf5f-4cc2-b080-800236ade5a6",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "02dfc55f-eed3-44aa-96a8-afd85a8038c5",
                  "10ddef2d-23b9-4afc-92a0-09b3d090f476",
                  "1628681c-cf5f-4cc2-b080-800236ade5a6"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 117,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "57f9b71f-11bc-4603-9e6e-078797b430bd",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\users\\getUserFlowExecutionListOrg.enterprise.js",
        "file": "\\controllers\\test\\users\\getUserFlowExecutionListOrg.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "78d39b4f-5cac-4b38-b65b-8d25463773c7",
            "title": "User",
            "fullFile": "D:\\api\\controllers\\test\\users\\getUserFlowExecutionListOrg.enterprise.js",
            "file": "\\controllers\\test\\users\\getUserFlowExecutionListOrg.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "847024d5-d27f-4c3d-b241-d33469cad58f",
                "title": "Users.getUserFlowExecutionListOrg",
                "fullFile": "D:\\api\\controllers\\test\\users\\getUserFlowExecutionListOrg.enterprise.js",
                "file": "\\controllers\\test\\users\\getUserFlowExecutionListOrg.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User Users.getUserFlowExecutionListOrg \"before each\" hook",
                    "timedOut": false,
                    "duration": 492,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n//_org_uid = utils.generateUID();\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        api.get(\"/enterprise/v1/user\")\n            .set('authtoken', authToken)\n            .expect(httpStatus.OK)\n            .end(function(error, res) {\n                _env_uid = res.body.output.env_uid;\n                saveBillEntries({\n                    org_uid: _org_uid,\n                    user_uid: user_uid,\n                    env_uid: _env_uid,\n                    authtoken: authToken,\n                    email: res.body.output.email\n                }, function(error, billEntries) {\n                    if (error) {\n                        done(error);\n                    } else {\n                        _billEntries = billEntries;\n                        done();\n                    }\n                });\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "14fdc469-5e6a-4df8-bc36-6148725ded05",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise User Users.getUserFlowExecutionListOrg \"after all\" hook",
                    "timedOut": false,
                    "duration": 15,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveEntries(function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "08c5782d-237f-4716-a59a-8b4b88b7f9fc",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get list of user streams of flow-execution for particular flow_uid.",
                    "fullTitle": "Enterprise User Users.getUserFlowExecutionListOrg Should get list of user streams of flow-execution for particular flow_uid.",
                    "timedOut": false,
                    "duration": 34,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL.replace(\":flow_uid\", flow_uid);\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects)) {\n                isValid = true;\n            }\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\" &&\n                        item.flow_uid == flow_uid;\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "57b3ad0b-6f28-44ac-b99f-f6911e7f432a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get limited list of user streams of flow-execution based on skip/limit.",
                    "fullTitle": "Enterprise User Users.getUserFlowExecutionListOrg Should get limited list of user streams of flow-execution based on skip/limit.",
                    "timedOut": false,
                    "duration": 43,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL.replace(\":flow_uid\", flow_uid) + \"?skip=1&limit=1\";\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects));\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d17f01e8-e19d-4437-b569-1ca0b475543d",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise User Users.getUserFlowExecutionListOrg Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL.replace(\":flow_uid\", flow_uid);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "97214c1e-10ca-4d21-baa3-88d8022f8d2c",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "57b3ad0b-6f28-44ac-b99f-f6911e7f432a",
                  "d17f01e8-e19d-4437-b569-1ca0b475543d",
                  "97214c1e-10ca-4d21-baa3-88d8022f8d2c"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 91,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "fadb7c9c-974b-4b2d-8a20-292b0afba0db",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\users\\getUserStreamData.enterprise.js",
        "file": "\\controllers\\test\\users\\getUserStreamData.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "5182ef87-5e62-476e-a39b-202b10722c94",
            "title": "User",
            "fullFile": "D:\\api\\controllers\\test\\users\\getUserStreamData.enterprise.js",
            "file": "\\controllers\\test\\users\\getUserStreamData.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "a50f3602-090b-437c-b894-c1afda062a88",
                "title": "Users.getUserStreamData",
                "fullFile": "D:\\api\\controllers\\test\\users\\getUserStreamData.enterprise.js",
                "file": "\\controllers\\test\\users\\getUserStreamData.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User Users.getUserStreamData \"before each\" hook",
                    "timedOut": false,
                    "duration": 2470,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_org_uid = utils.generateUID();\nremoveEntries(function() {\n    commonMock.setSignUpMocks(httpmock, \"enterprise\");\n    api.post(\"/enterprise/v1/signup\")\n        .send(registrationBody)\n        .expect(httpStatus.CREATED)\n        .end(function(error, res) {\n            if (error) {\n                done(error);\n            } else {\n                authToken = res.body.output.authtoken;\n                user_uid = res.body.output.uid;\n                _id = res.body.output._id;\n                api.get(\"/enterprise/v1/user\")\n                    .set('authtoken', authToken)\n                    .expect(httpStatus.OK)\n                    .end(function(error, res) {\n                        _env_uid = res.body.output.env_uid;\n                        saveBillEntries({\n                            org_uid: _org_uid,\n                            user_uid: user_uid,\n                            env_uid: _env_uid,\n                            authtoken: authToken,\n                            email: res.body.output.email\n                        }, function(error, billEntries) {\n                            if (error) {\n                                done(error);\n                            } else {\n                                _billEntries = billEntries;\n                                saveUserStreamEntries({\n                                    org_uid: _org_uid,\n                                    user_uid: user_uid,\n                                    env_uid: _env_uid,\n                                    authtoken: authToken,\n                                    email: res.body.output.email\n                                }, function(error, userStreamEntries) {\n                                    if (error) {\n                                        done(error);\n                                    } else {\n                                        _userStreamEntries = userStreamEntries;\n                                        done();\n                                    }\n                                });\n                            }\n                        });\n                    });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "13e163ea-7536-4bbc-bd64-1086759f30c9",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise User Users.getUserStreamData \"after all\" hook",
                    "timedOut": false,
                    "duration": 7,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveEntries(function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "37e55a2f-38e3-4043-a321-1cd724161c2c",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get list of user stream.",
                    "fullTitle": "Enterprise User Users.getUserStreamData Should get list of user stream.",
                    "timedOut": false,
                    "duration": 76,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects);\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\" &&\n                        (typeof(item.env_uid) == \"undefined\" ||\n                            item.env_uid == _env_uid ||\n                            item.env_uid == null)\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d6d378af-03f4-43d4-b553-4870ac8e0741",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user stream for particular flow uid.",
                    "fullTitle": "Enterprise User Users.getUserStreamData Should get list of user stream for particular flow uid.",
                    "timedOut": false,
                    "duration": 49,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow_uid=\" + flow_uids[3];\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects);\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\" &&\n                        item.metadata.flow_uid == flow_uids[3];\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "015dcfa3-ff68-40b4-9da3-0c6f3b5f8f1f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user stream for particular project uid.",
                    "fullTitle": "Enterprise User Users.getUserStreamData Should get list of user stream for particular project uid.",
                    "timedOut": false,
                    "duration": 50,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?project_uid=\" + project_uids[3];\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects);\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\" &&\n                        item.metadata.project_uid == project_uids[3];\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1ae0e1fe-3ef5-413e-ad2f-d97b2cfb6704",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user stream for particular flow uid and project uid.",
                    "fullTitle": "Enterprise User Users.getUserStreamData Should get list of user stream for particular flow uid and project uid.",
                    "timedOut": false,
                    "duration": 53,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow_uid=\" + flow_uids[3] + \"&project_uid=\" + project_uids[3];\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects);\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\" &&\n                        item.metadata.flow_uid == flow_uids[3] &&\n                        item.metadata.project_uid == project_uids[3];\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "05eca2d9-2566-4e1c-a9d5-85e998fe5891",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get limited list of user stream based on skip/limit.",
                    "fullTitle": "Enterprise User Users.getUserStreamData Should get limited list of user stream based on skip/limit.",
                    "timedOut": false,
                    "duration": 87,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?skip=2&limit=2&field=created_at&direction=asc\";\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            _models.UserStream.find({\n                \"deleted_at\": null,\n                \"user_uid\": user_uid\n            }, function(error, userStreams) {\n                var isValid = false;\n                if (!error) {\n                    if (typeof(res.body.output.count) != \"undefined\" &&\n                        Array.isArray(res.body.output.objects)) {\n                        userStreams = utils.sortBy(userStreams, \"created_at\", \"date\");\n                        isValid = res.body.output.objects.length == 2;\n                    }\n                }\n                isValid.should.equal(true);\n                done();\n            });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "45180d85-3706-47e6-a2c0-721846c6eb68",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get limited list of user stream based on skip/limit for particular flow_uid.",
                    "fullTitle": "Enterprise User Users.getUserStreamData Should get limited list of user stream based on skip/limit for particular flow_uid.",
                    "timedOut": false,
                    "duration": 79,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?skip=2&limit=2&field=created_at&direction=asc&flow_uid=\" + flow_uids[3];\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            _models.UserStream.find({\n                \"deleted_at\": null,\n                \"user_uid\": user_uid,\n                \"metadata.flow_uid\": flow_uids[3]\n            }, function(error, userStreams) {\n                var isValid = false;\n                if (!error) {\n                    if (typeof(res.body.output.count) != \"undefined\" &&\n                        Array.isArray(res.body.output.objects)) {\n                        isValid = res.body.output.objects.length == 2;\n                    }\n                    if (isValid) {\n                        _.each(res.body.output.objects, function(item) {\n                            isValid = isValid &&\n                                typeof(item._id) == \"undefined\" &&\n                                typeof(item.__v) == \"undefined\" &&\n                                item.metadata.flow_uid == flow_uids[3];\n                        });\n                    }\n                }\n                isValid.should.equal(true);\n                done();\n            });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a4ddf4ac-5357-4ae5-b936-44ddf3306212",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get limited list of user streams based on skip/limit in title descending order.",
                    "fullTitle": "Enterprise User Users.getUserStreamData Should get limited list of user streams based on skip/limit in title descending order.",
                    "timedOut": false,
                    "duration": 59,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?skip=2&limit=2&field=title&direction=desc\";\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects));\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3ca4b713-063c-4b2a-9bbe-ee960367aa68",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get limited list of user streams based on skip/limit in title descending order for particular flow_uid.",
                    "fullTitle": "Enterprise User Users.getUserStreamData Should get limited list of user streams based on skip/limit in title descending order for particular flow_uid.",
                    "timedOut": false,
                    "duration": 58,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?skip=2&limit=2&field=title&direction=desc&flow_uid=\" + flow_uids[3];\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects)) {\n                isValid = res.body.output.objects.length == 2;\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "879cf7f6-cc5a-4ffb-b8ec-41a8f98251ad",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of flow-execution.",
                    "fullTitle": "Enterprise User Users.getUserStreamData Should get list of user streams of flow-execution.",
                    "timedOut": false,
                    "duration": 50,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=flow-execution\";\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects));\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5eab7118-325e-4fb8-ac01-1e3c0f08d971",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of flow-execution for particular flow_uid.",
                    "fullTitle": "Enterprise User Users.getUserStreamData Should get list of user streams of flow-execution for particular flow_uid.",
                    "timedOut": false,
                    "duration": 59,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=flow-execution&flow_uid=\" + flow_uids[0];\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects)) {\n                isValid = true;\n            }\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\" &&\n                        item.metadata.flow_uid == flow_uids[0];\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "dde0ce7f-afbd-4507-b1ea-e543f9a8177b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get limited list of user streams of flow-execution based on skip/limit.",
                    "fullTitle": "Enterprise User Users.getUserStreamData Should get limited list of user streams of flow-execution based on skip/limit.",
                    "timedOut": false,
                    "duration": 51,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?skip=1&limit=1&flow=flow-execution\";\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects));\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "52825ff8-7492-4b86-9438-8f7bb561d3a7",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get limited list of user streams of flow-execution based on skip/limit for particular flow_uid.",
                    "fullTitle": "Enterprise User Users.getUserStreamData Should get limited list of user streams of flow-execution based on skip/limit for particular flow_uid.",
                    "timedOut": false,
                    "duration": 53,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?skip=1&limit=1&flow=flow-execution&flow_uid=\" + flow_uids[0];\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects));\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5feeeebc-9cfb-43b5-a117-f14d71af870a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of publish-flow-downloaded.",
                    "fullTitle": "Enterprise User Users.getUserStreamData Should get list of user streams of publish-flow-downloaded.",
                    "timedOut": false,
                    "duration": 49,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=publish-flow-downloaded\";\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects));\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "dbf3cbc0-137a-450b-a244-118adc51804a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of publish-flow-downloaded.",
                    "fullTitle": "Enterprise User Users.getUserStreamData Should get list of user streams of publish-flow-downloaded.",
                    "timedOut": false,
                    "duration": 57,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=publish-flow-downloaded&flow_uid=\" + flow_uids[1];\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects));\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "445dce74-7b7c-405a-8819-18d29a13ebac",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of share-flow.",
                    "fullTitle": "Enterprise User Users.getUserStreamData Should get list of user streams of share-flow.",
                    "timedOut": false,
                    "duration": 64,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=share-flow\";\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects));\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1f4b38ab-94f2-4e13-b0a1-c3c4dd2fc338",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of share-flow for particular flow_uid.",
                    "fullTitle": "Enterprise User Users.getUserStreamData Should get list of user streams of share-flow for particular flow_uid.",
                    "timedOut": false,
                    "duration": 52,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=share-flow&flow_uid=\" + flow_uids[2];\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects));\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f6de7d8e-0bbe-4e02-a773-aced33a1a93c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of credits.",
                    "fullTitle": "Enterprise User Users.getUserStreamData Should get list of user streams of credits.",
                    "timedOut": false,
                    "duration": 53,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=credits\";\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects));\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "01345e44-9627-46b9-8105-dc6bd8d7c5e6",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of credits for particular flow_uid.",
                    "fullTitle": "Enterprise User Users.getUserStreamData Should get list of user streams of credits for particular flow_uid.",
                    "timedOut": false,
                    "duration": 54,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=credits&flow_uid=\" + flow_uids[3];\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects)) {\n                isValid = true;\n            }\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\" &&\n                        item.metadata.flow_uid == flow_uids[3];\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "26c410e5-b540-433c-aa84-29809b392f10",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of flow-execution for specific flow.",
                    "fullTitle": "Enterprise User Users.getUserStreamData Should get list of user streams of flow-execution for specific flow.",
                    "timedOut": false,
                    "duration": 59,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=flow-execution&name=utest_cases_01\";\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects));\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "27cd4710-77a1-46d0-9a05-5fc11c6e616b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of flow-execution for specific flow for particular flow_uid.",
                    "fullTitle": "Enterprise User Users.getUserStreamData Should get list of user streams of flow-execution for specific flow for particular flow_uid.",
                    "timedOut": false,
                    "duration": 50,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=flow-execution&name=utest_cases_01&flow_uid=\" + flow_uids[3];\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects)) {\n                isValid = true;\n            }\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\" &&\n                        item.metadata.flow_uid == flow_uids[3];\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "438bfe4e-4ac6-42d7-8ad5-a2d59c35b347",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of flow-execution for specific detail.",
                    "fullTitle": "Enterprise User Users.getUserStreamData Should get list of user streams of flow-execution for specific detail.",
                    "timedOut": false,
                    "duration": 57,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=flow-execution&detail=command,enabled\";\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects));\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a355a9ab-d4df-4948-9d10-b1a52915dc07",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of flow-execution for specific detail for particular flow_uid.",
                    "fullTitle": "Enterprise User Users.getUserStreamData Should get list of user streams of flow-execution for specific detail for particular flow_uid.",
                    "timedOut": false,
                    "duration": 57,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=flow-execution&detail=command,enabled&flow_uid=\" + flow_uids[1];\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects));\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "04d9e617-a46a-4f77-b444-f638e1c80291",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not get list of user streams of flow-execution for specific details.",
                    "fullTitle": "Enterprise User Users.getUserStreamData Should not get list of user streams of flow-execution for specific details.",
                    "timedOut": false,
                    "duration": 46,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=flow-execution&detail=enabled1\";\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects));\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6e71b928-1182-4ed1-96be-a032892ce988",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not get list of user streams of flow-execution for specific detail for particular flow_uid.",
                    "fullTitle": "Enterprise User Users.getUserStreamData Should not get list of user streams of flow-execution for specific detail for particular flow_uid.",
                    "timedOut": false,
                    "duration": 63,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=flow-execution&detail=enabled1&flow_uid=\" + flow_uids[3];\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects));\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2ffb8ff9-6d0d-4852-84b2-1ebc18228e9c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of publish-flow-downloaded for specific detail.",
                    "fullTitle": "Enterprise User Users.getUserStreamData Should get list of user streams of publish-flow-downloaded for specific detail.",
                    "timedOut": false,
                    "duration": 73,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=publish-flow-downloaded&detail=command,enabled\";\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects));\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b9ca7674-bc5c-4a4a-b205-2d115bfbaebf",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of publish-flow-downloaded for specific detail for particular flow_uid.",
                    "fullTitle": "Enterprise User Users.getUserStreamData Should get list of user streams of publish-flow-downloaded for specific detail for particular flow_uid.",
                    "timedOut": false,
                    "duration": 53,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=publish-flow-downloaded&detail=command,enabled&flow_uid=\" + flow_uids[1];\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects));\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5e9097a7-e4ae-4d52-b383-964308a70c81",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not get list of user streams of publish-flow-downloaded for specific detail.",
                    "fullTitle": "Enterprise User Users.getUserStreamData Should not get list of user streams of publish-flow-downloaded for specific detail.",
                    "timedOut": false,
                    "duration": 50,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=publish-flow-downloaded&detail=enabled1\";\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects)) {\n                isValid = res.body.output.objects.length == 0 &&\n                    res.body.output.count == 0;\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6155f8b1-7218-4751-bab9-bd85fe65e209",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not get list of user streams of publish-flow-downloaded for specific detail for particular flow_uid.",
                    "fullTitle": "Enterprise User Users.getUserStreamData Should not get list of user streams of publish-flow-downloaded for specific detail for particular flow_uid.",
                    "timedOut": false,
                    "duration": 49,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=publish-flow-downloaded&detail=enabled1&flow_uid=\" + flow_uids[3];\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects)) {\n                isValid = res.body.output.objects.length == 0 &&\n                    res.body.output.count == 0;\n            }\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\" &&\n                        item.metadata.flow_uid == flow_uids[3];\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "567d92cc-f256-4a7e-9b61-9c01a85d0336",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of share-flow for specific detail.",
                    "fullTitle": "Enterprise User Users.getUserStreamData Should get list of user streams of share-flow for specific detail.",
                    "timedOut": false,
                    "duration": 68,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=share-flow&detail=command,enabled\";\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects));\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d9244d26-5875-4d29-a7c3-4d33bb5190ad",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of share-flow for specific detail for particular flow_uid.",
                    "fullTitle": "Enterprise User Users.getUserStreamData Should get list of user streams of share-flow for specific detail for particular flow_uid.",
                    "timedOut": false,
                    "duration": 64,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=share-flow&detail=command,enabled&flow_uid=\" + flow_uids[1];\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects)) {\n                isValid = true;\n            }\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\" &&\n                        item.metadata.flow_uid == flow_uids[1];\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1ace773b-4c16-4d17-9205-2a64c462bb86",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not get list of user streams of share-flow for specific detail.",
                    "fullTitle": "Enterprise User Users.getUserStreamData Should not get list of user streams of share-flow for specific detail.",
                    "timedOut": false,
                    "duration": 66,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=share-flow&detail=enabled1\";\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects)) {\n                isValid = res.body.output.objects.length == 0 &&\n                    res.body.output.count == 0;\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "dd3a480b-ceef-4d91-90db-0b9a139af389",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of result from date range.",
                    "fullTitle": "Enterprise User Users.getUserStreamData Should get list of result from date range.",
                    "timedOut": false,
                    "duration": 60,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=flow-execution&from=\" + from_date + \"&to=\" + to_date;\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects)) {\n                isValid = res.body.output.objects.length == 4 &&\n                    res.body.output.count == 4;\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7d8bf575-cf39-4f8f-a69a-dd4fff8b9921",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not get list of user streams of share-flow for specific detail for particular flow_uid.",
                    "fullTitle": "Enterprise User Users.getUserStreamData Should not get list of user streams of share-flow for specific detail for particular flow_uid.",
                    "timedOut": false,
                    "duration": 74,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=share-flow&detail=enabled1&flow_uid=\" + flow_uids[3];\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects)) {\n                isValid = res.body.output.objects.length == 0 &&\n                    res.body.output.count == 0;\n            }\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\" &&\n                        item.metadata.flow_uid == flow_uids[3];\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "544f5fca-ef81-4cd1-823b-773b33f96c57",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of flow-execution for bill status success.",
                    "fullTitle": "Enterprise User Users.getUserStreamData Should get list of user streams of flow-execution for bill status success.",
                    "timedOut": false,
                    "duration": 76,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=flow-execution&status=success\";\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            var successCount = 0;\n            if (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects)) {\n                _.map(res.body.output.objects, function(item) {\n                    var failCount = 0;\n                    _.each(_.filter(_billEntries, { \"_id\": item._id }), function(eachItem) {\n                        if (eachItem.result = \"fail\") {\n                            failCount++;\n                        }\n                    });\n                    if (failCount == 0) {\n                        successCount++;\n                    }\n                });\n                isValid = successCount == res.body.output.count;\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "16591887-3187-4207-9730-ab84a069e835",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of flow-execution for bill status success for particular flow_uid.",
                    "fullTitle": "Enterprise User Users.getUserStreamData Should get list of user streams of flow-execution for bill status success for particular flow_uid.",
                    "timedOut": false,
                    "duration": 63,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=flow-execution&status=success&flow_uid=\" + flow_uids[0];\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            var successCount = 0;\n            if (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects)) {\n                _.map(res.body.output.objects, function(item) {\n                    var failCount = 0;\n                    _.each(_.filter(_billEntries, { \"_id\": item._id }), function(eachItem) {\n                        if (eachItem.result = \"fail\") {\n                            failCount++;\n                        }\n                    });\n                    if (failCount == 0) {\n                        successCount++;\n                    }\n                });\n                isValid = successCount == res.body.output.count;\n            }\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\" &&\n                        item.metadata.flow_uid == flow_uids[0];\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1a5d8b8b-0259-42a9-9976-5e6ed2ef3a53",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of flow-execution for bill status success.",
                    "fullTitle": "Enterprise User Users.getUserStreamData Should get list of user streams of flow-execution for bill status success.",
                    "timedOut": false,
                    "duration": 64,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=flow-execution&status=success\";\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            var successCount = 0;\n            if (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects)) {\n                _.map(res.body.output.objects, function(item) {\n                    var failCount = 0;\n                    _.each(_.filter(_billEntries, { \"_id\": item._id }), function(eachItem) {\n                        if (eachItem.result = \"fail\") {\n                            failCount++;\n                        }\n                    });\n                    if (failCount == 0) {\n                        successCount++;\n                    }\n                });\n                isValid = successCount == res.body.output.count;\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "61ecb16e-9f5c-41ef-a5db-441a5e7ba6ff",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of flow-execution for bill status success for particular flow_uid.",
                    "fullTitle": "Enterprise User Users.getUserStreamData Should get list of user streams of flow-execution for bill status success for particular flow_uid.",
                    "timedOut": false,
                    "duration": 60,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=flow-execution&status=success&flow_uid=\" + flow_uids[3];\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            var successCount = 0;\n            if (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects)) {\n                _.map(res.body.output.objects, function(item) {\n                    var failCount = 0;\n                    _.each(_.filter(_billEntries, { \"_id\": item._id }), function(eachItem) {\n                        if (eachItem.result = \"fail\") {\n                            failCount++;\n                        }\n                    });\n                    if (failCount == 0) {\n                        successCount++;\n                    }\n                });\n                isValid = successCount == res.body.output.count;\n            }\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\" &&\n                        item.metadata.flow_uid == flow_uids[3];\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1dbbf2b7-e2be-4d63-9a6e-c8a3fdf6f54e",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise User Users.getUserStreamData Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c02312cb-92ef-4488-a85f-36daef4665da",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "d6d378af-03f4-43d4-b553-4870ac8e0741",
                  "015dcfa3-ff68-40b4-9da3-0c6f3b5f8f1f",
                  "1ae0e1fe-3ef5-413e-ad2f-d97b2cfb6704",
                  "05eca2d9-2566-4e1c-a9d5-85e998fe5891",
                  "45180d85-3706-47e6-a2c0-721846c6eb68",
                  "a4ddf4ac-5357-4ae5-b936-44ddf3306212",
                  "3ca4b713-063c-4b2a-9bbe-ee960367aa68",
                  "879cf7f6-cc5a-4ffb-b8ec-41a8f98251ad",
                  "5eab7118-325e-4fb8-ac01-1e3c0f08d971",
                  "dde0ce7f-afbd-4507-b1ea-e543f9a8177b",
                  "52825ff8-7492-4b86-9438-8f7bb561d3a7",
                  "5feeeebc-9cfb-43b5-a117-f14d71af870a",
                  "dbf3cbc0-137a-450b-a244-118adc51804a",
                  "445dce74-7b7c-405a-8819-18d29a13ebac",
                  "1f4b38ab-94f2-4e13-b0a1-c3c4dd2fc338",
                  "f6de7d8e-0bbe-4e02-a773-aced33a1a93c",
                  "01345e44-9627-46b9-8105-dc6bd8d7c5e6",
                  "26c410e5-b540-433c-aa84-29809b392f10",
                  "27cd4710-77a1-46d0-9a05-5fc11c6e616b",
                  "438bfe4e-4ac6-42d7-8ad5-a2d59c35b347",
                  "a355a9ab-d4df-4948-9d10-b1a52915dc07",
                  "04d9e617-a46a-4f77-b444-f638e1c80291",
                  "6e71b928-1182-4ed1-96be-a032892ce988",
                  "2ffb8ff9-6d0d-4852-84b2-1ebc18228e9c",
                  "b9ca7674-bc5c-4a4a-b205-2d115bfbaebf",
                  "5e9097a7-e4ae-4d52-b383-964308a70c81",
                  "6155f8b1-7218-4751-bab9-bd85fe65e209",
                  "567d92cc-f256-4a7e-9b61-9c01a85d0336",
                  "d9244d26-5875-4d29-a7c3-4d33bb5190ad",
                  "1ace773b-4c16-4d17-9205-2a64c462bb86",
                  "dd3a480b-ceef-4d91-90db-0b9a139af389",
                  "7d8bf575-cf39-4f8f-a69a-dd4fff8b9921",
                  "544f5fca-ef81-4cd1-823b-773b33f96c57",
                  "16591887-3187-4207-9730-ab84a069e835",
                  "1a5d8b8b-0259-42a9-9976-5e6ed2ef3a53",
                  "61ecb16e-9f5c-41ef-a5db-441a5e7ba6ff",
                  "1dbbf2b7-e2be-4d63-9a6e-c8a3fdf6f54e",
                  "c02312cb-92ef-4488-a85f-36daef4665da"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 2220,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "c5b1a6dc-cad5-4936-82d5-821946b3028d",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\users\\getUserStreamDataOrg.enterprise.js",
        "file": "\\controllers\\test\\users\\getUserStreamDataOrg.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "98ef6ade-eae7-4f67-9c37-977136e4ee56",
            "title": "User",
            "fullFile": "D:\\api\\controllers\\test\\users\\getUserStreamDataOrg.enterprise.js",
            "file": "\\controllers\\test\\users\\getUserStreamDataOrg.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "aff887f3-076b-409d-b516-518761122bea",
                "title": "Users.getUserStreamDataOrg",
                "fullFile": "D:\\api\\controllers\\test\\users\\getUserStreamDataOrg.enterprise.js",
                "file": "\\controllers\\test\\users\\getUserStreamDataOrg.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Enterprise User Users.getUserStreamDataOrg \"before all\" hook",
                    "timedOut": false,
                    "duration": 2676,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        api.get(\"/enterprise/v1/user\")\n            .set('authtoken', authToken)\n            .set('org_uid', org_uid)\n            .expect(httpStatus.OK)\n            .end(function(error, res) {\n                var env_uid = res.body.output.env_uid;\n                saveBillEntries({\n                    user_uid: user_uid,\n                    authtoken: authToken,\n                    email: data.owner.email,\n                    env_uid: env_uid\n                }, function(error, billEntries) {\n                    if (error) {\n                        done(error);\n                    } else {\n                        _billEntries = billEntries;\n                        saveUserStreamEntries({\n                            user_uid: user_uid,\n                            authtoken: authToken,\n                            email: data.owner.email,\n                            env_uid: env_uid\n                        }, function(error, userStreamEntries) {\n                            if (error) {\n                                done(error);\n                            } else {\n                                _userStreamEntries = userStreamEntries;\n                                done();\n                            }\n                        });\n                    }\n                });\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "878ecd5f-2b33-4acf-beae-bb37ffa906a7",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise User Users.getUserStreamDataOrg \"after all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d168271a-be33-47a0-8555-6a0ce32e6818",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get list of user stream.",
                    "fullTitle": "Enterprise User Users.getUserStreamDataOrg Should get list of user stream.",
                    "timedOut": false,
                    "duration": 69,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects);\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\";\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "366a18d5-77db-44f1-aa5a-cf0617d61f5c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user stream for particular flow uid.",
                    "fullTitle": "Enterprise User Users.getUserStreamDataOrg Should get list of user stream for particular flow uid.",
                    "timedOut": false,
                    "duration": 70,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow_uid=\" + flow_uids[3];\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects);\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\" &&\n                        item.metadata.flow_uid == flow_uids[3];\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ca1e90e5-617d-4c3f-8ad6-e58ac6901e55",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user stream for particular project uid.",
                    "fullTitle": "Enterprise User Users.getUserStreamDataOrg Should get list of user stream for particular project uid.",
                    "timedOut": false,
                    "duration": 57,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?project_uid=\" + project_uids[3];\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects);\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\" &&\n                        item.metadata.project_uid == project_uids[3];\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "49ae5efd-1054-41cd-b167-b7e646200678",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user stream for particular flow uid and project uid.",
                    "fullTitle": "Enterprise User Users.getUserStreamDataOrg Should get list of user stream for particular flow uid and project uid.",
                    "timedOut": false,
                    "duration": 61,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow_uid=\" + flow_uids[3] + \"&project_uid=\" + project_uids[3];\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects);\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\" &&\n                        item.metadata.flow_uid == flow_uids[3] &&\n                        item.metadata.project_uid == project_uids[3];\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "94a95752-b387-40c4-97e7-b5d86d431aa5",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get limited list of user stream based on skip/limit.",
                    "fullTitle": "Enterprise User Users.getUserStreamDataOrg Should get limited list of user stream based on skip/limit.",
                    "timedOut": false,
                    "duration": 72,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?skip=2&limit=2&field=created_at&direction=asc\";\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            _models.UserStream.find({\n                \"deleted_at\": null,\n                \"user_uid\": user_uid\n            }, function(error, userStreams) {\n                var isValid = false;\n                if (!error) {\n                    if (typeof(res.body.output.count) != \"undefined\" &&\n                        Array.isArray(res.body.output.objects)) {\n                        userStreams = utils.sortBy(userStreams, \"created_at\", \"date\");\n                        isValid = res.body.output.objects.length == 2;\n                    }\n                }\n                isValid.should.equal(true);\n                done();\n            });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e7ce24d6-b12b-4f10-8635-3cce93fd7954",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get limited list of user stream based on skip/limit for particular flow_uid.",
                    "fullTitle": "Enterprise User Users.getUserStreamDataOrg Should get limited list of user stream based on skip/limit for particular flow_uid.",
                    "timedOut": false,
                    "duration": 68,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?skip=2&limit=2&field=created_at&direction=asc&flow_uid=\" + flow_uids[3];\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            _models.UserStream.find({\n                \"deleted_at\": null,\n                \"user_uid\": user_uid,\n                \"metadata.flow_uid\": flow_uids[3]\n            }, function(error, userStreams) {\n                var isValid = false;\n                if (!error) {\n                    if (typeof(res.body.output.count) != \"undefined\" &&\n                        Array.isArray(res.body.output.objects)) {\n                        isValid = res.body.output.objects.length == 2;\n                    }\n                    if (isValid) {\n                        _.each(res.body.output.objects, function(item) {\n                            isValid = isValid &&\n                                typeof(item._id) == \"undefined\" &&\n                                typeof(item.__v) == \"undefined\" &&\n                                item.metadata.flow_uid == flow_uids[3];\n                        });\n                    }\n                }\n                isValid.should.equal(true);\n                done();\n            });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "650a8511-bafe-4ddb-9433-000d69562237",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get limited list of user streams based on skip/limit in title descending order.",
                    "fullTitle": "Enterprise User Users.getUserStreamDataOrg Should get limited list of user streams based on skip/limit in title descending order.",
                    "timedOut": false,
                    "duration": 58,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?skip=2&limit=2&field=title&direction=desc\";\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects));\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f0371aec-7fc0-4784-bc7a-77f04b7dbf02",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get limited list of user streams based on skip/limit in title descending order for particular flow_uid.",
                    "fullTitle": "Enterprise User Users.getUserStreamDataOrg Should get limited list of user streams based on skip/limit in title descending order for particular flow_uid.",
                    "timedOut": false,
                    "duration": 57,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?skip=2&limit=2&field=title&direction=desc&flow_uid=\" + flow_uids[3];\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects)) {\n                _userStreamEntries = utils.sortBy(_userStreamEntries, \"body.output.title\");\n                isValid = res.body.output.objects.length == 2 &&\n                    res.body.output.objects[0].metadata.flow_uid == flow_uids[3] &&\n                    res.body.output.objects[1].metadata.flow_uid == flow_uids[3];\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4c1797d2-ef15-4bd5-82a0-836fe8914e98",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of flow-execution.",
                    "fullTitle": "Enterprise User Users.getUserStreamDataOrg Should get list of user streams of flow-execution.",
                    "timedOut": false,
                    "duration": 59,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=flow-execution\";\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects));\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3e2a2040-8c04-4fbf-94c8-176de9a7dd3a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of flow-execution for particular flow_uid.",
                    "fullTitle": "Enterprise User Users.getUserStreamDataOrg Should get list of user streams of flow-execution for particular flow_uid.",
                    "timedOut": false,
                    "duration": 71,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=flow-execution&flow_uid=\" + flow_uids[0];\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects)) {\n                isValid = true;\n            }\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\" &&\n                        item.metadata.flow_uid == flow_uids[0];\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "84714c6e-eee7-4051-b1cb-00469618eb56",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get limited list of user streams of flow-execution based on skip/limit.",
                    "fullTitle": "Enterprise User Users.getUserStreamDataOrg Should get limited list of user streams of flow-execution based on skip/limit.",
                    "timedOut": false,
                    "duration": 80,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?skip=1&limit=1&flow=flow-execution\";\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects));\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5d758e29-da6c-4c0d-b48d-eb9d627edd35",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get limited list of user streams of flow-execution based on skip/limit for particular flow_uid.",
                    "fullTitle": "Enterprise User Users.getUserStreamDataOrg Should get limited list of user streams of flow-execution based on skip/limit for particular flow_uid.",
                    "timedOut": false,
                    "duration": 67,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?skip=1&limit=1&flow=flow-execution&flow_uid=\" + flow_uids[0];\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects)) {\n                isValid = res.body.output.objects.length == 1 &&\n                    res.body.output.objects[0].metadata.flow_uid == flow_uids[0];\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1090d296-8a30-4bb7-a0b2-4b1176decdae",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of publish-flow-downloaded.",
                    "fullTitle": "Enterprise User Users.getUserStreamDataOrg Should get list of user streams of publish-flow-downloaded.",
                    "timedOut": false,
                    "duration": 72,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=publish-flow-downloaded\";\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects));\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "588e56c3-8d48-4ee9-8eaf-041d066b651b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of publish-flow-downloaded.",
                    "fullTitle": "Enterprise User Users.getUserStreamDataOrg Should get list of user streams of publish-flow-downloaded.",
                    "timedOut": false,
                    "duration": 68,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=publish-flow-downloaded&flow_uid=\" + flow_uids[1];\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects));\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9a35b89f-b32f-4e9a-a25e-d420d94975eb",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of share-flow.",
                    "fullTitle": "Enterprise User Users.getUserStreamDataOrg Should get list of user streams of share-flow.",
                    "timedOut": false,
                    "duration": 65,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=share-flow\";\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects));\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c4d18a88-feba-41ac-8534-19e4a3ed299a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of share-flow for particular flow_uid.",
                    "fullTitle": "Enterprise User Users.getUserStreamDataOrg Should get list of user streams of share-flow for particular flow_uid.",
                    "timedOut": false,
                    "duration": 63,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=share-flow&flow_uid=\" + flow_uids[2];\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects)) {\n                isValid = true;\n            }\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\" &&\n                        item.metadata.flow_uid == flow_uids[2];\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "150857ba-1f16-43fc-8a4c-90c5bda46dbe",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of credits.",
                    "fullTitle": "Enterprise User Users.getUserStreamDataOrg Should get list of user streams of credits.",
                    "timedOut": false,
                    "duration": 65,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=credits\";\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects));\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fe5204fe-1dc9-4baf-8aec-1d6eb1867e88",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of credits for particular flow_uid.",
                    "fullTitle": "Enterprise User Users.getUserStreamDataOrg Should get list of user streams of credits for particular flow_uid.",
                    "timedOut": false,
                    "duration": 69,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=credits&flow_uid=\" + flow_uids[3];\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects)) {\n                isValid = true;\n            }\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\" &&\n                        item.metadata.flow_uid == flow_uids[3];\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "95566d6d-d201-470a-93b7-67241fb50a62",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of flow-execution for specific flow.",
                    "fullTitle": "Enterprise User Users.getUserStreamDataOrg Should get list of user streams of flow-execution for specific flow.",
                    "timedOut": false,
                    "duration": 59,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=flow-execution&name=utest_cases_01\";\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects));\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "98ce05ac-f821-4e77-8019-1a3da1901787",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of flow-execution for specific flow for particular flow_uid.",
                    "fullTitle": "Enterprise User Users.getUserStreamDataOrg Should get list of user streams of flow-execution for specific flow for particular flow_uid.",
                    "timedOut": false,
                    "duration": 60,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=flow-execution&name=utest_cases_01&flow_uid=\" + flow_uids[3];\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects)) {\n                isValid = true;\n            }\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\" &&\n                        item.metadata.flow_uid == flow_uids[3];\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4e92f9ce-b325-446e-b97b-3b47f93c8088",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of flow-execution for specific detail.",
                    "fullTitle": "Enterprise User Users.getUserStreamDataOrg Should get list of user streams of flow-execution for specific detail.",
                    "timedOut": false,
                    "duration": 68,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=flow-execution&detail=command,enabled\";\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects));\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "322d293c-e0e8-4e62-8b8c-7959d72f1f38",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of flow-execution for specific detail for particular flow_uid.",
                    "fullTitle": "Enterprise User Users.getUserStreamDataOrg Should get list of user streams of flow-execution for specific detail for particular flow_uid.",
                    "timedOut": false,
                    "duration": 58,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=flow-execution&detail=command,enabled&flow_uid=\" + flow_uids[1];\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects)) {\n                isValid = true;\n            }\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\" &&\n                        item.metadata.flow_uid == flow_uids[1];\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ae085605-10b6-45ec-ab58-b60772af5e90",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not get list of user streams of flow-execution for specific detail.",
                    "fullTitle": "Enterprise User Users.getUserStreamDataOrg Should not get list of user streams of flow-execution for specific detail.",
                    "timedOut": false,
                    "duration": 58,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=flow-execution&detail=enabled1\";\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects)) {\n                isValid = res.body.output.objects.length == 0 &&\n                    res.body.output.count == 0;\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "430dfcb5-9b99-4f5d-89a0-6ab3bd49225e",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not get list of user streams of flow-execution for specific detail for particular flow_uid.",
                    "fullTitle": "Enterprise User Users.getUserStreamDataOrg Should not get list of user streams of flow-execution for specific detail for particular flow_uid.",
                    "timedOut": false,
                    "duration": 58,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=flow-execution&detail=enabled1&flow_uid=\" + flow_uids[3];\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects)) {\n                isValid = res.body.output.objects.length == 0 &&\n                    res.body.output.count == 0;\n            }\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\" &&\n                        item.metadata.flow_uid == flow_uids[3];\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "39176dd7-33cd-46a5-806b-09417639a151",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of publish-flow-downloaded for specific detail.",
                    "fullTitle": "Enterprise User Users.getUserStreamDataOrg Should get list of user streams of publish-flow-downloaded for specific detail.",
                    "timedOut": false,
                    "duration": 65,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=publish-flow-downloaded&detail=command,enabled\";\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects));\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d6230f77-f327-4c28-90c5-a389fd8fd0b2",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of publish-flow-downloaded for specific detail for particular flow_uid.",
                    "fullTitle": "Enterprise User Users.getUserStreamDataOrg Should get list of user streams of publish-flow-downloaded for specific detail for particular flow_uid.",
                    "timedOut": false,
                    "duration": 66,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=publish-flow-downloaded&detail=command,enabled&flow_uid=\" + flow_uids[1];\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects)) {\n                isValid = true;\n            }\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\" &&\n                        item.metadata.flow_uid == flow_uids[1];\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "46d5adb1-4db0-432f-897a-e5ff4161a675",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not get list of user streams of publish-flow-downloaded for specific detail.",
                    "fullTitle": "Enterprise User Users.getUserStreamDataOrg Should not get list of user streams of publish-flow-downloaded for specific detail.",
                    "timedOut": false,
                    "duration": 81,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=publish-flow-downloaded&detail=enabled1\";\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects)) {\n                isValid = res.body.output.objects.length == 0 &&\n                    res.body.output.count == 0;\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2226e4cb-1698-4b74-afa5-b5129186aa06",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not get list of user streams of publish-flow-downloaded for specific detail for particular flow_uid.",
                    "fullTitle": "Enterprise User Users.getUserStreamDataOrg Should not get list of user streams of publish-flow-downloaded for specific detail for particular flow_uid.",
                    "timedOut": false,
                    "duration": 55,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=publish-flow-downloaded&detail=enabled1&flow_uid=\" + flow_uids[3];\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects)) {\n                isValid = res.body.output.objects.length == 0 &&\n                    res.body.output.count == 0;\n            }\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\" &&\n                        item.metadata.flow_uid == flow_uids[3];\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8e9a36ec-88d1-4cee-bd3c-2b9e6491c092",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of share-flow for specific detail.",
                    "fullTitle": "Enterprise User Users.getUserStreamDataOrg Should get list of user streams of share-flow for specific detail.",
                    "timedOut": false,
                    "duration": 61,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=share-flow&detail=command,enabled\";\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects));\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "939d169f-5f53-40b6-906f-7240be7b3bd9",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of share-flow for specific detail for particular flow_uid.",
                    "fullTitle": "Enterprise User Users.getUserStreamDataOrg Should get list of user streams of share-flow for specific detail for particular flow_uid.",
                    "timedOut": false,
                    "duration": 55,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=share-flow&detail=command,enabled&flow_uid=\" + flow_uids[1];\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects)) {\n                isValid = true;\n            }\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\" &&\n                        item.metadata.flow_uid == flow_uids[1];\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "41215e7e-702d-403f-85e1-ac34fc32a6b0",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not get list of user streams of share-flow for specific detail.",
                    "fullTitle": "Enterprise User Users.getUserStreamDataOrg Should not get list of user streams of share-flow for specific detail.",
                    "timedOut": false,
                    "duration": 60,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=share-flow&detail=enabled1\";\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects)) {\n                isValid = res.body.output.objects.length == 0 &&\n                    res.body.output.count == 0;\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "41073dfd-9afd-451b-8ef9-f28240a2d8a3",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not get list of user streams of share-flow for specific detail for particular flow_uid.",
                    "fullTitle": "Enterprise User Users.getUserStreamDataOrg Should not get list of user streams of share-flow for specific detail for particular flow_uid.",
                    "timedOut": false,
                    "duration": 61,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=share-flow&detail=enabled1&flow_uid=\" + flow_uids[3];\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects)) {\n                isValid = res.body.output.objects.length == 0 &&\n                    res.body.output.count == 0;\n            }\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\" &&\n                        item.metadata.flow_uid == flow_uids[3];\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "13e8651a-fcef-45b7-8a29-3c1ec2430bed",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of flow-execution for bill status success.",
                    "fullTitle": "Enterprise User Users.getUserStreamDataOrg Should get list of user streams of flow-execution for bill status success.",
                    "timedOut": false,
                    "duration": 56,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=flow-execution&status=success\";\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            var successCount = 0;\n            if (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects)) {\n                _.map(res.body.output.objects, function(item) {\n                    var failCount = 0;\n                    _.each(_.filter(_billEntries, { \"_id\": item._id }), function(eachItem) {\n                        if (eachItem.result = \"fail\") {\n                            failCount++;\n                        }\n                    });\n                    if (failCount == 0) {\n                        successCount++;\n                    }\n                });\n                isValid = successCount == res.body.output.count;\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c68f6cdb-e1cc-4598-829c-e2f7dc24a9b4",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of flow-execution for bill status success for particular flow_uid.",
                    "fullTitle": "Enterprise User Users.getUserStreamDataOrg Should get list of user streams of flow-execution for bill status success for particular flow_uid.",
                    "timedOut": false,
                    "duration": 61,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=flow-execution&status=success&flow_uid=\" + flow_uids[0];\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            var successCount = 0;\n            if (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects)) {\n                _.map(res.body.output.objects, function(item) {\n                    var failCount = 0;\n                    _.each(_.filter(_billEntries, { \"_id\": item._id }), function(eachItem) {\n                        if (eachItem.result = \"fail\") {\n                            failCount++;\n                        }\n                    });\n                    if (failCount == 0) {\n                        successCount++;\n                    }\n                });\n                isValid = successCount == res.body.output.count;\n            }\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\" &&\n                        item.metadata.flow_uid == flow_uids[0];\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e922659c-8bf9-4741-a253-a1a748ab393d",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of flow-execution for bill status success.",
                    "fullTitle": "Enterprise User Users.getUserStreamDataOrg Should get list of user streams of flow-execution for bill status success.",
                    "timedOut": false,
                    "duration": 63,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=flow-execution&status=success\";\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            var successCount = 0;\n            if (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects)) {\n                _.map(res.body.output.objects, function(item) {\n                    var failCount = 0;\n                    _.each(_.filter(_billEntries, { \"_id\": item._id }), function(eachItem) {\n                        if (eachItem.result = \"fail\") {\n                            failCount++;\n                        }\n                    });\n                    if (failCount == 0) {\n                        successCount++;\n                    }\n                });\n                isValid = successCount == res.body.output.count;\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4fb354e1-ba6d-411f-b4f4-484d3aa4b434",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of flow-execution for bill status success for particular flow_uid.",
                    "fullTitle": "Enterprise User Users.getUserStreamDataOrg Should get list of user streams of flow-execution for bill status success for particular flow_uid.",
                    "timedOut": false,
                    "duration": 63,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=flow-execution&status=success&flow_uid=\" + flow_uids[3];\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            var successCount = 0;\n            if (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects)) {\n                _.map(res.body.output.objects, function(item) {\n                    var failCount = 0;\n                    _.each(_.filter(_billEntries, { \"_id\": item._id }), function(eachItem) {\n                        if (eachItem.result = \"fail\") {\n                            failCount++;\n                        }\n                    });\n                    if (failCount == 0) {\n                        successCount++;\n                    }\n                });\n                isValid = successCount == res.body.output.count;\n            }\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\" &&\n                        item.metadata.flow_uid == flow_uids[3];\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6cd19699-6685-4389-98ef-0552a154eaa9",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise User Users.getUserStreamDataOrg Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "95caf47e-90d5-4f46-8ba2-76fcc9152aa6",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "366a18d5-77db-44f1-aa5a-cf0617d61f5c",
                  "ca1e90e5-617d-4c3f-8ad6-e58ac6901e55",
                  "49ae5efd-1054-41cd-b167-b7e646200678",
                  "94a95752-b387-40c4-97e7-b5d86d431aa5",
                  "e7ce24d6-b12b-4f10-8635-3cce93fd7954",
                  "650a8511-bafe-4ddb-9433-000d69562237",
                  "f0371aec-7fc0-4784-bc7a-77f04b7dbf02",
                  "4c1797d2-ef15-4bd5-82a0-836fe8914e98",
                  "3e2a2040-8c04-4fbf-94c8-176de9a7dd3a",
                  "84714c6e-eee7-4051-b1cb-00469618eb56",
                  "5d758e29-da6c-4c0d-b48d-eb9d627edd35",
                  "1090d296-8a30-4bb7-a0b2-4b1176decdae",
                  "588e56c3-8d48-4ee9-8eaf-041d066b651b",
                  "9a35b89f-b32f-4e9a-a25e-d420d94975eb",
                  "c4d18a88-feba-41ac-8534-19e4a3ed299a",
                  "150857ba-1f16-43fc-8a4c-90c5bda46dbe",
                  "fe5204fe-1dc9-4baf-8aec-1d6eb1867e88",
                  "95566d6d-d201-470a-93b7-67241fb50a62",
                  "98ce05ac-f821-4e77-8019-1a3da1901787",
                  "4e92f9ce-b325-446e-b97b-3b47f93c8088",
                  "322d293c-e0e8-4e62-8b8c-7959d72f1f38",
                  "ae085605-10b6-45ec-ab58-b60772af5e90",
                  "430dfcb5-9b99-4f5d-89a0-6ab3bd49225e",
                  "39176dd7-33cd-46a5-806b-09417639a151",
                  "d6230f77-f327-4c28-90c5-a389fd8fd0b2",
                  "46d5adb1-4db0-432f-897a-e5ff4161a675",
                  "2226e4cb-1698-4b74-afa5-b5129186aa06",
                  "8e9a36ec-88d1-4cee-bd3c-2b9e6491c092",
                  "939d169f-5f53-40b6-906f-7240be7b3bd9",
                  "41215e7e-702d-403f-85e1-ac34fc32a6b0",
                  "41073dfd-9afd-451b-8ef9-f28240a2d8a3",
                  "13e8651a-fcef-45b7-8a29-3c1ec2430bed",
                  "c68f6cdb-e1cc-4598-829c-e2f7dc24a9b4",
                  "e922659c-8bf9-4741-a253-a1a748ab393d",
                  "4fb354e1-ba6d-411f-b4f4-484d3aa4b434",
                  "6cd19699-6685-4389-98ef-0552a154eaa9",
                  "95caf47e-90d5-4f46-8ba2-76fcc9152aa6"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 2306,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "b95aeff8-78c5-4a1c-852b-f32782f671f2",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\users\\getUserStreamDistinctFlowNames.enterprise.js",
        "file": "\\controllers\\test\\users\\getUserStreamDistinctFlowNames.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "e7b43827-e66c-416b-bcc0-071f26dda02e",
            "title": "User",
            "fullFile": "D:\\api\\controllers\\test\\users\\getUserStreamDistinctFlowNames.enterprise.js",
            "file": "\\controllers\\test\\users\\getUserStreamDistinctFlowNames.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "7c185147-cdb0-48ad-bf12-bb611fe35ccc",
                "title": "User.getUserStreamDistinctFlowNames",
                "fullFile": "D:\\api\\controllers\\test\\users\\getUserStreamDistinctFlowNames.enterprise.js",
                "file": "\\controllers\\test\\users\\getUserStreamDistinctFlowNames.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Enterprise User User.getUserStreamDistinctFlowNames \"before all\" hook",
                    "timedOut": false,
                    "duration": 2730,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveEntries(function() {\n    commonMock.setSignUpMocks(httpmock, \"enterprise\");\n    api.post(\"/enterprise/v1/signup\")\n        .send(registrationBody)\n        .expect(httpStatus.CREATED)\n        .end(function(error, res) {\n            if (error) {\n                done(error);\n            } else {\n                authToken = res.body.output.authtoken;\n                commonMock.brainTreeClientToken(httpmock, \"enterprise\");\n                api.get(\"/enterprise/v1/user\")\n                    .set('authtoken', authToken)\n                    .expect(httpStatus.OK)\n                    .end(function(error, res) {\n                        if (error) {\n                            done(error);\n                        } else {\n                            user_uid = res.body.output.uid;\n                            env_uid = res.body.output.env_uid;\n                            _id = res.body.output._id;\n                            saveBillEntries({\n                                user_uid: user_uid,\n                                authtoken: authToken,\n                                email: res.body.output.email\n                            }, function(error, billEntries) {\n                                if (error) {\n                                    done(error);\n                                } else {\n                                    _billEntries = billEntries;\n                                    saveUserStreamEntries({\n                                        user_uid: user_uid,\n                                        authtoken: authToken,\n                                        email: res.body.output.email\n                                    }, function(error, userStreamEntries) {\n                                        if (error) {\n                                            done(error);\n                                        } else {\n                                            _userStreamEntries = userStreamEntries;\n                                            done();\n                                        }\n                                    });\n                                }\n                            });\n                        }\n                    });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a3a70ae4-d1a1-4410-aeda-48750bf4ff61",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise User User.getUserStreamDistinctFlowNames \"after all\" hook",
                    "timedOut": false,
                    "duration": 5,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveEntries(function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d6368b3e-68ee-45e7-ad34-67a5debad689",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get distinct list of flow names in user stream.",
                    "fullTitle": "Enterprise User User.getUserStreamDistinctFlowNames Should get distinct list of flow names in user stream.",
                    "timedOut": false,
                    "duration": 47,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL.replace(\"{type}\", \"flows\"))\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = Array.isArray(res.body.output.objects);\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fb78d56d-0e3c-4a7f-8abb-c7434ba2592b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get distinct list of projects names in user stream.",
                    "fullTitle": "Enterprise User User.getUserStreamDistinctFlowNames Should get distinct list of projects names in user stream.",
                    "timedOut": false,
                    "duration": 69,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL.replace(\"{type}\", \"projects\"))\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = Array.isArray(res.body.output.objects);\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2e9fa021-7b6d-4b61-8106-24466651dbf0",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise User User.getUserStreamDistinctFlowNames Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "06381734-0346-4376-90dc-656353237056",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "fb78d56d-0e3c-4a7f-8abb-c7434ba2592b",
                  "2e9fa021-7b6d-4b61-8106-24466651dbf0",
                  "06381734-0346-4376-90dc-656353237056"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 123,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "1ffa588f-405a-42cf-9a4c-86fae8362aca",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\users\\getUserStreamDistinctFlowNamesOrg.enterprise.js",
        "file": "\\controllers\\test\\users\\getUserStreamDistinctFlowNamesOrg.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "e11be98b-2ca6-47a5-b3b9-8bef1a1cd220",
            "title": "User",
            "fullFile": "D:\\api\\controllers\\test\\users\\getUserStreamDistinctFlowNamesOrg.enterprise.js",
            "file": "\\controllers\\test\\users\\getUserStreamDistinctFlowNamesOrg.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "88501885-6023-47e0-911e-c2d7ee3b22a6",
                "title": "User.getUserStreamDistinctFlowNamesOrg",
                "fullFile": "D:\\api\\controllers\\test\\users\\getUserStreamDistinctFlowNamesOrg.enterprise.js",
                "file": "\\controllers\\test\\users\\getUserStreamDistinctFlowNamesOrg.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Enterprise User User.getUserStreamDistinctFlowNamesOrg \"before all\" hook",
                    "timedOut": false,
                    "duration": 2148,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        api.get(\"/enterprise/v1/user\")\n            .set('org_uid', org_uid)\n            .set('authtoken', authToken)\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                env_uid = res.body.output.env_uid;\n                saveBillEntries({\n                    user_uid: user_uid,\n                    authtoken: authToken,\n                    email: data.owner.email\n                }, function(error, billEntries) {\n                    if (error) {\n                        done(error);\n                    } else {\n                        _billEntries = billEntries;\n                        saveUserStreamEntries({\n                            user_uid: user_uid,\n                            authtoken: authToken,\n                            email: data.owner.email\n                        }, function(error, userStreamEntries) {\n                            if (error) {\n                                done(error);\n                            } else {\n                                _userStreamEntries = userStreamEntries;\n                                done();\n                            }\n                        });\n                    }\n                });\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "be88b211-20d7-4c95-8f32-8ab80a442236",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise User User.getUserStreamDistinctFlowNamesOrg \"after all\" hook",
                    "timedOut": false,
                    "duration": 5,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveEntries(function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "31adbd9c-b66d-4f8c-82e2-716e21d3b799",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get distinct list of flow names in user stream.",
                    "fullTitle": "Enterprise User User.getUserStreamDistinctFlowNamesOrg Should get distinct list of flow names in user stream.",
                    "timedOut": false,
                    "duration": 51,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL.replace(\"{type}\", \"workflows\"))\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = Array.isArray(res.body.output.objects);\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "506843dc-1745-4c64-895e-67bb69fd4089",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get distinct list of flow based on projects.",
                    "fullTitle": "Enterprise User User.getUserStreamDistinctFlowNamesOrg Should get distinct list of flow based on projects.",
                    "timedOut": false,
                    "duration": 47,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar userStreamURL = apiURL.replace(\"{type}\", \"workflows\") + \"&project_uid=\" + project_uids[0] + \",\" + project_uids[1];\napi.get(userStreamURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = Array.isArray(res.body.output.objects);\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2acb562b-0f0e-4ba6-b213-c97d4e0ab1ed",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get distinct list of projects names in user stream.",
                    "fullTitle": "Enterprise User User.getUserStreamDistinctFlowNamesOrg Should get distinct list of projects names in user stream.",
                    "timedOut": false,
                    "duration": 57,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL.replace(\"{type}\", \"projects\"))\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = Array.isArray(res.body.output.objects);\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3439f17e-696c-4ae2-91fc-3adaa49d1986",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise User User.getUserStreamDistinctFlowNamesOrg Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5b88cf3f-2973-4794-857d-990d6beb7985",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "506843dc-1745-4c64-895e-67bb69fd4089",
                  "2acb562b-0f0e-4ba6-b213-c97d4e0ab1ed",
                  "3439f17e-696c-4ae2-91fc-3adaa49d1986",
                  "5b88cf3f-2973-4794-857d-990d6beb7985"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 164,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "b4365fa1-7021-4db8-9b50-3b4e94f24524",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\users\\inviteUser.enterprise.js",
        "file": "\\controllers\\test\\users\\inviteUser.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "5ffd70cb-657e-4ad5-8c22-ddfbf5f91566",
            "title": "User.Invite",
            "fullFile": "D:\\api\\controllers\\test\\users\\inviteUser.enterprise.js",
            "file": "\\controllers\\test\\users\\inviteUser.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise User.Invite \"before all\" hook",
                "timedOut": false,
                "duration": 194,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data;\n        dummyUser = orgData.owner\n        dummyUser.authtoken = dummyUser.authtoken;\n        done()\n    })\n})",
                "err": {},
                "isRoot": false,
                "uuid": "cf3a9293-04f2-4f68-a700-1fe62660e30e",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise User.Invite Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .send(data)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "94f27ac3-395a-4847-a343-f13d922f892b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if body is empty not found.",
                "fullTitle": "Enterprise User.Invite Should get error, if body is empty not found.",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar invalidData = _.cloneDeep(data)\ninvalidData.emails = []\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(invalidData)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "1e707719-c33d-45d2-b507-dcfb3f1aea8c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if user sents invitations to self.",
                "fullTitle": "Enterprise User.Invite Should get error, if user sents invitations to self.",
                "timedOut": false,
                "duration": 33,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar invalidData = _.cloneDeep(data)\ninvalidData.emails = [dummyUser.email]\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(invalidData)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.INVITATION_CAN_NOT_SENT_TO_SELF);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "77c6a2df-a83e-4611-9007-332d3cfa8fe8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if user sents invitations to more than 10 user(s) at a time.",
                "fullTitle": "Enterprise User.Invite Should get error, if user sents invitations to more than 10 user(s) at a time.",
                "timedOut": false,
                "duration": 32,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(data)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal('The invitation can not be sent with more than 10 users at a time.');\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "46a77722-7a98-4d82-b9b9-00f91a3caee5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should invite users.",
                "fullTitle": "Enterprise User.Invite Should invite users.",
                "timedOut": false,
                "duration": 44,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar validData = _.cloneDeep(data)\nvalidData.emails = [validData.emails[0]]\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(validData)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var result = res.body.output.message;\n            expect(result).to.be.equal('test@1.com has been invited successfully.');\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "11ff806c-6d5c-4bb8-b9b9-b3c5edb558e9",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "94f27ac3-395a-4847-a343-f13d922f892b",
              "1e707719-c33d-45d2-b507-dcfb3f1aea8c",
              "77c6a2df-a83e-4611-9007-332d3cfa8fe8",
              "46a77722-7a98-4d82-b9b9-00f91a3caee5",
              "11ff806c-6d5c-4bb8-b9b9-b3c5edb558e9"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 144,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "bca53f02-9a78-4bca-b34c-362044668236",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\users\\listUsers.enterprise.js",
        "file": "\\controllers\\test\\users\\listUsers.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "b645e055-9b52-484a-bce5-a9aa024c845f",
            "title": "User",
            "fullFile": "D:\\api\\controllers\\test\\users\\listUsers.enterprise.js",
            "file": "\\controllers\\test\\users\\listUsers.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "8d21897b-d256-45e5-a413-10764c677b2a",
                "title": "User.ListUsers",
                "fullFile": "D:\\api\\controllers\\test\\users\\listUsers.enterprise.js",
                "file": "\\controllers\\test\\users\\listUsers.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.ListUsers \"before each\" hook",
                    "timedOut": false,
                    "duration": 981,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n    _models.Mail.remove({ $or: [{ to: new RegExp('^test.user+', \"i\") }, { to: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n        signUpUsers({}, function(error, users) {\n            if (error) {\n                done(error);\n            } else {\n                registerUsers = users;\n                done();\n            }\n        });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fd8755a7-4229-4063-a0f2-5cbc91daa161",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User User.ListUsers \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "15493752-c128-483d-b19a-e3b134bf77d6",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get list of users.",
                    "fullTitle": "Enterprise User User.ListUsers Should get list of users.",
                    "timedOut": false,
                    "duration": 39,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar authToken = registerUsers[0].body.output.authtoken;\napi.get(apiURL)\n    .set({ 'authtoken': authToken, \"ui_admin_key\": config.UI_ADMIN_KEY })\n    .expect(httpStatus.OK)\n    .end(function(error, res) {\n        if (error) {\n            done(error);\n        } else {\n            res.body.output.should.be.instanceOf(Array);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "57c97866-535c-4b08-ad22-00429eedbc83",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of only uids of register users.",
                    "fullTitle": "Enterprise User User.ListUsers Should get list of only uids of register users.",
                    "timedOut": false,
                    "duration": 47,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar authToken = registerUsers[0].body.output.authtoken;\nvar paramURL = apiURL + \"?get=user_uids\"\napi.get(paramURL)\n    .set({ 'authtoken': authToken, \"ui_admin_key\": config.UI_ADMIN_KEY })\n    .expect(httpStatus.OK)\n    .end(function(error, res) {\n        if (error) {\n            done(error);\n        } else {\n            var isValid = false;\n            if (Array.isArray(res.body.output)) {\n                var eachMatched = true;\n                _.each(res.body.output, function(item) {\n                    if (!(typeof(item.uid) != \"undefined\" && typeof(item.email) == \"undefined\")) {\n                        eachMatched = false;\n                    }\n                });\n                isValid = eachMatched;\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "28742df5-16e6-4e24-b8c4-f5b735e9c804",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise User User.ListUsers Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(error, res) {\n        if (error) {\n            done(error);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2e17d9d1-d131-4518-ac50-668b64bb21d7",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "57c97866-535c-4b08-ad22-00429eedbc83",
                  "28742df5-16e6-4e24-b8c4-f5b735e9c804",
                  "2e17d9d1-d131-4518-ac50-668b64bb21d7"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 95,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "da4df12a-8c02-42f2-87f8-3663564f1629",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\users\\login.enterprise.js",
        "file": "\\controllers\\test\\users\\login.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "d48d2b30-ecd1-43e3-b7bc-a7a1302c3501",
            "title": "User",
            "fullFile": "D:\\api\\controllers\\test\\users\\login.enterprise.js",
            "file": "\\controllers\\test\\users\\login.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "37168581-4081-41ee-93ff-50ef0aaf7199",
                "title": "User.Login",
                "fullFile": "D:\\api\\controllers\\test\\users\\login.enterprise.js",
                "file": "\\controllers\\test\\users\\login.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.Login \"before each\" hook",
                    "timedOut": false,
                    "duration": 22,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.createFlowUser({}, function(error, user) {\n        if (error) {\n            done(error);\n        } else {\n            authToken = user.authtoken;\n            token = user.activation_token;\n            _id = user._id;\n            uid = user.uid;\n            done();\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "732e4292-bc9d-496f-8e1d-41ee3eaa5ae2",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User User.Login \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "17741c4b-000a-41f2-aaab-319b238fada6",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should login successfully.",
                    "fullTitle": "Enterprise User User.Login Should login successfully.",
                    "timedOut": false,
                    "duration": 213,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.flowLogin(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(loginBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.email == loginBody.email &&\n                res.body.output.active == false &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\";\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "58b9f2ac-165b-45d7-93e0-463c53809587",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should allowed to re-login successfully.",
                    "fullTitle": "Enterprise User User.Login Should allowed to re-login successfully.",
                    "timedOut": false,
                    "duration": 440,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.flowLogin(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(loginBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.email == loginBody.email &&\n                res.body.output.active == false &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\";\n\n            if (isValid) {\n                api.post(\"/enterprise/v1/logout\")\n                    .set(\"authtoken\", res.body.output.authtoken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            commonMock.flowLogin(httpmock, \"enterprise\");\n                            api.post(apiURL)\n                                .send(loginBody)\n                                .expect(httpStatus.OK)\n                                .end(function(err, res) {\n                                    if (err) {\n                                        done(err);\n                                    } else {\n                                        var isValid = res.body.output.email == loginBody.email &&\n                                            res.body.output.active == false &&\n                                            typeof(res.body.output._id) == \"undefined\" &&\n                                            typeof(res.body.output.__v) == \"undefined\";\n                                        isValid.should.equal(true);\n                                        done();\n                                    }\n                                });\n                        }\n                    });\n            } else {\n                true.should.equal(false);\n                done();\n            }\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "34fa37b1-db9c-4b55-bcf9-1b94f672f609",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not login if user_type is null.",
                    "fullTitle": "Enterprise User User.Login Should not login if user_type is null.",
                    "timedOut": false,
                    "duration": 40,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.findOneAndUpdate({\n    uid: uid\n}, {\n    user_type: null\n}, function(error, user) {\n    commonMock.flowLogin(httpmock, \"enterprise\");\n    api.post(apiURL)\n        .send(loginBody)\n        .expect(httpStatus.UNAUTHORIZED)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                var isValid = (res.body.error.message == messageList.USER_LOGIN_INVALID_CREDENTIAL);\n                isValid.should.equal(true);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b9ba1776-a4f5-477f-bb29-bef12a8d62ee",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get user_plan for old user records.",
                    "fullTitle": "Enterprise User User.Login Should get user_plan for old user records.",
                    "timedOut": false,
                    "duration": 217,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.findOne({ uid: uid }, function(error, user) {\n    var planObjectID = new ObjectId(convert.getJSON(user).plan[0]);\n    _models.User.findOneAndUpdate({ uid: uid }, {\n        plan: planObjectID\n    }, { new: true }, function(error, user) {\n        commonMock.flowLogin(httpmock, \"enterprise\");\n        api.post(apiURL)\n            .send(loginBody)\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    var isValid = res.body.output.email == loginBody.email &&\n                        res.body.output.active == false &&\n                        typeof(res.body.output._id) == \"undefined\" &&\n                        typeof(res.body.output.__v) == \"undefined\";\n                    isValid.should.equal(true);\n                    done();\n                }\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7c3cce53-eac7-4bf5-bbe9-5ffae570d822",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not allowed to login if activation is expired.",
                    "fullTitle": "Enterprise User User.Login Should not allowed to login if activation is expired.",
                    "timedOut": false,
                    "duration": 202,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.findOneAndUpdate({ uid: uid }, {\n    activation_expired: true\n}, function(error, user) {\n    commonMock.flowLogin(httpmock, \"enterprise\");\n    api.post(apiURL)\n        .send(loginBody)\n        .expect(httpStatus.UNAUTHORIZED)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                res.body.error.message.should.equal(messageList.USER_LOGIN_ACTIVATION_REQUIRED_ERROR);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7f0119a7-c50b-4aab-8a6e-ab42d40ecfec",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should allowed to login with support key.",
                    "fullTitle": "Enterprise User User.Login Should allowed to login with support key.",
                    "timedOut": false,
                    "duration": 84,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(\"/enterprise/v1/user/supportkey\")\n    .set('authtoken', authToken)\n    .send({})\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            commonMock.flowLogin(httpmock, \"enterprise\");\n            api.post(apiURL)\n                .send({\n                    \"email\": loginBody.email,\n                    \"password\": res.body.output.supportKey || \"\"\n                })\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        var isValid = res.body.output.support_key == \"\" &&\n                            res.body.output.email == loginBody.email;\n                        isValid.should.equal(true);\n                        done();\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1c2bb0b8-defd-4275-bf25-466f071a9cd6",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not allowed to login deleted user.",
                    "fullTitle": "Enterprise User User.Login Should not allowed to login deleted user.",
                    "timedOut": false,
                    "duration": 240,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.flowLogin(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(loginBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var currentDate = new Date();\n            _models.User.update({\n                \"uid\": res.body.output.uid\n            }, { $set: { \"deleted_at\": currentDate } }, function(error, user) {\n                commonMock.flowLogin(httpmock, \"enterprise\");\n                api.post(apiURL)\n                    .send(loginBody)\n                    .expect(httpStatus.UNAUTHORIZED)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            res.body.error.message.should.equal(messageList.USER_LOGIN_INVALID_CREDENTIAL);\n                            done();\n                        }\n                    });\n            });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "62372e9a-a377-4cff-a337-b4c88ca42631",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give invalid param errors.",
                    "fullTitle": "Enterprise User User.Login Should give invalid param errors.",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.flowLogin(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send({})\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.error.email.message == messageList.USER_REG_EMAIL_NOT_VALID &&\n                res.body.error.password.message == messageList.USER_LOGIN_REQUIRED_PASSWORD;\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "30ed1725-9e6e-434e-bad0-44902d26714b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get default plan.",
                    "fullTitle": "Enterprise User User.Login Should get default plan.",
                    "timedOut": false,
                    "duration": 215,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.flowLogin(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(loginBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (res.body.output.plan.length == 1) {\n                var defaultPlan = _.first(_.filter(server.plan.list, function(plan) {\n                    //return (plan || {}).enterprise_plan || false;\n                    return ((plan || {}).plan_type || \"\") == \"enterprise\";\n                })) || {};\n                defaultPlan = utils.skipAttr(convert.getJSON(defaultPlan));\n                isValid = utils.matchObjects(res.body.output.plan[0], defaultPlan);\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "277c39f2-f913-48e1-9f9e-42106944d516",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get default attributes.",
                    "fullTitle": "Enterprise User User.Login Should get default attributes.",
                    "timedOut": false,
                    "duration": 208,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.flowLogin(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(loginBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (res.body.output.plan.length == 1) {\n                isValid = utils.isHaveKeyVals(res.body.output, [\n                        \"first_name\", \"flow_uid\", \"job_title\", \"last_name\", \"locale\",\n                        \"merchantid\", \"payment_set\", \"subscription\"\n                    ]) &&\n                    res.body.output.subscription.days == server.plan.enterprise.TrialPeriod &&\n                    moment(new Date(res.body.output.subscription.start_date)).format(\"YYYY-MM-DD\") ==\n                    moment(new Date()).format(\"YYYY-MM-DD\");\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "20500cda-279f-4ab7-90b5-44268e878ed4",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get default user_plan.",
                    "fullTitle": "Enterprise User User.Login Should get default user_plan.",
                    "timedOut": false,
                    "duration": 232,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.flowLogin(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(loginBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.user_plan.should.exist;\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "df4cb4b5-e847-4aec-887d-0bfa30db0d9d",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should login with enterprise account.",
                    "fullTitle": "Enterprise User User.Login Should login with enterprise account.",
                    "timedOut": false,
                    "duration": 203,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.flowLogin(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(loginBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.user_type.should.equal(config.service_types.enterprise.name);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0d1e8acd-2dc1-41d6-82fb-09d388e0ac5e",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get different authtoken on re-login.",
                    "fullTitle": "Enterprise User User.Login Should get different authtoken on re-login.",
                    "timedOut": false,
                    "duration": 420,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.flowLogin(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(loginBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var firstAuthToken = res.body.output.authtoken;\n            commonMock.flowLogin(httpmock, \"enterprise\");\n            api.post(apiURL)\n                .send(loginBody)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        var secondAuthToken = res.body.output.authtoken;\n                        firstAuthToken.should.not.equal(secondAuthToken);\n                        done();\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e4c6c42b-62a6-4949-bc12-e9177d221db6",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should create account if express user exists.",
                    "fullTitle": "Enterprise User User.Login Should create account if express user exists.",
                    "timedOut": false,
                    "duration": 3347,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.email = \"test.user+1@raweng.com\";\ncommonMock.setSignUpMocks(httpmock, \"express\", {\n    email: tempRegistrationBody.email\n});\napi.post(\"/express/v1/signup\")\n    .send(tempRegistrationBody)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var tempLoginBody = global.getImmutable(loginBody);\n            tempLoginBody.email = tempRegistrationBody.email;\n            commonMock.setSignUpMocks(httpmock, \"enterprise\");\n            commonMock.flowLogin(httpmock, \"enterprise\");\n            api.post(apiURL)\n                .send(tempLoginBody)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        res.body.output.email.should.equal(tempLoginBody.email);\n                        done();\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "acdab79c-4e23-4e59-93a6-1ad2563e3d10",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should create activated account if express account is already created.",
                    "fullTitle": "Enterprise User User.Login Should create activated account if express account is already created.",
                    "timedOut": false,
                    "duration": 3003,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.email = \"test.user+1@raweng.com\";\ncommonMock.setSignUpMocks(httpmock, \"express\", {\n    email: tempRegistrationBody.email\n});\nvar newSignupUid = \"\";\napi.post(\"/express/v1/signup\")\n    .send(tempRegistrationBody)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            newSignupUid = res.body.output.uid;\n            _models.User.findOneAndUpdate({\n                uid: newSignupUid\n            }, {\n                active: true\n            }, { new: true }, function(error, user) {\n                var tempLoginBody = global.getImmutable(loginBody);\n                tempLoginBody.email = tempRegistrationBody.email;\n                commonMock.setSignUpMocks(httpmock, \"enterprise\");\n                commonMock.flowLogin(httpmock, \"enterprise\");\n                api.post(apiURL)\n                    .send(tempLoginBody)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            (res.body.output.email == tempLoginBody.email &&\n                                res.body.output.active).should.equal(true);\n                            done();\n                        }\n                    });\n            });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "197d7c63-1939-4205-859f-78b9aab6e084",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should login after three fail attempts.",
                    "fullTitle": "Enterprise User User.Login Should login after three fail attempts.",
                    "timedOut": false,
                    "duration": 822,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempBody = getImmutable(loginBody);\ntempBody.password = \"abc123\"\ncommonMock.flowLogin(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(tempBody)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            commonMock.flowLogin(httpmock, \"enterprise\");\n            api.post(apiURL)\n                .send(tempBody)\n                .expect(httpStatus.UNAUTHORIZED)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        commonMock.flowLogin(httpmock, \"enterprise\");\n                        api.post(apiURL)\n                            .send(tempBody)\n                            .expect(httpStatus.UNAUTHORIZED)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    tempBody.password = \"Raw@1234\";\n                                    tempBody.captcha_code = \"03AHJ_Vuu_lnKuNq-eLmTlTmWe6Aozhp6z0uLva1JGwwIKCkGu0x3S-8qFAHtZxL3TuJatYJnGOxta3250lueM1wWWb89Lk1zNeobupy-bg579yiGTwr4_IHsN_eWANc40w_EToNjf4mmeKxLbspOGq9YEZlWFb6d5pNnT--ImOkvcoiqwrmKjQIKPEoJBlXbuTL2NfNrrEPjhCpnmSQR6z3CRD1G-V3sVFeBbzHjoatg2wpFgnS5ikf42hNcq6JP0TwhQ86pwCqZ86JKm2UQe1ISxQUOckNXx6dG9NuCjypFmEsvOaL7qrhmcbp77hfzNamTEt1GVpNBlpKMtND6FDn8X05Ni3xoZDDhjZzRvlJQWf9ygHjsVByEEQv5GU9l1f4CI1gPbulwHQFN3d_8S0mbpBOfI-YQ_fE3lSWp0dDA2mxdDXOVi7tQgIBZhRFPAa8Jt9R9_TaSch6Ygq6qrkkIuekVIs6jSsLsLavpKZgtUkLJcf1RaUUZharASNuMIt3_s9EbWM42WCs8aMLWPo8qMu4pKa6cS5Bd3D-TFTBmtADFpOvDHjqfXqX_PemEg_ZVEXUYYGQ3YhJhESe8OCuxWqcs84Jzyln7-BIxYrMEDOgejqPrUc8nOU9F2o-MtjWohx_8ci0-078Fg6UGPWUGqZ2ttrvK9mIkFi1iQVhTcThPEFH2SoG993B3YqmEagHtBwOid2pNzYY_hAffXSSvURdJstiZi7qV_ZNxnJ9CSlljI8erdb4cPSrIY8XIEahiC-q3ODrATTXfkv5iGXeYI7_rDO0DmH3OS5g9rmFZb4RTows9Gmp8xOA91_faynmaM0009rOjYx0pxAqZZECTJu20Qyvbu0_d-dd7n7vMPHvoEMqbXQhXQO62zBK-h3PRRWQlLdFgwj498SgMsFkbo1SBRi1943w\";\n                                    commonMock.captchaVerification(httpmock, \"enterprise\");\n                                    commonMock.flowLogin(httpmock, \"enterprise\");\n                                    api.post(apiURL)\n                                        .send(tempBody)\n                                        .expect(httpStatus.OK)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                res.body.output.email.should.equal(loginBody.email);\n                                                done();\n                                            }\n                                        });\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4fab7bc3-c941-400d-8016-e0541d9b5d4a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give captcha verification fail error for valid credential.",
                    "fullTitle": "Enterprise User User.Login Should give captcha verification fail error for valid credential.",
                    "timedOut": false,
                    "duration": 809,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar loginCount = [];\nvar tempBody = getImmutable(loginBody);\ntempBody.password = \"abc123\";\ncommonMock.flowLogin(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(tempBody)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            loginCount.push(res.body.error.failed_login_count);\n            commonMock.flowLogin(httpmock, \"enterprise\");\n            api.post(apiURL)\n                .send(tempBody)\n                .expect(httpStatus.UNAUTHORIZED)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        loginCount.push(res.body.error.failed_login_count);\n                        commonMock.flowLogin(httpmock, \"enterprise\");\n                        api.post(apiURL)\n                            .send(tempBody)\n                            .expect(httpStatus.UNAUTHORIZED)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    loginCount.push(res.body.error.failed_login_count);\n                                    commonMock.flowLogin(httpmock, \"enterprise\");\n                                    tempBody.password = \"Raw@1234\";\n                                    api.post(apiURL)\n                                        .send(tempBody)\n                                        .expect(httpStatus.UNAUTHORIZED)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                loginCount.push(res.body.error.failed_login_count);\n                                                var isValid = res.body.error.message == messageList.USER_LOGIN_CAPTCHA_REQUIRED &&\n                                                    loginCount[0] == 1 &&\n                                                    loginCount[1] == 2 &&\n                                                    loginCount[2] == 3 &&\n                                                    loginCount[3] == 4;\n                                                isValid.should.equal(true);\n                                                done();\n                                            }\n                                        });\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cde52080-82fe-457f-8e89-9dd011cb5c62",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give captcha verification fail error for invalid credential.",
                    "fullTitle": "Enterprise User User.Login Should give captcha verification fail error for invalid credential.",
                    "timedOut": false,
                    "duration": 828,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempBody = getImmutable(loginBody);\ntempBody.password = \"abc123\";\ncommonMock.flowLogin(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(tempBody)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            commonMock.flowLogin(httpmock, \"enterprise\");\n            api.post(apiURL)\n                .send(tempBody)\n                .expect(httpStatus.UNAUTHORIZED)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        commonMock.flowLogin(httpmock, \"enterprise\");\n                        api.post(apiURL)\n                            .send(tempBody)\n                            .expect(httpStatus.UNAUTHORIZED)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    tempBody.password = \"abc123\";\n                                    commonMock.flowLogin(httpmock, \"enterprise\");\n                                    api.post(apiURL)\n                                        .send(tempBody)\n                                        .expect(httpStatus.UNAUTHORIZED)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                res.body.error.message.should.equal(messageList.USER_LOGIN_CAPTCHA_REQUIRED);\n                                                done();\n                                            }\n                                        });\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4e8c80a1-05e8-4e48-9122-25f6640d34a0",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give invalid credential error if captcha is provided.",
                    "fullTitle": "Enterprise User User.Login Should give invalid credential error if captcha is provided.",
                    "timedOut": false,
                    "duration": 1020,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempBody = getImmutable(loginBody);\ntempBody.password = \"abc123\";\ncommonMock.flowLogin(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(tempBody)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            commonMock.flowLogin(httpmock, \"enterprise\");\n            api.post(apiURL)\n                .send(tempBody)\n                .expect(httpStatus.UNAUTHORIZED)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        commonMock.flowLogin(httpmock, \"enterprise\");\n                        api.post(apiURL)\n                            .send(tempBody)\n                            .expect(httpStatus.UNAUTHORIZED)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    commonMock.flowLogin(httpmock, \"enterprise\");\n                                    api.post(apiURL)\n                                        .send(tempBody)\n                                        .expect(httpStatus.UNAUTHORIZED)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                tempBody.captcha_code = \"03AHJ_Vuu_lnKuNq-eLmTlTmWe6Aozhp6z0uLva1JGwwIKCkGu0x3S-8qFAHtZxL3TuJatYJnGOxta3250lueM1wWWb89Lk1zNeobupy-bg579yiGTwr4_IHsN_eWANc40w_EToNjf4mmeKxLbspOGq9YEZlWFb6d5pNnT--ImOkvcoiqwrmKjQIKPEoJBlXbuTL2NfNrrEPjhCpnmSQR6z3CRD1G-V3sVFeBbzHjoatg2wpFgnS5ikf42hNcq6JP0TwhQ86pwCqZ86JKm2UQe1ISxQUOckNXx6dG9NuCjypFmEsvOaL7qrhmcbp77hfzNamTEt1GVpNBlpKMtND6FDn8X05Ni3xoZDDhjZzRvlJQWf9ygHjsVByEEQv5GU9l1f4CI1gPbulwHQFN3d_8S0mbpBOfI-YQ_fE3lSWp0dDA2mxdDXOVi7tQgIBZhRFPAa8Jt9R9_TaSch6Ygq6qrkkIuekVIs6jSsLsLavpKZgtUkLJcf1RaUUZharASNuMIt3_s9EbWM42WCs8aMLWPo8qMu4pKa6cS5Bd3D-TFTBmtADFpOvDHjqfXqX_PemEg_ZVEXUYYGQ3YhJhESe8OCuxWqcs84Jzyln7-BIxYrMEDOgejqPrUc8nOU9F2o-MtjWohx_8ci0-078Fg6UGPWUGqZ2ttrvK9mIkFi1iQVhTcThPEFH2SoG993B3YqmEagHtBwOid2pNzYY_hAffXSSvURdJstiZi7qV_ZNxnJ9CSlljI8erdb4cPSrIY8XIEahiC-q3ODrATTXfkv5iGXeYI7_rDO0DmH3OS5g9rmFZb4RTows9Gmp8xOA91_faynmaM0009rOjYx0pxAqZZECTJu20Qyvbu0_d-dd7n7vMPHvoEMqbXQhXQO62zBK-h3PRRWQlLdFgwj498SgMsFkbo1SBRi1943w\";\n                                                commonMock.captchaVerification(httpmock, \"enterprise\");\n                                                commonMock.flowLogin(httpmock, \"enterprise\");\n                                                api.post(apiURL)\n                                                    .send(tempBody)\n                                                    .expect(httpStatus.UNAUTHORIZED)\n                                                    .end(function(err, res) {\n                                                        if (err) {\n                                                            done(err);\n                                                        } else {\n                                                            res.body.error.message.should.equal(messageList.USER_LOGIN_INVALID_CREDENTIAL);\n                                                            done();\n                                                        }\n                                                    });\n                                            }\n                                        });\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4aecb37c-eacd-49f8-b09c-f193cdb9928f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should lock user.",
                    "fullTitle": "Enterprise User User.Login Should lock user.",
                    "timedOut": false,
                    "duration": 1222,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempBody = getImmutable(loginBody);\ntempBody.password = \"abc123\";\nvar loginCount = [];\ncommonMock.flowLogin(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(tempBody)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            if (res.body.error.message == messageList.USER_LOGIN_INVALID_CREDENTIAL)\n                loginCount.push(res.body.error.failed_login_count);\n            commonMock.flowLogin(httpmock, \"enterprise\");\n            api.post(apiURL)\n                .send(tempBody)\n                .expect(httpStatus.UNAUTHORIZED)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        if (res.body.error.message == messageList.USER_LOGIN_INVALID_CREDENTIAL)\n                            loginCount.push(res.body.error.failed_login_count);\n                        commonMock.flowLogin(httpmock, \"enterprise\");\n                        api.post(apiURL)\n                            .send(tempBody)\n                            .expect(httpStatus.UNAUTHORIZED)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    if (res.body.error.message == messageList.USER_LOGIN_INVALID_CREDENTIAL)\n                                        loginCount.push(res.body.error.failed_login_count);\n                                    commonMock.flowLogin(httpmock, \"enterprise\");\n                                    api.post(apiURL)\n                                        .send(tempBody)\n                                        .expect(httpStatus.UNAUTHORIZED)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                if (res.body.error.message == messageList.USER_LOGIN_CAPTCHA_REQUIRED)\n                                                    loginCount.push(res.body.error.failed_login_count);\n                                                commonMock.flowLogin(httpmock, \"enterprise\");\n                                                api.post(apiURL)\n                                                    .send(tempBody)\n                                                    .expect(httpStatus.UNAUTHORIZED)\n                                                    .end(function(err, res) {\n                                                        if (err) {\n                                                            done(err);\n                                                        } else {\n                                                            if (res.body.error.message == messageList.USER_LOGIN_CAPTCHA_REQUIRED)\n                                                                loginCount.push(res.body.error.failed_login_count);\n                                                            commonMock.flowLogin(httpmock, \"enterprise\");\n                                                            api.post(apiURL)\n                                                                .send(tempBody)\n                                                                .expect(httpStatus.UNAUTHORIZED)\n                                                                .end(function(err, res) {\n                                                                    if (err) {\n                                                                        done(err);\n                                                                    } else {\n                                                                        if (res.body.error.message == messageList.ENTERPRISE_USER_LOGIN_ACCOUNT_LOCK)\n                                                                            loginCount.push(res.body.error.failed_login_count);\n                                                                        var isValid = loginCount[0] == 1 &&\n                                                                            loginCount[1] == 2 &&\n                                                                            loginCount[2] == 3 &&\n                                                                            loginCount[3] == 4 &&\n                                                                            loginCount[4] == 5 &&\n                                                                            loginCount[5] == 6;\n                                                                        isValid.should.equal(true);\n                                                                        done();\n                                                                    }\n                                                                });\n                                                        }\n                                                    });\n                                            }\n                                        });\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "34468200-e95f-4d26-824b-d4859a061495",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should allowed to login after five fail login attempts.",
                    "fullTitle": "Enterprise User User.Login Should allowed to login after five fail login attempts.",
                    "timedOut": false,
                    "duration": 1230,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempBody = getImmutable(loginBody);\ntempBody.password = \"abc123\";\nvar loginCount = [];\ncommonMock.flowLogin(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(tempBody)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            if (res.body.error.message == messageList.USER_LOGIN_INVALID_CREDENTIAL)\n                loginCount.push(res.body.error.failed_login_count);\n            commonMock.flowLogin(httpmock, \"enterprise\");\n            api.post(apiURL)\n                .send(tempBody)\n                .expect(httpStatus.UNAUTHORIZED)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        if (res.body.error.message == messageList.USER_LOGIN_INVALID_CREDENTIAL)\n                            loginCount.push(res.body.error.failed_login_count);\n                        commonMock.flowLogin(httpmock, \"enterprise\");\n                        api.post(apiURL)\n                            .send(tempBody)\n                            .expect(httpStatus.UNAUTHORIZED)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    if (res.body.error.message == messageList.USER_LOGIN_INVALID_CREDENTIAL)\n                                        loginCount.push(res.body.error.failed_login_count);\n                                    commonMock.flowLogin(httpmock, \"enterprise\");\n                                    api.post(apiURL)\n                                        .send(tempBody)\n                                        .expect(httpStatus.UNAUTHORIZED)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                if (res.body.error.message == messageList.USER_LOGIN_CAPTCHA_REQUIRED)\n                                                    loginCount.push(res.body.error.failed_login_count);\n                                                commonMock.flowLogin(httpmock, \"enterprise\");\n                                                api.post(apiURL)\n                                                    .send(tempBody)\n                                                    .expect(httpStatus.UNAUTHORIZED)\n                                                    .end(function(err, res) {\n                                                        if (err) {\n                                                            done(err);\n                                                        } else {\n                                                            if (res.body.error.message == messageList.USER_LOGIN_CAPTCHA_REQUIRED)\n                                                                loginCount.push(res.body.error.failed_login_count);\n\n                                                            tempBody.captcha_code = \"03AHJ_Vuu_lnKuNq-eLmTlTmWe6Aozhp6z0uLva1JGwwIKCkGu0x3S-8qFAHtZxL3TuJatYJnGOxta3250lueM1wWWb89Lk1zNeobupy-bg579yiGTwr4_IHsN_eWANc40w_EToNjf4mmeKxLbspOGq9YEZlWFb6d5pNnT--ImOkvcoiqwrmKjQIKPEoJBlXbuTL2NfNrrEPjhCpnmSQR6z3CRD1G-V3sVFeBbzHjoatg2wpFgnS5ikf42hNcq6JP0TwhQ86pwCqZ86JKm2UQe1ISxQUOckNXx6dG9NuCjypFmEsvOaL7qrhmcbp77hfzNamTEt1GVpNBlpKMtND6FDn8X05Ni3xoZDDhjZzRvlJQWf9ygHjsVByEEQv5GU9l1f4CI1gPbulwHQFN3d_8S0mbpBOfI-YQ_fE3lSWp0dDA2mxdDXOVi7tQgIBZhRFPAa8Jt9R9_TaSch6Ygq6qrkkIuekVIs6jSsLsLavpKZgtUkLJcf1RaUUZharASNuMIt3_s9EbWM42WCs8aMLWPo8qMu4pKa6cS5Bd3D-TFTBmtADFpOvDHjqfXqX_PemEg_ZVEXUYYGQ3YhJhESe8OCuxWqcs84Jzyln7-BIxYrMEDOgejqPrUc8nOU9F2o-MtjWohx_8ci0-078Fg6UGPWUGqZ2ttrvK9mIkFi1iQVhTcThPEFH2SoG993B3YqmEagHtBwOid2pNzYY_hAffXSSvURdJstiZi7qV_ZNxnJ9CSlljI8erdb4cPSrIY8XIEahiC-q3ODrATTXfkv5iGXeYI7_rDO0DmH3OS5g9rmFZb4RTows9Gmp8xOA91_faynmaM0009rOjYx0pxAqZZECTJu20Qyvbu0_d-dd7n7vMPHvoEMqbXQhXQO62zBK-h3PRRWQlLdFgwj498SgMsFkbo1SBRi1943w\";\n                                                            tempBody.password = \"Raw@1234\";\n                                                            commonMock.flowLogin(httpmock, \"enterprise\");\n                                                            commonMock.captchaVerification(httpmock, \"enterprise\");\n                                                            api.post(apiURL)\n                                                                .send(tempBody)\n                                                                .expect(httpStatus.OK)\n                                                                .end(function(err, res) {\n                                                                    if (err) {\n                                                                        done(err);\n                                                                    } else {\n                                                                        var isValid = res.body.output.email == tempBody.email &&\n                                                                            loginCount[0] == 1 &&\n                                                                            loginCount[1] == 2 &&\n                                                                            loginCount[2] == 3 &&\n                                                                            loginCount[3] == 4 &&\n                                                                            loginCount[4] == 5;\n                                                                        isValid.should.equal(true);\n                                                                        done();\n                                                                    }\n                                                                });\n                                                        }\n                                                    });\n                                            }\n                                        });\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9bd26151-a4aa-4d80-aa86-df6eb17fdf74",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should allowed to login after four fail login attempts.",
                    "fullTitle": "Enterprise User User.Login Should allowed to login after four fail login attempts.",
                    "timedOut": false,
                    "duration": 983,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempBody = getImmutable(loginBody);\ntempBody.password = \"abc123\";\nvar loginCount = [];\ncommonMock.flowLogin(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(tempBody)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            if (res.body.error.message == messageList.USER_LOGIN_INVALID_CREDENTIAL)\n                loginCount.push(res.body.error.failed_login_count);\n            commonMock.flowLogin(httpmock, \"enterprise\");\n            api.post(apiURL)\n                .send(tempBody)\n                .expect(httpStatus.UNAUTHORIZED)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        if (res.body.error.message == messageList.USER_LOGIN_INVALID_CREDENTIAL)\n                            loginCount.push(res.body.error.failed_login_count);\n                        commonMock.flowLogin(httpmock, \"enterprise\");\n                        api.post(apiURL)\n                            .send(tempBody)\n                            .expect(httpStatus.UNAUTHORIZED)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    if (res.body.error.message == messageList.USER_LOGIN_INVALID_CREDENTIAL)\n                                        loginCount.push(res.body.error.failed_login_count);\n                                    commonMock.flowLogin(httpmock, \"enterprise\");\n                                    api.post(apiURL)\n                                        .send(tempBody)\n                                        .expect(httpStatus.UNAUTHORIZED)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                if (res.body.error.message == messageList.USER_LOGIN_CAPTCHA_REQUIRED)\n                                                    loginCount.push(res.body.error.failed_login_count);\n                                                tempBody.captcha_code = \"03AHJ_Vuu_lnKuNq-eLmTlTmWe6Aozhp6z0uLva1JGwwIKCkGu0x3S-8qFAHtZxL3TuJatYJnGOxta3250lueM1wWWb89Lk1zNeobupy-bg579yiGTwr4_IHsN_eWANc40w_EToNjf4mmeKxLbspOGq9YEZlWFb6d5pNnT--ImOkvcoiqwrmKjQIKPEoJBlXbuTL2NfNrrEPjhCpnmSQR6z3CRD1G-V3sVFeBbzHjoatg2wpFgnS5ikf42hNcq6JP0TwhQ86pwCqZ86JKm2UQe1ISxQUOckNXx6dG9NuCjypFmEsvOaL7qrhmcbp77hfzNamTEt1GVpNBlpKMtND6FDn8X05Ni3xoZDDhjZzRvlJQWf9ygHjsVByEEQv5GU9l1f4CI1gPbulwHQFN3d_8S0mbpBOfI-YQ_fE3lSWp0dDA2mxdDXOVi7tQgIBZhRFPAa8Jt9R9_TaSch6Ygq6qrkkIuekVIs6jSsLsLavpKZgtUkLJcf1RaUUZharASNuMIt3_s9EbWM42WCs8aMLWPo8qMu4pKa6cS5Bd3D-TFTBmtADFpOvDHjqfXqX_PemEg_ZVEXUYYGQ3YhJhESe8OCuxWqcs84Jzyln7-BIxYrMEDOgejqPrUc8nOU9F2o-MtjWohx_8ci0-078Fg6UGPWUGqZ2ttrvK9mIkFi1iQVhTcThPEFH2SoG993B3YqmEagHtBwOid2pNzYY_hAffXSSvURdJstiZi7qV_ZNxnJ9CSlljI8erdb4cPSrIY8XIEahiC-q3ODrATTXfkv5iGXeYI7_rDO0DmH3OS5g9rmFZb4RTows9Gmp8xOA91_faynmaM0009rOjYx0pxAqZZECTJu20Qyvbu0_d-dd7n7vMPHvoEMqbXQhXQO62zBK-h3PRRWQlLdFgwj498SgMsFkbo1SBRi1943w\";\n                                                tempBody.password = \"Raw@1234\";\n                                                commonMock.captchaVerification(httpmock, \"enterprise\");\n                                                commonMock.flowLogin(httpmock, \"enterprise\");\n                                                api.post(apiURL)\n                                                    .send(tempBody)\n                                                    .expect(httpStatus.OK)\n                                                    .end(function(err, res) {\n                                                        if (err) {\n                                                            done(err);\n                                                        } else {\n                                                            var isValid = res.body.output.email == tempBody.email &&\n                                                                loginCount[0] == 1 &&\n                                                                loginCount[1] == 2 &&\n                                                                loginCount[2] == 3 &&\n                                                                loginCount[3] == 4\n                                                            isValid.should.equal(true);\n                                                            done();\n                                                        }\n                                                    });\n                                            }\n                                        });\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e687910a-a4f6-4f28-bf98-8fd89c2d0d08",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should allowed to login witout 2FA if express account is verified for 2FA.",
                    "fullTitle": "Enterprise User User.Login Should allowed to login witout 2FA if express account is verified for 2FA.",
                    "timedOut": false,
                    "duration": 4819,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.email = \"test.user+1@raweng.com\";\ncommonMock.setSignUpMocks(httpmock, \"express\", {\n    email: tempRegistrationBody.email\n});\napi.post(\"/express/v1/signup\")\n    .send(tempRegistrationBody)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var loginBody2 = global.getImmutable(loginBody);\n            loginBody2.email = \"test.user+1@raweng.com\";\n            commonMock.flowLogin(httpmock, \"express\");\n            api.post(\"/express/v1/login\")\n                .send(loginBody2)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        var expressAuthToken = res.body.output.authtoken;\n                        //var tempRegistrationBody = global.getImmutable(registrationBody);\n                        tempRegistrationBody.authy_number = \"9619982150\";\n                        tempRegistrationBody.country_code = \"91\";\n                        delete tempRegistrationBody.password;\n                        commonMock.authyNumberChange(httpmock, \"express\");\n                        commonMock.authyDelete(httpmock, \"express\");\n                        api.put(\"/express/v1/user\")\n                            .send(tempRegistrationBody)\n                            .set('authtoken', expressAuthToken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    var authy_userId = res.body.output.authy_user_uid;\n                                    commonMock.authySMSVerification(httpmock, \"express\");\n                                    api.post(\"/express/v1/authy/sms\")\n                                        .send({\n                                            authy_id: authy_userId\n                                        })\n                                        .expect(httpStatus.OK)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                commonMock.authyAppTokenVerification(httpmock, \"express\");\n                                                api.post(\"/express/v1/authy/verifyotp\")\n                                                    .send({\n                                                        authy_user_uid: authy_userId,\n                                                        token: otpBody.token,\n                                                        option_selected: \"otp\"\n                                                    })\n                                                    .expect(httpStatus.OK)\n                                                    .end(function(err, res) {\n                                                        if (err) {\n                                                            done(err);\n                                                        } else {\n                                                            commonMock.authyAppTokenVerification(httpmock, \"express\");\n                                                            api.post(\"/express/v1/authy/verify\")\n                                                                .send({\n                                                                    authy_user_uid: authy_userId,\n                                                                    token: otpBody.token\n                                                                })\n                                                                .expect(httpStatus.OK)\n                                                                .end(function(err, res) {\n                                                                    if (err) {\n                                                                        done(err);\n                                                                    } else {\n                                                                        commonMock.setSignUpMocks(httpmock, \"enterprise\", {\n                                                                            email: tempRegistrationBody.email\n                                                                        });\n                                                                        commonMock.flowLogin(httpmock, \"enterprise\");\n                                                                        api.post(apiURL)\n                                                                            .send(loginBody2)\n                                                                            .expect(httpStatus.OK)\n                                                                            .end(function(err, res) {\n                                                                                if (err) {\n                                                                                    done(err);\n                                                                                } else {\n                                                                                    var isValid = res.body.output.email == loginBody2.email &&\n                                                                                        res.body.output.active == false &&\n                                                                                        typeof(res.body.output._id) == \"undefined\" &&\n                                                                                        typeof(res.body.output.__v) == \"undefined\";\n                                                                                    isValid.should.equal(true);\n                                                                                    done();\n                                                                                }\n                                                                            });\n                                                                    }\n                                                                });\n                                                        }\n                                                    });\n                                            }\n                                        });\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2eb85aa4-b13d-4757-800d-5a4bd8d0adb2",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should login user if two-factor is enabled but not verified.",
                    "fullTitle": "Enterprise User User.Login Should login user if two-factor is enabled but not verified.",
                    "timedOut": false,
                    "duration": 281,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.authy_number = \"9619982150\";\ntempRegistrationBody.country_code = \"91\";\ndelete tempRegistrationBody.password;\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\napi.put(\"/enterprise/v1/user\")\n    .set('authtoken', authToken)\n    .send(tempRegistrationBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            commonMock.brainTreeClientToken(httpmock, \"enterprise\");\n            commonMock.flowLogin(httpmock, \"enterprise\");\n            api.post(apiURL)\n                .send(loginBody)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        res.body.output.email.should.equal(tempRegistrationBody.email);\n                        done();\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3ee43517-f150-4978-80a6-99b9f696cdd6",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not login user if two-factor is verified.",
                    "fullTitle": "Enterprise User User.Login Should not login user if two-factor is verified.",
                    "timedOut": false,
                    "duration": 328,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.authy_number = \"9619982150\";\ntempRegistrationBody.country_code = \"91\";\ndelete tempRegistrationBody.password;\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\napi.put(\"/enterprise/v1/user\")\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var authy_userId = res.body.output.authy_user_uid;\n            commonMock.authySMSVerification(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/authy/sms\")\n                .send({\n                    authy_id: authy_userId\n                })\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                        api.post(\"/enterprise/v1/authy/verifyotp\")\n                            .send({\n                                authy_user_uid: authy_userId,\n                                token: otpBody.token,\n                                option_selected: \"otp\"\n                            })\n                            .set('authtoken', authToken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    commonMock.flowLogin(httpmock, \"enterprise\");\n                                    api.post(apiURL)\n                                        .send(loginBody)\n                                        .expect(httpStatus.OK)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                var isValid = res.body.output.authy_user_uid == authy_userId &&\n                                                    res.body.output.is_sms_enabled &&\n                                                    res.body.output.is_two_fa_verified &&\n                                                    res.body.output.user_uid != \"\";\n                                                isValid.should.equal(true);\n                                                done();\n                                            }\n                                        });\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "16adc2c7-1f4f-4118-9df4-e502fc125896",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not login user if two-factor is verified and user activation is expired.",
                    "fullTitle": "Enterprise User User.Login Should not login user if two-factor is verified and user activation is expired.",
                    "timedOut": false,
                    "duration": 323,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.authy_number = \"9619982150\";\ntempRegistrationBody.country_code = \"91\";\ndelete tempRegistrationBody.password;\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\napi.put(\"/enterprise/v1/user\")\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var authy_userId = res.body.output.authy_user_uid;\n            commonMock.authySMSVerification(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/authy/sms\")\n                .send({\n                    authy_id: authy_userId\n                })\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                        api.post(\"/enterprise/v1/authy/verifyotp\")\n                            .send({\n                                authy_user_uid: authy_userId,\n                                token: otpBody.token,\n                                option_selected: \"otp\"\n                            })\n                            .set('authtoken', authToken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    _models.User.findOneAndUpdate({\n                                        uid: uid\n                                    }, {\n                                        activation_expired: true,\n                                        active: false\n                                    }, function(error, result) {\n                                        commonMock.flowLogin(httpmock, \"enterprise\");\n                                        api.post(apiURL)\n                                            .send(loginBody)\n                                            .expect(httpStatus.UNAUTHORIZED)\n                                            .end(function(err, res) {\n                                                if (err) {\n                                                    done(err);\n                                                } else {\n                                                    res.body.error.message.should.equal(messageList.USER_LOGIN_ACTIVATION_REQUIRED_ERROR);\n                                                    done();\n                                                }\n                                            });\n                                    });\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1c6c614b-ab97-4f5e-8535-751f83f8e512",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "58b9f2ac-165b-45d7-93e0-463c53809587",
                  "34fa37b1-db9c-4b55-bcf9-1b94f672f609",
                  "b9ba1776-a4f5-477f-bb29-bef12a8d62ee",
                  "7c3cce53-eac7-4bf5-bbe9-5ffae570d822",
                  "7f0119a7-c50b-4aab-8a6e-ab42d40ecfec",
                  "1c2bb0b8-defd-4275-bf25-466f071a9cd6",
                  "62372e9a-a377-4cff-a337-b4c88ca42631",
                  "30ed1725-9e6e-434e-bad0-44902d26714b",
                  "277c39f2-f913-48e1-9f9e-42106944d516",
                  "20500cda-279f-4ab7-90b5-44268e878ed4",
                  "df4cb4b5-e847-4aec-887d-0bfa30db0d9d",
                  "0d1e8acd-2dc1-41d6-82fb-09d388e0ac5e",
                  "e4c6c42b-62a6-4949-bc12-e9177d221db6",
                  "acdab79c-4e23-4e59-93a6-1ad2563e3d10",
                  "197d7c63-1939-4205-859f-78b9aab6e084",
                  "4fab7bc3-c941-400d-8016-e0541d9b5d4a",
                  "cde52080-82fe-457f-8e89-9dd011cb5c62",
                  "4e8c80a1-05e8-4e48-9122-25f6640d34a0",
                  "4aecb37c-eacd-49f8-b09c-f193cdb9928f",
                  "34468200-e95f-4d26-824b-d4859a061495",
                  "9bd26151-a4aa-4d80-aa86-df6eb17fdf74",
                  "e687910a-a4f6-4f28-bf98-8fd89c2d0d08",
                  "2eb85aa4-b13d-4757-800d-5a4bd8d0adb2",
                  "3ee43517-f150-4978-80a6-99b9f696cdd6",
                  "16adc2c7-1f4f-4118-9df4-e502fc125896",
                  "1c6c614b-ab97-4f5e-8535-751f83f8e512"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 21737,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "36f9ea74-e90b-4961-bf76-822c3622c76f",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\users\\loginWithGoogle.enterprise.js",
        "file": "\\controllers\\test\\users\\loginWithGoogle.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "d818303d-3c84-4820-994c-cd1bbb4c1257",
            "title": "User",
            "fullFile": "D:\\api\\controllers\\test\\users\\loginWithGoogle.enterprise.js",
            "file": "\\controllers\\test\\users\\loginWithGoogle.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "ceea7c1e-7902-4fbe-b591-f9264b743ff0",
                "title": "User.LoginGoogle",
                "fullFile": "D:\\api\\controllers\\test\\users\\loginWithGoogle.enterprise.js",
                "file": "\\controllers\\test\\users\\loginWithGoogle.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.LoginGoogle \"before each\" hook",
                    "timedOut": false,
                    "duration": 1,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({}, function(error, user) {\n    _models.Mail.remove({}, function(error, user) {\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d4d8afb5-a323-46b9-b068-22c0413d54cc",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User User.LoginGoogle \"after each\" hook",
                    "timedOut": false,
                    "duration": 1,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7fa85707-1bef-43f5-be0e-b614d6081c77",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should allowed to login into gmail account.",
                    "fullTitle": "Enterprise User User.LoginGoogle Should allowed to login into gmail account.",
                    "timedOut": false,
                    "duration": 259,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\ncommonMock.googleLogin(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(loginBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.email == registrationBody.email && res.body.output.active;\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "57315480-f674-4adb-8334-65a4f160ac65",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give same plan on login with google account for already register enterprise account.",
                    "fullTitle": "Enterprise User User.LoginGoogle Should give same plan on login with google account for already register enterprise account.",
                    "timedOut": false,
                    "duration": 398,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\napi.post(\"/enterprise/v1/signup\")\n    .send(registrationBody)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var user_uid = res.body.output.uid;\n            var authtoken = res.body.output.authtoken;\n            var plan_uid = res.body.output.plan[0].uid;\n            _models.Plan.find({\n                deleted_at: null,\n                plan_type: \"enterprise\",\n                default: false\n            }, function(error, plans) {\n                if (err) {\n                    done(err);\n                } else {\n                    var plan = plans[0];\n                    _models.User.findOneAndUpdate({\n                        uid: user_uid\n                    }, {\n                        plan: [plan._id]\n                    }, { new: true }, function(error, user) {\n                        if (error) {\n                            done(error);\n                        } else {\n                            api.get(\"/enterprise/v1/user\")\n                                .set({\n                                    authtoken: authtoken\n                                })\n                                .expect(httpStatus.OK)\n                                .end(function(err, res) {\n                                    if (err) {\n                                        done(err);\n                                    } else {\n                                        commonMock.setSignUpMocks(httpmock, \"enterprise\");\n                                        commonMock.googleLogin(httpmock, \"enterprise\");\n                                        api.post(apiURL)\n                                            .send(loginBody)\n                                            .expect(httpStatus.OK)\n                                            .end(function(err, res) {\n                                                if (err) {\n                                                    done(err);\n                                                } else {\n                                                    var isValid = res.body.output.email ==\n                                                        registrationBody.email &&\n                                                        res.body.output.plan[0].uid == plan.uid &&\n                                                        res.body.output.active;\n                                                    isValid.should.equal(true);\n                                                    done();\n                                                }\n                                            });\n                                    }\n                                });\n                        }\n                    });\n                }\n            });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "57759fb8-862d-4d3d-af8f-779a2c1ad05e",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should login into existing account register with same email.",
                    "fullTitle": "Enterprise User User.LoginGoogle Should login into existing account register with same email.",
                    "timedOut": false,
                    "duration": 331,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\ncommonMock.googleLogin(httpmock, \"enterprise\");\napi.post(\"/enterprise/v1/signup\")\n    .send(registrationBody)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            commonMock.googleLogin(httpmock, \"enterprise\");\n            commonMock.brainTreeClientToken(httpmock, \"enterprise\");\n            api.post(apiURL)\n                .send(loginBody)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        var isValid = res.body.output.email == registrationBody.email &&\n                            res.body.output.active == true;\n                        isValid.should.equal(true);\n                        done();\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d265f2e8-e101-4b82-a664-5cad22c68d95",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should create another record if existing deleted login record available",
                    "fullTitle": "Enterprise User User.LoginGoogle Should create another record if existing deleted login record available",
                    "timedOut": false,
                    "duration": 516,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\ncommonMock.googleLogin(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(loginBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var uid = res.body.output.uid || \"\";\n            _models.User.findOneAndUpdate({ \"uid\": uid }, {\n                deleted_at: new Date()\n            }, { new: true }, function(err, user) {\n                if (err) {\n                    done(err);\n                } else {\n                    commonMock.setSignUpMocks(httpmock, \"enterprise\");\n                    commonMock.googleLogin(httpmock, \"enterprise\");\n                    api.post(apiURL)\n                        .send(loginBody)\n                        .expect(httpStatus.OK)\n                        .end(function(err, res) {\n                            if (err) {\n                                done(err);\n                            } else {\n                                _models.User.find({ \"email\": registrationBody.email }, function(err, users) {\n                                    if (err) {\n                                        done(err);\n                                    } else {\n                                        var isValid = users.length == 2;\n                                        isValid.should.equal(true);\n                                        done();\n                                    }\n                                });\n                            }\n                        });\n                }\n            });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9e76fddf-5611-471d-b7c3-4b6d08efcb64",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get default plan.",
                    "fullTitle": "Enterprise User User.LoginGoogle Should get default plan.",
                    "timedOut": false,
                    "duration": 254,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\ncommonMock.googleLogin(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(loginBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (res.body.output.plan.length == 1) {\n                var defaultPlan = _.first(_.filter(server.plan.list, function(plan) {\n                    //return (plan || {}).express_plan || false;\n                    return ((plan || {}).plan_type || \"\") == \"enterprise\";\n                })) || {};\n                defaultPlan = utils.skipAttr(convert.getJSON(defaultPlan));\n                isValid = res.body.output.plan[0].uid == defaultPlan.uid;\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b16c9900-a75f-41ff-b610-9ce24b5dc06c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get default attributes.",
                    "fullTitle": "Enterprise User User.LoginGoogle Should get default attributes.",
                    "timedOut": false,
                    "duration": 253,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\ncommonMock.googleLogin(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(loginBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (res.body.output.plan.length == 1) {\n                isValid = utils.isHaveKeyVals(res.body.output, [\n                        \"first_name\", \"flow_uid\", \"job_title\", \"last_name\", \"locale\",\n                        \"merchantid\", \"payment_set\", \"subscription\"\n                    ]) &&\n                    res.body.output.subscription.days == server.plan.enterprise.TrialPeriod &&\n                    moment(new Date(res.body.output.subscription.start_date)).format(\"YYYY-MM-DD\") ==\n                    moment(new Date()).format(\"YYYY-MM-DD\");\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ce9e2b88-7e9a-47cc-9c1c-42e5dfdf7559",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get default user_plan.",
                    "fullTitle": "Enterprise User User.LoginGoogle Should get default user_plan.",
                    "timedOut": false,
                    "duration": 260,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\ncommonMock.googleLogin(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(loginBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.user_plan.should.exist;\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ffdd8f90-75a7-4508-9e59-80fc6db177dd",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should login with enterprise account.",
                    "fullTitle": "Enterprise User User.LoginGoogle Should login with enterprise account.",
                    "timedOut": false,
                    "duration": 255,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\ncommonMock.googleLogin(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(loginBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.user_type.should.equal(config.service_types.enterprise.name);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f861010c-1edf-4f68-b637-1a4c80462497",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get different authtoken on re-login.",
                    "fullTitle": "Enterprise User User.LoginGoogle Should get different authtoken on re-login.",
                    "timedOut": false,
                    "duration": 355,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\ncommonMock.googleLogin(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(loginBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var firstAuthToken = res.body.output.authtoken;\n            commonMock.brainTreeClientToken(httpmock, \"enterprise\");\n            commonMock.googleLogin(httpmock, \"enterprise\");\n            api.post(apiURL)\n                .send(loginBody)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        var secondAuthToken = res.body.output.authtoken;\n                        firstAuthToken.should.not.equal(secondAuthToken);\n                        done();\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ef1da445-b9dd-4422-ab84-7b54e0a8aeee",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should create account with enterprise details, if express user exists.",
                    "fullTitle": "Enterprise User User.LoginGoogle Should create account with enterprise details, if express user exists.",
                    "timedOut": false,
                    "duration": 3303,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.email = \"test.user+1@raweng.com\";\ncommonMock.setSignUpMocks(httpmock, \"express\", {\n    email: tempRegistrationBody.email,\n    access_token: plus1User.access_token\n});\napi.post(\"/express/v1/signup\")\n    .send(tempRegistrationBody)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            commonMock.setSignUpMocks(httpmock, \"enterprise\", {\n                email: tempRegistrationBody.email,\n                access_token: plus1User.access_token\n            });\n            commonMock.googleLogin(httpmock, \"enterprise\", {\n                email: tempRegistrationBody.email,\n                access_token: plus1User.access_token\n            });\n            api.post(apiURL)\n                .send(plus1User)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        res.body.output.email.should.equal(tempRegistrationBody.email);\n                        done();\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "889e608e-8dda-41cc-a333-7871c407816a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should create account with enterprise details, if one active and one deleted express user exists.",
                    "fullTitle": "Enterprise User User.LoginGoogle Should create account with enterprise details, if one active and one deleted express user exists.",
                    "timedOut": false,
                    "duration": 5568,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.email = \"test.user+1@raweng.com\";\ncommonMock.setSignUpMocks(httpmock, \"express\", {\n    email: tempRegistrationBody.email\n});\napi.post(\"/express/v1/signup\")\n    .send(tempRegistrationBody)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var user_uid = res.body.output.uid;\n            _models.User.findOneAndUpdate({ \"uid\": user_uid }, {\n                \"deleted_at\": new Date()\n            }, { new: true }, function(error, result) {\n                if (error) {\n                    done(error);\n                } else {\n                    commonMock.setSignUpMocks(httpmock, \"express\", {\n                        email: tempRegistrationBody.email\n                    });\n                    api.post(\"/express/v1/signup\")\n                        .send(tempRegistrationBody)\n                        .expect(httpStatus.CREATED)\n                        .end(function(err, res) {\n                            if (err) {\n                                done(err);\n                            } else {\n                                var user_uid = res.body.output.uid;\n                                commonMock.setSignUpMocks(httpmock, \"enterprise\", {\n                                    email: tempRegistrationBody.email\n                                });\n                                commonMock.googleLogin(httpmock, \"enterprise\", {\n                                    email: tempRegistrationBody.email\n                                });\n                                api.post(apiURL)\n                                    .send(plus1User)\n                                    .expect(httpStatus.OK)\n                                    .end(function(err, res) {\n                                        if (err) {\n                                            done(err);\n                                        } else {\n                                            res.body.output.email.should.equal(tempRegistrationBody.email);\n                                            done();\n                                        }\n                                    });\n                            }\n                        });\n                }\n            });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0fc44eec-a685-4297-b002-bea6047a6e7c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should register user if email dosen't register with any service.",
                    "fullTitle": "Enterprise User User.LoginGoogle Should register user if email dosen't register with any service.",
                    "timedOut": false,
                    "duration": 445,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.email = \"test.user+1@raweng.com\";\ncommonMock.setSignUpMocks(httpmock, \"enterprise\", {\n    email: tempRegistrationBody.email\n});\ncommonMock.googleLogin(httpmock, \"enterprise\", {\n    email: tempRegistrationBody.email\n});\napi.post(apiURL)\n    .send(plus1User)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.email.should.equal(tempRegistrationBody.email);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "db24ca8f-9f03-4a8b-8cf0-02a3dfb88710",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should allowed to login with lock user.",
                    "fullTitle": "Enterprise User User.LoginGoogle Should allowed to login with lock user.",
                    "timedOut": false,
                    "duration": 1970,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempBody = getImmutable(registrationBody);\ntempBody.email = \"test.user+1@raweng.com\";\ncommonMock.setSignUpMocks(httpmock, \"enterprise\", {\n    email: tempBody.email\n});\napi.post(\"/enterprise/v1/signup\")\n    .send(tempBody)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var curDate = new Date();\n            _models.User.findOneAndUpdate({\n                uid: res.body.output.uid\n            }, {\n                deleted_at: curDate\n            }, function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    commonMock.setSignUpMocks(httpmock, \"enterprise\", {\n                        email: tempBody.email\n                    });\n                    api.post(\"/enterprise/v1/signup\")\n                        .send(tempBody)\n                        .expect(httpStatus.CREATED)\n                        .end(function(err, res) {\n                            if (err) {\n                                done(err);\n                            } else {\n                                var tempBody2 = getImmutable(loginBody);\n                                tempBody2.email = tempBody.email;\n                                tempBody2.password = \"abc123\";\n                                var loginCount = [];\n                                commonMock.flowLogin(httpmock, \"enterprise\");\n                                api.post(\"/enterprise/v1/login\")\n                                    .send(tempBody2)\n                                    .expect(httpStatus.UNAUTHORIZED)\n                                    .end(function(err, res) {\n                                        if (err) {\n                                            done(err);\n                                        } else {\n                                            if (res.body.error.message == messageList.USER_LOGIN_INVALID_CREDENTIAL)\n                                                loginCount.push(res.body.error.failed_login_count);\n                                            commonMock.flowLogin(httpmock, \"enterprise\");\n                                            api.post(\"/enterprise/v1/login\")\n                                                .send(tempBody2)\n                                                .expect(httpStatus.UNAUTHORIZED)\n                                                .end(function(err, res) {\n                                                    if (err) {\n                                                        done(err);\n                                                    } else {\n                                                        if (res.body.error.message == messageList.USER_LOGIN_INVALID_CREDENTIAL)\n                                                            loginCount.push(res.body.error.failed_login_count);\n                                                        commonMock.flowLogin(httpmock, \"enterprise\");\n                                                        api.post(\"/enterprise/v1/login\")\n                                                            .send(tempBody2)\n                                                            .expect(httpStatus.UNAUTHORIZED)\n                                                            .end(function(err, res) {\n                                                                if (err) {\n                                                                    done(err);\n                                                                } else {\n                                                                    if (res.body.error.message == messageList.USER_LOGIN_INVALID_CREDENTIAL)\n                                                                        loginCount.push(res.body.error.failed_login_count);\n                                                                    commonMock.flowLogin(httpmock, \"enterprise\");\n                                                                    api.post(\"/enterprise/v1/login\")\n                                                                        .send(tempBody2)\n                                                                        .expect(httpStatus.UNAUTHORIZED)\n                                                                        .end(function(err, res) {\n                                                                            if (err) {\n                                                                                done(err);\n                                                                            } else {\n                                                                                if (res.body.error.message == messageList.USER_LOGIN_CAPTCHA_REQUIRED)\n                                                                                    loginCount.push(res.body.error.failed_login_count);\n                                                                                commonMock.flowLogin(httpmock, \"enterprise\");\n                                                                                api.post(\"/enterprise/v1/login\")\n                                                                                    .send(tempBody2)\n                                                                                    .expect(httpStatus.UNAUTHORIZED)\n                                                                                    .end(function(err, res) {\n                                                                                        if (err) {\n                                                                                            done(err);\n                                                                                        } else {\n                                                                                            if (res.body.error.message == messageList.USER_LOGIN_CAPTCHA_REQUIRED)\n                                                                                                loginCount.push(res.body.error.failed_login_count);\n                                                                                            commonMock.flowLogin(httpmock, \"enterprise\");\n                                                                                            api.post(\"/enterprise/v1/login\")\n                                                                                                .send(tempBody2)\n                                                                                                .expect(httpStatus.UNAUTHORIZED)\n                                                                                                .end(function(err, res) {\n                                                                                                    if (err) {\n                                                                                                        done(err);\n                                                                                                    } else {\n                                                                                                        if (res.body.error.message == messageList.ENTERPRISE_USER_LOGIN_ACCOUNT_LOCK)\n                                                                                                            loginCount.push(res.body.error.failed_login_count);\n                                                                                                        var isValid = loginCount[0] == 1 &&\n                                                                                                            loginCount[1] == 2 &&\n                                                                                                            loginCount[2] == 3 &&\n                                                                                                            loginCount[3] == 4 &&\n                                                                                                            loginCount[4] == 5 &&\n                                                                                                            loginCount[5] == 6;\n                                                                                                        if (isValid) {\n                                                                                                            api.get(\"/enterprise/v1/status?email=\" + tempBody2.email)\n                                                                                                                .expect(httpStatus.OK)\n                                                                                                                .end(function(err, res) {\n                                                                                                                    if (err) {\n                                                                                                                        done(err);\n                                                                                                                    } else {\n                                                                                                                        if (res.body.output.block && res.body.output.show_captcha) {\n                                                                                                                            commonMock.setSignUpMocks(httpmock, \"enterprise\", {\n                                                                                                                                email: tempBody2.email\n                                                                                                                            });\n                                                                                                                            commonMock.googleLogin(httpmock, \"enterprise\", {\n                                                                                                                                email: tempBody2.email\n                                                                                                                            });\n                                                                                                                            api.post(apiURL)\n                                                                                                                                .send(tempBody2)\n                                                                                                                                .expect(httpStatus.OK)\n                                                                                                                                .end(function(err, res) {\n                                                                                                                                    if (err) {\n                                                                                                                                        done(err);\n                                                                                                                                    } else {\n                                                                                                                                        var isValid = res.body.output.email == tempBody2.email && res.body.output.active;\n                                                                                                                                        isValid.should.equal(true);\n                                                                                                                                        done();\n                                                                                                                                    }\n                                                                                                                                });\n                                                                                                                        } else {\n                                                                                                                            false.should.equal(true);\n                                                                                                                        }\n                                                                                                                    }\n                                                                                                                });\n                                                                                                        } else {\n                                                                                                            false.should.equal(true);\n                                                                                                        }\n                                                                                                    }\n                                                                                                });\n                                                                                        }\n                                                                                    });\n                                                                            }\n                                                                        });\n                                                                }\n                                                            });\n                                                    }\n                                                });\n                                        }\n                                    });\n                            }\n                        });\n                }\n            });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4d02ce67-e630-4414-97a9-b1f99da8773f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should allowed to login with captcha, after three fail attempts.",
                    "fullTitle": "Enterprise User User.LoginGoogle Should allowed to login with captcha, after three fail attempts.",
                    "timedOut": false,
                    "duration": 998,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\napi.post(\"/enterprise/v1/signup\")\n    .send(registrationBody)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var tempBody = getImmutable(loginBody);\n            tempBody.email = registrationBody.email;\n            tempBody.password = \"abc123\";\n            commonMock.flowLogin(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/login\")\n                .send(tempBody)\n                .expect(httpStatus.UNAUTHORIZED)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        commonMock.flowLogin(httpmock, \"enterprise\");\n                        api.post(\"/enterprise/v1/login\")\n                            .send(tempBody)\n                            .expect(httpStatus.UNAUTHORIZED)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    commonMock.flowLogin(httpmock, \"enterprise\");\n                                    api.post(\"/enterprise/v1/login\")\n                                        .send(tempBody)\n                                        .expect(httpStatus.UNAUTHORIZED)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                commonMock.brainTreeClientToken(httpmock, \"enterprise\");\n                                                commonMock.googleLogin(httpmock, \"enterprise\");\n                                                commonMock.captchaVerification(httpmock, \"enterprise\");\n                                                tempBody.password = \"Raw@1234\";\n                                                tempBody.captcha_code = \"03AHJ_Vuu_lnKuNq-eLmTlTmWe6Aozhp6z0uLva1JGwwIKCkGu0x3S-8qFAHtZxL3TuJatYJnGOxta3250lueM1wWWb89Lk1zNeobupy-bg579yiGTwr4_IHsN_eWANc40w_EToNjf4mmeKxLbspOGq9YEZlWFb6d5pNnT--ImOkvcoiqwrmKjQIKPEoJBlXbuTL2NfNrrEPjhCpnmSQR6z3CRD1G-V3sVFeBbzHjoatg2wpFgnS5ikf42hNcq6JP0TwhQ86pwCqZ86JKm2UQe1ISxQUOckNXx6dG9NuCjypFmEsvOaL7qrhmcbp77hfzNamTEt1GVpNBlpKMtND6FDn8X05Ni3xoZDDhjZzRvlJQWf9ygHjsVByEEQv5GU9l1f4CI1gPbulwHQFN3d_8S0mbpBOfI-YQ_fE3lSWp0dDA2mxdDXOVi7tQgIBZhRFPAa8Jt9R9_TaSch6Ygq6qrkkIuekVIs6jSsLsLavpKZgtUkLJcf1RaUUZharASNuMIt3_s9EbWM42WCs8aMLWPo8qMu4pKa6cS5Bd3D-TFTBmtADFpOvDHjqfXqX_PemEg_ZVEXUYYGQ3YhJhESe8OCuxWqcs84Jzyln7-BIxYrMEDOgejqPrUc8nOU9F2o-MtjWohx_8ci0-078Fg6UGPWUGqZ2ttrvK9mIkFi1iQVhTcThPEFH2SoG993B3YqmEagHtBwOid2pNzYY_hAffXSSvURdJstiZi7qV_ZNxnJ9CSlljI8erdb4cPSrIY8XIEahiC-q3ODrATTXfkv5iGXeYI7_rDO0DmH3OS5g9rmFZb4RTows9Gmp8xOA91_faynmaM0009rOjYx0pxAqZZECTJu20Qyvbu0_d-dd7n7vMPHvoEMqbXQhXQO62zBK-h3PRRWQlLdFgwj498SgMsFkbo1SBRi1943w\";\n                                                api.post(apiURL)\n                                                    .send(tempBody)\n                                                    .expect(httpStatus.OK)\n                                                    .end(function(err, res) {\n                                                        if (err) {\n                                                            done(err);\n                                                        } else {\n                                                            registrationBody.email.should.equal(res.body.output.email);\n                                                            done();\n                                                        }\n                                                    });\n                                            }\n                                        });\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b6a6723e-90af-47bc-b634-ec6c55525dc1",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not required captcha for google login.",
                    "fullTitle": "Enterprise User User.LoginGoogle Should not required captcha for google login.",
                    "timedOut": false,
                    "duration": 1034,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\napi.post(\"/enterprise/v1/signup\")\n    .send(registrationBody)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var tempBody = getImmutable(loginBody);\n            tempBody.email = registrationBody.email;\n            tempBody.password = \"abc123\";\n            commonMock.flowLogin(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/login\")\n                .send(tempBody)\n                .expect(httpStatus.UNAUTHORIZED)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        commonMock.flowLogin(httpmock, \"enterprise\");\n                        api.post(\"/enterprise/v1/login\")\n                            .send(tempBody)\n                            .expect(httpStatus.UNAUTHORIZED)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    commonMock.flowLogin(httpmock, \"enterprise\");\n                                    api.post(\"/enterprise/v1/login\")\n                                        .send(tempBody)\n                                        .expect(httpStatus.UNAUTHORIZED)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                tempBody.password = registrationBody.password;\n                                                api.get(\"/enterprise/v1/status?email=\" + tempBody.email)\n                                                    .send(tempBody)\n                                                    .expect(httpStatus.OK)\n                                                    .end(function(err, res) {\n                                                        if (err) {\n                                                            done(err);\n                                                        } else {\n                                                            if (res.body.output.block == false && res.body.output.show_captcha) {\n                                                                commonMock.googleLogin(httpmock, \"enterprise\");\n                                                                commonMock.brainTreeFailClientToken(httpmock, \"enterprise\");\n                                                                api.post(apiURL)\n                                                                    .send(tempBody)\n                                                                    .expect(httpStatus.OK)\n                                                                    .end(function(err, res) {\n                                                                        if (err) {\n                                                                            done(err);\n                                                                        } else {\n                                                                            var isValid = res.body.output.email == registrationBody.email && res.body.output.active;\n                                                                            isValid.should.equal(true);\n                                                                            done();\n                                                                        }\n                                                                    });\n                                                            } else {\n                                                                false.should.equal(true);\n                                                            }\n                                                        }\n                                                    });\n                                            }\n                                        });\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cf5faded-cf70-40df-8366-a2f44e88f3da",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "57315480-f674-4adb-8334-65a4f160ac65",
                  "57759fb8-862d-4d3d-af8f-779a2c1ad05e",
                  "d265f2e8-e101-4b82-a664-5cad22c68d95",
                  "9e76fddf-5611-471d-b7c3-4b6d08efcb64",
                  "b16c9900-a75f-41ff-b610-9ce24b5dc06c",
                  "ce9e2b88-7e9a-47cc-9c1c-42e5dfdf7559",
                  "ffdd8f90-75a7-4508-9e59-80fc6db177dd",
                  "f861010c-1edf-4f68-b637-1a4c80462497",
                  "ef1da445-b9dd-4422-ab84-7b54e0a8aeee",
                  "889e608e-8dda-41cc-a333-7871c407816a",
                  "0fc44eec-a685-4297-b002-bea6047a6e7c",
                  "db24ca8f-9f03-4a8b-8cf0-02a3dfb88710",
                  "4d02ce67-e630-4414-97a9-b1f99da8773f",
                  "b6a6723e-90af-47bc-b634-ec6c55525dc1",
                  "cf5faded-cf70-40df-8366-a2f44e88f3da"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 16199,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "838df875-eb41-41ad-9a5d-8e5f3b511ae4",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\users\\logout.enterprise.js",
        "file": "\\controllers\\test\\users\\logout.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "63f1514f-e1ea-4465-b7de-934a9a7e74c8",
            "title": "User",
            "fullFile": "D:\\api\\controllers\\test\\users\\logout.enterprise.js",
            "file": "\\controllers\\test\\users\\logout.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "be19ddfe-d296-4b7d-b3c2-77b56fa1447c",
                "title": "User.Logout",
                "fullFile": "D:\\api\\controllers\\test\\users\\logout.enterprise.js",
                "file": "\\controllers\\test\\users\\logout.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.Logout \"before each\" hook",
                    "timedOut": false,
                    "duration": 248,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({}, function(error, user) {\n    _models.Mail.remove({}, function(error, user) {\n        commonMock.setSignUpMocks(httpmock, \"enterprise\");\n        api.post(\"/enterprise/v1/signup\")\n            .send(registrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    userObj = res.body.output\n                    authToken = userObj.authtoken;\n                    _id = userObj._id;\n                    done();\n                }\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7ef3d083-7272-4e28-a2c5-477e065601cf",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User User.Logout \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f21d2335-d59a-465d-b478-4f2a37c5a950",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "User should get logout.",
                    "fullTitle": "Enterprise User User.Logout User should get logout.",
                    "timedOut": false,
                    "duration": 57,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.message.should.equal(messageList.LOGOUT_SUCCESS);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e60f35ed-34d0-46d0-b6e3-2b66b1dfce53",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "User should get logout with get route.",
                    "fullTitle": "Enterprise User User.Logout User should get logout with get route.",
                    "timedOut": false,
                    "duration": 57,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.message.should.equal(messageList.LOGOUT_SUCCESS);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bba6a80a-5ac6-496d-a5ec-17edcde52d87",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "User should get logout even if his account is suspend.",
                    "fullTitle": "Enterprise User User.Logout User should get logout even if his account is suspend.",
                    "timedOut": false,
                    "duration": 51,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar query = _models.User.findOneAndUpdate({ uid: userObj.uid }, { force_suspend: true }, { new: true })\nquery.lean().exec(function(err, user) {\n    if (err) {\n        done(err);\n    } else {\n        api.post(apiURL)\n            .set('authtoken', authToken)\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    res.body.output.message.should.equal(messageList.LOGOUT_SUCCESS);\n                    done();\n                }\n            });\n    }\n})",
                    "err": {},
                    "isRoot": false,
                    "uuid": "28f9dd7c-ae24-4a90-954d-d7bafc0058d4",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "User authtoken should get remove from user collection.",
                    "fullTitle": "Enterprise User User.Logout User authtoken should get remove from user collection.",
                    "timedOut": false,
                    "duration": 48,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            _models.User.findOne({ _id: _id }, function(err, user) {\n                if (err) {\n                    done(err);\n                } else {\n                    (((user || {})[\"_doc\"] || {}).authtoken || []).length.should.equal(0);\n                    done();\n                }\n            });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3b4091b4-8e6d-4caf-bf29-5b731fa43e27",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise User User.Logout Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2ed9b553-d961-4bc6-80ea-2f5b24169f24",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "e60f35ed-34d0-46d0-b6e3-2b66b1dfce53",
                  "bba6a80a-5ac6-496d-a5ec-17edcde52d87",
                  "28f9dd7c-ae24-4a90-954d-d7bafc0058d4",
                  "3b4091b4-8e6d-4caf-bf29-5b731fa43e27",
                  "2ed9b553-d961-4bc6-80ea-2f5b24169f24"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 220,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "8489ff94-2820-4c39-9a7e-88ab68ce0f7b",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\users\\processSSOLogin.enterprise.js",
        "file": "\\controllers\\test\\users\\processSSOLogin.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "b66125f9-fc2b-4812-917a-751064740778",
            "title": "User",
            "fullFile": "D:\\api\\controllers\\test\\users\\processSSOLogin.enterprise.js",
            "file": "\\controllers\\test\\users\\processSSOLogin.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "a2b27f66-7eab-4dc4-bf74-1fea659f4924",
                "title": "User.processSSOLogin",
                "fullFile": "D:\\api\\controllers\\test\\users\\processSSOLogin.enterprise.js",
                "file": "\\controllers\\test\\users\\processSSOLogin.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.processSSOLogin \"before each\" hook",
                    "timedOut": false,
                    "duration": 7,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f6235329-2d96-4ed7-868c-951e836aeb97",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User User.processSSOLogin \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c875dd4e-8360-4e1a-8bbc-dbb0ca1de88b",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should login with SSO.",
                    "fullTitle": "Enterprise User User.processSSOLogin Should login with SSO.",
                    "timedOut": false,
                    "duration": 1880,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncreateSSOProvider({\n}, function(error, ssoProvider) {\n    api.get(\"/enterprise/v1/login/raweng\")\n        .expect(httpStatus.MOVED_TEMPORARILY)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                if (res.headers.location.indexOf(ssoConfig.entry_point) == 0) {\n                    var data = getImmutable(usersData.SMALRespWithoutAuthtoken);\n                    delete data.RelayState;\n                    api.post(\"/enterprise/v1/login/raweng\")\n                        .send(data)\n                        .expect(httpStatus.MOVED_TEMPORARILY)\n                        .end(function(err, res) {\n                            if (err) {\n                                done(err);\n                            } else {\n                                var qs = querystring.parse(res.headers.location);\n                                var authtoken = qs[\"sid\"] || qs[sso_urls.success + \"?sid\"] || \"\";\n                                var _config = config;\n                                api.get(\"/enterprise/v1/user\")\n                                    .set({ 'authtoken': authtoken })\n                                    .expect(httpStatus.OK)\n                                    .end(function(err, res) {\n                                        if (err) {\n                                            done(err);\n                                        } else {\n                                            var isValid = res.body.output.uid != \"\" &&\n                                                typeof(res.body.output._id) == \"undefined\" &&\n                                                typeof(res.body.output.__v) == \"undefined\" &&\n                                                res.body.output.plan[0].name.indexOf(\"Trial\") > -1;\n                                            isValid.should.equal(true);\n                                            done();\n                                        }\n                                    });\n                            }\n                        });\n                } else {\n                    true.should.equal(false);\n                    done();\n                }\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d9f1b003-ea84-4499-b917-3ffb2a259956",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get specific plan to user.",
                    "fullTitle": "Enterprise User User.processSSOLogin Should get specific plan to user.",
                    "timedOut": false,
                    "duration": 1588,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncreateSSOProvider({\n    plan: \"fl4d44d77af613ae44845883\"\n}, function(error, ssoProvider) {\n    api.get(\"/enterprise/v1/login/raweng\")\n        .expect(httpStatus.MOVED_TEMPORARILY)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                if (res.headers.location.indexOf(ssoConfig.entry_point) == 0) {\n                    var data = getImmutable(usersData.SMALRespWithoutAuthtoken);\n                    delete data.RelayState;\n                    api.post(\"/enterprise/v1/login/raweng\")\n                        .send(data)\n                        .expect(httpStatus.MOVED_TEMPORARILY)\n                        .end(function(err, res) {\n                            if (err) {\n                                done(err);\n                            } else {\n                                var qs = querystring.parse(res.headers.location);\n                                var authtoken = qs[\"sid\"] || qs[sso_urls.success + \"?sid\"] || \"\";\n                                var _config = config;\n                                api.get(\"/enterprise/v1/user\")\n                                    .set({ 'authtoken': authtoken })\n                                    .expect(httpStatus.OK)\n                                    .end(function(err, res) {\n                                        if (err) {\n                                            done(err);\n                                        } else {\n                                            var isValid = res.body.output.uid != \"\" &&\n                                                typeof(res.body.output._id) == \"undefined\" &&\n                                                typeof(res.body.output.__v) == \"undefined\" &&\n                                                res.body.output.plan[0].name.indexOf(\"Light Plan\") != -1;\n                                            isValid.should.equal(true);\n                                            done();\n                                        }\n                                    });\n                            }\n                        });\n                } else {\n                    true.should.equal(false);\n                    done();\n                }\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c2654795-6718-4521-b3f2-9d386f507e3d",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get metadata xml.",
                    "fullTitle": "Enterprise User User.processSSOLogin Should get metadata xml.",
                    "timedOut": false,
                    "duration": 20,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "// sso.getMetadata\nthis.timeout(apiTimeOut);\ncreateSSOProvider({\n}, function(error, ssoProvider) {\n    api.get(\"/enterprise/v1/sso/metadata/raweng\")\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                res.text.toString().startsWith(\"<?xml\").should.equal(true);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ec1c4925-8393-4dcf-856d-93b46561187c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should overwrite user session management timeout.",
                    "fullTitle": "Enterprise User User.processSSOLogin Should overwrite user session management timeout.",
                    "timedOut": false,
                    "duration": 1988,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncreateSSOProvider({\n}, function(error, ssoProvider) {\n    api.get(\"/enterprise/v1/login/raweng\")\n        .expect(httpStatus.MOVED_TEMPORARILY)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                if (res.headers.location.indexOf(ssoConfig.entry_point) == 0) {\n                    var data = usersData.SMALRespWithoutAuthtoken;\n                    api.post(\"/enterprise/v1/login/raweng\")\n                        .send(data)\n                        .expect(httpStatus.MOVED_TEMPORARILY)\n                        .end(function(err, res) {\n                            if (err) {\n                                done(err);\n                            } else {\n                                var qs = querystring.parse(res.headers.location);\n                                var authtoken = qs[\"sid\"] || qs[sso_urls.success + \"?sid\"] || \"\";\n                                var date = moment(new Date());\n                                date.subtract({ hours: 4, minutes: 5 });\n                                _models.UserToken.findOneAndUpdate({\n                                    authtoken: authtoken\n                                }, {\n                                    idle_valid_till: date\n                                }, {\n                                    new: true\n                                }, function(error, user) {\n                                    api.get(\"/enterprise/v1/user\")\n                                        .set('authtoken', authtoken)\n                                        .expect(httpStatus.OK)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                var isValid = res.body.output.uid != \"\" &&\n                                                    typeof(res.body.output._id) == \"undefined\" &&\n                                                    typeof(res.body.output.__v) == \"undefined\";\n                                                isValid.should.equal(true);\n                                                done();\n                                            }\n                                        });\n                                });\n                            }\n                        });\n                } else {\n                    true.should.equal(false);\n                    done();\n                }\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f039126d-b9f6-4ba6-9f5d-903e699bd565",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should do test login without enabling SSO.",
                    "fullTitle": "Enterprise User User.processSSOLogin Should do test login without enabling SSO.",
                    "timedOut": false,
                    "duration": 375,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar _ssoConfig = getImmutable(ssoConfig);\nvar email = \"amber.more@raweng.com\";\ncreateSSOProvider({\n    enable_sso: false\n}, function(error, ssoProvider) {\n    signUpUser({\n        email: email\n    }, function(res) {\n        var newUserAuthtoken = res.body.output.authtoken;\n        api.get(\"/enterprise/v1/login/raweng?test=true\")\n            .expect(httpStatus.MOVED_TEMPORARILY)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    if (res.headers.location.indexOf(ssoConfig.entry_point) == 0) {\n                        var qs = querystring.parse(res.headers.location);\n                        var data = usersData.SMALRespWithoutAuthtoken;\n                        data.RelayState = qs.RelayState;\n                        api.post(\"/enterprise/v1/login/raweng\")\n                            .send(data)\n                            .expect(httpStatus.MOVED_TEMPORARILY)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    var qs = querystring.parse(res.headers.location);\n                                    var authtoken = qs[\"sid\"] || qs[sso_urls.success_test + \"?sid\"] || \"\";\n                                    api.get(\"/enterprise/v1/user\")\n                                        .set('authtoken', authtoken)\n                                        .expect(httpStatus.OK)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                var isValid = res.body.output.uid != \"\" &&\n                                                    typeof(res.body.output._id) == \"undefined\" &&\n                                                    typeof(res.body.output.__v) == \"undefined\";\n                                                isValid.should.equal(true);\n                                                done();\n                                            }\n                                        });\n                                }\n                            });\n                    } else {\n                        true.should.equal(false);\n                        done();\n                    }\n                }\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0b10201e-e873-495f-adc9-6f5038fb364c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should use same token for secondtime login if validtill satisfies.",
                    "fullTitle": "Enterprise User User.processSSOLogin Should use same token for secondtime login if validtill satisfies.",
                    "timedOut": false,
                    "duration": 1670,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar _ssoConfig = getImmutable(ssoConfig);\nvar SSOLogin = function(sso_data, cb) {\n    var authtoken = \"\";\n    var ssoLogin = \"/enterprise/v1/login/raweng\";\n    if (sso_data.RelayState) {\n        authtoken = sso_data.authtoken || \"\";\n        ssoLogin += \"?sid=\" + authtoken\n    }\n    api.get(ssoLogin)\n        .expect(httpStatus.MOVED_TEMPORARILY)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                if (res.headers.location.indexOf(ssoConfig.entry_point) == 0) {\n                    var qs = querystring.parse(res.headers.location);\n                    var rs = utils.getRelayState({\n                        body: {\n                            RelayState: qs.RelayState\n                        }\n                    });\n                    if ((rs.authtoken || \"\") == authtoken) {\n                        sso_data.RelayState = encryption.encryptSync(JSON.stringify({\n                            a: authtoken,\n                            t: false\n                        }), encryption.getKeySync());\n                        api.post(\"/enterprise/v1/login/raweng\")\n                            .send(sso_data)\n                            .expect(httpStatus.MOVED_TEMPORARILY)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    var qs = querystring.parse(res.headers.location);\n                                    var authtoken = qs[\"sid\"] || qs[sso_urls.success + \"?sid\"] || \"\";\n                                    api.get(\"/enterprise/v1/user\")\n                                        .set('authtoken', authtoken)\n                                        .expect(httpStatus.OK)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                var isValid = res.body.output.uid != \"\" &&\n                                                    typeof(res.body.output._id) == \"undefined\" &&\n                                                    typeof(res.body.output.__v) == \"undefined\";\n                                                if (isValid) {\n                                                    cb(isValid, authtoken);\n                                                } else {\n                                                    false.should.equal(true);\n                                                    done();\n                                                }\n                                            }\n                                        });\n                                }\n                            });\n                    } else {\n                        true.should.equal(false);\n                        done();\n                    }\n                } else {\n                    true.should.equal(false);\n                    done();\n                }\n            }\n        });\n};\ncreateSSOProvider({}, function(error, ssoProvider) {\n    var data = usersData.SMALRespWithoutAuthtoken;\n    SSOLogin(data, function(isValid, authtoken) {\n        var firstToken = authtoken;\n        data.RelayState = encryption.encryptSync(JSON.stringify({\n            a: authtoken\n        }), encryption.encryptSync());\n        data.authtoken = authtoken;\n        SSOLogin(data, function(isValid, authtoken) {\n            var secondToken = authtoken;\n            if (firstToken == secondToken) {\n                _models.UserToken.find({}, function(error, tokens) {\n                    (tokens.length == 1).should.equal(true);\n                    done();\n                });\n            } else {\n                false.should.equal(true);\n                done();\n            }\n        });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d72384e1-b2f1-4b93-b23f-bcdf82851bdd",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not do SSO login if SSO is disabled.",
                    "fullTitle": "Enterprise User User.processSSOLogin Should not do SSO login if SSO is disabled.",
                    "timedOut": false,
                    "duration": 255,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar _ssoConfig = getImmutable(ssoConfig);\nvar email = \"amber.more@raweng.com\";\nvar loginWithSSO = function(status, callback) {\n    api.get(\"/enterprise/v1/login/raweng\")\n        .expect(httpStatus.MOVED_TEMPORARILY)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                if (res.headers.location.indexOf(\"error\") > -1) {\n                    var qs = querystring.parse(res.headers.location);\n                    var error = qs[\"error\"] || qs[sso_urls.error + \"?error\"] || \"\";\n                    callback(error, null);\n                } else {\n                    if (res.headers.location.indexOf(ssoConfig.entry_point) == 0) {\n                        var data = usersData.SMALRespWithoutAuthtoken;\n                        api.post(\"/enterprise/v1/login/raweng\")\n                            .send(data)\n                            .expect(httpStatus.MOVED_TEMPORARILY)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    var qs = querystring.parse(res.headers.location);\n                                    var authtoken = qs[\"sid\"] || qs[sso_urls.success + \"?sid\"] || \"\";\n                                    api.get(\"/enterprise/v1/user\")\n                                        .set('authtoken', authtoken)\n                                        .expect(status)\n                                        .end(callback);\n                                }\n                            });\n                    } else {\n                        true.should.equal(false);\n                        done();\n                    }\n                }\n            }\n        });\n};\ncreateSSOProvider({\n    enable_sso: false\n}, function(error, ssoProvider) {\n    signUpUser({\n        email: email\n    }, function(res) {\n        var newUserAuthtoken = res.body.output.authtoken;\n        loginWithSSO(httpStatus.BAD_REQUEST, function(err, res) {\n            err.should.equal(messageList.SSO_DISABLE);\n            done();\n        });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1cb19ff1-3b85-4257-9e19-636237c13802",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should logout all tokens.",
                    "fullTitle": "Enterprise User User.processSSOLogin Should logout all tokens.",
                    "timedOut": false,
                    "duration": 2323,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar _ssoConfig = getImmutable(ssoConfig);\nvar last_authtoken = \"\";\nvar SSOLogin = function(cb) {\n    api.get(\"/enterprise/v1/login/raweng\")\n        .expect(httpStatus.MOVED_TEMPORARILY)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                if (res.headers.location.indexOf(ssoConfig.entry_point) == 0) {\n                    var data = usersData.SMALRespWithoutAuthtoken;\n                    api.post(\"/enterprise/v1/login/raweng\")\n                        .send(data)\n                        .expect(httpStatus.MOVED_TEMPORARILY)\n                        .end(function(err, res) {\n                            if (err) {\n                                done(err);\n                            } else {\n                                var qs = querystring.parse(res.headers.location);\n                                var authtoken = qs[\"sid\"] || qs[sso_urls.success + \"?sid\"] || \"\";\n                                api.get(\"/enterprise/v1/user\")\n                                    .set('authtoken', authtoken)\n                                    .expect(httpStatus.OK)\n                                    .end(function(err, res) {\n                                        if (err) {\n                                            done(err);\n                                        } else {\n                                            var isValid = res.body.output.uid != \"\" &&\n                                                typeof(res.body.output._id) == \"undefined\" &&\n                                                typeof(res.body.output.__v) == \"undefined\";\n                                            if (isValid) {\n                                                last_authtoken = authtoken;\n                                                cb(isValid);\n                                            } else {\n                                                false.should.equal(true);\n                                                done();\n                                            }\n                                        }\n                                    });\n                            }\n                        });\n                } else {\n                    true.should.equal(false);\n                    done();\n                }\n            }\n        });\n};\ncreateSSOProvider({}, function(error, ssoProvider) {\n    SSOLogin(function() {\n        _models.UserToken.update({}, {\n            valid_till: new Date(2001, 12, 1)\n        }, {\n            multi: true\n        }, function(error, tokens) {\n            SSOLogin(function() {\n                api.post(\"/enterprise/v1/logout\")\n                    .set('authtoken', last_authtoken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        _models.UserToken.find({ authtoken: last_authtoken }, function(error, tokens) {\n                            var is_valid = true;\n                            _.each(tokens, function(item) {\n                                is_valid = is_valid && item.deleted_at != null;\n                            });\n                            is_valid.should.equal(true);\n                            done();\n                        });\n                    });\n            });\n        });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "25822f82-d352-4f59-b2a9-9b1d34bda7d5",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "d9f1b003-ea84-4499-b917-3ffb2a259956",
                  "c2654795-6718-4521-b3f2-9d386f507e3d",
                  "ec1c4925-8393-4dcf-856d-93b46561187c",
                  "f039126d-b9f6-4ba6-9f5d-903e699bd565",
                  "0b10201e-e873-495f-adc9-6f5038fb364c",
                  "d72384e1-b2f1-4b93-b23f-bcdf82851bdd",
                  "1cb19ff1-3b85-4257-9e19-636237c13802",
                  "25822f82-d352-4f59-b2a9-9b1d34bda7d5"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 10099,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "df2ee136-03bf-4bef-81f5-0b274997f9d5",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\users\\projectsworkflows.enterprise.js",
        "file": "\\controllers\\test\\users\\projectsworkflows.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "d0123676-f1cb-4a4c-9824-d988f151d1b2",
            "title": "User",
            "fullFile": "D:\\api\\controllers\\test\\users\\projectsworkflows.enterprise.js",
            "file": "\\controllers\\test\\users\\projectsworkflows.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "67615f6a-482f-481d-9230-126bc558e574",
                "title": "User.projectsworkflows",
                "fullFile": "D:\\api\\controllers\\test\\users\\projectsworkflows.enterprise.js",
                "file": "\\controllers\\test\\users\\projectsworkflows.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.projectsworkflows \"before each\" hook",
                    "timedOut": false,
                    "duration": 2095,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        api.get(\"/enterprise/v1/user\")\n            .set('org_uid', org_uid)\n            .set('authtoken', authToken)\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                env_uid = res.body.output.env_uid;\n                saveBillEntries({\n                    user_uid: user_uid,\n                    authtoken: authToken,\n                    email: data.owner.email\n                }, function(error, billEntries) {\n                    if (error) {\n                        done(error);\n                    } else {\n                        _billEntries = billEntries;\n                        saveUserStreamEntries({\n                            user_uid: user_uid,\n                            authtoken: authToken,\n                            email: data.owner.email\n                        }, function(error, userStreamEntries) {\n                            if (error) {\n                                done(error);\n                            } else {\n                                _userStreamEntries = userStreamEntries;\n                                done();\n                            }\n                        });\n                    }\n                });\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2beeb734-7412-4b81-aad6-bfa38284c7eb",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise User User.projectsworkflows \"after all\" hook",
                    "timedOut": false,
                    "duration": 9,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveEntries(function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "391f6db0-ede4-4db8-80c7-1083ed60db60",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get distinct list of flow names in user stream.",
                    "fullTitle": "Enterprise User User.projectsworkflows Should get distinct list of flow names in user stream.",
                    "timedOut": false,
                    "duration": 62,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = Array.isArray(res.body.output.flows) &&\n                Array.isArray(res.body.output.projects);\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a615c0fb-b1c0-410d-bec5-f2a851a23cd2",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get distinct list of flow based on projects.",
                    "fullTitle": "Enterprise User User.projectsworkflows Should get distinct list of flow based on projects.",
                    "timedOut": false,
                    "duration": 51,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = Array.isArray(res.body.output.flows) &&\n                Array.isArray(res.body.output.projects);\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6e34a5e2-a674-497d-873f-ce20428b7c3b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get distinct list of projects names in user stream.",
                    "fullTitle": "Enterprise User User.projectsworkflows Should get distinct list of projects names in user stream.",
                    "timedOut": false,
                    "duration": 56,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = Array.isArray(res.body.output.flows) &&\n                Array.isArray(res.body.output.projects);\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d5a3c04b-246f-4311-b9ed-56aff0e316f0",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise User User.projectsworkflows Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5dd98a69-a4ee-4cf3-b419-3b808533ddf0",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "a615c0fb-b1c0-410d-bec5-f2a851a23cd2",
                  "6e34a5e2-a674-497d-873f-ce20428b7c3b",
                  "d5a3c04b-246f-4311-b9ed-56aff0e316f0",
                  "5dd98a69-a4ee-4cf3-b419-3b808533ddf0"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 181,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "f15459dd-2d94-45d1-9142-8ed2882318da",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\users\\resendActivationMail.enterprise.js",
        "file": "\\controllers\\test\\users\\resendActivationMail.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "0a7eb3ec-4749-46ba-a635-f94be6f96568",
            "title": "User",
            "fullFile": "D:\\api\\controllers\\test\\users\\resendActivationMail.enterprise.js",
            "file": "\\controllers\\test\\users\\resendActivationMail.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "e7e27929-deff-423c-b9fe-144c735d51db",
                "title": "User.resendActivationMail",
                "fullFile": "D:\\api\\controllers\\test\\users\\resendActivationMail.enterprise.js",
                "file": "\\controllers\\test\\users\\resendActivationMail.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.resendActivationMail \"before each\" hook",
                    "timedOut": false,
                    "duration": 272,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({}, function(error, user) {\n    _models.Mail.remove({}, function(error, user) {\n        commonMock.setSignUpMocks(httpmock, \"enterprise\");\n        api.post(\"/enterprise/v1/signup\")\n            .send(registrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    authToken = res.body.output.authtoken;\n                    _id = res.body.output._id;\n                    activationToken = res.body.output.activation_token;\n                    uid = res.body.output.uid;\n                    done();\n                }\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a797ae20-8ae6-4b03-a57c-f36f589164ed",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Should send activation email.",
                    "fullTitle": "Enterprise User User.resendActivationMail Should send activation email.",
                    "timedOut": false,
                    "duration": 17,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.captchaVerification(httpmock, \"enterprise\");\napi.post(apiURL)\n    .set('authtoken', authToken)\n    .send({\n        email: registrationBody.email,\n        captcha_code: \"03AHJ_Vuu_lnKuNq-eLmTlTmWe6Aozhp6z0uLva1JGwwIKCkGu0x3S-8qFAHtZxL3TuJatYJnGOxta3250lueM1wWWb89Lk1zNeobupy-bg579yiGTwr4_IHsN_eWANc40w_EToNjf4mmeKxLbspOGq9YEZlWFb6d5pNnT--ImOkvcoiqwrmKjQIKPEoJBlXbuTL2NfNrrEPjhCpnmSQR6z3CRD1G-V3sVFeBbzHjoatg2wpFgnS5ikf42hNcq6JP0TwhQ86pwCqZ86JKm2UQe1ISxQUOckNXx6dG9NuCjypFmEsvOaL7qrhmcbp77hfzNamTEt1GVpNBlpKMtND6FDn8X05Ni3xoZDDhjZzRvlJQWf9ygHjsVByEEQv5GU9l1f4CI1gPbulwHQFN3d_8S0mbpBOfI-YQ_fE3lSWp0dDA2mxdDXOVi7tQgIBZhRFPAa8Jt9R9_TaSch6Ygq6qrkkIuekVIs6jSsLsLavpKZgtUkLJcf1RaUUZharASNuMIt3_s9EbWM42WCs8aMLWPo8qMu4pKa6cS5Bd3D-TFTBmtADFpOvDHjqfXqX_PemEg_ZVEXUYYGQ3YhJhESe8OCuxWqcs84Jzyln7-BIxYrMEDOgejqPrUc8nOU9F2o-MtjWohx_8ci0-078Fg6UGPWUGqZ2ttrvK9mIkFi1iQVhTcThPEFH2SoG993B3YqmEagHtBwOid2pNzYY_hAffXSSvURdJstiZi7qV_ZNxnJ9CSlljI8erdb4cPSrIY8XIEahiC-q3ODrATTXfkv5iGXeYI7_rDO0DmH3OS5g9rmFZb4RTows9Gmp8xOA91_faynmaM0009rOjYx0pxAqZZECTJu20Qyvbu0_d-dd7n7vMPHvoEMqbXQhXQO62zBK-h3PRRWQlLdFgwj498SgMsFkbo1SBRi1943w\"\n    })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.message.should.equal(messageList.USER_ACTIVATION_MAIL_SENT);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cfb52d69-32d6-42ea-875d-9a62357fb6c8",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should allowed to send activation link when user is locked.",
                    "fullTitle": "Enterprise User User.resendActivationMail Should allowed to send activation link when user is locked.",
                    "timedOut": false,
                    "duration": 34,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.findOneAndUpdate({ \"uid\": uid }, {\n    failed_login_count: 7\n}, { new: true }, function(err, user) {\n    commonMock.captchaVerification(httpmock, \"enterprise\");\n    api.post(apiURL)\n        .set('authtoken', authToken)\n        .send({\n            email: registrationBody.email,\n            captcha_code: \"03AHJ_Vuu_lnKuNq-eLmTlTmWe6Aozhp6z0uLva1JGwwIKCkGu0x3S-8qFAHtZxL3TuJatYJnGOxta3250lueM1wWWb89Lk1zNeobupy-bg579yiGTwr4_IHsN_eWANc40w_EToNjf4mmeKxLbspOGq9YEZlWFb6d5pNnT--ImOkvcoiqwrmKjQIKPEoJBlXbuTL2NfNrrEPjhCpnmSQR6z3CRD1G-V3sVFeBbzHjoatg2wpFgnS5ikf42hNcq6JP0TwhQ86pwCqZ86JKm2UQe1ISxQUOckNXx6dG9NuCjypFmEsvOaL7qrhmcbp77hfzNamTEt1GVpNBlpKMtND6FDn8X05Ni3xoZDDhjZzRvlJQWf9ygHjsVByEEQv5GU9l1f4CI1gPbulwHQFN3d_8S0mbpBOfI-YQ_fE3lSWp0dDA2mxdDXOVi7tQgIBZhRFPAa8Jt9R9_TaSch6Ygq6qrkkIuekVIs6jSsLsLavpKZgtUkLJcf1RaUUZharASNuMIt3_s9EbWM42WCs8aMLWPo8qMu4pKa6cS5Bd3D-TFTBmtADFpOvDHjqfXqX_PemEg_ZVEXUYYGQ3YhJhESe8OCuxWqcs84Jzyln7-BIxYrMEDOgejqPrUc8nOU9F2o-MtjWohx_8ci0-078Fg6UGPWUGqZ2ttrvK9mIkFi1iQVhTcThPEFH2SoG993B3YqmEagHtBwOid2pNzYY_hAffXSSvURdJstiZi7qV_ZNxnJ9CSlljI8erdb4cPSrIY8XIEahiC-q3ODrATTXfkv5iGXeYI7_rDO0DmH3OS5g9rmFZb4RTows9Gmp8xOA91_faynmaM0009rOjYx0pxAqZZECTJu20Qyvbu0_d-dd7n7vMPHvoEMqbXQhXQO62zBK-h3PRRWQlLdFgwj498SgMsFkbo1SBRi1943w\"\n        })\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                res.body.output.message.should.equal(messageList.USER_ACTIVATION_MAIL_SENT);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "69c78f53-e04b-47f2-ac63-966f82c959e6",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as user is not register.",
                    "fullTitle": "Enterprise User User.resendActivationMail Should give error as user is not register.",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.captchaVerification(httpmock, \"enterprise\");\napi.post(apiURL)\n    .set('authtoken', authToken)\n    .send({\n        email: \"FAKE_EMAIL@example.com\",\n        captcha_code: \"03AHJ_Vuu_lnKuNq-eLmTlTmWe6Aozhp6z0uLva1JGwwIKCkGu0x3S-8qFAHtZxL3TuJatYJnGOxta3250lueM1wWWb89Lk1zNeobupy-bg579yiGTwr4_IHsN_eWANc40w_EToNjf4mmeKxLbspOGq9YEZlWFb6d5pNnT--ImOkvcoiqwrmKjQIKPEoJBlXbuTL2NfNrrEPjhCpnmSQR6z3CRD1G-V3sVFeBbzHjoatg2wpFgnS5ikf42hNcq6JP0TwhQ86pwCqZ86JKm2UQe1ISxQUOckNXx6dG9NuCjypFmEsvOaL7qrhmcbp77hfzNamTEt1GVpNBlpKMtND6FDn8X05Ni3xoZDDhjZzRvlJQWf9ygHjsVByEEQv5GU9l1f4CI1gPbulwHQFN3d_8S0mbpBOfI-YQ_fE3lSWp0dDA2mxdDXOVi7tQgIBZhRFPAa8Jt9R9_TaSch6Ygq6qrkkIuekVIs6jSsLsLavpKZgtUkLJcf1RaUUZharASNuMIt3_s9EbWM42WCs8aMLWPo8qMu4pKa6cS5Bd3D-TFTBmtADFpOvDHjqfXqX_PemEg_ZVEXUYYGQ3YhJhESe8OCuxWqcs84Jzyln7-BIxYrMEDOgejqPrUc8nOU9F2o-MtjWohx_8ci0-078Fg6UGPWUGqZ2ttrvK9mIkFi1iQVhTcThPEFH2SoG993B3YqmEagHtBwOid2pNzYY_hAffXSSvURdJstiZi7qV_ZNxnJ9CSlljI8erdb4cPSrIY8XIEahiC-q3ODrATTXfkv5iGXeYI7_rDO0DmH3OS5g9rmFZb4RTows9Gmp8xOA91_faynmaM0009rOjYx0pxAqZZECTJu20Qyvbu0_d-dd7n7vMPHvoEMqbXQhXQO62zBK-h3PRRWQlLdFgwj498SgMsFkbo1SBRi1943w\"\n    })\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.USER_ACTIVATION_NOT_REGISTER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b42cfefe-a665-4e22-adf6-1ff537217e10",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as user has been already activated.",
                    "fullTitle": "Enterprise User User.resendActivationMail Should give error as user has been already activated.",
                    "timedOut": false,
                    "duration": 32,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(\"/enterprise/v1/user/activate\")\n    .send({\n        user_uid: uid,\n        token: activationToken\n    })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            commonMock.captchaVerification(httpmock, \"enterprise\");\n            api.post(apiURL)\n                .set('authtoken', authToken)\n                .send({\n                    email: registrationBody.email,\n                    captcha_code: \"03AHJ_Vuu_lnKuNq-eLmTlTmWe6Aozhp6z0uLva1JGwwIKCkGu0x3S-8qFAHtZxL3TuJatYJnGOxta3250lueM1wWWb89Lk1zNeobupy-bg579yiGTwr4_IHsN_eWANc40w_EToNjf4mmeKxLbspOGq9YEZlWFb6d5pNnT--ImOkvcoiqwrmKjQIKPEoJBlXbuTL2NfNrrEPjhCpnmSQR6z3CRD1G-V3sVFeBbzHjoatg2wpFgnS5ikf42hNcq6JP0TwhQ86pwCqZ86JKm2UQe1ISxQUOckNXx6dG9NuCjypFmEsvOaL7qrhmcbp77hfzNamTEt1GVpNBlpKMtND6FDn8X05Ni3xoZDDhjZzRvlJQWf9ygHjsVByEEQv5GU9l1f4CI1gPbulwHQFN3d_8S0mbpBOfI-YQ_fE3lSWp0dDA2mxdDXOVi7tQgIBZhRFPAa8Jt9R9_TaSch6Ygq6qrkkIuekVIs6jSsLsLavpKZgtUkLJcf1RaUUZharASNuMIt3_s9EbWM42WCs8aMLWPo8qMu4pKa6cS5Bd3D-TFTBmtADFpOvDHjqfXqX_PemEg_ZVEXUYYGQ3YhJhESe8OCuxWqcs84Jzyln7-BIxYrMEDOgejqPrUc8nOU9F2o-MtjWohx_8ci0-078Fg6UGPWUGqZ2ttrvK9mIkFi1iQVhTcThPEFH2SoG993B3YqmEagHtBwOid2pNzYY_hAffXSSvURdJstiZi7qV_ZNxnJ9CSlljI8erdb4cPSrIY8XIEahiC-q3ODrATTXfkv5iGXeYI7_rDO0DmH3OS5g9rmFZb4RTows9Gmp8xOA91_faynmaM0009rOjYx0pxAqZZECTJu20Qyvbu0_d-dd7n7vMPHvoEMqbXQhXQO62zBK-h3PRRWQlLdFgwj498SgMsFkbo1SBRi1943w\"\n                })\n                .expect(httpStatus.BAD_REQUEST)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        res.body.error.message.should.equal(messageList.USER_ACTIVATION_ALREADY_ACTIVATED);\n                        done();\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c5766c16-12d9-4037-83ec-51dcbc8a5503",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give captcha verification fail error.",
                    "fullTitle": "Enterprise User User.resendActivationMail Should give captcha verification fail error.",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('authtoken', authToken)\n    .send({\n        email: registrationBody.email\n    })\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.CAPTCHA_VERIFICATION_FAIL);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "209ff10a-b941-444a-b51f-22f99971e537",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "cfb52d69-32d6-42ea-875d-9a62357fb6c8",
                  "69c78f53-e04b-47f2-ac63-966f82c959e6",
                  "b42cfefe-a665-4e22-adf6-1ff537217e10",
                  "c5766c16-12d9-4037-83ec-51dcbc8a5503",
                  "209ff10a-b941-444a-b51f-22f99971e537"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 103,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "0d3d451c-9343-4194-b4e8-d890202b2b15",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\users\\resetPassword.enterprise.js",
        "file": "\\controllers\\test\\users\\resetPassword.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "7c2ea276-d745-418a-8a06-d9848debf3c4",
            "title": "User",
            "fullFile": "D:\\api\\controllers\\test\\users\\resetPassword.enterprise.js",
            "file": "\\controllers\\test\\users\\resetPassword.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "3a18749c-e52a-4320-873d-b570ef6d6d69",
                "title": "User.resetPassword",
                "fullFile": "D:\\api\\controllers\\test\\users\\resetPassword.enterprise.js",
                "file": "\\controllers\\test\\users\\resetPassword.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.resetPassword \"before each\" hook",
                    "timedOut": false,
                    "duration": 279,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveRecords(function() {\n    commonMock.setSignUpMocks(httpmock, \"enterprise\");\n    api.post(\"/enterprise/v1/signup\")\n        .send(registrationBody)\n        .expect(httpStatus.CREATED)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                authToken = res.body.output.authtoken;\n                _id = res.body.output._id;\n                activationToken = res.body.output.activation_token;\n                uid = res.body.output.uid;\n                api.post(\"/enterprise/v1/user/activate\")\n                    .send({\n                        user_uid: uid,\n                        token: activationToken\n                    })\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            done();\n                        }\n                    });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e868d846-dd55-420f-8e0d-7819c6c20f95",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise User User.resetPassword \"after all\" hook",
                    "timedOut": false,
                    "duration": 2,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveRecords(function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4b9d3916-d894-4ba2-b3ea-1dd6b6bf036d",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User User.resetPassword \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2982a593-08b6-4f18-a700-c68a018933cb",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should reset password.",
                    "fullTitle": "Enterprise User User.resetPassword Should reset password.",
                    "timedOut": false,
                    "duration": 239,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\npasswordReseting({\n    password: \"Raw@12345\",\n    password_confirmation: \"Raw@12345\",\n    captcha_code: captchaCode,\n    httpStatus: httpStatus.OK\n}, function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        res.body.output.message.should.equal(messageList.USER_RESET_PASS_SUCCESSFULLY);\n        done();\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6d528ad8-8747-4781-bfdf-154d27a25139",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should allowed to reset password, when user is locked.",
                    "fullTitle": "Enterprise User User.resetPassword Should allowed to reset password, when user is locked.",
                    "timedOut": false,
                    "duration": 236,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.findOneAndUpdate({ \"uid\": uid }, {\n    failed_login_count: 7\n}, { new: true }, function(err, user) {\n    passwordReseting({\n        password: \"Raw@12345\",\n        password_confirmation: \"Raw@12345\",\n        captcha_code: captchaCode,\n        httpStatus: httpStatus.OK\n    }, function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.message.should.equal(messageList.USER_RESET_PASS_SUCCESSFULLY);\n            done();\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e71e3428-2018-4889-b2eb-87acc08a773c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should set failed login count to zero, when user reset password.",
                    "fullTitle": "Enterprise User User.resetPassword Should set failed login count to zero, when user reset password.",
                    "timedOut": false,
                    "duration": 241,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.findOneAndUpdate({ \"uid\": uid }, {\n    failed_login_count: 7\n}, { new: true }, function(err, user) {\n    passwordReseting({\n        password: \"Raw@12345\",\n        password_confirmation: \"Raw@12345\",\n        captcha_code: captchaCode,\n        httpStatus: httpStatus.OK\n    }, function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            _models.User.findOne({ \"uid\": uid }, function(err, user) {\n                user.failed_login_count.should.equal(0);\n                done();\n            });\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fe0ae3eb-e507-483f-80b0-6072627ae353",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error for using same password while reseting password.",
                    "fullTitle": "Enterprise User User.resetPassword Should give error for using same password while reseting password.",
                    "timedOut": false,
                    "duration": 231,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\npasswordReseting({\n    password: \"Raw@1234\",\n    password_confirmation: \"Raw@1234\",\n    captcha_code: captchaCode,\n    httpStatus: httpStatus.BAD_REQUEST\n}, function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        res.body.error.message.should.equal(messageList.PASSWORD_REPEAT_ERROR);\n        done();\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d1548b9c-c097-4c32-9588-aa895ba95c3b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should return error for not passing valid password accordingly to criteria.",
                    "fullTitle": "Enterprise User User.resetPassword Should return error for not passing valid password accordingly to criteria.",
                    "timedOut": false,
                    "duration": 70,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\npasswordReseting({\n    password: \"Rawaaaaaaaaaaaa\",\n    password_confirmation: \"Rawaaaaaaaaaaaa\",\n    captcha_code: captchaCode,\n    httpStatus: httpStatus.BAD_REQUEST\n}, function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        res.body.error.password.message.should.equal(messageList.USER_REG_INVALID_PASSWORD);\n        done();\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "708ca81c-29ac-41b2-9c8e-a16dd1139812",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should return error for not passing confirm password.",
                    "fullTitle": "Enterprise User User.resetPassword Should return error for not passing confirm password.",
                    "timedOut": false,
                    "duration": 93,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\npasswordReseting({\n    password: \"Raw@1234\",\n    password_confirmation: \"Raw@12345\",\n    captcha_code: captchaCode,\n    httpStatus: httpStatus.BAD_REQUEST\n}, function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        res.body.error.password_confirmation.message.should.equal(messageList.USER_REG_MATCHED_CONFIRM_PASSWORD);\n        done();\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "098ea8d1-084d-44a5-afb6-a3e01d823c69",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not allowed to use first password on fifth time password reseting.",
                    "fullTitle": "Enterprise User User.resetPassword Should not allowed to use first password on fifth time password reseting.",
                    "timedOut": false,
                    "duration": 1201,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\npasswordReseting({\n    password: \"Raw@12341\",\n    password_confirmation: \"Raw@12341\",\n    captcha_code: captchaCode,\n    httpStatus: httpStatus.OK\n}, function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        if (res.body.output.message == messageList.USER_RESET_PASS_SUCCESSFULLY) {\n            passwordReseting({\n                password: \"Raw@12342\",\n                password_confirmation: \"Raw@12342\",\n                captcha_code: captchaCode,\n                httpStatus: httpStatus.OK\n            }, function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    if (res.body.output.message == messageList.USER_RESET_PASS_SUCCESSFULLY) {\n                        passwordReseting({\n                            password: \"Raw@12343\",\n                            password_confirmation: \"Raw@12343\",\n                            captcha_code: captchaCode,\n                            httpStatus: httpStatus.OK\n                        }, function(err, res) {\n                            if (err) {\n                                done(err);\n                            } else {\n                                if (res.body.output.message == messageList.USER_RESET_PASS_SUCCESSFULLY) {\n                                    passwordReseting({\n                                        password: \"Raw@12344\",\n                                        password_confirmation: \"Raw@12344\",\n                                        captcha_code: captchaCode,\n                                        httpStatus: httpStatus.OK\n                                    }, function(err, res) {\n                                        if (err) {\n                                            done(err);\n                                        } else {\n                                            if (res.body.output.message == messageList.USER_RESET_PASS_SUCCESSFULLY) {\n                                                passwordReseting({\n                                                    password: \"Raw@1234\",\n                                                    password_confirmation: \"Raw@1234\",\n                                                    captcha_code: captchaCode,\n                                                    httpStatus: httpStatus.BAD_REQUEST\n                                                }, function(err, res) {\n                                                    if (err) {\n                                                        done(err);\n                                                    } else {\n                                                        res.body.error.message.should.equal(messageList.PASSWORD_REPEAT_ERROR);\n                                                        done();\n                                                    }\n                                                });\n                                            } else {\n                                                true.should.equal(false);\n                                            }\n                                        }\n                                    });\n                                } else {\n                                    true.should.equal(false);\n                                }\n                            }\n                        });\n                    } else {\n                        true.should.equal(false);\n                    }\n                }\n            });\n        } else {\n            true.should.equal(false);\n        }\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "928daa94-1fc2-4d2e-8713-ad7efc564dad",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should allowed to use first password on sixth time password reseting.",
                    "fullTitle": "Enterprise User User.resetPassword Should allowed to use first password on sixth time password reseting.",
                    "timedOut": false,
                    "duration": 1458,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\npasswordReseting({\n    password: \"Raw@12341\",\n    password_confirmation: \"Raw@12341\",\n    captcha_code: captchaCode,\n    httpStatus: httpStatus.OK\n}, function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        if (res.body.output.message == messageList.USER_RESET_PASS_SUCCESSFULLY) {\n            passwordReseting({\n                password: \"Raw@12342\",\n                password_confirmation: \"Raw@12342\",\n                captcha_code: captchaCode,\n                httpStatus: httpStatus.OK\n            }, function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    if (res.body.output.message == messageList.USER_RESET_PASS_SUCCESSFULLY) {\n                        passwordReseting({\n                            password: \"Raw@12343\",\n                            password_confirmation: \"Raw@12343\",\n                            captcha_code: captchaCode,\n                            httpStatus: httpStatus.OK\n                        }, function(err, res) {\n                            if (err) {\n                                done(err);\n                            } else {\n                                if (res.body.output.message == messageList.USER_RESET_PASS_SUCCESSFULLY) {\n                                    passwordReseting({\n                                        password: \"Raw@12344\",\n                                        password_confirmation: \"Raw@12344\",\n                                        captcha_code: captchaCode,\n                                        httpStatus: httpStatus.OK\n                                    }, function(err, res) {\n                                        if (err) {\n                                            done(err);\n                                        } else {\n                                            if (res.body.output.message == messageList.USER_RESET_PASS_SUCCESSFULLY) {\n                                                passwordReseting({\n                                                    password: \"Raw@12345\",\n                                                    password_confirmation: \"Raw@12345\",\n                                                    captcha_code: captchaCode,\n                                                    httpStatus: httpStatus.OK\n                                                }, function(err, res) {\n                                                    if (err) {\n                                                        done(err);\n                                                    } else {\n                                                        if (res.body.output.message == messageList.USER_RESET_PASS_SUCCESSFULLY) {\n                                                            passwordReseting({\n                                                                password: \"Raw@1234\",\n                                                                password_confirmation: \"Raw@1234\",\n                                                                captcha_code: captchaCode,\n                                                                httpStatus: httpStatus.OK\n                                                            }, function(err, res) {\n                                                                if (err) {\n                                                                    done(err);\n                                                                } else {\n                                                                    res.body.output.message.should.equal(messageList.USER_RESET_PASS_SUCCESSFULLY);\n                                                                    done();\n                                                                }\n                                                            });\n                                                        } else {\n                                                            true.should.equal(false);\n                                                        }\n                                                    }\n                                                });\n                                            } else {\n                                                true.should.equal(false);\n                                            }\n                                        }\n                                    });\n                                } else {\n                                    true.should.equal(false);\n                                }\n                            }\n                        });\n                    } else {\n                        true.should.equal(false);\n                    }\n                }\n            });\n        } else {\n            true.should.equal(false);\n        }\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "660e5939-6ad3-4d90-8804-12f4e5a376e0",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as password is required.",
                    "fullTitle": "Enterprise User User.resetPassword Should give error as password is required.",
                    "timedOut": false,
                    "duration": 68,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\npasswordReseting({\n    password_confirmation: \"Raw@12345\",\n    captcha_code: captchaCode,\n    httpStatus: httpStatus.BAD_REQUEST\n}, function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        res.body.error.password.message.should.equal(messageList.USER_REG_INVALID_PASSWORD);\n        done();\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "826cf778-cc16-41e9-9ab2-9bacbd74ce91",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as request toke is required.",
                    "fullTitle": "Enterprise User User.resetPassword Should give error as request toke is required.",
                    "timedOut": false,
                    "duration": 73,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\npasswordReseting({\n    password: \"Raw@12345\",\n    password_confirmation: \"Raw@12345\",\n    captcha_code: captchaCode,\n    token: \"\",\n    httpStatus: httpStatus.BAD_REQUEST\n}, function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        res.body.error.token.message.should.equal(messageList.USER_RESET_PASS_TOKEN_MUST_NOT_BE_EMPTY);\n        done();\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f005c542-3e41-4617-ab4e-258d4661b7e4",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as invalid forgot password token.",
                    "fullTitle": "Enterprise User User.resetPassword Should give error as invalid forgot password token.",
                    "timedOut": false,
                    "duration": 241,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\npasswordReseting({\n    password: \"Raw@12345\",\n    password_confirmation: \"Raw@12345\",\n    captcha_code: captchaCode,\n    token: \"FAKE\",\n    httpStatus: httpStatus.BAD_REQUEST\n}, function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        res.body.error.message.should.equal(messageList.USER_INVALID_RESET_PASS_TOKEN);\n        done();\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cc3bc5fe-db64-4bc9-a4f3-0a1dd16f551f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as password and confirm password are not equal.",
                    "fullTitle": "Enterprise User User.resetPassword Should give error as password and confirm password are not equal.",
                    "timedOut": false,
                    "duration": 72,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\npasswordReseting({\n    password: \"Raw@12345\",\n    password_confirmation: \"Raw@12346\",\n    captcha_code: captchaCode,\n    httpStatus: httpStatus.BAD_REQUEST\n}, function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        res.body.error.password_confirmation.message.should.equal(messageList.USER_REG_MATCHED_CONFIRM_PASSWORD);\n        done();\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "370bbbd6-f07c-49eb-af35-5622ced92998",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give captcha verification fail error.",
                    "fullTitle": "Enterprise User User.resetPassword Should give captcha verification fail error.",
                    "timedOut": false,
                    "duration": 78,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\npasswordReseting({\n    password: \"Raw@12345\",\n    password_confirmation: \"Raw@12345\",\n    httpStatus: httpStatus.BAD_REQUEST\n}, function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        res.body.error.message.should.equal(messageList.CAPTCHA_VERIFICATION_FAIL);\n        done();\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "566c4a94-6a46-423c-b1c1-50638d05a54a",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "6d528ad8-8747-4781-bfdf-154d27a25139",
                  "e71e3428-2018-4889-b2eb-87acc08a773c",
                  "fe0ae3eb-e507-483f-80b0-6072627ae353",
                  "d1548b9c-c097-4c32-9588-aa895ba95c3b",
                  "708ca81c-29ac-41b2-9c8e-a16dd1139812",
                  "098ea8d1-084d-44a5-afb6-a3e01d823c69",
                  "928daa94-1fc2-4d2e-8713-ad7efc564dad",
                  "660e5939-6ad3-4d90-8804-12f4e5a376e0",
                  "826cf778-cc16-41e9-9ab2-9bacbd74ce91",
                  "f005c542-3e41-4617-ab4e-258d4661b7e4",
                  "cc3bc5fe-db64-4bc9-a4f3-0a1dd16f551f",
                  "370bbbd6-f07c-49eb-af35-5622ced92998",
                  "566c4a94-6a46-423c-b1c1-50638d05a54a"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 4301,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "f3f29f51-88f0-414f-b329-ea8924a9e53d",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\users\\saveMetadata.enterprise.js",
        "file": "\\controllers\\test\\users\\saveMetadata.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "9c9858ad-98e1-44d5-916e-1187dff2f5d7",
            "title": "User",
            "fullFile": "D:\\api\\controllers\\test\\users\\saveMetadata.enterprise.js",
            "file": "\\controllers\\test\\users\\saveMetadata.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "465a53cc-911d-4ac8-bd2e-9632eca75568",
                "title": "User.saveMetadata",
                "fullFile": "D:\\api\\controllers\\test\\users\\saveMetadata.enterprise.js",
                "file": "\\controllers\\test\\users\\saveMetadata.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.saveMetadata \"before each\" hook",
                    "timedOut": false,
                    "duration": 257,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n    _models.Mail.remove({ $or: [{ to: new RegExp('^test.user+', \"i\") }, { to: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n        _models.Authy.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n            commonMock.setSignUpMocks(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/signup\")\n                .send(registrationBody)\n                .expect(httpStatus.CREATED)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        authToken = res.body.output.authtoken;\n                        _id = res.body.output._id;\n                        apiURL = apiURL.replace(\":uid\", res.body.output.uid);\n                        done();\n                    }\n                });\n        });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cef9a6c7-816c-49b0-a515-77781321c2ca",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User User.saveMetadata \"after each\" hook",
                    "timedOut": false,
                    "duration": 1,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a3cb9db9-dbad-4be1-9238-83f69fdea750",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should update new password.",
                    "fullTitle": "Enterprise User User.saveMetadata Should update new password.",
                    "timedOut": false,
                    "duration": 69,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempUserBody = {};\ntempUserBody.metadata = {\n    \"name\": \"demo\"\n};\napi.put(apiURL)\n    .send(tempUserBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.uid != \"\" &&\n                res.body.output.metadata.name == \"demo\" &&\n                res.body.output.first_name == registrationBody.first_name;\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a7d190cd-2792-4421-83c5-d5d4d3e39f26",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as metadata is required.",
                    "fullTitle": "Enterprise User User.saveMetadata Should give error as metadata is required.",
                    "timedOut": false,
                    "duration": 39,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempUserBody = {};\napi.put(apiURL)\n    .send(tempUserBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.metadata.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2fb6a14e-ca8d-41bf-9b7c-3f9d6e914daf",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise User User.saveMetadata Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempUserBody = {};\ntempUserBody.metadata = {\n    \"name\": \"demo\"\n};\napi.put(apiURL)\n    .send(tempUserBody)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4a7bf7de-b5cf-42c5-8ed3-61248e8da143",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "a7d190cd-2792-4421-83c5-d5d4d3e39f26",
                  "2fb6a14e-ca8d-41bf-9b7c-3f9d6e914daf",
                  "4a7bf7de-b5cf-42c5-8ed3-61248e8da143"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 115,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "12ebb38b-3e1e-4c76-aa10-477ea823df29",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\users\\saveProfile.enterprise.js",
        "file": "\\controllers\\test\\users\\saveProfile.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "05121893-6fc6-4dbc-aa3a-6cc1a4525d93",
            "title": "User",
            "fullFile": "D:\\api\\controllers\\test\\users\\saveProfile.enterprise.js",
            "file": "\\controllers\\test\\users\\saveProfile.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "b8872ed1-4600-49e6-b765-11560261d765",
                "title": "User.SaveProfile",
                "fullFile": "D:\\api\\controllers\\test\\users\\saveProfile.enterprise.js",
                "file": "\\controllers\\test\\users\\saveProfile.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.SaveProfile \"before each\" hook",
                    "timedOut": false,
                    "duration": 240,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n    _models.Mail.remove({ $or: [{ to: new RegExp('^test.user+', \"i\") }, { to: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n        _models.Authy.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n            commonMock.setSignUpMocks(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/signup\")\n                .send(registrationBody)\n                .expect(httpStatus.CREATED)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        authToken = res.body.output.authtoken;\n                        _id = res.body.output._id;\n                        apiURL = apiURL.replace(\":uid\", res.body.output.uid);\n                        done();\n                    }\n                });\n        });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "921bf411-95bd-4f94-8eff-254180d1ec29",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User User.SaveProfile \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "271fc25e-df30-4fbe-9ef3-371e5ec17256",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should update first_name.",
                    "fullTitle": "Enterprise User User.SaveProfile Should update first_name.",
                    "timedOut": false,
                    "duration": 92,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable({});\ntempRegistrationBody.first_name = \"amber 1\";\ntempRegistrationBody.last_name = \"More\";\ndelete tempRegistrationBody.password;\napi.put(apiURL)\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.first_name == tempRegistrationBody.first_name &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\";\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "496b1fc9-2439-4152-9459-28585fa0519b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give first_name required error.",
                    "fullTitle": "Enterprise User User.SaveProfile Should give first_name required error.",
                    "timedOut": false,
                    "duration": 39,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ndelete tempRegistrationBody.first_name;\ndelete tempRegistrationBody.password;\napi.put(apiURL)\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.error.first_name.message == messageList.USER_PROFILE_FIRST_NAME_REQUIRED;\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "edc9195e-6b3e-442e-8c02-d487384bb5cf",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give first_name required error for empty spaces first_name.",
                    "fullTitle": "Enterprise User User.SaveProfile Should give first_name required error for empty spaces first_name.",
                    "timedOut": false,
                    "duration": 52,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.first_name = \"   \";\ndelete tempRegistrationBody.password;\napi.put(apiURL)\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.error.first_name.message == messageList.USER_PROFILE_FIRST_NAME_REQUIRED;\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5e41407a-3ae8-43bb-b60a-0a88664dee0e",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should update last_name.",
                    "fullTitle": "Enterprise User User.SaveProfile Should update last_name.",
                    "timedOut": false,
                    "duration": 69,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.last_name = \"more 1\";\ndelete tempRegistrationBody.password;\napi.put(apiURL)\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.last_name == tempRegistrationBody.last_name &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\";\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3a1ce75d-0d82-4806-80d1-147074a8f6d5",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give user_plan.",
                    "fullTitle": "Enterprise User User.SaveProfile Should give user_plan.",
                    "timedOut": false,
                    "duration": 77,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.last_name = \"more 1\";\ndelete tempRegistrationBody.password;\napi.put(apiURL)\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = typeof(res.body.output.user_plan) != \"undefined\" &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\";\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "749831af-156a-463f-b43c-fb180d932e40",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give last_name required error.",
                    "fullTitle": "Enterprise User User.SaveProfile Should give last_name required error.",
                    "timedOut": false,
                    "duration": 41,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ndelete tempRegistrationBody.last_name;\ndelete tempRegistrationBody.password;\napi.put(apiURL)\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.error.last_name.message == messageList.USER_PROFILE_LAST_NAME_REQUIRED;\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c9057da5-8519-402f-8081-7cd13f3a8ebf",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give last_name required error for empty spaces last_name.",
                    "fullTitle": "Enterprise User User.SaveProfile Should give last_name required error for empty spaces last_name.",
                    "timedOut": false,
                    "duration": 38,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.last_name = \"  \";\ndelete tempRegistrationBody.password;\napi.put(apiURL)\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.error.last_name.message == messageList.USER_PROFILE_LAST_NAME_REQUIRED;\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1a6fe2f3-6096-43f7-85d8-d08931dd1422",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should update company.",
                    "fullTitle": "Enterprise User User.SaveProfile Should update company.",
                    "timedOut": false,
                    "duration": 85,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.company = \"built.io 1\";\ndelete tempRegistrationBody.password;\napi.put(apiURL)\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.company == tempRegistrationBody.company &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\";\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d3648a15-8a21-4eef-90d1-9967e97f971e",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should update empty company.",
                    "fullTitle": "Enterprise User User.SaveProfile Should update empty company.",
                    "timedOut": false,
                    "duration": 72,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.company = \"\";\ndelete tempRegistrationBody.password;\napi.put(apiURL)\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.company == tempRegistrationBody.company &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\";\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4880b12b-fb91-4961-84ef-fb78654117e7",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should update empty job_title.",
                    "fullTitle": "Enterprise User User.SaveProfile Should update empty job_title.",
                    "timedOut": false,
                    "duration": 78,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.job_title = \"\"; //None 1\";\ndelete tempRegistrationBody.password;\napi.put(apiURL)\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.job_title == tempRegistrationBody.job_title &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\";\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2cf73e7c-b151-4aba-bebd-fcf0fc15c186",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should update locale.",
                    "fullTitle": "Enterprise User User.SaveProfile Should update locale.",
                    "timedOut": false,
                    "duration": 81,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.locale = \"en-uk\";\ndelete tempRegistrationBody.password;\napi.put(apiURL)\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.locale == tempRegistrationBody.locale &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\";\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9cce3fd9-ae91-4b89-b148-95eec50783db",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should update password.",
                    "fullTitle": "Enterprise User User.SaveProfile Should update password.",
                    "timedOut": false,
                    "duration": 524,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable({});\ntempRegistrationBody.oldpassword = \"Raw@1234\";\ntempRegistrationBody.password = \"raw@1235\";\ntempRegistrationBody.password_confirmation = \"raw@1235\";\ntempRegistrationBody.first_name = \"Amber\";\ntempRegistrationBody.last_name = \"More\";\nutils.encryptPassword(tempRegistrationBody.password).then(function(newPassHashed) {\n    api.put(apiURL)\n        .send(tempRegistrationBody)\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                var isValid = typeof(res.body.output._id) == \"undefined\" &&\n                    typeof(res.body.output.__v) == \"undefined\";\n                if (isValid) {\n                    _models.User.findOne({ uid: res.body.output.uid }, function(error, user) {\n                        if (error) {\n                            done(error);\n                        } else if (user) {\n                            (user.password == newPassHashed).should.equal(true);\n                            done();\n                        } else {\n                            false.should.equal(true);\n                            done();\n                        }\n                    });\n                } else {\n                    isValid.should.equal(true);\n                    done();\n                }\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fe152efc-cefd-4049-86c7-7e60bc4f47e2",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error for using same password while updating password.",
                    "fullTitle": "Enterprise User User.SaveProfile Should give error for using same password while updating password.",
                    "timedOut": false,
                    "duration": 41,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.oldpassword = \"Raw@1234\";\ntempRegistrationBody.password = \"Raw@1234\";\ntempRegistrationBody.password_confirmation = \"Raw@1234\";\napi.put(apiURL)\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.USER_CHANGE_PASS_OLD_PASS_PASS_NOT_BE_SAME);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cb422aa3-4f2e-4c34-a1db-a27c29ea759c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not allowed to use first password on fifth time while updating password.",
                    "fullTitle": "Enterprise User User.SaveProfile Should not allowed to use first password on fifth time while updating password.",
                    "timedOut": false,
                    "duration": 1831,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable({});\ntempRegistrationBody.oldpassword = \"Raw@1234\";\ntempRegistrationBody.password = \"Raw@1241\";\ntempRegistrationBody.password_confirmation = \"Raw@1241\";\ntempRegistrationBody.first_name = \"Amber\";\ntempRegistrationBody.last_name = \"More\";\napi.put(apiURL)\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            tempRegistrationBody.oldpassword = \"Raw@1241\";\n            tempRegistrationBody.password = \"Raw@1242\";\n            tempRegistrationBody.password_confirmation = \"Raw@1242\";\n            api.put(apiURL)\n                .send(tempRegistrationBody)\n                .set('authtoken', authToken)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        tempRegistrationBody.oldpassword = \"Raw@1242\";\n                        tempRegistrationBody.password = \"Raw@1243\";\n                        tempRegistrationBody.password_confirmation = \"Raw@1243\";\n                        api.put(apiURL)\n                            .send(tempRegistrationBody)\n                            .set('authtoken', authToken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    tempRegistrationBody.oldpassword = \"Raw@1243\";\n                                    tempRegistrationBody.password = \"Raw@1244\";\n                                    tempRegistrationBody.password_confirmation = \"Raw@1244\";\n                                    api.put(apiURL)\n                                        .send(tempRegistrationBody)\n                                        .set('authtoken', authToken)\n                                        .expect(httpStatus.OK)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                tempRegistrationBody.oldpassword = \"Raw@1244\";\n                                                tempRegistrationBody.password = \"Raw@1234\";\n                                                tempRegistrationBody.password_confirmation = \"Raw@1234\";\n                                                api.put(apiURL)\n                                                    .send(tempRegistrationBody)\n                                                    .set('authtoken', authToken)\n                                                    .expect(httpStatus.BAD_REQUEST)\n                                                    .end(function(err, res) {\n                                                        if (err) {\n                                                            done(err);\n                                                        } else {\n                                                            res.body.error.message.should.equal(messageList.PASSWORD_REPEAT_ERROR);\n                                                            done();\n                                                        }\n                                                    });\n                                            }\n                                        });\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4181bd37-24c8-4885-be0c-22f6bbf14881",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should allowed to use first password on sixth time password reseting.",
                    "fullTitle": "Enterprise User User.SaveProfile Should allowed to use first password on sixth time password reseting.",
                    "timedOut": false,
                    "duration": 2589,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.oldpassword = \"Raw@1234\";\ntempRegistrationBody.password = \"Raw@1241\";\ntempRegistrationBody.password_confirmation = \"Raw@1241\";\ntempRegistrationBody.first_name = \"Amber\";\ntempRegistrationBody.last_name = \"More\";\napi.put(apiURL)\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            tempRegistrationBody.oldpassword = \"Raw@1241\";\n            tempRegistrationBody.password = \"Raw@1242\";\n            tempRegistrationBody.password_confirmation = \"Raw@1242\";\n            api.put(apiURL)\n                .send(tempRegistrationBody)\n                .set('authtoken', authToken)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        tempRegistrationBody.oldpassword = \"Raw@1242\";\n                        tempRegistrationBody.password = \"Raw@1243\";\n                        tempRegistrationBody.password_confirmation = \"Raw@1243\";\n                        api.put(apiURL)\n                            .send(tempRegistrationBody)\n                            .set('authtoken', authToken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    tempRegistrationBody.oldpassword = \"Raw@1243\";\n                                    tempRegistrationBody.password = \"Raw@1244\";\n                                    tempRegistrationBody.password_confirmation = \"Raw@1244\";\n                                    api.put(apiURL)\n                                        .send(tempRegistrationBody)\n                                        .set('authtoken', authToken)\n                                        .expect(httpStatus.OK)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                tempRegistrationBody.oldpassword = \"Raw@1244\";\n                                                tempRegistrationBody.password = \"Raw@1245\";\n                                                tempRegistrationBody.password_confirmation = \"Raw@1245\";\n                                                api.put(apiURL)\n                                                    .send(tempRegistrationBody)\n                                                    .set('authtoken', authToken)\n                                                    .expect(httpStatus.OK)\n                                                    .end(function(err, res) {\n                                                        if (err) {\n                                                            done(err);\n                                                        } else {\n                                                            tempRegistrationBody.oldpassword = \"Raw@1245\";\n                                                            tempRegistrationBody.password = \"Raw@1234\";\n                                                            tempRegistrationBody.password_confirmation = \"Raw@1234\";\n                                                            utils.encryptPassword(\"Raw@1234\").then(function(newPassHashed) {\n                                                                api.put(apiURL)\n                                                                    .send(tempRegistrationBody)\n                                                                    .set('authtoken', authToken)\n                                                                    .expect(httpStatus.OK)\n                                                                    .end(function(err, res) {\n                                                                        var isValid = typeof(res.body.output._id) == \"undefined\" &&\n                                                                            typeof(res.body.output.__v) == \"undefined\";\n                                                                        if (isValid) {\n                                                                            _models.User.findOne({ uid: res.body.output.uid }, function(error, user) {\n                                                                                if (error) {\n                                                                                    done(error);\n                                                                                } else if (user) {\n                                                                                    (user.password == newPassHashed).should.equal(true);\n                                                                                    done();\n                                                                                } else {\n                                                                                    false.should.equal(true);\n                                                                                    done();\n                                                                                }\n                                                                            });\n                                                                        } else {\n                                                                            isValid.should.equal(true);\n                                                                            done();\n                                                                        }\n                                                                    });\n                                                            });\n                                                        }\n                                                    });\n                                            }\n                                        });\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ce8d3fda-970e-4d40-9c7a-e980068fda73",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not allowed to update password, as old incorrect password provided.",
                    "fullTitle": "Enterprise User User.SaveProfile Should not allowed to update password, as old incorrect password provided.",
                    "timedOut": false,
                    "duration": 354,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.oldpassword = \"Raw@123\";\ntempRegistrationBody.password = \"raw@1235\";\ntempRegistrationBody.password_confirmation = tempRegistrationBody.password;\napi.put(apiURL)\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.USER_PROFILE_OLD_PASS_INCORRECT);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f76b9456-6b26-4cda-81f0-3ec436e82463",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not allowed to update password, as old and new password same.",
                    "fullTitle": "Enterprise User User.SaveProfile Should not allowed to update password, as old and new password same.",
                    "timedOut": false,
                    "duration": 43,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.oldpassword = tempRegistrationBody.password;\ntempRegistrationBody.password_confirmation = tempRegistrationBody.password;\napi.put(apiURL)\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.USER_CHANGE_PASS_OLD_PASS_PASS_NOT_BE_SAME);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ef21fc13-4e7e-46b3-abf0-cac5cffac443",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should update password for google login.",
                    "fullTitle": "Enterprise User User.SaveProfile Should update password for google login.",
                    "timedOut": false,
                    "duration": 524,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.oldpassword = tempRegistrationBody.password;\ntempRegistrationBody.password = \"raw@1235\";\ntempRegistrationBody.password_confirmation = tempRegistrationBody.password;\nutils.encryptPassword(tempRegistrationBody.password).then(function(newPassHashed) {\n    api.put(apiURL)\n        .send(tempRegistrationBody)\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                var isValid = typeof(res.body.output._id) == \"undefined\" &&\n                    typeof(res.body.output.__v) == \"undefined\";\n                if (isValid) {\n                    _models.User.findOne({ uid: res.body.output.uid }, function(error, user) {\n                        if (error) {\n                            done(error);\n                        } else if (user) {\n                            (user.password == newPassHashed).should.equal(true);\n                            done();\n                        } else {\n                            false.should.equal(true);\n                            done();\n                        }\n                    });\n                } else {\n                    isValid.should.equal(true);\n                    done();\n                }\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0b659809-69d6-441c-9a8e-d4daff7d90bc",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should save phone number with profile.",
                    "fullTitle": "Enterprise User User.SaveProfile Should save phone number with profile.",
                    "timedOut": false,
                    "duration": 101,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.phone = \"9619982150\";\n//tempRegistrationBody.country_code = \"91\";\ndelete tempRegistrationBody.password;\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\napi.put(apiURL)\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.phone == tempRegistrationBody.phone &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\";\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "71e1f225-2fbf-4b49-acc0-dc42b2b1f292",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should register phone number with authy.",
                    "fullTitle": "Enterprise User User.SaveProfile Should register phone number with authy.",
                    "timedOut": false,
                    "duration": 87,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.authy_number = \"9619982150\";\ntempRegistrationBody.country_code = \"91\";\ndelete tempRegistrationBody.password;\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\napi.put(apiURL)\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = tempRegistrationBody.authy_number == tempRegistrationBody.authy_number &&\n                res.body.output.enable_twofa == \"enable\" &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\";\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "dcb3ddc5-3efb-4a48-a91e-7f036a39bef6",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should de-register and then register same phone number with authy.",
                    "fullTitle": "Enterprise User User.SaveProfile Should de-register and then register same phone number with authy.",
                    "timedOut": false,
                    "duration": 173,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.authy_number = \"9619982150\";\ntempRegistrationBody.country_code = \"91\";\ndelete tempRegistrationBody.password;\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\napi.put(apiURL)\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var oldAuthyUserID = res.body.output.authy_user_uid;\n            commonMock.authyNumberChange(httpmock, \"enterprise\");\n            commonMock.authyDelete(httpmock, \"enterprise\");\n            api.put(apiURL)\n                .send(tempRegistrationBody)\n                .set('authtoken', authToken)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        var isValid =\n                            res.body.output.authy_user_uid == oldAuthyUserID &&\n                            (res.body.output.authy_user_uid || \"\") != \"\" &&\n                            (oldAuthyUserID || \"\") != \"\" &&\n                            res.body.output.enable_twofa == \"enable\" &&\n                            typeof(res.body.output._id) == \"undefined\" &&\n                            typeof(res.body.output.__v) == \"undefined\";\n                        isValid.should.equal(true);\n                        done();\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a94866d0-ddc0-48e8-810b-a33eaca14adf",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "496b1fc9-2439-4152-9459-28585fa0519b",
                  "edc9195e-6b3e-442e-8c02-d487384bb5cf",
                  "5e41407a-3ae8-43bb-b60a-0a88664dee0e",
                  "3a1ce75d-0d82-4806-80d1-147074a8f6d5",
                  "749831af-156a-463f-b43c-fb180d932e40",
                  "c9057da5-8519-402f-8081-7cd13f3a8ebf",
                  "1a6fe2f3-6096-43f7-85d8-d08931dd1422",
                  "d3648a15-8a21-4eef-90d1-9967e97f971e",
                  "4880b12b-fb91-4961-84ef-fb78654117e7",
                  "2cf73e7c-b151-4aba-bebd-fcf0fc15c186",
                  "9cce3fd9-ae91-4b89-b148-95eec50783db",
                  "fe152efc-cefd-4049-86c7-7e60bc4f47e2",
                  "cb422aa3-4f2e-4c34-a1db-a27c29ea759c",
                  "4181bd37-24c8-4885-be0c-22f6bbf14881",
                  "ce8d3fda-970e-4d40-9c7a-e980068fda73",
                  "f76b9456-6b26-4cda-81f0-3ec436e82463",
                  "ef21fc13-4e7e-46b3-abf0-cac5cffac443",
                  "0b659809-69d6-441c-9a8e-d4daff7d90bc",
                  "71e1f225-2fbf-4b49-acc0-dc42b2b1f292",
                  "dcb3ddc5-3efb-4a48-a91e-7f036a39bef6",
                  "a94866d0-ddc0-48e8-810b-a33eaca14adf"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 6991,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "60da0159-3957-4f20-aea0-0f834258af20",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\users\\search.enterprise.js",
        "file": "\\controllers\\test\\users\\search.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "a7f93309-9cb8-4997-ba18-81a5fbffe350",
            "title": "User",
            "fullFile": "D:\\api\\controllers\\test\\users\\search.enterprise.js",
            "file": "\\controllers\\test\\users\\search.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "7f078033-22fe-4713-bc90-39fac2fed05b",
                "title": "User.search",
                "fullFile": "D:\\api\\controllers\\test\\users\\search.enterprise.js",
                "file": "\\controllers\\test\\users\\search.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Enterprise User User.search \"before all\" hook",
                    "timedOut": false,
                    "duration": 622,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveRecords(function(error, output) {\n    commonMock.setSignUpMocks(httpmock, \"enterprise\");\n    api.post(\"/enterprise/v1/signup\")\n        .send(registrationBody)\n        .expect(httpStatus.CREATED)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                authToken = res.body.output.authtoken;\n                _id = res.body.output._id;\n                user_uid = res.body.output.uid;\n                email = res.body.output.email;\n                saveUserFlows({\n                    authtoken: authToken,\n                    user_uid: user_uid\n                }, function(error, flows) {\n                    saveBillEntries({\n                        authtoken: authToken,\n                        user_uid: user_uid,\n                        flow_uid: flows[0].uid\n                    }, function(error, billEntries) {\n                        saveTemplateEntries({\n                            authtoken: authToken,\n                            user_uid: user_uid\n                        }, function(error, billEntries) {\n                            done();\n                        });\n                    });\n                });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c42f4b18-b367-46ac-804b-5fef4c1a726c",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise User User.search \"after all\" hook",
                    "timedOut": false,
                    "duration": 25,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "removeRecords(function(error, output) {\n    if (error) {\n        done(error);\n    } else {\n        done();\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "668910cc-aa66-46aa-808a-7c27cbb13990",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User User.search \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "19e23251-25d7-4028-8e03-4f84b7c2ee2e",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should search within user's flows and templates.",
                    "fullTitle": "Enterprise User User.search Should search within user's flows and templates.",
                    "timedOut": false,
                    "duration": 54,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar paramURL = apiURL + \"?search=UNIT_TEST_1\";\napi.get(paramURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (Array.isArray(res.body.output)) {\n                isValid = res.body.output.length == 2;\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c2ff51b1-0138-4fe1-a36e-2f770fb1812c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise User User.search Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar paramURL = apiURL + \"?search=UNIT_TEST_1\";\napi.get(paramURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4f1c933f-d17f-4169-8438-b5e750a63801",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "c2ff51b1-0138-4fe1-a36e-2f770fb1812c",
                  "4f1c933f-d17f-4169-8438-b5e750a63801"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 66,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "8cfd1046-5961-4914-8845-bd3392ea7c59",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\users\\sendLeadActivityLog.enterprise.js",
        "file": "\\controllers\\test\\users\\sendLeadActivityLog.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "0eb57cac-e0b6-4897-9abc-45df865ed1b3",
            "title": "User",
            "fullFile": "D:\\api\\controllers\\test\\users\\sendLeadActivityLog.enterprise.js",
            "file": "\\controllers\\test\\users\\sendLeadActivityLog.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "969c3937-6823-4534-b713-5c88a158166a",
                "title": "User.sendLeadActivityLog",
                "fullFile": "D:\\api\\controllers\\test\\users\\sendLeadActivityLog.enterprise.js",
                "file": "\\controllers\\test\\users\\sendLeadActivityLog.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.sendLeadActivityLog \"before each\" hook",
                    "timedOut": false,
                    "duration": 164,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        userPlan = data.owner.user_plan;\n        adminUser = data.admin;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "229594c2-4573-4ca7-86aa-5e787288b2b8",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise User User.sendLeadActivityLog \"after all\" hook",
                    "timedOut": false,
                    "duration": 11,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    httpmock.cleanAll();\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f19f63a4-148a-4b9b-8157-81a3397d9185",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should log leads activity.",
                    "fullTitle": "Enterprise User User.sendLeadActivityLog Should log leads activity.",
                    "timedOut": false,
                    "duration": 26,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.marketoActivityLogging(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send({\n        \"event_id\": \"__flow_payment\",\n        \"event_data\": \"payment made.\",\n        \"email\": adminUser.email\n    })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.message.should.equal(messageList.LEAD_ACTIVITY_LOGGED);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0149dbdc-991f-4a6c-a72b-27f8d7ec05ad",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should log leads activity for second time.",
                    "fullTitle": "Enterprise User User.sendLeadActivityLog Should log leads activity for second time.",
                    "timedOut": false,
                    "duration": 36,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.marketoActivityLogging(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send({\n        \"event_id\": \"__flow_payment\",\n        \"event_data\": \"payment made.\",\n        \"email\": adminUser.email\n    })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            if (res.body.output.message == messageList.LEAD_ACTIVITY_LOGGED) {\n                commonMock.marketoActivityLogging(httpmock, \"enterprise\");\n                api.post(apiURL)\n                    .send({\n                        \"event_id\": \"__flow_payment\",\n                        \"event_data\": \"payment made.\",\n                        \"email\": adminUser.email\n                    })\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            res.body.output.message.should.equal(messageList.LEAD_ACTIVITY_LOGGED);\n                            done();\n                        }\n                    });\n            } else {\n                true.should.equal(false);\n                done();\n            }\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "053c6fe6-dbe6-4aa0-9083-6d8efbdc8810",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should log leads activity with organization.",
                    "fullTitle": "Enterprise User User.sendLeadActivityLog Should log leads activity with organization.",
                    "timedOut": false,
                    "duration": 18,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.marketoActivityLogging(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send({\n        \"event_id\": \"__flow_payment\",\n        \"event_data\": \"payment made.\",\n        \"email\": adminUser.email\n    })\n    .set('org_uid', org_uid)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.message.should.equal(messageList.LEAD_ACTIVITY_LOGGED);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e7abaeab-369b-4c93-a18b-9005a0cde7a5",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should log leads activity with organization for second time.",
                    "fullTitle": "Enterprise User User.sendLeadActivityLog Should log leads activity with organization for second time.",
                    "timedOut": false,
                    "duration": 44,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.marketoActivityLogging(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send({\n        \"event_id\": \"__flow_payment\",\n        \"event_data\": \"payment made.\",\n        \"email\": adminUser.email\n    })\n    .set('org_uid', org_uid)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            if (res.body.output.message == messageList.LEAD_ACTIVITY_LOGGED) {\n                commonMock.marketoActivityLogging(httpmock, \"enterprise\");\n                api.post(apiURL)\n                    .send({\n                        \"event_id\": \"__flow_payment\",\n                        \"event_data\": \"payment made.\",\n                        \"email\": adminUser.email\n                    })\n                    .set('org_uid', org_uid)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            res.body.output.message.should.equal(messageList.LEAD_ACTIVITY_LOGGED);\n                            done();\n                        }\n                    });\n            } else {\n                true.should.equal(false);\n                done();\n            }\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b31042b4-da0b-4b07-b5ce-c3608d9d348f",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "0149dbdc-991f-4a6c-a72b-27f8d7ec05ad",
                  "053c6fe6-dbe6-4aa0-9083-6d8efbdc8810",
                  "e7abaeab-369b-4c93-a18b-9005a0cde7a5",
                  "b31042b4-da0b-4b07-b5ce-c3608d9d348f"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 124,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "070be39e-ca33-4316-b18f-758e38a72d54",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\users\\updateActivationExpired.enterprise.js",
        "file": "\\controllers\\test\\users\\updateActivationExpired.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "c1a37267-84af-4230-bcad-9d70ee31a102",
            "title": "User",
            "fullFile": "D:\\api\\controllers\\test\\users\\updateActivationExpired.enterprise.js",
            "file": "\\controllers\\test\\users\\updateActivationExpired.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "05cdfbcf-066b-4bac-a13f-ade7d574cb07",
                "title": "User.updateActivationExpired",
                "fullFile": "D:\\api\\controllers\\test\\users\\updateActivationExpired.enterprise.js",
                "file": "\\controllers\\test\\users\\updateActivationExpired.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.updateActivationExpired \"before each\" hook",
                    "timedOut": false,
                    "duration": 242,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n    _models.Mail.remove({ $or: [{ to: new RegExp('^test.user+', \"i\") }, { to: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n        commonMock.setSignUpMocks(httpmock, \"enterprise\");\n        api.post(\"/enterprise/v1/signup\")\n            .send(registrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    authToken = res.body.output.authtoken;\n                    done();\n                }\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e6cc6773-fd19-488a-9f1c-34ad70a85681",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User User.updateActivationExpired \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "516ca298-8f64-4b13-ab66-6d63fbbaf752",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should expire account.",
                    "fullTitle": "Enterprise User User.updateActivationExpired Should expire account.",
                    "timedOut": false,
                    "duration": 39,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.activation_expired.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "770290f8-451b-423f-bcdf-5ce8e69a7e2c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise User User.updateActivationExpired Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3c3e34b8-07f9-41be-a940-41c33ef9df5c",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "770290f8-451b-423f-bcdf-5ce8e69a7e2c",
                  "3c3e34b8-07f9-41be-a940-41c33ef9df5c"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 48,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "c3131508-c732-4a51-96f6-08b6df197be0",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\users\\updateAutoRefresh.enterprise.js",
        "file": "\\controllers\\test\\users\\updateAutoRefresh.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "5b1a14bd-02bc-4067-a76b-451af902ecc4",
            "title": "User",
            "fullFile": "D:\\api\\controllers\\test\\users\\updateAutoRefresh.enterprise.js",
            "file": "\\controllers\\test\\users\\updateAutoRefresh.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "f601580f-2e97-4a43-a52e-3999234159b0",
                "title": "User.updateAutoRefresh",
                "fullFile": "D:\\api\\controllers\\test\\users\\updateAutoRefresh.enterprise.js",
                "file": "\\controllers\\test\\users\\updateAutoRefresh.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.updateAutoRefresh \"before each\" hook",
                    "timedOut": false,
                    "duration": 434,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n    _models.Mail.remove({ $or: [{ to: new RegExp('^test.user+', \"i\") }, { to: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n        _models.Authy.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n            commonMock.setSignUpMocks(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/signup\")\n                .send(registrationBody)\n                .expect(httpStatus.CREATED)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        authToken = res.body.output.authtoken;\n                        _id = res.body.output._id;\n                        apiURL = apiURL.replace(\":uid\", res.body.output.uid);\n                        done();\n                    }\n                });\n        });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7f704f6f-6902-40d0-89dd-902a5639e1ea",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User User.updateAutoRefresh \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f7a172b5-b35b-4a15-aa3d-fe8b1327aa8b",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should update auto_refresh to true.",
                    "fullTitle": "Enterprise User User.updateAutoRefresh Should update auto_refresh to true.",
                    "timedOut": false,
                    "duration": 37,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.put(apiURL)\n    .send({\n        auto_refresh: true\n    })\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.auto_refresh.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0bb03fc5-79ae-4e1a-9960-8183e9cc6268",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should update auto_refresh to true.",
                    "fullTitle": "Enterprise User User.updateAutoRefresh Should update auto_refresh to true.",
                    "timedOut": false,
                    "duration": 40,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.put(apiURL)\n    .send({\n        auto_refresh: \"true1\"\n    })\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.auto_refresh.message.should.equal(messageList.AUTO_REFRESH_SHOULD_BE_BOOLEAN);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "76e066b6-98c6-42df-a22a-13044fb59304",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error for invalid auto_refresh flag in old api.",
                    "fullTitle": "Enterprise User User.updateAutoRefresh Should give error for invalid auto_refresh flag in old api.",
                    "timedOut": false,
                    "duration": 33,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(\"/autorefresh\")\n    .send({\n        data: \"true1\"\n    })\n    .set('authtoken', authToken)\n    .set('driver', \"enterprise\")\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.data.message.should.equal(messageList.AUTO_REFRESH_SHOULD_BE_BOOLEAN);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9fa4683f-860b-47b2-bd8c-820aaa814388",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise User User.updateAutoRefresh Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.put(apiURL)\n    .send({\n        auto_refresh: true\n    })\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "797fcb20-e14e-49fe-b971-8392e6aff6be",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "0bb03fc5-79ae-4e1a-9960-8183e9cc6268",
                  "76e066b6-98c6-42df-a22a-13044fb59304",
                  "9fa4683f-860b-47b2-bd8c-820aaa814388",
                  "797fcb20-e14e-49fe-b971-8392e6aff6be"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 118,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "3401dd76-ba2b-4290-a778-64be43038f48",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\users\\updateAvatar.enterprise.js",
        "file": "\\controllers\\test\\users\\updateAvatar.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "055d1412-5504-4228-a5e6-2007b36ce588",
            "title": "User",
            "fullFile": "D:\\api\\controllers\\test\\users\\updateAvatar.enterprise.js",
            "file": "\\controllers\\test\\users\\updateAvatar.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "fa4e7319-2d9e-4e99-b419-a411a3c19c01",
                "title": "User.updateAvatar",
                "fullFile": "D:\\api\\controllers\\test\\users\\updateAvatar.enterprise.js",
                "file": "\\controllers\\test\\users\\updateAvatar.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.updateAvatar \"before each\" hook",
                    "timedOut": false,
                    "duration": 252,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n    _models.Mail.remove({ $or: [{ to: new RegExp('^test.user+', \"i\") }, { to: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n        commonMock.setSignUpMocks(httpmock, \"enterprise\");\n        api.post(\"/enterprise/v1/signup\")\n            .send(registrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    authToken = res.body.output.authtoken;\n                    user_uid = res.body.output.uid;\n                    _id = res.body.output._id;\n                    done();\n                }\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ef0f4a3f-f2f8-48cd-a142-2287a1bb52c2",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User User.updateAvatar \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "dfe218aa-a180-4ac4-8e82-97697a77d21e",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should update avatar.",
                    "fullTitle": "Enterprise User User.updateAvatar Should update avatar.",
                    "timedOut": false,
                    "duration": 54,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.myCroppedImage = \"/img/user-img2.png\";\nserver.agents[\"enterprise\"].s3.UploadAvatar = function(options, callback) {\n    callback(null, {\n        ETag: \"sdfdsf35s6dfsdfdsf6565656565655665\"\n    });\n};\nserver.agents[\"enterprise\"].s3.DownloadAvatar = function(options, callback) {\n    callback(null, tempRegistrationBody.myCroppedImage);\n};\napi.put(apiURL)\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.avatar.should.equal(tempRegistrationBody.myCroppedImage);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c764326c-aad3-4502-a02a-7e40367b5747",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should update avatar twice.",
                    "fullTitle": "Enterprise User User.updateAvatar Should update avatar twice.",
                    "timedOut": false,
                    "duration": 84,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.myCroppedImage = \"/img/user-img2.png\";\nserver.agents[\"enterprise\"].s3.UploadAvatar = function(options, callback) {\n    callback(null, {\n        ETag: \"sdfdsf35s6dfsdfdsf6565656565655665\"\n    });\n};\nserver.agents[\"enterprise\"].s3.DownloadAvatar = function(options, callback) {\n    callback(null, tempRegistrationBody.myCroppedImage);\n};\napi.put(apiURL)\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var temp2RegistrationBody = global.getImmutable(registrationBody);\n            temp2RegistrationBody.myCroppedImage = \"/img/user-img3.png\";\n            server.agents[\"enterprise\"].s3.DownloadAvatar = function(options, callback) {\n                callback(null, temp2RegistrationBody.myCroppedImage);\n            };\n            api.put(apiURL)\n                .send(temp2RegistrationBody)\n                .set('authtoken', authToken)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        res.body.output.avatar.should.equal(temp2RegistrationBody.myCroppedImage);\n                        done();\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "dd870994-2bc2-4532-8998-a87fedd9ebdd",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should update avatar trice.",
                    "fullTitle": "Enterprise User User.updateAvatar Should update avatar trice.",
                    "timedOut": false,
                    "duration": 127,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.myCroppedImage = \"/img/user-img2.png\";\nserver.agents[\"enterprise\"].s3.UploadAvatar = function(options, callback) {\n    callback(null, {\n        ETag: \"sdfdsf35s6dfsdfdsf6565656565655665\"\n    });\n};\nserver.agents[\"enterprise\"].s3.DownloadAvatar = function(options, callback) {\n    callback(null, tempRegistrationBody.myCroppedImage);\n};\napi.put(apiURL)\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var temp2RegistrationBody = global.getImmutable(registrationBody);\n            temp2RegistrationBody.myCroppedImage = \"/img/user-img3.png\";\n            server.agents[\"enterprise\"].s3.DownloadAvatar = function(options, callback) {\n                callback(null, temp2RegistrationBody.myCroppedImage);\n            };\n            api.put(apiURL)\n                .send(temp2RegistrationBody)\n                .set('authtoken', authToken)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        var temp3RegistrationBody = global.getImmutable(registrationBody);\n                        temp3RegistrationBody.myCroppedImage = \"/img/user-img4.png\";\n                        server.agents[\"enterprise\"].s3.DownloadAvatar = function(options, callback) {\n                            callback(null, temp3RegistrationBody.myCroppedImage);\n                        };\n                        api.put(apiURL)\n                            .send(temp3RegistrationBody)\n                            .set('authtoken', authToken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    res.body.output.avatar.should.equal(temp3RegistrationBody.myCroppedImage);\n                                    done();\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b430bbf6-d4e1-496e-8639-969411ac239b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise User User.updateAvatar Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.myCroppedImage = \"/img/user-img2.png\";\nserver.agents[\"enterprise\"].s3.UploadAvatar = function(options, callback) {\n    callback(null, {\n        ETag: \"sdfdsf35s6dfsdfdsf6565656565655665\"\n    });\n};\nserver.agents[\"enterprise\"].s3.DownloadAvatar = function(options, callback) {\n    callback(null, tempRegistrationBody.myCroppedImage);\n};\napi.put(apiURL)\n    .send(tempRegistrationBody)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9ca5f4f0-f864-4b94-8eaf-fde6809a944b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should able to remove avatar.",
                    "fullTitle": "Enterprise User User.updateAvatar Should able to remove avatar.",
                    "timedOut": false,
                    "duration": 48,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar defaultImage = \"https://example.com/region/fl0e7d7815746566ce65a2ae?v=f0491af1-cdf3-11e8-a60a-f340282cec93\";\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.avatar = null;\nserver.agents[\"enterprise\"].s3.UploadAvatar = function(options, callback) {\n    callback(null, {\n        ETag: \"sdfdsf35s6dfsdfdsf6565656565655665\"\n    });\n};\nserver.agents[\"enterprise\"].s3.DownloadAvatar = function(options, callback) {\n    callback(null, defaultImage);\n};\napi.put(apiURL)\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.avatar.should.equal(defaultImage);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6da03ea1-2dcd-4643-b0b0-9e7358673c18",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "c764326c-aad3-4502-a02a-7e40367b5747",
                  "dd870994-2bc2-4532-8998-a87fedd9ebdd",
                  "b430bbf6-d4e1-496e-8639-969411ac239b",
                  "9ca5f4f0-f864-4b94-8eaf-fde6809a944b",
                  "6da03ea1-2dcd-4643-b0b0-9e7358673c18"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 322,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "2ad45c19-d80b-49d0-a84f-e86f406231c5",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\users\\updateCanvasTourUser.enterprise.js",
        "file": "\\controllers\\test\\users\\updateCanvasTourUser.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "b0454eca-c9c9-4f57-b0ac-cfbac361872f",
            "title": "User.updateCanvasTour",
            "fullFile": "D:\\api\\controllers\\test\\users\\updateCanvasTourUser.enterprise.js",
            "file": "\\controllers\\test\\users\\updateCanvasTourUser.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise User.updateCanvasTour \"before all\" hook",
                "timedOut": false,
                "duration": 239,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(userTrigger, cbk) {\n        commonMock.setSignUpMocks(httpmock, \"enterprise\");\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        dummyUser = res.body.output;\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "30a0a591-7ca7-4078-ba5c-8f44f8f2b8b2",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after each\" hook",
                "fullTitle": "Enterprise User.updateCanvasTour \"after each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "httpmock.cleanAll();\ndone();",
                "err": {},
                "isRoot": false,
                "uuid": "9d461023-9573-418d-9d1c-5e900492108b",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise User.updateCanvasTour Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "319df35e-7869-4c9e-b1a1-702cd38cb0d3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should set \"canvas_first_tour\" to true.",
                "fullTitle": "Enterprise User.updateCanvasTour Should set \"canvas_first_tour\" to true.",
                "timedOut": false,
                "duration": 45,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.canvas_first_tour;\n            isValid = isValid &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\";\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "e514a6aa-0231-4e7f-bd59-50e6563776d0",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "319df35e-7869-4c9e-b1a1-702cd38cb0d3",
              "e514a6aa-0231-4e7f-bd59-50e6563776d0"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 53,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "e819a55c-3a8d-4870-9781-372d2f3b9d3b",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\users\\updateLastSeen.enterprise.js",
        "file": "\\controllers\\test\\users\\updateLastSeen.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "3493cd86-25d9-49e5-9a61-f6b215e1d465",
            "title": "User",
            "fullFile": "D:\\api\\controllers\\test\\users\\updateLastSeen.enterprise.js",
            "file": "\\controllers\\test\\users\\updateLastSeen.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "06fb08dc-c7f0-4225-8aa4-8880cc7f598f",
                "title": "User.updateLastSeen",
                "fullFile": "D:\\api\\controllers\\test\\users\\updateLastSeen.enterprise.js",
                "file": "\\controllers\\test\\users\\updateLastSeen.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.updateLastSeen \"before each\" hook",
                    "timedOut": false,
                    "duration": 229,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n    _models.Mail.remove({ $or: [{ to: new RegExp('^test.user+', \"i\") }, { to: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n        _models.Authy.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n            commonMock.setSignUpMocks(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/signup\")\n                .send(registrationBody)\n                .expect(httpStatus.CREATED)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        authToken = res.body.output.authtoken;\n                        _id = res.body.output._id;\n                        apiURL = apiURL.replace(\":uid\", res.body.output.uid);\n                        done();\n                    }\n                });\n        });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "13a6f363-f8da-430f-9abf-e8fbfdf7caab",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User User.updateLastSeen \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a068ae30-4141-4d58-a433-11d4796abeb9",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should update when last announcements seen.",
                    "fullTitle": "Enterprise User User.updateLastSeen Should update when last announcements seen.",
                    "timedOut": false,
                    "duration": 68,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar dt = (new Date()).toISOString();\napi.post(apiURL)\n    .send({\n        timestamp: dt\n    })\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.last_product_announcement_seen.should.equal(dt);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "73544497-3dac-4042-b1ab-9725e172e621",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise User User.updateLastSeen Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .send({\n        auto_refresh: true\n    })\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7a1d4c2b-0d2a-4dd3-a270-5f78dc2ac559",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "73544497-3dac-4042-b1ab-9725e172e621",
                  "7a1d4c2b-0d2a-4dd3-a270-5f78dc2ac559"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 78,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "9092b315-f945-4ed2-88ca-15281ac92d5a",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\users\\validateToken.enterprise.js",
        "file": "\\controllers\\test\\users\\validateToken.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "1a61e22a-ef10-42c8-9116-35e071cc6d5b",
            "title": "User",
            "fullFile": "D:\\api\\controllers\\test\\users\\validateToken.enterprise.js",
            "file": "\\controllers\\test\\users\\validateToken.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "422c20fa-c410-4c03-be37-8e5ee6ced532",
                "title": "User.validateToken",
                "fullFile": "D:\\api\\controllers\\test\\users\\validateToken.enterprise.js",
                "file": "\\controllers\\test\\users\\validateToken.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.validateToken \"before each\" hook",
                    "timedOut": false,
                    "duration": 235,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n    _models.Mail.remove({ $or: [{ to: new RegExp('^test.user+', \"i\") }, { to: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n        _models.Authy.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n            commonMock.setSignUpMocks(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/signup\")\n                .send(registrationBody)\n                .expect(httpStatus.CREATED)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        authToken = res.body.output.authtoken;\n                        activationToken = res.body.output.activation_token;\n                        user_uid = res.body.output.uid;\n                        _id = res.body.output._id;\n                        apiURL = apiURL.replace(\":uid\", res.body.output.uid);\n                        done();\n                    }\n                });\n        });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "76188be8-f967-4d20-b38d-cb8b2365c58f",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User User.validateToken \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "90255ba0-da93-4e6a-b2d2-ef201a715212",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should validate valid reset password token.",
                    "fullTitle": "Enterprise User User.validateToken Should validate valid reset password token.",
                    "timedOut": false,
                    "duration": 94,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(\"/enterprise/v1/user/activate\")\n    .send({\n        user_uid: user_uid,\n        token: activationToken\n    })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            commonMock.captchaVerification(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/forgotpassword\")\n                .send({\n                    email: registrationBody.email,\n                    captcha_code: captchaCode\n                })\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        commonMock.brainTreeClientToken(httpmock, \"enterprise\");\n                        api.get(\"/enterprise/v1/user\")\n                            .set('authtoken', authToken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    var options = {\n                                        \"token\": res.body.output.password_token || \"\"\n                                    };\n                                    api.post(apiURL.replace(\":token_type\", \"resetpassword\"))\n                                        .send(options)\n                                        .expect(httpStatus.OK)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                res.body.output.message.should.equal(messageList.VALID_RESET_PASSWORD_TOKEN);\n                                                done();\n                                            }\n                                        });\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "56ede563-e3e8-40f7-a366-2308a8f6de3c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as invalid reset password token.",
                    "fullTitle": "Enterprise User User.validateToken Should give error as invalid reset password token.",
                    "timedOut": false,
                    "duration": 263,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(\"/enterprise/v1/user/activate\")\n    .send({\n        user_uid: user_uid,\n        token: activationToken\n    })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            commonMock.captchaVerification(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/forgotpassword\")\n                .send({\n                    email: registrationBody.email,\n                    captcha_code: captchaCode\n                })\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        commonMock.brainTreeClientToken(httpmock, \"enterprise\");\n                        api.get(\"/enterprise/v1/user\")\n                            .set('authtoken', authToken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    var options = {\n                                        password: \"Raw@12345\",\n                                        password_confirmation: \"Raw@12345\",\n                                        captcha_code: captchaCode,\n                                        token: res.body.output.password_token || \"\"\n                                    };\n                                    commonMock.captchaVerification(httpmock, \"enterprise\");\n                                    api.post(\"/enterprise/v1/resetpassword\")\n                                        .send(options)\n                                        .expect(httpStatus.OK)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                api.post(apiURL.replace(\":token_type\", \"resetpassword\"))\n                                                    .send({\n                                                        token: options.token || \"\"\n                                                    })\n                                                    .expect(httpStatus.BAD_REQUEST)\n                                                    .end(function(err, res) {\n                                                        if (err) {\n                                                            done(err);\n                                                        } else {\n                                                            res.body.error.message.should.equal(messageList.INVALID_RESET_PASSWORD_TOKEN);\n                                                            done();\n                                                        }\n                                                    });\n                                            }\n                                        });\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fdf55ba9-dfaa-4c2c-9cd1-82a5302ad929",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as invalid token type.",
                    "fullTitle": "Enterprise User User.validateToken Should give error as invalid token type.",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL.replace(\":token_type\", \"FAKE\"))\n    .send({\n        token: \"FAKE\"\n    })\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.INVALID_TOKEN_TYPE);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5ff37c63-fb91-46a3-bd19-9d0f4bb51c1b",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "56ede563-e3e8-40f7-a366-2308a8f6de3c",
                  "fdf55ba9-dfaa-4c2c-9cd1-82a5302ad929",
                  "5ff37c63-fb91-46a3-bd19-9d0f4bb51c1b"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 366,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "bcb6ec15-200e-45ef-b714-c3e5af267c2f",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\users\\verifyAuthy.enterprise.js",
        "file": "\\controllers\\test\\users\\verifyAuthy.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "962a59f6-7fcc-497d-90d9-f6d298d4aa05",
            "title": "User",
            "fullFile": "D:\\api\\controllers\\test\\users\\verifyAuthy.enterprise.js",
            "file": "\\controllers\\test\\users\\verifyAuthy.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "7acb2f60-f82d-4cfc-8f23-b87b2a4def6f",
                "title": "User.verifyAuthy",
                "fullFile": "D:\\api\\controllers\\test\\users\\verifyAuthy.enterprise.js",
                "file": "\\controllers\\test\\users\\verifyAuthy.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.verifyAuthy \"before each\" hook",
                    "timedOut": false,
                    "duration": 471,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({ deleted_at: null }, function(error, user) {\n    _models.Mail.remove({ deleted_at: null }, function(error, user) {\n        _models.Authy.remove({ deleted_at: null }, function(error, user) {\n            commonMock.setSignUpMocks(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/signup\")\n                .send(registrationBody)\n                .expect(httpStatus.CREATED)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        authToken = res.body.output.authtoken;\n                        _id = res.body.output._id;\n                        uid = res.body.output.uid;\n                        var tempRegistrationBody = global.getImmutable(registrationBody);\n                        tempRegistrationBody.email = secondUserEmail;\n                        commonMock.setSignUpMocks(httpmock, \"enterprise\", {\n                            email: tempRegistrationBody.email\n                        });\n                        api.post(\"/enterprise/v1/signup\")\n                            .send(tempRegistrationBody)\n                            .expect(httpStatus.CREATED)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    secondAuthToken = res.body.output.authtoken;\n                                    secondId = res.body.output._id;\n                                    done();\n                                }\n                            });\n                    }\n                });\n        });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2a493075-0898-4224-8166-113ec42164b7",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User User.verifyAuthy \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0be70526-6f18-43fa-a1c8-58790d0bf70d",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should verify OTP.",
                    "fullTitle": "Enterprise User User.verifyAuthy Should verify OTP.",
                    "timedOut": false,
                    "duration": 235,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.authy_number = \"9619982150\";\ntempRegistrationBody.country_code = \"91\";\ndelete tempRegistrationBody.password;\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\napi.put(\"/enterprise/v1/user\")\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var authy_userId = res.body.output.authy_user_uid;\n            commonMock.authySMSVerification(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/authy/sms\")\n                .send({\n                    authy_id: authy_userId\n                })\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                        api.post(\"/enterprise/v1/authy/verifyotp\")\n                            .send({\n                                authy_user_uid: authy_userId,\n                                token: otpBody.token,\n                                option_selected: \"otp\"\n                            })\n                            .set('authtoken', authToken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                                    _models.User.findOne({\n                                        authy_user_uid: authy_userId\n                                    }, function(error, user) {\n                                        var authtoken = [\"\"].concat(user.authtoken);\n                                        _models.User.findOneAndUpdate({\n                                            uid: user.uid\n                                        }, {\n                                            authtoken: authtoken\n                                        }, {\n                                            new: true\n                                        }, function(error, user) {\n                                            api.post(apiURL)\n                                                .send({\n                                                    authy_user_uid: authy_userId,\n                                                    token: otpBody.token\n                                                })\n                                                .set('authtoken', authToken)\n                                                .expect(httpStatus.OK)\n                                                .end(function(err, res) {\n                                                    if (err) {\n                                                        done(err);\n                                                    } else {\n                                                        var isValid = res.body.output.is_twofa_sms_enabled.should &&\n                                                            typeof(res.body.output.plan[0]._id) == \"undefined\" &&\n                                                            typeof(res.body.output.plan[0].__v) == \"undefined\" &&\n                                                            res.body.output.authtoken != \"\";\n                                                        if (isValid) {\n                                                            _.each(res.body.output.plan[0].features, function(item) {\n                                                                isValid = isValid &&\n                                                                    typeof(item._id) == \"undefined\" &&\n                                                                    typeof(item.__v) == \"undefined\";\n                                                            });\n                                                        }\n                                                        isValid.should.equal(true);\n                                                        done();\n                                                    }\n                                                });\n                                        });\n                                    });\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e37a2355-c722-41c9-a489-dd099fcae62f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should verify OTP for user in 2FA disable enterprise user exist.",
                    "fullTitle": "Enterprise User User.verifyAuthy Should verify OTP for user in 2FA disable enterprise user exist.",
                    "timedOut": false,
                    "duration": 559,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.brainTreeClientToken(httpmock, \"enterprise\");\ncommonMock.setSignUpMocks(httpmock, \"enterprise\", {\n    email: registrationBody.email\n});\n\napi.post(\"/enterprise/v1/login\")\n    .send({\n        \"email\": registrationBody.email,\n        \"password\": registrationBody.password,\n    })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var enterpriseAuthToken = res.body.output.authtoken;\n            var tempRegistrationBody = global.getImmutable(registrationBody);\n            tempRegistrationBody.authy_number = \"9619982150\";\n            tempRegistrationBody.country_code = \"91\";\n            delete tempRegistrationBody.password;\n            commonMock.authyNumberChange(httpmock, \"enterprise\");\n            commonMock.authyDelete(httpmock, \"enterprise\");\n            api.put(\"/enterprise/v1/user\")\n                .send(tempRegistrationBody)\n                .set('authtoken', enterpriseAuthToken)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        commonMock.authyNumberChange(httpmock, \"enterprise\");\n                        commonMock.authyDelete(httpmock, \"enterprise\");\n                        api.put(\"/enterprise/v1/user\")\n                            .send(tempRegistrationBody)\n                            .set('authtoken', authToken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    var authy_userId = res.body.output.authy_user_uid;\n                                    commonMock.authySMSVerification(httpmock, \"enterprise\");\n                                    api.post(\"/enterprise/v1/authy/sms\")\n                                        .send({\n                                            authy_id: authy_userId\n                                        })\n                                        .expect(httpStatus.OK)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                                                api.post(\"/enterprise/v1/authy/verifyotp\")\n                                                    .send({\n                                                        authy_user_uid: authy_userId,\n                                                        token: otpBody.token,\n                                                        option_selected: \"otp\"\n                                                    })\n                                                    .set('authtoken', authToken)\n                                                    .expect(httpStatus.OK)\n                                                    .end(function(err, res) {\n                                                        if (err) {\n                                                            done(err);\n                                                        } else {\n                                                            commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                                                            api.post(apiURL)\n                                                                .send({\n                                                                    authy_user_uid: authy_userId,\n                                                                    token: otpBody.token\n                                                                })\n                                                                .set('authtoken', authToken)\n                                                                .expect(httpStatus.OK)\n                                                                .end(function(err, res) {\n                                                                    if (err) {\n                                                                        done(err);\n                                                                    } else {\n                                                                        var isValid = res.body.output.is_twofa_sms_enabled.should &&\n                                                                            typeof(res.body.output.plan[0]._id) == \"undefined\" &&\n                                                                            typeof(res.body.output.plan[0].__v) == \"undefined\";\n                                                                        if (isValid) {\n                                                                            _.each(res.body.output.plan[0].features, function(item) {\n                                                                                isValid = isValid &&\n                                                                                    typeof(item._id) == \"undefined\" &&\n                                                                                    typeof(item.__v) == \"undefined\";\n                                                                            });\n                                                                        }\n                                                                        isValid.should.equal(true);\n                                                                        done();\n                                                                    }\n                                                                });\n                                                        }\n                                                    });\n                                            }\n                                        });\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "13610af3-774e-4207-9fc6-4250e9599649",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get default plan for verify OTP.",
                    "fullTitle": "Enterprise User User.verifyAuthy Should get default plan for verify OTP.",
                    "timedOut": false,
                    "duration": 219,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.authy_number = \"9619982150\";\ntempRegistrationBody.country_code = \"91\";\ndelete tempRegistrationBody.password;\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\napi.put(\"/enterprise/v1/user\")\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var authy_userId = res.body.output.authy_user_uid;\n            commonMock.authySMSVerification(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/authy/sms\")\n                .send({\n                    authy_id: authy_userId\n                })\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                        api.post(\"/enterprise/v1/authy/verifyotp\")\n                            .send({\n                                authy_user_uid: authy_userId,\n                                token: otpBody.token,\n                                option_selected: \"otp\"\n                            })\n                            .set('authtoken', authToken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                                    api.post(apiURL)\n                                        .send({\n                                            authy_user_uid: authy_userId,\n                                            token: otpBody.token\n                                        })\n                                        .set('authtoken', authToken)\n                                        .expect(httpStatus.OK)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                var isValid = false;\n                                                if (res.body.output.plan.length == 1) {\n                                                    var defaultPlan = _.first(_.filter(server.plan.list, function(plan) {\n                                                        //return (plan || {}).enterprise_plan || false;\n                                                        return ((plan || {}).plan_type || \"\") == \"enterprise\";\n                                                    })) || {};\n                                                    defaultPlan = utils.skipAttr(convert.getJSON(defaultPlan));\n                                                    isValid = res.body.output.plan[0].uid == defaultPlan.uid;\n                                                }\n                                                isValid.should.equal(true);\n                                                done();\n                                            }\n                                        });\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b070617f-b8e4-4e17-be26-16d42623466f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get default attributes for verify OTP.",
                    "fullTitle": "Enterprise User User.verifyAuthy Should get default attributes for verify OTP.",
                    "timedOut": false,
                    "duration": 218,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.authy_number = \"9619982150\";\ntempRegistrationBody.country_code = \"91\";\ndelete tempRegistrationBody.password;\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\napi.put(\"/enterprise/v1/user\")\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var authy_userId = res.body.output.authy_user_uid;\n            commonMock.authySMSVerification(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/authy/sms\")\n                .send({\n                    authy_id: authy_userId\n                })\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                        api.post(\"/enterprise/v1/authy/verifyotp\")\n                            .send({\n                                authy_user_uid: authy_userId,\n                                token: otpBody.token,\n                                option_selected: \"otp\"\n                            })\n                            .set('authtoken', authToken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                                    api.post(apiURL)\n                                        .send({\n                                            authy_user_uid: authy_userId,\n                                            token: otpBody.token\n                                        })\n                                        .set('authtoken', authToken)\n                                        .expect(httpStatus.OK)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                var isValid = false;\n                                                if (res.body.output.plan.length == 1) {\n                                                    isValid = utils.isHaveKeyVals(res.body.output, [\n                                                            \"first_name\", \"flow_uid\", \"job_title\", \"last_name\", \"locale\",\n                                                            \"merchantid\", \"payment_set\", \"subscription\"\n                                                        ]) &&\n                                                        res.body.output.subscription.days == server.plan.enterprise.TrialPeriod &&\n                                                        moment(new Date(res.body.output.subscription.start_date)).format(\"YYYY-MM-DD\") ==\n                                                        moment(new Date()).format(\"YYYY-MM-DD\");\n                                                }\n                                                isValid.should.equal(true);\n                                                done();\n                                            }\n                                        });\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "00e7a9f7-66a7-410c-99a2-1cde446a1ee7",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as authy need to verified before using twofa.",
                    "fullTitle": "Enterprise User User.verifyAuthy Should give error as authy need to verified before using twofa.",
                    "timedOut": false,
                    "duration": 160,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.authy_number = \"9619982150\";\ntempRegistrationBody.country_code = \"91\";\ndelete tempRegistrationBody.password;\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\napi.put(\"/enterprise/v1/user\")\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var authy_userId = res.body.output.authy_user_uid;\n            commonMock.authySMSVerification(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/authy/sms\")\n                .send({\n                    authy_id: authy_userId\n                })\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                        api.post(apiURL)\n                            .send({\n                                authy_user_uid: authy_userId,\n                                token: otpBody.token\n                            })\n                            .set('authtoken', authToken)\n                            .expect(httpStatus.BAD_REQUEST)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    res.body.error.message.should.equal(messageList.NEED_TO_VERIFY_2FA);\n                                    done();\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6b33b792-c49c-4827-a527-1b773968cc22",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should reset login fail count.",
                    "fullTitle": "Enterprise User User.verifyAuthy Should reset login fail count.",
                    "timedOut": false,
                    "duration": 263,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.authy_number = \"9619982150\";\ntempRegistrationBody.country_code = \"91\";\ndelete tempRegistrationBody.password;\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\n_models.User.findOneAndUpdate({ uid: uid }, { failed_login_count: 0 }, function(error, user) {\n    api.put(\"/enterprise/v1/user\")\n        .send(tempRegistrationBody)\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                var authy_userId = res.body.output.authy_user_uid;\n                commonMock.authySMSVerification(httpmock, \"enterprise\");\n                api.post(\"/enterprise/v1/authy/sms\")\n                    .send({\n                        authy_id: authy_userId\n                    })\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                            api.post(\"/enterprise/v1/authy/verifyotp\")\n                                .send({\n                                    authy_user_uid: authy_userId,\n                                    token: otpBody.token,\n                                    option_selected: \"otp\"\n                                })\n                                .set('authtoken', authToken)\n                                .expect(httpStatus.OK)\n                                .end(function(err, res) {\n                                    if (err) {\n                                        done(err);\n                                    } else {\n                                        commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                                        api.post(apiURL)\n                                            .send({\n                                                authy_user_uid: authy_userId,\n                                                token: otpBody.token\n                                            })\n                                            .set('authtoken', authToken)\n                                            .expect(httpStatus.OK)\n                                            .end(function(err, res) {\n                                                if (err) {\n                                                    done(err);\n                                                } else {\n                                                    var isValid = res.body.output.is_twofa_sms_enabled &&\n                                                        res.body.output.failed_login_count == 0 &&\n                                                        typeof(res.body.output.plan[0]._id) == \"undefined\" &&\n                                                        typeof(res.body.output.plan[0].__v) == \"undefined\";\n                                                    if (isValid) {\n                                                        _.each(res.body.output.plan[0].features, function(item) {\n                                                            isValid = isValid &&\n                                                                typeof(item._id) == \"undefined\" &&\n                                                                typeof(item.__v) == \"undefined\";\n                                                        });\n                                                    }\n                                                    isValid.should.equal(true);\n                                                    done();\n                                                }\n                                            });\n                                    }\n                                });\n                        }\n                    });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "183596c3-d451-403c-bdd0-54b38b95eebc",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should verify authy, by email and token.",
                    "fullTitle": "Enterprise User User.verifyAuthy Should verify authy, by email and token.",
                    "timedOut": false,
                    "duration": 230,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.authy_number = \"9619982150\";\ntempRegistrationBody.country_code = \"91\";\ntempRegistrationBody.email = secondUserEmail;\ndelete tempRegistrationBody.password;\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\napi.put(\"/enterprise/v1/user\")\n    .send(tempRegistrationBody)\n    .set('authtoken', secondAuthToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            commonMock.authySMSVerification(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/authy/sms\")\n                .send({\n                    email: tempRegistrationBody.email\n                })\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                        api.post(\"/enterprise/v1/authy/verifyotp\")\n                            .send({\n                                email: tempRegistrationBody.email,\n                                token: otpBody.token,\n                                option_selected: \"otp\"\n                            })\n                            .set('authtoken', authToken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                                    api.post(apiURL)\n                                        .send({\n                                            email: tempRegistrationBody.email,\n                                            token: otpBody.token\n                                        })\n                                        .set('authtoken', authToken)\n                                        .expect(httpStatus.OK)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                var isValid = tempRegistrationBody.email == res.body.output.email &&\n                                                    res.body.output.is_twofa_sms_enabled &&\n                                                    typeof(res.body.output.plan[0]._id) == \"undefined\" &&\n                                                    typeof(res.body.output.plan[0].__v) == \"undefined\";\n                                                if (isValid) {\n                                                    _.each(res.body.output.plan[0].features, function(item) {\n                                                        isValid = isValid &&\n                                                            typeof(item._id) == \"undefined\" &&\n                                                            typeof(item.__v) == \"undefined\";\n                                                    });\n                                                }\n                                                isValid.should.equal(true);\n                                                done();\n                                            }\n                                        });\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "61fd355d-662e-4a23-8fa4-a5a2043673b7",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "e37a2355-c722-41c9-a489-dd099fcae62f",
                  "13610af3-774e-4207-9fc6-4250e9599649",
                  "b070617f-b8e4-4e17-be26-16d42623466f",
                  "00e7a9f7-66a7-410c-99a2-1cde446a1ee7",
                  "6b33b792-c49c-4827-a527-1b773968cc22",
                  "183596c3-d451-403c-bdd0-54b38b95eebc",
                  "61fd355d-662e-4a23-8fa4-a5a2043673b7"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 1884,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "dd342d56-2f12-4cdc-b94e-0f0917b99c38",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\users\\verifyAuthyForGoogle.enterprise.js",
        "file": "\\controllers\\test\\users\\verifyAuthyForGoogle.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "57862d3a-2b9e-482a-b983-f82d231009d4",
            "title": "User",
            "fullFile": "D:\\api\\controllers\\test\\users\\verifyAuthyForGoogle.enterprise.js",
            "file": "\\controllers\\test\\users\\verifyAuthyForGoogle.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "3a0a3695-0f42-4735-be66-810935072ed1",
                "title": "User.verifyAuthyForGoogle",
                "fullFile": "D:\\api\\controllers\\test\\users\\verifyAuthyForGoogle.enterprise.js",
                "file": "\\controllers\\test\\users\\verifyAuthyForGoogle.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.verifyAuthyForGoogle \"before each\" hook",
                    "timedOut": false,
                    "duration": 248,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n    _models.Mail.remove({ $or: [{ to: new RegExp('^test.user+', \"i\") }, { to: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n        _models.Authy.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n            commonMock.setSignUpMocks(httpmock, \"enterprise\");\n            commonMock.googleLogin(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/login/google\")\n                .send(loginBody)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        authToken = res.body.output.authtoken;\n                        uid = res.body.output.uid;\n                        done();\n                    }\n                });\n        });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e9ae3653-30aa-4496-b2d7-4cca0fe3d37f",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User User.verifyAuthyForGoogle \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "15de5032-4fec-4fd5-bc5c-96894100f236",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should verify OTP.",
                    "fullTitle": "Enterprise User User.verifyAuthyForGoogle Should verify OTP.",
                    "timedOut": false,
                    "duration": 259,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.authy_number = \"9619982150\";\ntempRegistrationBody.country_code = \"91\";\ndelete tempRegistrationBody.password;\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\napi.put(\"/enterprise/v1/user\")\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var authy_userId = res.body.output.authy_user_uid;\n            commonMock.authySMSVerification(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/authy/sms\")\n                .send({\n                    authy_id: authy_userId\n                })\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                        api.post(\"/enterprise/v1/authy/verifyotp\")\n                            .send({\n                                authy_user_uid: authy_userId,\n                                token: otpBody.token,\n                                option_selected: \"otp\"\n                            })\n                            .set('authtoken', authToken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                                    api.post(apiURL)\n                                        .send({\n                                            authy_user_uid: authy_userId,\n                                            token: otpBody.token\n                                        })\n                                        .set('authtoken', authToken)\n                                        .expect(httpStatus.OK)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                res.body.output.is_twofa_sms_enabled.should.equal(true);\n                                                done();\n                                            }\n                                        });\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5aa48010-35b1-4127-9606-3354b89dc5c2",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get default plan for verify OTP.",
                    "fullTitle": "Enterprise User User.verifyAuthyForGoogle Should get default plan for verify OTP.",
                    "timedOut": false,
                    "duration": 234,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.authy_number = \"9619982150\";\ntempRegistrationBody.country_code = \"91\";\ndelete tempRegistrationBody.password;\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\napi.put(\"/enterprise/v1/user\")\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var authy_userId = res.body.output.authy_user_uid;\n            commonMock.authySMSVerification(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/authy/sms\")\n                .send({\n                    authy_id: authy_userId\n                })\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                        api.post(\"/enterprise/v1/authy/verifyotp\")\n                            .send({\n                                authy_user_uid: authy_userId,\n                                token: otpBody.token,\n                                option_selected: \"otp\"\n                            })\n                            .set('authtoken', authToken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                                    api.post(apiURL)\n                                        .send({\n                                            authy_user_uid: authy_userId,\n                                            token: otpBody.token\n                                        })\n                                        .set('authtoken', authToken)\n                                        .expect(httpStatus.OK)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                var isValid = false;\n                                                if (res.body.output.plan.length == 1) {\n                                                    var defaultPlan = _.first(_.filter(server.plan.list, function(plan) {\n                                                        //return (plan || {}).enterprise_plan || false;\n                                                        return ((plan || {}).plan_type || \"\") == \"enterprise\";\n                                                    })) || {};\n                                                    defaultPlan = utils.skipAttr(convert.getJSON(defaultPlan));\n                                                    isValid = res.body.output.plan[0].uid == defaultPlan.uid;\n                                                }\n                                                isValid.should.equal(true);\n                                                done();\n                                            }\n                                        });\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5343130e-9458-4209-a8d0-7b7d5e59a47e",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get default attributes for verify OTP.",
                    "fullTitle": "Enterprise User User.verifyAuthyForGoogle Should get default attributes for verify OTP.",
                    "timedOut": false,
                    "duration": 212,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.authy_number = \"9619982150\";\ntempRegistrationBody.country_code = \"91\";\ndelete tempRegistrationBody.password;\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\napi.put(\"/enterprise/v1/user\")\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var authy_userId = res.body.output.authy_user_uid;\n            commonMock.authySMSVerification(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/authy/sms\")\n                .send({\n                    authy_id: authy_userId\n                })\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                        api.post(\"/enterprise/v1/authy/verifyotp\")\n                            .send({\n                                authy_user_uid: authy_userId,\n                                token: otpBody.token,\n                                option_selected: \"otp\"\n                            })\n                            .set('authtoken', authToken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                                    api.post(apiURL)\n                                        .send({\n                                            authy_user_uid: authy_userId,\n                                            token: otpBody.token\n                                        })\n                                        .set('authtoken', authToken)\n                                        .expect(httpStatus.OK)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                var isValid = false;\n                                                if (res.body.output.plan.length == 1) {\n                                                    isValid = utils.isHaveKeyVals(res.body.output, [\n                                                            \"first_name\", \"flow_uid\", \"job_title\", \"last_name\", \"locale\",\n                                                            \"merchantid\", \"payment_set\", \"subscription\"\n                                                        ]) &&\n                                                        res.body.output.subscription.days == server.plan.enterprise.TrialPeriod &&\n                                                        moment(new Date(res.body.output.subscription.start_date)).format(\"YYYY-MM-DD\") ==\n                                                        moment(new Date()).format(\"YYYY-MM-DD\");\n                                                }\n                                                isValid.should.equal(true);\n                                                done();\n                                            }\n                                        });\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b2494d86-2850-4de8-ab5f-e0aee3c0dc61",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should reset login fail count.",
                    "fullTitle": "Enterprise User User.verifyAuthyForGoogle Should reset login fail count.",
                    "timedOut": false,
                    "duration": 224,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.authy_number = \"9619982150\";\ntempRegistrationBody.country_code = \"91\";\ndelete tempRegistrationBody.password;\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\n_models.User.findOneAndUpdate({ uid: uid }, { failed_login_count: 0 }, function(error, user) {\n    api.put(\"/enterprise/v1/user\")\n        .send(tempRegistrationBody)\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                var authy_userId = res.body.output.authy_user_uid;\n                commonMock.authySMSVerification(httpmock, \"enterprise\");\n                api.post(\"/enterprise/v1/authy/sms\")\n                    .send({\n                        authy_id: authy_userId\n                    })\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                            api.post(\"/enterprise/v1/authy/verifyotp\")\n                                .send({\n                                    authy_user_uid: authy_userId,\n                                    token: otpBody.token,\n                                    option_selected: \"otp\"\n                                })\n                                .set('authtoken', authToken)\n                                .expect(httpStatus.OK)\n                                .end(function(err, res) {\n                                    if (err) {\n                                        done(err);\n                                    } else {\n                                        commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                                        api.post(apiURL)\n                                            .send({\n                                                authy_user_uid: authy_userId,\n                                                token: otpBody.token\n                                            })\n                                            .set('authtoken', authToken)\n                                            .expect(httpStatus.OK)\n                                            .end(function(err, res) {\n                                                if (err) {\n                                                    done(err);\n                                                } else {\n                                                    var isValid = res.body.output.is_twofa_sms_enabled &&\n                                                        res.body.output.failed_login_count == 0;\n                                                    isValid.should.equal(true);\n                                                    done();\n                                                }\n                                            });\n                                    }\n                                });\n                        }\n                    });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9e99f641-97a2-4a7d-8b8c-90b6475d141e",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should verify authy, by email and token.",
                    "fullTitle": "Enterprise User User.verifyAuthyForGoogle Should verify authy, by email and token.",
                    "timedOut": false,
                    "duration": 260,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.authy_number = \"9619982150\";\ntempRegistrationBody.country_code = \"91\";\ndelete tempRegistrationBody.password;\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\napi.put(\"/enterprise/v1/user\")\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            commonMock.authySMSVerification(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/authy/sms\")\n                .send({\n                    email: tempRegistrationBody.email\n                })\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                        api.post(\"/enterprise/v1/authy/verifyotp\")\n                            .send({\n                                email: tempRegistrationBody.email,\n                                token: otpBody.token,\n                                option_selected: \"otp\"\n                            })\n                            .set('authtoken', authToken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                                    api.post(apiURL)\n                                        .send({\n                                            email: tempRegistrationBody.email,\n                                            token: otpBody.token\n                                        })\n                                        .set('authtoken', authToken)\n                                        .expect(httpStatus.OK)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                var isValid = tempRegistrationBody.email == res.body.output.email &&\n                                                    res.body.output.is_twofa_sms_enabled;\n                                                isValid.should.equal(true);\n                                                done();\n                                            }\n                                        });\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "82b63421-b132-47c8-a0af-745e5e7d4d8b",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "5aa48010-35b1-4127-9606-3354b89dc5c2",
                  "5343130e-9458-4209-a8d0-7b7d5e59a47e",
                  "b2494d86-2850-4de8-ab5f-e0aee3c0dc61",
                  "9e99f641-97a2-4a7d-8b8c-90b6475d141e",
                  "82b63421-b132-47c8-a0af-745e5e7d4d8b"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 1189,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "425d2b2b-89c9-473f-ae60-fac423d1c8b8",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\users\\verifyOTP.enterprise.js",
        "file": "\\controllers\\test\\users\\verifyOTP.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "34f4319a-5bd5-4ba7-8b95-53fa0e68651e",
            "title": "User",
            "fullFile": "D:\\api\\controllers\\test\\users\\verifyOTP.enterprise.js",
            "file": "\\controllers\\test\\users\\verifyOTP.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "eee2438d-e14e-4f5c-81ae-b087995c2f27",
                "title": "User.verifyOTP",
                "fullFile": "D:\\api\\controllers\\test\\users\\verifyOTP.enterprise.js",
                "file": "\\controllers\\test\\users\\verifyOTP.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.verifyOTP \"before each\" hook",
                    "timedOut": false,
                    "duration": 475,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n    _models.Mail.remove({ $or: [{ to: new RegExp('^test.user+', \"i\") }, { to: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n        _models.Authy.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n            commonMock.setSignUpMocks(httpmock, \"enterprise\", {\n                email: registrationBody.email\n            });\n            api.post(\"/enterprise/v1/signup\")\n                .send(registrationBody)\n                .expect(httpStatus.CREATED)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        authToken = res.body.output.authtoken;\n                        _id = res.body.output._id;\n                        var tempRegistrationBody = global.getImmutable(registrationBody);\n                        tempRegistrationBody.email = secondUserEmail;\n                        commonMock.setSignUpMocks(httpmock, \"enterprise\", {\n                            email: tempRegistrationBody.email\n                        });\n                        api.post(\"/enterprise/v1/signup\")\n                            .send(tempRegistrationBody)\n                            .expect(httpStatus.CREATED)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    secondAuthToken = res.body.output.authtoken;\n                                    secondId = res.body.output._id;\n                                    done();\n                                }\n                            });\n                    }\n                });\n        });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "016528c7-e452-40ff-85eb-da8df4c75e01",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User User.verifyOTP \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2a8afcd1-2309-4c3c-9ebd-e54bf367cfb6",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should verify OTP.",
                    "fullTitle": "Enterprise User User.verifyOTP Should verify OTP.",
                    "timedOut": false,
                    "duration": 148,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.authy_number = \"9619982150\";\ntempRegistrationBody.country_code = \"91\";\ndelete tempRegistrationBody.password;\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\napi.put(\"/enterprise/v1/user\")\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var authy_userId = res.body.output.authy_user_uid;\n            commonMock.authySMSVerification(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/authy/sms\")\n                .send({\n                    authy_id: authy_userId\n                })\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                        api.post(apiURL)\n                            .send({\n                                authy_user_uid: authy_userId,\n                                token: otpBody.token,\n                                option_selected: \"otp\"\n                            })\n                            .set('authtoken', authToken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    res.body.output.enable_twofa.should.equal(\"verified\");\n                                    done();\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "21f60a07-9565-4c4b-ac5d-fee8047efe17",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get default plan for verify OTP.",
                    "fullTitle": "Enterprise User User.verifyOTP Should get default plan for verify OTP.",
                    "timedOut": false,
                    "duration": 165,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.authy_number = \"9619982150\";\ntempRegistrationBody.country_code = \"91\";\ndelete tempRegistrationBody.password;\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\napi.put(\"/enterprise/v1/user\")\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var authy_userId = res.body.output.authy_user_uid;\n            commonMock.authySMSVerification(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/authy/sms\")\n                .send({\n                    authy_id: authy_userId\n                })\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                        api.post(apiURL)\n                            .send({\n                                authy_user_uid: authy_userId,\n                                token: otpBody.token,\n                                option_selected: \"otp\"\n                            })\n                            .set('authtoken', authToken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    var isValid = false;\n                                    if (res.body.output.plan.length == 1) {\n                                        var defaultPlan = _.first(_.filter(server.plan.list, function(plan) {\n                                            //return (plan || {}).enterprise_plan || false;\n                                            return ((plan || {}).plan_type || \"\") == \"enterprise\";\n                                        })) || {};\n                                        defaultPlan = utils.skipAttr(convert.getJSON(defaultPlan));\n                                        isValid = res.body.output.plan[0].uid == defaultPlan.uid;\n                                    }\n                                    isValid.should.equal(true);\n                                    done();\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "69383e54-c1f7-455b-b10b-fee52dc368ee",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get default attributes for verify OTP.",
                    "fullTitle": "Enterprise User User.verifyOTP Should get default attributes for verify OTP.",
                    "timedOut": false,
                    "duration": 161,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.authy_number = \"9619982150\";\ntempRegistrationBody.country_code = \"91\";\ndelete tempRegistrationBody.password;\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\napi.put(\"/enterprise/v1/user\")\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var authy_userId = res.body.output.authy_user_uid;\n            commonMock.authySMSVerification(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/authy/sms\")\n                .send({\n                    authy_id: authy_userId\n                })\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                        api.post(apiURL)\n                            .send({\n                                authy_user_uid: authy_userId,\n                                token: otpBody.token,\n                                option_selected: \"otp\"\n                            })\n                            .set('authtoken', authToken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    var isValid = false;\n                                    if (res.body.output.plan.length == 1) {\n                                        isValid = utils.isHaveKeyVals(res.body.output, [\n                                                \"first_name\", \"flow_uid\", \"job_title\", \"last_name\", \"locale\",\n                                                \"merchantid\", \"payment_set\", \"subscription\"\n                                            ]) &&\n                                            res.body.output.subscription.days == server.plan.enterprise.TrialPeriod &&\n                                            moment(new Date(res.body.output.subscription.start_date)).format(\"YYYY-MM-DD\") ==\n                                            moment(new Date()).format(\"YYYY-MM-DD\");\n                                    }\n                                    isValid.should.equal(true);\n                                    done();\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4d713498-8261-4cbd-ae65-97209b3a4bbd",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should verify OTP, by email and token.",
                    "fullTitle": "Enterprise User User.verifyOTP Should verify OTP, by email and token.",
                    "timedOut": false,
                    "duration": 157,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.authy_number = \"9619982150\";\ntempRegistrationBody.country_code = \"91\";\ntempRegistrationBody.email = secondUserEmail;\ndelete tempRegistrationBody.password;\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\napi.put(\"/enterprise/v1/user\")\n    .send(tempRegistrationBody)\n    .set('authtoken', secondAuthToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var authy_userId = res.body.output.authy_user_uid;\n            commonMock.authySMSVerification(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/authy/sms\")\n                .send({\n                    authy_id: authy_userId\n                })\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                        api.post(apiURL)\n                            .send({\n                                email: tempRegistrationBody.email,\n                                token: otpBody.token,\n                                option_selected: \"otp\"\n                            })\n                            .set('authtoken', secondAuthToken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    var isValid = tempRegistrationBody.email == res.body.output.email &&\n                                        res.body.output.is_twofa_sms_enabled &&\n                                        res.body.output.enable_twofa == \"verified\";\n                                    isValid.should.equal(true);\n                                    done();\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fe550521-7f37-4d91-8de9-e1f107e09f74",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "21f60a07-9565-4c4b-ac5d-fee8047efe17",
                  "69383e54-c1f7-455b-b10b-fee52dc368ee",
                  "4d713498-8261-4cbd-ae65-97209b3a4bbd",
                  "fe550521-7f37-4d91-8de9-e1f107e09f74"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 631,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "27609452-053e-4961-82d2-8804a73c842d",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\users\\verifyOTPForGoogle.enterprise.js",
        "file": "\\controllers\\test\\users\\verifyOTPForGoogle.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "3e704560-f22c-4301-bf0a-6667f0562fde",
            "title": "User",
            "fullFile": "D:\\api\\controllers\\test\\users\\verifyOTPForGoogle.enterprise.js",
            "file": "\\controllers\\test\\users\\verifyOTPForGoogle.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "66d98393-7e35-44f3-83d0-ea9275759929",
                "title": "User.verifyOTPForGoogle",
                "fullFile": "D:\\api\\controllers\\test\\users\\verifyOTPForGoogle.enterprise.js",
                "file": "\\controllers\\test\\users\\verifyOTPForGoogle.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.verifyOTPForGoogle \"before each\" hook",
                    "timedOut": false,
                    "duration": 491,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n    _models.Mail.remove({ $or: [{ to: new RegExp('^test.user+', \"i\") }, { to: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n        _models.Authy.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n            commonMock.setSignUpMocks(httpmock, \"enterprise\");\n            commonMock.googleLogin(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/login/google\")\n                .send(loginBody)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        authToken = res.body.output.authtoken;\n                        _id = res.body.output._id;\n                        done();\n                    }\n                });\n        });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "03d9d649-ec7f-45af-a138-166d8ba1960d",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User User.verifyOTPForGoogle \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d3ec8e54-2d65-42c2-b247-6c668a23ca97",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should verify OTP.",
                    "fullTitle": "Enterprise User User.verifyOTPForGoogle Should verify OTP.",
                    "timedOut": false,
                    "duration": 166,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.authy_number = \"9619982150\";\ntempRegistrationBody.country_code = \"91\";\ndelete tempRegistrationBody.password;\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\napi.put(\"/enterprise/v1/user\")\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var authy_userId = res.body.output.authy_user_uid;\n            commonMock.authySMSVerification(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/authy/sms\")\n                .send({\n                    authy_id: authy_userId\n                })\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                        api.post(apiURL)\n                            .send({\n                                authy_user_uid: authy_userId,\n                                token: otpBody.token,\n                                option_selected: \"otp\"\n                            })\n                            .set('authtoken', authToken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    res.body.output.enable_twofa.should.equal(\"verified\");\n                                    done();\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "dd66f00f-1f8f-4ac6-9775-992293c29022",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get default plan for verify OTP.",
                    "fullTitle": "Enterprise User User.verifyOTPForGoogle Should get default plan for verify OTP.",
                    "timedOut": false,
                    "duration": 145,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.authy_number = \"9619982150\";\ntempRegistrationBody.country_code = \"91\";\ndelete tempRegistrationBody.password;\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\napi.put(\"/enterprise/v1/user\")\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var authy_userId = res.body.output.authy_user_uid;\n            commonMock.authySMSVerification(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/authy/sms\")\n                .send({\n                    authy_id: authy_userId\n                })\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                        api.post(apiURL)\n                            .send({\n                                authy_user_uid: authy_userId,\n                                token: otpBody.token,\n                                option_selected: \"otp\"\n                            })\n                            .set('authtoken', authToken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    var isValid = false;\n                                    if (res.body.output.plan.length == 1) {\n                                        var defaultPlan = _.first(_.filter(server.plan.list, function(plan) {\n                                            //return (plan || {}).enterprise_plan || false;\n                                            return ((plan || {}).plan_type || \"\") == \"enterprise\";\n                                        })) || {};\n                                        defaultPlan = utils.skipAttr(convert.getJSON(defaultPlan));\n                                        isValid = res.body.output.plan[0].uid == defaultPlan.uid;\n                                    }\n                                    isValid.should.equal(true);\n                                    done();\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "be1a8b2d-a8d1-42aa-9eb6-8776e1fd2885",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get default attributes for verify OTP.",
                    "fullTitle": "Enterprise User User.verifyOTPForGoogle Should get default attributes for verify OTP.",
                    "timedOut": false,
                    "duration": 192,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.authy_number = \"9619982150\";\ntempRegistrationBody.country_code = \"91\";\ndelete tempRegistrationBody.password;\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\napi.put(\"/enterprise/v1/user\")\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var authy_userId = res.body.output.authy_user_uid;\n            commonMock.authySMSVerification(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/authy/sms\")\n                .send({\n                    authy_id: authy_userId\n                })\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                        api.post(apiURL)\n                            .send({\n                                authy_user_uid: authy_userId,\n                                token: otpBody.token,\n                                option_selected: \"otp\"\n                            })\n                            .set('authtoken', authToken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    var isValid = false;\n                                    if (res.body.output.plan.length == 1) {\n                                        isValid = utils.isHaveKeyVals(res.body.output, [\n                                                \"first_name\", \"flow_uid\", \"job_title\", \"last_name\", \"locale\",\n                                                \"merchantid\", \"payment_set\", \"subscription\"\n                                            ]) &&\n                                            res.body.output.subscription.days == server.plan.enterprise.TrialPeriod &&\n                                            moment(new Date(res.body.output.subscription.start_date)).format(\"YYYY-MM-DD\") ==\n                                            moment(new Date()).format(\"YYYY-MM-DD\");\n                                    }\n                                    isValid.should.equal(true);\n                                    done();\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5aa14901-a034-445f-948a-c2b686d345b3",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should verify OTP, by email and token.",
                    "fullTitle": "Enterprise User User.verifyOTPForGoogle Should verify OTP, by email and token.",
                    "timedOut": false,
                    "duration": 164,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.authy_number = \"9619982150\";\ntempRegistrationBody.country_code = \"91\";\ndelete tempRegistrationBody.password;\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\napi.put(\"/enterprise/v1/user\")\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var authy_userId = res.body.output.authy_user_uid;\n            commonMock.authySMSVerification(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/authy/sms\")\n                .send({\n                    authy_id: authy_userId\n                })\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                        api.post(apiURL)\n                            .send({\n                                email: tempRegistrationBody.email,\n                                token: otpBody.token,\n                                option_selected: \"otp\"\n                            })\n                            .set('authtoken', authToken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    var isValid = tempRegistrationBody.email == res.body.output.email &&\n                                        res.body.output.is_twofa_sms_enabled &&\n                                        res.body.output.enable_twofa == \"verified\";\n                                    isValid.should.equal(true);\n                                    done();\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2a0a444a-fbf7-4391-9cc2-e2ec5b2b95a7",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "dd66f00f-1f8f-4ac6-9775-992293c29022",
                  "be1a8b2d-a8d1-42aa-9eb6-8776e1fd2885",
                  "5aa14901-a034-445f-948a-c2b686d345b3",
                  "2a0a444a-fbf7-4391-9cc2-e2ec5b2b95a7"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 667,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "74ef3fc2-eaa6-4af6-a043-60990336058c",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\utility\\createArbitrary.js",
        "file": "\\controllers\\test\\utility\\createArbitrary.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "427efb38-81f8-4411-bf7d-dee0576be7c8",
            "title": "Arbitrary.Create",
            "fullFile": "D:\\api\\controllers\\test\\utility\\createArbitrary.js",
            "file": "\\controllers\\test\\utility\\createArbitrary.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Arbitrary.Create \"before all\" hook",
                "timedOut": false,
                "duration": 193,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data;\n        dummyUser = orgData.owner;\n        dummyUser.authtoken = dummyUser.authtoken[0];\n        done()\n    });\n})",
                "err": {},
                "isRoot": false,
                "uuid": "ba0536ee-1623-4ba6-b54a-b827e6d499f3",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Arbitrary.Create \"after all\" hook",
                "timedOut": false,
                "duration": 2,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.parallel([\n        function(cb) {\n            _models.Arbitrary.remove({\n                    uid: {\n                        \"$in\": [arbitrary.uid]\n                    }\n                },\n                function(err) {\n                    cb(err)\n                })\n        }\n    ],\n    function(err, result) {\n        if (err) {\n            done(err)\n        } else {\n            done()\n        }\n    })",
                "err": {},
                "isRoot": false,
                "uuid": "d6acbf15-c1ac-4808-9b07-978bf0b81a70",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise Arbitrary.Create Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHORIZED);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "fcdff2d3-86aa-4ca1-9ce9-eff94a0c207a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should create arbitrary, if data is valid.",
                "fullTitle": "Enterprise Arbitrary.Create Should create arbitrary, if data is valid.",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set({ ui_admin_key: config.UI_ADMIN_KEY })\n    .send(arbitraryData)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            arbitrary = res.body.output\n            expect(arbitrary.data).to.be.a('object');\n            expect(arbitrary.uid).to.be.equal('dummy');\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "54fe31f8-2ed6-422c-bc0c-08d4c185d2e3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error,  if \"data\" key is missing.",
                "fullTitle": "Enterprise Arbitrary.Create Should get error,  if \"data\" key is missing.",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set({ ui_admin_key: config.UI_ADMIN_KEY })\n    .send({})\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "aa547e26-a92b-43fd-ab57-790e4b7eba05",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "fcdff2d3-86aa-4ca1-9ce9-eff94a0c207a",
              "54fe31f8-2ed6-422c-bc0c-08d4c185d2e3",
              "aa547e26-a92b-43fd-ab57-790e4b7eba05"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 28,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "b90a013f-3a3e-4abc-8a18-705dfa000049",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\utility\\deleteArbitrary.js",
        "file": "\\controllers\\test\\utility\\deleteArbitrary.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "11c992c7-1b4b-4e3d-ac6d-4f2a63547e22",
            "title": "Arbitrary.Delete",
            "fullFile": "D:\\api\\controllers\\test\\utility\\deleteArbitrary.js",
            "file": "\\controllers\\test\\utility\\deleteArbitrary.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Arbitrary.Delete \"before all\" hook",
                "timedOut": false,
                "duration": 219,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data;\n        dummyUser = orgData.owner;\n        dummyUser.authtoken = dummyUser.authtoken[0];\n        api.post(apiURL)\n            .set({ ui_admin_key: config.UI_ADMIN_KEY })\n            .send(arbitraryData)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    arbitrary = res.body.output\n                    done();\n                }\n            });\n    });\n})",
                "err": {},
                "isRoot": false,
                "uuid": "45bcc1a2-e885-4690-a7d3-aaa0bed03c52",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Arbitrary.Delete \"after all\" hook",
                "timedOut": false,
                "duration": 2,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.parallel([\n        function(cb) {\n            _models.Arbitrary.remove({\n                    uid: {\n                        \"$in\": [arbitrary.uid]\n                    }\n                },\n                function(err) {\n                    cb(err)\n                })\n        }\n    ],\n    function(err, result) {\n        if (err) {\n            done(err)\n        } else {\n            done()\n        }\n    })",
                "err": {},
                "isRoot": false,
                "uuid": "886e2f9f-87ef-4faa-85ad-94a046d61274",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise Arbitrary.Delete Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.delete(apiURL + arbitrary.uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHORIZED);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "602901b0-5860-4974-92e3-b3a996c44e3c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error if arbitrary not found.",
                "fullTitle": "Enterprise Arbitrary.Delete Should get error if arbitrary not found.",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.delete(apiURL + 'dummy')\n    .set({ ui_admin_key: config.UI_ADMIN_KEY })\n    .send(arbitraryData)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).to.be.equal(messageList.RECORD_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "7e229814-603d-4790-bcbf-d004fa86ec48",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should delete arbitrary, if data is valid.",
                "fullTitle": "Enterprise Arbitrary.Delete Should delete arbitrary, if data is valid.",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.delete(apiURL + arbitrary.uid)\n    .set({ ui_admin_key: config.UI_ADMIN_KEY })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            arbitrary = res.body.output\n            expect(arbitrary.delete_at).not.to.be.null;\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "303de0d5-f57d-4a37-81bf-43598fcbc40a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "602901b0-5860-4974-92e3-b3a996c44e3c",
              "7e229814-603d-4790-bcbf-d004fa86ec48",
              "303de0d5-f57d-4a37-81bf-43598fcbc40a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 30,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "34ed8fa0-d8e2-48e5-9a63-490cb413f218",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\utility\\fetchConfig.enterprise.js",
        "file": "\\controllers\\test\\utility\\fetchConfig.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "e409ab6a-c091-4496-8624-dc0e6d932f4e",
            "title": "Utility.FetchConfig",
            "fullFile": "D:\\api\\controllers\\test\\utility\\fetchConfig.enterprise.js",
            "file": "\\controllers\\test\\utility\\fetchConfig.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should get required config.",
                "fullTitle": "Enterprise Utility.FetchConfig Should get required config.",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output).to.have.all.keys(keySet);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "ab65d617-511f-4162-bcc8-3e5e745852c8",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ab65d617-511f-4162-bcc8-3e5e745852c8"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 12,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "a9d18095-d9cb-41d4-9418-d44a7cd22bf6",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\utility\\getArbitrary.js",
        "file": "\\controllers\\test\\utility\\getArbitrary.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "b37b2219-93b6-434f-a84e-7010e4fe3573",
            "title": "Arbitrary.Get",
            "fullFile": "D:\\api\\controllers\\test\\utility\\getArbitrary.js",
            "file": "\\controllers\\test\\utility\\getArbitrary.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Arbitrary.Get \"before all\" hook",
                "timedOut": false,
                "duration": 189,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data;\n        dummyUser = orgData.owner;\n        dummyUser.authtoken = dummyUser.authtoken[0];\n        api.post(apiURL)\n            .set({ ui_admin_key: config.UI_ADMIN_KEY })\n            .send(arbitraryData)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    arbitrary = res.body.output\n                    done();\n                }\n            });\n    });\n})",
                "err": {},
                "isRoot": false,
                "uuid": "1c9fb316-cf1a-44bd-89c8-dc3247d4ab39",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Arbitrary.Get \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.parallel([\n        function(cb) {\n            _models.Arbitrary.remove({\n                    uid: {\n                        \"$in\": [arbitrary.uid]\n                    }\n                },\n                function(err) {\n                    cb(err)\n                })\n        }\n    ],\n    function(err, result) {\n        if (err) {\n            done(err)\n        } else {\n            done()\n        }\n    })",
                "err": {},
                "isRoot": false,
                "uuid": "2436c052-ef2f-4854-92c5-3daba125e684",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should get error if arbitrary not found.",
                "fullTitle": "Enterprise Arbitrary.Get Should get error if arbitrary not found.",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + 'dummy')\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).to.be.equal(messageList.RECORD_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "b033a9e6-d4ac-4c09-acea-837b8aed55b9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get arbitrary.",
                "fullTitle": "Enterprise Arbitrary.Get Should get arbitrary.",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + arbitrary.uid)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            arbitrary = res.body.output\n            expect(arbitrary.data).to.be.a('object');\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "c585fb28-ff0b-428e-815f-3687b3c62ec0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get arbitrary by sending only[data]=true.",
                "fullTitle": "Enterprise Arbitrary.Get Should get arbitrary by sending only[data]=true.",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + arbitrary.uid + '?only[data]=true')\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body).to.be.a('object');\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "d00b1dc8-0649-453a-b9fc-eaf825ecb904",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b033a9e6-d4ac-4c09-acea-837b8aed55b9",
              "c585fb28-ff0b-428e-815f-3687b3c62ec0",
              "d00b1dc8-0649-453a-b9fc-eaf825ecb904"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 35,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "75330947-d70a-4462-8c1f-ff2119fc9c93",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\utility\\getAuditLogs.js",
        "file": "\\controllers\\test\\utility\\getAuditLogs.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "397dd0ab-1a0a-4e9e-88e6-9ef95417407f",
            "title": "Utility.getAuditLogs",
            "fullFile": "D:\\api\\controllers\\test\\utility\\getAuditLogs.js",
            "file": "\\controllers\\test\\utility\\getAuditLogs.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Utility.getAuditLogs \"before all\" hook",
                "timedOut": false,
                "duration": 376,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data;\n        async.waterfall([\n            function(cbk) {\n                dummyUser = orgData.owner;\n                dummyUser.authtoken = dummyUser.authtoken;\n                testData.mongoUserTriggerObj.user_uid = dummyUser.uid;\n                _models.UserTrigger.create(testData.mongoUserTriggerObj, function(err, userTrigger) {\n                    cbk(err, userTrigger);\n                })\n            },\n            function(userTrigger, cbk) {\n                userTriggerObj = userTrigger\n                _id = dummyUser._id\n                flowData.trigger.handlers = [userTriggerObj]\n                api.post(flowURL)\n                    .set('authtoken', dummyUser.authtoken)\n                    .send(flowData)\n                    .expect(httpStatus.CREATED)\n                    .end(function(err, res) {\n                        cbk(err, res, userTriggerObj)\n                    })\n            },\n            function(res, userTrigger, cbk) {\n                userFlow = res.body.output;\n                flowData.trigger.handlers = [userTriggerObj]\n                api.post(flowURL)\n                    .set({ 'authtoken': dummyUser.authtoken, org_uid: orgData.organization.uid })\n                    .send(flowData)\n                    .expect(httpStatus.CREATED)\n                    .end(function(err, res) {\n                        cbk(err, res)\n                    })\n            }\n        ], function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                orgFlow = res.body.output;\n                done()\n            }\n        })\n    });\n})",
                "err": {},
                "isRoot": false,
                "uuid": "5bdb92f5-ed53-40cf-9229-c798840a8566",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Utility.getAuditLogs \"after all\" hook",
                "timedOut": false,
                "duration": 7,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.waterfall([\n    function(cb) {\n        _models.ConfigData.remove({ flow_uid: userFlow.uid }, function(err) {\n            cb(err);\n        })\n    },\n    function(cb) {\n        _models.ConfigSchema.remove({ flow_uid: userFlow.uid }, function(err) {\n            cb(err);\n        })\n    },\n    function(cb) {\n        removeFlow([userFlow.uid, (sharedFlow || {}).uid], function(err, deletedFlows) {\n            cb(err, deletedFlows);\n        })\n    },\n    function(deletedFlows, cb) {\n        _models.UserTrigger.remove({ uid: userTriggerObj.uid }, function(err, deletedUserTrigger) {\n            cb(err, deletedUserTrigger);\n        })\n    }\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "3e93853b-1042-4d70-951b-aa130ef8204c",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Utility.getAuditLogs Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .send(shareCriteria)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "36c65e38-6535-4a27-b706-71205ec3358d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get org audit logs.",
                "fullTitle": "Enterprise Utility.getAuditLogs Should get org audit logs.",
                "timedOut": false,
                "duration": 120,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set({ 'authtoken': dummyUser.authtoken, org_uid: orgData.organization.uid })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(_.first(res.body.output.objects).metadata.org_uid).to.be.equal(orgData.organization.uid)\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "261898de-a19c-4c6a-b9bf-8c3318af63f6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get own audit logs.",
                "fullTitle": "Enterprise Utility.getAuditLogs Should get own audit logs.",
                "timedOut": false,
                "duration": 63,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(_.first(res.body.output.objects).owner_uid).to.be.equal(dummyUser.uid)\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "d3504840-96e7-4f6a-99df-8e33c15ce8f8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get audit logs by module.",
                "fullTitle": "Enterprise Utility.getAuditLogs Should get audit logs by module.",
                "timedOut": false,
                "duration": 51,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + '?modules=Workflow')\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(_.first(res.body.output.objects).module).to.be.equal('Workflow')\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "3be7aade-c71c-48c1-8781-25c38e1f67b9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get audit logs by actions.",
                "fullTitle": "Enterprise Utility.getAuditLogs Should get audit logs by actions.",
                "timedOut": false,
                "duration": 59,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + '?actions=Create')\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(_.first(res.body.output.objects).event_type).to.be.equal('Create')\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "4fb223ef-a83a-466c-a1f3-5c97d18da99b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get audit logs by created_by.",
                "fullTitle": "Enterprise Utility.getAuditLogs Should get audit logs by created_by.",
                "timedOut": false,
                "duration": 54,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + '?created_by=' + dummyUser.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(_.first(res.body.output.objects).created_by).to.be.equal(dummyUser.uid)\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "e96f85b7-7036-4217-99c0-d5e771ac9671",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get audit logs by project_uid.",
                "fullTitle": "Enterprise Utility.getAuditLogs Should get audit logs by project_uid.",
                "timedOut": false,
                "duration": 65,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + '?project_uid=' + userFlow.project_uid)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(_.first(res.body.output.objects).metadata.project_uid).to.be.equal(userFlow.project_uid)\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "8a0df948-b3e8-4ae2-863b-22dca3b15e86",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get audit logs by workflow_uid.",
                "fullTitle": "Enterprise Utility.getAuditLogs Should get audit logs by workflow_uid.",
                "timedOut": false,
                "duration": 40,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + '?workflow_uid=' + userFlow.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(_.first(res.body.output.objects).metadata.workflow_uid).to.be.equal(userFlow.uid)\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "ad8cc204-b8ef-4af6-8e3c-75ac7872c609",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get audit logs by startDate.",
                "fullTitle": "Enterprise Utility.getAuditLogs Should get audit logs by startDate.",
                "timedOut": false,
                "duration": 77,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + '?startDate=' + moment.utc().format())\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(_.first(res.body.output.objects).metadata.project_uid).to.be.equal(userFlow.project_uid)\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "c7ff3c5b-a132-4c6c-ac59-302d7fc9bca8",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "36c65e38-6535-4a27-b706-71205ec3358d",
              "261898de-a19c-4c6a-b9bf-8c3318af63f6",
              "d3504840-96e7-4f6a-99df-8e33c15ce8f8",
              "3be7aade-c71c-48c1-8781-25c38e1f67b9",
              "4fb223ef-a83a-466c-a1f3-5c97d18da99b",
              "e96f85b7-7036-4217-99c0-d5e771ac9671",
              "8a0df948-b3e8-4ae2-863b-22dca3b15e86",
              "ad8cc204-b8ef-4af6-8e3c-75ac7872c609",
              "c7ff3c5b-a132-4c6c-ac59-302d7fc9bca8"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 538,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "13852818-02d1-4757-a00a-13cdd4fa37e4",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\utility\\getCustomCss.enterprise.js",
        "file": "\\controllers\\test\\utility\\getCustomCss.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "ea4e04cf-9425-40f7-932a-e826b8729b28",
            "title": "Utility",
            "fullFile": "D:\\api\\controllers\\test\\utility\\getCustomCss.enterprise.js",
            "file": "\\controllers\\test\\utility\\getCustomCss.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "533dc243-dc2a-4616-b1c7-9200ba13ac0c",
                "title": "Utility.getCustomCss",
                "fullFile": "D:\\api\\controllers\\test\\utility\\getCustomCss.enterprise.js",
                "file": "\\controllers\\test\\utility\\getCustomCss.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Enterprise Utility Utility.getCustomCss \"before all\" hook",
                    "timedOut": false,
                    "duration": 30,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({$or:[{email: new RegExp('^test.user+', \"i\")},{email: new RegExp('^test.user+', \"i\")}]}, function(error, user) {\n    _models.Mail.remove({$or:[{to: new RegExp('^test.user+', \"i\")},{to: new RegExp('^test.user+', \"i\")}]}, function(error, user) {\n        _models.CustomCss.remove({ label: new RegExp('^UNIT_TEST_LABEL_+', \"i\") }, function(error, user) {\n            saveCustomCSS({}, function(errors, cssEntries) {\n                _cssEntries = cssEntries;\n                done();\n            });\n        });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0c1b3d51-b199-4bd6-9b29-7bb64dd7d758",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Should get specific published custom css.",
                    "fullTitle": "Enterprise Utility Utility.getCustomCss Should get specific published custom css.",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL.replace(\":uid\", _cssEntries[1].uid))\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.uid.should.not.empty;\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3c805e5a-e8ed-44ea-a3cd-898fbdf8ebba",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get error, if customcss not found .",
                    "fullTitle": "Enterprise Utility Utility.getCustomCss Should get error, if customcss not found .",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.CUSTOM_CSS_NOT_FOUND);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "07ca96e1-d74a-4b59-8d2f-d88f28792c1c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not get unpublished custom css.",
                    "fullTitle": "Enterprise Utility Utility.getCustomCss Should not get unpublished custom css.",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL.replace(\":uid\", _cssEntries[0].uid))\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.CUSTOM_CSS_NOT_FOUND);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "17b582a0-580f-4754-a30b-8a84c02bf413",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "3c805e5a-e8ed-44ea-a3cd-898fbdf8ebba",
                  "07ca96e1-d74a-4b59-8d2f-d88f28792c1c",
                  "17b582a0-580f-4754-a30b-8a84c02bf413"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 36,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "fa092e18-ac6b-4372-8d3a-b720f9f155a8",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\utility\\getUsage.js",
        "file": "\\controllers\\test\\utility\\getUsage.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "c710b94a-40a5-4dd6-b6df-c5eebb88c7cc",
            "title": "Utility.getUsage",
            "fullFile": "D:\\api\\controllers\\test\\utility\\getUsage.js",
            "file": "\\controllers\\test\\utility\\getUsage.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Utility.getUsage \"before all\" hook",
                "timedOut": false,
                "duration": 254,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data;\n        async.waterfall([\n            function(cbk) {\n                dummyUser = orgData.owner;\n                testData.mongoUserTriggerObj.user_uid = dummyUser.uid;\n                _models.CustomIntegration.remove().exec(function(err) {\n                    _models.UserTrigger.create(testData.mongoUserTriggerObj, function(err, userTrigger) {\n                        cbk(err, userTrigger);\n                    })\n                })\n            },\n            function(userTrigger, cbk) {\n                userTriggerObj = userTrigger\n                _id = dummyUser._id\n                flowData.trigger.handlers = [userTriggerObj]\n                api.post(flowURL)\n                    .set('authtoken', dummyUser.authtoken)\n                    .send(flowData)\n                    .expect(httpStatus.CREATED)\n                    .end(function(err, res) {\n                        cbk(err, res)\n                    })\n            }\n        ], function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                userFlow = res.body.output;\n                done()\n            }\n        })\n    });\n})",
                "err": {},
                "isRoot": false,
                "uuid": "1a5e9cc2-8cef-4997-8bbb-27c4de68fece",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Utility.getUsage \"after all\" hook",
                "timedOut": false,
                "duration": 2,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.waterfall([\n    function(cb) {\n        removeFlow([userFlow.uid, (sharedFlow || {}).uid], function(err, deletedFlows) {\n            cb(err, deletedFlows);\n        })\n    },\n    function(deletedFlows, cb) {\n        _models.UserTrigger.remove({ uid: userTriggerObj.uid }, function(err, deletedUserTrigger) {\n            cb(err, deletedUserTrigger);\n        })\n    }\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "b30e3516-c9b9-413a-8a9f-bfd84ff6ef1e",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Utility.getUsage Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + '?trigger=' + userTriggerObj.uid)\n    .send(shareCriteria)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "89e93221-0f71-4bd7-8b18-8947a3633cc9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get trigger data.",
                "fullTitle": "Enterprise Utility.getUsage Should get trigger data.",
                "timedOut": false,
                "duration": 41,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + '?trigger=' + userTriggerObj.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .send(shareCriteria)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //expect(res.body.output.length).to.be.equal(1)\n            expect(_.first(_.first(res.body.output).activities)).to.be.equal('start')\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "97546f63-9353-446d-b7fb-17c516cfbc71",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get auth data.",
                "fullTitle": "Enterprise Utility.getUsage Should get auth data.",
                "timedOut": false,
                "duration": 36,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + '?auth=fl5adf8ba83fd0ec3ddb949f')\n    .set('authtoken', dummyUser.authtoken)\n    .send(shareCriteria)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //expect(res.body.output.length).to.be.equal(1)\n            expect(_.first(_.first(res.body.output).activities)).to.be.equal('a0')\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "7ff75445-e95b-4e3a-a213-7e918482339a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get connection data.",
                "fullTitle": "Enterprise Utility.getUsage Should get connection data.",
                "timedOut": false,
                "duration": 38,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + '?connection=fl2a1c66a0103e97e0f2cec5')\n    .set('authtoken', dummyUser.authtoken)\n    .send(shareCriteria)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //expect(res.body.output.length).to.be.equal(1)\n            expect(_.first(_.first(res.body.output).activities)).to.be.equal('a1')\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "d4981c8c-d591-4b61-baa9-0f03c526d1c2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get agent data.",
                "fullTitle": "Enterprise Utility.getUsage Should get agent data.",
                "timedOut": false,
                "duration": 37,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + '?agent=ega9d1573323eb3fa10436fe0')\n    .set('authtoken', dummyUser.authtoken)\n    .send(shareCriteria)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            Array.isArray(res.body.output).should.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "6d9859be-a897-4211-ac97-2a7b27da4613",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "89e93221-0f71-4bd7-8b18-8947a3633cc9",
              "97546f63-9353-446d-b7fb-17c516cfbc71",
              "7ff75445-e95b-4e3a-a213-7e918482339a",
              "d4981c8c-d591-4b61-baa9-0f03c526d1c2",
              "6d9859be-a897-4211-ac97-2a7b27da4613"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 163,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "4f520505-9a45-41c9-bc28-f036a70aa115",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\utility\\getUsersData.js",
        "file": "\\controllers\\test\\utility\\getUsersData.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "69d5447d-4060-4ac9-a046-764f987ea84c",
            "title": "Utility.getUsersData",
            "fullFile": "D:\\api\\controllers\\test\\utility\\getUsersData.js",
            "file": "\\controllers\\test\\utility\\getUsersData.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Utility.getUsersData \"before all\" hook",
                "timedOut": false,
                "duration": 191,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data;\n        dummyUser = orgData.owner;\n        dummyUser.authtoken = dummyUser.authtoken;\n        usersData = { users: [dummyUser.uid] }\n        done()\n    });\n})",
                "err": {},
                "isRoot": false,
                "uuid": "7ff21cd6-8429-40df-a32d-b9deceae90e1",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should get users data.",
                "fullTitle": "Enterprise Utility.getUsersData Should get users data.",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(usersData)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(_.first(res.body.output).uid).to.be.equal(dummyUser.uid)\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "c3292aed-808f-4aba-80ee-83c802506672",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c3292aed-808f-4aba-80ee-83c802506672"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 10,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "5558da4f-edb5-46e9-a2e5-fa6ad54962e1",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\utility\\installationDataProxy.enterprise.js",
        "file": "\\controllers\\test\\utility\\installationDataProxy.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "7a565aa9-ad2b-4ff2-9ca7-4a8309c6ebdf",
            "title": "Utility",
            "fullFile": "D:\\api\\controllers\\test\\utility\\installationDataProxy.enterprise.js",
            "file": "\\controllers\\test\\utility\\installationDataProxy.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "3c9b2088-37d9-4272-ae86-d7f798bf80f8",
                "title": "Utility.createInstallationData",
                "fullFile": "D:\\api\\controllers\\test\\utility\\installationDataProxy.enterprise.js",
                "file": "\\controllers\\test\\utility\\installationDataProxy.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Enterprise Utility Utility.createInstallationData \"before all\" hook",
                    "timedOut": false,
                    "duration": 246,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\n_models.User.remove({ email: testData.testRegistrationBody.email }, function(error, user) {\n    api.post(\"/enterprise/v1/signup\")\n        .send(testData.testRegistrationBody)\n        .expect(httpStatus.CREATED)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                dummyUser = res.body.output;\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f15bdff1-1e94-43c7-a0a3-a7d71c601376",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Should create installation data at builtio backend.",
                    "fullTitle": "Enterprise Utility Utility.createInstallationData Should create installation data at builtio backend.",
                    "timedOut": false,
                    "duration": 42,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.builtInstallationData(httpmock, \"enterprise\");\n\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .send(data)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output.notice).to.be.equal(response.output.notice);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3d35d870-5b75-4420-8096-80a44c3585d1",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "3d35d870-5b75-4420-8096-80a44c3585d1"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 42,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "76190a75-c84d-45bc-ae04-fe6a8497e0b1",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\utility\\listCustomCss.enterprise.js",
        "file": "\\controllers\\test\\utility\\listCustomCss.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "655f2597-7cdd-4406-9ccf-50a1cbed966b",
            "title": "Utility",
            "fullFile": "D:\\api\\controllers\\test\\utility\\listCustomCss.enterprise.js",
            "file": "\\controllers\\test\\utility\\listCustomCss.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "c4108ba6-20b7-4a78-992a-9c544ef48a38",
                "title": "Utility.listCustomCss",
                "fullFile": "D:\\api\\controllers\\test\\utility\\listCustomCss.enterprise.js",
                "file": "\\controllers\\test\\utility\\listCustomCss.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Enterprise Utility Utility.listCustomCss \"before all\" hook",
                    "timedOut": false,
                    "duration": 31,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n    _models.Mail.remove({ $or: [{ to: new RegExp('^test.user+', \"i\") }, { to: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n        _models.CustomCss.remove({ label: new RegExp('^UNIT_TEST_LABEL_+', \"i\") }, function(error, user) {\n            saveCustomCSS({}, function(errors, cssEntries) {\n                done();\n            });\n        });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b913b5eb-19e5-46da-92ad-8ad6c833797e",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Should get publish list of custom css.",
                    "fullTitle": "Enterprise Utility Utility.listCustomCss Should get publish list of custom css.",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.length >= 5;\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2c9b522c-10b3-43b2-ac5c-887fc3192d52",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "2c9b522c-10b3-43b2-ac5c-887fc3192d52"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 14,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "8a06b49a-ee1a-4f93-862b-635e00e7cd20",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\utility\\logError.enterprise.js",
        "file": "\\controllers\\test\\utility\\logError.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "07182db2-7ec7-4273-b2d7-e8d762cf54f3",
            "title": "Utility",
            "fullFile": "D:\\api\\controllers\\test\\utility\\logError.enterprise.js",
            "file": "\\controllers\\test\\utility\\logError.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "e11209cf-d68c-421f-86ae-7815cd32df34",
                "title": "Utility.LogError",
                "fullFile": "D:\\api\\controllers\\test\\utility\\logError.enterprise.js",
                "file": "\\controllers\\test\\utility\\logError.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Enterprise Utility Utility.LogError \"before all\" hook",
                    "timedOut": false,
                    "duration": 239,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(user, cbk) {\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        dummyUser = res.body.output;\n        done()\n    }\n})",
                    "err": {},
                    "isRoot": false,
                    "uuid": "45e11246-3e4a-4c58-8436-9aa84360b0c4",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Should log an error.",
                    "fullTitle": "Enterprise Utility Utility.LogError Should log an error.",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send({ error: 'error' })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.message.should.equal('done');\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8ca9d119-92ff-4190-8d86-b08365f4bd50",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "8ca9d119-92ff-4190-8d86-b08365f4bd50"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 7,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "37cd28b7-70aa-41ce-a1e0-3a9af630aa38",
        "title": "Enterprise",
        "fullFile": "D:\\api\\controllers\\test\\utility\\updateArbitrary.js",
        "file": "\\controllers\\test\\utility\\updateArbitrary.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "b7a75a22-5878-4348-9bcf-99b17a2bcd52",
            "title": "Arbitrary.Update",
            "fullFile": "D:\\api\\controllers\\test\\utility\\updateArbitrary.js",
            "file": "\\controllers\\test\\utility\\updateArbitrary.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Arbitrary.Update \"before all\" hook",
                "timedOut": false,
                "duration": 174,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data;\n        dummyUser = orgData.owner;\n        dummyUser.authtoken = dummyUser.authtoken[0];\n        api.post(apiURL)\n            .set({ ui_admin_key: config.UI_ADMIN_KEY })\n            .send(arbitraryData)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    arbitrary = res.body.output\n                    done();\n                }\n            });\n    });\n})",
                "err": {},
                "isRoot": false,
                "uuid": "03010173-878b-4cdc-b958-e2363cc89f55",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Arbitrary.Update \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.parallel([\n        function(cb) {\n            _models.Arbitrary.remove({\n                    uid: {\n                        \"$in\": [arbitrary.uid]\n                    }\n                },\n                function(err) {\n                    cb(err)\n                })\n        }\n    ],\n    function(err, result) {\n        if (err) {\n            done(err)\n        } else {\n            done()\n        }\n    })",
                "err": {},
                "isRoot": false,
                "uuid": "e64ef855-a1d2-46a0-9e98-7baff22e441f",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise Arbitrary.Update Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put(apiURL + arbitrary.uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHORIZED);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "cfe5a984-9467-406f-a401-382d40794c34",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error if arbitrary not found.",
                "fullTitle": "Enterprise Arbitrary.Update Should get error if arbitrary not found.",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put(apiURL + 'dummy')\n    .set({ ui_admin_key: config.UI_ADMIN_KEY })\n    .send(arbitraryData)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).to.be.equal(messageList.RECORD_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "7d356136-9030-4f77-91f0-d30c330b0927",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should update arbitrary, if data is valid.",
                "fullTitle": "Enterprise Arbitrary.Update Should update arbitrary, if data is valid.",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put(apiURL + arbitrary.uid)\n    .set({ ui_admin_key: config.UI_ADMIN_KEY })\n    .send(arbitraryData)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            arbitrary = res.body.output\n            expect(arbitrary.data).to.be.a('object');\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "bc37ec3a-4ae8-41ab-9c25-90a06993e3ed",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error,  if \"data\" key is missing.",
                "fullTitle": "Enterprise Arbitrary.Update Should get error,  if \"data\" key is missing.",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put(apiURL + arbitrary.uid)\n    .set({ ui_admin_key: config.UI_ADMIN_KEY })\n    .send({})\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "b9e39d68-068f-4aff-a400-0131a2839591",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "cfe5a984-9467-406f-a401-382d40794c34",
              "7d356136-9030-4f77-91f0-d30c330b0927",
              "bc37ec3a-4ae8-41ab-9c25-90a06993e3ed",
              "b9e39d68-068f-4aff-a400-0131a2839591"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 34,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2018
}