{
  "stats": {
    "suites": 751,
    "tests": 1594,
    "passes": 1594,
    "pending": 0,
    "failures": 0,
    "start": "2018-12-28T07:31:52.625Z",
    "end": "2018-12-28T07:44:46.709Z",
    "duration": 774084,
    "testsRegistered": 1594,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "edab51b0-3f38-4495-92da-89f2bf4317a3",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "16fa3f34-6d69-4200-a8a6-7dd7c68acf4d",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\activity\\listActivities.enterprise.js",
        "file": "\\controllers\\test\\activity\\listActivities.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "33ffae2d-4528-443e-9486-5860914414db",
            "title": "Activity.ListActivities",
            "fullFile": "C:\\work\\api\\controllers\\test\\activity\\listActivities.enterprise.js",
            "file": "\\controllers\\test\\activity\\listActivities.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Activity.ListActivities \"before all\" hook",
                "timedOut": false,
                "duration": 2959,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\n_models.User.remove({ email: testData.testRegistrationBody.email }, function(error, user) {\n    api.post(\"/enterprise/v1/signup\")\n        .send(testData.testRegistrationBody)\n        .expect(httpStatus.CREATED)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                dummyUser = res.body.output;\n                done();\n            }\n        });\n});",
                "err": {},
                "isRoot": false,
                "uuid": "1cc57dfe-a896-4e8c-baf4-16e9f20c42f1",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Activity.ListActivities Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "f6e64425-460b-48af-9d1e-ab56e94071e4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of \"all\" activities.",
                "fullTitle": "Enterprise Activity.ListActivities Should get list of \"all\" activities.",
                "timedOut": false,
                "duration": 947,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.should.be.instanceOf(Array);\n            expect(_.first(res.body.output)).not.to.have.all.keys(['_id', '__v']);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "622ed376-5446-41a6-ba30-953fc2c53e6b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of \"category\" activities.",
                "fullTitle": "Enterprise Activity.ListActivities Should get list of \"category\" activities.",
                "timedOut": false,
                "duration": 940,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + '?type=category')\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(_.first(res.body.output)).to.be.all.keys(['_id', 'act']);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "3de804ef-f413-4168-b969-934f02b0f10e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of \"category\" activities.",
                "fullTitle": "Enterprise Activity.ListActivities Should get list of \"category\" activities.",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + '?type=condition')\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output.name).to.be.equal('condition');\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "1618485c-0890-4d61-975c-d851939d25f7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of \"searchAuth\" activities.",
                "fullTitle": "Enterprise Activity.ListActivities Should get list of \"searchAuth\" activities.",
                "timedOut": false,
                "duration": 977,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + '?type=searchAuth')\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output).to.be.Array;\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "e32578c4-aedb-49ce-a666-3a2f8f1afcf1",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f6e64425-460b-48af-9d1e-ab56e94071e4",
              "622ed376-5446-41a6-ba30-953fc2c53e6b",
              "3de804ef-f413-4168-b969-934f02b0f10e",
              "1618485c-0890-4d61-975c-d851939d25f7",
              "e32578c4-aedb-49ce-a666-3a2f8f1afcf1"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2885,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "116263c6-3c15-4179-be71-7cf0d3deba90",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\activity\\searchActivities.enterprise.js",
        "file": "\\controllers\\test\\activity\\searchActivities.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "caad9717-0326-48bc-97a5-d1ad5ad140e2",
            "title": "Activity.SearchActivities",
            "fullFile": "C:\\work\\api\\controllers\\test\\activity\\searchActivities.enterprise.js",
            "file": "\\controllers\\test\\activity\\searchActivities.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Activity.SearchActivities \"before all\" hook",
                "timedOut": false,
                "duration": 3782,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\n_models.User.remove({ email: testData.testRegistrationBody.email }, function(error, user) {\n    api.post(\"/enterprise/v1/signup\")\n        .send(testData.testRegistrationBody)\n        .expect(httpStatus.CREATED)\n        .end(function(err, res) {\n            if (err) {\n                //console.log('err', err)\n                done(err);\n            } else {\n                dummyUser = res.body.output;\n                done();\n            }\n        });\n});",
                "err": {},
                "isRoot": false,
                "uuid": "58e4dcfd-441c-4769-9569-be539c001871",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should get list of \"search\" param activities.",
                "fullTitle": "Enterprise Activity.SearchActivities Should get list of \"search\" param activities.",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .send({ search: 'test' })\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.should.be.instanceOf(Array);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "e7a4628d-88a1-445d-b6af-167ce1c165ad",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e7a4628d-88a1-445d-b6af-167ce1c165ad"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 17,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "36edbf66-26bb-49db-8e23-90c126600c82",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\activityBuilder\\validateCode.enterprise.js",
        "file": "\\controllers\\test\\activityBuilder\\validateCode.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "819b9692-2922-4c83-a81c-12cd45374fb1",
            "title": "ActivityBuilder.Validate",
            "fullFile": "C:\\work\\api\\controllers\\test\\activityBuilder\\validateCode.enterprise.js",
            "file": "\\controllers\\test\\activityBuilder\\validateCode.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise ActivityBuilder.Validate \"before all\" hook",
                "timedOut": false,
                "duration": 5420,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(userTrigger, cbk) {\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        dummyUser = res.body.output;\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "31b9352d-2eb5-4264-81c8-748a9275209f",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise ActivityBuilder.Validate Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "20bd3686-d776-470a-9e1e-89a52eeebe92",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should give error, if \"code\" is not having value as string.",
                "fullTitle": "Enterprise ActivityBuilder.Validate Should give error, if \"code\" is not having value as string.",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar invalidCodeKey = { code: {} }\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(invalidCodeKey)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.INVALID_CODE_KEY);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "5f08ba8e-8338-4f71-9ef2-d536f11d4a64",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should give error, if json schema has invalid keys like \"input\", \"output\", \"execute\".",
                "fullTitle": "Enterprise ActivityBuilder.Validate Should give error, if json schema has invalid keys like \"input\", \"output\", \"execute\".",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(invalidJsonForKeys)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.status.should.equal('failed');\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "cf94f01a-ffac-41fe-8c46-e1b3c337b5d8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should give error, if json schema has invalid schema.",
                "fullTitle": "Enterprise ActivityBuilder.Validate Should give error, if json schema has invalid schema.",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(invalidJsonSchema)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.status.should.equal('failed');\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "fd757c07-6ab4-4c9d-ac44-5d7a323e1084",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should give error, if data is string.",
                "fullTitle": "Enterprise ActivityBuilder.Validate Should give error, if data is string.",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(\"\")\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal('Code key should be of type string.');\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "85c7ca92-a9bd-4165-844a-28c838bb7eb4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should be valid, if passed json schema is valid.",
                "fullTitle": "Enterprise ActivityBuilder.Validate Should be valid, if passed json schema is valid.",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar invalidCodeKey = { code: {} }\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(validJson)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.status.should.equal('passed');\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "c790fa97-9fdb-4892-b0e3-15bf676ae96e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "20bd3686-d776-470a-9e1e-89a52eeebe92",
              "5f08ba8e-8338-4f71-9ef2-d536f11d4a64",
              "cf94f01a-ffac-41fe-8c46-e1b3c337b5d8",
              "fd757c07-6ab4-4c9d-ac44-5d7a323e1084",
              "85c7ca92-a9bd-4165-844a-28c838bb7eb4",
              "c790fa97-9fdb-4892-b0e3-15bf676ae96e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 78,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "c58eee6b-cabe-4c0a-92b7-a81575c07147",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\addOn\\addAddOn.enterprise.js",
        "file": "\\controllers\\test\\addOn\\addAddOn.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "abfba9e0-2a6a-4797-9fca-cf0930b46042",
            "title": "AddOn",
            "fullFile": "C:\\work\\api\\controllers\\test\\addOn\\addAddOn.enterprise.js",
            "file": "\\controllers\\test\\addOn\\addAddOn.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "24dc2a16-6bfb-4173-8db2-8d57d5839c98",
                "title": "AddOn.addAddOn",
                "fullFile": "C:\\work\\api\\controllers\\test\\addOn\\addAddOn.enterprise.js",
                "file": "\\controllers\\test\\addOn\\addAddOn.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise AddOn AddOn.addAddOn \"before each\" hook",
                    "timedOut": false,
                    "duration": 14,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.createFlowUser({}, function(error, user) {\n        if (error) {\n            done(error);\n        } else {\n            authToken = user.authtoken;\n            token = user.activation_token;\n            _id = user._id;\n            user_uid = user.uid;\n            saveAddOns({\n                    authtoken: authToken,\n                    user_uid: user_uid\n                },\n                function(error, addOns) {\n                    savedAddOns = addOns;\n                    done();\n                });\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a91f32a8-fff4-4efd-9edf-b51b5bf443e1",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise AddOn AddOn.addAddOn \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3eeea345-db50-4879-9b58-80286c8494db",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should apply addon.",
                    "fullTitle": "Enterprise AddOn AddOn.addAddOn Should apply addon.",
                    "timedOut": false,
                    "duration": 117,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napplyAddOn(httpmock, function(error) {\n    if (error) {\n        false.should.equal(true);\n        done();\n    } else {\n        commonMock.braintreeTransaction(httpmock, \"enterprise\");\n        api.post(apiURL)\n            .set('authtoken', authToken)\n            .send({})\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    res.body.output.message.should.equal(messageList.ADDON_APPLY_SUCCESS);\n                    done();\n                }\n            });\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f254eeee-a4d7-4666-acfa-adc796b1abe4",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise AddOn AddOn.addAddOn Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .send({})\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fd627e78-9c52-4ac5-aaaf-8716413d36c1",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "f254eeee-a4d7-4666-acfa-adc796b1abe4",
                  "fd627e78-9c52-4ac5-aaaf-8716413d36c1"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 122,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "8a516d36-d90c-4b0a-aa72-5e58d2d2553a",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\addOn\\addAddOnOrg.enterprise.js",
        "file": "\\controllers\\test\\addOn\\addAddOnOrg.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "da5a2b5a-182e-4a2b-a793-d580c5ab5533",
            "title": "AddOn",
            "fullFile": "C:\\work\\api\\controllers\\test\\addOn\\addAddOnOrg.enterprise.js",
            "file": "\\controllers\\test\\addOn\\addAddOnOrg.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "72f986d0-37dc-454d-821a-f68b98b98a59",
                "title": "AddOn.addAddOnOrg",
                "fullFile": "C:\\work\\api\\controllers\\test\\addOn\\addAddOnOrg.enterprise.js",
                "file": "\\controllers\\test\\addOn\\addAddOnOrg.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise AddOn AddOn.addAddOnOrg \"before each\" hook",
                    "timedOut": false,
                    "duration": 89,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        _data = data;\n        saveAddOns({\n                authtoken: authToken,\n                user_uid: user_uid\n            },\n            function(error, addOns) {\n                savedAddOns = addOns;\n                done();\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6c94db88-5e88-448a-a820-c844f27729b6",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise AddOn AddOn.addAddOnOrg \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "206f0595-e1e0-452b-8d5b-92eb49940fc2",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise AddOn AddOn.addAddOnOrg Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('org_uid', org_uid)\n    .send({})\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "89970007-7719-48f1-8fb4-d7e800dc93c4",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "89970007-7719-48f1-8fb4-d7e800dc93c4"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 5,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "3c3395d1-1dbd-4303-a687-3b898a9759e0",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\addOn\\list.enterprise.js",
        "file": "\\controllers\\test\\addOn\\list.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "107534fc-cba9-4f2f-a090-d8aaa6de2a8e",
            "title": "AddOn",
            "fullFile": "C:\\work\\api\\controllers\\test\\addOn\\list.enterprise.js",
            "file": "\\controllers\\test\\addOn\\list.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "a90eab5d-bdd9-4db6-a826-17bd50c21a39",
                "title": "AddOn.list",
                "fullFile": "C:\\work\\api\\controllers\\test\\addOn\\list.enterprise.js",
                "file": "\\controllers\\test\\addOn\\list.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise AddOn AddOn.list \"before each\" hook",
                    "timedOut": false,
                    "duration": 13,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.createFlowUser({}, function(error, user) {\n        if (error) {\n            done(error);\n        } else {\n            authToken = user.authtoken;\n            token = user.activation_token;\n            _id = user._id;\n            user_uid = user.uid;\n            saveAddOns({\n                    authtoken: authToken,\n                    user_uid: user_uid\n                },\n                function(error, userLogs) {\n                    savedUserLogs = userLogs;\n                    done();\n                });\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d9db213b-03b3-462c-8bd7-9213ac166318",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise AddOn AddOn.list \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "739670ae-0150-48d9-8cd6-a2f12e179707",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get list of plan addons.",
                    "fullTitle": "Enterprise AddOn AddOn.list Should get list of plan addons.",
                    "timedOut": false,
                    "duration": 45,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napplyPlan(httpmock, function(error, userPlanOutput) {\n    api.get(apiURL)\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                res.body.output.should.be.instanceOf(Array);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "209b3267-b3a8-41b9-87f9-a522813476a1",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise AddOn AddOn.list Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6994b1ed-ff9b-4de4-b26c-3556c10e2cf2",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "209b3267-b3a8-41b9-87f9-a522813476a1",
                  "6994b1ed-ff9b-4de4-b26c-3556c10e2cf2"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 50,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "4d98aea6-0a3f-41e9-a035-39377cd3314b",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\addOn\\listOrg.enterprise.js",
        "file": "\\controllers\\test\\addOn\\listOrg.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "b128da86-c5bb-4906-8062-7d910258267c",
            "title": "AddOn",
            "fullFile": "C:\\work\\api\\controllers\\test\\addOn\\listOrg.enterprise.js",
            "file": "\\controllers\\test\\addOn\\listOrg.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "81450a26-1836-49b6-b6f8-60bb794155be",
                "title": "AddOn.listOrg",
                "fullFile": "C:\\work\\api\\controllers\\test\\addOn\\listOrg.enterprise.js",
                "file": "\\controllers\\test\\addOn\\listOrg.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise AddOn AddOn.listOrg \"before each\" hook",
                    "timedOut": false,
                    "duration": 73,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        _data = data;\n        saveAddOns({\n                authtoken: authToken,\n                user_uid: user_uid\n            },\n            function(error, addOns) {\n                savedAddOns = addOns;\n                done();\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b0e898fd-5580-4121-90f8-430313fd7e61",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise AddOn AddOn.listOrg \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7c8b8e86-cd48-4f18-a933-861efad6865a",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get list of plan addons.",
                    "fullTitle": "Enterprise AddOn AddOn.listOrg Should get list of plan addons.",
                    "timedOut": false,
                    "duration": 66,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napplyPlan(httpmock, function(error, userPlanOutput) {\n    api.get(apiURL)\n        .set('org_uid', org_uid)\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                res.body.output.should.be.instanceOf(Array);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "dfa8f717-5b76-4116-8de8-64ea5951331a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise AddOn AddOn.listOrg Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f40553ab-17c5-4a13-8e88-dbd7e0a972bc",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "dfa8f717-5b76-4116-8de8-64ea5951331a",
                  "f40553ab-17c5-4a13-8e88-dbd7e0a972bc"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 70,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "1781bfc4-7ca0-4489-b7db-5359df5368e8",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\addOn\\selectAddOn.enterprise.js",
        "file": "\\controllers\\test\\addOn\\selectAddOn.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "0edd5d8e-d5a7-4642-8a27-b201af3d198e",
            "title": "AddOn",
            "fullFile": "C:\\work\\api\\controllers\\test\\addOn\\selectAddOn.enterprise.js",
            "file": "\\controllers\\test\\addOn\\selectAddOn.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "1787e75a-d21a-42bb-8358-5922ec7a0150",
                "title": "AddOn.selectAddOn",
                "fullFile": "C:\\work\\api\\controllers\\test\\addOn\\selectAddOn.enterprise.js",
                "file": "\\controllers\\test\\addOn\\selectAddOn.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise AddOn AddOn.selectAddOn \"before each\" hook",
                    "timedOut": false,
                    "duration": 11,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.createFlowUser({}, function(error, user) {\n        if (error) {\n            done(error);\n        } else {\n            authToken = user.authtoken;\n            token = user.activation_token;\n            _id = user._id;\n            user_uid = user.uid;\n            saveAddOns({\n                    authtoken: authToken,\n                    user_uid: user_uid\n                },\n                function(error, addOns) {\n                    savedAddOns = addOns;\n                    done();\n                });\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c0c451ae-acd0-45d7-820a-45bd1f1b3d6f",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise AddOn AddOn.selectAddOn \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "99278f1f-e857-4ebe-b2b7-7ee7d458ecfe",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should apply addon.",
                    "fullTitle": "Enterprise AddOn AddOn.selectAddOn Should apply addon.",
                    "timedOut": false,
                    "duration": 71,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napplyPlan(httpmock, function(error, userPlanOutput) {\n    api.get(\"/enterprise/v1/addons\")\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                var addon_uid = _.first(res.body.output).uid;\n                api.put(apiURL)\n                    .set('authtoken', authToken)\n                    .send({\n                        \"addon_uid\": addon_uid\n                    })\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            if (res.body.output.message == messageList.ADDON_ASSIGNED) {\n                                api.get(\"/enterprise/v1/user\")\n                                    .set('authtoken', authToken)\n                                    .expect(httpStatus.OK)\n                                    .end(function(err, res) {\n                                        if (err) {\n                                            done(err);\n                                        } else {\n                                            res.body.output.addon_uid.should.equal(addon_uid);\n                                            done();\n                                        }\n                                    });\n                            } else {\n                                (true).should.equal(false);\n                                done();\n                            }\n                        }\n                    });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "52e9cd69-fa34-496c-96ca-9c8017d35c15",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise AddOn AddOn.selectAddOn Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.put(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "49de0810-1912-4515-8b7b-5a7742fdb570",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "52e9cd69-fa34-496c-96ca-9c8017d35c15",
                  "49de0810-1912-4515-8b7b-5a7742fdb570"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 75,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "9edb709f-1915-46f6-84ff-2bc7eb42484f",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\addOn\\selectAddOnOrg.enterprise.js",
        "file": "\\controllers\\test\\addOn\\selectAddOnOrg.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "ddcabc8d-503b-4729-b59d-8fe946ecaeb2",
            "title": "AddOn",
            "fullFile": "C:\\work\\api\\controllers\\test\\addOn\\selectAddOnOrg.enterprise.js",
            "file": "\\controllers\\test\\addOn\\selectAddOnOrg.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "ef851d9d-5a96-4d89-97b5-dc570cb5fbb6",
                "title": "AddOn.selectAddOnOrg",
                "fullFile": "C:\\work\\api\\controllers\\test\\addOn\\selectAddOnOrg.enterprise.js",
                "file": "\\controllers\\test\\addOn\\selectAddOnOrg.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise AddOn AddOn.selectAddOnOrg \"before each\" hook",
                    "timedOut": false,
                    "duration": 67,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        _data = data;\n        saveAddOns({\n                authtoken: authToken,\n                user_uid: user_uid\n            },\n            function(error, userLogs) {\n                savedUserLogs = userLogs;\n                done();\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7eded544-6da3-4427-8ea8-d00d5ccb8768",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise AddOn AddOn.selectAddOnOrg \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9e638f8d-e688-48bf-963b-91379c7407a9",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should apply addon.",
                    "fullTitle": "Enterprise AddOn AddOn.selectAddOnOrg Should apply addon.",
                    "timedOut": false,
                    "duration": 78,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napplyPlan(httpmock, function(error, userPlanOutput) {\n    api.get(\"/enterprise/v1/addons\")\n        .set('org_uid', org_uid)\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                var addon_uid = _.first(((res || {}).body || {}).output || []).uid || \"\";\n                api.put(apiURL)\n                    .set('org_uid', org_uid)\n                    .set('authtoken', authToken)\n                    .send({\n                        \"addon_uid\": addon_uid\n                    })\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            if (res.body.output.message == messageList.ADDON_ASSIGNED) {\n                                _models.User.findOne({ uid: org_account_uid }, function(error, user) {\n                                    user.addon_uid.should.equal(addon_uid);\n                                    done();\n                                });\n                            } else {\n                                (true).should.equal(false);\n                                done();\n                            }\n                        }\n                    });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f1aa2825-4780-4c2e-a5bf-2eeaaf889f20",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise AddOn AddOn.selectAddOnOrg Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.put(apiURL)\n    .set('org_uid', org_uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "82dce5e3-7660-4df1-8aec-8a35a128d9f6",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "f1aa2825-4780-4c2e-a5bf-2eeaaf889f20",
                  "82dce5e3-7660-4df1-8aec-8a35a128d9f6"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 82,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "d397b96b-e909-4f27-b234-83aedb9aaaed",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\agent\\createUserAgent.js",
        "file": "\\controllers\\test\\agent\\createUserAgent.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "c9d42042-16e4-4159-b51e-793d1ca3e365",
            "title": "Agent.CreateUserAgent",
            "fullFile": "C:\\work\\api\\controllers\\test\\agent\\createUserAgent.js",
            "file": "\\controllers\\test\\agent\\createUserAgent.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Agent.CreateUserAgent \"before all\" hook",
                "timedOut": false,
                "duration": 2596,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(user, cbk) {\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        dummyUser = res.body.output;\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "3248e3e0-c0b5-4af5-80e7-a7ab553ac463",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Agent.CreateUserAgent \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.parallel([\n    function(cb) {\n        _models.Agent.remove({ uid: userAgent.uid }, function(err) {\n            cb(err)\n        })\n    }\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "ac5f219a-5ffe-472b-983c-c93c612b2ec0",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise Agent.CreateUserAgent Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "5f3ed3c0-bab8-46f3-a7a7-bd6ba7ce72d0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error if \"name\" key missing in request body.",
                "fullTitle": "Enterprise Agent.CreateUserAgent Should get error if \"name\" key missing in request body.",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar agentBody = _.clone(agentData);\nagentBody = _.omit(agentBody, 'name');\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(agentBody)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "41671c37-3e3d-42b7-a3fb-a7fdde472ead",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should create agent, if agent data is valid.",
                "fullTitle": "Enterprise Agent.CreateUserAgent Should create agent, if agent data is valid.",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(agentData)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            userAgent = res.body.output;\n            userAgent.should.have.property('name');\n            //expect(userAgent).not.to.have.all.keys(['_id', '__v']);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "a3b19dcc-89b0-4ef8-81d1-d1fd25f97256",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "5f3ed3c0-bab8-46f3-a7a7-bd6ba7ce72d0",
              "41671c37-3e3d-42b7-a3fb-a7fdde472ead",
              "a3b19dcc-89b0-4ef8-81d1-d1fd25f97256"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 42,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "51e6d523-ee43-4228-8a57-ff4683e0cb67",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\agent\\deleteUserAgent.js",
        "file": "\\controllers\\test\\agent\\deleteUserAgent.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "82b653d0-e2b8-4240-b133-1a0780406a29",
            "title": "Agent.DeleteUserAgent",
            "fullFile": "C:\\work\\api\\controllers\\test\\agent\\deleteUserAgent.js",
            "file": "\\controllers\\test\\agent\\deleteUserAgent.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Agent.DeleteUserAgent \"before all\" hook",
                "timedOut": false,
                "duration": 3080,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(user, cbk) {\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    },\n    function(result, cbk) {\n        dummyUser = result.body.output;\n        api.post(apiURL)\n            .set('authtoken', dummyUser.authtoken)\n            .send(agentData)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        userAgent = res.body.output\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "af21b97f-0961-4600-8b8f-d43e29f9b6cf",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Agent.DeleteUserAgent \"after all\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.parallel([\n    function(cb) {\n        _models.Agent.remove({ uid: userAgent.uid }, function(err) {\n            cb(err)\n        })\n    }\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "1a99ea8f-9d58-457b-8342-c6d40cb545fa",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise Agent.DeleteUserAgent Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.delete(apiURL + '/' + userAgent.uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "9a6c6bd1-5660-4ce9-b991-0f955a8b2ae3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error if user agent not found.",
                "fullTitle": "Enterprise Agent.DeleteUserAgent Should get error if user agent not found.",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.delete(apiURL + '/dummyAgent')\n    .set('authtoken', dummyUser.authtoken)\n    .send({ name: 'updated' })\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.AGENT_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "9695d573-d719-4363-915e-324844bee54a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should delete agent, if user agent found.",
                "fullTitle": "Enterprise Agent.DeleteUserAgent Should delete agent, if user agent found.",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.delete(apiURL + '/' + userAgent.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            userAgent = res.body.output;\n            expect(userAgent.deleted_at).not.to.be.null;\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "130bc320-2cbb-4c89-ad49-4c039ec68d10",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9a6c6bd1-5660-4ce9-b991-0f955a8b2ae3",
              "9695d573-d719-4363-915e-324844bee54a",
              "130bc320-2cbb-4c89-ad49-4c039ec68d10"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 37,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "3418b7a5-34f7-47a3-b5b4-4ca8fdac38af",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\agent\\initUserAgent.js",
        "file": "\\controllers\\test\\agent\\initUserAgent.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "4dc106fe-6e98-4425-834b-5af386d57eab",
            "title": "Agent.InitUserAgent",
            "fullFile": "C:\\work\\api\\controllers\\test\\agent\\initUserAgent.js",
            "file": "\\controllers\\test\\agent\\initUserAgent.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Agent.InitUserAgent \"before all\" hook",
                "timedOut": false,
                "duration": 2943,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(user, cbk) {\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    },\n    function(result, cbk) {\n        dummyUser = result.body.output;\n        api.post('/enterprise/v1/user/agents')\n            .set('authtoken', dummyUser.authtoken)\n            .send(agentData)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        userAgent = res.body.output\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "ee3d2726-b48a-4b3c-98ee-7b15adf734f5",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Agent.InitUserAgent \"after all\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.parallel([\n    function(cb) {\n        _models.Agent.remove({ uid: userAgent.uid }, function(err) {\n            cb(err)\n        })\n    }\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "f5ac43f3-c655-44b1-98c1-8f29d303b934",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should get error if \"gateway_key\" key missing or not valid in request headers.",
                "fullTitle": "Enterprise Agent.InitUserAgent Should get error if \"gateway_key\" key missing or not valid in request headers.",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('gatewaykey', 'invalid key')\n    .send(body)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal('Unauthorized');\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "a6032ded-3e37-488a-b11e-58a5de1e1093",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error if user agent not found.",
                "fullTitle": "Enterprise Agent.InitUserAgent Should get error if user agent not found.",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('gateway_key', 'invalid key')\n    .send(body)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.AGENT_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "34ed6b63-16e6-42f8-9431-39455941beac",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should init agent, if agent data is valid.",
                "fullTitle": "Enterprise Agent.InitUserAgent Should init agent, if agent data is valid.",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('gateway_key', userAgent.uid)\n    .send(body)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output).to.contain.any.keys(['service', 'credentials', 'admin_key']);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "c0d2fddf-312c-45b4-9492-b3f3bde0db96",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should init agent, if agent without any data.",
                "fullTitle": "Enterprise Agent.InitUserAgent Should init agent, if agent without any data.",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('gateway_key', userAgent.uid)\n    .send()\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output).to.contain.any.keys(['service', 'credentials', 'admin_key']);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "42cecebe-4f99-4234-88fd-ee69dc5285b0",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a6032ded-3e37-488a-b11e-58a5de1e1093",
              "34ed6b63-16e6-42f8-9431-39455941beac",
              "c0d2fddf-312c-45b4-9492-b3f3bde0db96",
              "42cecebe-4f99-4234-88fd-ee69dc5285b0"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 21,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "2ec2ffe4-02f3-4f28-b4b5-90d7b9783ae8",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\agent\\listUserAgent.js",
        "file": "\\controllers\\test\\agent\\listUserAgent.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "756d9476-4e6c-441e-8b62-8d96f17f583d",
            "title": "Agent.ListUserAgent",
            "fullFile": "C:\\work\\api\\controllers\\test\\agent\\listUserAgent.js",
            "file": "\\controllers\\test\\agent\\listUserAgent.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Agent.ListUserAgent \"before all\" hook",
                "timedOut": false,
                "duration": 2430,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(user, cbk) {\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    },\n    function(result, cbk) {\n        dummyUser = result.body.output;\n        api.post(apiURL)\n            .set('authtoken', dummyUser.authtoken)\n            .send(agentData)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        userAgent = res.body.output\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "2b730d5b-b0f1-4d8a-9900-1e49d45857b9",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Agent.ListUserAgent \"after all\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.parallel([\n    function(cb) {\n        _models.Agent.remove({ uid: userAgent.uid }, function(err) {\n            cb(err)\n        })\n    }\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "d1dbd76a-9dd1-4ac5-bb99-97f86bd43a4a",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise Agent.ListUserAgent Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "52ae182e-6496-4cf0-9bbc-2fefc7232f4f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get user agent list, if user is valid.",
                "fullTitle": "Enterprise Agent.ListUserAgent Should get user agent list, if user is valid.",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output).to.be.a('array');\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "87946860-76c5-4082-8c30-d41ff87a61c7",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "52ae182e-6496-4cf0-9bbc-2fefc7232f4f",
              "87946860-76c5-4082-8c30-d41ff87a61c7"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 20,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "2aab53e2-afff-480f-9353-73d476676562",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\agent\\updateUserAgent.js",
        "file": "\\controllers\\test\\agent\\updateUserAgent.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "e39ab311-24a4-4bc1-82a6-7b7d017683a1",
            "title": "Agent.UpdateUserAgent",
            "fullFile": "C:\\work\\api\\controllers\\test\\agent\\updateUserAgent.js",
            "file": "\\controllers\\test\\agent\\updateUserAgent.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Agent.UpdateUserAgent \"before all\" hook",
                "timedOut": false,
                "duration": 2566,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(user, cbk) {\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    },\n    function(result, cbk) {\n        dummyUser = result.body.output;\n        api.post(apiURL)\n            .set('authtoken', dummyUser.authtoken)\n            .send(agentData)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        userAgent = res.body.output\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "fcaa5126-f2ec-4e6a-becb-fa785d8c77ab",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Agent.UpdateUserAgent \"after all\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.parallel([\n    function(cb) {\n        _models.Agent.remove({ uid: userAgent.uid }, function(err) {\n            cb(err)\n        })\n    }\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "d567bc4c-8949-49f8-bd4f-df18cdb3de68",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise Agent.UpdateUserAgent Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put(apiURL + userAgent.uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "0651a777-e3e4-4301-8778-28e175d45765",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error if \"name\" key missing in request body.",
                "fullTitle": "Enterprise Agent.UpdateUserAgent Should get error if \"name\" key missing in request body.",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar agentBody = _.clone(agentData);\nagentBody = _.omit(agentBody, 'name');\napi.put(apiURL + userAgent.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .send(agentBody)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "0cec2b78-25ee-47b1-89de-6da38312c6ee",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error if user agent not found.",
                "fullTitle": "Enterprise Agent.UpdateUserAgent Should get error if user agent not found.",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put(apiURL + 'dummyAgent')\n    .set('authtoken', dummyUser.authtoken)\n    .send({ name: 'updated' })\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.AGENT_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "f2cfd00e-c306-4e54-bd85-7dbaf7015c1a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should update agent, if agent data is valid.",
                "fullTitle": "Enterprise Agent.UpdateUserAgent Should update agent, if agent data is valid.",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put(apiURL + userAgent.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .send({ name: 'updated' })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            userAgent = res.body.output;\n            expect(userAgent.name).to.be.equal('updated');\n            expect(userAgent).not.to.have.all.keys(['_id', '__v']);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "351fe383-c7fc-4fc1-b632-afc04579674b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0651a777-e3e4-4301-8778-28e175d45765",
              "0cec2b78-25ee-47b1-89de-6da38312c6ee",
              "f2cfd00e-c306-4e54-bd85-7dbaf7015c1a",
              "351fe383-c7fc-4fc1-b632-afc04579674b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 57,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "9ab41ddc-f258-4791-887e-02301ec3f526",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\agent\\validateUserAgent.js",
        "file": "\\controllers\\test\\agent\\validateUserAgent.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "742d5040-89f4-4bb9-bef8-4d80448bbb3d",
            "title": "Agent.ValidateUserAgent",
            "fullFile": "C:\\work\\api\\controllers\\test\\agent\\validateUserAgent.js",
            "file": "\\controllers\\test\\agent\\validateUserAgent.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Agent.ValidateUserAgent \"before all\" hook",
                "timedOut": false,
                "duration": 2698,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(user, cbk) {\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    },\n    function(result, cbk) {\n        dummyUser = result.body.output;\n        api.post('/enterprise/v1/user/agents')\n            .set('authtoken', dummyUser.authtoken)\n            .send(agentData)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        userAgent = res.body.output\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "c45b3d16-21e4-439f-8c46-eda1dcc4b318",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Agent.ValidateUserAgent \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.parallel([\n    function(cb) {\n        _models.Agent.remove({ uid: userAgent.uid }, function(err) {\n            cb(err)\n        })\n    }\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "354c7f46-2c6d-432a-ba8e-c7c0d58d5fa7",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should get error if \"gateway_key\" key missing or not valid in request headers.",
                "fullTitle": "Enterprise Agent.ValidateUserAgent Should get error if \"gateway_key\" key missing or not valid in request headers.",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('gatewaykey', 'invalid key')                \n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal('Unauthorized');\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "66b76c1b-0a1a-49bb-9689-5eab1efc4c8f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error if user agent not found.",
                "fullTitle": "Enterprise Agent.ValidateUserAgent Should get error if user agent not found.",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('gateway_key', 'invalid key')               \n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.AGENT_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "5329f0b6-dd90-473c-a942-f05da0ae4bcb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should validate agent, if agent data is valid.",
                "fullTitle": "Enterprise Agent.ValidateUserAgent Should validate agent, if agent data is valid.",
                "timedOut": false,
                "duration": 4288,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('gateway_key', userAgent.uid)               \n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output).to.contain.any.keys(['message']);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "628b5675-7f75-4071-9b6a-c189a6d0b2ed",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "66b76c1b-0a1a-49bb-9689-5eab1efc4c8f",
              "5329f0b6-dd90-473c-a942-f05da0ae4bcb",
              "628b5675-7f75-4071-9b6a-c189a6d0b2ed"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 4299,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "b7bbfb55-db07-4c9a-9b93-060283150530",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\authyUser\\requestSMS.enterprise.js",
        "file": "\\controllers\\test\\authyUser\\requestSMS.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "bc8b806a-3544-436d-9367-42904d8b0e38",
            "title": "authyUser",
            "fullFile": "C:\\work\\api\\controllers\\test\\authyUser\\requestSMS.enterprise.js",
            "file": "\\controllers\\test\\authyUser\\requestSMS.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "c83654be-1ea1-4f02-b85d-885525909910",
                "title": "authyUser.requestSMS",
                "fullFile": "C:\\work\\api\\controllers\\test\\authyUser\\requestSMS.enterprise.js",
                "file": "\\controllers\\test\\authyUser\\requestSMS.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise authyUser authyUser.requestSMS \"before each\" hook",
                    "timedOut": false,
                    "duration": 11,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.createFlowUser({}, function(error, user) {\n        if (error) {\n            done(error);\n        } else {\n            authToken = user.authtoken;\n            token = user.activation_token;\n            _id = user._id;\n            uid = user.uid;\n            done();\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "84fa8d1c-7aec-4f2f-b9de-d952cf7a9b69",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise authyUser authyUser.requestSMS \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fe2543cf-c94e-4e1d-9633-9ec4dea3df06",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should send otp with SMS.",
                    "fullTitle": "Enterprise authyUser authyUser.requestSMS Should send otp with SMS.",
                    "timedOut": false,
                    "duration": 43,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.authy_number = \"9619982150\";\ntempRegistrationBody.country_code = \"91\";\ndelete tempRegistrationBody.password;\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\napi.put(\"/enterprise/v1/user\")\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //var authy_userId = res.body.output.authy.authy_userId;\n            var authy_userId = res.body.output.authy_user_uid;\n            commonMock.authySMSVerification(httpmock, \"enterprise\");\n            api.post(apiURL)\n                .send({\n                    authy_user_uid: authy_userId\n                })\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        res.body.output.success.should.equal(\"true\");\n                        done();\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "327aeeec-0929-4abe-9e19-215bd9786441",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should send otp with SMS by passing email.",
                    "fullTitle": "Enterprise authyUser authyUser.requestSMS Should send otp with SMS by passing email.",
                    "timedOut": false,
                    "duration": 34,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.authy_number = \"9619982150\";\ntempRegistrationBody.country_code = \"91\";\ndelete tempRegistrationBody.password;\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\napi.put(\"/enterprise/v1/user\")\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            commonMock.authySMSVerification(httpmock, \"enterprise\");\n            api.post(apiURL)\n                .send({\n                    email: res.body.output.email\n                })\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        res.body.output.success.should.equal(\"true\");\n                        done();\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "dc1bb0d0-4e41-4cb1-b322-632da5f0ae6f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as user not found.",
                    "fullTitle": "Enterprise authyUser authyUser.requestSMS Should give error as user not found.",
                    "timedOut": false,
                    "duration": 28,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.authy_number = \"9619982150\";\ntempRegistrationBody.country_code = \"91\";\ndelete tempRegistrationBody.password;\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\napi.put(\"/enterprise/v1/user\")\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //var authy_userId = res.body.output.authy.authy_userId;\n            var authy_userId = res.body.output.authy_user_uid;\n            commonMock.authySMSVerification(httpmock, \"enterprise\");\n            api.post(apiURL)\n                .send({})\n                .expect(httpStatus.BAD_REQUEST)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        res.body.error.message.should.equal(messageList.USER_NOT_FOUND);\n                        done();\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0a55f876-6ba3-48c6-858c-54f4bff553ed",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "327aeeec-0929-4abe-9e19-215bd9786441",
                  "dc1bb0d0-4e41-4cb1-b322-632da5f0ae6f",
                  "0a55f876-6ba3-48c6-858c-54f4bff553ed"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 105,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "99b17b85-5d02-4bc1-a59d-39dafab42910",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\connection\\createUserConnection.enterprise.js",
        "file": "\\controllers\\test\\connection\\createUserConnection.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "14af4772-9a73-43a4-986c-1965d18fe9e5",
            "title": "Connection.CreateUserConnection",
            "fullFile": "C:\\work\\api\\controllers\\test\\connection\\createUserConnection.enterprise.js",
            "file": "\\controllers\\test\\connection\\createUserConnection.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Connection.CreateUserConnection \"before all\" hook",
                "timedOut": false,
                "duration": 79,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data;\n        dummyUser = orgData.owner;\n        done()\n    })\n});",
                "err": {},
                "isRoot": false,
                "uuid": "0060192d-f7d9-44c9-8846-4e617594e9d5",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Connection.CreateUserConnection \"after all\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nhttpmock.cleanAll();\n_models.UserConnection.remove({ uid: userConnection.uid }, function(err) {\n    done(err)\n})",
                "err": {},
                "isRoot": false,
                "uuid": "2e8ce4a9-ed98-4334-acf9-f3834112cf0c",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise Connection.CreateUserConnection Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "a793109c-6e7b-4471-bd1b-8465fe09a8bb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error if \"data\" key missing in request body.",
                "fullTitle": "Enterprise Connection.CreateUserConnection Should get error if \"data\" key missing in request body.",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar connectionData = _.clone(testData.connectionBody);\nconnectionData = _.omit(connectionData, 'data');\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(connectionData)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "e1f7e7d5-6f1d-4af9-a242-b82e939de165",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error if \"input\" key missing in request body.",
                "fullTitle": "Enterprise Connection.CreateUserConnection Should get error if \"input\" key missing in request body.",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar connectionData = _.cloneDeep(testData.connectionBody);\nconnectionData = _.omit(connectionData, 'input');\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(connectionData)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "b3e98819-65fe-4d71-828a-dccb030e3331",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error if \"name\" key missing in request body.",
                "fullTitle": "Enterprise Connection.CreateUserConnection Should get error if \"name\" key missing in request body.",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar connectionData = _.cloneDeep(testData.connectionBody);\nconnectionData = _.omit(connectionData, 'name');\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(connectionData)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "77c2db7f-e41d-4bc5-9b46-5b85794bbe26",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should create connection, if connection data is valid.",
                "fullTitle": "Enterprise Connection.CreateUserConnection Should create connection, if connection data is valid.",
                "timedOut": false,
                "duration": 19,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar data = _.cloneDeep(testData.connectionBody);\nvar opt = { body: data, path: '/connection/create' }\ncommonMock.connectionCreateSuccess(opt)\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(testData.connectionBody)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            userConnection = res.body.output\n            expect(userConnection).to.have.any.keys(_.union(_.keys(testData.connectionBody), ['uid', 'user']));\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "3ea59efb-4588-467a-a8fa-c704fc7cd2e2",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a793109c-6e7b-4471-bd1b-8465fe09a8bb",
              "e1f7e7d5-6f1d-4af9-a242-b82e939de165",
              "b3e98819-65fe-4d71-828a-dccb030e3331",
              "77c2db7f-e41d-4bc5-9b46-5b85794bbe26",
              "3ea59efb-4588-467a-a8fa-c704fc7cd2e2"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 60,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "ab6aa8e6-e324-4eba-a3b6-19112dd5f36b",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\connection\\deleteUserConnection.enterprise.js",
        "file": "\\controllers\\test\\connection\\deleteUserConnection.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "34c8fdde-be22-4c81-8ea4-981984d3912d",
            "title": "Connection.DeleteUserConnection",
            "fullFile": "C:\\work\\api\\controllers\\test\\connection\\deleteUserConnection.enterprise.js",
            "file": "\\controllers\\test\\connection\\deleteUserConnection.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Connection.DeleteUserConnection \"before all\" hook",
                "timedOut": false,
                "duration": 87,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data;\n        dummyUser = orgData.owner;\n        var conndata = _.cloneDeep(connectionData)\n        conndata.user = dummyUser.uid\n        _models.UserConnection.create(conndata, function(err, result) {\n            if (result) {\n                userConnection = result.toJSON()\n            }\n            done()\n        })\n    });\n})",
                "err": {},
                "isRoot": false,
                "uuid": "9cfbaeb1-fa25-4f86-9565-51448ee5a7c2",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Connection.DeleteUserConnection \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nhttpmock.cleanAll();\n_models.UserConnection.remove({ uid: userConnection.uid }, function(err) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "28822a88-b1b1-45a0-be25-26de0d690609",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise Connection.DeleteUserConnection Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.delete(apiURL + userConnection.uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "fb0c1544-ee51-4c7a-8ba4-6b6f6484d42f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if user connection not found.",
                "fullTitle": "Enterprise Connection.DeleteUserConnection Should get error, if user connection not found.",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.delete(apiURL + 'dummyUser')\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).to.be.equal(messageList.CONNECTION_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "500b75a4-a137-49fc-9751-92a149da6dde",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should delete connection, if user connection found.",
                "fullTitle": "Enterprise Connection.DeleteUserConnection Should delete connection, if user connection found.",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar data = _.cloneDeep(testData.connectionBody);\nvar opt = { path: '/connection/' + userConnection.uid };\ncommonMock.connectionDeleteSuccess(opt);\napi.delete(apiURL + userConnection.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output.notice).to.be.equal(messageList.CONNECTION_DELETED_SUCCESSFULLY);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "261ebb68-b777-45ef-b2fb-a398d7f9b5f6",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "fb0c1544-ee51-4c7a-8ba4-6b6f6484d42f",
              "500b75a4-a137-49fc-9751-92a149da6dde",
              "261ebb68-b777-45ef-b2fb-a398d7f9b5f6"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 33,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "92c900bd-d7e9-4d83-a47a-00cf7a289b74",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\connection\\getUserConnection.enterprise.js",
        "file": "\\controllers\\test\\connection\\getUserConnection.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "d0b33bc1-8cd9-48ae-a716-5fb0f35d8af7",
            "title": "Connection.GetUserConnection",
            "fullFile": "C:\\work\\api\\controllers\\test\\connection\\getUserConnection.enterprise.js",
            "file": "\\controllers\\test\\connection\\getUserConnection.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Connection.GetUserConnection \"before all\" hook",
                "timedOut": false,
                "duration": 78,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data;\n        dummyUser = orgData.owner;\n        var conndata = _.cloneDeep(connectionData)\n        conndata.user = dummyUser.uid\n        _models.UserConnection.create(conndata, function(err, result) {\n            if (result) {\n                userConnection = result.toJSON()\n            }\n            done()\n        })\n    })\n})",
                "err": {},
                "isRoot": false,
                "uuid": "39d31dab-8c42-46ca-9d98-0465b82f3370",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Connection.GetUserConnection \"after all\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nhttpmock.cleanAll();\n_models.UserConnection.remove({ uid: userConnection.uid }, function(err) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "27ba834a-4fcd-46cd-8621-b16d1a32488f",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise Connection.GetUserConnection Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + userConnection.uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "2f7a2683-24b5-4404-b63b-44050a2c86cf",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if user connection not found.",
                "fullTitle": "Enterprise Connection.GetUserConnection Should get error, if user connection not found.",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { path: '/connection/dummyUser/details' };\ncommonMock.connectionGetNotFound(opt);\napi.get(apiURL + 'dummyUser')\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).to.be.equal(messageList.CONNECTION_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "f3b36885-9d35-467b-9f84-15a7cdf2e649",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get connection, if user connection found.",
                "fullTitle": "Enterprise Connection.GetUserConnection Should get connection, if user connection found.",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { path: '/connection/' + userConnection.uid + '/details' };\ncommonMock.connectionGetSuccess(opt);\napi.get(apiURL + userConnection.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var userConnection = res.body.output\n            expect(userConnection).to.have.all.keys(['connection']);\n            expect(userConnection.connection).to.have.any.keys(_.union(_.keys(connectionData), ['uid', 'user']));\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "dd5f9af0-0044-4525-8faa-74908e93e2e3",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2f7a2683-24b5-4404-b63b-44050a2c86cf",
              "f3b36885-9d35-467b-9f84-15a7cdf2e649",
              "dd5f9af0-0044-4525-8faa-74908e93e2e3"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 35,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "ed259932-219a-479a-b02b-e7fc25c52e46",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\connection\\getUserConnections.enterprise.js",
        "file": "\\controllers\\test\\connection\\getUserConnections.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "be5b3e4b-ba0e-410e-bbb6-1e3c1936ea92",
            "title": "Connection.GetUserConnections",
            "fullFile": "C:\\work\\api\\controllers\\test\\connection\\getUserConnections.enterprise.js",
            "file": "\\controllers\\test\\connection\\getUserConnections.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Connection.GetUserConnections \"before all\" hook",
                "timedOut": false,
                "duration": 3308,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            var entUser = _.cloneDeep(testData.userObj)\n            _models.User.create(entUser, function(err, newuser) {\n                cbk(err, newuser);\n            })\n        })\n    },\n    function(user, cbk) {\n        fakeUser = user\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    },\n    function(result, cbk) {\n        dummyUser = result.body.output;\n        var conndata = _.cloneDeep(connectionData)\n        conndata.user = dummyUser.uid\n        _models.UserConnection.create(conndata, function(err, result) {\n            if (result) {\n                userConnection = result.toJSON()\n            }\n            cbk(err, userConnection)\n        })\n    }\n], function(err, res) {\n    done(err);\n})",
                "err": {},
                "isRoot": false,
                "uuid": "8a086327-9a69-4b45-82f9-aa7eee7248a4",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Connection.GetUserConnections \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "httpmock.cleanAll();\nasync.parallel([\n    function(cb) {\n        _models.UserConnection.remove({ uid: userConnection.uid }, function(err) {\n            cb(err)\n        })\n    },\n    function(cb) {\n        _models.User.remove({ uid: fakeUser.uid }, function(err) {\n            cb(err)\n        })\n    }\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "b016ca56-8566-4a59-b80b-7eab08e4a1e2",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise Connection.GetUserConnections Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "de2a70d3-5db6-4489-90e8-8b3532bf4b17",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get connection, if user connection found.",
                "fullTitle": "Enterprise Connection.GetUserConnections Should get connection, if user connection found.",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(_.first(res.body.output)).to.have.all.keys(['_id', 'userauths', 'icons','label']);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "06597a0d-51c8-4f05-be4b-23f39a56d5ce",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "de2a70d3-5db6-4489-90e8-8b3532bf4b17",
              "06597a0d-51c8-4f05-be4b-23f39a56d5ce"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 19,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "bf4f710a-1cfd-4224-b77c-068fa3efadf2",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\connection\\listConnections.enterprise.js",
        "file": "\\controllers\\test\\connection\\listConnections.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "a3bae970-9668-43e5-a646-32a7240a2d48",
            "title": "Connection.ListConnections",
            "fullFile": "C:\\work\\api\\controllers\\test\\connection\\listConnections.enterprise.js",
            "file": "\\controllers\\test\\connection\\listConnections.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Connection.ListConnections \"before all\" hook",
                "timedOut": false,
                "duration": 5721,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\n_models.User.remove({ email: testData.testRegistrationBody.email }, function(error, user) {\n    api.post(\"/enterprise/v1/signup\")\n        .send(testData.testRegistrationBody)\n        .expect(httpStatus.CREATED)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                dummyUser = res.body.output;\n                done();\n            }\n        });\n});",
                "err": {},
                "isRoot": false,
                "uuid": "d4d0a1a6-df85-46d1-9462-be9e0ab2409e",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should get list of connection.",
                "fullTitle": "Enterprise Connection.ListConnections Should get list of connection.",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.should.be.instanceOf(Array);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "91287ad8-2c3d-45ef-97f0-8d96745952c9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Connection.ListConnections Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "f31e1fca-d147-44d1-8ef3-1056f3fa457f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "91287ad8-2c3d-45ef-97f0-8d96745952c9",
              "f31e1fca-d147-44d1-8ef3-1056f3fa457f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 21,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "e341793f-27aa-4ca9-8bf9-9fd3721b8b11",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\connection\\testUserConnection.enterprise.js",
        "file": "\\controllers\\test\\connection\\testUserConnection.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "93767efb-d6f5-43fe-b155-3400995f757f",
            "title": "Connection.TestUserConnection",
            "fullFile": "C:\\work\\api\\controllers\\test\\connection\\testUserConnection.enterprise.js",
            "file": "\\controllers\\test\\connection\\testUserConnection.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Connection.TestUserConnection \"before all\" hook",
                "timedOut": false,
                "duration": 80,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data;\n        dummyUser = orgData.owner;\n        var conndata = _.cloneDeep(connectionData)\n        conndata.user = dummyUser.uid\n        _models.UserConnection.create(conndata, function(err, result) {\n            if (result) {\n                userConnection = result.toJSON()\n            }\n            done()\n        })\n    })\n})",
                "err": {},
                "isRoot": false,
                "uuid": "26410e5d-17f5-456b-ad55-1577752bc981",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Connection.TestUserConnection \"after all\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nhttpmock.cleanAll();\nasync.parallel([\n    function(cb) {\n        _models.UserConnection.remove({ uid: userConnection.uid }, function(err) {\n            cb(err)\n        })\n    }\n], function(err, result) {\n    done(err)\n})",
                "err": {},
                "isRoot": false,
                "uuid": "cb06258b-c110-4bba-aaa2-c42cb1a8731f",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise Connection.TestUserConnection Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + userConnection.uid + '/validate')\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "a773188e-2f92-4d46-ab3b-5779b8133933",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should update connection, if connection data is valid.",
                "fullTitle": "Enterprise Connection.TestUserConnection Should update connection, if connection data is valid.",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar connectionData = _.cloneDeep(testData.connectionBody);\nconnectionData.uid = userConnection.uid;\nvar opt = { uid: userConnection.uid, path: '/connection/' + userConnection.uid + '/validate' };\ncommonMock.connectionTestSuccess(opt);\napi.get(apiURL + userConnection.uid + '/validate')\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            userConnection = res.body.output\n            expect(userConnection).to.have.any.keys(_.union(_.keys(testData.connectionBody), ['uid', 'user']));\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "1a4ddb2c-2b3b-4ccf-b58f-c33f861e4b86",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a773188e-2f92-4d46-ab3b-5779b8133933",
              "1a4ddb2c-2b3b-4ccf-b58f-c33f861e4b86"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 18,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "36091343-bc59-4c2b-8e14-ac3acbed3bd4",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\connection\\updateUserConnection.enterprise.js",
        "file": "\\controllers\\test\\connection\\updateUserConnection.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "eb3bf4cc-4ddc-486b-9fa3-68e80551c120",
            "title": "Connection.UpdateUserConnection",
            "fullFile": "C:\\work\\api\\controllers\\test\\connection\\updateUserConnection.enterprise.js",
            "file": "\\controllers\\test\\connection\\updateUserConnection.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Connection.UpdateUserConnection \"before all\" hook",
                "timedOut": false,
                "duration": 158,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data;\n        dummyUser = orgData.owner;\n        var conndata = _.cloneDeep(connectionData)\n        conndata.user = dummyUser.uid\n        _models.UserConnection.create(conndata, function(err, result) {\n            if (result) {\n                userConnection = result.toJSON()\n            }\n            done()\n        })\n    })\n})",
                "err": {},
                "isRoot": false,
                "uuid": "3e5ba99b-8e73-4058-9359-1032a56e58bb",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Connection.UpdateUserConnection \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nhttpmock.cleanAll();\nasync.parallel([\n    function(cb) {\n        _models.UserConnection.remove({ uid: userConnection.uid }, function(err) {\n            cb(err)\n        })\n    }\n], function(err, result) {\n    done(err)\n})",
                "err": {},
                "isRoot": false,
                "uuid": "7e56dc91-6091-40df-90b3-166f720b9e49",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise Connection.UpdateUserConnection Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put(apiURL + userConnection.uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "cdfbb30e-0176-43d3-9577-61b9004fef22",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error if \"data\" key missing in request body.",
                "fullTitle": "Enterprise Connection.UpdateUserConnection Should get error if \"data\" key missing in request body.",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar connectionData = _.clone(testData.connectionBody);\nconnectionData = _.omit(connectionData, 'data');\napi.put(apiURL + userConnection.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .send(connectionData)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "1eb2a5ac-4617-41b3-b59d-ceaa9ec2f3b4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error if \"input\" key missing in request body.",
                "fullTitle": "Enterprise Connection.UpdateUserConnection Should get error if \"input\" key missing in request body.",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar connectionData = _.clone(testData.connectionBody);\nconnectionData = _.omit(connectionData, 'input');\napi.put(apiURL + userConnection.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .send(connectionData)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "c65d7f84-eac5-4603-8c7b-bd83eacd7eb6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error if \"name\" key missing in request body.",
                "fullTitle": "Enterprise Connection.UpdateUserConnection Should get error if \"name\" key missing in request body.",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar connectionData = _.clone(testData.connectionBody);\nconnectionData = _.omit(connectionData, 'name');\napi.put(apiURL + userConnection.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .send(connectionData)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "1b8f8474-914f-4f32-ab94-0bd335cf4ed6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error if user connection not found.",
                "fullTitle": "Enterprise Connection.UpdateUserConnection Should get error if user connection not found.",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n// var opt = { path: '/connection/dummyUser' };\n// commonMock.connectionGetNotFound(opt);\nvar connectionObj = _.clone(connectionData);\napi.put(apiURL + 'dummyUser')\n    .set('authtoken', dummyUser.authtoken)\n    .send(connectionObj)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.CONNECTION_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "9bf6f850-fd15-40b0-bae9-3bff454661a0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should update connection, if connection data is valid.",
                "fullTitle": "Enterprise Connection.UpdateUserConnection Should update connection, if connection data is valid.",
                "timedOut": false,
                "duration": 19,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar connectionData = _.cloneDeep(testData.connectionBody);\nconnectionData.uid = userConnection.uid;\nconnectionData.label = 'updated connection';\nvar opt = { path: '/connection/' + userConnection.uid };\ncommonMock.connectionsUpdateSuccess(opt);\napi.put(apiURL + userConnection.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .send(connectionData)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            userConnection = res.body.output\n            expect(userConnection.label).to.be.equal('updated connection');\n            expect(userConnection).to.have.any.keys(_.union(_.keys(testData.connectionBody), ['uid', 'user']));\n            var opt = { path: getTriggerPath, body: getTriggerPath };\n            commonMock.triggerGetSuccess(opt);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "164aaa27-b166-45f6-b6f3-c93514c4bfe0",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "cdfbb30e-0176-43d3-9577-61b9004fef22",
              "1eb2a5ac-4617-41b3-b59d-ceaa9ec2f3b4",
              "c65d7f84-eac5-4603-8c7b-bd83eacd7eb6",
              "1b8f8474-914f-4f32-ab94-0bd335cf4ed6",
              "9bf6f850-fd15-40b0-bae9-3bff454661a0",
              "164aaa27-b166-45f6-b6f3-c93514c4bfe0"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 81,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "4d40d913-f2fd-4e11-9192-2e08cb0c4286",
        "title": "contentStack",
        "fullFile": "C:\\work\\api\\controllers\\test\\contentStack\\deleteAnnouncement.js",
        "file": "\\controllers\\test\\contentStack\\deleteAnnouncement.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "56837d29-8631-475c-8cd0-78a81c5a6c56",
            "title": "contentStack.deleteAnnouncement",
            "fullFile": "C:\\work\\api\\controllers\\test\\contentStack\\deleteAnnouncement.js",
            "file": "\\controllers\\test\\contentStack\\deleteAnnouncement.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "contentStack contentStack.deleteAnnouncement \"before each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n_models.CmsMessage.remove({ title: \"UNIT_TEST_ANNOUNCEMENT\" }, function(error, message) {\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "ee7fd3dd-3a45-40d9-98c5-eb368212eeb9",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after each\" hook",
                "fullTitle": "contentStack contentStack.deleteAnnouncement \"after each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "httpmock.cleanAll();\ndone();",
                "err": {},
                "isRoot": false,
                "uuid": "3aed930f-3e7e-46c0-9aff-0f34f1dbf75a",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should delete announcement.",
                "fullTitle": "contentStack contentStack.deleteAnnouncement Should delete announcement.",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(\"/v1/cms/announcements\")\n    .send(announcementBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            _models.Announcement.find({ title: \"UNIT_TEST_ANNOUNCEMENT\" },\n                function(error, users) {\n                    var uid = (users || [{ uid: \"\" }])[0].uid || \"\";\n                    var paramUrl = apiURL + uid;\n                    api.delete(paramUrl)\n                        .expect(httpStatus.OK)\n                        .end(function(err, res) {\n                            if (err) {\n                                done(err);\n                            } else {\n                                _models.CmsMessage.find({ title: \"UNIT_TEST_ANNOUNCEMENT\" },\n                                    function(error, users) {\n                                        (error == null && (users || []).length == 0).should.equal(true);\n                                        done();\n                                    });\n                            }\n                        });\n                });\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "dce54f03-de5b-40c3-9bb2-e29c652a1058",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "dce54f03-de5b-40c3-9bb2-e29c652a1058"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 12,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "30062c69-25bc-4675-9a06-04a0021333e9",
        "title": "contentStack",
        "fullFile": "C:\\work\\api\\controllers\\test\\contentStack\\deleteEmailTemplate.js",
        "file": "\\controllers\\test\\contentStack\\deleteEmailTemplate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "9d01c963-93ca-4118-a1e1-0ccaef31eb8a",
            "title": "contentStack.deleteEmailTemplate",
            "fullFile": "C:\\work\\api\\controllers\\test\\contentStack\\deleteEmailTemplate.js",
            "file": "\\controllers\\test\\contentStack\\deleteEmailTemplate.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "contentStack contentStack.deleteEmailTemplate \"before each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n_models.CmsMail.remove({ template_id: \"UNIT_TEST_TEMPLATE\" }, function(error, template) {\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "379d0dae-b33e-4a2b-99ce-5ebe38c7dcce",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after each\" hook",
                "fullTitle": "contentStack contentStack.deleteEmailTemplate \"after each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "httpmock.cleanAll();\ndone();",
                "err": {},
                "isRoot": false,
                "uuid": "5a85b382-d5ac-4dcc-a936-a41cea4de5a8",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should delete email template.",
                "fullTitle": "contentStack contentStack.deleteEmailTemplate Should delete email template.",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(\"/v1/cms/templates\")\n    .send(emailTemplateBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            _models.CmsMail.find({ template_id: \"UNIT_TEST_TEMPLATE\" },\n                function(error, templates) {\n                    var uid = (templates || [{ uid: \"\" }])[0].uid || \"\";\n                    var paramUrl = apiURL + uid;\n                    api.delete(paramUrl)\n                        .expect(httpStatus.OK)\n                        .end(function(err, res) {\n                            if (err) {\n                                done(err);\n                            } else {\n                                _models.CmsMail.find({ template_id: \"UNIT_TEST_TEMPLATE\" },\n                                    function(error, templates) {\n                                        (error == null && (templates || []).length == 0).should.equal(true);\n                                        done();\n                                    });\n                            }\n                        });\n                });\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "66e87a02-fc20-46be-ae5a-cb60e106999b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "66e87a02-fc20-46be-ae5a-cb60e106999b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 10,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "2789f8a0-399e-4707-b5a3-104ed4e4b326",
        "title": "contentStack",
        "fullFile": "C:\\work\\api\\controllers\\test\\contentStack\\deleteMessage.js",
        "file": "\\controllers\\test\\contentStack\\deleteMessage.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "324de69c-6f74-4e10-80ef-ea0997494393",
            "title": "contentStack.deleteMessage",
            "fullFile": "C:\\work\\api\\controllers\\test\\contentStack\\deleteMessage.js",
            "file": "\\controllers\\test\\contentStack\\deleteMessage.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "contentStack contentStack.deleteMessage \"before each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n_models.CmsMessage.remove({ message_id: \"UNIT_TEST_MESSAGE\" }, function(error, message) {\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "f4ae3e91-757d-441f-9634-d23bdc794522",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after each\" hook",
                "fullTitle": "contentStack contentStack.deleteMessage \"after each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "httpmock.cleanAll();\ndone();",
                "err": {},
                "isRoot": false,
                "uuid": "45550d92-d515-42d9-acbd-492c4087ddd8",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should delete message.",
                "fullTitle": "contentStack contentStack.deleteMessage Should delete message.",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(\"/v1/cms/messages\")\n    .send(messageTemplateBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            _models.CmsMessage.find({ message_id: \"UNIT_TEST_MESSAGE\" },\n                function(error, users) {\n                    var uid = (users || [{ uid: \"\" }])[0].uid || \"\";\n                    var paramUrl = apiURL + uid;\n                    api.delete(paramUrl)\n                        .expect(httpStatus.OK)\n                        .end(function(err, res) {\n                            if (err) {\n                                done(err);\n                            } else {\n                                _models.CmsMessage.find({ message_id: \"UNIT_TEST_MESSAGE\" },\n                                    function(error, users) {\n                                        (error == null && (users || []).length == 0).should.equal(true);\n                                        done();\n                                    });\n                            }\n                        });\n                });\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "a664ae27-36c8-4d74-b44e-07be5b0d7a8f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a664ae27-36c8-4d74-b44e-07be5b0d7a8f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 11,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "031327d2-3679-44ab-85ce-23005e150fba",
        "title": "contentStack",
        "fullFile": "C:\\work\\api\\controllers\\test\\contentStack\\deletePlansFaq.js",
        "file": "\\controllers\\test\\contentStack\\deletePlansFaq.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "52d73fe6-ad51-43e7-9613-3a3565a80891",
            "title": "contentStack.deletePlansFaq",
            "fullFile": "C:\\work\\api\\controllers\\test\\contentStack\\deletePlansFaq.js",
            "file": "\\controllers\\test\\contentStack\\deletePlansFaq.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "contentStack contentStack.deletePlansFaq \"before each\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n_models.PlansFaq.remove({ question_title: \"UNIT_TEST_QUESTION\" }, function(error, message) {\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "7f0125c6-26c9-41d6-a846-d1b900493f29",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after each\" hook",
                "fullTitle": "contentStack contentStack.deletePlansFaq \"after each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "httpmock.cleanAll();\ndone();",
                "err": {},
                "isRoot": false,
                "uuid": "e1d4f70e-4a02-4c5f-b8de-eec9d99249c5",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should delete planfaqs.",
                "fullTitle": "contentStack contentStack.deletePlansFaq Should delete planfaqs.",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(\"/v1/cms/planfaqs\")\n    .send(planFaqBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            _models.PlansFaq.find({ question_title: \"UNIT_TEST_QUESTION\" },\n                function(error, planFaqs) {\n                    var uid = (planFaqs || [{ uid: \"\" }])[0].uid || \"\";\n                    var paramUrl = apiURL + uid;\n                    api.delete(paramUrl)\n                        .expect(httpStatus.OK)\n                        .end(function(err, res) {\n                            if (err) {\n                                done(err);\n                            } else {\n                                _models.PlansFaq.find({ question_title: \"UNIT_TEST_QUESTION\" },\n                                    function(error, planFaqs) {\n                                        (error == null && (planFaqs || []).length == 0).should.equal(true);\n                                        done();\n                                    });\n                            }\n                        });\n                });\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "c3735af7-147b-4b7f-9bd0-d186b9d4de3f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c3735af7-147b-4b7f-9bd0-d186b9d4de3f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 11,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "bbcc7d76-6369-430f-8b56-c1632e6ff2bb",
        "title": "contentStack",
        "fullFile": "C:\\work\\api\\controllers\\test\\contentStack\\getAnnouncement.js",
        "file": "\\controllers\\test\\contentStack\\getAnnouncement.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "d3afeb37-695a-4e93-9742-f9ed801e7a13",
            "title": "contentStack.getAnnouncement",
            "fullFile": "C:\\work\\api\\controllers\\test\\contentStack\\getAnnouncement.js",
            "file": "\\controllers\\test\\contentStack\\getAnnouncement.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "contentStack contentStack.getAnnouncement \"before each\" hook",
                "timedOut": false,
                "duration": 9,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.createFlowUser({}, function(error, user) {\n        if (error) {\n            done(error);\n        } else {\n            authToken = user.authtoken;\n            token = user.activation_token;\n            _id = user._id;\n            user_uid = user.uid;\n            done();\n        }\n    });\n});",
                "err": {},
                "isRoot": false,
                "uuid": "a4751a98-05a2-46e0-9a43-4edc03b993f3",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after each\" hook",
                "fullTitle": "contentStack contentStack.getAnnouncement \"after each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "httpmock.cleanAll();\ndone();",
                "err": {},
                "isRoot": false,
                "uuid": "ff2fdcfd-948b-482f-9e88-477a53b7c08f",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should get enterprise announcements.",
                "fullTitle": "contentStack contentStack.getAnnouncement Should get enterprise announcements.",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(\"/v1/cms/announcements\")\n    .send(announcementBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            api.get(apiGetURL)\n                .set(\"authtoken\", authToken)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        var isValid = Array.isArray(res.body.output.objects);\n                        if (isValid) {\n                            _.each(res.body.output.objects, function(item) {\n                                isValid = isValid && typeof(item._id) == \"undefined\" &&\n                                    typeof(item.__v) == \"undefined\";\n                            });\n                        }\n                        isValid.should.equal(true);\n                        done();\n                    }\n                });\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "ea72325b-b5eb-4477-bb0e-27315cfec063",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get particular enterprise announcement.",
                "fullTitle": "contentStack contentStack.getAnnouncement Should get particular enterprise announcement.",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(\"/v1/cms/announcements\")\n    .send(announcementBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            api.get(apiGetURL + \"/\" + announcementBody.entry.uid)\n                .set(\"authtoken\", authToken)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        var isValid = res.body.output.uid == announcementBody.entry.uid &&\n                            typeof(res.body.output._id) == \"undefined\" &&\n                            typeof(res.body.output.__v) == \"undefined\";\n                        isValid.should.equal(true);\n                        done();\n                    }\n                });\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "bbb6c057-65f3-4f12-b1e0-6bb8b95be8e2",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ea72325b-b5eb-4477-bb0e-27315cfec063",
              "bbb6c057-65f3-4f12-b1e0-6bb8b95be8e2"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 36,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "e1ee2ca1-a0a7-45c9-a381-42b419187312",
        "title": "contentStack",
        "fullFile": "C:\\work\\api\\controllers\\test\\contentStack\\getEmailTemplate.js",
        "file": "\\controllers\\test\\contentStack\\getEmailTemplate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "64a77314-9613-4dbf-9932-b1d599ff2c09",
            "title": "contentStack.getEmailTemplate",
            "fullFile": "C:\\work\\api\\controllers\\test\\contentStack\\getEmailTemplate.js",
            "file": "\\controllers\\test\\contentStack\\getEmailTemplate.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "contentStack contentStack.getEmailTemplate \"before each\" hook",
                "timedOut": false,
                "duration": 6033,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n_models.CmsMail.remove({ template_id: \"UNIT_TEST_TEMPLATE\" }, function(error, template) {\n    _models.User.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n        _models.Mail.remove({ $or: [{ to: new RegExp('^test.user+', \"i\") }, { to: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n            commonMock.setSignUpMocks(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/signup\")\n                .send(registrationBody)\n                .expect(httpStatus.CREATED)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        enterpriseAuthToken = res.body.output.authtoken;\n                        var tempRegistrationBody = global.getImmutable(registrationBody);\n                        tempRegistrationBody.email = \"test.user+100000@raweng.com\";\n                        commonMock.setSignUpMocks(httpmock, \"express\", {\n                            email: tempRegistrationBody.email\n                        });\n                        api.post(\"/express/v1/signup\")\n                            .send(tempRegistrationBody)\n                            .expect(httpStatus.CREATED)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    expressAuthToken = res.body.output.authtoken;\n                                    done();\n                                }\n                            });\n                    }\n                });\n        });\n    });\n});",
                "err": {},
                "isRoot": false,
                "uuid": "e45dc0c2-b95e-4013-b04c-700856ae1075",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after each\" hook",
                "fullTitle": "contentStack contentStack.getEmailTemplate \"after each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "httpmock.cleanAll();\ndone();",
                "err": {},
                "isRoot": false,
                "uuid": "38cb9901-d4ad-4535-817f-de96a240ea71",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should get enterprise email templates.",
                "fullTitle": "contentStack contentStack.getEmailTemplate Should get enterprise email templates.",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nemailTemplateBody.entry.enterprise = true;\nemailTemplateBody.entry.express = false;\napi.post(\"/v1/cms/templates\")\n    .send(emailTemplateBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            api.get(\"/enterprise/v1/cms/templates\")\n                .expect(httpStatus.OK)\n                .set(\"authtoken\", enterpriseAuthToken)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        var isValid = Array.isArray(res.body.output);\n                        if (isValid) {\n                            _.each(res.body.output, function(item) {\n                                isValid = isValid && typeof(item._id) == \"undefined\" &&\n                                    typeof(item.__v) == \"undefined\";\n                            });\n                        }\n                        isValid.should.equal(true);\n                        done();\n                    }\n                });\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "cb12b57d-e28e-4589-8005-17890f0e37ff",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get specific enterprise email template.",
                "fullTitle": "contentStack contentStack.getEmailTemplate Should get specific enterprise email template.",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nemailTemplateBody.entry.enterprise = true;\nemailTemplateBody.entry.express = false;\napi.post(\"/v1/cms/templates\")\n    .send(emailTemplateBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            api.get(\"/enterprise/v1/cms/templates/UNIT_TEST_TEMPLATE\")\n                .expect(httpStatus.OK)\n                .set(\"authtoken\", enterpriseAuthToken)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        var isValid = res.body.output.uid == emailTemplateBody.entry.uid &&\n                            typeof(res.body.output._id) == \"undefined\" &&\n                            typeof(res.body.output.__v) == \"undefined\";\n                        isValid.should.equal(true);\n                        done();\n                    }\n                });\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "0c226ff9-024f-483f-9366-ee168009104b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get express email templates.",
                "fullTitle": "contentStack contentStack.getEmailTemplate Should get express email templates.",
                "timedOut": false,
                "duration": 19,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nemailTemplateBody.entry.enterprise = false;\nemailTemplateBody.entry.express = true;\napi.post(\"/v1/cms/templates\")\n    .send(emailTemplateBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            api.get(\"/express/v1/cms/templates\")\n                .expect(httpStatus.OK)\n                .set(\"authtoken\", expressAuthToken)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        var isValid = Array.isArray(res.body.output);\n                        if (isValid) {\n                            _.each(res.body.output, function(item) {\n                                isValid = isValid && typeof(item._id) == \"undefined\" &&\n                                    typeof(item.__v) == \"undefined\";\n                            });\n                        }\n                        isValid.should.equal(true);\n                        done();\n                    }\n                });\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "c104f87b-310e-4506-bba7-5a63a1e2c807",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get specific express email template.",
                "fullTitle": "contentStack contentStack.getEmailTemplate Should get specific express email template.",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nemailTemplateBody.entry.enterprise = false;\nemailTemplateBody.entry.express = true;\napi.post(\"/v1/cms/templates\")\n    .send(emailTemplateBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            api.get(\"/express/v1/cms/templates/UNIT_TEST_TEMPLATE\")\n                .expect(httpStatus.OK)\n                .set(\"authtoken\", expressAuthToken)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        var isValid = res.body.output.uid == emailTemplateBody.entry.uid &&\n                            typeof(res.body.output._id) == \"undefined\" &&\n                            typeof(res.body.output.__v) == \"undefined\";\n                        isValid.should.equal(true);\n                        done();\n                    }\n                });\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "c1587281-5a3b-463c-9336-037b27169fd5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get template not found error message.",
                "fullTitle": "contentStack contentStack.getEmailTemplate Should get template not found error message.",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nemailTemplateBody.entry.enterprise = false;\nemailTemplateBody.entry.express = true;\napi.post(\"/v1/cms/templates\")\n    .send(emailTemplateBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            api.get(\"/express/v1/cms/templates/UNIT_TEST_TEMPLATE0\")\n                .set(\"authtoken\", expressAuthToken)\n                .expect(httpStatus.BAD_REQUEST)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        res.body.error.message.should.equal(messageList.CMS_EMAIL_TEMPLATE_NOT_FOUND);\n                        done();\n                    }\n                });\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "e605e3c7-a6ae-45ef-96ce-a7b040f342ce",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "cb12b57d-e28e-4589-8005-17890f0e37ff",
              "0c226ff9-024f-483f-9366-ee168009104b",
              "c104f87b-310e-4506-bba7-5a63a1e2c807",
              "c1587281-5a3b-463c-9336-037b27169fd5",
              "e605e3c7-a6ae-45ef-96ce-a7b040f342ce"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 94,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "e5b70392-afcf-4cff-9d32-c9ad9ba2e908",
        "title": "contentStack",
        "fullFile": "C:\\work\\api\\controllers\\test\\contentStack\\getLatestAnnouncement.js",
        "file": "\\controllers\\test\\contentStack\\getLatestAnnouncement.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "379a76b1-a6f8-4011-a6b9-b591918fa922",
            "title": "contentStack.getLatestAnnouncement",
            "fullFile": "C:\\work\\api\\controllers\\test\\contentStack\\getLatestAnnouncement.js",
            "file": "\\controllers\\test\\contentStack\\getLatestAnnouncement.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "contentStack contentStack.getLatestAnnouncement \"before each\" hook",
                "timedOut": false,
                "duration": 9,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.createFlowUser({}, function(error, user) {\n        if (error) {\n            done(error);\n        } else {\n            authToken = user.authtoken;\n            token = user.activation_token;\n            _id = user._id;\n            user_uid = user.uid;\n            done();\n        }\n    });\n});",
                "err": {},
                "isRoot": false,
                "uuid": "c073e9d3-fe5f-4123-b907-4a7d883130e9",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after each\" hook",
                "fullTitle": "contentStack contentStack.getLatestAnnouncement \"after each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "httpmock.cleanAll();\ndone();",
                "err": {},
                "isRoot": false,
                "uuid": "bc408640-df6a-4eb5-a960-53a908227bc3",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should get latest enterprise announcement.",
                "fullTitle": "contentStack contentStack.getLatestAnnouncement Should get latest enterprise announcement.",
                "timedOut": false,
                "duration": 22,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(\"/v1/cms/announcements\")\n    .send(announcementBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            api.get(apiGetURL)\n                .set(\"authtoken\", authToken)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        res.body.output.uid.should.not.equal(\"\");\n                        done();\n                    }\n                });\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "8d5e531c-44f5-44f7-8cd2-6970426e002a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8d5e531c-44f5-44f7-8cd2-6970426e002a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 22,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "28bd7c25-86e7-4db6-a9cb-b27284af7de2",
        "title": "contentStack",
        "fullFile": "C:\\work\\api\\controllers\\test\\contentStack\\getMessage.js",
        "file": "\\controllers\\test\\contentStack\\getMessage.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "2210ac8e-fc95-4ae9-99ad-483fc8c1ec04",
            "title": "contentStack.getMessage",
            "fullFile": "C:\\work\\api\\controllers\\test\\contentStack\\getMessage.js",
            "file": "\\controllers\\test\\contentStack\\getMessage.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "contentStack contentStack.getMessage \"before each\" hook",
                "timedOut": false,
                "duration": 4713,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n_models.CmsMessage.remove({ message_id: \"UNIT_TEST_MESSAGE\" }, function(error, message) {\n    _models.User.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n        _models.Mail.remove({ $or: [{ to: new RegExp('^test.user+', \"i\") }, { to: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n            commonMock.setSignUpMocks(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/signup\")\n                .send(registrationBody)\n                .expect(httpStatus.CREATED)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        enterpriseAuthToken = res.body.output.authtoken;\n                        var tempRegistrationBody = global.getImmutable(registrationBody);\n                        tempRegistrationBody.email = \"test.user+100000@raweng.com\";\n                        commonMock.setSignUpMocks(httpmock, \"express\", {\n                            email: tempRegistrationBody.email\n                        });\n                        api.post(\"/express/v1/signup\")\n                            .send(tempRegistrationBody)\n                            .expect(httpStatus.CREATED)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    expressAuthToken = res.body.output.authtoken;\n                                    done();\n                                }\n                            });\n                    }\n                });\n        });\n    });\n});",
                "err": {},
                "isRoot": false,
                "uuid": "9f9f0c53-290b-4a4e-a74f-d602192dc1e7",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after each\" hook",
                "fullTitle": "contentStack contentStack.getMessage \"after each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "httpmock.cleanAll();\ndone();",
                "err": {},
                "isRoot": false,
                "uuid": "05c1b9e0-9cf7-4e81-86c2-34a0e5e9c453",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should get enterprise messages.",
                "fullTitle": "contentStack contentStack.getMessage Should get enterprise messages.",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nmessageTemplateBody.entry.enterprise = true;\nmessageTemplateBody.entry.express = false;\napi.post(\"/v1/cms/messages\")\n    .send(messageTemplateBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            api.get(\"/enterprise/v1/cms/messages\")\n                .set(\"authtoken\", enterpriseAuthToken)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        var isValid = Array.isArray(res.body.output);\n                        if (isValid) {\n                            _.each(res.body.output, function(item) {\n                                isValid = isValid && typeof(item._id) == \"undefined\" &&\n                                    typeof(item.__v) == \"undefined\";\n                            });\n                        }\n                        isValid.should.equal(true);\n                        done();\n                    }\n                });\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "08675b9f-0bd5-4208-b72c-4edf1e568315",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get specific enterprise message.",
                "fullTitle": "contentStack contentStack.getMessage Should get specific enterprise message.",
                "timedOut": false,
                "duration": 19,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nmessageTemplateBody.entry.enterprise = true;\nmessageTemplateBody.entry.express = false;\napi.post(\"/v1/cms/messages\")\n    .send(messageTemplateBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            api.get(\"/enterprise/v1/cms/messages/UNIT_TEST_MESSAGE\")\n                .set(\"authtoken\", enterpriseAuthToken)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        var isValid = res.body.output.uid == messageTemplateBody.entry.uid &&\n                            typeof(res.body.output._id) == \"undefined\" &&\n                            typeof(res.body.output.__v) == \"undefined\";\n                        isValid.should.equal(true);\n                        done();\n                    }\n                });\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "559dc78c-1ed0-4adf-bc71-d6a61b1e1809",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get express messages.",
                "fullTitle": "contentStack contentStack.getMessage Should get express messages.",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nmessageTemplateBody.entry.enterprise = false;\nmessageTemplateBody.entry.express = true;\napi.post(\"/v1/cms/messages\")\n    .send(messageTemplateBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            api.get(\"/express/v1/cms/messages\")\n                .set(\"authtoken\", expressAuthToken)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n\n                        var isValid = Array.isArray(res.body.output);\n                        if (isValid) {\n                            _.each(res.body.output, function(item) {\n                                isValid = isValid && typeof(item._id) == \"undefined\" &&\n                                    typeof(item.__v) == \"undefined\";\n                            });\n                        }\n                        isValid.should.equal(true);\n                        done();\n                    }\n                });\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "b8de6be8-582b-47b9-a3a1-0a495c537338",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get specific express message.",
                "fullTitle": "contentStack contentStack.getMessage Should get specific express message.",
                "timedOut": false,
                "duration": 19,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nmessageTemplateBody.entry.enterprise = false;\nmessageTemplateBody.entry.express = true;\napi.post(\"/v1/cms/messages\")\n    .send(messageTemplateBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            api.get(\"/express/v1/cms/messages/UNIT_TEST_MESSAGE\")\n                .set(\"authtoken\", expressAuthToken)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        var isValid = res.body.output.uid == messageTemplateBody.entry.uid &&\n                            typeof(res.body.output._id) == \"undefined\" &&\n                            typeof(res.body.output.__v) == \"undefined\";\n                        isValid.should.equal(true);\n                        done();\n                    }\n                });\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "451556cf-a1c9-499b-87f2-1f89fffe9818",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get message not found error message.",
                "fullTitle": "contentStack contentStack.getMessage Should get message not found error message.",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nmessageTemplateBody.entry.enterprise = false;\nmessageTemplateBody.entry.express = true;\napi.post(\"/v1/cms/messages\")\n    .send(messageTemplateBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            api.get(\"/enterprise/v1/cms/messages/UNIT_TEST_MESSAGE0\")\n                .set(\"authtoken\", enterpriseAuthToken)\n                .expect(httpStatus.BAD_REQUEST)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        res.body.error.message.should.equal(messageList.CMS_MESSAGE_NOT_FOUND);\n                        done();\n                    }\n                });\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "1b5286de-b9ff-4bc8-b520-901ec77e4645",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "08675b9f-0bd5-4208-b72c-4edf1e568315",
              "559dc78c-1ed0-4adf-bc71-d6a61b1e1809",
              "b8de6be8-582b-47b9-a3a1-0a495c537338",
              "451556cf-a1c9-499b-87f2-1f89fffe9818",
              "1b5286de-b9ff-4bc8-b520-901ec77e4645"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 92,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "6ff7dfd1-34ac-41db-9d47-643b798d3d1c",
        "title": "contentStack",
        "fullFile": "C:\\work\\api\\controllers\\test\\contentStack\\getPlansFaq.js",
        "file": "\\controllers\\test\\contentStack\\getPlansFaq.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "0e6fba91-76e9-47e6-85e7-c8e10039c0a5",
            "title": "contentStack.getPlansFaq",
            "fullFile": "C:\\work\\api\\controllers\\test\\contentStack\\getPlansFaq.js",
            "file": "\\controllers\\test\\contentStack\\getPlansFaq.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "contentStack contentStack.getPlansFaq \"before each\" hook",
                "timedOut": false,
                "duration": 8,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.createFlowUser({}, function(error, user) {\n        if (error) {\n            done(error);\n        } else {\n            authToken = user.authtoken;\n            token = user.activation_token;\n            _id = user._id;\n            user_uid = user.uid;\n            done();\n        }\n    });\n});",
                "err": {},
                "isRoot": false,
                "uuid": "20734cf0-48e4-4ea1-be14-28ad5c72c4e5",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after each\" hook",
                "fullTitle": "contentStack contentStack.getPlansFaq \"after each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "httpmock.cleanAll();\ndone();",
                "err": {},
                "isRoot": false,
                "uuid": "8a371b33-c3e0-45d4-87a3-006d36788703",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should get enterprise planfaq.",
                "fullTitle": "contentStack contentStack.getPlansFaq Should get enterprise planfaq.",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(\"/v1/cms/planfaqs\")\n    .send(planFaqBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            api.get(\"/enterprise/v1/cms/planfaqs\")\n                .set(\"authtoken\", authToken)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        var isValid = Array.isArray(res.body.output);\n                        if (isValid) {\n                            _.each(res.body.output, function(item) {\n                                isValid = isValid && typeof(item._id) == \"undefined\" &&\n                                    typeof(item.__v) == \"undefined\";\n                            });\n                        }\n                        isValid.should.equal(true);\n                        done();\n                    }\n                });\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "13e8e43a-7709-4875-9c50-47bba5376936",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get particular enterprise planfaq.",
                "fullTitle": "contentStack contentStack.getPlansFaq Should get particular enterprise planfaq.",
                "timedOut": false,
                "duration": 26,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(\"/v1/cms/planfaqs\")\n    .send(planFaqBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            api.get(\"/enterprise/v1/cms/planfaqs/\" + planFaqBody.entry.uid)\n                .set(\"authtoken\", authToken)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        var isValid = res.body.output.uid == planFaqBody.entry.uid &&\n                            typeof(res.body.output._id) == \"undefined\" &&\n                            typeof(res.body.output.__v) == \"undefined\";\n                        isValid.should.equal(true);\n                        done();\n                    }\n                });\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "d0109471-4a13-4e35-926e-2b83aa1c9b1e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "13e8e43a-7709-4875-9c50-47bba5376936",
              "d0109471-4a13-4e35-926e-2b83aa1c9b1e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 47,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "9dab90b3-c0dd-4886-b5f6-b20d32417b8c",
        "title": "contentStack",
        "fullFile": "C:\\work\\api\\controllers\\test\\contentStack\\saveAnnouncement.js",
        "file": "\\controllers\\test\\contentStack\\saveAnnouncement.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "48186a4e-d554-4cfb-9cac-5f4ac1977983",
            "title": "contentStack.saveAnnouncement",
            "fullFile": "C:\\work\\api\\controllers\\test\\contentStack\\saveAnnouncement.js",
            "file": "\\controllers\\test\\contentStack\\saveAnnouncement.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "contentStack contentStack.saveAnnouncement \"before each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n_models.Announcement.remove({ title: \"UNIT_TEST_ANNOUNCEMENT\" }, function(error, message) {\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "7bb7642a-9879-4d7a-96a6-e9f1c663771d",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after each\" hook",
                "fullTitle": "contentStack contentStack.saveAnnouncement \"after each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "httpmock.cleanAll();\ndone();",
                "err": {},
                "isRoot": false,
                "uuid": "ac6019a9-f415-486c-b1da-6bf038b6660f",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should create announcement.",
                "fullTitle": "contentStack contentStack.saveAnnouncement Should create announcement.",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .send(announcementBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.status.should.equal(\"success\");\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "62e805f6-b5cb-4bfe-a5f5-ceb4e9232abd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should give require validators errors.",
                "fullTitle": "contentStack contentStack.saveAnnouncement Should give require validators errors.",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .send({})\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.error[\"entry.uid\"].message == messageList.CMS_ANNOUNCEMENT_UID_NOT_FOUND;\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "30427fae-9de3-473c-a681-f83b99fdb88c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should update existing announcement.",
                "fullTitle": "contentStack contentStack.saveAnnouncement Should update existing announcement.",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .send(announcementBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            announcementBody.entry.rich_text_editor = \"UNIT_TEST_ANNOUNCEMENT_BODY_00\";\n            api.post(apiURL)\n                .send(announcementBody)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        _models.Announcement.find({ title: \"UNIT_TEST_ANNOUNCEMENT\" },\n                            function(error, announcement) {\n                                var isValid =\n                                    (announcement || []).length == 1 &&\n                                    (announcement || [{ raw_html_body: \"\" }])[0].raw_html_body == \"UNIT_TEST_ANNOUNCEMENT_BODY_00\" &&\n                                    typeof(res.body.output._id) == \"undefined\" &&\n                                    typeof(res.body.output.__v) == \"undefined\";\n                                isValid.should.equal(true);\n                                done();\n                            });\n                    }\n                });\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "44a9da69-6bdd-4de4-8a5d-6ff40f52ca12",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "62e805f6-b5cb-4bfe-a5f5-ceb4e9232abd",
              "30427fae-9de3-473c-a681-f83b99fdb88c",
              "44a9da69-6bdd-4de4-8a5d-6ff40f52ca12"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 20,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "7a119a61-bbf2-4508-9e26-749321729d27",
        "title": "contentStack",
        "fullFile": "C:\\work\\api\\controllers\\test\\contentStack\\saveEmailTemplate.js",
        "file": "\\controllers\\test\\contentStack\\saveEmailTemplate.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "b0bcc01c-44f8-4cad-951a-e16c2d662584",
            "title": "contentStack.saveEmailTemplate",
            "fullFile": "C:\\work\\api\\controllers\\test\\contentStack\\saveEmailTemplate.js",
            "file": "\\controllers\\test\\contentStack\\saveEmailTemplate.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "contentStack contentStack.saveEmailTemplate \"before each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n_models.CmsMail.remove({ template_id: \"UNIT_TEST_TEMPLATE\" }, function(error, template) {\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "b944b3e5-af86-40c0-92a0-6b4c61f05253",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after each\" hook",
                "fullTitle": "contentStack contentStack.saveEmailTemplate \"after each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "httpmock.cleanAll();\ndone();",
                "err": {},
                "isRoot": false,
                "uuid": "6ddce82c-767b-458c-9b50-78f0858e375f",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should create email template.",
                "fullTitle": "contentStack contentStack.saveEmailTemplate Should create email template.",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .send(emailTemplateBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.status == \"success\" &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\";\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "94dce11c-9098-4694-a756-bae395f3b66b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should give require validators errors.",
                "fullTitle": "contentStack contentStack.saveEmailTemplate Should give require validators errors.",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .send({})\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.error[\"entry.uid\"].message == messageList.CMS_EMAIL_UID_NOT_FOUND &&\n                res.body.error[\"entry.enterprise\"].message == messageList.CMS_EMAIL_ENTERPRISE_NOT_FOUND &&\n                res.body.error[\"entry.express\"].message == messageList.CMS_EMAIL_EXPRESS_NOT_FOUND &&\n                res.body.error[\"entry.template_id\"].message == messageList.CMS_EMAIL_TEMPLATES_UID_NOT_FOUND;\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "82638485-534d-4d3d-a7cf-7e6c29b1c010",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should update existing email template.",
                "fullTitle": "contentStack contentStack.saveEmailTemplate Should update existing email template.",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .send(emailTemplateBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            emailTemplateBody.entry.title = \"TITLE_GOT_CHANGED\";\n            api.post(apiURL)\n                .send(emailTemplateBody)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        _models.CmsMail.find({ template_id: \"UNIT_TEST_TEMPLATE\" },\n                            function(error, templates) {\n                                var isValid =\n                                    (templates || []).length == 1 &&\n                                    (templates || [{ title: \"\" }])[0].title == \"TITLE_GOT_CHANGED\" &&\n                                    typeof(res.body.output._id) == \"undefined\" &&\n                                    typeof(res.body.output.__v) == \"undefined\";\n                                isValid.should.equal(true);\n                                done();\n                            });\n                    }\n                });\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "c619ee79-dd79-4ea7-9959-13bef258843b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "94dce11c-9098-4694-a756-bae395f3b66b",
              "82638485-534d-4d3d-a7cf-7e6c29b1c010",
              "c619ee79-dd79-4ea7-9959-13bef258843b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 21,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "b0a99976-aea0-4fc9-9556-d2c23b8b7423",
        "title": "contentStack",
        "fullFile": "C:\\work\\api\\controllers\\test\\contentStack\\saveMessage.js",
        "file": "\\controllers\\test\\contentStack\\saveMessage.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "1a8aad7c-ed0e-4d50-8bc0-f58850263e38",
            "title": "contentStack.saveMessage",
            "fullFile": "C:\\work\\api\\controllers\\test\\contentStack\\saveMessage.js",
            "file": "\\controllers\\test\\contentStack\\saveMessage.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "contentStack contentStack.saveMessage \"before each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n_models.CmsMessage.remove({ message_id: \"UNIT_TEST_MESSAGE\" }, function(error, message) {\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "8971eb52-348c-44ee-a1f5-17c7b62acc81",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after each\" hook",
                "fullTitle": "contentStack contentStack.saveMessage \"after each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "httpmock.cleanAll();\ndone();",
                "err": {},
                "isRoot": false,
                "uuid": "8c27572b-ba7e-4c0b-a737-aede06d40112",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should create message.",
                "fullTitle": "contentStack contentStack.saveMessage Should create message.",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .send(messageTemplateBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.status == \"success\" &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\";\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "09ff0083-10ae-4aee-8d6a-9cecaef95802",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should give require validators errors.",
                "fullTitle": "contentStack contentStack.saveMessage Should give require validators errors.",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .send({})\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.error[\"entry.uid\"].message == messageList.CMS_MESSAGE_UID_NOT_FOUND &&\n                res.body.error[\"entry.enterprise\"].message == messageList.CMS_MESSAGE_ENTERPRISE_NOT_FOUND &&\n                res.body.error[\"entry.express\"].message == messageList.CMS_MESSAGE_EXPRESS_NOT_FOUND &&\n                res.body.error[\"entry.message_id\"].message == messageList.CMS_MESSAGE_TEMPLATES_UID_NOT_FOUND;\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "ffe7a3cf-5296-4019-b66d-f879a7aa05cd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should update existing message.",
                "fullTitle": "contentStack contentStack.saveMessage Should update existing message.",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .send(messageTemplateBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            messageTemplateBody.entry.title = \"TITLE_GOT_CHANGED\";\n            api.post(apiURL)\n                .send(messageTemplateBody)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        _models.CmsMessage.find({ message_id: \"UNIT_TEST_MESSAGE\" },\n                            function(error, messages) {\n                                var isValid =\n                                    (messages || []).length == 1 &&\n                                    (messages || [{ title: \"\" }])[0].title == \"TITLE_GOT_CHANGED\" &&\n                                    typeof(res.body.output._id) == \"undefined\" &&\n                                    typeof(res.body.output.__v) == \"undefined\";\n                                isValid.should.equal(true);\n                                done();\n                            });\n                    }\n                });\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "0dfdec3d-0d7f-432e-8aa7-88322ddf80f0",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "09ff0083-10ae-4aee-8d6a-9cecaef95802",
              "ffe7a3cf-5296-4019-b66d-f879a7aa05cd",
              "0dfdec3d-0d7f-432e-8aa7-88322ddf80f0"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 20,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "a608034e-e94d-4482-8582-4933f6fc99ba",
        "title": "contentStack",
        "fullFile": "C:\\work\\api\\controllers\\test\\contentStack\\savePlansFaq.js",
        "file": "\\controllers\\test\\contentStack\\savePlansFaq.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "6e9b5e1b-a5fd-4901-b5a7-bacf648f6f6a",
            "title": "contentStack.savePlansFaq",
            "fullFile": "C:\\work\\api\\controllers\\test\\contentStack\\savePlansFaq.js",
            "file": "\\controllers\\test\\contentStack\\savePlansFaq.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "contentStack contentStack.savePlansFaq \"before each\" hook",
                "timedOut": false,
                "duration": 8,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.createFlowUser({}, function(error, user) {\n        if (error) {\n            done(error);\n        } else {\n            authToken = user.authtoken;\n            token = user.activation_token;\n            _id = user._id;\n            user_uid = user.uid;\n            done();\n        }\n    });\n});",
                "err": {},
                "isRoot": false,
                "uuid": "f57122ef-dc5d-4b60-906e-3523980482d9",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after each\" hook",
                "fullTitle": "contentStack contentStack.savePlansFaq \"after each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "httpmock.cleanAll();\ndone();",
                "err": {},
                "isRoot": false,
                "uuid": "23924c4a-db22-4089-a20c-8a3e803f7394",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should save planfaqs.",
                "fullTitle": "contentStack contentStack.savePlansFaq Should save planfaqs.",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .send(planFaqBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.status == \"success\" &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\";\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "6ab9a015-db87-4e4e-b367-edabb8789d16",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should give require validators errors.",
                "fullTitle": "contentStack contentStack.savePlansFaq Should give require validators errors.",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .send({})\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.error[\"entry.uid\"].message == messageList.CMS_PLANFAQ_UID_NOT_FOUND &&\n                res.body.error[\"message\"] == messageList.PLEASE_SEND_VALID_PARAMETERS\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "69f09fc5-4e2e-472a-b029-33ada0569180",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should update existing planfaqs.",
                "fullTitle": "contentStack contentStack.savePlansFaq Should update existing planfaqs.",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .send(planFaqBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            planFaqBody.entry.answer = \"UNIT_TEST_ANSWER00\";\n            api.post(apiURL)\n                .send(planFaqBody)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        _models.PlansFaq.find({ question_title: \"UNIT_TEST_QUESTION\" },\n                            function(error, planFaq) {\n                                var isValid =\n                                    (planFaq || []).length == 1 &&\n                                    (planFaq || [{ question_title: \"\" }])[0].answer == \"UNIT_TEST_ANSWER00\" &&\n                                    typeof(res.body.output._id) == \"undefined\" &&\n                                    typeof(res.body.output.__v) == \"undefined\";\n\n                                isValid.should.equal(true);\n                                done();\n                            });\n                    }\n                });\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "77673946-c53b-4d36-b9da-d6b3209882a0",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "6ab9a015-db87-4e4e-b367-edabb8789d16",
              "69f09fc5-4e2e-472a-b029-33ada0569180",
              "77673946-c53b-4d36-b9da-d6b3209882a0"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 20,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "f24e4be0-3e98-4545-a5fc-4398926ca202",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\customeIntegration\\createCustomIntegration.enterprise.js",
        "file": "\\controllers\\test\\customeIntegration\\createCustomIntegration.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "fe221c9e-4d15-47b1-ae86-698547c77c76",
            "title": "CustomIntegration.Create",
            "fullFile": "C:\\work\\api\\controllers\\test\\customeIntegration\\createCustomIntegration.enterprise.js",
            "file": "\\controllers\\test\\customeIntegration\\createCustomIntegration.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise CustomIntegration.Create \"before all\" hook",
                "timedOut": false,
                "duration": 3152,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(userTrigger, cbk) {\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        dummyUser = res.body.output;\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "9990d8a2-b322-45d5-976c-78f851ad199b",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise CustomIntegration.Create \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "_models.CustomIntegration.remove({ user_uid: dummyUser.uid }, function(err, deletedFlow) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "d2c9260b-5945-4216-9a3b-d42ed7a07e70",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise CustomIntegration.Create Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "7a142201-0a86-43b0-a2ad-ab770d084c19",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should give error, if \"label\" key is blank or missing.",
                "fullTitle": "Enterprise CustomIntegration.Create Should give error, if \"label\" key is blank or missing.",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar missingLabelKey = _.clone(data)\nmissingLabelKey.label = '';\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(missingLabelKey)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "70858b1e-72ef-48a0-86dc-353e4bff9804",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should give error, if \"code_template\" key is blank or missing.",
                "fullTitle": "Enterprise CustomIntegration.Create Should give error, if \"code_template\" key is blank or missing.",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar missingLabelKey = _.clone(data)\nmissingLabelKey.code_template = '';\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(missingLabelKey)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "84102e9d-15bd-4dd5-8acc-4db685f454bf",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should give error, if \"compile_error\" key is blank or missing.",
                "fullTitle": "Enterprise CustomIntegration.Create Should give error, if \"compile_error\" key is blank or missing.",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar missingLabelKey = _.clone(data)\nmissingLabelKey.compile_error = '';\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(missingLabelKey)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "92acb24c-faf5-4e56-be9f-3da2ccc61b23",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should give error, if \"compiled_result\" key is blank or missing.",
                "fullTitle": "Enterprise CustomIntegration.Create Should give error, if \"compiled_result\" key is blank or missing.",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar missingLabelKey = _.clone(data)\nmissingLabelKey.compiled_result = '';\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(missingLabelKey)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "2829fe12-d1ee-4091-bff6-3c899c720c42",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should give error, if \"code_template\" key is not string.",
                "fullTitle": "Enterprise CustomIntegration.Create Should give error, if \"code_template\" key is not string.",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar invalidCodeTemplate = _.clone(data)\ninvalidCodeTemplate.code_template = {};\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(invalidCodeTemplate)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.CUSTOM_INTEGRATION_PARAM_ERROR);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "863b98f7-5693-4842-a941-cc60998cc02d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should give error, if \"compiled_result\" key is not string.",
                "fullTitle": "Enterprise CustomIntegration.Create Should give error, if \"compiled_result\" key is not string.",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar invalidCompiledResult = _.clone(data)\ninvalidCompiledResult.compiled_result = {};\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(invalidCompiledResult)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.CUSTOM_INTEGRATION_PARAM_ERROR);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "9fb388d6-1612-4315-976e-c0f8b48a0775",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should create custom integration if data is valid.",
                "fullTitle": "Enterprise CustomIntegration.Create Should create custom integration if data is valid.",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(data)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output.user_uid).to.be.equal(dummyUser.uid);\n            expect(res.body.output).not.to.have.all.keys(['_id', '__v']);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "1ded1e13-11bd-468c-9623-0a40d15982d2",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "7a142201-0a86-43b0-a2ad-ab770d084c19",
              "70858b1e-72ef-48a0-86dc-353e4bff9804",
              "84102e9d-15bd-4dd5-8acc-4db685f454bf",
              "92acb24c-faf5-4e56-be9f-3da2ccc61b23",
              "2829fe12-d1ee-4091-bff6-3c899c720c42",
              "863b98f7-5693-4842-a941-cc60998cc02d",
              "9fb388d6-1612-4315-976e-c0f8b48a0775",
              "1ded1e13-11bd-468c-9623-0a40d15982d2"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 101,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "39a10230-8431-46fb-9a03-9311275e5f22",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\customeIntegration\\deleteCustomIntegration.enterprise.js",
        "file": "\\controllers\\test\\customeIntegration\\deleteCustomIntegration.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "036d761c-1a48-444a-939e-24c71a0fa06d",
            "title": "CustomIntegration.Delete",
            "fullFile": "C:\\work\\api\\controllers\\test\\customeIntegration\\deleteCustomIntegration.enterprise.js",
            "file": "\\controllers\\test\\customeIntegration\\deleteCustomIntegration.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise CustomIntegration.Delete \"before all\" hook",
                "timedOut": false,
                "duration": 2109,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(user, cbk) {\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    },\n    function(result, cbk) {\n        dummyUser = result.body.output;\n        api.post(apiURL)\n            .set('authtoken', dummyUser.authtoken)\n            .send(data)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        customIntegration = res.body.output;\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "92677f6e-aff9-4ff1-be8c-7744a6d56b7f",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise CustomIntegration.Delete \"after all\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "_models.CustomIntegration.remove({ user_uid: dummyUser.uid }, function(err, deletedFlow) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "92651907-f54f-4424-97c5-4246bb6bf09e",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise CustomIntegration.Delete Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.delete(apiURL + '/' + customIntegration.uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "ec688ebb-167a-4306-a832-4ea558bf91d9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should give error, if integration not found.",
                "fullTitle": "Enterprise CustomIntegration.Delete Should give error, if integration not found.",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.delete(apiURL + '/dummyIntegration')\n    .set('authtoken', dummyUser.authtoken)\n    .send(data)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.CUSTOM_INTEGRATION_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "79a431e9-bb28-46ec-a5b2-f8cc9795d54f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should delete custom if integration found.",
                "fullTitle": "Enterprise CustomIntegration.Delete Should delete custom if integration found.",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.delete(apiURL + '/' + customIntegration.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .send(data)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output.result).to.be.equal('success');\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "a7afbbb0-7418-4782-906d-d4d118040969",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ec688ebb-167a-4306-a832-4ea558bf91d9",
              "79a431e9-bb28-46ec-a5b2-f8cc9795d54f",
              "a7afbbb0-7418-4782-906d-d4d118040969"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 33,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "91bb0348-5131-46b9-96ea-95a9720a3176",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\customeIntegration\\getCompiledCustomIntegrationByUserUID.enterprise.js",
        "file": "\\controllers\\test\\customeIntegration\\getCompiledCustomIntegrationByUserUID.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "4ccfa6a9-8224-411d-bc66-854f229ab84e",
            "title": "CustomIntegration.GetByUserUID",
            "fullFile": "C:\\work\\api\\controllers\\test\\customeIntegration\\getCompiledCustomIntegrationByUserUID.enterprise.js",
            "file": "\\controllers\\test\\customeIntegration\\getCompiledCustomIntegrationByUserUID.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise CustomIntegration.GetByUserUID \"before all\" hook",
                "timedOut": false,
                "duration": 4013,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(user, cbk) {\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    },\n    function(result, cbk) {\n        dummyUser = result.body.output;\n        api.post(apiURL)\n            .set('authtoken', dummyUser.authtoken)\n            .send(data)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        customIntegration = res.body.output;\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "1c718c47-bf2c-4721-8281-ee4ec4199dcd",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise CustomIntegration.GetByUserUID \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "_models.CustomIntegration.remove({ user_uid: dummyUser.uid }, function(err, deletedFlow) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "5255bf02-20ec-46c6-84e4-4d41060bb84d",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise CustomIntegration.GetByUserUID Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + '/compiled')\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "c9ab89aa-1de0-4c23-a43f-435637cc906c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get custom if integration found.",
                "fullTitle": "Enterprise CustomIntegration.GetByUserUID Should get custom if integration found.",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + '/compiled')\n    .set('authtoken', dummyUser.authtoken)\n    .send(data)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output).to.be.a('array');\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "bcfc1313-736d-422d-be3c-2d062e841e95",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c9ab89aa-1de0-4c23-a43f-435637cc906c",
              "bcfc1313-736d-422d-be3c-2d062e841e95"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 17,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "26ae77f9-d1eb-4492-827a-6580431ac71a",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\customeIntegration\\getCustomCss.enterprise.js",
        "file": "\\controllers\\test\\customeIntegration\\getCustomCss.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "126b3c77-b207-4245-800f-94df06151b55",
            "title": "CustomIntegration.Update",
            "fullFile": "C:\\work\\api\\controllers\\test\\customeIntegration\\getCustomCss.enterprise.js",
            "file": "\\controllers\\test\\customeIntegration\\getCustomCss.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise CustomIntegration.Update \"before all\" hook",
                "timedOut": false,
                "duration": 2462,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(user, cbk) {\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    },\n    function(result, cbk) {\n        dummyUser = result.body.output;\n        api.post(apiURL)\n            .set('authtoken', dummyUser.authtoken)\n            .send(data)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        customIntegration = res.body.output;\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "ae44705f-e2eb-4027-9291-7d96ec4d184e",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise CustomIntegration.Update \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "_models.CustomIntegration.remove({ user_uid: dummyUser.uid }, function(err, deletedFlow) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "e045d7a7-762b-488d-982f-cd67ef67692a",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise CustomIntegration.Update Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + '/css')\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "e63f9327-43b4-414c-aacb-3d3ac31a4b92",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get custom integration css.",
                "fullTitle": "Enterprise CustomIntegration.Update Should get custom integration css.",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + '/css')\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output.length).to.be.equal(1);\n            expect(_.first(res.body.output).integration_uid).not.to.be.equal(null)\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "a75d4417-7725-4dd5-879a-acff73756840",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e63f9327-43b4-414c-aacb-3d3ac31a4b92",
              "a75d4417-7725-4dd5-879a-acff73756840"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 19,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "821805fb-af94-4742-b500-7f3c561cd950",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\customeIntegration\\getCustomIntegrationByUserUID.enterprise.js",
        "file": "\\controllers\\test\\customeIntegration\\getCustomIntegrationByUserUID.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "c1dec1eb-afa1-4c6c-b2ed-180b488a92df",
            "title": "CustomIntegration.GetByUserUID",
            "fullFile": "C:\\work\\api\\controllers\\test\\customeIntegration\\getCustomIntegrationByUserUID.enterprise.js",
            "file": "\\controllers\\test\\customeIntegration\\getCustomIntegrationByUserUID.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise CustomIntegration.GetByUserUID \"before all\" hook",
                "timedOut": false,
                "duration": 3280,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(user, cbk) {\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    },\n    function(result, cbk) {\n        dummyUser = result.body.output;\n        api.post(apiURL)\n            .set('authtoken', dummyUser.authtoken)\n            .send(data)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        customIntegration = res.body.output;\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "1b7c4bf2-bb50-40b9-b7d3-fb884bbfb03e",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise CustomIntegration.GetByUserUID \"after all\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "_models.CustomIntegration.remove({ user_uid: dummyUser.uid }, function(err, deletedFlow) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "3da08b76-dd5d-4267-8667-93121da846c0",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise CustomIntegration.GetByUserUID Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "754ad0e5-2b1e-4366-bfd8-0ef3ae14c8c1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get custom if integration found.",
                "fullTitle": "Enterprise CustomIntegration.GetByUserUID Should get custom if integration found.",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(data)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output.length).to.be.equal(1);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "7741d5f5-5320-4293-b9b5-db067ee47e6f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "754ad0e5-2b1e-4366-bfd8-0ef3ae14c8c1",
              "7741d5f5-5320-4293-b9b5-db067ee47e6f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 17,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "15f86aea-011b-4a1c-87ef-12405e4e55f3",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\customeIntegration\\getFlowsByCustomIntegration.enterprise.js",
        "file": "\\controllers\\test\\customeIntegration\\getFlowsByCustomIntegration.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "d99602ac-1268-47c1-88b9-caad4f4c43ab",
            "title": "CustomIntegration.GetFlows",
            "fullFile": "C:\\work\\api\\controllers\\test\\customeIntegration\\getFlowsByCustomIntegration.enterprise.js",
            "file": "\\controllers\\test\\customeIntegration\\getFlowsByCustomIntegration.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise CustomIntegration.GetFlows \"before all\" hook",
                "timedOut": false,
                "duration": 2953,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(user, cbk) {\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    },\n    function(result, cbk) {\n        dummyUser = result.body.output;\n        api.post(apiURL)\n            .set('authtoken', dummyUser.authtoken)\n            .send(data)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    },\n    function(result, cbk) {\n        customIntegration = result.body.output;\n        flowData.activities[2].uid = customIntegration.uid;\n        api.post(flowURL)\n            .set('authtoken', dummyUser.authtoken)\n            .send(flowData)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                cbk(err, res)\n            })\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        userFlow = res.body.output;\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "60c6b808-792c-42ea-ba4e-03d789ad7a9a",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise CustomIntegration.GetFlows \"after all\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "_models.CustomIntegration.remove({ user_uid: dummyUser.uid }, function(err, deletedFlow) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "0430903e-3dc3-46d1-998d-5813ca2e6566",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise CustomIntegration.GetFlows Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + '/' + customIntegration.uid + '/flows')\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "1f8381c3-4f02-4ef0-a18e-55f2b9390053",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of flows of custom  integrtion.",
                "fullTitle": "Enterprise CustomIntegration.GetFlows Should get list of flows of custom  integrtion.",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + '/' + customIntegration.uid + '/flows')\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output[0]).to.contain.all.keys(['uid', 'name'])\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "d2ee2548-fa0a-4e45-ae8b-9a0fb8f926eb",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "1f8381c3-4f02-4ef0-a18e-55f2b9390053",
              "d2ee2548-fa0a-4e45-ae8b-9a0fb8f926eb"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 19,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "68b97c4f-f008-4c3e-ace1-87cd9347d0c6",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\customeIntegration\\updateCustomIntegration.enterprise.js",
        "file": "\\controllers\\test\\customeIntegration\\updateCustomIntegration.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "8a856ad9-6ca0-46cb-a41b-f8758a276906",
            "title": "CustomIntegration.Update",
            "fullFile": "C:\\work\\api\\controllers\\test\\customeIntegration\\updateCustomIntegration.enterprise.js",
            "file": "\\controllers\\test\\customeIntegration\\updateCustomIntegration.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise CustomIntegration.Update \"before all\" hook",
                "timedOut": false,
                "duration": 2331,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(user, cbk) {\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    },\n    function(result, cbk) {\n        dummyUser = result.body.output;\n        api.post(apiURL)\n            .set('authtoken', dummyUser.authtoken)\n            .send(data)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        customIntegration = res.body.output;\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "98d9b33f-5594-45e2-b32d-28c30483eecb",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise CustomIntegration.Update \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "_models.CustomIntegration.remove({ user_uid: dummyUser.uid }, function(err, deletedFlow) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "d7a7ae69-4611-4545-a1e9-88d3492e0133",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise CustomIntegration.Update Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put(apiURL + '/' + customIntegration.uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "180ccf3d-0c6c-4101-a97e-c59d7c96ca10",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should give error, if \"label\" key is blank or missing.",
                "fullTitle": "Enterprise CustomIntegration.Update Should give error, if \"label\" key is blank or missing.",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar missingLabelKey = _.clone(data)\nmissingLabelKey.label = '';\napi.put(apiURL + '/' + customIntegration.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .send(missingLabelKey)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "3dd37053-aa72-4987-b312-8f3b992dc60d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should give error, if \"code_template\" key is blank or missing.",
                "fullTitle": "Enterprise CustomIntegration.Update Should give error, if \"code_template\" key is blank or missing.",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar missingLabelKey = _.clone(data)\nmissingLabelKey.code_template = '';\napi.put(apiURL + '/' + customIntegration.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .send(missingLabelKey)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "d0ae3bb4-88c6-4def-9160-05d399560efb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should give error, if \"compile_error\" key is blank or missing.",
                "fullTitle": "Enterprise CustomIntegration.Update Should give error, if \"compile_error\" key is blank or missing.",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar missingLabelKey = _.clone(data)\nmissingLabelKey.compile_error = '';\napi.put(apiURL + '/' + customIntegration.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .send(missingLabelKey)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "205752e4-90b3-4ddb-91c7-b6ee527f504e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should give error, if \"compiled_result\" key is blank or missing.",
                "fullTitle": "Enterprise CustomIntegration.Update Should give error, if \"compiled_result\" key is blank or missing.",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar missingLabelKey = _.clone(data)\nmissingLabelKey.compiled_result = '';\napi.put(apiURL + '/' + customIntegration.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .send(missingLabelKey)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "31fc0dcc-68a7-4fa7-999c-4942fbed153c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should give error, if \"code_template\" key is not string.",
                "fullTitle": "Enterprise CustomIntegration.Update Should give error, if \"code_template\" key is not string.",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar invalidCodeTemplate = _.clone(data)\ninvalidCodeTemplate.code_template = {};\napi.put(apiURL + '/' + customIntegration.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .send(invalidCodeTemplate)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.CUSTOM_INTEGRATION_PARAM_ERROR);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "6556dd4a-87ca-42d1-a21e-59b5988347d5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should give error, if \"compiled_result\" key is not string.",
                "fullTitle": "Enterprise CustomIntegration.Update Should give error, if \"compiled_result\" key is not string.",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar invalidCompiledResult = _.clone(data)\ninvalidCompiledResult.compiled_result = {};\napi.put(apiURL + '/' + customIntegration.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .send(invalidCompiledResult)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.CUSTOM_INTEGRATION_PARAM_ERROR);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "2e4d500b-c1b0-4fb7-84e5-ebda0a3a2850",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should give error, if integration not found.",
                "fullTitle": "Enterprise CustomIntegration.Update Should give error, if integration not found.",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put(apiURL + '/dummyIntegration')\n    .set('authtoken', dummyUser.authtoken)\n    .send(data)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.CUSTOM_INTEGRATION_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "71faabe7-6e83-4ce4-8d15-19ab32424026",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should update custom integration if data is valid.",
                "fullTitle": "Enterprise CustomIntegration.Update Should update custom integration if data is valid.",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ndata.label = 'updated';\napi.put(apiURL + '/' + customIntegration.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .send(data)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output.label).to.be.equal('updated');\n            expect(res.body.output).not.to.have.all.keys(['_id', '__v']);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "548369f7-caf3-4d39-a333-cde801d7e319",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "180ccf3d-0c6c-4101-a97e-c59d7c96ca10",
              "3dd37053-aa72-4987-b312-8f3b992dc60d",
              "d0ae3bb4-88c6-4def-9160-05d399560efb",
              "205752e4-90b3-4ddb-91c7-b6ee527f504e",
              "31fc0dcc-68a7-4fa7-999c-4942fbed153c",
              "6556dd4a-87ca-42d1-a21e-59b5988347d5",
              "2e4d500b-c1b0-4fb7-84e5-ebda0a3a2850",
              "71faabe7-6e83-4ce4-8d15-19ab32424026",
              "548369f7-caf3-4d39-a333-cde801d7e319"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 110,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "edf349e4-7846-45f4-b9ab-8318963bfbf5",
        "title": "DevOps",
        "fullFile": "C:\\work\\api\\controllers\\test\\devOps\\getFlowDetails.js",
        "file": "\\controllers\\test\\devOps\\getFlowDetails.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "887391ee-f988-43a6-9a4f-40ed9303bdc1",
            "title": "DevOps.GetFlowDetails",
            "fullFile": "C:\\work\\api\\controllers\\test\\devOps\\getFlowDetails.js",
            "file": "\\controllers\\test\\devOps\\getFlowDetails.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should give unauthenticated user error ui_admin_key is invalid.",
                "fullTitle": "DevOps DevOps.GetFlowDetails Should give unauthenticated user error ui_admin_key is invalid.",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal('Unauthorized');\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "3630ea50-0762-47a2-a70a-1fc604ca7df2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get data, if valid ui_admin_key sent.",
                "fullTitle": "DevOps DevOps.GetFlowDetails Should get data, if valid ui_admin_key sent.",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('ui_admin_key', config.UI_ADMIN_KEY)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.should.be.instanceOf(Array);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "d8a2a56b-da54-4b39-a59c-b9d9e574c4db",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "3630ea50-0762-47a2-a70a-1fc604ca7df2",
              "d8a2a56b-da54-4b39-a59c-b9d9e574c4db"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 10,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "ddcc1ed4-6d4f-496b-93ee-6e8c70f18665",
        "title": "DevOps",
        "fullFile": "C:\\work\\api\\controllers\\test\\devOps\\getUserDetails.js",
        "file": "\\controllers\\test\\devOps\\getUserDetails.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "655e04fc-33f4-4ad7-8f8a-bc2e98766627",
            "title": "DevOps.GetUserDetails",
            "fullFile": "C:\\work\\api\\controllers\\test\\devOps\\getUserDetails.js",
            "file": "\\controllers\\test\\devOps\\getUserDetails.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should give unauthenticated user error ui_admin_key is invalid.",
                "fullTitle": "DevOps DevOps.GetUserDetails Should give unauthenticated user error ui_admin_key is invalid.",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal('Unauthorized');\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "677842e2-ba99-4994-9bf9-8b83176b85ee",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get data, if valid ui_admin_key sent.",
                "fullTitle": "DevOps DevOps.GetUserDetails Should get data, if valid ui_admin_key sent.",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('ui_admin_key', config.UI_ADMIN_KEY)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.should.be.instanceOf(Array);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "aac47f36-9e4b-4a44-aeaa-f3f50948cebb",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "677842e2-ba99-4994-9bf9-8b83176b85ee",
              "aac47f36-9e4b-4a44-aeaa-f3f50948cebb"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 6,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "60ee07d5-6909-4633-a65e-e3f35b56ac4b",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\environment\\createEnvironment.js",
        "file": "\\controllers\\test\\environment\\createEnvironment.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "e338237d-c7c3-42ed-8133-ed354bcf0dd3",
            "title": "Environment.Create",
            "fullFile": "C:\\work\\api\\controllers\\test\\environment\\createEnvironment.js",
            "file": "\\controllers\\test\\environment\\createEnvironment.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Environment.Create \"before all\" hook",
                "timedOut": false,
                "duration": 75,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data;\n        dummyUser = orgData.owner;\n        dummyUser.authtoken = dummyUser.authtoken;\n        done()\n    });\n})",
                "err": {},
                "isRoot": false,
                "uuid": "341351e1-0bcd-4924-bb57-b1632f2f18b6",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Environment.Create \"after all\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.parallel([\n        function(cb) {\n            _models.Environment.remove({\n                    uid: {\n                        \"$in\": [env.uid]\n                    }\n                },\n                function(err) {\n                    cb(err)\n                })\n        }\n    ],\n    function(err, result) {\n        if (err) {\n            done(err)\n        } else {\n            done()\n        }\n    })",
                "err": {},
                "isRoot": false,
                "uuid": "880662a9-3476-46a5-9214-cb960c2dbce8",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise Environment.Create Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "8a3b8b43-76e4-4472-a0f6-dbcf49889fb7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should create env, if data is valid.",
                "fullTitle": "Enterprise Environment.Create Should create env, if data is valid.",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nprojectData.owner_uid = dummyUser.uid\napi.post(apiURL)\n    .set({ authtoken: dummyUser.authtoken })\n    .send(projectData)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            env = res.body.output\n            expect(env.name).equal(projectData.name);\n            expect(env).to.have.any.keys(['name', 'owner_uid']);\n            done()\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "312088b6-a23e-4b71-8a77-dfaf2f5d5d26",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error if env name is blank.",
                "fullTitle": "Enterprise Environment.Create Should get error if env name is blank.",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nprojectData.name = ''\nprojectData.user_uid = dummyUser.uid\napi.post(apiURL)\n    .set({ authtoken: dummyUser.authtoken })\n    .send(projectData)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            expect(res.body.error.name.message).equal(messageList.ENV_NAME_REQUIRED);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "b0dee583-afef-434c-9ce3-ff775644c193",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8a3b8b43-76e4-4472-a0f6-dbcf49889fb7",
              "312088b6-a23e-4b71-8a77-dfaf2f5d5d26",
              "b0dee583-afef-434c-9ce3-ff775644c193"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 28,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "1be6d595-7f75-4aba-925f-ff45b66a5862",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\environment\\getEnvironment.js",
        "file": "\\controllers\\test\\environment\\getEnvironment.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "59dd17cc-d5d9-49fc-8910-be5a4e20ecb8",
            "title": "Environment.Get",
            "fullFile": "C:\\work\\api\\controllers\\test\\environment\\getEnvironment.js",
            "file": "\\controllers\\test\\environment\\getEnvironment.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Environment.Get \"before all\" hook",
                "timedOut": false,
                "duration": 83,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data;\n        dummyUser = orgData.owner;\n        dummyUser.authtoken = dummyUser.authtoken;\n        api.post(apiURL)\n            .set({ authtoken: dummyUser.authtoken })\n            .send(projectData)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    env = res.body.output\n                    done()\n                }\n            });\n   // });\n   // done()\n    });\n})",
                "err": {},
                "isRoot": false,
                "uuid": "0b970da1-8890-424a-a3dd-e2c119654b4c",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Environment.Get \"after all\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.parallel([\n        function(cb) {\n            _models.Environment.remove({\n                    uid: {\n                        \"$in\": [env.uid]\n                    }\n                },\n                function(err) {\n                    cb(err)\n                })\n        }\n    ],\n    function(err, result) {\n        if (err) {\n            done(err)\n        } else {\n            done()\n        }\n    })",
                "err": {},
                "isRoot": false,
                "uuid": "7a06c782-7db3-4a5d-a4aa-7436ddcce9da",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise Environment.Get Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + env.uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "a304080b-f29e-4695-9668-22f0dccc4983",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should update env, if data is valid.",
                "fullTitle": "Enterprise Environment.Get Should update env, if data is valid.",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + env.uid)\n    .set({ authtoken: dummyUser.authtoken })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            env = res.body.output\n            expect(env.name).equal(projectData.name);\n            done()\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "3c0fbe31-4374-427f-ad41-955fd3a6c9e9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error if env not found.",
                "fullTitle": "Enterprise Environment.Get Should get error if env not found.",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nprojectData.name = ''\nprojectData.user_uid = dummyUser.uid\napi.get(apiURL + 'dummyEnv')\n    .set({ authtoken: dummyUser.authtoken })\n    .send(projectData)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).equal(messageList.ENV_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "bf71872d-537a-412d-be25-d23f37906388",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a304080b-f29e-4695-9668-22f0dccc4983",
              "3c0fbe31-4374-427f-ad41-955fd3a6c9e9",
              "bf71872d-537a-412d-be25-d23f37906388"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 28,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "cf00ac05-d89a-4bfe-be8e-89d21537a78a",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\environment\\listEnvironment.js",
        "file": "\\controllers\\test\\environment\\listEnvironment.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "2e9165ba-4dde-448e-936b-40c28cc3a8c1",
            "title": "Environment.List",
            "fullFile": "C:\\work\\api\\controllers\\test\\environment\\listEnvironment.js",
            "file": "\\controllers\\test\\environment\\listEnvironment.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Environment.List \"before all\" hook",
                "timedOut": false,
                "duration": 81,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data;\n        dummyUser = orgData.owner;\n        dummyUser.authtoken = dummyUser.authtoken;\n        api.post(apiURL)\n            .set({ authtoken: dummyUser.authtoken })\n            .send(projectData)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    env = res.body.output\n                    done()\n                }\n            });\n   // });\n   // done()\n    });\n})",
                "err": {},
                "isRoot": false,
                "uuid": "12ba4728-3dad-4300-9785-ce2a2ca09bcd",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Environment.List \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.parallel([\n        function(cb) {\n            _models.Environment.remove({\n                    uid: {\n                        \"$in\": [env.uid]\n                    }\n                },\n                function(err) {\n                    cb(err)\n                })\n        }\n    ],\n    function(err, result) {\n        if (err) {\n            done(err)\n        } else {\n            done()\n        }\n    })",
                "err": {},
                "isRoot": false,
                "uuid": "f19a8447-489b-4500-81ff-90dee473f3e8",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise Environment.List Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "6f73ad9a-c8d8-4389-9652-7a9092490125",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should update env, if data is valid.",
                "fullTitle": "Enterprise Environment.List Should update env, if data is valid.",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set({ authtoken: dummyUser.authtoken })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            env = res.body.output\n            expect(env.length).gte(1);\n            done()\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "5f8f1682-f8f9-4c38-a7c5-f7163694e079",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "6f73ad9a-c8d8-4389-9652-7a9092490125",
              "5f8f1682-f8f9-4c38-a7c5-f7163694e079"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 15,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "651d88af-06b8-404f-849f-46473b0a3bbb",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\flow\\cloneUserFlow.enterprise.js",
        "file": "\\controllers\\test\\flow\\cloneUserFlow.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "2212e1d6-a9e2-4e5f-a901-4eb78931f3af",
            "title": "Flow.CloneUserFlow",
            "fullFile": "C:\\work\\api\\controllers\\test\\flow\\cloneUserFlow.enterprise.js",
            "file": "\\controllers\\test\\flow\\cloneUserFlow.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Flow.CloneUserFlow \"before all\" hook",
                "timedOut": false,
                "duration": 153,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar opt = { path: getTriggerPath, body: getTriggerPath };\ncommonMock.triggerCreateSuccess(opt)\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data;\n        async.waterfall([\n                function(cbk) {\n                    api.get('/enterprise/v1/user')\n                        .set('authtoken', orgData.owner.authtoken)\n                        .expect(httpStatus.OK)\n                        .end(function(err, res) {\n                            if (err) {\n                                done(err);\n                            } else {\n                                dummyUser = res.body.output;\n                                cbk(err, dummyUser)\n                            }\n                        });\n                },\n                function(dummyUser, cbk) {\n                    testData.mongoUserTriggerObj.user_uid = dummyUser.uid\n                    _models.UserTrigger.create(testData.mongoUserTriggerObj, function(err, userTrigger) {\n                        cbk(err, userTrigger);\n                    })\n                },\n                function(userTrigger, cbk) {\n                    //var flowData = _.cloneDeep(testData.enterpriseFlowBody)\n                    // _id = dummyUser._id\n                    userTrigger = userTrigger.toJSON()\n                    flowData.trigger.handlers = [userTrigger]\n                    flowData.configurations[0].params = [{\n                        \"key\": \"1\",\n                        \"value\": \"2\",\n                        \"required\": true\n                    }, {\n                        \"key\": \"3\",\n                        \"value\": \"2\",\n                        \"required\": false\n                    }];\n                    flowData.configurations[0].project_params = [{\n                        \"uid\": \"random\",\n                        \"key\": \"param1\",\n                        \"value\": \"parawal\",\n                        \"required\": true,\n                        \"isPassword\": false,\n                        \"hasError\": false\n                    }]\n                    api.post(flowURL)\n                        .set('authtoken', dummyUser.authtoken)\n                        .send(flowData)\n                        .expect(httpStatus.CREATED)\n                        .end(function(err, res) {\n                            cbk(err, res)\n                        })\n                },\n                function(result, cbk) {\n                    userFlow = result.body.output;\n                    projectData.owner_uid = dummyUser.uid\n                    projectData.env_uid = dummyUser.default_env\n                    api.post('/enterprise/v1/projects')\n                        .set('authtoken', dummyUser.authtoken)\n                        .send(projectData)\n                        .expect(httpStatus.CREATED)\n                        .end(function(err, result) {\n                            cbk(err, result);\n                        })\n                }\n            ],\n            function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    var query = _models.Project.findOne({ name: config.default_project, owner_uid: dummyUser.uid })\n                    query.lean().exec(function(err, result) {\n                        if (result) {\n                            dummyUser.default_project = result.uid\n                        }\n                        project = res.body.output;\n                        done()\n                    })\n                }\n            })\n    });\n})",
                "err": {},
                "isRoot": false,
                "uuid": "459f83a1-4719-41f0-9337-0f5124f0e071",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Flow.CloneUserFlow \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nremoveFlow(createdFlows.concat([userFlow.uid, clonedFlow.flow.uid]), done);",
                "err": {},
                "isRoot": false,
                "uuid": "b808d748-d286-4da1-8b91-96d1ef7bcfdb",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Flow.CloneUserFlow Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(flowURL + '/' + userFlow.uid + '/clone')\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "d4f4af4a-e066-4e04-992f-4a355128aaed",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if flow not found.",
                "fullTitle": "Enterprise Flow.CloneUserFlow Should get error, if flow not found.",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(flowURL + '/dummyFlow/clone')\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.FLOW_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "8e7e52f1-63e3-4305-b19e-c57c95afebe3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should clone flow, if user flow is found.",
                "fullTitle": "Enterprise Flow.CloneUserFlow Should clone flow, if user flow is found.",
                "timedOut": false,
                "duration": 41,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { path: createTriggerPath, getPath: getTriggerPath + '/handlers', body: { \"push\": [/^fl\\w*/] }, update: true };\ncommonMock.triggerPushSuccess(opt);\nopt.body = { \"push\": [/^fl\\w*/] };\ncommonMock.triggerPullSuccess(opt);\napi.post(flowURL + '/' + userFlow.uid + '/clone')\n    .set('authtoken', dummyUser.authtoken)\n    .send({ \"project_uid\": userFlow.project_uid })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            clonedFlow = res.body.output;\n            expect(clonedFlow).to.have.all.keys(['flow', 'page']);\n            expect(clonedFlow.flow).not.to.have.all.keys(['_id', '__v']);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "5322700a-f188-40b1-88a4-bcd21c76dff5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should clone flow in other project, if user sends \"project_uid\" in body.",
                "fullTitle": "Enterprise Flow.CloneUserFlow Should clone flow in other project, if user sends \"project_uid\" in body.",
                "timedOut": false,
                "duration": 53,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { path: createTriggerPath, getPath: getTriggerPath + '/handlers', body: { \"push\": [/^fl\\w*/] }, update: true };\ncommonMock.triggerPushSuccess(opt);\nopt.body = { \"push\": [/^fl\\w*/] };\ncommonMock.triggerPullSuccess(opt);\nvar cloneOpt = { path: createTriggerPath, getPath: '/triggers/clone', body: { \"uid\": [/^fl\\w*/] }, update: true };\ncommonMock.triggerCloneSuccess(cloneOpt);\nvar orgDefaultProj = _.find(orgData.org_projects, { name: config.default_project })\nvar projectParamObj = _.merge(projectParams, { uid: 'random', type: 'param', project_uid: dummyUser.default_project, user_uid: dummyUser.uid })\nvar projectParams = [{\n    \"uid\": \"random\",\n    \"key\": \"param1\",\n    \"value\": \"parawal\",\n    \"required\": true,\n    \"isPassword\": false,\n    \"hasError\": false\n}, {\n    \"uid\": \"random1\",\n    \"key\": \"param1\",\n    \"value\": \"parawal\",\n    \"required\": true,\n    \"isPassword\": false,\n    \"hasError\": false\n}]\nvar params = [{\n    \"key\": \"1\",\n    \"value\": \"\",\n    \"required\": true\n}, {\n    \"key\": \"3\",\n    \"value\": \"\",\n    \"required\": false\n}]\n_models.ConfigSchema.create(projectParamObj, function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        projectParam = result.toJSON()\n        api.post(flowURL + '/' + userFlow.uid + '/clone')\n            .set('authtoken', dummyUser.authtoken)\n            .send({ \"project_uid\": project.uid, project_params: projectParams, params: params })\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    clonedFlow = res.body.output;\n                    expect(clonedFlow).to.have.all.keys(['flow', 'page']);\n                    expect(clonedFlow.flow.errors_obj.length).eq(6)\n                    expect(clonedFlow.flow).not.to.have.all.keys(['_id', '__v']);\n                    expect(clonedFlow.flow.project_uid).to.be.equal(project.uid);\n                    _models.ConfigSchema.find({ type: 'param', project_uid: project.uid }, function(err, result) {\n                        if (err) {\n                            done(err)\n                        } else {\n                            expect(result.length).eq(2)\n                            expect(_.first(result).project_uid).equal(project.uid)\n                            var query = _models.ConfigData.find({ flow_uid: clonedFlow.flow.uid })\n                            query.lean().exec(function(err, results) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    var authData = _.find(results, { type: 'auth' })\n                                    var connData = _.find(results, { type: 'connection' })\n                                    expect(!_.has(authData, 'auth')).to.be.equal(true)\n                                    expect(!_.has(authData, 'connection')).to.be.equal(true)\n                                    expect(_.first(results).project_uid).to.be.equal(project.uid)\n                                    var query = _models.UserConfig.findOne({ project_uid: clonedFlow.flow.project_uid })\n                                    query.lean().exec(function(err, config) {\n                                        if (err) {\n                                            done(err);\n                                        } else {\n                                            expect(_.first(results).config_uid).to.be.equal(config.uid)\n                                            done();\n                                        }\n                                    })\n                                }\n                            })\n                        }\n                    })\n                }\n            });\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "4310e762-9d88-41be-80b0-f7d38e92554b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should clone flow in inactive state, if user exceeds active flow limit.",
                "fullTitle": "Enterprise Flow.CloneUserFlow Should clone flow in inactive state, if user exceeds active flow limit.",
                "timedOut": false,
                "duration": 45,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { path: createTriggerPath, getPath: getTriggerPath + '/handlers', body: { \"push\": [/^fl\\w*/] }, update: true };\ncommonMock.triggerPushSuccess(opt);\nopt.body = { \"push\": [/^fl\\w*/] };\ncommonMock.triggerPullSuccess(opt);\nasync.waterfall([\n    function(cbk) {\n        var userFlowLimit = (dummyUser.user_plan.flow || {}).active\n        var flowData = _.cloneDeep(testData.enterpriseFlowBody)\n        flowData.owner_uid = dummyUser.uid;\n        flowData.author = [dummyUser.uid];\n        flowData.active = true;\n        async.times(userFlowLimit, function(n, next) {\n            _models.newFlow.create(flowData, function(err, userTrigger) {\n                next(err, userTrigger);\n            })\n        }, function(err, result) {\n            createdFlows = _.map(_.flattenDeep(result), 'uid')\n            cbk(err, result)\n        })\n    },\n    function(result, cbk) {\n        api.post(flowURL + '/' + userFlow.uid + '/clone')\n            .set('authtoken', dummyUser.authtoken)\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                cbk(err, res)\n            });\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        clonedFlow = res.body.output;\n        //expect(res.body.output.flow.active).to.be.false;\n        done();\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "3d932436-2f74-44c8-adbc-e36aeabc4caa",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if user account is suspended.",
                "fullTitle": "Enterprise Flow.CloneUserFlow Should get error, if user account is suspended.",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n_models.User.findOneAndUpdate({ uid: dummyUser.uid }, { force_suspend: true }, { new: true }, function(err, user) {\n    if (err) {\n        done(err)\n    } else {\n        api.post(flowURL + '/' + userFlow.uid + '/clone')\n            .set('authtoken', dummyUser.authtoken)\n            .expect(httpStatus.BAD_REQUEST)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    res.body.error.message.should.equal(messageList.FLOW_COPY_USER_PLAN_EXPIRE_ERROR);\n                    done();\n                }\n            });\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "b02b5114-dd07-45e2-8656-ddf90fcb228a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d4f4af4a-e066-4e04-992f-4a355128aaed",
              "8e7e52f1-63e3-4305-b19e-c57c95afebe3",
              "5322700a-f188-40b1-88a4-bcd21c76dff5",
              "4310e762-9d88-41be-80b0-f7d38e92554b",
              "3d932436-2f74-44c8-adbc-e36aeabc4caa",
              "b02b5114-dd07-45e2-8656-ddf90fcb228a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 169,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "a463ca69-cbb3-4087-9ac9-12b31388cd10",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\flow\\createProjectTemplate.enterprise.js",
        "file": "\\controllers\\test\\flow\\createProjectTemplate.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "0d767c67-c50a-4368-9ca2-6aa62eeaff6b",
            "title": "Project.CreateTemplate",
            "fullFile": "C:\\work\\api\\controllers\\test\\flow\\createProjectTemplate.enterprise.js",
            "file": "\\controllers\\test\\flow\\createProjectTemplate.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Project.CreateTemplate \"before all\" hook",
                "timedOut": false,
                "duration": 121,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data;\n        async.waterfall([\n            function(cbk) {\n                dummyUser = orgData.owner;\n                dummyUser.authtoken = dummyUser.authtoken;\n                testData.mongoUserTriggerObj.user_uid = dummyUser.uid;\n                _models.UserTrigger.create(testData.mongoUserTriggerObj, function(err, userTrigger) {\n                    cbk(err, userTrigger);\n                })\n            },\n            function(userTrigger, cbk) {\n                userTriggerObj = userTrigger.toJSON()\n                flowWithAllData.trigger.handlers = []\n                api.post(flowURL)\n                    .set('authtoken', dummyUser.authtoken)\n                    .send(flowWithAllData)\n                    .expect(httpStatus.CREATED)\n                    .end(function(err, res) {\n                        cbk(err, res)\n                    })\n            }\n        ], function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                orgFlow = res.body.output;\n                _models.newFlow._findOneAndUpdate({ uid: orgFlow.uid }, { is_draft: false }, function(err, updateFlow) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        orgFlow = updateFlow\n                        project = dummyUser.default_project\n                        api.get('/enterprise/v1/projects/' + dummyUser.default_project + '/templateschema')\n                            .set('authtoken', dummyUser.authtoken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (res) {\n                                    json_schema = res.body.output\n                                }\n                                done(err)\n                            })\n                    }\n                })\n            }\n        })\n    });\n})",
                "err": {},
                "isRoot": false,
                "uuid": "e0455848-3842-4bfc-9c47-b0da66bcb674",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Project.CreateTemplate \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nhttpmock.cleanAll();\nasync.parallel([\n    function(cb) {\n        _models.ProjectTemplate.remove(function(err, deletedFlow) {\n            cb(err, deletedFlow);\n        })\n    },\n    function(cb) {\n        _models.WorkFlowTemplate.remove(function(err, deletedUserTrigger) {\n            cb(err, deletedUserTrigger);\n        })\n    },\n    function(cb) {\n        _models.UserTrigger.remove({ uid: userTriggerObj.uid }, function(err, deletedUserTrigger) {\n            cb(err, deletedUserTrigger);\n        })\n    }\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "b2f6dda1-9143-4dda-a2ee-3f6d584d8e89",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Project.CreateTemplate Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL + project + '/templates')\n    .send(userFlow)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "12e3aea9-30fa-449f-bf91-b073556b958f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should create project import template.",
                "fullTitle": "Enterprise Project.CreateTemplate Should create project import template.",
                "timedOut": false,
                "duration": 108,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nbody.json_schema = json_schema\napi.post(apiURL + project + '/templates')\n    .set('authtoken', dummyUser.authtoken)\n    .send(body)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var result = res.body.output\n            expect(result).to.have.any.keys(['uid'])\n                // expect(result.workflowTemplates.length).to.equal(1)\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "04393d18-cc96-4298-b22d-0973b0c8d0dd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should create project share template.",
                "fullTitle": "Enterprise Project.CreateTemplate Should create project share template.",
                "timedOut": false,
                "duration": 22,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nbody.json_schema = json_schema\nbody.shared_to = ['abc@xyz.com']\napi.post(apiURL + project + '/templates')\n    .set('authtoken', dummyUser.authtoken)\n    .send(body)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var result = res.body.output\n            expect(result.published).equal(true)\n            expect(result.shared_to.length).gt(0)\n                //expect(result.projectTemplate.shared_to.length).to.equal(1)\n                //expect(result.workflowTemplates.length).to.equal(1)\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "e8ca87c8-d0f6-4a03-96d0-a1078dab2e77",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should give error if  project template is not found.",
                "fullTitle": "Enterprise Project.CreateTemplate Should give error if  project template is not found.",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL + 'dummyProject/templates')\n    .set('authtoken', dummyUser.authtoken)\n    .send(body)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PROJECT_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "c7ecaeb7-a4a0-45a8-b9b9-51ec1d2f82b4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should give error if  project template flow is not found.",
                "fullTitle": "Enterprise Project.CreateTemplate Should give error if  project template flow is not found.",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n_models.newFlow.remove({ uid: orgFlow.uid }, function(err) {\n    if (err) {\n        done(err)\n    } else {\n        api.post(apiURL + project + '/templates')\n            .set('authtoken', dummyUser.authtoken)\n            .send(body)\n            .expect(httpStatus.NOT_FOUND)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    res.body.error.message.should.equal(messageList.NO_DATA_FOUND);\n                    done();\n                }\n            });\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "e62be438-86e9-44ed-96a0-0d6ef7aeead1",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "12e3aea9-30fa-449f-bf91-b073556b958f",
              "04393d18-cc96-4298-b22d-0973b0c8d0dd",
              "e8ca87c8-d0f6-4a03-96d0-a1078dab2e77",
              "c7ecaeb7-a4a0-45a8-b9b9-51ec1d2f82b4",
              "e62be438-86e9-44ed-96a0-0d6ef7aeead1"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 162,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "24715aae-e651-4728-9e16-3984cfe9b002",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\flow\\createTemplate.enterprise.js",
        "file": "\\controllers\\test\\flow\\createTemplate.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "0c8fceda-601a-471f-a87a-feb129ffdadb",
            "title": "Flow.CreateTemplate",
            "fullFile": "C:\\work\\api\\controllers\\test\\flow\\createTemplate.enterprise.js",
            "file": "\\controllers\\test\\flow\\createTemplate.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Flow.CreateTemplate \"before all\" hook",
                "timedOut": false,
                "duration": 3177,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar opt = { path: triggerPath, body: triggerPath, times: 3 };\ncommonMock.triggerGetSuccess(opt);\nopt.getPath = getTriggerPath + '/handlers';\nopt.body = { \"push\": [/^fl\\w*/] };\ncommonMock.triggerPushSuccess(opt);\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(userTrigger, cbk) {\n        userTriggerObj = userTrigger\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    },\n    function(result, cbk) {\n        dummyUser = result.body.output;\n        testData.mongoUserTriggerObj.user_uid = dummyUser.uid;\n        _models.UserTrigger.create(testData.mongoUserTriggerObj, function(err, userTrigger) {\n            cbk(err, userTrigger);\n        })\n    },\n    function(userTrigger, cbk) {\n        var userTriggerObj = userTrigger;\n        var flowData = _.cloneDeep(testData.flowBody);\n        flowData.isExpress = false;\n        async.parallel({\n            triggerFlow: function(cb) {\n                var triggerFlow = _.cloneDeep(flowData)\n                triggerFlow.trigger.handlers = [userTriggerObj.uid]\n                createFlow(flowURL, triggerFlow, dummyUser, function(err, result) {\n                    cb(err, result);\n                })\n            },\n            draftFlow: function(cb) {\n                var draftFlow = _.cloneDeep(flowData);\n                draftFlow.is_draft = true;\n                createFlow(flowURL, draftFlow, dummyUser, function(err, result) {\n                    cb(err, result);\n                })\n            },\n            invalidEnvFlow: function(cb) {\n                var IVWHFlow = _.cloneDeep(flowData);\n                IVWHFlow.activities[2].next = [];\n                createFlow(flowURL, IVWHFlow, dummyUser, function(err, result) {\n                    cb(err, result);\n                })\n            }\n        }, function(err, result) {\n            cbk(err, result)\n        })\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        userTriggerFlow = res.triggerFlow._doc;\n        userDraftFlow = res.draftFlow;\n        invalidEnvFlow = res.invalidEnvFlow._doc;\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "e41ef8be-9606-4dba-a9f9-d60e40d71090",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Flow.CreateTemplate \"after all\" hook",
                "timedOut": false,
                "duration": 1899,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nhttpmock.cleanAll();\nvar flowUIDS = [userTriggerFlow.uid, userDraftFlow.uid, invalidEnvFlow.uid];\nasync.parallel([\n    function(cb) {\n        _models.newFlow.remove({ uid: { $in: flowUIDS } }, function(err, deletedFlows) {\n            cb(err, deletedFlows)\n        });\n    },\n    function(cb) {\n        _models.UserTrigger.remove({ uid: userTriggerObj.uid }, function(err, deletedUserTrigger) {\n            cb(err, deletedUserTrigger);\n        })\n    },\n    function(cb) {\n        _models.Bill.remove({ flow_uid: { $in: flowUIDS } }, function(err, bill) {\n            cb(err, bill);\n        })\n    },\n    function(cb) {\n        _models.Payload.remove({ flow_uid: { $in: flowUIDS } }, function(err, bill) {\n            cb(err, bill);\n        })\n    },\n    function(cb) {\n        _models.Log.remove({ flow_uid: { $in: flowUIDS } }, function(err, bill) {\n            cb(err, bill);\n        })\n    }\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "9f22709d-e819-4403-8573-1acddfe3dbfe",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Flow.CreateTemplate Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .send(getExecuteBody(userTriggerFlow))\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "00feebb9-7971-4fcd-ae22-cfbc7d8571aa",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if \"flow\" key is blank or missing.",
                "fullTitle": "Enterprise Flow.CreateTemplate Should get error, if \"flow\" key is blank or missing.",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send({})\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "7720d926-cf40-4dd0-aef3-93f8cd9cab1b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if flow not found.",
                "fullTitle": "Enterprise Flow.CreateTemplate Should get error, if flow not found.",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar dummyFlowData = getExecuteBody(userTriggerFlow)\ndummyFlowData.flow.uid = 'dummyFlow';\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(dummyFlowData)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.FLOW_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "6c4b0317-9c53-4eca-90a1-7296e9b25b3a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if is in \"draft\" state.",
                "fullTitle": "Enterprise Flow.CreateTemplate Should get error, if is in \"draft\" state.",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(getExecuteBody(userDraftFlow))\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.FLOW_DRAFT_STATE_ENTERPRISE);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "be8143f3-e109-400a-9e4b-658debd2c668",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if activities are not valid.",
                "fullTitle": "Enterprise Flow.CreateTemplate Should get error, if activities are not valid.",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { path: triggerPath, body: triggerPath };\ncommonMock.triggerGetSuccess(opt);\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(getExecuteBody(invalidEnvFlow))\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.FLOW_CONFIGURE_ERROR);\n            done();\n        }\n    })",
                "err": {},
                "isRoot": false,
                "uuid": "d54c2733-255a-4f7f-883e-26457af5dea7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should create template.",
                "fullTitle": "Enterprise Flow.CreateTemplate Should create template.",
                "timedOut": false,
                "duration": 23,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { path: triggerPath, body: triggerPath, times: 2 };\ncommonMock.triggerGetSuccess(opt);\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(getExecuteBody(userTriggerFlow))\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var template = res.body.output\n            expect(template).to.have.all.keys(responseKeys);\n            expect(template.flow_data).to.have.all.keys(['lookup', 'project_params', 'params', 'auth', 'connection', 'trigger']);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "1a10efe9-c2fa-4810-a3d1-ef02d3ff90d0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if user account is suspended.",
                "fullTitle": "Enterprise Flow.CreateTemplate Should get error, if user account is suspended.",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n_models.User.findOneAndUpdate({ uid: dummyUser.uid }, { force_suspend: true }, { new: true }, function(err, user) {\n    if (err) {\n        done(err)\n    } else {\n        api.post(apiURL)\n            .set('authtoken', dummyUser.authtoken)\n            .send(getExecuteBody(userTriggerFlow))\n            .expect(httpStatus.BAD_REQUEST)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    res.body.error.message.should.equal(messageList.FLOW_SUBMIT_USER_PLAN_EXPIRE_ERROR);\n                    done();\n                }\n            });\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "7eab0c65-fe54-4a8a-aa12-92dd3ea8ba0e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "00feebb9-7971-4fcd-ae22-cfbc7d8571aa",
              "7720d926-cf40-4dd0-aef3-93f8cd9cab1b",
              "6c4b0317-9c53-4eca-90a1-7296e9b25b3a",
              "be8143f3-e109-400a-9e4b-658debd2c668",
              "d54c2733-255a-4f7f-883e-26457af5dea7",
              "1a10efe9-c2fa-4810-a3d1-ef02d3ff90d0",
              "7eab0c65-fe54-4a8a-aa12-92dd3ea8ba0e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 99,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "c7561f8d-17db-4024-88cf-c6e852c03399",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\flow\\createUserFlow.enterprise.js",
        "file": "\\controllers\\test\\flow\\createUserFlow.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "7ee76c06-d810-4ee2-9fb5-4de69cd3c603",
            "title": "Flow.CreateUserFlow",
            "fullFile": "C:\\work\\api\\controllers\\test\\flow\\createUserFlow.enterprise.js",
            "file": "\\controllers\\test\\flow\\createUserFlow.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Flow.CreateUserFlow \"before all\" hook",
                "timedOut": false,
                "duration": 1111,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data\n        async.waterfall([\n            function(cbk) {\n                api.get('/enterprise/v1/user')\n                    .set('authtoken', orgData.owner.authtoken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            dummyUser = res.body.output;\n                            cbk(err, dummyUser)\n                        }\n                    });\n            },\n            function(dummyUser, cbk) {\n                flowData.owner_uid = dummyUser.uid;\n                flowData.trigger.handlers = [testData.expressTriggerResponse.uid]\n                projectData.owner_uid = dummyUser.uid\n                projectData.env_uid = dummyUser.default_env\n                api.post('/enterprise/v1/projects')\n                    .set('authtoken', dummyUser.authtoken)\n                    .send(projectData)\n                    .expect(httpStatus.CREATED)\n                    .end(function(err, result) {\n                        cbk(err, result);\n                    })\n            }\n        ], function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                project = res.body.output;\n                done()\n            }\n        })\n    });\n});",
                "err": {},
                "isRoot": false,
                "uuid": "33dd7157-4116-4f7d-a7b3-b85a758354d9",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Flow.CreateUserFlow \"after all\" hook",
                "timedOut": false,
                "duration": 3,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nhttpmock.cleanAll();\ncreatedFlows.push(userFlow.uid)\n_models.newFlow.remove({ uid: { $in: createdFlows } }, function(err, deletedFlow) {\n    if (err) {\n        done(err)\n    } else {\n        clearRecords(function(err, result) {\n            done(err)\n        })\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "a165714d-1c27-460b-968e-a5e493ff0392",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Flow.CreateUserFlow Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(flowURL)\n    .send(flowData)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "b874af81-aac2-45ec-90ca-a5a14708fcf3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if \"name\" key is missing OR empty.",
                "fullTitle": "Enterprise Flow.CreateUserFlow Should get error, if \"name\" key is missing OR empty.",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar invalidFlowData = _.omit(flowData, 'name')\napi.post(flowURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(invalidFlowData)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "4695889e-ac6c-429d-ac59-c7ad63a42954",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should create flow, if flow data is valid.",
                "fullTitle": "Enterprise Flow.CreateUserFlow Should create flow, if flow data is valid.",
                "timedOut": false,
                "duration": 26,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(flowURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(flowData)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            userFlow = res.body.output\n            expect(userFlow).to.contain.all.keys(validKeys)\n            expect(userFlow).not.to.have.all.keys(['_id', '__v']);\n            expect(userFlow.version).to.be.equal(1);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "d9a75df4-48ef-497c-ab40-aff1e9b8592b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should create flow in inactive state, if user exceeds active flow limit.",
                "fullTitle": "Enterprise Flow.CreateUserFlow Should create flow in inactive state, if user exceeds active flow limit.",
                "timedOut": false,
                "duration": 32,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.waterfall([\n    function(cbk) {\n        var userFlowLimit = (dummyUser.user_plan.flow || {}).active\n        flowData.owner_uid = dummyUser.uid;\n        flowData.author = [dummyUser.uid];\n        async.times(userFlowLimit, function(n, next) {\n            _models.newFlow.create(flowData, function(err, userTrigger) {\n                next(err, userTrigger);\n            })\n        }, function(err, result) {\n            createdFlows = _.map(_.flattenDeep(result), 'uid')\n            cbk(err, result)\n        })\n    },\n    function(result, cbk) {\n        var flowObj = _.cloneDeep(testData.enterpriseFlowBody)\n        api.post(flowURL)\n            .set('authtoken', dummyUser.authtoken)\n            .send(flowObj)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                cbk(err, res)\n            });\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        expect(res.body.output.active).to.be.false;\n        done();\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "30f30c9f-45b0-4c37-bfb7-e11dc3b5319a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should create flow in other project, if user sends \"project_uid\" in body.",
                "fullTitle": "Enterprise Flow.CreateUserFlow Should create flow in other project, if user sends \"project_uid\" in body.",
                "timedOut": false,
                "duration": 27,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar flowData2 = _.cloneDeep(flowData)\n    //flowData2.project_uid = project.uid\napi.post(flowURL)\n    .set({ 'authtoken': dummyUser.authtoken, project_uid: project.uid })\n    .send(flowData2)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var flow = res.body.output;\n            expect(flow.project_uid).to.be.equal(project.uid)\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "813dc2b9-9040-4baf-a697-21c3587065e3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should create flow within organization.",
                "fullTitle": "Enterprise Flow.CreateUserFlow Should create flow within organization.",
                "timedOut": false,
                "duration": 35,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar tempOrgBody = orgBody;\n// var opt = { path: getTriggerPath, body: getTriggerPath, times: 2 };\n// commonMock.triggerCreateSuccess(opt);\nvar orgFlow = _.cloneDeep(flowData)\napi.post(flowURL)\n    .set({ 'authtoken': orgData.role1.authtoken, org_uid: orgData.organization.uid })\n    .send(orgFlow)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var flow = res.body.output;\n            expect(flow.org_uid).to.be.equal(orgData.organization.uid)\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "8e159225-15ad-4fa5-936f-664bea7af0c2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if user account is suspended.",
                "fullTitle": "Enterprise Flow.CreateUserFlow Should get error, if user account is suspended.",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n_models.User.findOneAndUpdate({ uid: dummyUser.uid }, { force_suspend: true }, { new: true }, function(err, user) {\n    if (err) {\n        done(err)\n    } else {\n        api.post(flowURL)\n            .set('authtoken', dummyUser.authtoken)\n            .send(flowData)\n            .expect(httpStatus.BAD_REQUEST)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    res.body.error.message.should.equal(messageList.USER_PLAN_EXPIRE_ERROR);\n                    done();\n                }\n            });\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "7ab82fef-866f-4d19-a3a1-0caeee940e76",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b874af81-aac2-45ec-90ca-a5a14708fcf3",
              "4695889e-ac6c-429d-ac59-c7ad63a42954",
              "d9a75df4-48ef-497c-ab40-aff1e9b8592b",
              "30f30c9f-45b0-4c37-bfb7-e11dc3b5319a",
              "813dc2b9-9040-4baf-a697-21c3587065e3",
              "8e159225-15ad-4fa5-936f-664bea7af0c2",
              "7ab82fef-866f-4d19-a3a1-0caeee940e76"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 147,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "3c6d5a9a-eef2-4778-a0d4-8b59d4484217",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\flow\\deleteUserFlow.enterprise.js",
        "file": "\\controllers\\test\\flow\\deleteUserFlow.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "13968a39-4a24-4248-8ac1-36c2efe13600",
            "title": "Flow.deleteUserFlow",
            "fullFile": "C:\\work\\api\\controllers\\test\\flow\\deleteUserFlow.enterprise.js",
            "file": "\\controllers\\test\\flow\\deleteUserFlow.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Flow.deleteUserFlow \"before all\" hook",
                "timedOut": false,
                "duration": 121,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data;\n        async.waterfall([\n            function(cbk) {\n                dummyUser = orgData.owner;\n                dummyUser.authtoken = dummyUser.authtoken;\n                testData.mongoUserTriggerObj.user_uid = dummyUser.uid;\n                _models.UserTrigger.create(testData.mongoUserTriggerObj, function(err, userTrigger) {\n                    cbk(err, userTrigger);\n                })\n            },\n            function(userTrigger, cbk) {\n                userTriggerObj = userTrigger\n                projectData.owner_uid = dummyUser.uid\n                projectData.env_uid = dummyUser.default_env\n                api.post('/enterprise/v1/projects')\n                    .set('authtoken', dummyUser.authtoken)\n                    .send(projectData)\n                    .expect(httpStatus.CREATED)\n                    .end(function(err, result) {\n                        cbk(err, result);\n                    })\n            },\n            function(result, cbk) {\n                project = result.body.output;\n                async.parallel([\n                    function(cb) {\n                        saveFlow(flowURL, dummyUser, flowData, function(err, result) {\n                            cb(err, result)\n                        })\n                    },\n                    function(cb) {\n                        var flowData2 = _.cloneDeep(flowData)\n                        api.post(flowURL)\n                            .set({ 'authtoken': dummyUser.authtoken, project_uid: project.uid })\n                            .send(flowData2)\n                            .expect(httpStatus.CREATED)\n                            .end(function(err, res) {\n                                cb(err, res)\n                            })\n                    }\n                ], function(err, results) {\n                    cbk(err, results)\n                })\n            }\n        ], function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                userFlow = res[0].body.output\n                userFlowWithProject = res[1].body.output\n                done()\n            }\n        })\n    });\n})",
                "err": {},
                "isRoot": false,
                "uuid": "ca7dfc48-0f26-446b-8f39-ab2dfd3b16ef",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Flow.deleteUserFlow \"after all\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nhttpmock.cleanAll();\n_models.newFlow.remove({ uid: userFlow.uid }, function(err, deletedFlow) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "6bfdc0d4-5843-459e-b051-fc3977a5039a",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Flow.deleteUserFlow Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.delete(flowURL + '/' + userFlow.uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "72be487a-66fb-427d-ab74-dc40cab9e31c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if flow not found.",
                "fullTitle": "Enterprise Flow.deleteUserFlow Should get error, if flow not found.",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.delete(flowURL + '/dummyFlow')\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.FLOW_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "2c98e140-5490-4407-a147-c4173c56481d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should delete flow with trigger, if user flow is found.",
                "fullTitle": "Enterprise Flow.deleteUserFlow Should delete flow with trigger, if user flow is found.",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = {\n    path: '/triggers/handlers/pull',\n    body: {\n        \"flow_uid\": userFlow.uid,\n        \"org_uid\": userFlow.org_uid || null,\n        \"env_uid\": userFlow.env_uid,\n        \"project_uid\": userFlow.project_uid\n    }\n};\ncommonMock.flowTriggerDeleteSuccess(opt);\napi.delete(flowURL + '/' + userFlow.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output.notice).to.equal(messageList.FLOW_DELETE_SUCCESS);\n            _models.newFlow.findOne({ uid: userFlow.uid }, function(err, result) {\n                if (err) {\n                    done(err)\n                } else {\n                    expect(result.deleted_at).not.to.be.null\n                    done();\n                }\n            })\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "df7ff455-8f7a-4996-b623-f4bfefd79039",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should delete flow without trigger, if user flow is found.",
                "fullTitle": "Enterprise Flow.deleteUserFlow Should delete flow without trigger, if user flow is found.",
                "timedOut": false,
                "duration": 30,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar data = { deleted_at: null, trigger: testData.defaultTriggerObj }\n_models.newFlow.findOneAndUpdate({ uid: userFlow.uid }, data, { new: true }, function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        api.delete(flowURL + '/' + userFlow.uid)\n            .set('authtoken', dummyUser.authtoken)\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    expect(res.body.output.notice).to.equal(messageList.FLOW_DELETE_SUCCESS);\n                    _models.newFlow.findOne({ uid: userFlow.uid }, function(err, result) {\n                        if (err) {\n                            done(err)\n                        } else {\n                            expect(result.deleted_at).not.to.be.null\n                            _models.newFlow.findOne({ uid: userFlow.uid }, function(err, result2) {\n                                expect(result2.deleted_at).not.to.be.null\n                                done();\n                            })\n                        }\n                    })\n                }\n            });\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "20fbc617-a9d3-40ab-9371-4a352e605ad0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should delete flow other project, if user flow is found.",
                "fullTitle": "Enterprise Flow.deleteUserFlow Should delete flow other project, if user flow is found.",
                "timedOut": false,
                "duration": 27,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar data = { deleted_at: null, trigger: testData.defaultTriggerObj }\n_models.newFlow.findOneAndUpdate({ uid: userFlowWithProject.uid }, data, { new: true }, function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        api.delete(flowURL + '/' + userFlowWithProject.uid)\n            .set({ authtoken: dummyUser.authtoken, project_uid: project.uid })\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    expect(res.body.output.notice).to.equal(messageList.FLOW_DELETE_SUCCESS);\n                    _models.newFlow.findOne({ uid: userFlowWithProject.uid }, function(err, result) {\n                        if (err) {\n                            done(err)\n                        } else {\n                            expect(result.deleted_at).not.to.be.null\n                            expect(result.project_uid).to.be.equal(project.uid)\n                            done();\n                        }\n                    })\n                }\n            });\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "7368e61f-40e6-4901-bebc-c83a54f63c03",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "72be487a-66fb-427d-ab74-dc40cab9e31c",
              "2c98e140-5490-4407-a147-c4173c56481d",
              "df7ff455-8f7a-4996-b623-f4bfefd79039",
              "20fbc617-a9d3-40ab-9371-4a352e605ad0",
              "7368e61f-40e6-4901-bebc-c83a54f63c03"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 102,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "5f2773ad-f30f-4fe3-94ae-ed5b5f523589",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\flow\\deleteUserFlowVersion.enterprise.js",
        "file": "\\controllers\\test\\flow\\deleteUserFlowVersion.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "8cfd325e-741b-4a9d-83b1-d39586b639df",
            "title": "Flow.deleteUserFlowVersion",
            "fullFile": "C:\\work\\api\\controllers\\test\\flow\\deleteUserFlowVersion.enterprise.js",
            "file": "\\controllers\\test\\flow\\deleteUserFlowVersion.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Flow.deleteUserFlowVersion \"before all\" hook",
                "timedOut": false,
                "duration": 118,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data;\n        async.waterfall([\n            function(cbk) {\n                dummyUser = orgData.owner;\n                dummyUser.authtoken = dummyUser.authtoken;\n                testData.mongoUserTriggerObj.user_uid = dummyUser.uid;\n                _models.UserTrigger.create(testData.mongoUserTriggerObj, function(err, userTrigger) {\n                    cbk(err, userTrigger);\n                })\n            },\n            function(userTrigger, cbk) {\n                userTriggerObj = userTrigger\n                projectData.owner_uid = dummyUser.uid\n                projectData.env_uid = dummyUser.default_env\n                api.post('/enterprise/v1/projects')\n                    .set('authtoken', dummyUser.authtoken)\n                    .send(projectData)\n                    .expect(httpStatus.CREATED)\n                    .end(function(err, result) {\n                        cbk(err, result);\n                    })\n            },\n            function(result, cbk) {\n                project = result.body.output;\n                async.parallel([\n                    function(cb) {\n                        saveFlow(flowURL, dummyUser, flowData, function(err, result) {\n                            cb(err, result)\n                        })\n                    },\n                    function(cb) {\n                        var flowData2 = _.cloneDeep(flowData)\n                        api.post(flowURL)\n                            .set({ 'authtoken': dummyUser.authtoken, project_uid: project.uid })\n                            .send(flowData2)\n                            .expect(httpStatus.CREATED)\n                            .end(function(err, res) {\n                                cb(err, res)\n                            })\n                    }\n                ], function(err, results) {\n                    cbk(err, results)\n                })\n            }\n        ], function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                userFlow = res[0].body.output\n                userFlowWithProject = res[1].body.output\n                done()\n            }\n        })\n    });\n})",
                "err": {},
                "isRoot": false,
                "uuid": "ba4c6039-930c-4b35-b67d-441f7ea9aa32",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Flow.deleteUserFlowVersion \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nhttpmock.cleanAll();\n_models.newFlowVersion.remove({ uid: userFlow.uid }, function(err) {\n    if (err) {\n        done(err)\n    } else {\n        _models.newFlow.remove({ uid: userFlow.uid }, function(err, deletedFlow) {\n            if (err) {\n                done(err)\n            } else {\n                done()\n            }\n        })\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "0e9c5ceb-cc0e-4392-88f4-421fe6b1ee42",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Flow.deleteUserFlowVersion Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.delete(flowURL + userFlow.uid + '/version/1')\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "d223b90f-b548-4195-8b92-e38ea598d437",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if flow not found.",
                "fullTitle": "Enterprise Flow.deleteUserFlowVersion Should get error, if flow not found.",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.delete(flowURL + 'dummyFlow' + '/version/1')\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.FLOW_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "136deb99-6174-4047-a56a-263eff135095",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if flow version not found not found.",
                "fullTitle": "Enterprise Flow.deleteUserFlowVersion Should get error, if flow version not found not found.",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.delete(flowURL + userFlow.uid + '/version/21')\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.FLOW_VERSION_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "9f1c307a-45a0-4d4f-9916-f3baf6513f49",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if flow version not valid.",
                "fullTitle": "Enterprise Flow.deleteUserFlowVersion Should get error, if flow version not valid.",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.delete(flowURL + userFlow.uid + '/version/dummy')\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "8ae83c60-95fe-47b8-9290-b7d9f8171415",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if user tried to delete current flow version.",
                "fullTitle": "Enterprise Flow.deleteUserFlowVersion Should get error, if user tried to delete current flow version.",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.delete(flowURL + userFlow.uid + '/version/1')\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.CURRENT_VERSION_DELETE_ERROR);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "d43cee3e-a459-4006-a3e4-19f111369a24",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d223b90f-b548-4195-8b92-e38ea598d437",
              "136deb99-6174-4047-a56a-263eff135095",
              "9f1c307a-45a0-4d4f-9916-f3baf6513f49",
              "8ae83c60-95fe-47b8-9290-b7d9f8171415",
              "d43cee3e-a459-4006-a3e4-19f111369a24"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 64,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "92076715-eec9-4fd9-9872-a28184ee8c7f",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\flow\\executeUserFlow.enterprise.js",
        "file": "\\controllers\\test\\flow\\executeUserFlow.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "b470011c-d8e2-447e-981d-6d781014a249",
            "title": "Flow.ExecuteUserFlow",
            "fullFile": "C:\\work\\api\\controllers\\test\\flow\\executeUserFlow.enterprise.js",
            "file": "\\controllers\\test\\flow\\executeUserFlow.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Flow.ExecuteUserFlow \"before all\" hook",
                "timedOut": false,
                "duration": 295,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data;\n        customRoleProject = _.find(orgData.org_projects, { name: 'proj2' })\n        async.waterfall([\n            function(cbk) {\n                var query = _models.newFlow.remove()\n                query.exec(function(err) {\n                    dummyUser = orgData.owner;\n                    dummyUser.authtoken = dummyUser.authtoken;\n                    testData.mongoUserTriggerObj.user_uid = dummyUser.uid;\n                    _models.UserTrigger.create(testData.mongoUserTriggerObj, function(err, userTrigger) {\n                        cbk(err, userTrigger);\n                    })\n                })\n            },\n            function(userTrigger, cbk) {\n                var userTriggerObj = userTrigger;\n                var flowData = _.cloneDeep(testData.flowBody);\n                flowData.isExpress = false;\n                flowData.trigger.handlers = [userTriggerObj]\n                async.parallel({\n                    triggerFlow: function(cb) {\n                        createFlow(flowURL, flowData, dummyUser, function(err, result) {\n                            cb(err, result);\n                        })\n                    },\n                    inactiveFlow: function(cb) {\n                        var inactiveFlow = _.cloneDeep(flowData);\n                        inactiveFlow.active = false;\n                        createFlow(flowURL, inactiveFlow, dummyUser, function(err, result) {\n                            cb(err, result);\n                        })\n                    },\n                    draftFlow: function(cb) {\n                        var draftFlow = _.cloneDeep(flowData);\n                        draftFlow.is_draft = true;\n                        createFlow(flowURL, draftFlow, dummyUser, function(err, result) {\n                            cb(err, result);\n                        })\n                    },\n                    webHookFlow: function(cb) {\n                        var WHFlow = _.cloneDeep(flowData);\n                        WHFlow.trigger = testData.defaultTriggerObj;\n                        WHFlow.settings = testData.webHookSetting;\n                        WHFlow.active = true;\n                        WHFlow.settings = testData.webHookSetting;\n                        createFlow(flowURL, WHFlow, dummyUser, function(err, result) {\n                            cb(err, result);\n                        })\n                    },\n                    orgFlow: function(cb) {\n                        var WHFlow = _.cloneDeep(flowData);\n                        WHFlow.trigger = testData.defaultTriggerObj;\n                        WHFlow.settings = testData.webHookSetting;\n                        WHFlow.active = true;\n                        WHFlow.settings = testData.webHookSetting;\n                        api.post(flowURL)\n                            .set({ 'authtoken': dummyUser.authtoken, org_uid: orgData.organization.uid })\n                            .send(flowData)\n                            .expect(httpStatus.CREATED)\n                            .end(function(err, res) {\n                                var flow = res.body.output;\n                                if (!flowData.is_draft) {\n                                    _models.newFlow.findOneAndUpdate({ uid: flow.uid }, { is_draft: false, preserve_version: true }, { new: true }, function(err, result) {\n                                        cb(err, result)\n                                    })\n                                } else {\n                                    cb(err, flow)\n                                }\n                            })\n                    },\n                    invalidEnvFlow: function(cb) {\n                        var IVWHFlow = _.cloneDeep(flowData);\n                        IVWHFlow.trigger = testData.defaultTriggerObj;\n                        IVWHFlow.settings = testData.webHookSetting;\n                        IVWHFlow.environment[0].params.push({ key: \"body\", required: true });\n                        createFlow(flowURL, IVWHFlow, dummyUser, function(err, result) {\n                            cb(err, result);\n                        })\n                    }\n                }, function(err, result) {\n                    cbk(err, result)\n                })\n            }\n        ], function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                userTriggerFlow = res.triggerFlow._doc;\n                userDraftFlow = res.draftFlow;\n                userWebHookFlow = res.webHookFlow._doc;\n                orgFlow = res.orgFlow._doc;\n                invalidEnvFlow = res.invalidEnvFlow._doc;\n                inactiveFlow = res.inactiveFlow._doc;\n                done()\n            }\n        })\n    });\n})",
                "err": {},
                "isRoot": false,
                "uuid": "7c90d97a-fed8-4cb9-9d5a-9238e908b3bb",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Flow.ExecuteUserFlow \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nhttpmock.cleanAll();\nvar flowUIDS = [userTriggerFlow.uid, userDraftFlow.uid, userWebHookFlow.uid, invalidEnvFlow.uid];\nasync.parallel([\n    function(cb) {\n        _models.newFlow.remove({ uid: { $in: flowUIDS } }, function(err, deletedFlows) {\n            cb(err, deletedFlows)\n        });\n    },\n    function(cb) {\n        _models.UserTrigger.remove({ uid: userTriggerObj.uid }, function(err, deletedUserTrigger) {\n            cb(err, deletedUserTrigger);\n        })\n    },\n    function(cb) {\n        _models.Bill.remove({ flow_uid: { $in: flowUIDS } }, function(err, bill) {\n            cb(err, bill);\n        })\n    },\n    function(cb) {\n        _models.Payload.remove({ flow_uid: { $in: flowUIDS } }, function(err, bill) {\n            cb(err, bill);\n        })\n    },\n    function(cb) {\n        _models.Log.remove({ flow_uid: { $in: flowUIDS } }, function(err, bill) {\n            cb(err, bill);\n        })\n    }\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        //clearRecords(function(err, result) {\n        done()\n            //})\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "362a36d9-7056-4a9e-a48e-bc762e55dd36",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Flow.ExecuteUserFlow Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(flowURL + '/' + userTriggerFlow.uid + '/execute')\n    .send(getExecuteBody(userTriggerFlow))\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "b741a9c1-b800-4494-9256-eaadffd9575e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should execute flow with web hook.",
                "fullTitle": "Enterprise Flow.ExecuteUserFlow Should execute flow with web hook.",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { user_uid: dummyUser.uid }\ncommonMock.executeFlowTimeOut(opt)\napi.post(flowURL + '/' + userTriggerFlow.uid + '/execute')\n    .set('authtoken', dummyUser.authtoken)\n    .send(getExecuteBody(userTriggerFlow))\n    .expect(400)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).to.be.equal(messageList.QMANGER_SERVER_DOWN);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "c605fe0c-ea03-4205-8713-5889c9555ce3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if flow not found.",
                "fullTitle": "Enterprise Flow.ExecuteUserFlow Should get error, if flow not found.",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(flowURL + '/dummyFlow/execute')\n    .set('authtoken', dummyUser.authtoken)\n    .send(getExecuteBody(userTriggerFlow))\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.FLOW_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "f08a960d-90c6-4f84-b213-e97bf7481571",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if is in \"draft\" state.",
                "fullTitle": "Enterprise Flow.ExecuteUserFlow Should get error, if is in \"draft\" state.",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(flowURL + '/' + userDraftFlow.uid + '/execute')\n    .set('authtoken', dummyUser.authtoken)\n    .send(getExecuteBody(userDraftFlow))\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PARAM_MISSING_IN_ACTIVITY);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "7d4b261b-b196-400c-b571-a96ba53a0778",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if flow is inavlid.",
                "fullTitle": "Enterprise Flow.ExecuteUserFlow Should get error, if flow is inavlid.",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(flowURL + '/' + inactiveFlow.uid + '/execute')\n    .set('authtoken', dummyUser.authtoken)\n    .send(getExecuteBody(inactiveFlow))\n    .expect(422)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.FLOW_INACTIVE_STATE_ERROR);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "d619707a-8f45-4237-bcb3-23959eb7330e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if user account is suspended.",
                "fullTitle": "Enterprise Flow.ExecuteUserFlow Should get error, if user account is suspended.",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n_models.User.findOneAndUpdate({ uid: dummyUser.uid }, { force_suspend: true }, { new: true }, function(err, user) {\n    if (err) {\n        done(err)\n    } else {\n        api.post(flowURL + '/' + userWebHookFlow.uid + '/execute')\n            .set('authtoken', dummyUser.authtoken)\n            .expect(httpStatus.BAD_REQUEST)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    res.body.error.message.should.equal(messageList.FLOW_RUN_USER_PLAN_EXPIRE_ERROR);\n                    done();\n                }\n            });\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "d4acad96-9317-4808-834b-23b68129b6b9",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b741a9c1-b800-4494-9256-eaadffd9575e",
              "c605fe0c-ea03-4205-8713-5889c9555ce3",
              "f08a960d-90c6-4f84-b213-e97bf7481571",
              "7d4b261b-b196-400c-b571-a96ba53a0778",
              "d619707a-8f45-4237-bcb3-23959eb7330e",
              "d4acad96-9317-4808-834b-23b68129b6b9"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 82,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "218e2938-c4b2-4788-a0aa-6f478a15df03",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\flow\\executeUserTriggerFlow.enterprise.js",
        "file": "\\controllers\\test\\flow\\executeUserTriggerFlow.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "0beb8392-0e4e-4992-86ee-e222e1b20f51",
            "title": "Flow.ExecuteUserTriggerFlow",
            "fullFile": "C:\\work\\api\\controllers\\test\\flow\\executeUserTriggerFlow.enterprise.js",
            "file": "\\controllers\\test\\flow\\executeUserTriggerFlow.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Flow.ExecuteUserTriggerFlow \"before all\" hook",
                "timedOut": false,
                "duration": 2807,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(userTrigger, cbk) {\n        userTriggerObj = userTrigger\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    },\n    function(result, cbk) {\n        dummyUser = result.body.output;\n        testData.mongoUserTriggerObj.user_uid = dummyUser.uid;\n        _models.UserTrigger.create(testData.mongoUserTriggerObj, function(err, userTrigger) {\n            cbk(err, userTrigger);\n        })\n    },\n    function(userTrigger, cbk) {\n        var userTriggerObj = userTrigger;\n        var flowData = _.clone(testData.flowBody);\n        flowData.environment[0].params = []\n        flowData.isExpress = false;\n        flowData.trigger.handlers = [userTriggerObj.uid]\n        async.parallel({\n            triggerFlow: function(cb) {\n                createFlow(flowURL, flowData, dummyUser, function(err, result) {\n                    cb(err, result);\n                })\n            },\n            draftFlow: function(cb) {\n                var draftFlow = _.clone(flowData);\n                draftFlow.is_draft = true;\n                createFlow(flowURL, draftFlow, dummyUser, function(err, result) {\n                    cb(err, result);\n                })\n            },\n            webHookFlow: function(cb) {\n                var WHFlow = _.clone(flowData);\n                WHFlow.trigger = undefined;\n                WHFlow.settings = testData.webHookSetting;\n                createFlow(flowURL, WHFlow, dummyUser, function(err, result) {\n                    cb(err, result);\n                })\n            },\n            invalidEnvFlow: function(cb) {\n                var IVWHFlow = _.clone(flowData);\n                IVWHFlow.trigger = undefined;\n                IVWHFlow.settings = testData.webHookSetting;\n                IVWHFlow.environment[0].params.push({ key: \"body\", required: true });\n                createFlow(flowURL, IVWHFlow, dummyUser, function(err, result) {\n                    cb(err, result);\n                })\n            }\n        }, function(err, result) {\n            cbk(err, result)\n        })\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        userTriggerFlow = res.triggerFlow._doc;\n        userDraftFlow = res.draftFlow;\n        userWebHookFlow = res.webHookFlow._doc;\n        invalidEnvFlow = res.invalidEnvFlow._doc;\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "753ec67a-edd5-4420-84e2-1dce3e4a4be1",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Flow.ExecuteUserTriggerFlow \"after all\" hook",
                "timedOut": false,
                "duration": 2,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar flowUIDS = [userTriggerFlow.uid];\nasync.parallel([\n    function(cb) {\n        _models.newFlow.remove({ uid: { $in: flowUIDS } }, function(err, deletedFlows) {\n            cb(err, deletedFlows)\n        });\n    },\n    function(cb) {\n        _models.UserTrigger.remove({ uid: userTriggerObj.uid }, function(err, deletedUserTrigger) {\n            cb(err, deletedUserTrigger);\n        })\n    },\n    function(cb) {\n        _models.Bill.remove({ flow_uid: { $in: flowUIDS } }, function(err, bill) {\n            cb(err, bill);\n        })\n    },\n    function(cb) {\n        _models.Payload.remove({ flow_uid: { $in: flowUIDS } }, function(err, bill) {\n            cb(err, bill);\n        })\n    },\n    function(cb) {\n        _models.Log.remove({ flow_uid: { $in: flowUIDS } }, function(err, bill) {\n            cb(err, bill);\n        })\n    }\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "21907412-e0c2-4ed8-af45-0854b80ee012",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Flow.ExecuteUserTriggerFlow Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL + userTriggerFlow.uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal('Unauthorized');\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "cc456c1f-d60b-4aa9-90d5-d8f14b7bd116",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if flow not found.",
                "fullTitle": "Enterprise Flow.ExecuteUserTriggerFlow Should get error, if flow not found.",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL + 'dummyFlow')\n    .set('ui_admin_key', config.UI_ADMIN_KEY)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.FLOW_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "7481837b-b3a5-45fb-9f70-0cdcaf729eed",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if is in \"draft\" state.",
                "fullTitle": "Enterprise Flow.ExecuteUserTriggerFlow Should get error, if is in \"draft\" state.",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL + userDraftFlow.uid)\n    .set('ui_admin_key', config.UI_ADMIN_KEY)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PARAM_MISSING_IN_ACTIVITY);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "f76ac010-5c57-44b4-a919-bf17ca1899c0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if trigger not in active state.",
                "fullTitle": "Enterprise Flow.ExecuteUserTriggerFlow Should get error, if trigger not in active state.",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL + userWebHookFlow.uid)\n    .set('ui_admin_key', config.UI_ADMIN_KEY)\n    .expect(422)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.TRIGGER_NOT_ACTIVE);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "0f2e4f2b-34ab-4e37-be93-1824aa6b1be3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if trigger not found in flow.",
                "fullTitle": "Enterprise Flow.ExecuteUserTriggerFlow Should get error, if trigger not found in flow.",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n_models.newFlow.findOneAndUpdate({ uid: invalidEnvFlow.uid }, { trigger: undefined }, { new: true }, function(err, result) {\n    if (!result) {\n        err = err || messageList.FLOW_NOT_FOUND\n        done(err);\n    } else {\n        api.post(apiURL + invalidEnvFlow.uid)\n            .set('ui_admin_key', config.UI_ADMIN_KEY)\n            .expect(httpStatus.BAD_REQUEST)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    res.body.error.message.should.equal(messageList.TRIGGER_NOT_FOUND);\n                    done();\n                }\n            });\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "5040142e-7cd0-457a-9a67-fc446a24ff86",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should execute flow with trigger.",
                "fullTitle": "Enterprise Flow.ExecuteUserTriggerFlow Should execute flow with trigger.",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { user_uid: dummyUser.uid }\ncommonMock.executeFlowSuccess(opt)\napi.post(apiURL + userTriggerFlow.uid)\n    .set('ui_admin_key', config.UI_ADMIN_KEY)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body).to.have.all.keys(responseKeys);\n            expect(res.body.response).to.be.equal(messageList.FLOW_ENQUE_SUCCESS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "de1ef386-097d-4b42-8ad9-877de7a0ef2e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error,if user account has been suspended.",
                "fullTitle": "Enterprise Flow.ExecuteUserTriggerFlow Should get error,if user account has been suspended.",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.waterfall([\n    function(cbk) {\n        _models.User.findOneAndUpdate({ uid: dummyUser.uid }, { force_suspend: true }, { new: true }, function(err, updatedUser) {\n            cbk(err, updatedUser);\n        })\n    },\n    function(result, cbk) {\n        // var updatedUser = result.body.output;\n        api.post(apiURL + userTriggerFlow.uid)\n            .set('ui_admin_key', config.UI_ADMIN_KEY)\n            .expect(httpStatus.PAYMENT_REQUIRED)\n            .end(function(err, res) {\n                cbk(err, res);\n            });\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        expect(res.body.error.message).to.be.equal(messageList.USER_ACCOUNT_EXPIRED);\n        done();\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "7c7874b2-528e-4c8a-b265-e4e6801cfe69",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "cc456c1f-d60b-4aa9-90d5-d8f14b7bd116",
              "7481837b-b3a5-45fb-9f70-0cdcaf729eed",
              "f76ac010-5c57-44b4-a919-bf17ca1899c0",
              "0f2e4f2b-34ab-4e37-be93-1824aa6b1be3",
              "5040142e-7cd0-457a-9a67-fc446a24ff86",
              "de1ef386-097d-4b42-8ad9-877de7a0ef2e",
              "7c7874b2-528e-4c8a-b265-e4e6801cfe69"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 38,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "46a4fd3b-e380-41db-a5ce-d3aec84926c4",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\flow\\generateFlowSID.enterprise.js",
        "file": "\\controllers\\test\\flow\\generateFlowSID.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "27f69644-6009-40d4-afde-bcdbe5677be2",
            "title": "Flow.generateSID",
            "fullFile": "C:\\work\\api\\controllers\\test\\flow\\generateFlowSID.enterprise.js",
            "file": "\\controllers\\test\\flow\\generateFlowSID.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Flow.generateSID \"before all\" hook",
                "timedOut": false,
                "duration": 2079,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(user, cbk) {\n        testData.mongoUserTriggerObj.user_uid = user.uid;\n        _models.UserTrigger.create(testData.mongoUserTriggerObj, function(err, userTrigger) {\n            cbk(err, userTrigger);\n        })\n    },\n    function(userTrigger, cbk) {\n        userTriggerObj = userTrigger\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result, userTriggerObj);\n            })\n    },\n    function(result, userTriggerObj, cbk) {\n        dummyUser = result.body.output;\n        //flowWithAllData.trigger.handlers[0] = userTriggerObj\n        api.post(flowURL)\n            .set('authtoken', dummyUser.authtoken)\n            .send(flowWithAllData)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                cbk(err, res)\n            })\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        userFlow = res.body.output;\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "050508e4-e470-445b-a969-6251c0015dba",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Flow.generateSID \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nhttpmock.cleanAll();\nasync.parallel([\n    function(cb) {\n        _models.newFlow.remove({ uid: userFlow.uid }, function(err, deletedFlow) {\n            cb(err, deletedFlow);\n        })\n    },\n    function(cb) {\n        _models.UserTrigger.remove({ uid: userTriggerObj.uid }, function(err, deletedUserTrigger) {\n            cb(err, deletedUserTrigger);\n        })\n    }\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "6e465285-3fcc-42cd-8e4c-6eb4df1f0c2b",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Flow.generateSID Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put(flowURL + '/' + userFlow.uid + '/generatesid')\n    .send(userFlow)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "3a1f131a-f69e-4e46-b09d-ea95a14ff918",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if flow not found.",
                "fullTitle": "Enterprise Flow.generateSID Should get error, if flow not found.",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put(flowURL + '/dummyFlow' + '/generatesid')\n    .set('authtoken', dummyUser.authtoken)\n    .send()\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.FLOW_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "ce348297-1422-4b45-af0d-0bfd4dd87ae2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should generate SID.",
                "fullTitle": "Enterprise Flow.generateSID Should generate SID.",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put(flowURL + '/' + userFlow.uid + '/generatesid')\n    .set('authtoken', dummyUser.authtoken)\n    .send({})\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var flow = res.body.output\n            expect(flow.sid).to.not.equal(userFlow.sid)\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "bfbeee83-8706-422d-b2ce-d79051a1efbd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should  get error,  if user sends a valid data which already present.",
                "fullTitle": "Enterprise Flow.generateSID Should  get error,  if user sends a valid data which already present.",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n_models.newFlow.findOne({uid: userFlow.uid}, function(err, result){\n    api.put(flowURL + '/' + userFlow.uid + '/generatesid')\n        .set('authtoken', dummyUser.authtoken)\n        .send({sid:result.sid})\n        .expect(httpStatus.BAD_REQUEST)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                var flow =\n                expect(res.body.error.message).to.equal(messageList.RECORD_ALREADY_EXISTS)\n                done();\n            }\n        });\n})",
                "err": {},
                "isRoot": false,
                "uuid": "92428c2b-8300-44e0-844e-d9a1d79d9ae1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should generate SID,  if user sends a valid data.",
                "fullTitle": "Enterprise Flow.generateSID Should generate SID,  if user sends a valid data.",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n\n    api.put(flowURL + '/' + userFlow.uid + '/generatesid')\n        .set('authtoken', dummyUser.authtoken)\n        .send({sid:'abc'})\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                var flow = res.body.output\n                expect(flow.sid).to.not.equal(userFlow.sid)\n                done();\n            }\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "4aea2242-d04a-41cd-84c7-02614473c4a2",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "3a1f131a-f69e-4e46-b09d-ea95a14ff918",
              "ce348297-1422-4b45-af0d-0bfd4dd87ae2",
              "bfbeee83-8706-422d-b2ce-d79051a1efbd",
              "92428c2b-8300-44e0-844e-d9a1d79d9ae1",
              "4aea2242-d04a-41cd-84c7-02614473c4a2"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 70,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "93b73862-6825-49d4-9fdf-4dc54ac6862c",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\flow\\generateWebhookToken.enterprise.js",
        "file": "\\controllers\\test\\flow\\generateWebhookToken.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "2d3fcb41-db81-4388-a80e-5ef325ecee87",
            "title": "Flow.generateWebHookToken",
            "fullFile": "C:\\work\\api\\controllers\\test\\flow\\generateWebhookToken.enterprise.js",
            "file": "\\controllers\\test\\flow\\generateWebhookToken.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Flow.generateWebHookToken \"before all\" hook",
                "timedOut": false,
                "duration": 2233,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(user, cbk) {\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        dummyUser = res.body.output;\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "a61365b3-2d27-48f5-a66a-4d4302bea112",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Flow.generateWebHookToken Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "6372f016-ae21-44ba-8625-02b735fbe8be",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get flow, if user flow is found.",
                "fullTitle": "Enterprise Flow.generateWebHookToken Should get flow, if user flow is found.",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output).not.null\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "97121d14-2869-4e5b-9b3b-1a19b9a010de",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "6372f016-ae21-44ba-8625-02b735fbe8be",
              "97121d14-2869-4e5b-9b3b-1a19b9a010de"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 18,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "26e33dfd-2051-4e91-a48d-1e44d604388c",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\flow\\getFlowTestDataByFlow.enterprise.js",
        "file": "\\controllers\\test\\flow\\getFlowTestDataByFlow.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "41bed9e8-68cf-42e0-bbcb-85ef5da94186",
            "title": "Flows.getFlowTestsDataByFlow",
            "fullFile": "C:\\work\\api\\controllers\\test\\flow\\getFlowTestDataByFlow.enterprise.js",
            "file": "\\controllers\\test\\flow\\getFlowTestDataByFlow.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Flows.getFlowTestsDataByFlow \"before all\" hook",
                "timedOut": false,
                "duration": 77,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data\n        async.waterfall([\n            function(cbk) {\n                dummyUser = orgData.owner\n                dummyUser.authtoken = dummyUser.authtoken\n                flowTestObj.user_uid = dummyUser.uid\n                flowTestObj.env_uid = dummyUser.default_env\n                _models.FlowTest.create(flowTestObj, function(err, result) {\n                    cbk(err, result);\n                })\n            }\n        ], function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                flowTestData = res.toJSON()\n                done()\n            }\n        })\n    });\n})",
                "err": {},
                "isRoot": false,
                "uuid": "8381c9bf-e963-4ede-b4b4-91c907f793df",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Flows.getFlowTestsDataByFlow \"after all\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n_models.FlowTest.remove(function(err) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "51a92222-ebd9-4900-be49-bd5eb2e6f508",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Flows.getFlowTestsDataByFlow Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + '?flow_uid=' + flowTestData.flow_uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "cf9404e3-75ae-4e6a-8867-d963afd29f0e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of flowTest data.",
                "fullTitle": "Enterprise Flows.getFlowTestsDataByFlow Should get list of flowTest data.",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + '?flow_uid=' + flowTestData.flow_uid)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(_.first(res.body.output).flow_uid).to.be.equal(flowTestData.flow_uid)\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "eb9b0b19-b393-47ec-aa1c-3f4ad8d0d580",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "cf9404e3-75ae-4e6a-8867-d963afd29f0e",
              "eb9b0b19-b393-47ec-aa1c-3f4ad8d0d580"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 21,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "0ee83e20-5e11-404b-ad03-a5c5676a8ada",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\flow\\getFlowTestDataByUID.enterprise.js",
        "file": "\\controllers\\test\\flow\\getFlowTestDataByUID.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "1fbbbfb1-a37c-455b-ae5e-ee716123e57c",
            "title": "Flows.getFlowTestsDataByUID",
            "fullFile": "C:\\work\\api\\controllers\\test\\flow\\getFlowTestDataByUID.enterprise.js",
            "file": "\\controllers\\test\\flow\\getFlowTestDataByUID.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Flows.getFlowTestsDataByUID \"before all\" hook",
                "timedOut": false,
                "duration": 65,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data\n        async.waterfall([\n            function(cbk) {\n                dummyUser = orgData.owner\n                dummyUser.authtoken = dummyUser.authtoken\n                flowTestObj.user_uid = dummyUser.uid\n                flowTestObj.env_uid = dummyUser.default_env\n                _models.FlowTest.remove(function(err) {\n                    _models.FlowTest.create(flowTestObj, function(err, result) {\n                        cbk(err, result);\n                    })\n                })\n            }\n        ], function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                flowTestData = res.toJSON()\n                done()\n            }\n        })\n    });\n})",
                "err": {},
                "isRoot": false,
                "uuid": "1b349bd7-c0a3-46c8-b3cb-a3c3f01032f6",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Flows.getFlowTestsDataByUID \"after all\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n_models.FlowTest.remove(function(err) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "55f1e57a-b653-4000-a27e-f2dfc1d578d8",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Flows.getFlowTestsDataByUID Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + flowTestObj.uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "0b78a5c6-cacc-4149-9f19-c5422b085634",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if flow not found.",
                "fullTitle": "Enterprise Flows.getFlowTestsDataByUID Should get error, if flow not found.",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + 'dummy')\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).to.be.equal(messageList.NO_DATA_FOUND)\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "1cdad795-30e3-4b6b-a2f6-5a3d1fe931ed",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get flowTest data.",
                "fullTitle": "Enterprise Flows.getFlowTestsDataByUID Should get flowTest data.",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + flowTestObj.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output.flow_uid).to.be.equal(flowTestObj.flow_uid)\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "731fdaca-d5bd-455e-b689-d685ba8812db",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0b78a5c6-cacc-4149-9f19-c5422b085634",
              "1cdad795-30e3-4b6b-a2f6-5a3d1fe931ed",
              "731fdaca-d5bd-455e-b689-d685ba8812db"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 33,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "01f0e2d9-5658-4b2a-80fe-45384b459c38",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\flow\\getUserFlow.enterprise.js",
        "file": "\\controllers\\test\\flow\\getUserFlow.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "3bd8759b-4c83-482c-bbbd-e5b4d5f580f1",
            "title": "Flow.GetUserFlow",
            "fullFile": "C:\\work\\api\\controllers\\test\\flow\\getUserFlow.enterprise.js",
            "file": "\\controllers\\test\\flow\\getUserFlow.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Flow.GetUserFlow \"before all\" hook",
                "timedOut": false,
                "duration": 112,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data\n        async.waterfall([\n            function(cbk) {\n                dummyUser = orgData.owner\n                dummyUser.authtoken = dummyUser.authtoken\n                testData.mongoUserTriggerObj.user_uid = dummyUser.uid;\n                _models.UserTrigger.create(testData.mongoUserTriggerObj, function(err, userTrigger) {\n                    cbk(err, userTrigger);\n                })\n            },\n            function(result, cbk) {\n                api.post(flowURL)\n                    .set('authtoken', dummyUser.authtoken)\n                    .send(testData.enterpriseFlowBody)\n                    .expect(httpStatus.CREATED)\n                    .end(function(err, res) {\n                        cbk(err, res)\n                    })\n            },\n            function(result, cbk) {\n                userFlow = result.body.output;\n                api.post(flowURL)\n                    .set({ 'authtoken': dummyUser.authtoken, org_uid: orgData.organization.uid })\n                    .send(testData.enterpriseFlowBody)\n                    .expect(httpStatus.CREATED)\n                    .end(function(err, res) {\n                        cbk(err, res)\n                    })\n            }\n        ], function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                orgFlow = res.body.output;\n                done()\n            }\n        })\n    });\n})",
                "err": {},
                "isRoot": false,
                "uuid": "e3e22a9d-9025-4b4e-a9d8-36dcfadbdf8d",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Flow.GetUserFlow \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nhttpmock.cleanAll();\n_models.newFlow.remove({ uid: userFlow.uid }, function(err, deletedFlow) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "cd96397a-003e-4147-a9e8-1c6233d890a9",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Flow.GetUserFlow Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "4fe16819-7dab-41e3-9c5b-7597445ff9ab",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if flow not found.",
                "fullTitle": "Enterprise Flow.GetUserFlow Should get error, if flow not found.",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.FLOW_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "06759e50-0af5-49e4-9e14-227d981e60f4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get flow, if user flow is found.",
                "fullTitle": "Enterprise Flow.GetUserFlow Should get flow, if user flow is found.",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { path: triggerPath, body: triggerPath };\ncommonMock.triggerGetSuccess(opt);\napi.get(flowURL + '/' + userFlow.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.should.have.property('name');\n            expect(res.body.output).not.to.have.all.keys(['_id', '__v']);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "80596933-1b0b-4d8e-b1d8-53aa6979213c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get org flow, if user flow is found.",
                "fullTitle": "Enterprise Flow.GetUserFlow Should get org flow, if user flow is found.",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { path: triggerPath, body: triggerPath };\ncommonMock.triggerGetSuccess(opt);\napi.get(flowURL + '/' + orgFlow.uid)\n    .set({ 'authtoken': dummyUser.authtoken, org_uid: orgData.organization.uid })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.should.have.property('name');\n            expect(res.body.output.org_uid).equal(orgData.organization.uid);\n            expect(res.body.output).not.to.have.all.keys(['_id', '__v']);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "a3b04f81-911b-4cd9-b965-96e5a7455298",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "4fe16819-7dab-41e3-9c5b-7597445ff9ab",
              "06759e50-0af5-49e4-9e14-227d981e60f4",
              "80596933-1b0b-4d8e-b1d8-53aa6979213c",
              "a3b04f81-911b-4cd9-b965-96e5a7455298"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 60,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "3c2f35e6-1eb9-4ebd-9a1b-d8ef884b4322",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\flow\\getUserFlowLastRun.enterprise.js",
        "file": "\\controllers\\test\\flow\\getUserFlowLastRun.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "c1047a69-f5ef-41b7-b440-25123b879408",
            "title": "Flow.GetUserFlowLastRun",
            "fullFile": "C:\\work\\api\\controllers\\test\\flow\\getUserFlowLastRun.enterprise.js",
            "file": "\\controllers\\test\\flow\\getUserFlowLastRun.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Flow.GetUserFlowLastRun \"before all\" hook",
                "timedOut": false,
                "duration": 2088,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(user, cbk) {\n        testData.mongoUserTriggerObj.user_uid = user.uid;\n        _models.UserTrigger.create(testData.mongoUserTriggerObj, function(err, userTrigger) {\n            cbk(err, userTrigger);\n        })\n    },\n    function(userTrigger, cbk) {\n        userTriggerObj = userTrigger\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    },\n    function(result, cbk) {\n        dummyUser = result.body.output;\n        api.post(flowURL)\n            .set('authtoken', dummyUser.authtoken)\n            .send(testData.enterpriseFlowBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                cbk(err, res)\n            })\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        userFlow = res.body.output;\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "58dda5d3-6134-4427-85f6-8c6a829586ce",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Flow.GetUserFlowLastRun \"after all\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n_models.newFlow.remove({ uid: userFlow.uid }, function(err, deletedFlow) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "7ba39b72-2ef2-441f-a7c0-c660c85735a5",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Flow.GetUserFlowLastRun Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "d6850cd8-9ddc-4fb4-9b68-9a75433dcdda",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if flow not found.",
                "fullTitle": "Enterprise Flow.GetUserFlowLastRun Should get error, if flow not found.",
                "timedOut": false,
                "duration": 97,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.FLOW_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "ccf4a9cf-d9eb-49b7-a1ed-fb3c9e0b8f13",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get flow last run, if user flow is found.",
                "fullTitle": "Enterprise Flow.GetUserFlowLastRun Should get flow last run, if user flow is found.",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(flowURL + '/' + userFlow.uid + '/lastrun')\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output).to.have.all.keys(['duration', 'credits'])\n            expect(res.body.output).not.to.have.all.keys(['_id', '__v']);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "11336878-03b9-46d1-9f3a-3271223d0e45",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d6850cd8-9ddc-4fb4-9b68-9a75433dcdda",
              "ccf4a9cf-d9eb-49b7-a1ed-fb3c9e0b8f13",
              "11336878-03b9-46d1-9f3a-3271223d0e45"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 117,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "af8737f0-8cca-48d8-a14e-5f20250d20a7",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\flow\\getUsersDistinctFlowNames.enterprise.js",
        "file": "\\controllers\\test\\flow\\getUsersDistinctFlowNames.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "408d94b1-015c-4069-b679-458cdd863020",
            "title": "Flow",
            "fullFile": "C:\\work\\api\\controllers\\test\\flow\\getUsersDistinctFlowNames.enterprise.js",
            "file": "\\controllers\\test\\flow\\getUsersDistinctFlowNames.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "ea5eb854-344b-412a-aeed-faa2eafd3ec2",
                "title": "Flow.getUsersDistinctFlowNames",
                "fullFile": "C:\\work\\api\\controllers\\test\\flow\\getUsersDistinctFlowNames.enterprise.js",
                "file": "\\controllers\\test\\flow\\getUsersDistinctFlowNames.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Enterprise Flow Flow.getUsersDistinctFlowNames \"before all\" hook",
                    "timedOut": false,
                    "duration": 4262,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveRecords(function() {\n    commonMock.setSignUpMocks(httpmock, \"enterprise\");\n    api.post(\"/enterprise/v1/signup\")\n        .send(registrationBody)\n        .expect(httpStatus.CREATED)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                authToken = res.body.output.authtoken;\n                _id = res.body.output._id;\n                saveUserFlows({\n                    authtoken: authToken,\n                    user_uid: res.body.output.uid\n                }, function(error, flows) {\n                    saveBillEntries({\n                        authtoken: authToken,\n                        user_uid: res.body.output.uid,\n                        flow_uid: flows[0].uid\n                    }, function(error, billEntries) {\n                        done();\n                    });\n                });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cc843f7c-56bd-412e-bedc-3862adca7bf2",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Flow Flow.getUsersDistinctFlowNames \"after all\" hook",
                    "timedOut": false,
                    "duration": 2,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveRecords(function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c6a37952-070d-4358-8099-fecee071870c",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Flow Flow.getUsersDistinctFlowNames \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "be2350ad-3c85-4c01-b113-ad7957937ee3",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get list of user flows.",
                    "fullTitle": "Enterprise Flow Flow.getUsersDistinctFlowNames Should get list of user flows.",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (Array.isArray(res.body.output)) {\n                isValid = res.body.output.length == 5;\n                _.each(res.body.output, function(item) {\n                    isValid = isValid && typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\";\n                });\n            }\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d17e1942-6a47-4932-a576-30c7d8ba83a6",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Flow Flow.getUsersDistinctFlowNames Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .send({})\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4451a86a-2d19-46ad-83de-eff957e067ec",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "d17e1942-6a47-4932-a576-30c7d8ba83a6",
                  "4451a86a-2d19-46ad-83de-eff957e067ec"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 14,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "bdf19479-9fa4-4a97-9473-86122ee4dd5a",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\flow\\getUsersDistinctFlowNamesOrg.enterprise.js",
        "file": "\\controllers\\test\\flow\\getUsersDistinctFlowNamesOrg.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "ab209399-2e61-4afe-a0ef-df4f9204c0b6",
            "title": "Flow",
            "fullFile": "C:\\work\\api\\controllers\\test\\flow\\getUsersDistinctFlowNamesOrg.enterprise.js",
            "file": "\\controllers\\test\\flow\\getUsersDistinctFlowNamesOrg.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "f0fb378d-0d87-496c-9918-61c233d517ac",
                "title": "Flow.getUsersDistinctFlowNamesOrg",
                "fullFile": "C:\\work\\api\\controllers\\test\\flow\\getUsersDistinctFlowNamesOrg.enterprise.js",
                "file": "\\controllers\\test\\flow\\getUsersDistinctFlowNamesOrg.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Flow Flow.getUsersDistinctFlowNamesOrg \"before each\" hook",
                    "timedOut": false,
                    "duration": 62,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0549dc1f-5440-4a4e-9a07-59b720e06071",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Flow Flow.getUsersDistinctFlowNamesOrg \"after all\" hook",
                    "timedOut": false,
                    "duration": 2,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e3600872-c28f-48f9-bf3c-0454d078c0ee",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Flow Flow.getUsersDistinctFlowNamesOrg \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7b01ca9f-3211-44c6-9742-ca92e395976c",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get list of user flows.",
                    "fullTitle": "Enterprise Flow Flow.getUsersDistinctFlowNamesOrg Should get list of user flows.",
                    "timedOut": false,
                    "duration": 17,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (Array.isArray(res.body.output)) {\n                isValid = res.body.output.length == 5;\n                _.each(res.body.output, function(item) {\n                    isValid = isValid && typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\";\n                });\n            }\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "68440ad3-1b4e-49fe-a511-3881374bdae0",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Flow Flow.getUsersDistinctFlowNamesOrg Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .send({})\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c7ddf892-2f73-470a-af7b-117e7308594e",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "68440ad3-1b4e-49fe-a511-3881374bdae0",
                  "c7ddf892-2f73-470a-af7b-117e7308594e"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 20,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "ac505959-551f-45e4-b4d8-8e9629f3b8b1",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\flow\\getUserTags.enterprise.js",
        "file": "\\controllers\\test\\flow\\getUserTags.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "3a7b12b2-8de2-4395-828e-754b3c1f59cb",
            "title": "Flows.GetUserTags",
            "fullFile": "C:\\work\\api\\controllers\\test\\flow\\getUserTags.enterprise.js",
            "file": "\\controllers\\test\\flow\\getUserTags.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Flows.GetUserTags \"before all\" hook",
                "timedOut": false,
                "duration": 2784,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\n_models.User.remove({ email: testData.testRegistrationBody.email }, function(error, user) {\n    api.post(\"/enterprise/v1/signup\")\n        .send(testData.testRegistrationBody)\n        .expect(httpStatus.CREATED)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                dummyUser = res.body.output;\n                done();\n            }\n        });\n});",
                "err": {},
                "isRoot": false,
                "uuid": "e7c3a010-b056-436d-9664-e5c5caac2e41",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Flows.GetUserTags Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .send(searchParam)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "3aea9bf8-b2b7-43aa-a481-efb89eb8a67f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of tags.",
                "fullTitle": "Enterprise Flows.GetUserTags Should get list of tags.",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(searchParam)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output).to.be.instanceof(Array)\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "bf440b50-4843-40f6-9300-bcbe66749b09",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "3aea9bf8-b2b7-43aa-a481-efb89eb8a67f",
              "bf440b50-4843-40f6-9300-bcbe66749b09"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 21,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "cc4d837d-ade1-4479-8a0d-bc0ff9bca540",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\flow\\listFlows.enterprise.js",
        "file": "\\controllers\\test\\flow\\listFlows.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "23ee9091-8bea-43f2-af9b-2733b1faad83",
            "title": "Flows.ListFlows",
            "fullFile": "C:\\work\\api\\controllers\\test\\flow\\listFlows.enterprise.js",
            "file": "\\controllers\\test\\flow\\listFlows.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Flows.ListFlows \"before all\" hook",
                "timedOut": false,
                "duration": 2430,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(user, cbk) {\n        testData.mongoUserTriggerObj.user_uid = user.uid;\n        _models.UserTrigger.create(testData.mongoUserTriggerObj, function(err, userTrigger) {\n            cbk(err, userTrigger);\n        })\n    },\n    function(userTrigger, cbk) {\n        userTriggerObj = userTrigger\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    },\n    function(result, cbk) {\n        dummyUser = result.body.output;\n        testData.flowBody.trigger.handlers = [userTriggerObj.uid]\n        async.times(2, function(n, next) {\n            api.post(flowURL)\n                .set('authtoken', dummyUser.authtoken)\n                .send(testData.flowBody)\n                .expect(httpStatus.CREATED)\n                .end(function(err, res) {\n                    if (!err) {\n                        res = res.body.output\n                    }\n                    next(err, res)\n                })\n        }, function(err, result) {\n            cbk(err, result)\n        })\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        userFlows = res;\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "8d93ca3f-425f-4043-b1e3-b95535df24b5",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Flows.ListFlows \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.waterfall([\n    function(cb) {\n        _models.newFlow.remove({ uid: { $in: _.map(userFlows, 'uid') } }, function(err, deletedFlows) {\n            cb(err, deletedFlows);\n        })\n    },\n    function(deletedFlows, cb) {\n        _models.UserTrigger.remove({ uid: userTriggerObj.uid }, function(err, deletedUserTrigger) {\n            cb(err, deletedUserTrigger);\n        })\n    }\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "7eb42182-69e5-40d0-b2b6-c1be32721b67",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Flows.ListFlows Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(flowURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "da4d90c8-33ec-4b59-ab4c-604ed3b32fe0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of user flows.",
                "fullTitle": "Enterprise Flows.ListFlows Should get list of user flows.",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(flowURL)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(_.size(res.body.output.objects)).to.be.equal(2)\n            expect(res.body.output.count).to.be.equal(2)\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "e61dace3-b7fe-4f3b-afbe-d8036586c619",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of user flows, when applying filter and tags.",
                "fullTitle": "Enterprise Flows.ListFlows Should get list of user flows, when applying filter and tags.",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(flowURL)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output).to.have.all.keys(['objects', 'count'])\n            expect(_.first(res.body.output.objects)).to.have.any.keys(['name', 'description', 'uid', 'updated_at', 'sid'])\n            expect(_.first(res.body.output.objects)).not.to.have.all.keys(['_id', '__v']);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "d6d2f6b5-a3a6-448b-9b66-81603e37af61",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of lean flows.",
                "fullTitle": "Enterprise Flows.ListFlows Should get list of lean flows.",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(flowURL + '?lean=true')\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(_.first(res.body.output)).to.have.any.keys(['name', 'description', 'uid', 'updated_at', 'sid', 'flow_version'])\n            expect(_.first(res.body.output)).not.to.have.all.keys(['_id', '__v']);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "2997d7a6-627a-41f8-8dfb-1e61ea9c1ec2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of lean flows uids.",
                "fullTitle": "Enterprise Flows.ListFlows Should get list of lean flows uids.",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(flowURL + '?lean=true&get=flow_uids')\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(_.first(res.body.output)).to.have.any.keys(['uid'])\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "dd09f306-62de-4a22-af98-a5dfc6cdb7e2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of lean flows excluding flow mentioned in URL.",
                "fullTitle": "Enterprise Flows.ListFlows Should get list of lean flows excluding flow mentioned in URL.",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(flowURL + '?lean=true&exclude=' + [_.first(userFlows).uid])\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(_.map(res.body.output, 'uid')).not.to.be.include(_.first(userFlows).uid)\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "702e2ad5-c515-4f82-9026-c6939bfc48ef",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of flows, even if user account is suspended.",
                "fullTitle": "Enterprise Flows.ListFlows Should get list of flows, even if user account is suspended.",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n_models.User.findOneAndUpdate({ uid: dummyUser.uid }, { force_suspend: true }, { new: true }, function(err, user) {\n    if (err) {\n        done(err)\n    } else {\n        api.get(flowURL)\n            .set('authtoken', dummyUser.authtoken)\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    expect(_.size(res.body.output.objects)).to.be.equal(2)\n                    expect(res.body.output.count).to.be.equal(2)\n                    done();\n                }\n            });\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "62ab1b19-b104-466f-8b29-3947fb1f68c2",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "da4d90c8-33ec-4b59-ab4c-604ed3b32fe0",
              "e61dace3-b7fe-4f3b-afbe-d8036586c619",
              "d6d2f6b5-a3a6-448b-9b66-81603e37af61",
              "2997d7a6-627a-41f8-8dfb-1e61ea9c1ec2",
              "dd09f306-62de-4a22-af98-a5dfc6cdb7e2",
              "702e2ad5-c515-4f82-9026-c6939bfc48ef",
              "62ab1b19-b104-466f-8b29-3947fb1f68c2"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 106,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "1840d285-029f-495b-a136-9bbfc97a404c",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\flow\\listFlowsByAgent.enterprise.js",
        "file": "\\controllers\\test\\flow\\listFlowsByAgent.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "8309553a-c6fc-41d4-a34a-11923592c36f",
            "title": "Flows.ListFlowsByAgent",
            "fullFile": "C:\\work\\api\\controllers\\test\\flow\\listFlowsByAgent.enterprise.js",
            "file": "\\controllers\\test\\flow\\listFlowsByAgent.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Flows.ListFlowsByAgent \"before all\" hook",
                "timedOut": false,
                "duration": 2890,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\n_models.User.remove({ email: testData.testRegistrationBody.email }, function(error, user) {\n    api.post(\"/enterprise/v1/signup\")\n        .send(testData.testRegistrationBody)\n        .expect(httpStatus.CREATED)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                dummyUser = res.body.output;\n                done();\n            }\n        });\n});",
                "err": {},
                "isRoot": false,
                "uuid": "b1bab878-af38-4da5-8e0a-904596e2d50f",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Flows.ListFlowsByAgent Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .send(searchParam)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "803d7143-8b9f-4717-86a2-ec55ba07aee9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if enterpriseagent UID param is missing.",
                "fullTitle": "Enterprise Flows.ListFlowsByAgent Should get error, if enterpriseagent UID param is missing.",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "b71be14a-8d79-48a2-913a-b6892c0cd5d6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of flows by enterpriseagent, if enterpriseagent UID param is passed.",
                "fullTitle": "Enterprise Flows.ListFlowsByAgent Should get list of flows by enterpriseagent, if enterpriseagent UID param is passed.",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(searchParam)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output).to.be.instanceof(Array)\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "75bbfb04-32e0-4920-bb9b-f67074d76662",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "803d7143-8b9f-4717-86a2-ec55ba07aee9",
              "b71be14a-8d79-48a2-913a-b6892c0cd5d6",
              "75bbfb04-32e0-4920-bb9b-f67074d76662"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 27,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "f2c88bd6-8708-4bd4-a752-efb8c8be31cb",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\flow\\listFlowsByAuth.enterprise.js",
        "file": "\\controllers\\test\\flow\\listFlowsByAuth.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "dc4e8e75-26f4-45ac-9b22-f05ad5ec4332",
            "title": "Flows.ListFlowsByAuth",
            "fullFile": "C:\\work\\api\\controllers\\test\\flow\\listFlowsByAuth.enterprise.js",
            "file": "\\controllers\\test\\flow\\listFlowsByAuth.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Flows.ListFlowsByAuth \"before all\" hook",
                "timedOut": false,
                "duration": 5079,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\n_models.User.remove({ email: testData.testRegistrationBody.email }, function(error, user) {\n    api.post(\"/enterprise/v1/signup\")\n        .send(testData.testRegistrationBody)\n        .expect(httpStatus.CREATED)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                dummyUser = res.body.output;\n                done();\n            }\n        });\n});",
                "err": {},
                "isRoot": false,
                "uuid": "d99f6e77-5ef1-4a37-93b6-58b056ace55c",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Flows.ListFlowsByAuth Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .send(searchParam)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "2b256a17-f8d0-4450-a188-18dbf12c4a7f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if auth UID param is missing.",
                "fullTitle": "Enterprise Flows.ListFlowsByAuth Should get error, if auth UID param is missing.",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "e7620717-70fc-433a-b32f-67e709abc33a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of flows by auth, if auth UID param is passed.",
                "fullTitle": "Enterprise Flows.ListFlowsByAuth Should get list of flows by auth, if auth UID param is passed.",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(searchParam)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output).to.be.instanceof(Array)\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "766fa2c9-0364-4ba4-9100-fd6eecc41132",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2b256a17-f8d0-4450-a188-18dbf12c4a7f",
              "e7620717-70fc-433a-b32f-67e709abc33a",
              "766fa2c9-0364-4ba4-9100-fd6eecc41132"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 30,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "e43f2d6b-ac9e-4a7d-b53b-214159082f3a",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\flow\\listFlowsByConnection.enterprise.js",
        "file": "\\controllers\\test\\flow\\listFlowsByConnection.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "bc9c8f51-8515-41af-87bc-5e97e2d62722",
            "title": "Flows.ListFlowsByConnection",
            "fullFile": "C:\\work\\api\\controllers\\test\\flow\\listFlowsByConnection.enterprise.js",
            "file": "\\controllers\\test\\flow\\listFlowsByConnection.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Flows.ListFlowsByConnection \"before all\" hook",
                "timedOut": false,
                "duration": 2555,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\n_models.User.remove({ email: testData.testRegistrationBody.email }, function(error, user) {\n    api.post(\"/enterprise/v1/signup\")\n        .send(testData.testRegistrationBody)\n        .expect(httpStatus.CREATED)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                dummyUser = res.body.output;\n                done();\n            }\n        });\n});",
                "err": {},
                "isRoot": false,
                "uuid": "f55aee89-5c5b-4d01-a1a9-9fba1378a046",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Flows.ListFlowsByConnection Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .send(searchParam)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "5125cdf4-8cd3-423a-8dc1-f1fe9b4de03a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if connection UID param is missing.",
                "fullTitle": "Enterprise Flows.ListFlowsByConnection Should get error, if connection UID param is missing.",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "eba92674-f324-45a3-92cb-3af8bd50038b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of flows by auth, if connection UID param is passed.",
                "fullTitle": "Enterprise Flows.ListFlowsByConnection Should get list of flows by auth, if connection UID param is passed.",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(searchParam)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output).to.be.instanceof(Array)\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "1b103f83-1913-434f-9627-75dee729d336",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "5125cdf4-8cd3-423a-8dc1-f1fe9b4de03a",
              "eba92674-f324-45a3-92cb-3af8bd50038b",
              "1b103f83-1913-434f-9627-75dee729d336"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 33,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "197f4fb3-77fc-41cb-975b-cd7df05cc526",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\flow\\listFlowsByCustomIntegration.enterprise.js",
        "file": "\\controllers\\test\\flow\\listFlowsByCustomIntegration.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "873b290c-a93b-4255-ab37-4baf42abd768",
            "title": "CustomIntegration.GetFlows",
            "fullFile": "C:\\work\\api\\controllers\\test\\flow\\listFlowsByCustomIntegration.enterprise.js",
            "file": "\\controllers\\test\\flow\\listFlowsByCustomIntegration.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise CustomIntegration.GetFlows \"before all\" hook",
                "timedOut": false,
                "duration": 3483,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(user, cbk) {\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    },\n    function(result, cbk) {\n        dummyUser = result.body.output;\n        api.post(apiURL)\n            .set('authtoken', dummyUser.authtoken)\n            .send(data)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    },\n    function(result, cbk) {\n        customIntegration = result.body.output;\n        flowData.activities[2].uid = customIntegration.uid;\n        api.post(flowURL)\n            .set('authtoken', dummyUser.authtoken)\n            .send(flowData)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                cbk(err, res)\n            })\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        userFlow = res.body.output;\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "eb771128-ccc7-4b1d-a3bc-da246a5b685b",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise CustomIntegration.GetFlows \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "_models.CustomIntegration.remove({ user_uid: dummyUser.uid }, function(err, deletedFlow) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "4f21dd19-fe17-49b8-a2a7-7f5cd46a0476",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise CustomIntegration.GetFlows Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + '/' + customIntegration.uid + '/flows')\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "e22a6b2d-ed8d-4015-86c3-52916a7fe92e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of flows of custom  integrtion.",
                "fullTitle": "Enterprise CustomIntegration.GetFlows Should get list of flows of custom  integrtion.",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + '/' + customIntegration.uid + '/flows')\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output[0]).to.contain.all.keys(['uid', 'name', 'flow_version'])\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "699b7455-93b3-41c4-96b8-14f853dbf186",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e22a6b2d-ed8d-4015-86c3-52916a7fe92e",
              "699b7455-93b3-41c4-96b8-14f853dbf186"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 20,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "9dbe3627-a826-46eb-848b-05dc6d7b6a1e",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\flow\\listFlowsByTrigger.enterprise.js",
        "file": "\\controllers\\test\\flow\\listFlowsByTrigger.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "ac501594-06e4-463d-8951-685f10f13ef0",
            "title": "Flows.ListFlowsByTrigger",
            "fullFile": "C:\\work\\api\\controllers\\test\\flow\\listFlowsByTrigger.enterprise.js",
            "file": "\\controllers\\test\\flow\\listFlowsByTrigger.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Flows.ListFlowsByTrigger \"before all\" hook",
                "timedOut": false,
                "duration": 3641,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\n_models.User.remove({ email: testData.testRegistrationBody.email }, function(error, user) {\n    api.post(\"/enterprise/v1/signup\")\n        .send(testData.testRegistrationBody)\n        .expect(httpStatus.CREATED)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                dummyUser = res.body.output;\n                done();\n            }\n        });\n});",
                "err": {},
                "isRoot": false,
                "uuid": "9cc21f1a-0da0-4cec-be12-daf9159d74a1",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Flows.ListFlowsByTrigger Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .send(searchParam)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "c0d23176-6814-42fd-8acf-1ecea734ddcd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if trigger UID param is missing.",
                "fullTitle": "Enterprise Flows.ListFlowsByTrigger Should get error, if trigger UID param is missing.",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "e7f3da79-c3e6-4ace-b8ee-c675591615d6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of flows by auth, if trigger UID param is passed.",
                "fullTitle": "Enterprise Flows.ListFlowsByTrigger Should get list of flows by auth, if trigger UID param is passed.",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(searchParam)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output).to.be.instanceof(Array)\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "64402ba0-1184-463a-bc2c-84ab12573e3a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c0d23176-6814-42fd-8acf-1ecea734ddcd",
              "e7f3da79-c3e6-4ace-b8ee-c675591615d6",
              "64402ba0-1184-463a-bc2c-84ab12573e3a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 33,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "cec8bee8-f9e2-4521-9b8a-f27022de7e65",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\flow\\revertUserFlowVersion.enterprise.js",
        "file": "\\controllers\\test\\flow\\revertUserFlowVersion.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "f62d8193-12ba-4f6a-b815-0820f2f19d6e",
            "title": "Flow.revertUserFlowVersion",
            "fullFile": "C:\\work\\api\\controllers\\test\\flow\\revertUserFlowVersion.enterprise.js",
            "file": "\\controllers\\test\\flow\\revertUserFlowVersion.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Flow.revertUserFlowVersion \"before all\" hook",
                "timedOut": false,
                "duration": 164,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data;\n        async.waterfall([\n            function(cbk) {\n                dummyUser = orgData.owner;\n                dummyUser.authtoken = dummyUser.authtoken;\n                testData.mongoUserTriggerObj.user_uid = dummyUser.uid;\n                testData.mongoUserTriggerObj.uid = 'tg9b42e22c50a119f6729d68'\n                _models.UserTrigger.create(testData.mongoUserTriggerObj, function(err, userTrigger) {\n                    cbk(err, userTrigger);\n                })\n            },\n            function(userTrigger, cbk) {\n                userTriggerObj = userTrigger\n                projectData.owner_uid = dummyUser.uid\n                projectData.env_uid = dummyUser.default_env\n                api.post('/enterprise/v1/projects')\n                    .set('authtoken', dummyUser.authtoken)\n                    .send(projectData)\n                    .expect(httpStatus.CREATED)\n                    .end(function(err, result) {\n                        cbk(err, result);\n                    })\n            },\n            function(result, cbk) {\n                project = result.body.output;\n                async.parallel([\n                    function(cb) {\n                        saveFlow(flowURL, dummyUser, flowWithAllDataWithoutTrigger, function(err, result) {\n                            cb(err, result)\n                        })\n                    },\n                    function(cb) {\n                        var flowData2 = _.cloneDeep(flowData)\n                        api.post(flowURL)\n                            .set({ 'authtoken': dummyUser.authtoken, project_uid: project.uid })\n                            .send(flowData2)\n                            .expect(httpStatus.CREATED)\n                            .end(function(err, res) {\n                                cb(err, res)\n                            })\n                    }\n                ], function(err, results) {\n                    cbk(err, results)\n                })\n            }\n        ], function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                userFlow = res[0].body.output\n                userFlowWithProject = res[1].body.output\n                done()\n            }\n        })\n    });\n})",
                "err": {},
                "isRoot": false,
                "uuid": "2432cf7d-bf56-443e-a1e2-cf746137a64f",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Flow.revertUserFlowVersion \"after all\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nhttpmock.cleanAll();\n_models.newFlow.remove({ uid: userFlow.uid }, function(err, deletedFlow) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "6d71c3bd-9e21-42d3-92a0-763365b249b1",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Flow.revertUserFlowVersion Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put(flowURL + userFlow.uid + '/revert')\n    .send({ flow_version: 1 })\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "e9ca725f-c3ff-4b3a-bca7-8e7a11213f39",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if flow not found.",
                "fullTitle": "Enterprise Flow.revertUserFlowVersion Should get error, if flow not found.",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put(flowURL + 'dummyFlow' + '/revert')\n    .set('authtoken', dummyUser.authtoken)\n    .send({ flow_version: 1 })\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.FLOW_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "6bc9e72a-cdf6-4788-a87a-9305a93058c5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if flow version not found not found.",
                "fullTitle": "Enterprise Flow.revertUserFlowVersion Should get error, if flow version not found not found.",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put(flowURL + userFlow.uid + '/revert')\n    .set('authtoken', dummyUser.authtoken)\n    .send({ flow_version: 21 })\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.FLOW_VERSION_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "915c57ea-3d6c-4ad8-b4c4-1dd6ea8dac90",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if flow version not valid.",
                "fullTitle": "Enterprise Flow.revertUserFlowVersion Should get error, if flow version not valid.",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put(flowURL + userFlow.uid + '/revert')\n    .set('authtoken', dummyUser.authtoken)\n    .send({ flow_version: 'dummy' })\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "88102675-6201-4dbb-9d52-2704db6f5dfd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if user tried to delete current flow version.",
                "fullTitle": "Enterprise Flow.revertUserFlowVersion Should get error, if user tried to delete current flow version.",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { path: getTriggerPath, body: getTriggerPath };\ncommonMock.triggerGetSuccess(opt);\nopt.getPath = getTriggerPath + '/handlers';\nopt.body = { \"pull\": [/^fl\\w*/] };\ncommonMock.triggerPullSuccess(opt);\nopt.body = { \"push\": [/^fl\\w*/] };\ncommonMock.triggerPushSuccess(opt);\napi.put(flowURL + userFlow.uid + '/revert')\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.BAD_REQUEST)\n    .send({ flow_version: 1 })\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.CURRENT_VERSION_REVERT_ERROR);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "f62dba0e-7d66-4b74-bc3c-5c6186779378",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should revert flow version.",
                "fullTitle": "Enterprise Flow.revertUserFlowVersion Should revert flow version.",
                "timedOut": false,
                "duration": 227,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { path: getTriggerPath, body: getTriggerPath };\ncommonMock.triggerGetSuccess(opt);\nopt.getPath = getTriggerPath + '/handlers';\nopt.body = { \"pull\": [/^fl\\w*/] };\ncommonMock.triggerPullSuccess(opt);\nopt.body = { \"push\": [/^fl\\w*/] };\ncommonMock.triggerPushSuccess(opt);\nflowWithAllData.trigger.handlers.uid = flowData.trigger.handlers[0]\napi.put(flowURL + userFlow.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .send(flowWithAllData)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        var opt1 = { path: getTriggerPath, body: getTriggerPath, times: 2 };\n        commonMock.triggerGetSuccess(opt1);\n        opt1.getPath = getTriggerPath + '/handlers';\n        opt1.body = { \"pull\": [/^fl\\w*/] };\n        commonMock.triggerPullSuccess(opt);\n        opt1.body = { \"push\": [/^fl\\w*/] };\n        commonMock.triggerPushSuccess(opt);\n        api.put(flowURL + userFlow.uid + '/revert')\n            .set('authtoken', dummyUser.authtoken)\n            .send({ flow_version: 1 })\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    expect(res.body.output.flow_version).equal(3);\n                    expect(res.body.output.active).equal(true);\n                    //expect(res.body.output.name).equal('dummy flow');\n                    //done();\n                    var opt2 = { path: getTriggerPath, body: getTriggerPath, times: 2 };\n                    commonMock.triggerGetSuccess(opt2);\n                    opt2.getPath = getTriggerPath + '/handlers';\n                    opt2.body = { \"pull\": [/^fl\\w*/] };\n                    commonMock.triggerPullSuccess(opt);\n                    opt2.body = { \"push\": [/^fl\\w*/] };\n                    commonMock.triggerPushSuccess(opt2);\n                    api.put(flowURL + userFlow.uid + '/revert')\n                        .set('authtoken', dummyUser.authtoken)\n                        .send({ flow_version: 2 })\n                        .expect(httpStatus.OK)\n                        .end(function(err, res) {\n                            if (err) {\n                                done(err);\n                            } else {\n                                expect(res.body.output.flow_version).equal(4);\n                                expect(res.body.output.active).equal(true);\n                                expect(res.body.output.errors_obj.length).equal(0);\n                                expect(res.body.output.trigger.handlers[0].uid).equal(flowWithAllData.trigger.handlers[0].uid);\n                                expect(res.body.output.name).equal('Config');\n                                done();\n                            }\n                        });\n                }\n            });\n    })",
                "err": {},
                "isRoot": false,
                "uuid": "c2e7c599-ddc8-4c5e-a209-83f46d134873",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e9ca725f-c3ff-4b3a-bca7-8e7a11213f39",
              "6bc9e72a-cdf6-4788-a87a-9305a93058c5",
              "915c57ea-3d6c-4ad8-b4c4-1dd6ea8dac90",
              "88102675-6201-4dbb-9d52-2704db6f5dfd",
              "f62dba0e-7d66-4b74-bc3c-5c6186779378",
              "c2e7c599-ddc8-4c5e-a209-83f46d134873"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 302,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "05c49c6a-4b28-48ba-aecb-74ffa64454bb",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\flow\\shareUserFlow.enterprise.js",
        "file": "\\controllers\\test\\flow\\shareUserFlow.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "c1158e65-6241-4d10-beb0-6a470b8990c1",
            "title": "Flow.ShareUserFlow",
            "fullFile": "C:\\work\\api\\controllers\\test\\flow\\shareUserFlow.enterprise.js",
            "file": "\\controllers\\test\\flow\\shareUserFlow.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Flow.ShareUserFlow \"before all\" hook",
                "timedOut": false,
                "duration": 99,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data;\n        async.waterfall([\n            function(cbk) {\n                dummyUser = orgData.owner;\n                dummyUser.authtoken = dummyUser.authtoken;\n                testData.mongoUserTriggerObj.user_uid = dummyUser.uid;\n                _models.UserTrigger.create(testData.mongoUserTriggerObj, function(err, userTrigger) {\n                    cbk(err, userTrigger);\n                })\n            },\n            function(userTrigger, cbk) {\n                userTriggerObj = userTrigger\n                _id = dummyUser._id\n                flowData.trigger.handlers = [userTriggerObj]\n                    //var flowData = _.clone(testData.flowBody)\n                flowData.environment[0].params = [{\n                    \"key\": \"1\",\n                    \"value\": \"2\",\n                    \"required\": true\n                }, {\n                    \"key\": \"3\",\n                    \"value\": \"2\",\n                    \"required\": false\n                }];\n                flowData.environment[0].project_params = [{\n                    \"uid\": \"random\",\n                    \"key\": \"param1\",\n                    \"value\": \"parawal\",\n                    \"required\": true,\n                    \"isPassword\": false,\n                    \"hasError\": false\n                }];\n                api.post(flowURL)\n                    .set('authtoken', dummyUser.authtoken)\n                    .send(flowData)\n                    .expect(httpStatus.CREATED)\n                    .end(function(err, res) {\n                        cbk(err, res)\n                    })\n            }\n        ], function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                userFlow = res.body.output;\n                done()\n            }\n        })\n    });\n})",
                "err": {},
                "isRoot": false,
                "uuid": "ddc98dfe-ed31-4171-a083-cf32031b42d6",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Flow.ShareUserFlow \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.waterfall([\n    function(cb) {\n        _models.newFlow.findOne({ owner_uid: shareCriteria.users }, function(err, sharedFlow) {\n            cb(err, sharedFlow);\n        })\n    },\n    function(sharedFlow, cb) {\n        removeFlow([userFlow.uid, (sharedFlow || {}).uid], function(err, deletedFlows) {\n            cb(err, deletedFlows);\n        })\n    },\n    function(deletedFlows, cb) {\n        _models.UserTrigger.remove({ uid: userTriggerObj.uid }, function(err, deletedUserTrigger) {\n            cb(err, deletedUserTrigger);\n        })\n    }\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "6cd99ddd-3146-4f8d-804b-ac4cbe11d8b9",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Flow.ShareUserFlow Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(flowURL + '/' + userFlow.uid + '/share')\n    .send(shareCriteria)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "9b530f0c-2579-44e7-961b-7a49d8bc0d7f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should share flow, if user flow is found.",
                "fullTitle": "Enterprise Flow.ShareUserFlow Should share flow, if user flow is found.",
                "timedOut": false,
                "duration": 36,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { path: getTriggerPath, body: getTriggerPath }\ncommonMock.triggerCreateSuccess(opt);\nshareCriteria.users = [orgData.role1.email]\napi.post(flowURL + '/' + userFlow.uid + '/share')\n    .set('authtoken', dummyUser.authtoken)\n    .send(shareCriteria)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.message.should.equal('Workflow shared successfully with 1 user(s)')\n            var query = _models.UserStream.find({ type: 'share-flow' })\n            query.lean().exec(function(err, results) {\n                if (err) {\n                    done(err);\n                } else {\n                    var shareTo = _.find(results, { metadata:{to_email: shareCriteria.users[0] }})\n                    var shareFrom = _.find(results, { metadata:{from_email: dummyUser.email }})\n                    if (shareFrom && shareTo) {\n                        done()\n                    }\n                }\n            })\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "140f6fdb-14cf-499f-b9eb-66b89f54f990",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if flow not found.",
                "fullTitle": "Enterprise Flow.ShareUserFlow Should get error, if flow not found.",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(flowURL + '/dummyFlow/share')\n    .set('authtoken', dummyUser.authtoken)\n    .send(shareCriteria)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.FLOW_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "9e72ee59-cb0c-4f90-b3f0-b819ae8521a6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if \"users\" params is missing OR empty.",
                "fullTitle": "Enterprise Flow.ShareUserFlow Should get error, if \"users\" params is missing OR empty.",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar missingUsers = _.omit(shareCriteria, 'users');\napi.post(flowURL + '/' + userFlow.uid + '/share')\n    .set('authtoken', dummyUser.authtoken)\n    .send(missingUsers)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "3de3710d-3910-4758-aede-4c6904169f0d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should share flow with organization.",
                "fullTitle": "Enterprise Flow.ShareUserFlow Should share flow with organization.",
                "timedOut": false,
                "duration": 32,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar projectParams = [{\n    \"uid\": \"random\",\n    \"key\": \"param1\",\n    \"value\": \"parawal\",\n    \"required\": true,\n    \"isPassword\": false,\n    \"hasError\": false\n}, {\n    \"uid\": \"random1\",\n    \"key\": \"param1\",\n    \"value\": \"parawal\",\n    \"required\": true,\n    \"isPassword\": false,\n    \"hasError\": false\n}]\nvar opt = { path: getTriggerPath, body: getTriggerPath, times: 2 };\ncommonMock.triggerCreateSuccess(opt);\nvar orgDefaultProj = _.find(orgData.org_projects, { name: config.default_project })\nvar projectParam = _.merge(projectParams[0], { type: 'param', project_uid: orgDefaultProj.uid, user_uid: orgData.organization_account.uid })\n_models.ConfigSchema.create(projectParam, function(err, result) {\n    var shareWithOrgs = _.cloneDeep(shareCriteria)\n    shareWithOrgs.users = '';\n    shareWithOrgs.orgs = [orgData.organization.name]\n    shareWithOrgs.project_params = projectParams\n    shareWithOrgs.params = [{\n        \"key\": \"3\",\n        \"value\": \"2\",\n        \"required\": false\n    }]\n    api.post(flowURL + '/' + userFlow.uid + '/share')\n        .set('authtoken', dummyUser.authtoken)\n        .send(shareWithOrgs)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                res.body.output.message.should.equal('Workflow shared successfully with 1 organization(s)')\n                var query = _models.ConfigSchema.find({ type: 'param', project_uid: orgDefaultProj.uid })\n                query.lean().exec(function(err, results) {\n                    if (results) {\n                        var shareProjectParamsUIDS = _.map(results, 'uid')\n                        var projectParamsUIDS = _.map(projectParams, 'uid')\n                        if (_.isEqual(shareProjectParamsUIDS, projectParamsUIDS)) {\n                            done();\n                        } else {\n                            done('PROJECT_PARAMS_MISMATCH');\n                        }\n                    }\n                })\n            }\n        });\n})",
                "err": {},
                "isRoot": false,
                "uuid": "db0baf46-8e4c-4b1f-a11a-a59668b6f8fd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if user tries to share flow with himself.",
                "fullTitle": "Enterprise Flow.ShareUserFlow Should get error, if user tries to share flow with himself.",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nshareCriteria.users = testData.testRegistrationBody.email\napi.post(flowURL + '/' + userFlow.uid + '/share')\n    .set('authtoken', dummyUser.authtoken)\n    .send(shareCriteria)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.FLOW_CANNOT_BE_SHARE_WITH_SAME_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "5eea88a3-ea64-4f7b-a679-c88f54438dac",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if user tries to share flow with more than 10 users.",
                "fullTitle": "Enterprise Flow.ShareUserFlow Should get error, if user tries to share flow with more than 10 users.",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nshareCriteria.users = ['1@a.com', '2@a.com', '3@a.com', '4@a.com', '5@a.com', '6@a.com', '7@a.com', '8@a.com', '9@a.com', '10@a.com', '11@a.com']\napi.post(flowURL + '/' + userFlow.uid + '/share')\n    .set('authtoken', dummyUser.authtoken)\n    .send(shareCriteria)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal('The workflow can not be shared with more than 10 users at a time.');\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "df642deb-c6ee-4364-9d8f-ee93ab4d2b9c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if user account is suspended.",
                "fullTitle": "Enterprise Flow.ShareUserFlow Should get error, if user account is suspended.",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n_models.User.findOneAndUpdate({ uid: dummyUser.uid }, { force_suspend: true }, { new: true }, function(err, user) {\n    if (err) {\n        done(err)\n    } else {\n        api.post(flowURL + '/' + userFlow.uid + '/share')\n            .set('authtoken', dummyUser.authtoken)\n            .expect(httpStatus.BAD_REQUEST)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    res.body.error.message.should.equal(messageList.FLOW_SHARE_USER_PLAN_EXPIRE_ERROR);\n                    done();\n                }\n            });\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "56a75441-fcc3-460e-9bfd-3d3f2d58b2af",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9b530f0c-2579-44e7-961b-7a49d8bc0d7f",
              "140f6fdb-14cf-499f-b9eb-66b89f54f990",
              "9e72ee59-cb0c-4f90-b3f0-b819ae8521a6",
              "3de3710d-3910-4758-aede-4c6904169f0d",
              "db0baf46-8e4c-4b1f-a11a-a59668b6f8fd",
              "5eea88a3-ea64-4f7b-a679-c88f54438dac",
              "df642deb-c6ee-4364-9d8f-ee93ab4d2b9c",
              "56a75441-fcc3-460e-9bfd-3d3f2d58b2af"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 133,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "4e1accfd-e00a-43b4-b745-7ada4a929252",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\flow\\stopUserFlow.enterprise.js",
        "file": "\\controllers\\test\\flow\\stopUserFlow.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "ef83d870-ad68-4db1-9703-5858a20d02fc",
            "title": "Flow.StopUserFlow",
            "fullFile": "C:\\work\\api\\controllers\\test\\flow\\stopUserFlow.enterprise.js",
            "file": "\\controllers\\test\\flow\\stopUserFlow.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Flow.StopUserFlow \"before all\" hook",
                "timedOut": false,
                "duration": 2081,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(user, cbk) {\n        testData.mongoUserTriggerObj.user_uid = user.uid;\n        _models.UserTrigger.create(testData.mongoUserTriggerObj, function(err, userTrigger) {\n            cbk(err, userTrigger);\n        })\n    },\n    function(userTrigger, cbk) {\n        userTriggerObj = userTrigger\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    },\n    function(result, cbk) {\n        dummyUser = result.body.output;\n        //testData.flowBody.trigger.handlers = [userTriggerObj.uid]\n        api.post(flowURL)\n            .set('authtoken', dummyUser.authtoken)\n            .send(testData.flowBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                cbk(err, res)\n            })\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        userFlow = res.body.output;\n        var billBody = {\n            \"flow_uid\": userFlow.uid,\n            \"billable\": true,\n            \"user_uid\": dummyUser.uid,\n            \"flow_name\": \"dummy flow\",\n            \"result\": \"pending\",\n            \"duration\": 0,\n            \"manual_run\": true,\n            \"deleted_at\": null,\n            \"credits\": 0,\n            \"__v\": 0\n        }\n        _models.Bill.create(billBody, function(err, billObj) {\n            flowBill = billObj;\n            stopData.bill_uid = flowBill.uid;\n        })\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "843cf510-4e6b-4575-ae01-e20285378634",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Flow.StopUserFlow \"after all\" hook",
                "timedOut": false,
                "duration": 2,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.waterfall([\n    function(cb) {\n        _models.newFlow.remove({ uid: userFlow.uid }, function(err, deletedFlows) {\n            cb(err, deletedFlows);\n        })\n    },\n    function(deletedFlows, cb) {\n        _models.UserTrigger.remove({ uid: userTriggerObj.uid }, function(err, deletedUserTrigger) {\n            cb(err, deletedUserTrigger);\n        })\n    },\n    function(deletedFlows, cb) {\n        _models.Bill.remove({ uid: flowBill.uid }, function(err, deletedUserTrigger) {\n            cb(err, deletedUserTrigger);\n        })\n    }\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "06eb9b8c-c146-404a-9224-bd0bb068c15b",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Flow.StopUserFlow Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(flowURL + '/' + userFlow.uid + '/stop')\n    .send(stopData)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "25e432f8-9911-4338-a34b-ab251892d5b7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if key \"bill_uid\" is missing.",
                "fullTitle": "Enterprise Flow.StopUserFlow Should get error, if key \"bill_uid\" is missing.",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar data = _.clone(stopData)\ndata.bill_uid = null;\napi.post(flowURL + '/' + userFlow.uid + '/stop')\n    .set('authtoken', dummyUser.authtoken)\n    .send(data)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "d3fe71ea-3734-497f-95a6-250171c27716",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if key \"bill_uid\" is invalid.",
                "fullTitle": "Enterprise Flow.StopUserFlow Should get error, if key \"bill_uid\" is invalid.",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar data = _.clone(stopData)\ndata.bill_uid = 'ABC';\napi.post(flowURL + '/' + userFlow.uid + '/stop')\n    .set('authtoken', dummyUser.authtoken)\n    .send(data)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.BILL_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "be5fd4e6-e465-4587-89ff-faf4b6d54fb9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should stop flow, if bill is valid.",
                "fullTitle": "Enterprise Flow.StopUserFlow Should stop flow, if bill is valid.",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { bill_uid: stopData.bill_uid, user_uid: dummyUser.uid }\ncommonMock.stopFlowSuccess(opt)\napi.post(flowURL + '/' + userFlow.uid + '/stop')\n    .set('authtoken', dummyUser.authtoken)\n    .send(stopData)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.result.should.equal('OK')\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "fd84d75f-a0d7-4829-8a57-bae1c9b912a4",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "25e432f8-9911-4338-a34b-ab251892d5b7",
              "d3fe71ea-3734-497f-95a6-250171c27716",
              "be5fd4e6-e465-4587-89ff-faf4b6d54fb9",
              "fd84d75f-a0d7-4829-8a57-bae1c9b912a4"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 47,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "f16b0e0b-3b6d-499b-acd8-171fae9b91bb",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\flow\\toggleUserFlow.enterprise.js",
        "file": "\\controllers\\test\\flow\\toggleUserFlow.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "02188f15-2d89-4823-b88e-24c029367c1b",
            "title": "Flow.ToggleUserFlow",
            "fullFile": "C:\\work\\api\\controllers\\test\\flow\\toggleUserFlow.enterprise.js",
            "file": "\\controllers\\test\\flow\\toggleUserFlow.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Flow.ToggleUserFlow \"before all\" hook",
                "timedOut": false,
                "duration": 3535,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(user, cbk) {\n        testData.mongoUserTriggerObj.user_uid = user.uid;\n        _models.UserTrigger.create(testData.mongoUserTriggerObj, function(err, userTrigger) {\n            cbk(err, userTrigger);\n        })\n    },\n    function(userTrigger, cbk) {\n        userTriggerObj = userTrigger\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    },\n    function(result, cbk) {\n        testData.flowBody.trigger.handlers = [userTriggerObj]\n        dummyUser = result.body.output;\n        var flowBody = _.cloneDeep(testData.flowBody);\n        async.parallel({\n            activeFlow: function(cb) {\n                createFlow(dummyUser, flowBody, cb)\n            },\n            inactiveFlow: function(cb) {\n                flowBody.active = false\n                createFlow(dummyUser, flowBody, cb)\n            }\n        }, function(err, result) {\n            cbk(err, result)\n        })\n    }\n], function(err, result) {\n    if (err) {\n        done(err);\n    } else {\n        liveFlow = result.activeFlow.body.output;\n        userFlow = result.inactiveFlow.body.output;\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "d62a0342-42f4-4795-a7e4-aab56f43c019",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Flow.ToggleUserFlow \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nhttpmock.cleanAll();\nasync.parallel([\n    function(cb) {\n        _models.newFlow.remove({ uid: { $in: [userFlow.uid, liveFlow.uid] } }, function(err, deletedFlow) {\n            cb(err, deletedFlow);\n        })\n    },\n    function(cb) {\n        _models.UserTrigger.remove({ uid: userTriggerObj.uid }, function(err, deletedUserTrigger) {\n            cb(err, deletedUserTrigger);\n        })\n    }\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "7b409253-0418-4bb7-ba47-d0af2cc9e74f",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Flow.ToggleUserFlow Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put(flowURL + '/' + userFlow.uid + '/toggle')\n    .send(active)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "f50b5000-117f-4a03-b2d5-a01750e4d955",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if flow not found.",
                "fullTitle": "Enterprise Flow.ToggleUserFlow Should get error, if flow not found.",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put(flowURL + '/dummyFlow/toggle')\n    .set('authtoken', dummyUser.authtoken)\n    .send(active)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.FLOW_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "b02e43c1-13b5-4eec-9c94-3466adff7e17",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if \"data\" key is missing OR empty.",
                "fullTitle": "Enterprise Flow.ToggleUserFlow Should get error, if \"data\" key is missing OR empty.",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put(flowURL + '/' + userFlow.uid + '/toggle')\n    .set('authtoken', dummyUser.authtoken)\n    .send()\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "72e27f11-a2fa-4760-9909-7fc3c21737ce",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should \"active\" flow, if user sends {data: true}.",
                "fullTitle": "Enterprise Flow.ToggleUserFlow Should \"active\" flow, if user sends {data: true}.",
                "timedOut": false,
                "duration": 26,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { path: getTriggerPath, body: getTriggerPath };\ncommonMock.triggerGetSuccess(opt);\nopt.getPath = getTriggerPath + '/handlers';\nopt.body = { \"push\": [/^fl\\w*/] };\ncommonMock.triggerPushSuccess(opt);\napi.put(flowURL + '/' + userFlow.uid + '/toggle')\n    .set('authtoken', dummyUser.authtoken)\n    .send(active)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output.active).to.be.equal(true);\n            //expect(res.body.output).not.to.have.all.keys(['_id', '__v']);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "2f5596d8-3a6a-4fc4-a24e-00f2bd7814fd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if user sends {data: true} and flow is in active state",
                "fullTitle": "Enterprise Flow.ToggleUserFlow Should get error, if user sends {data: true} and flow is in active state",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { path: getTriggerPath, body: getTriggerPath };\ncommonMock.triggerGetSuccess(opt);\nopt.getPath = getTriggerPath + '/handlers';\nopt.body = { \"push\": [/^fl\\w*/] };\ncommonMock.triggerPushSuccess(opt);\napi.put(flowURL + '/' + userFlow.uid + '/toggle')\n    .set('authtoken', dummyUser.authtoken)\n    .send(active)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).to.be.equal(messageList.FLOW_ALREADY_IN_ACTIVE_STATE);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "45e78a69-f8a5-4145-ae89-73aa89714df2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should \"de-active\" flow, if user sends {data: false} and config data must have \"trigger\" key",
                "fullTitle": "Enterprise Flow.ToggleUserFlow Should \"de-active\" flow, if user sends {data: false} and config data must have \"trigger\" key",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { path: getTriggerPath, body: getTriggerPath };\ncommonMock.triggerGetSuccess(opt);\nopt.getPath = getTriggerPath + '/handlers';\nopt.body = { \"unset\": [/^fl\\w*/] };\ncommonMock.triggerPushSuccess(opt);\nactive.data = false;\napi.put(flowURL + '/' + liveFlow.uid + '/toggle')\n    .set('authtoken', dummyUser.authtoken)\n    .send(active)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output.active).to.be.equal(false)\n                //expect(res.body.output).not.to.have.all.keys(['_id', '__v']);\n            var query = _models.ConfigData.findOne({ flow_uid: res.body.output.uid, activity_id: 'start' })\n            query.lean().exec(function(err, configData) {\n                expect(configData).have.any.keys(['trigger'])\n                done();\n            })\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "9d93a125-b14a-49cd-b008-0f0684224bda",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should \"de-active\" flow, if user sends {data: false}.",
                "fullTitle": "Enterprise Flow.ToggleUserFlow Should \"de-active\" flow, if user sends {data: false}.",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { path: getTriggerPath, body: getTriggerPath };\ncommonMock.triggerGetSuccess(opt);\nopt.getPath = getTriggerPath + '/handlers';\nopt.body = { \"unset\": [/^fl\\w*/] };\ncommonMock.triggerPushSuccess(opt);\nactive.data = false;\napi.put(flowURL + '/' + liveFlow.uid + '/toggle')\n    .set('authtoken', dummyUser.authtoken)\n    .send(active)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).to.be.equal(messageList.FLOW_ALREADY_IN_INACTIVE_STATE);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "8a54a71f-40c3-47c6-b001-8cda4a236d32",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if user account is suspended.",
                "fullTitle": "Enterprise Flow.ToggleUserFlow Should get error, if user account is suspended.",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nthis.timeout(apiTimeOut);\nvar opt = { path: getTriggerPath, body: getTriggerPath };\ncommonMock.triggerGetSuccess(opt);\nopt.getPath = getTriggerPath + '/handlers';\nopt.body = { \"unset\": [/^fl\\w*/] };\ncommonMock.triggerPushSuccess(opt);\nactive.data = false;\n_models.User.findOneAndUpdate({ uid: dummyUser.uid }, { force_suspend: true }, { new: true }, function(err, user) {\n    if (err) {\n        done(err)\n    } else {\n        api.put(flowURL + '/' + liveFlow.uid + '/toggle')\n            .set('authtoken', dummyUser.authtoken)\n            .send(active)\n            .expect(httpStatus.BAD_REQUEST)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    res.body.error.message.should.equal(messageList.USER_PLAN_EXPIRE_ERROR);\n                    done();\n                }\n            });\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "c3ec41ac-889e-4ea5-81d3-1b800b34f0d1",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f50b5000-117f-4a03-b2d5-a01750e4d955",
              "b02e43c1-13b5-4eec-9c94-3466adff7e17",
              "72e27f11-a2fa-4760-9909-7fc3c21737ce",
              "2f5596d8-3a6a-4fc4-a24e-00f2bd7814fd",
              "45e78a69-f8a5-4145-ae89-73aa89714df2",
              "9d93a125-b14a-49cd-b008-0f0684224bda",
              "8a54a71f-40c3-47c6-b001-8cda4a236d32",
              "c3ec41ac-889e-4ea5-81d3-1b800b34f0d1"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 127,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "3232fbc7-feac-4340-beed-7eee972b6972",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\flow\\updateUserFlow.enterprise.js",
        "file": "\\controllers\\test\\flow\\updateUserFlow.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "4d6c7ca9-652f-446d-82cc-60488bf69737",
            "title": "Flow.UpdateUserFlow",
            "fullFile": "C:\\work\\api\\controllers\\test\\flow\\updateUserFlow.enterprise.js",
            "file": "\\controllers\\test\\flow\\updateUserFlow.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Flow.UpdateUserFlow \"before all\" hook",
                "timedOut": false,
                "duration": 157,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data;\n        async.waterfall([\n            function(cbk) {\n                dummyUser = orgData.owner;\n                dummyUser.authtoken = dummyUser.authtoken;\n                testData.mongoUserTriggerObj.user_uid = dummyUser.uid;\n                _models.UserTrigger.create(testData.mongoUserTriggerObj, function(err, userTrigger) {\n                    cbk(err, userTrigger);\n                })\n            },\n            function(userTrigger, cbk) {\n                userTriggerObj = userTrigger.toJSON()\n                    //flowWithAllData.trigger.handlers[0] = userTriggerObj\n                api.post(flowURL)\n                    .set('authtoken', dummyUser.authtoken)\n                    .send(flowWithAllData)\n                    .expect(httpStatus.CREATED)\n                    .end(function(err, res) {\n                        cbk(err, res)\n                    })\n            },\n            function(res, cbk) {\n                userFlow = res.body.output;\n                //flowWithAllData.trigger.handlers[0] = userTriggerObj\n                api.post(flowURL)\n                    .set({ 'authtoken': dummyUser.authtoken, org_uid: orgData.organization.uid })\n                    .send(flowWithAllData)\n                    .expect(httpStatus.CREATED)\n                    .end(function(err, res) {\n                        cbk(err, res)\n                    })\n            }\n        ], function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                orgFlow = res.body.output;\n                done()\n            }\n        })\n    });\n})",
                "err": {},
                "isRoot": false,
                "uuid": "70c84e6f-c85d-423a-9ef9-eba8204f6ee3",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Flow.UpdateUserFlow \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nhttpmock.cleanAll();\nasync.parallel([\n    function(cb) {\n        _models.newFlow.remove({ uid: userFlow.uid }, function(err, deletedFlow) {\n            cb(err, deletedFlow);\n        })\n    },\n    function(cb) {\n        _models.UserTrigger.remove({ uid: userTriggerObj.uid }, function(err, deletedUserTrigger) {\n            cb(err, deletedUserTrigger);\n        })\n    }\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "cd3e8000-c6d6-4cd7-93ed-3dcb84cf3cec",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Flow.UpdateUserFlow Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put(flowURL + '/' + userFlow.uid)\n    .send(userFlow)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "52b7d8bf-a8e8-48fe-bdc5-f349a790d14b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if flow not found.",
                "fullTitle": "Enterprise Flow.UpdateUserFlow Should get error, if flow not found.",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put(flowURL + '/dummyFlow')\n    .set('authtoken', dummyUser.authtoken)\n    .send(userFlow)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.FLOW_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "38b356dc-babb-472e-bc02-9e9d932d87b5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if \"name\" key is missing OR empty.",
                "fullTitle": "Enterprise Flow.UpdateUserFlow Should get error, if \"name\" key is missing OR empty.",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar invalidFlowData = _.omit(flowData, 'name')\napi.post(flowURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(invalidFlowData)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "168e69f7-180f-4b0f-ad6e-b31a7aa93a53",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if flow activity has no end point.",
                "fullTitle": "Enterprise Flow.UpdateUserFlow Should get error, if flow activity has no end point.",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nuserFlow.name = testFlowName\nuserFlow.trigger.handlers[0] = userTriggerObj;\nuserFlow.activities = flowData.activities;\nuserFlow.configurations = flowData.environment;\napi.put(flowURL + '/' + userFlow.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .send(userFlow)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).to.equal(messageList.INVALID_FLOW_CONNECTION_ERROR)\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "43fc0e72-cff6-439e-8448-38f96fa241ea",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if flow activities has circular connection.",
                "fullTitle": "Enterprise Flow.UpdateUserFlow Should get error, if flow activities has circular connection.",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nuserFlow.name = testFlowName\nuserFlow.trigger.handlers[0] = userTriggerObj;\nvar invalidFlowActivities = _.clone(testData.invalidFlowActivities)\n_.set(_.first(invalidFlowActivities), 'next', ['start'])\nuserFlow.activities = JSON.stringify(invalidFlowActivities);\nuserFlow.configurations = flowData.environment;\napi.put(flowURL + '/' + userFlow.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .send(userFlow)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).to.equal(messageList.INVALID_FLOW_LOOP_ERROR)\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "62a54d70-d449-4616-a7a3-d44ecb8e7da1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if flow activity has no id.",
                "fullTitle": "Enterprise Flow.UpdateUserFlow Should get error, if flow activity has no id.",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nuserFlow.name = testFlowName\nuserFlow.trigger.handlers[0] = userTriggerObj;\nvar invalidFlowActivities = _.clone(testData.invalidFlowActivities)\n_.set(_.first(invalidFlowActivities), 'id', null)\nuserFlow.activities = JSON.stringify(invalidFlowActivities);\nuserFlow.configurations = flowData.environment;\napi.put(flowURL + '/' + userFlow.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .send(userFlow)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).to.equal(messageList.INVALID_FLOW_CHAIN_BREAK)\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "d4e14710-0d89-4f33-a393-5de48b394f16",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if flow has group activities with no end point.",
                "fullTitle": "Enterprise Flow.UpdateUserFlow Should get error, if flow has group activities with no end point.",
                "timedOut": false,
                "duration": 19,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nuserFlow.name = testFlowName\nuserFlow.trigger.handlers[0] = userTriggerObj;\nuserFlow.activities = JSON.stringify(testData.invalidGroupActivities);\nuserFlow.configurations = flowData.environment;\napi.put(flowURL + '/' + userFlow.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .send(userFlow)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).to.equal(messageList.INVALID_FLOW_GROUP_CONNECTION_ERROR)\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "3065f519-0e21-4385-90e1-797734cd65af",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if flow has group has no activities.",
                "fullTitle": "Enterprise Flow.UpdateUserFlow Should get error, if flow has group has no activities.",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nuserFlow.name = testFlowName\nuserFlow.trigger.handlers[0] = userTriggerObj;\nuserFlow.activities = JSON.stringify(testData.blankGroupActivities);\nuserFlow.configurations = flowData.environment;\napi.put(flowURL + '/' + userFlow.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .send(userFlow)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).to.equal(messageList.INVALID_FLOW_GROUP_BLANK_ERROR)\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "6a2a6ca2-c57f-4a0a-a630-6836f9257569",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if flow has group circular connection.",
                "fullTitle": "Enterprise Flow.UpdateUserFlow Should get error, if flow has group circular connection.",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nuserFlow.name = testFlowName\nuserFlow.trigger.handlers[0] = userTriggerObj;\nuserFlow.activities = JSON.stringify(testData.GroupActivitiesWithLoopConnection);\nuserFlow.configurations = flowData.environment;\napi.put(flowURL + '/' + userFlow.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .send(userFlow)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).to.equal(messageList.INVALID_FLOW_LOOP_ERROR)\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "6168b8c2-a6f0-4e89-96e4-f9f5c30ea6fa",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should update flow, if user sends a valid data.",
                "fullTitle": "Enterprise Flow.UpdateUserFlow Should update flow, if user sends a valid data.",
                "timedOut": false,
                "duration": 32,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { path: getTriggerPath, body: getTriggerPath };\ncommonMock.triggerGetSuccess(opt);\nopt.getPath = getTriggerPath + '/handlers';\nopt.body = { \"pull\": [/^fl\\w*/] };\ncommonMock.triggerPullSuccess(opt);\nopt.body = { \"push\": [/^fl\\w*/] };\ncommonMock.triggerPushSuccess(opt);\nuserFlow.name = testFlowName\nuserFlow.trigger.handlers[0] = userTriggerObj;\nuserFlow.activities = testData.newAcitivities;\nuserFlow.configurations = flowData.environment;\napi.put(flowURL + '/' + userFlow.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .send(userFlow)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var flow = res.body.output\n            var flowEnv = _.first(JSON.parse(flow.environment))\n            expect(flow.name).to.equal(testFlowName)\n            expect(flow.flow_version).to.equal(2)\n            expect(flow).not.to.have.all.keys(['_id', '__v']);\n            expect(flowEnv).to.have.any.keys(['auth', 'connection', 'enterpriseagent', \"id\", \"params\"]);\n            expect(flow.trigger.handlers).to.have.length.of.at.least(1)\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "69381c4e-4fad-43dd-b774-1c439997b26c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should update flow in org, if user sends a valid data.",
                "fullTitle": "Enterprise Flow.UpdateUserFlow Should update flow in org, if user sends a valid data.",
                "timedOut": false,
                "duration": 49,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { path: getTriggerPath, body: getTriggerPath };\ncommonMock.triggerGetSuccess(opt);\nopt.getPath = getTriggerPath + '/handlers';\nopt.body = { \"pull\": [/^fl\\w*/] };\ncommonMock.triggerPullSuccess(opt);\nopt.body = { \"push\": [/^fl\\w*/] };\ncommonMock.triggerPushSuccess(opt);\nuserFlow.name = testFlowName\nuserFlow.trigger.handlers[0] = userTriggerObj;\nuserFlow.activities = testData.newAcitivities;\nuserFlow.configurations = flowData.environment;\nuserFlow.preserve_version = true\napi.put(flowURL + '/' + orgFlow.uid)\n    .set({ 'authtoken': orgData.developer.authtoken, org_uid: orgData.organization.uid })\n    .send(userFlow)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var flow = res.body.output\n            var flowEnv = _.first(JSON.parse(flow.environment))\n            expect(flow.name).to.equal(testFlowName)\n            expect(flow.updated_by).to.equal(orgData.developer.uid)\n            expect(flow.flow_version).to.equal(1)\n            expect(flow).not.to.have.all.keys(['_id', '__v']);\n            expect(flowEnv).to.have.any.keys(['auth', 'connection', 'enterpriseagent', \"id\", \"params\"]);\n            expect(flow.trigger.handlers).to.have.length.of.at.least(1)\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "ab48bb6c-2179-4e21-8c75-1d3c6e658527",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should update flow, if user sends a valid data with error activity.",
                "fullTitle": "Enterprise Flow.UpdateUserFlow Should update flow, if user sends a valid data with error activity.",
                "timedOut": false,
                "duration": 27,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nflowWithErrorAct.uid = userFlow.uid\nflowWithErrorAct.owner_uid = userFlow.owner_uid\napi.put(flowURL + '/' + userFlow.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .send(flowWithErrorAct)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var flow = res.body.output\n            expect(flow).not.to.have.all.keys(['_id', '__v']);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "9d1d0f79-3dfd-40ea-9181-d74fe6f1bc64",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if user account is suspended.",
                "fullTitle": "Enterprise Flow.UpdateUserFlow Should get error, if user account is suspended.",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n_models.User.findOneAndUpdate({ uid: dummyUser.uid }, { force_suspend: true }, { new: true }, function(err, user) {\n    if (err) {\n        done(err)\n    } else {\n        api.put(flowURL + '/' + userFlow.uid)\n            .set('authtoken', dummyUser.authtoken)\n            .expect(httpStatus.BAD_REQUEST)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    res.body.error.message.should.equal(messageList.USER_PLAN_EXPIRE_ERROR);\n                    done();\n                }\n            });\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "7dd0b567-e4af-4d64-8c28-2132d4e34330",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "52b7d8bf-a8e8-48fe-bdc5-f349a790d14b",
              "38b356dc-babb-472e-bc02-9e9d932d87b5",
              "168e69f7-180f-4b0f-ad6e-b31a7aa93a53",
              "43fc0e72-cff6-439e-8448-38f96fa241ea",
              "62a54d70-d449-4616-a7a3-d44ecb8e7da1",
              "d4e14710-0d89-4f33-a393-5de48b394f16",
              "3065f519-0e21-4385-90e1-797734cd65af",
              "6a2a6ca2-c57f-4a0a-a630-6836f9257569",
              "6168b8c2-a6f0-4e89-96e4-f9f5c30ea6fa",
              "69381c4e-4fad-43dd-b774-1c439997b26c",
              "ab48bb6c-2179-4e21-8c75-1d3c6e658527",
              "9d1d0f79-3dfd-40ea-9181-d74fe6f1bc64",
              "7dd0b567-e4af-4d64-8c28-2132d4e34330"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 259,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "44eeae4b-7342-4be3-89e6-5fd443d81502",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\flow\\updateUserFlowInfo.enterprise.js",
        "file": "\\controllers\\test\\flow\\updateUserFlowInfo.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "ef9eef55-67f9-48a3-b710-3b7768586d36",
            "title": "Flow.UpdateUserFlowInfo",
            "fullFile": "C:\\work\\api\\controllers\\test\\flow\\updateUserFlowInfo.enterprise.js",
            "file": "\\controllers\\test\\flow\\updateUserFlowInfo.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Flow.UpdateUserFlowInfo \"before all\" hook",
                "timedOut": false,
                "duration": 2746,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(userTrigger, cbk) {\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    },\n    function(result, cbk) {\n        dummyUser = result.body.output;\n        api.post(flowURL)\n            .set('authtoken', dummyUser.authtoken)\n            .send(flowData)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                cbk(err, res)\n            })\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        userFlow = res.body.output;\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "dd466c59-abbf-4517-9d9d-5c040236bd0d",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Flow.UpdateUserFlowInfo \"after all\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n_models.newFlow.remove({ uid: userFlow.uid }, function(err, deletedFlow) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "41ab1d80-e50c-491b-85ef-f5e8b2307813",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Flow.UpdateUserFlowInfo Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put(flowURL + '/' + userFlow.uid + +'/info')\n    .send(userFlow)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "5fa8c71f-b5a0-4b19-a055-e0008beb2245",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if flow not found.",
                "fullTitle": "Enterprise Flow.UpdateUserFlowInfo Should get error, if flow not found.",
                "timedOut": false,
                "duration": 19,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put(flowURL + '/dummyFlow/info')\n    .set('authtoken', dummyUser.authtoken)\n    .send(userFlow)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.FLOW_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "45f7a6ca-d5c7-4307-ac2f-692d15da01a5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if \"name\" key is missing OR empty.",
                "fullTitle": "Enterprise Flow.UpdateUserFlowInfo Should get error, if \"name\" key is missing OR empty.",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar invalidFlowData = _.pick(userFlow, ['uid', 'description', 'tags'])\napi.put(flowURL + '/' + userFlow.uid + '/info')\n    .set('authtoken', dummyUser.authtoken)\n    .send(invalidFlowData)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "3a9aab1f-6855-4fa3-97ae-67bb4c255d01",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should update flow, if user sends a valid data.",
                "fullTitle": "Enterprise Flow.UpdateUserFlowInfo Should update flow, if user sends a valid data.",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar validFlowData = _.pick(userFlow, ['name', 'uid', 'description', 'tags'])\nvalidFlowData.name = testFlowName\napi.put(flowURL + '/' + userFlow.uid + '/info')\n    .set('authtoken', dummyUser.authtoken)\n    .send(validFlowData)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output.name).to.equal(testFlowName)\n            expect(res.body.output.flow_version).to.equal(1)\n            expect(res.body.output).not.to.have.all.keys(['_id', '__v']);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "95e64122-5029-4f35-ba06-86e6be3f3534",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "5fa8c71f-b5a0-4b19-a055-e0008beb2245",
              "45f7a6ca-d5c7-4307-ac2f-692d15da01a5",
              "3a9aab1f-6855-4fa3-97ae-67bb4c255d01",
              "95e64122-5029-4f35-ba06-86e6be3f3534"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 53,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "33166962-116f-4b7f-afb3-230ddffc9f63",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\flow\\updateUserFlowVersion.enterprise.js",
        "file": "\\controllers\\test\\flow\\updateUserFlowVersion.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "4340312e-f251-4f63-81a2-3d7529bc5d1f",
            "title": "Flow.UpdateUserFlowVersion",
            "fullFile": "C:\\work\\api\\controllers\\test\\flow\\updateUserFlowVersion.enterprise.js",
            "file": "\\controllers\\test\\flow\\updateUserFlowVersion.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Flow.UpdateUserFlowVersion \"before all\" hook",
                "timedOut": false,
                "duration": 94,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data;\n        async.waterfall([\n            function(cbk) {\n                dummyUser = orgData.owner;\n                dummyUser.authtoken = dummyUser.authtoken;\n                testData.mongoUserTriggerObj.user_uid = dummyUser.uid;\n                _models.UserTrigger.create(testData.mongoUserTriggerObj, function(err, userTrigger) {\n                    cbk(err, userTrigger);\n                })\n            },\n            function(userTrigger, cbk) {\n                userTriggerObj = userTrigger.toJSON()\n                    //flowWithAllData.trigger.handlers[0] = userTriggerObj\n                api.post(flowURL)\n                    .set('authtoken', dummyUser.authtoken)\n                    .send(flowWithAllData)\n                    .expect(httpStatus.CREATED)\n                    .end(function(err, res) {\n                        cbk(err, res)\n                    })\n            }\n        ], function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                userFlow = res.body.output;\n                done()\n            }\n        })\n    });\n})",
                "err": {},
                "isRoot": false,
                "uuid": "ea5f28de-1d49-4e84-a095-62d74aaa6035",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Flow.UpdateUserFlowVersion \"after all\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nhttpmock.cleanAll();\nasync.parallel([\n    function(cb) {\n        _models.newFlow.remove({ uid: userFlow.uid }, function(err, deletedFlow) {\n            cb(err, deletedFlow);\n        })\n    },\n    function(cb) {\n        _models.UserTrigger.remove({ uid: userTriggerObj.uid }, function(err, deletedUserTrigger) {\n            cb(err, deletedUserTrigger);\n        })\n    }\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "93438060-8599-4a85-9ba1-4fb482de524e",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Flow.UpdateUserFlowVersion Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put(flowURL + '/' + userFlow.uid + '/version/' + userFlow.flow_version)\n    .send(body)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "04d04576-8a8e-4bc1-ae2c-7751b38536de",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if flow not found.",
                "fullTitle": "Enterprise Flow.UpdateUserFlowVersion Should get error, if flow not found.",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put(flowURL + '/dummyFlow' + '/version/' + userFlow.flow_version)\n    .set('authtoken', dummyUser.authtoken)\n    .send(body)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.FLOW_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "f5cf5f97-c504-4efd-abc7-2a561bb96f3e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if flow version not found.",
                "fullTitle": "Enterprise Flow.UpdateUserFlowVersion Should get error, if flow version not found.",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put(flowURL + '/' + userFlow.uid + '/version/3')\n    .set('authtoken', dummyUser.authtoken)\n    .send(body)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.FLOW_VERSION_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "987defbd-349c-4d56-9065-109cca169eef",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should update flow version, if user sends a valid data.",
                "fullTitle": "Enterprise Flow.UpdateUserFlowVersion Should update flow version, if user sends a valid data.",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put(flowURL + '/' + userFlow.uid + '/version/' + userFlow.flow_version)\n    .set('authtoken', dummyUser.authtoken)\n    .send(body)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var result = res.body.output\n            expect(_.first(result).flow_version_tag).to.equal(body.flow_version_tag)\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "8624ca3e-abf2-438b-adb2-e3bd2ede1c03",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "04d04576-8a8e-4bc1-ae2c-7751b38536de",
              "f5cf5f97-c504-4efd-abc7-2a561bb96f3e",
              "987defbd-349c-4d56-9065-109cca169eef",
              "8624ca3e-abf2-438b-adb2-e3bd2ede1c03"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 51,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "26edb125-47d5-49ac-8fbf-29ecd38667e1",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\flow\\updateWebhook.enterprise.js",
        "file": "\\controllers\\test\\flow\\updateWebhook.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "47fbadb4-953b-4086-b62f-b03cd53b8ec0",
            "title": "Flow.UpdateWebHook",
            "fullFile": "C:\\work\\api\\controllers\\test\\flow\\updateWebhook.enterprise.js",
            "file": "\\controllers\\test\\flow\\updateWebhook.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Flow.UpdateWebHook \"before all\" hook",
                "timedOut": false,
                "duration": 103,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data;\n        async.waterfall([\n            function(cbk) {\n                dummyUser = orgData.owner;\n                dummyUser.authtoken = dummyUser.authtoken;\n                testData.mongoUserTriggerObj.user_uid = dummyUser.uid;\n                _models.UserTrigger.create(testData.mongoUserTriggerObj, function(err, userTrigger) {\n                    cbk(err, userTrigger);\n                })\n            },\n            function(userTrigger, cbk) {\n                var userTriggerObj = userTrigger;\n                var flowData = _.cloneDeep(testData.flowBody);\n                flowData.isExpress = false;\n                flowData.trigger.handlers = [userTriggerObj]\n                async.parallel({\n                    triggerFlow: function(cb) {\n                        createFlow(flowURL, flowData, dummyUser, function(err, result) {\n                            cb(err, result);\n                        })\n                    },\n                    webHookFlow: function(cb) {\n                        var WHFlow = _.cloneDeep(flowData);\n                        WHFlow.trigger = testData.defaultTriggerObj;\n                        WHFlow.settings = testData.webHookSetting;\n                        WHFlow.active = true;\n                        WHFlow.settings = testData.webHookSetting;\n                        createFlow(flowURL, WHFlow, dummyUser, function(err, result) {\n                            cb(err, result);\n                        })\n                    }\n                }, function(err, result) {\n                    cbk(err, result)\n                })\n            }\n        ], function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                userTriggerFlow = res.triggerFlow.body.output;\n                userWebHookFlow = res.webHookFlow.body.output;\n                done()\n            }\n        })\n    });\n})",
                "err": {},
                "isRoot": false,
                "uuid": "aa5ea16a-0be6-4a79-8230-b3a5b57de197",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Flow.UpdateWebHook \"after all\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nhttpmock.cleanAll();\nvar flowUIDS = [userWebHookFlow.uid];\nasync.parallel([\n    function(cb) {\n        _models.newFlow.remove({ uid: { $in: flowUIDS } }, function(err, deletedFlows) {\n            cb(err, deletedFlows)\n        });\n    }\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "98c36936-f42f-4fe3-b024-b59ce5de5698",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Flow.UpdateWebHook Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(flowURL + '/' + userWebHookFlow.uid + '/updatewebhook')\n    .send(updateBody)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "5a49f55b-953e-4cad-a3b1-fbd8c69bcceb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should give flow not found error, if user sends an invalid floe uid",
                "fullTitle": "Enterprise Flow.UpdateWebHook Should give flow not found error, if user sends an invalid floe uid",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(flowURL + '/dummyFlow/updatewebhook')\n    .set('authtoken', dummyUser.authtoken)\n    .send(updateBody)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).to.be.equal(messageList.FLOW_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "306bbef8-bb15-45f7-b2cf-ccd7b25bd7b3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should update webhook flow.",
                "fullTitle": "Enterprise Flow.UpdateWebHook Should update webhook flow.",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(flowURL + '/' + userWebHookFlow.uid + '/updatewebhook')\n    .set('authtoken', dummyUser.authtoken)\n    .send(updateBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output.settings.url_execution).to.be.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "de0f58fd-4526-49b7-88b8-2f560fd30498",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should update webhook of trigger attched flow.",
                "fullTitle": "Enterprise Flow.UpdateWebHook Should update webhook of trigger attched flow.",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar flow_uid = userTriggerFlow.uid\nvar trigger_path = '/trigger/' + userTriggerFlow.trigger.handlers[0] + '/handlers';\nvar trigger_body = {\n    \"unset\": [flow_uid]\n}\nvar opt = { path: trigger_path, body: trigger_body };\ncommonMock.triggerPullSuccess(opt);\napi.post(flowURL + '/' + userTriggerFlow.uid + '/updatewebhook')\n    .set('authtoken', dummyUser.authtoken)\n    .send(updateBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output.settings.url_execution).to.be.equal(true);\n            expect(res.body.output.settings).not.to.have.all.keys(['authtoken']);\n            expect(_.isEmpty(res.body.output.trigger.handlers)).to.be.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "f9b39da1-df73-45a3-b52f-e72e79d38130",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "5a49f55b-953e-4cad-a3b1-fbd8c69bcceb",
              "306bbef8-bb15-45f7-b2cf-ccd7b25bd7b3",
              "de0f58fd-4526-49b7-88b8-2f560fd30498",
              "f9b39da1-df73-45a3-b52f-e72e79d38130"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 56,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "575b5eeb-445b-4d9d-9749-c1f59ba09a14",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\flow\\userFlowExists.enterprise.js",
        "file": "\\controllers\\test\\flow\\userFlowExists.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "e962bd90-cf6e-47af-b4de-2873a96bab70",
            "title": "Flow.UserFlowExists",
            "fullFile": "C:\\work\\api\\controllers\\test\\flow\\userFlowExists.enterprise.js",
            "file": "\\controllers\\test\\flow\\userFlowExists.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Flow.UserFlowExists \"before all\" hook",
                "timedOut": false,
                "duration": 2193,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(userTrigger, cbk) {\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    },\n    function(result, cbk) {\n        dummyUser = result.body.output;\n        api.post(flowURL)\n            .set('authtoken', dummyUser.authtoken)\n            .send(testData.enterpriseFlowBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                cbk(err, res)\n            })\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        userFlow = res.body.output;\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "35dc191d-8781-42a2-ba9f-f88ba9cac0f0",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Flow.UserFlowExists \"after all\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nhttpmock.cleanAll();\n_models.newFlow.remove({ uid: userFlow.uid }, function(err, deletedFlow) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "2cc4ea6c-74a8-478a-80f0-342851c0ff48",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Flow.UserFlowExists Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(flowURL + '/' + userFlow.uid + '/exists')\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "30f976fe-4803-4a50-a6b5-2113c2af17d5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get \"count\" is equal to 0, if flow not found.",
                "fullTitle": "Enterprise Flow.UserFlowExists Should get \"count\" is equal to 0, if flow not found.",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + '/exists')\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output.count).to.be.equal(0);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "b030ace9-36a7-429d-bb9a-76044b2061c2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get \"count\" is equal to 1, if user flow is found.",
                "fullTitle": "Enterprise Flow.UserFlowExists Should get \"count\" is equal to 1, if user flow is found.",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(flowURL + '/' + userFlow.uid + '/exists')\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output.count).to.be.equal(1);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "3aa04b1b-55bb-4fc1-9254-9bc1dd489f91",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "30f976fe-4803-4a50-a6b5-2113c2af17d5",
              "b030ace9-36a7-429d-bb9a-76044b2061c2",
              "3aa04b1b-55bb-4fc1-9254-9bc1dd489f91"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 34,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "bc9c78f7-064e-42d6-856a-d1cf0515e9a4",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\flowOauth\\createClient.enterprise.js",
        "file": "\\controllers\\test\\flowOauth\\createClient.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "04de9b4c-4269-4711-a1f6-6d7a793761f2",
            "title": "flowOauth",
            "fullFile": "C:\\work\\api\\controllers\\test\\flowOauth\\createClient.enterprise.js",
            "file": "\\controllers\\test\\flowOauth\\createClient.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "223c9f78-aebf-4d83-be7d-95a043b5f323",
                "title": "flowOauth.createClient",
                "fullFile": "C:\\work\\api\\controllers\\test\\flowOauth\\createClient.enterprise.js",
                "file": "\\controllers\\test\\flowOauth\\createClient.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise flowOauth flowOauth.createClient \"before each\" hook",
                    "timedOut": false,
                    "duration": 3002,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ndeleteAllInsertedRecords(function(error, output) {\n    if (error) {\n        done(error);\n    } else {\n        commonMock.setSignUpMocks(httpmock, \"enterprise\");\n        api.post(\"/enterprise/v1/signup\")\n            .send(registrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    authToken = res.body.output.authtoken;\n                    _id = res.body.output._id;\n                    _userUID = res.body.output.uid;\n                    apiURL = apiURL.replace(\":uid\", res.body.output.uid);\n                    done();\n                }\n            });\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0d4aed30-368e-4011-9ae7-56fb3551f5f2",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise flowOauth flowOauth.createClient \"after each\" hook",
                    "timedOut": false,
                    "duration": 2,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndeleteAllInsertedRecords(function(error, output) {\n    if (error) {\n        done(error);\n    } else {\n        done();\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "121c0adf-61b9-4520-ba4d-83213b1bc26e",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should create oauth client.",
                    "fullTitle": "Enterprise flowOauth flowOauth.createClient Should create oauth client.",
                    "timedOut": false,
                    "duration": 17,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('authtoken', authToken)\n    .send({\n        \"redirect_uri\": \"http://demo.example.com/callback\"\n    })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.uid.should.not.equal(\"\");\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b726742a-919c-4251-8617-5b3011d5f7de",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should create oauth client without redirect_uri.",
                    "fullTitle": "Enterprise flowOauth flowOauth.createClient Should create oauth client without redirect_uri.",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('authtoken', authToken)\n    .send({\n        \"redirect_uri\": \"\"\n    })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.uid.should.not.equal(\"\");\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fcf846d1-009a-4556-a85b-c9c04b3a8b70",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not allowed to create second oauth client.",
                    "fullTitle": "Enterprise flowOauth flowOauth.createClient Should not allowed to create second oauth client.",
                    "timedOut": false,
                    "duration": 24,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('authtoken', authToken)\n    .send({\n        \"redirect_uri\": \"http://demo.example.com/callback\"\n    })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            api.post(apiURL)\n                .set('authtoken', authToken)\n                .send({\n                    \"redirect_uri\": \"http://demo.example.com/callback\"\n                })\n                .expect(httpStatus.BAD_REQUEST)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        res.body.error.message.should.equal(messageList.FLOW_ACCESS_CLIENT_TOKEN_ALREADY_EXISTS);\n                        done();\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "da79035a-3d7a-4f8b-ad5e-9b6ff04d4ce8",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise flowOauth flowOauth.createClient Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0a730863-3455-409b-a099-29a125696806",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "b726742a-919c-4251-8617-5b3011d5f7de",
                  "fcf846d1-009a-4556-a85b-c9c04b3a8b70",
                  "da79035a-3d7a-4f8b-ad5e-9b6ff04d4ce8",
                  "0a730863-3455-409b-a099-29a125696806"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 59,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "85984805-7ca0-40ea-b623-40e42e1e406c",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\flowOauth\\deleteClient.enterprise.js",
        "file": "\\controllers\\test\\flowOauth\\deleteClient.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "a6907735-69b8-4269-9625-1132cf092fc8",
            "title": "flowOauth",
            "fullFile": "C:\\work\\api\\controllers\\test\\flowOauth\\deleteClient.enterprise.js",
            "file": "\\controllers\\test\\flowOauth\\deleteClient.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "126971f8-cbf2-4f29-81fb-63190e67bdf9",
                "title": "flowOauth.deleteClient",
                "fullFile": "C:\\work\\api\\controllers\\test\\flowOauth\\deleteClient.enterprise.js",
                "file": "\\controllers\\test\\flowOauth\\deleteClient.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise flowOauth flowOauth.deleteClient \"before each\" hook",
                    "timedOut": false,
                    "duration": 2277,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ndeleteAllInsertedRecords(function(error, output) {\n    if (error) {\n        done(error);\n    } else {\n        commonMock.setSignUpMocks(httpmock, \"enterprise\");\n        api.post(\"/enterprise/v1/signup\")\n            .send(registrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    authToken = res.body.output.authtoken;\n                    _id = res.body.output._id;\n                    _userUID = res.body.output.uid;\n                    api.post(apiURL)\n                        .set('authtoken', authToken)\n                        .send({\n                            \"redirect_uri\": \"http://demo.example.com/callback\"\n                        })\n                        .expect(httpStatus.OK)\n                        .end(function(err, res) {\n                            if (err) {\n                                done(err);\n                            } else {\n                                _flowAuthUID = res.body.output.uid;\n                                done();\n                            }\n                        });\n                }\n            });\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4c905517-96c7-482e-8f13-94e9a0679fda",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise flowOauth flowOauth.deleteClient \"after each\" hook",
                    "timedOut": false,
                    "duration": 2,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndeleteAllInsertedRecords(function(error, output) {\n    if (error) {\n        done(error);\n    } else {\n        done();\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9e39aecb-4ba5-46a3-a7e9-4a026f961ec9",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should update oauth client.",
                    "fullTitle": "Enterprise flowOauth flowOauth.deleteClient Should update oauth client.",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.delete(apiURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.message.should.equal(messageList.FLOW_ACCESS_CLIENT_DELETED);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1d1a5416-5ae8-47cc-9523-1075acfd51ff",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give client not register for already un-register client.",
                    "fullTitle": "Enterprise flowOauth flowOauth.deleteClient Should give client not register for already un-register client.",
                    "timedOut": false,
                    "duration": 23,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.delete(apiURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            api.delete(apiURL)\n                .set('authtoken', authToken)\n                .expect(httpStatus.BAD_REQUEST)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        res.body.error.message.should.equal(messageList.FLOW_ACCESS_CLIENT_NOT_REGISTER);\n                        done();\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "54d2bb66-b090-4601-814f-3e28d6c87cae",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise flowOauth flowOauth.deleteClient Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.delete(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b4057beb-c1ff-46aa-a150-5ad4ff388e24",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "1d1a5416-5ae8-47cc-9523-1075acfd51ff",
                  "54d2bb66-b090-4601-814f-3e28d6c87cae",
                  "b4057beb-c1ff-46aa-a150-5ad4ff388e24"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 39,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "7e460b74-a1ef-4cb3-96cd-96d8e568d702",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\flowOauth\\grantToken.enterprise.js",
        "file": "\\controllers\\test\\flowOauth\\grantToken.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "974d43d5-a14a-4b2a-b4f1-22233b1ea5c0",
            "title": "flowOauth",
            "fullFile": "C:\\work\\api\\controllers\\test\\flowOauth\\grantToken.enterprise.js",
            "file": "\\controllers\\test\\flowOauth\\grantToken.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "e214926b-aa23-4699-a982-99d21363d0a6",
                "title": "flowOauth.grantToken",
                "fullFile": "C:\\work\\api\\controllers\\test\\flowOauth\\grantToken.enterprise.js",
                "file": "\\controllers\\test\\flowOauth\\grantToken.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise flowOauth flowOauth.grantToken \"before each\" hook",
                    "timedOut": false,
                    "duration": 5974,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ndeleteAllInsertedRecords(function(error, output) {\n    if (error) {\n        done(error);\n    } else {\n        commonMock.setSignUpMocks(httpmock, \"enterprise\");\n        api.post(\"/enterprise/v1/signup\")\n            .send(registrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    authToken = res.body.output.authtoken;\n                    _id = res.body.output._id;\n                    _userUID = res.body.output.uid;\n                    apiURL = apiURL.replace(\":uid\", res.body.output.uid)\n                    registrationBody1 = global.getImmutable(registrationBody);\n                    registrationBody1.email = \"test.user+1@raweng.com\";\n                    commonMock.setSignUpMocks(httpmock, \"enterprise\", {\n                        email: registrationBody1.email\n                    });\n                    api.post(\"/enterprise/v1/signup\")\n                        .send(registrationBody1)\n                        .expect(httpStatus.CREATED)\n                        .end(function(err, res) {\n                            if (err) {\n                                done(err);\n                            } else {\n                                authToken2 = res.body.output.authtoken;\n                                done();\n                            }\n                        });\n                }\n            });\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "42c7cc70-0656-420e-93b0-4591bc0ac195",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise flowOauth flowOauth.grantToken \"after each\" hook",
                    "timedOut": false,
                    "duration": 1,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndeleteAllInsertedRecords(function(error, output) {\n    if (error) {\n        done(error);\n    } else {\n        done();\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ba3ffa38-acb5-4e1e-b79a-45a2d711dd23",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should allowed to login with oauth.",
                    "fullTitle": "Enterprise flowOauth flowOauth.grantToken Should allowed to login with oauth.",
                    "timedOut": false,
                    "duration": 156,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(\"/enterprise/v1/user/client\")\n    .set('authtoken', authToken)\n    .send({\n        \"redirect_uri\": \"http://demo.example.com/callback\"\n    })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            loginWithOauth({\n                client: res.body.output,\n                registrationBody: registrationBody\n            }, done, function(loginUserUid, uid) {\n                loginUserUid.should.equal(uid);\n                done();\n            });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1478235d-1b11-4a55-a8e9-8c162d2b8d5d",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should allowed to login other user with oauth.",
                    "fullTitle": "Enterprise flowOauth flowOauth.grantToken Should allowed to login other user with oauth.",
                    "timedOut": false,
                    "duration": 136,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(\"/enterprise/v1/user/client\")\n    .set('authtoken', authToken)\n    .send({\n        \"redirect_uri\": \"http://demo.example.com/callback\"\n    })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            loginWithOauth({\n                client: res.body.output,\n                registrationBody: registrationBody1\n            }, done, function(loginUserUid, uid) {\n                loginUserUid.should.equal(uid);\n                done();\n            });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5c9a9f37-1699-48b5-b975-bb4d0b8e0506",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should allowed to login with different client, if multiple clients are available.",
                    "fullTitle": "Enterprise flowOauth flowOauth.grantToken Should allowed to login with different client, if multiple clients are available.",
                    "timedOut": false,
                    "duration": 264,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(\"/enterprise/v1/user/client\")\n    .set('authtoken', authToken)\n    .send({\n        \"redirect_uri\": \"http://demo.example.com/callback\"\n    })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            loginWithOauth({\n                client: res.body.output,\n                registrationBody: registrationBody1\n            }, done, function(loginUserUid, uid) {\n                if (loginUserUid == uid) {\n                    api.post(\"/enterprise/v1/user/client\")\n                        .set('authtoken', authToken2)\n                        .send({\n                            \"redirect_uri\": \"http://demo.example.com/callback\"\n                        })\n                        .expect(httpStatus.OK)\n                        .end(function(err, res) {\n                            if (err) {\n                                done(err);\n                            } else {\n                                loginWithOauth({\n                                    client: res.body.output,\n                                    registrationBody: registrationBody1\n                                }, done, function(loginUserUid, uid) {\n                                    loginUserUid.should.equal(uid);\n                                    done();\n                                });\n                            }\n                        });\n                } else {\n                    loginUserUid.should.equal(uid);\n                    done();\n                }\n            });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8f4fc9f3-344b-4508-8f73-a61091190e48",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise flowOauth flowOauth.grantToken Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8e9ddb95-de5e-4aaa-8bb7-9dd0155fc803",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "1478235d-1b11-4a55-a8e9-8c162d2b8d5d",
                  "5c9a9f37-1699-48b5-b975-bb4d0b8e0506",
                  "8f4fc9f3-344b-4508-8f73-a61091190e48",
                  "8e9ddb95-de5e-4aaa-8bb7-9dd0155fc803"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 560,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "8af9232e-b0e2-46aa-9b7a-48d6c5e3df6e",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\flowOauth\\loginWithFlowOAuth.enterprise.js",
        "file": "\\controllers\\test\\flowOauth\\loginWithFlowOAuth.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "ef91166a-85ac-4b31-a1b3-f502db90f975",
            "title": "flowOauth",
            "fullFile": "C:\\work\\api\\controllers\\test\\flowOauth\\loginWithFlowOAuth.enterprise.js",
            "file": "\\controllers\\test\\flowOauth\\loginWithFlowOAuth.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "ab96785d-0f05-484f-999b-883b1a07f42a",
                "title": "flowOauth.loginWithFlowOAuth",
                "fullFile": "C:\\work\\api\\controllers\\test\\flowOauth\\loginWithFlowOAuth.enterprise.js",
                "file": "\\controllers\\test\\flowOauth\\loginWithFlowOAuth.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise flowOauth flowOauth.loginWithFlowOAuth \"before each\" hook",
                    "timedOut": false,
                    "duration": 4139,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ndeleteAllInsertedRecords(function(error, output) {\n    if (error) {\n        done(error);\n    } else {\n        commonMock.setSignUpMocks(httpmock, \"enterprise\");\n        api.post(\"/enterprise/v1/signup\")\n            .send(registrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    authToken = res.body.output.authtoken;\n                    _id = res.body.output._id;\n                    _userUID = res.body.output.uid;\n                    apiURL = apiURL.replace(\":uid\", res.body.output.uid)\n                    registrationBody1 = global.getImmutable(registrationBody);\n                    registrationBody1.email = \"test.user+1@raweng.com\";\n                    commonMock.setSignUpMocks(httpmock, \"enterprise\", {\n                        email: registrationBody1.email\n                    });\n                    api.post(\"/enterprise/v1/signup\")\n                        .send(registrationBody1)\n                        .expect(httpStatus.CREATED)\n                        .end(function(err, res) {\n                            if (err) {\n                                done(err);\n                            } else {\n                                authToken2 = res.body.output.authtoken;\n                                done();\n                            }\n                        });\n                }\n            });\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d6f7bf8d-742d-4ac8-a82b-41666d64bdd7",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise flowOauth flowOauth.loginWithFlowOAuth \"after each\" hook",
                    "timedOut": false,
                    "duration": 2,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndeleteAllInsertedRecords(function(error, output) {\n    if (error) {\n        done(error);\n    } else {\n        done();\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c171639c-d7eb-4585-ae3a-83390496cebe",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should allowed to login with access token.",
                    "fullTitle": "Enterprise flowOauth flowOauth.loginWithFlowOAuth Should allowed to login with access token.",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar accessToken = \"40399f8be4bd5e6df8b1b3a5e8a8dcf61dba4dc6\";\n_models.OAuthAccessToken.create({\n    \"access_token\": accessToken,\n    \"client_id\": \"rp84OfO7CpRrPKaD\",\n    \"refresh_token\": \"ea720a80-4b4c-c476-faf5-873b4cfb28df\",\n    \"user_uid\": _userUID\n}, function(error, access_token) {\n    if (error) {\n        done(error);\n    } else {\n        api.post(\"/enterprise/v1/oauth/user\")\n            .send({\n                access_token: accessToken\n            })\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    res.body.output.uid.should.not.equal(\"\");\n                    done();\n                }\n            });\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c3da7de4-bdd9-4e46-bb20-6ee08b99d44f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as unauthorised user.",
                    "fullTitle": "Enterprise flowOauth flowOauth.loginWithFlowOAuth Should give error as unauthorised user.",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar accessToken = \"40399f8be4bd5e6df8b1b3a5e8a8dcf61dba4dc6\";\n_models.OAuthAccessToken.create({\n    \"access_token\": accessToken + \"DUNPLICATE\",\n    \"client_id\": \"rp84OfO7CpRrPKaD\",\n    \"refresh_token\": \"ea720a80-4b4c-c476-faf5-873b4cfb28df\",\n    \"user_uid\": _userUID\n}, function(error, access_token) {\n    if (error) {\n        done(error);\n    } else {\n        api.post(\"/enterprise/v1/oauth/user\")\n            .send({\n                access_token: accessToken\n            })\n            .expect(httpStatus.UNAUTHORIZED)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    res.body.error.message.should.equal(messageList.INVALID_FLOW_AUTH_TOKEN);\n                    done();\n                }\n            });\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1f10a88b-413b-434e-93ae-4b09f8ae2544",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise flowOauth flowOauth.loginWithFlowOAuth Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3bcbdb3e-e76e-45ac-a4a0-e6a4f7829e8a",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "c3da7de4-bdd9-4e46-bb20-6ee08b99d44f",
                  "1f10a88b-413b-434e-93ae-4b09f8ae2544",
                  "3bcbdb3e-e76e-45ac-a4a0-e6a4f7829e8a"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 23,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "cef1c09e-5865-4de2-8062-a498de217dda",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\flowOauth\\updateClient.enterprise.js",
        "file": "\\controllers\\test\\flowOauth\\updateClient.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "45f309aa-b3b0-409a-b469-5d0d1d81e027",
            "title": "flowOauth",
            "fullFile": "C:\\work\\api\\controllers\\test\\flowOauth\\updateClient.enterprise.js",
            "file": "\\controllers\\test\\flowOauth\\updateClient.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "41720ada-598c-4ddc-b852-d7a8b23013f0",
                "title": "flowOauth.updateClient",
                "fullFile": "C:\\work\\api\\controllers\\test\\flowOauth\\updateClient.enterprise.js",
                "file": "\\controllers\\test\\flowOauth\\updateClient.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise flowOauth flowOauth.updateClient \"before each\" hook",
                    "timedOut": false,
                    "duration": 4224,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ndeleteAllInsertedRecords(function(error, output) {\n    if (error) {\n        done(error);\n    } else {\n        commonMock.setSignUpMocks(httpmock, \"enterprise\");\n        api.post(\"/enterprise/v1/signup\")\n            .send(registrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    authToken = res.body.output.authtoken;\n                    _id = res.body.output._id;\n                    _userUID = res.body.output.uid;\n                    api.post(apiURL)\n                        .set('authtoken', authToken)\n                        .send({\n                            \"redirect_uri\": \"http://demo.example.com/callback\"\n                        })\n                        .expect(httpStatus.OK)\n                        .end(function(err, res) {\n                            if (err) {\n                                done(err);\n                            } else {\n                                _flowAuthUID = res.body.output.uid;\n                                done();\n                            }\n                        });\n                }\n            });\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "79490275-39f1-4850-a3b7-2d8c313a63cd",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise flowOauth flowOauth.updateClient \"after each\" hook",
                    "timedOut": false,
                    "duration": 2,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndeleteAllInsertedRecords(function(error, output) {\n    if (error) {\n        done(error);\n    } else {\n        done();\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "da155d66-f575-4654-8123-a4b3b8d67b9c",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should update oauth client.",
                    "fullTitle": "Enterprise flowOauth flowOauth.updateClient Should update oauth client.",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar newUrl = \"http://example.com/callback\";\napi.put(apiURL)\n    .set('authtoken', authToken)\n    .send({\n        \"redirect_uri\": newUrl\n    })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            (res.body.output.uid == _flowAuthUID &&\n                res.body.output.redirect_uri == newUrl).should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "462dbe36-ef13-4a0c-8a49-2a2b00dec7d0",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should update oauth client without redirect_uri.",
                    "fullTitle": "Enterprise flowOauth flowOauth.updateClient Should update oauth client without redirect_uri.",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.put(apiURL)\n    .set('authtoken', authToken)\n    .send({\n        \"redirect_uri\": \"\"\n    })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            (res.body.output.uid == _flowAuthUID &&\n                res.body.output.redirect_uri == \"\").should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "13789e32-6474-47e2-a44b-7f2cab9fbfea",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise flowOauth flowOauth.updateClient Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.put(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2a503de2-c35c-45d0-b93a-0641afeeb2ba",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "462dbe36-ef13-4a0c-8a49-2a2b00dec7d0",
                  "13789e32-6474-47e2-a44b-7f2cab9fbfea",
                  "2a503de2-c35c-45d0-b93a-0641afeeb2ba"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 30,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "2b7a7021-4201-44ee-95cd-2e59110e5f24",
        "title": "Activity Analytics",
        "fullFile": "C:\\work\\api\\controllers\\test\\helpers\\index.js",
        "file": "\\controllers\\test\\helpers\\index.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Activity Analytics \"before each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "// var p1 = Promise.all([\n//     _models.ActionUsages.remove({})\n//     _models.User.collection.remove({})\n// ]);\n// var p2 = _models.User.collection.insert(mock_users.express.user_one);\n// var p3 = _models.User.collection.insert(mock_users.enterprise.user_one);\n// return Promise.all([p1, p2, p3]);\nreturn _models.ActionUsages.remove({})",
            "err": {},
            "isRoot": false,
            "uuid": "4a5e19a9-e8c4-4d82-9bb7-80b94d7f5b18",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "b91e41f6-3b43-4e20-8c74-06c31a36b872",
            "title": "Common Validation",
            "fullFile": "C:\\work\\api\\controllers\\test\\helpers\\index.js",
            "file": "\\controllers\\test\\helpers\\index.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should throw error for invalid params",
                "fullTitle": "Activity Analytics Common Validation Should throw error for invalid params",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(10000);\nreturn activityAnalytics.set().then(function(data) {\n    return data.should.be.undefined;\n}, function(err) {\n    return err.should.be.deep.equal({\n        message: 'Invalid arguments.',\n        errors: [\n            '\"user\" param is mandatory',\n            '\"new_flow\" param is mandatory'\n        ]\n    })\n})",
                "err": {},
                "isRoot": false,
                "uuid": "76d1ec4c-af29-4e2b-9265-8c0adc55c620",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "76d1ec4c-af29-4e2b-9265-8c0adc55c620"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "5f6db738-72d2-4175-be1e-cf042f4f48ed",
            "title": "Express",
            "fullFile": "C:\\work\\api\\controllers\\test\\helpers\\index.js",
            "file": "\\controllers\\test\\helpers\\index.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should create new analytic event for \"new flow\"",
                "fullTitle": "Activity Analytics Express Should create new analytic event for \"new flow\"",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(1000)\nreturn activityAnalytics.set(mock_users.express.user_one, mock_new_flow.express.new_flow).then(function(data) {\n    data.should.be.deep.equal({ isNew: true, isChanged: true });\n    return _models.ActionUsages.findOne()\n        .lean()\n        .then(function(act) {\n            act.created_at = act.created_at.toISOString()\n            act.updated_at = act.updated_at.toISOString()\n            delete act.triggers[0]._id\n            delete act.activities[0]._id\n            delete act._id\n            delete act.uid\n            act.should.be.deep.equal(mock_new_flow.express.new_flow_analytics)\n        })\n})",
                "err": {},
                "isRoot": false,
                "uuid": "053e1ac1-6299-446c-8533-846a5216a666",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should update analytic event for \"existing flow\"",
                "fullTitle": "Activity Analytics Express Should update analytic event for \"existing flow\"",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(1000)\nreturn activityAnalytics.set(mock_users.express.user_one, mock_new_flow.express.new_flow)\n    .then(function() {\n        return activityAnalytics.set(mock_users.express.user_one, mock_new_flow.express.existing_flow).then(function(data) {\n            data.should.be.deep.equal({ isNew: false, isChanged: true });\n            return _models.ActionUsages.findOne()\n                .lean()\n                .then(function(act) {\n                    act.created_at = act.created_at.toISOString()\n                    act.updated_at = act.updated_at.toISOString()\n                    act.triggers = remove_id(act.triggers)\n                    act.activities = remove_id(act.activities)\n                    delete act._id\n                    delete act.uid\n                    act.should.be.deep.equal(mock_new_flow.express.existing_flow_analytics)\n                })\n        })\n    })",
                "err": {},
                "isRoot": false,
                "uuid": "e8f74cf5-f1e1-4cb4-9031-4a237cb8f3d6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should be same analytic event for \"existing unchanged\"",
                "fullTitle": "Activity Analytics Express Should be same analytic event for \"existing unchanged\"",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(1000)\nreturn activityAnalytics.set(mock_users.express.user_one, mock_new_flow.express.new_flow)\n    .then(function() {\n        return activityAnalytics.set(mock_users.express.user_one, mock_new_flow.express.new_flow).then(function(data) {\n            data.should.be.deep.equal({ isNew: false, isChanged: false });\n            return _models.ActionUsages.findOne()\n                .lean()\n                .then(function(act) {\n                    act.created_at = act.created_at.toISOString()\n                    act.updated_at = act.updated_at.toISOString()\n                    delete act.triggers[0]._id\n                    delete act.activities[0]._id\n                    delete act._id\n                    delete act.uid\n                    act.should.be.deep.equal(mock_new_flow.express.new_flow_analytics)\n                })\n        })\n    })",
                "err": {},
                "isRoot": false,
                "uuid": "8d3a2401-c8d6-46bf-9112-828c15365caf",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "053e1ac1-6299-446c-8533-846a5216a666",
              "e8f74cf5-f1e1-4cb4-9031-4a237cb8f3d6",
              "8d3a2401-c8d6-46bf-9112-828c15365caf"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 10,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "ce92e9b6-5635-4e07-90a4-af92cd3df654",
            "title": "Enterprise",
            "fullFile": "C:\\work\\api\\controllers\\test\\helpers\\index.js",
            "file": "\\controllers\\test\\helpers\\index.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should create new analytic event for \"new flow\"",
                "fullTitle": "Activity Analytics Enterprise Should create new analytic event for \"new flow\"",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(1000)\nreturn activityAnalytics.set(mock_users.enterprise.user_one, mock_new_flow.enterprise.new_flow).then(function(data) {\n    data.should.be.deep.equal({ isNew: true, isChanged: true });\n    return _models.ActionUsages.findOne()\n        .lean()\n        .then(function(act) {\n            act.created_at = act.created_at.toISOString()\n            act.updated_at = act.updated_at.toISOString()\n            delete act.triggers[0]._id\n            delete act.activities[0]._id\n            delete act._id\n            delete act.uid\n            act.should.be.deep.equal(mock_new_flow.enterprise.new_flow_analytics)\n        })\n})",
                "err": {},
                "isRoot": false,
                "uuid": "7e512ba8-193d-464a-88db-e42a041200b1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should update analytic event for \"existing flow\"",
                "fullTitle": "Activity Analytics Enterprise Should update analytic event for \"existing flow\"",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(1000)\nreturn activityAnalytics.set(mock_users.enterprise.user_one, mock_new_flow.enterprise.new_flow).then(function() {\n    return activityAnalytics.set(mock_users.enterprise.user_one, mock_new_flow.enterprise.existing_flow).then(function(data) {\n        data.should.be.deep.equal({ isNew: false, isChanged: true });\n        return _models.ActionUsages.findOne()\n            .lean()\n            .then(function(act) {\n                act.created_at = act.created_at.toISOString()\n                act.updated_at = act.updated_at.toISOString()\n                act.triggers = remove_id(act.triggers)\n                act.activities = remove_id(act.activities)\n                delete act._id\n                delete act.uid\n                act.should.be.deep.equal(mock_new_flow.enterprise.existing_flow_analytics)\n            })\n    })\n})",
                "err": {},
                "isRoot": false,
                "uuid": "17742079-fa34-4cc8-84ff-a35058b74028",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should be same analytic event for \"existing unchanged\"",
                "fullTitle": "Activity Analytics Enterprise Should be same analytic event for \"existing unchanged\"",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(1000)\nreturn activityAnalytics.set(mock_users.enterprise.user_one, mock_new_flow.enterprise.new_flow)\n    .then(function() {\n        return activityAnalytics.set(mock_users.enterprise.user_one, mock_new_flow.enterprise.new_flow).then(function(data) {\n            data.should.be.deep.equal({ isNew: false, isChanged: false });\n            return _models.ActionUsages.findOne()\n                .lean()\n                .then(function(act) {\n                    act.created_at = act.created_at.toISOString()\n                    act.updated_at = act.updated_at.toISOString()\n                    delete act.triggers[0]._id\n                    delete act.activities[0]._id\n                    delete act._id\n                    delete act.uid\n                    act.should.be.deep.equal(mock_new_flow.enterprise.new_flow_analytics)\n                })\n        })\n    })",
                "err": {},
                "isRoot": false,
                "uuid": "ea5aff09-cf09-416e-81eb-79e15497000d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should update analytic event for \"existing flow\" with \"url_execution\" set to \"false\"",
                "fullTitle": "Activity Analytics Enterprise Should update analytic event for \"existing flow\" with \"url_execution\" set to \"false\"",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(1000)\nreturn activityAnalytics.set(mock_users.enterprise.user_one, mock_new_flow.enterprise.existing_flow).then(function() {\n    return activityAnalytics.set(mock_users.enterprise.user_one, mock_new_flow.enterprise.flow_without_trigger_webhook).then(function(data) {\n        data.should.be.deep.equal({ isNew: false, isChanged: true });\n        return _models.ActionUsages.findOne()\n            .lean()\n            .then(function(act) {\n                act.created_at = act.created_at.toISOString()\n                act.updated_at = act.updated_at.toISOString()\n                act.triggers = remove_id(act.triggers)\n                act.activities = remove_id(act.activities)\n                delete act._id\n                delete act.uid\n                act.should.be.deep.equal(mock_new_flow.enterprise.flow_without_trigger_webhook_analytics)\n            })\n    })\n})",
                "err": {},
                "isRoot": false,
                "uuid": "2429285e-9887-44a1-ae01-11c608bee60a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "7e512ba8-193d-464a-88db-e42a041200b1",
              "17742079-fa34-4cc8-84ff-a35058b74028",
              "ea5aff09-cf09-416e-81eb-79e15497000d",
              "2429285e-9887-44a1-ae01-11c608bee60a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 10,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "6717211d-770e-4c72-82ab-c176fbbcc5bf",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\invoices\\downloadInvoice.enterprise.js",
        "file": "\\controllers\\test\\invoices\\downloadInvoice.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "d4eb4634-8437-4d73-a181-89c87f491712",
            "title": "Invoices",
            "fullFile": "C:\\work\\api\\controllers\\test\\invoices\\downloadInvoice.enterprise.js",
            "file": "\\controllers\\test\\invoices\\downloadInvoice.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "ef033ee7-30d1-4d6f-9b04-6a1971d9f807",
                "title": "invoice.downloadInvoice",
                "fullFile": "C:\\work\\api\\controllers\\test\\invoices\\downloadInvoice.enterprise.js",
                "file": "\\controllers\\test\\invoices\\downloadInvoice.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Invoices invoice.downloadInvoice \"before each\" hook",
                    "timedOut": false,
                    "duration": 63,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        _data = data;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d7f73713-3896-4776-a58e-76db08d743bc",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Invoices invoice.downloadInvoice \"after all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "done();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "33716e03-7895-45c2-a92c-7a2136a7bd8c",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get invoice by uid.",
                    "fullTitle": "Enterprise Invoices invoice.downloadInvoice Should get invoice by uid.",
                    "timedOut": false,
                    "duration": 846,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nsaveInvoices({\n    authToken: authToken,\n    braintree_customerId: _data.owner.braintree_customerId || \"\",\n    uid: _data.owner.uid || \"\"\n}, function() {\n    api.get(\"/enterprise/v1/user/account/invoices\")\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                var invoices = res.body.output;\n                var paramURL = apiURL.replace(\":invoice_uid\", invoices[0].uid);\n                api.get(paramURL)\n                    .set('authtoken', authToken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            true.should.equal(true);\n                            done();\n                        }\n                    });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e80679f7-6f8e-4f5c-9d5e-c24ddf3af71c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Admin should get organization invoice.",
                    "fullTitle": "Enterprise Invoices invoice.downloadInvoice Admin should get organization invoice.",
                    "timedOut": false,
                    "duration": 750,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nsaveInvoices({\n    authToken: authToken,\n    braintree_customerId: _data.organization_account.braintree_customerId || \"\",\n    uid: _data.organization_account.uid || \"\",\n    org_uid: org_uid\n}, function() {\n    api.get(\"/enterprise/v1/user/account/invoices\")\n        .set('org_uid', org_uid)\n        .set('authtoken', _data.admin.authtoken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                var invoices = res.body.output;\n                var paramURL = apiURL.replace(\":invoice_uid\", invoices[0].uid);\n                api.get(paramURL)\n                    .set('org_uid', org_uid)\n                    .set('authtoken', _data.admin.authtoken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            true.should.equal(true);\n                            done();\n                        }\n                    });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8a47524f-847d-47b3-bc46-721d28b8a5c4",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Billing manager should get organization invoice.",
                    "fullTitle": "Enterprise Invoices invoice.downloadInvoice Billing manager should get organization invoice.",
                    "timedOut": false,
                    "duration": 819,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nsaveInvoices({\n    authToken: authToken,\n    braintree_customerId: _data.organization_account.braintree_customerId || \"\",\n    uid: _data.organization_account.uid || \"\",\n    org_uid: org_uid\n}, function() {\n    api.get(\"/enterprise/v1/user/account/invoices\")\n        .set('org_uid', org_uid)\n        .set('authtoken', _data.billing_manager.authtoken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                var invoices = res.body.output;\n                var paramURL = apiURL.replace(\":invoice_uid\", invoices[0].uid);\n                api.get(paramURL)\n                    .set('org_uid', org_uid)\n                    .set('authtoken', _data.billing_manager.authtoken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            true.should.equal(true);\n                            done();\n                        }\n                    });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "49b90b8e-7868-4d27-9946-4aa9b8ba065f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Developer should not get organization invoice.",
                    "fullTitle": "Enterprise Invoices invoice.downloadInvoice Developer should not get organization invoice.",
                    "timedOut": false,
                    "duration": 98,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nsaveInvoices({\n    authToken: authToken,\n    braintree_customerId: _data.organization_account.braintree_customerId || \"\",\n    uid: _data.organization_account.uid || \"\",\n    org_uid: org_uid\n}, function() {\n    api.get(\"/enterprise/v1/user/account/invoices\")\n        .set('org_uid', org_uid)\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                var invoices = res.body.output;\n                var paramURL = apiURL.replace(\":invoice_uid\", invoices[0].uid);\n                api.get(paramURL)\n                    .set('org_uid', org_uid)\n                    .set('authtoken', _data.developer.authtoken)\n                    .expect(httpStatus.UNAUTHORIZED)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            res.body.error.message.should.equal(messageList.ORG_NO_ACCESS_TO_CHANGE_PLAN);\n                            done();\n                        }\n                    });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a01384c2-a3d4-4d8f-a290-35ed2f875453",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not get invoice by uid.",
                    "fullTitle": "Enterprise Invoices invoice.downloadInvoice Should not get invoice by uid.",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n//var paramURL = apiURL.replace(\":uid\", \"ABC\");\nvar paramURL = apiURL.replace(\":invoice_uid\", \"ABC\");\napi.get(paramURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.DOWNLOAD_INVOICE_ERROR);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a6d1df8f-e692-4744-b3dc-7a8e1fdb5145",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Invoices invoice.downloadInvoice Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar paramURL = apiURL.replace(\":invoice_uid\", \"ABC\");\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "90457d72-057e-46d2-84d4-fee1cf8a8516",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "e80679f7-6f8e-4f5c-9d5e-c24ddf3af71c",
                  "8a47524f-847d-47b3-bc46-721d28b8a5c4",
                  "49b90b8e-7868-4d27-9946-4aa9b8ba065f",
                  "a01384c2-a3d4-4d8f-a290-35ed2f875453",
                  "a6d1df8f-e692-4744-b3dc-7a8e1fdb5145",
                  "90457d72-057e-46d2-84d4-fee1cf8a8516"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 2531,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "b5aea819-f97c-40d2-a805-7f60ab23846e",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\invoices\\list.enterprise.js",
        "file": "\\controllers\\test\\invoices\\list.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "38ddfe54-a94d-4625-8db4-23aa7803ec43",
            "title": "Invoices",
            "fullFile": "C:\\work\\api\\controllers\\test\\invoices\\list.enterprise.js",
            "file": "\\controllers\\test\\invoices\\list.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "b1747aa7-416b-43a9-934c-c339733d47bd",
                "title": "invoice.list",
                "fullFile": "C:\\work\\api\\controllers\\test\\invoices\\list.enterprise.js",
                "file": "\\controllers\\test\\invoices\\list.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Invoices invoice.list \"before each\" hook",
                    "timedOut": false,
                    "duration": 143,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        _data = data;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6717234c-281b-4b91-817c-d4ce0700afd8",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Invoices invoice.list \"after all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "done();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "50014e25-f99f-4d08-9f28-b038010ce7f7",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Invoices invoice.list \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "339f53ca-a38a-48fb-963a-9a628657d4e6",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get list of invoices.",
                    "fullTitle": "Enterprise Invoices invoice.list Should get list of invoices.",
                    "timedOut": false,
                    "duration": 60,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nsaveInvoices({\n    authToken: authToken,\n    braintree_customerId: _data.owner.braintree_customerId || \"\",\n    uid: _data.owner.uid || \"\"\n}, function() {\n    api.get(apiURL)\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                var isValid = Array.isArray(res.body.output);\n                if (isValid) {\n                    _.each(res.body.output, function(item) {\n                        isValid = isValid && typeof(item._id) == \"undefined\" &&\n                            typeof(item.__v) == \"undefined\";\n                    });\n                }\n                isValid.should.equal(true);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "323581cf-eb62-41b1-b267-a876a9464ad5",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of organization invoices by Admin.",
                    "fullTitle": "Enterprise Invoices invoice.list Should get list of organization invoices by Admin.",
                    "timedOut": false,
                    "duration": 90,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nsaveInvoices({\n    authToken: authToken,\n    braintree_customerId: _data.organization_account.braintree_customerId || \"\",\n    uid: _data.organization_account.uid || \"\",\n    org_uid: org_uid\n}, function() {\n    api.get(\"/enterprise/v1/user/account/invoices\")\n        .set('org_uid', org_uid)\n        .set('authtoken', _data.admin.authtoken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                api.get(apiURL)\n                    .set('org_uid', org_uid)\n                    .set('authtoken', _data.admin.authtoken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            var isValid = Array.isArray(res.body.output);\n                            if (isValid) {\n                                _.each(res.body.output, function(item) {\n                                    isValid = isValid && typeof(item._id) == \"undefined\" &&\n                                        typeof(item.__v) == \"undefined\";\n                                });\n                            }\n                            isValid.should.equal(true);\n                            done();\n                        }\n                    });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "dc98dcb9-02e2-47cc-84a1-916968c853de",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Billing manager should get organization invoice.",
                    "fullTitle": "Enterprise Invoices invoice.list Billing manager should get organization invoice.",
                    "timedOut": false,
                    "duration": 89,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nsaveInvoices({\n    authToken: authToken,\n    braintree_customerId: _data.organization_account.braintree_customerId || \"\",\n    uid: _data.organization_account.uid || \"\",\n    org_uid: org_uid\n}, function() {\n    api.get(\"/enterprise/v1/user/account/invoices\")\n        .set('org_uid', org_uid)\n        .set('authtoken', _data.billing_manager.authtoken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                api.get(apiURL)\n                    .set('org_uid', org_uid)\n                    .set('authtoken', _data.billing_manager.authtoken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            var isValid = Array.isArray(res.body.output);\n                            if (isValid) {\n                                _.each(res.body.output, function(item) {\n                                    isValid = isValid && typeof(item._id) == \"undefined\" &&\n                                        typeof(item.__v) == \"undefined\";\n                                });\n                            }\n                            isValid.should.equal(true);\n                            done();\n                        }\n                    });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "184b519f-f844-40e6-9472-64b956e25a35",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Developer should not get organization invoice.",
                    "fullTitle": "Enterprise Invoices invoice.list Developer should not get organization invoice.",
                    "timedOut": false,
                    "duration": 80,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nsaveInvoices({\n    authToken: authToken,\n    braintree_customerId: _data.organization_account.braintree_customerId || \"\",\n    uid: _data.organization_account.uid || \"\",\n    org_uid: org_uid\n}, function() {\n    api.get(\"/enterprise/v1/user/account/invoices\")\n        .set('org_uid', org_uid)\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                api.get(apiURL)\n                    .set('org_uid', org_uid)\n                    .set('authtoken', _data.developer.authtoken)\n                    .expect(httpStatus.UNAUTHORIZED)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            res.body.error.message.should.equal(messageList.ORG_NO_ACCESS_TO_CHANGE_PLAN);\n                            done();\n                        }\n                    });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8394da2a-1220-4a19-9ee7-9e598eec02e8",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Invoices invoice.list Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "032502c1-305d-472a-9e9d-2d1188a2f3a5",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "323581cf-eb62-41b1-b267-a876a9464ad5",
                  "dc98dcb9-02e2-47cc-84a1-916968c853de",
                  "184b519f-f844-40e6-9472-64b956e25a35",
                  "8394da2a-1220-4a19-9ee7-9e598eec02e8",
                  "032502c1-305d-472a-9e9d-2d1188a2f3a5"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 323,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "df910e80-56f6-4168-94e6-a15d3cea76e8",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\invoices\\searchByUid.enterprise.js",
        "file": "\\controllers\\test\\invoices\\searchByUid.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "54564d9d-b8ac-4383-94cb-7f66a427cb0c",
            "title": "Invoices",
            "fullFile": "C:\\work\\api\\controllers\\test\\invoices\\searchByUid.enterprise.js",
            "file": "\\controllers\\test\\invoices\\searchByUid.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "a48353bf-289d-4566-be0e-9e2485726a65",
                "title": "invoice.searchByUid",
                "fullFile": "C:\\work\\api\\controllers\\test\\invoices\\searchByUid.enterprise.js",
                "file": "\\controllers\\test\\invoices\\searchByUid.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Invoices invoice.searchByUid \"before each\" hook",
                    "timedOut": false,
                    "duration": 54,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        _data = data;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2eb65acb-dd9f-4e30-b5ca-0d6f8323326f",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Invoices invoice.searchByUid \"after all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "done();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2556ffcd-a0ec-4d5f-8075-9434136890db",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get invoice by uid.",
                    "fullTitle": "Enterprise Invoices invoice.searchByUid Should get invoice by uid.",
                    "timedOut": false,
                    "duration": 68,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nsaveInvoices({\n    authToken: authToken,\n    braintree_customerId: _data.owner.braintree_customerId || \"\",\n    uid: _data.owner.uid || \"\"\n}, function() {\n    api.get(\"/enterprise/v1/user/account/invoices\")\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                var invoices = res.body.output;\n                var paramURL = apiURL.replace(\":invoice_uid\", invoices[0].uid);\n                api.get(paramURL)\n                    .set('authtoken', authToken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            var isValid = res.body.output.uid == invoices[0].uid &&\n                                typeof(res.body.output._id) == \"undefined\" &&\n                                typeof(res.body.output.__v) == \"undefined\";\n                            isValid.should.equal(true);\n                            done();\n                        }\n                    });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "391cd32b-3765-4d00-b2ee-196f3984cf22",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get invoice of organization by Admin.",
                    "fullTitle": "Enterprise Invoices invoice.searchByUid Should get invoice of organization by Admin.",
                    "timedOut": false,
                    "duration": 83,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nsaveInvoices({\n    authToken: authToken,\n    braintree_customerId: _data.organization_account.braintree_customerId || \"\",\n    uid: _data.organization_account.uid || \"\",\n    org_uid: org_uid\n}, function() {\n    api.get(\"/enterprise/v1/user/account/invoices\")\n        .set('org_uid', org_uid)\n        .set('authtoken', _data.admin.authtoken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                var invoices = res.body.output;\n                var paramURL = apiURL.replace(\":invoice_uid\", invoices[0].uid);\n                api.get(paramURL)\n                    .set('org_uid', org_uid)\n                    .set('authtoken', _data.admin.authtoken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            var isValid = res.body.output.uid == invoices[0].uid &&\n                                typeof(res.body.output._id) == \"undefined\" &&\n                                typeof(res.body.output.__v) == \"undefined\";\n                            isValid.should.equal(true);\n                            done();\n                        }\n                    });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8cffd7de-1515-4e6c-9f4b-ce54324cd084",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get invoice of organization by Billing Manager.",
                    "fullTitle": "Enterprise Invoices invoice.searchByUid Should get invoice of organization by Billing Manager.",
                    "timedOut": false,
                    "duration": 84,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nsaveInvoices({\n    authToken: authToken,\n    braintree_customerId: _data.organization_account.braintree_customerId || \"\",\n    uid: _data.organization_account.uid || \"\",\n    org_uid: org_uid\n}, function() {\n    api.get(\"/enterprise/v1/user/account/invoices\")\n        .set('org_uid', org_uid)\n        .set('authtoken', _data.billing_manager.authtoken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                var invoices = res.body.output;\n                var paramURL = apiURL.replace(\":invoice_uid\", invoices[0].uid);\n                api.get(paramURL)\n                    .set('org_uid', org_uid)\n                    .set('authtoken', _data.billing_manager.authtoken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            var isValid = res.body.output.uid == invoices[0].uid &&\n                                typeof(res.body.output._id) == \"undefined\" &&\n                                typeof(res.body.output.__v) == \"undefined\";\n                            isValid.should.equal(true);\n                            done();\n                        }\n                    });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "febfd6f5-d2b6-4b3b-a940-decb652ea791",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get invoice of organization by Developer.",
                    "fullTitle": "Enterprise Invoices invoice.searchByUid Should get invoice of organization by Developer.",
                    "timedOut": false,
                    "duration": 82,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nsaveInvoices({\n    authToken: authToken,\n    braintree_customerId: _data.organization_account.braintree_customerId || \"\",\n    uid: _data.organization_account.uid || \"\",\n    org_uid: org_uid\n}, function() {\n    api.get(\"/enterprise/v1/user/account/invoices\")\n        .set('org_uid', org_uid)\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                var invoices = res.body.output;\n                var paramURL = apiURL.replace(\":invoice_uid\", invoices[0].uid);\n                api.get(paramURL)\n                    .set('org_uid', org_uid)\n                    .set('authtoken', _data.developer.authtoken)\n                    .expect(httpStatus.UNAUTHORIZED)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            res.body.error.message.should.equal(messageList.ORG_NO_ACCESS_TO_CHANGE_PLAN);\n                            done();\n                        }\n                    });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a21cd9a6-e04c-4067-b9db-b69789f3da8c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not get invoice by uid.",
                    "fullTitle": "Enterprise Invoices invoice.searchByUid Should not get invoice by uid.",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n//var paramURL = apiURL.replace(\":uid\", \"ABC\");\nvar paramURL = apiURL.replace(\":invoice_uid\", \"ABC\");\napi.get(paramURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.INVOICE_NOT_FOUND);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3a07853f-1122-4065-8e56-62ff06b77531",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Invoices invoice.searchByUid Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar paramURL = apiURL.replace(\":invoice_uid\", \"ABC\");\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "973b07e0-e318-44b1-8759-625efd922ecf",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "391cd32b-3765-4d00-b2ee-196f3984cf22",
                  "8cffd7de-1515-4e6c-9f4b-ce54324cd084",
                  "febfd6f5-d2b6-4b3b-a940-decb652ea791",
                  "a21cd9a6-e04c-4067-b9db-b69789f3da8c",
                  "3a07853f-1122-4065-8e56-62ff06b77531",
                  "973b07e0-e318-44b1-8759-625efd922ecf"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 330,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "69dfa7ec-f689-43fa-bf59-2f3a70b66710",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\logs\\getOldLogs.enterprise.js",
        "file": "\\controllers\\test\\logs\\getOldLogs.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "976aa93a-c9c9-4dc2-901c-441895d2ac8a",
            "title": "UserLogs",
            "fullFile": "C:\\work\\api\\controllers\\test\\logs\\getOldLogs.enterprise.js",
            "file": "\\controllers\\test\\logs\\getOldLogs.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "bf17a17c-e947-4ed0-a202-10fd61ab4903",
                "title": "logs.getOldLogs",
                "fullFile": "C:\\work\\api\\controllers\\test\\logs\\getOldLogs.enterprise.js",
                "file": "\\controllers\\test\\logs\\getOldLogs.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise UserLogs logs.getOldLogs \"before each\" hook",
                    "timedOut": false,
                    "duration": 5066,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.createFlowUser({}, function(error, user) {\n        if (error) {\n            done(error);\n        } else {\n            authToken = user.authtoken;\n            token = user.activation_token;\n            _id = user._id;\n            user_uid = user.uid;\n            saveUserLogs({\n                    authtoken: authToken,\n                    user_uid: user_uid\n                },\n                function(error, userLogs) {\n                    savedUserLogs = userLogs;\n                    done();\n                });\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1557d8d2-d69b-4d6d-a896-c1352d3e23f5",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise UserLogs logs.getOldLogs \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.Log.remove({ flow_name: new RegExp('^utest_cases_', \"i\") }, function(error, user) {\n    if (error) {\n        done(error);\n    } else {\n        done();\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7a660b41-6dd8-41d4-bd1e-76ffa095244a",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get list of user logs.",
                    "fullTitle": "Enterprise UserLogs logs.getOldLogs Should get list of user logs.",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.objects.should.be.instanceOf(Array);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ef5ff7a4-3ebb-4ec8-ba28-0de6e3d3fef9",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get limited list of user logs based on skip/limit.",
                    "fullTitle": "Enterprise UserLogs logs.getOldLogs Should get limited list of user logs based on skip/limit.",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar skipLimitURL = apiURL + \"?limit=2&skip=2\";\napi.get(skipLimitURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var validOutput = false;\n            if (res.body.output.count == 5) {\n                validOutput = res.body.output.objects[0].uid == savedUserLogs[2].body.output.uid &&\n                    res.body.output.objects[1].uid == savedUserLogs[1].body.output.uid;\n            }\n            if (validOutput == false) {\n                console.log({\n                    objects: res.body.output.objects,\n                    savedUserLogs: savedUserLogs\n                });\n                logger.error({\n                    objects: res.body.output.objects,\n                    savedUserLogs: savedUserLogs\n                });\n            }\n            validOutput.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "84c38833-41e1-4472-b7f6-ac5a881297c5",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise UserLogs logs.getOldLogs Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "099f9936-4507-4e6c-86d9-5603a321446b",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "ef5ff7a4-3ebb-4ec8-ba28-0de6e3d3fef9",
                  "84c38833-41e1-4472-b7f6-ac5a881297c5",
                  "099f9936-4507-4e6c-86d9-5603a321446b"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 24,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "14588b8e-977e-4924-96ff-ba0218420bd4",
        "title": "Express",
        "fullFile": "C:\\work\\api\\controllers\\test\\logs\\getOldLogs.express.js",
        "file": "\\controllers\\test\\logs\\getOldLogs.express.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "d82efc0d-3de0-48b8-8262-66f34a5c5d2a",
            "title": "UserLogs",
            "fullFile": "C:\\work\\api\\controllers\\test\\logs\\getOldLogs.express.js",
            "file": "\\controllers\\test\\logs\\getOldLogs.express.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "d2685e26-2d5f-46b2-91ba-3a8911fc24eb",
                "title": "logs.getOldLogs",
                "fullFile": "C:\\work\\api\\controllers\\test\\logs\\getOldLogs.express.js",
                "file": "\\controllers\\test\\logs\\getOldLogs.express.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Express UserLogs logs.getOldLogs \"before all\" hook",
                    "timedOut": false,
                    "duration": 5064,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.createFlowUser({\n        express: true\n    }, function(error, user) {\n        if (error) {\n            done(error);\n        } else {\n            authToken = user.authtoken;\n            token = user.activation_token;\n            _id = user._id;\n            user_uid = user.uid;\n            saveUserLogs({\n                    authtoken: authToken,\n                    user_uid: user_uid\n                },\n                function(error, userLogs) {\n                    savedUserLogs = userLogs;\n                    done();\n                });\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "83a94eca-8dbe-4819-8f6b-daaaebe17f0f",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Express UserLogs logs.getOldLogs \"after all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.Log.remove({ flow_name: new RegExp('^utest_cases_', \"i\") }, function(error, user) {\n    if (error) {\n        done(error);\n    } else {\n        done();\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ecfa103b-6ada-46e6-821a-145ba1f45e9c",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get list of user logs.",
                    "fullTitle": "Express UserLogs logs.getOldLogs Should get list of user logs.",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.objects.should.be.instanceOf(Array);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0565783d-d580-4e89-81b4-c4065e9c29a3",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get limited list of user logs based on skip/limit.",
                    "fullTitle": "Express UserLogs logs.getOldLogs Should get limited list of user logs based on skip/limit.",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar skipLimitURL = apiURL + \"?limit=2&skip=2\";\napi.get(skipLimitURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var validOutput = false;\n            if (res.body.output.count == 5) {\n                validOutput = res.body.output.objects[0].uid == savedUserLogs[2].body.output.uid &&\n                    res.body.output.objects[1].uid == savedUserLogs[1].body.output.uid;\n            }\n            if (validOutput == false) {\n                console.log({\n                    objects: res.body.output.objects,\n                    savedUserLogs: savedUserLogs\n                });\n                logger.error({\n                    objects: res.body.output.objects,\n                    savedUserLogs: savedUserLogs\n                });\n            }\n            validOutput.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4b624675-e41f-4823-8122-8b41c494e2da",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Express UserLogs logs.getOldLogs Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cc9d345c-1503-478c-8f38-c90fc7e329e6",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "0565783d-d580-4e89-81b4-c4065e9c29a3",
                  "4b624675-e41f-4823-8122-8b41c494e2da",
                  "cc9d345c-1503-478c-8f38-c90fc7e329e6"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 25,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "ca6bdb61-ef7e-48ad-8868-241327b661df",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\metrics\\getCreditsMetrics.enterprise.js",
        "file": "\\controllers\\test\\metrics\\getCreditsMetrics.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "f7d09049-a178-4b73-bc26-15a1d9b04b50",
            "title": "Metrics.GetCreditsMetrics",
            "fullFile": "C:\\work\\api\\controllers\\test\\metrics\\getCreditsMetrics.enterprise.js",
            "file": "\\controllers\\test\\metrics\\getCreditsMetrics.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Enterprise Metrics.GetCreditsMetrics \"before each\" hook",
                "timedOut": false,
                "duration": 231,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    async.waterfall([\n        function(cbk) {\n            testCollection.organizationRemoveRecords({}, function() {\n                testCollection.createFlowUser({}, function(error, user) {\n                    if (error) {\n                        done(error);\n                    } else {\n                        cbk(null, user);\n                    }\n                });\n            });\n        },\n        function(user, cbk) {\n            dummyUser = user;\n            saveBillEntries(\n                _.extend(getImmutable(billBody), {\n                    authtoken: dummyUser.authtoken\n                }),\n                function(error, bills) {\n                    savedBills = bills;\n                    cbk(null, savedBills);\n                });\n        }\n    ], function(err, results) {\n        if (err) {\n            done(err);\n        } else {\n            done();\n        }\n    })\n});",
                "err": {},
                "isRoot": false,
                "uuid": "aadd5424-4369-40ed-8e97-7b32c97e9657",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after each\" hook",
                "fullTitle": "Enterprise Metrics.GetCreditsMetrics \"after each\" hook",
                "timedOut": false,
                "duration": 2,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "953d0a09-3f4d-4712-94dd-cb2f1ac12e8e",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Metrics.GetCreditsMetrics Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "52554db1-aa63-46ed-b2e0-75d17488bc97",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of credit metrics last month from current date if date not provided.",
                "fullTitle": "Enterprise Metrics.GetCreditsMetrics Should get list of credit metrics last month from current date if date not provided.",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output).to.be.instanceof(Array);\n            expect(_.first(res.body.output)).to.have.any.keys(['total_credits', 'date']);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "02a58261-5b94-45b7-8eef-1ccdcdaec5d6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of credit metrics if particular date is provided.",
                "fullTitle": "Enterprise Metrics.GetCreditsMetrics Should get list of credit metrics if particular date is provided.",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nupdated_at = (new Date()).toISOString();\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send({ startDate: created_at, endDate: updated_at })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output).to.be.instanceof(Array);\n            expect(_.first(res.body.output)).to.have.any.keys(['total_credits', 'date']);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "67dd6377-4de9-455e-b449-b61e7ee64621",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "52554db1-aa63-46ed-b2e0-75d17488bc97",
              "02a58261-5b94-45b7-8eef-1ccdcdaec5d6",
              "67dd6377-4de9-455e-b449-b61e7ee64621"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 30,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "2283f481-c0f5-4ff8-9f5c-c4eab7325fb4",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\metrics\\getCreditsMetricsOrg.enterprise.js",
        "file": "\\controllers\\test\\metrics\\getCreditsMetricsOrg.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "2bf84a16-730c-4100-815a-57104afb8c13",
            "title": "Metrics.GetCreditsMetrics",
            "fullFile": "C:\\work\\api\\controllers\\test\\metrics\\getCreditsMetricsOrg.enterprise.js",
            "file": "\\controllers\\test\\metrics\\getCreditsMetricsOrg.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Enterprise Metrics.GetCreditsMetrics \"before each\" hook",
                "timedOut": false,
                "duration": 300,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    async.waterfall([\n        function(cbk) {\n            testCollection.organizationRemoveRecords({}, function() {\n                testCollection.organizationRecordsEntry({}, function(data) {\n                    authToken = data.owner.authtoken;\n                    org_uid = data.organization.uid;\n                    cbk(null, data);\n                });\n            });\n        },\n        function(res, cbk) {\n            saveBillEntries(\n                _.extend(getImmutable(billBody), {\n                    authtoken: authToken\n                }),\n                function(error, bills) {\n                    savedBills = bills;\n                    cbk(null, savedBills);\n                });\n        }\n    ], function(err, results) {\n        if (err) {\n            done(err);\n        } else {\n            done();\n        }\n    })\n});",
                "err": {},
                "isRoot": false,
                "uuid": "8318ce38-db89-42bc-a698-a0a5cd56cb5e",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after each\" hook",
                "fullTitle": "Enterprise Metrics.GetCreditsMetrics \"after each\" hook",
                "timedOut": false,
                "duration": 3,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "54f171b5-eff5-438e-b031-7f52bf0d4b3d",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Metrics.GetCreditsMetrics Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('org_uid', org_uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "6e56da13-25b1-4580-86ce-dfe77062a3eb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of credit metrics last month from current date if date not provided.",
                "fullTitle": "Enterprise Metrics.GetCreditsMetrics Should get list of credit metrics last month from current date if date not provided.",
                "timedOut": false,
                "duration": 19,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output).to.be.instanceof(Array);\n            expect(_.first(res.body.output)).to.have.any.keys(['total_credits', 'date']);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "9d3628db-fe26-4c18-9354-b8de54c4d267",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of credit metrics if particular date is provided.",
                "fullTitle": "Enterprise Metrics.GetCreditsMetrics Should get list of credit metrics if particular date is provided.",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nupdated_at = (new Date()).toISOString();\napi.post(apiURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .send({ startDate: created_at, endDate: updated_at })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output).to.be.instanceof(Array);\n            expect(_.first(res.body.output)).to.have.any.keys(['total_credits', 'date']);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "697579df-b0bb-44cc-90fd-a9b314a5c736",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "6e56da13-25b1-4580-86ce-dfe77062a3eb",
              "9d3628db-fe26-4c18-9354-b8de54c4d267",
              "697579df-b0bb-44cc-90fd-a9b314a5c736"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 41,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "2ff74364-31d3-4c26-b47b-5c4ecfd4d9c6",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\metrics\\getFlowDetailsMetrics.enterprise.js",
        "file": "\\controllers\\test\\metrics\\getFlowDetailsMetrics.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "300d682b-ca91-435a-afc3-9f1336a0bb96",
            "title": "Metrics.GetFlowDetailsMetrics",
            "fullFile": "C:\\work\\api\\controllers\\test\\metrics\\getFlowDetailsMetrics.enterprise.js",
            "file": "\\controllers\\test\\metrics\\getFlowDetailsMetrics.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Enterprise Metrics.GetFlowDetailsMetrics \"before each\" hook",
                "timedOut": false,
                "duration": 231,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    async.waterfall([\n        function(cbk) {\n            testCollection.organizationRemoveRecords({}, function() {\n                testCollection.createFlowUser({}, function(error, user) {\n                    if (error) {\n                        done(error);\n                    } else {\n                        authToken = user.authtoken;\n                        token = user.activation_token;\n                        _id = user._id;\n                        uid = user.uid;\n                        cbk(null, user);\n                    }\n                });\n            });\n        },\n        function(user, cbk) {\n            dummyUser = user;\n            saveBillEntries(\n                _.extend(getImmutable(billBody), {\n                    authtoken: dummyUser.authtoken\n                }),\n                function(error, bills) {\n                    savedBills = bills;\n                    cbk(null, savedBills);\n                });\n        }\n    ], function(err, results) {\n        if (err) {\n            done(err);\n        } else {\n            done();\n        }\n    })\n});",
                "err": {},
                "isRoot": false,
                "uuid": "dcf8e3b9-275b-4734-ab26-cc4d45812224",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after each\" hook",
                "fullTitle": "Enterprise Metrics.GetFlowDetailsMetrics \"after each\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "ab65d9d6-0e01-42fc-b6df-d68d0170064e",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Metrics.GetFlowDetailsMetrics Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL + flowUid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "3af1570e-fc75-4a4c-bb03-c7b6b1d8585a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of flow details metrics if valid flow uid provided.",
                "fullTitle": "Enterprise Metrics.GetFlowDetailsMetrics Should get list of flow details metrics if valid flow uid provided.",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL + flowUid)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output).to.be.instanceof(Array);\n            expect(_.first(res.body.output)).to.have.any.keys(_.keys(billBody));\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "c7f52f7f-fe79-47cd-bf0e-f638a3a74ee1",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "3af1570e-fc75-4a4c-bb03-c7b6b1d8585a",
              "c7f52f7f-fe79-47cd-bf0e-f638a3a74ee1"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 14,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "8083f32c-e4a6-4c44-80eb-8253084352c4",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\metrics\\getFlowDetailsMetricsOrg.enterprise.js",
        "file": "\\controllers\\test\\metrics\\getFlowDetailsMetricsOrg.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "d4b8fd58-466b-444a-913e-2ab6b388190c",
            "title": "Metrics.GetFlowDetailsMetricsOrg",
            "fullFile": "C:\\work\\api\\controllers\\test\\metrics\\getFlowDetailsMetricsOrg.enterprise.js",
            "file": "\\controllers\\test\\metrics\\getFlowDetailsMetricsOrg.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Enterprise Metrics.GetFlowDetailsMetricsOrg \"before each\" hook",
                "timedOut": false,
                "duration": 295,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    async.waterfall([\n        function(cbk) {\n            testCollection.organizationRemoveRecords({}, function() {\n                testCollection.organizationRecordsEntry({}, function(data) {\n                    authToken = data.owner.authtoken;\n                    org_uid = data.organization.uid;\n                    cbk(null, data);\n                });\n            });\n        },\n        function(res, cbk) {\n            saveBillEntries(\n                _.extend(getImmutable(billBody), {\n                    authtoken: authToken\n                }),\n                function(error, bills) {\n                    savedBills = bills;\n                    cbk(null, savedBills);\n                });\n        }\n    ], function(err, results) {\n        if (err) {\n            done(err);\n        } else {\n            done();\n        }\n    })\n});",
                "err": {},
                "isRoot": false,
                "uuid": "8f14bd95-e771-4a87-9ab2-9ac09206214b",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after each\" hook",
                "fullTitle": "Enterprise Metrics.GetFlowDetailsMetricsOrg \"after each\" hook",
                "timedOut": false,
                "duration": 2,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "f9df4b7b-7c1f-4339-857d-9754883cc4be",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Metrics.GetFlowDetailsMetricsOrg Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL + flowUid)\n    .set('org_uid', org_uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "95dd0828-a47f-417b-8c9f-a3172707c4db",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of flow details metrics if valid flow uid provided.",
                "fullTitle": "Enterprise Metrics.GetFlowDetailsMetricsOrg Should get list of flow details metrics if valid flow uid provided.",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL + flowUid)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output).to.be.instanceof(Array);\n            expect(_.first(res.body.output)).to.have.any.keys(_.keys(billBody));\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "b7c4294e-0feb-41cc-bd5d-80a39f111cba",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "95dd0828-a47f-417b-8c9f-a3172707c4db",
              "b7c4294e-0feb-41cc-bd5d-80a39f111cba"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 19,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "c0875632-3ae9-4ae2-bc78-6304bae844e8",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\metrics\\getFlowsMetrics.enterprise.js",
        "file": "\\controllers\\test\\metrics\\getFlowsMetrics.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "5bd67a94-4909-43a6-bc4b-5f9a772da138",
            "title": "Metrics.GetFlowsMetrics",
            "fullFile": "C:\\work\\api\\controllers\\test\\metrics\\getFlowsMetrics.enterprise.js",
            "file": "\\controllers\\test\\metrics\\getFlowsMetrics.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Enterprise Metrics.GetFlowsMetrics \"before each\" hook",
                "timedOut": false,
                "duration": 232,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    async.waterfall([\n        function(cbk) {\n            testCollection.organizationRemoveRecords({}, function() {\n                testCollection.createFlowUser({\n                    email: testData.testRegistrationBody.email\n                }, function(error, user) {\n                    if (error) {\n                        done(error);\n                    } else {\n                        authToken = user.authtoken;\n                        token = user.activation_token;\n                        _id = user._id;\n                        uid = user.uid;\n                        cbk(null, user);\n                    }\n                });\n            });\n        },\n        function(user, cbk) {\n            authToken = user.authtoken;\n            saveBillEntries(\n                _.extend(getImmutable(billBody), {\n                    authtoken: authToken\n                }),\n                function(error, bills) {\n                    savedBills = bills;\n                    cbk(null, savedBills);\n                });\n        }\n    ], function(err, results) {\n        if (err) {\n            done(err);\n        } else {\n            done();\n        }\n    });\n});",
                "err": {},
                "isRoot": false,
                "uuid": "2eb9cadc-fe79-4783-b1ce-dc8f99e0274e",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Metrics.GetFlowsMetrics \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n_models.Bill.remove({}, function(err) {\n    done(err);\n});",
                "err": {},
                "isRoot": false,
                "uuid": "cabe92a8-ab3e-4722-99ad-ff5475ce12df",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Metrics.GetFlowsMetrics Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "9d13f62b-1aea-49fe-b0a3-0415e3cb26f3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of flow metrics last month from current date if date not provided.",
                "fullTitle": "Enterprise Metrics.GetFlowsMetrics Should get list of flow metrics last month from current date if date not provided.",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output).to.be.instanceof(Array);\n            expect(_.first(res.body.output)).to.have.any.keys(keySet);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "b41f85e1-f07b-42f9-a0bc-a129ff87c89f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of flow metrics if particular date is provided.",
                "fullTitle": "Enterprise Metrics.GetFlowsMetrics Should get list of flow metrics if particular date is provided.",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nupdated_at = (new Date()).toISOString();\napi.post(apiURL)\n    .set('authtoken', authToken)\n    .send({ startDate: created_at, endDate: updated_at })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output).to.be.instanceof(Array);\n            expect(_.first(res.body.output)).to.have.any.keys(keySet);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "dc50049b-1cf8-41a4-be0b-c92646f2412e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9d13f62b-1aea-49fe-b0a3-0415e3cb26f3",
              "b41f85e1-f07b-42f9-a0bc-a129ff87c89f",
              "dc50049b-1cf8-41a4-be0b-c92646f2412e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 26,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "9079b4a6-2142-437d-9bbb-57347f9ef366",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\metrics\\getFlowsMetricsOrg.enterprise.js",
        "file": "\\controllers\\test\\metrics\\getFlowsMetricsOrg.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "5a7cf906-bc0e-4c62-8576-13ac8544295e",
            "title": "Metrics.GetFlowsMetricsOrg",
            "fullFile": "C:\\work\\api\\controllers\\test\\metrics\\getFlowsMetricsOrg.enterprise.js",
            "file": "\\controllers\\test\\metrics\\getFlowsMetricsOrg.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Enterprise Metrics.GetFlowsMetricsOrg \"before each\" hook",
                "timedOut": false,
                "duration": 296,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.waterfall([\n    function(cbk) {\n        testCollection.organizationRemoveRecords({}, function() {\n            testCollection.organizationRecordsEntry({}, function(data) {\n                authToken = data.owner.authtoken;\n                org_uid = data.organization.uid;\n                cbk(null, data);\n            });\n        });\n    },\n    function(res, cbk) {\n        saveBillEntries(\n            _.extend(getImmutable(billBody), {\n                authtoken: authToken\n            }),\n            function(error, bills) {\n                savedBills = bills;\n                cbk(null, savedBills);\n            });\n    }\n], function(err, results) {\n    if (err) {\n        done(err);\n    } else {\n        done();\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "3bd84fbf-98ba-44a8-ab9e-149535bd0e37",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Metrics.GetFlowsMetricsOrg \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n_models.Bill.remove({}, function(err) {\n    done(err);\n});",
                "err": {},
                "isRoot": false,
                "uuid": "0a81443c-7749-40eb-b164-975b38622539",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Metrics.GetFlowsMetricsOrg Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set(\"org_uid\", org_uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "7f66eaa5-859c-4d7a-8aab-2b26f55e6984",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of flow metrics last month from current date if date not provided.",
                "fullTitle": "Enterprise Metrics.GetFlowsMetricsOrg Should get list of flow metrics last month from current date if date not provided.",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set(\"org_uid\", org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output).to.be.instanceof(Array);\n            expect(_.first(res.body.output)).to.have.any.keys(keySet);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "c0b8d2cd-64c7-47ce-82cc-1bc18f650a6f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of flow metrics if particular date is provided.",
                "fullTitle": "Enterprise Metrics.GetFlowsMetricsOrg Should get list of flow metrics if particular date is provided.",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nupdated_at = (new Date()).toISOString();\napi.post(apiURL)\n    .set(\"org_uid\", org_uid)\n    .set('authtoken', authToken)\n    .send({ startDate: created_at, endDate: updated_at })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output).to.be.instanceof(Array);\n            expect(_.first(res.body.output)).to.have.any.keys(keySet);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "69df13c2-c141-4d7d-9773-823ab7910cd6",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "7f66eaa5-859c-4d7a-8aab-2b26f55e6984",
              "c0b8d2cd-64c7-47ce-82cc-1bc18f650a6f",
              "69df13c2-c141-4d7d-9773-823ab7910cd6"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 38,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "3c427fe0-113e-4b77-8294-52f0339ded0f",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\metrics\\getGraphData.enterprise.js",
        "file": "\\controllers\\test\\metrics\\getGraphData.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "9360c277-57d1-4c23-b315-6b064273ba2b",
            "title": "Metrics.getGraphData",
            "fullFile": "C:\\work\\api\\controllers\\test\\metrics\\getGraphData.enterprise.js",
            "file": "\\controllers\\test\\metrics\\getGraphData.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Enterprise Metrics.getGraphData \"before each\" hook",
                "timedOut": false,
                "duration": 7168,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    async.waterfall([\n        function(cbk) {\n            _models.User.remove({}, function(error, user) {\n                commonMock.setSignUpMocks(httpmock, \"enterprise\");\n                api.post(\"/enterprise/v1/signup\")\n                    .send(testData.testRegistrationBody)\n                    .expect(httpStatus.CREATED)\n                    .end(function(err, res) {\n                        authToken = (((res || {}).body || {}).output || {}).authtoken || \"\";\n                        api.get(\"/enterprise/v1/user\")\n                            .set('authtoken', authToken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                env_uid = (((res || {}).body || {}).output || {}).env_uid;\n                                user_uid = (((res || {}).body || {}).output || {}).uid;\n                                cbk(err, res);\n                            });\n                    });\n            });\n        },\n        function(res, cbk) {\n            saveBillEntries({\n                    done: done,\n                    authtoken: authToken\n                },\n                function(error, bills) {\n                    savedBills = bills;\n                    cbk(null, savedBills);\n                });\n        },\n        function(res, cbk) {\n            saveUserTriggers({\n                    done: done,\n                    authtoken: authToken\n                },\n                function(error, bills) {\n                    savedBills = bills;\n                    cbk(null, savedBills);\n                });\n        },\n        function(res, cbk) {\n            saveUserFlows({\n                    done: done,\n                    authtoken: authToken\n                },\n                function(error, userFlows) {\n                    cbk(null, userFlows);\n                });\n        }\n    ], function(err, results) {\n        done();\n    });\n});",
                "err": {},
                "isRoot": false,
                "uuid": "632e619c-ffda-4689-8f29-b0fe6ee605de",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Metrics.getGraphData \"after all\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ndone();",
                "err": {},
                "isRoot": false,
                "uuid": "ff9219ed-c7b0-4d8e-b5c0-38f46082f45a",
                "isHook": true,
                "skipped": false
              },
              {
                "title": "\"after each\" hook",
                "fullTitle": "Enterprise Metrics.getGraphData \"after each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "httpmock.cleanAll();\ndone();",
                "err": {},
                "isRoot": false,
                "uuid": "b8654e29-6d0b-436b-a059-8a059af4db1d",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should get type bill data.",
                "fullTitle": "Enterprise Metrics.getGraphData Should get type bill data.",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar billURL = apiURL + \"?type=bill\";\napi.get(billURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //var isValid = res.body.output[0][0] == currentDate &&\n            //    res.body.output[1][0] == 10;\n            (res.body.output[1][0] == 10).should.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "7ade11a4-640b-4498-b64d-ff42ad34dd2a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get type bill data based on daily filter.",
                "fullTitle": "Enterprise Metrics.getGraphData Should get type bill data based on daily filter.",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar billURL = apiURL + \"?type=bill&filter=daily\";\napi.get(billURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //var isValid = res.body.output[0][0] == currentDate &&\n            //    res.body.output[1][0] == 10;\n            (res.body.output[1][0] == 10).should.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "9def5531-a780-42b2-9e93-dcd7f5251f95",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get type bill data based on monthly filter.",
                "fullTitle": "Enterprise Metrics.getGraphData Should get type bill data based on monthly filter.",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar billURL = apiURL + \"?type=bill&filter=monthly\";\napi.get(billURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //var isValid = res.body.output[0][0] == currentMonthFormat &&\n            //    res.body.output[1][0] == 10;\n            (res.body.output[1][0] == 10).should.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "ddc660e5-e776-40a9-889b-632e9303a796",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get type bill data based on yearly filter.",
                "fullTitle": "Enterprise Metrics.getGraphData Should get type bill data based on yearly filter.",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar billURL = apiURL + \"?type=bill&filter=weekly\";\napi.get(billURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //var isValid = res.body.output[0][0] == currentWeekFormat &&\n            //    res.body.output[1][0] == 10;\n            (res.body.output[1][0] == 10).should.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "9f4304e0-4d41-4de9-bcfb-fae70543339c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get type trigger data.",
                "fullTitle": "Enterprise Metrics.getGraphData Should get type trigger data.",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar triggerURL = apiURL + \"?type=trigger\";\napi.get(triggerURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //var isValid = res.body.output[0][0] == currentDate &&\n            //    res.body.output[1][0] == 10;\n            (res.body.output[1][0] == 10).should.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "b238a31c-5de7-4288-a7af-776516220bc7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get type trigger data based on daily filter.",
                "fullTitle": "Enterprise Metrics.getGraphData Should get type trigger data based on daily filter.",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar triggerURL = apiURL + \"?type=trigger&filter=daily\";\napi.get(triggerURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //var isValid = res.body.output[0][0] == currentDate &&\n            //    res.body.output[1][0] == 10;\n            (res.body.output[1][0] == 10).should.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "0bf4adbc-9931-43b8-8576-61f0cef02410",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get type trigger data based on monthly filter.",
                "fullTitle": "Enterprise Metrics.getGraphData Should get type trigger data based on monthly filter.",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar triggerURL = apiURL + \"?type=trigger&filter=monthly\";\napi.get(triggerURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //var isValid = res.body.output[0][0] == currentMonthFormat &&\n            //    res.body.output[1][0] == 10;\n            (res.body.output[1][0] == 10).should.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "9f8264a8-6df5-4b9d-89b8-3b07cf15f886",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get type trigger data based on weekly filter.",
                "fullTitle": "Enterprise Metrics.getGraphData Should get type trigger data based on weekly filter.",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar triggerURL = apiURL + \"?type=trigger&filter=weekly\";\napi.get(triggerURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //var isValid = res.body.output[0][0] == currentWeekFormat &&\n            //    res.body.output[1][0] == 10;\n            (res.body.output[1][0] == 10).should.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "a6e1138d-bc97-4712-b483-ed189adfb5e3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get type flowscreated data.",
                "fullTitle": "Enterprise Metrics.getGraphData Should get type flowscreated data.",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar flowURL = apiURL + \"?type=flowscreated\";\napi.get(flowURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //var isValid = res.body.output[0][0] == currentDate &&\n            //    res.body.output[1][0] >= 10;\n            (res.body.output[1][0] >= 10).should.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "0085f03c-279f-4a6b-998b-ecc1e72131e8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get type flowscreated data based on daily filter.",
                "fullTitle": "Enterprise Metrics.getGraphData Should get type flowscreated data based on daily filter.",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar flowURL = apiURL + \"?type=flowscreated&filter=daily\";\napi.get(flowURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //var isValid = res.body.output[0][0] == currentDate &&\n            //    res.body.output[1][0] >= 10;\n            (res.body.output[1][0] >= 10).should.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "fa4e88e8-e9d3-4e17-a98f-6d475841c1a4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get type flowscreated data based on monthly filter.",
                "fullTitle": "Enterprise Metrics.getGraphData Should get type flowscreated data based on monthly filter.",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar flowURL = apiURL + \"?type=flowscreated&filter=monthly\";\napi.get(flowURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //var isValid = res.body.output[0][0] == currentMonthFormat &&\n            //    res.body.output[1][0] >= 10;\n            (res.body.output[1][0] >= 10).should.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "c5a4e354-36d4-49b5-9f99-0e35f577b0f7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get type flowscreated data based on weekly filter.",
                "fullTitle": "Enterprise Metrics.getGraphData Should get type flowscreated data based on weekly filter.",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar flowURL = apiURL + \"?type=flowscreated&filter=weekly\";\napi.get(flowURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //var isValid = res.body.output[0][0] == currentWeekFormat &&\n            //    res.body.output[1][0] >= 10;\n            (res.body.output[1][0] >= 10).should.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "dc9fcc94-cadd-40e1-91dc-f95f89118e18",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get type credits data.",
                "fullTitle": "Enterprise Metrics.getGraphData Should get type credits data.",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar creditURL = apiURL + \"?type=credits\";\napi.get(creditURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //var isValid = res.body.output[0][0] == currentDate;\n            (res.body.output[0][0]).should.not.equal(\"\");\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "9ef3be5a-10c2-470c-b449-6f51edca99b5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get type credits data based on daily filter.",
                "fullTitle": "Enterprise Metrics.getGraphData Should get type credits data based on daily filter.",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar creditURL = apiURL + \"?type=credits&filter=daily\";\napi.get(creditURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //var isValid = res.body.output[0][0] == currentDate;\n            (res.body.output[0][0]).should.not.equal(\"\");\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "5d250281-fbdc-4e26-866e-ba759074f32d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get type credits based on monthly filter.",
                "fullTitle": "Enterprise Metrics.getGraphData Should get type credits based on monthly filter.",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar creditURL = apiURL + \"?type=credits&filter=monthly\";\napi.get(creditURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output[0][0] == currentMonthFormat;\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "7743e849-9d5e-4bd8-a543-8db3bb617b14",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get type credits data based on weekly filter.",
                "fullTitle": "Enterprise Metrics.getGraphData Should get type credits data based on weekly filter.",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar creditURL = apiURL + \"?type=credits&filter=weekly\";\napi.get(creditURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output[0][0].indexOf(\"week\") == 0;\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "19bbe403-efc4-4f84-ad6c-d87330a7713f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should give invalid type error.",
                "fullTitle": "Enterprise Metrics.getGraphData Should give invalid type error.",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar fakeURL = apiURL + \"?type=FAKE\";\napi.get(fakeURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.GRAPH_TYPE_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "d4deda0e-b35c-4886-9164-62fc664412df",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Metrics.getGraphData Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "b8ee9c75-28dd-4458-9dcd-281f45eea5fa",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "7ade11a4-640b-4498-b64d-ff42ad34dd2a",
              "9def5531-a780-42b2-9e93-dcd7f5251f95",
              "ddc660e5-e776-40a9-889b-632e9303a796",
              "9f4304e0-4d41-4de9-bcfb-fae70543339c",
              "b238a31c-5de7-4288-a7af-776516220bc7",
              "0bf4adbc-9931-43b8-8576-61f0cef02410",
              "9f8264a8-6df5-4b9d-89b8-3b07cf15f886",
              "a6e1138d-bc97-4712-b483-ed189adfb5e3",
              "0085f03c-279f-4a6b-998b-ecc1e72131e8",
              "fa4e88e8-e9d3-4e17-a98f-6d475841c1a4",
              "c5a4e354-36d4-49b5-9f99-0e35f577b0f7",
              "dc9fcc94-cadd-40e1-91dc-f95f89118e18",
              "9ef3be5a-10c2-470c-b449-6f51edca99b5",
              "5d250281-fbdc-4e26-866e-ba759074f32d",
              "7743e849-9d5e-4bd8-a543-8db3bb617b14",
              "19bbe403-efc4-4f84-ad6c-d87330a7713f",
              "d4deda0e-b35c-4886-9164-62fc664412df",
              "b8ee9c75-28dd-4458-9dcd-281f45eea5fa"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 225,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "f7a928f7-9a9f-4590-8810-613fbf1c4e59",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\metrics\\getGraphDataOrg.enterprise.js",
        "file": "\\controllers\\test\\metrics\\getGraphDataOrg.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "4e5d79e4-da36-40f7-936f-a4fd488a7d14",
            "title": "Metrics.getGraphDataOrg",
            "fullFile": "C:\\work\\api\\controllers\\test\\metrics\\getGraphDataOrg.enterprise.js",
            "file": "\\controllers\\test\\metrics\\getGraphDataOrg.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Enterprise Metrics.getGraphDataOrg \"before each\" hook",
                "timedOut": false,
                "duration": 1628,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    async.waterfall([\n        function(cbk) {\n            testCollection.organizationRemoveRecords({}, function() {\n                testCollection.organizationRecordsEntry({}, function(data) {\n                    authToken = data.owner.authtoken;\n                    org_uid = data.organization.uid;\n                    org_account_uid = data.organization_account.uid;\n                    api.get(\"/enterprise/v1/user\")\n                        .set('org_uid', org_uid)\n                        .set('authtoken', authToken)\n                        .expect(httpStatus.OK)\n                        .end(function(err, res) {\n                            env_uid = res.body.output.env_uid;\n                            cbk(null, data);\n                        });\n                });\n            });\n        },\n        function(res, cbk) {\n            api.get(\"/enterprise/v1/user\")\n                .set('org_uid', org_uid)\n                .set('authtoken', authToken)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    env_uid = res.body.output.env_uid;\n                    cbk(err, res);\n                });\n        },\n        function(res, cbk) {\n            saveBillEntries({\n                    done: done,\n                    authtoken: authToken\n                },\n                function(error, bills) {\n                    savedBills = bills;\n                    cbk(null, savedBills);\n                });\n        },\n        function(res, cbk) {\n            saveUserTriggers({\n                    done: done,\n                    authtoken: authToken\n                },\n                function(error, bills) {\n                    savedBills = bills;\n                    cbk(null, savedBills);\n                });\n        },\n        function(res, cbk) {\n            saveUserFlows({\n                    done: done,\n                    authtoken: authToken\n                },\n                function(error, userFlows) {\n                    cbk(null, userFlows);\n                });\n        }\n    ], function(err, results) {\n        done();\n    });\n});",
                "err": {},
                "isRoot": false,
                "uuid": "0c56273d-2d90-4bdd-854f-cebd1341b1d7",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Metrics.getGraphDataOrg \"after all\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ndone();",
                "err": {},
                "isRoot": false,
                "uuid": "3793ee31-8af3-4704-b303-997cc24139a5",
                "isHook": true,
                "skipped": false
              },
              {
                "title": "\"after each\" hook",
                "fullTitle": "Enterprise Metrics.getGraphDataOrg \"after each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "httpmock.cleanAll();\ndone();",
                "err": {},
                "isRoot": false,
                "uuid": "acc2470d-b533-4ad8-bea8-c2346b61d978",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should get type bill data.",
                "fullTitle": "Enterprise Metrics.getGraphDataOrg Should get type bill data.",
                "timedOut": false,
                "duration": 19,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar billURL = apiURL + \"?type=bill\";\napi.get(billURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //var isValid = res.body.output[0][0] == currentDate &&\n            //    res.body.output[1][0] == 10;\n            (res.body.output[1][0] == 10).should.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "0c6dd7cc-8711-4306-8b0f-95f02bd44c81",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get type bill data based on daily filter.",
                "fullTitle": "Enterprise Metrics.getGraphDataOrg Should get type bill data based on daily filter.",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar billURL = apiURL + \"?type=bill&filter=daily\";\napi.get(billURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //var isValid = res.body.output[0][0] == currentDate &&\n            //    res.body.output[1][0] == 10;\n            (res.body.output[1][0] == 10).should.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "34ba1c4e-537b-4645-b948-4cc21a28fed4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get type bill data based on monthly filter.",
                "fullTitle": "Enterprise Metrics.getGraphDataOrg Should get type bill data based on monthly filter.",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar billURL = apiURL + \"?type=bill&filter=monthly\";\napi.get(billURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //var isValid = res.body.output[0][0] == currentMonthFormat &&\n            //    res.body.output[1][0] == 10;\n            (res.body.output[1][0] == 10).should.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "a7628357-94c4-4d0a-8b07-51fad7ecd3a9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get type bill data based on yearly filter.",
                "fullTitle": "Enterprise Metrics.getGraphDataOrg Should get type bill data based on yearly filter.",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar billURL = apiURL + \"?type=bill&filter=weekly\";\napi.get(billURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //var isValid = res.body.output[0][0] == currentWeekFormat &&\n            //    res.body.output[1][0] == 10;\n            (res.body.output[1][0] == 10).should.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "6d786f82-0031-4ae6-b309-72c028e3d3dd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get type trigger data.",
                "fullTitle": "Enterprise Metrics.getGraphDataOrg Should get type trigger data.",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar triggerURL = apiURL + \"?type=trigger\";\napi.get(triggerURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //var isValid = res.body.output[0][0] == currentDate &&\n            //    res.body.output[1][0] == 10;\n            (res.body.output[1][0] == 10).should.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "23f769bc-add6-4783-92f4-d1176ee46d5d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get type trigger data based on daily filter.",
                "fullTitle": "Enterprise Metrics.getGraphDataOrg Should get type trigger data based on daily filter.",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar triggerURL = apiURL + \"?type=trigger&filter=daily\";\napi.get(triggerURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //var isValid = res.body.output[0][0] == currentDate &&\n            //    res.body.output[1][0] == 10;\n            (res.body.output[1][0] == 10).should.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "6b16e4c6-655c-4298-b917-f5bcd04474eb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get type trigger data based on monthly filter.",
                "fullTitle": "Enterprise Metrics.getGraphDataOrg Should get type trigger data based on monthly filter.",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar triggerURL = apiURL + \"?type=trigger&filter=monthly\";\napi.get(triggerURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //var isValid = res.body.output[0][0] == currentMonthFormat &&\n            //    res.body.output[1][0] == 10;\n            (res.body.output[1][0] == 10).should.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "3b15e3df-dbe1-4bbb-806a-0e2f2a6e08e3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get type trigger data based on weekly filter.",
                "fullTitle": "Enterprise Metrics.getGraphDataOrg Should get type trigger data based on weekly filter.",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar triggerURL = apiURL + \"?type=trigger&filter=weekly\";\napi.get(triggerURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //var isValid = res.body.output[0][0] == currentWeekFormat &&\n            //    res.body.output[1][0] == 10;\n            (res.body.output[1][0] == 10).should.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "b5d2f05d-03af-4a4e-8869-2f131c381962",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get type flowscreated data.",
                "fullTitle": "Enterprise Metrics.getGraphDataOrg Should get type flowscreated data.",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar flowURL = apiURL + \"?type=flowscreated\";\napi.get(flowURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //var isValid = res.body.output[0][0] == currentDate &&\n            //    res.body.output[1][0] >= 10;\n            (res.body.output[1][0] >= 10).should.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "0834190f-9f75-4f96-8a96-e2ca5bf28da3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get type flowscreated data based on daily filter.",
                "fullTitle": "Enterprise Metrics.getGraphDataOrg Should get type flowscreated data based on daily filter.",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar flowURL = apiURL + \"?type=flowscreated&filter=daily\";\napi.get(flowURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //var isValid = res.body.output[0][0] == currentDate &&\n            //    res.body.output[1][0] >= 10;\n            (res.body.output[1][0] >= 10).should.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "eb77f23b-4567-449f-bd41-8c40858109b1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get type flowscreated data based on monthly filter.",
                "fullTitle": "Enterprise Metrics.getGraphDataOrg Should get type flowscreated data based on monthly filter.",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar flowURL = apiURL + \"?type=flowscreated&filter=monthly\";\napi.get(flowURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //var isValid = res.body.output[0][0] == currentMonthFormat &&\n            //    res.body.output[1][0] >= 10;\n            (res.body.output[1][0] >= 10).should.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "ceb4e834-e2aa-4166-93d9-830a0e9c8fcc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get type flowscreated data based on weekly filter.",
                "fullTitle": "Enterprise Metrics.getGraphDataOrg Should get type flowscreated data based on weekly filter.",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar flowURL = apiURL + \"?type=flowscreated&filter=weekly\";\napi.get(flowURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //var isValid = res.body.output[0][0] == currentWeekFormat &&\n            //    res.body.output[1][0] >= 10;\n            (res.body.output[1][0] >= 10).should.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "0d0db0df-ab7f-472c-b5a5-cb2715f6f34c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get type credits data.",
                "fullTitle": "Enterprise Metrics.getGraphDataOrg Should get type credits data.",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar creditURL = apiURL + \"?type=credits\";\napi.get(creditURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //var isValid = res.body.output[0][0] == currentDate;\n            (res.body.output[0][0]).should.not.equal(\"\");\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "8aded1a1-cd50-43e9-8577-9b3e5255f158",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get type credits data based on daily filter.",
                "fullTitle": "Enterprise Metrics.getGraphDataOrg Should get type credits data based on daily filter.",
                "timedOut": false,
                "duration": 19,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar creditURL = apiURL + \"?type=credits&filter=daily\";\napi.get(creditURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //var isValid = res.body.output[0][0] == currentDate;\n            (res.body.output[0][0]).should.not.equal(\"\");\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "a5d6156d-68c9-4ac3-8535-8b3451e9f543",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get type credits based on monthly filter.",
                "fullTitle": "Enterprise Metrics.getGraphDataOrg Should get type credits based on monthly filter.",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar creditURL = apiURL + \"?type=credits&filter=monthly\";\napi.get(creditURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output[0][0] == currentMonthFormat;\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "3f6344b7-f593-4b0f-9f46-ee923fd317f8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get type credits data based on weekly filter.",
                "fullTitle": "Enterprise Metrics.getGraphDataOrg Should get type credits data based on weekly filter.",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar creditURL = apiURL + \"?type=credits&filter=weekly\";\napi.get(creditURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output[0][0].indexOf(\"week\") == 0;\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "885a7be8-cef1-416d-bfb8-e6aa35cac9e4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should give invalid type error.",
                "fullTitle": "Enterprise Metrics.getGraphDataOrg Should give invalid type error.",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar fakeURL = apiURL + \"?type=FAKE\";\napi.get(fakeURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.GRAPH_TYPE_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "36e6dda8-c007-45d9-bf63-71726086919c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Metrics.getGraphDataOrg Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "37e814d2-d2de-4a5e-b178-c876fc8c4928",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0c6dd7cc-8711-4306-8b0f-95f02bd44c81",
              "34ba1c4e-537b-4645-b948-4cc21a28fed4",
              "a7628357-94c4-4d0a-8b07-51fad7ecd3a9",
              "6d786f82-0031-4ae6-b309-72c028e3d3dd",
              "23f769bc-add6-4783-92f4-d1176ee46d5d",
              "6b16e4c6-655c-4298-b917-f5bcd04474eb",
              "3b15e3df-dbe1-4bbb-806a-0e2f2a6e08e3",
              "b5d2f05d-03af-4a4e-8869-2f131c381962",
              "0834190f-9f75-4f96-8a96-e2ca5bf28da3",
              "eb77f23b-4567-449f-bd41-8c40858109b1",
              "ceb4e834-e2aa-4166-93d9-830a0e9c8fcc",
              "0d0db0df-ab7f-472c-b5a5-cb2715f6f34c",
              "8aded1a1-cd50-43e9-8577-9b3e5255f158",
              "a5d6156d-68c9-4ac3-8535-8b3451e9f543",
              "3f6344b7-f593-4b0f-9f46-ee923fd317f8",
              "885a7be8-cef1-416d-bfb8-e6aa35cac9e4",
              "36e6dda8-c007-45d9-bf63-71726086919c",
              "37e814d2-d2de-4a5e-b178-c876fc8c4928"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 281,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "58b08605-d217-46b6-9845-d632bde4d0eb",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\metrics\\getTransactionMetrics.enterprise.js",
        "file": "\\controllers\\test\\metrics\\getTransactionMetrics.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "261b307c-c585-4348-94fb-318c334ee0c0",
            "title": "Metrics.getTransactionMetrics",
            "fullFile": "C:\\work\\api\\controllers\\test\\metrics\\getTransactionMetrics.enterprise.js",
            "file": "\\controllers\\test\\metrics\\getTransactionMetrics.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Enterprise Metrics.getTransactionMetrics \"before each\" hook",
                "timedOut": false,
                "duration": 227,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    async.waterfall([\n        function(cbk) {\n            testCollection.createFlowUser({\n                plan: \"light_transaction\"\n            }, function(error, user) {\n                if (error) {\n                    done(error);\n                } else {\n                    cbk(null, user);\n                }\n            });\n        },\n        function(user, cbk) {\n            dummyUser = user;\n            saveBillEntries(\n                _.extend(getImmutable(billBody), {\n                    authtoken: dummyUser.authToken\n                }),\n                function(error, bills) {\n                    savedBills = bills;\n                    cbk(null, savedBills);\n                });\n        }\n    ], function(err, results) {\n        if (err) {\n            done(err);\n        } else {\n            done();\n        }\n    })\n});",
                "err": {},
                "isRoot": false,
                "uuid": "9ad36a8e-5f74-4d63-b16f-a94d2bacdcac",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after each\" hook",
                "fullTitle": "Enterprise Metrics.getTransactionMetrics \"after each\" hook",
                "timedOut": false,
                "duration": 2,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "e100507d-ad69-43cd-868b-aad9d64189e0",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Metrics.getTransactionMetrics Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "3d993cfa-170b-45bb-bce6-bed387f70c02",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of transactions metrics last month from current date if date not provided.",
                "fullTitle": "Enterprise Metrics.getTransactionMetrics Should get list of transactions metrics last month from current date if date not provided.",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var flag = Array.isArray(res.body.output);\n            var item = (_.first(res.body.output) || {});\n            (typeof(item['total_transactions']) != \"undefined\" &&\n                typeof(item['date']) != \"undefined\").should.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "cf293d56-5c00-4e01-aa6d-9b22ddaa9a1d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of transactions metrics if particular date is provided.",
                "fullTitle": "Enterprise Metrics.getTransactionMetrics Should get list of transactions metrics if particular date is provided.",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nupdated_at = (new Date()).toISOString();\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send({ startDate: created_at, endDate: updated_at })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var flag = Array.isArray(res.body.output);\n            var item = (_.first(res.body.output) || {});\n            (typeof(item['total_transactions']) != \"undefined\" &&\n                typeof(item['date']) != \"undefined\").should.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "29fde999-41fe-4e98-89e5-8b4f88401f4a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "3d993cfa-170b-45bb-bce6-bed387f70c02",
              "cf293d56-5c00-4e01-aa6d-9b22ddaa9a1d",
              "29fde999-41fe-4e98-89e5-8b4f88401f4a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 22,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "a364c846-2809-47bd-94da-ad7db333b4e5",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\metrics\\getTransactionMetricsOrg.enterprise.js",
        "file": "\\controllers\\test\\metrics\\getTransactionMetricsOrg.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "12a929ab-6562-48eb-8c50-a1aa1ce3c6d2",
            "title": "Metrics.getTransactionMetricsOrg",
            "fullFile": "C:\\work\\api\\controllers\\test\\metrics\\getTransactionMetricsOrg.enterprise.js",
            "file": "\\controllers\\test\\metrics\\getTransactionMetricsOrg.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Enterprise Metrics.getTransactionMetricsOrg \"before each\" hook",
                "timedOut": false,
                "duration": 291,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    async.waterfall([\n        function(cbk) {\n            testCollection.organizationRemoveRecords({}, function() {\n                testCollection.organizationRecordsEntry({}, function(data) {\n                    authToken = data.owner.authtoken;\n                    org_uid = data.organization.uid;\n                    cbk(null, data);\n                });\n            });\n        },\n        function(res, cbk) {\n            saveBillEntries(\n                _.extend(getImmutable(billBody), {\n                    authtoken: authToken\n                }),\n                function(error, bills) {\n                    savedBills = bills;\n                    cbk(null, savedBills);\n                });\n        }\n    ], function(err, results) {\n        if (err) {\n            done(err);\n        } else {\n            done();\n        }\n    })\n});",
                "err": {},
                "isRoot": false,
                "uuid": "ddb9ad85-d80e-4c2a-865c-1746dbe11343",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after each\" hook",
                "fullTitle": "Enterprise Metrics.getTransactionMetricsOrg \"after each\" hook",
                "timedOut": false,
                "duration": 2,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "a2173579-063a-4e2c-a0cc-13730ae9b108",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Metrics.getTransactionMetricsOrg Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('org_uid', org_uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "4836dacd-4dfc-4377-9990-0860c915fcff",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of transactions metrics last month from current date if date not provided.",
                "fullTitle": "Enterprise Metrics.getTransactionMetricsOrg Should get list of transactions metrics last month from current date if date not provided.",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output).to.be.instanceof(Array);\n            expect(_.first(res.body.output)).to.have.any.keys(['total_transactions', 'date']);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "e7b8eb3e-d612-48b9-8e9f-dbeef50b75f5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of transactions metrics if particular date is provided.",
                "fullTitle": "Enterprise Metrics.getTransactionMetricsOrg Should get list of transactions metrics if particular date is provided.",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nupdated_at = (new Date()).toISOString();\napi.post(apiURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .send({ startDate: created_at, endDate: updated_at })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output).to.be.instanceof(Array);\n            expect(_.first(res.body.output)).to.have.any.keys(['total_transactions', 'date']);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "93a4e604-15cb-4fb0-9f73-b943d3c45f68",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "4836dacd-4dfc-4377-9990-0860c915fcff",
              "e7b8eb3e-d612-48b9-8e9f-dbeef50b75f5",
              "93a4e604-15cb-4fb0-9f73-b943d3c45f68"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 36,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "6a41d054-160f-4cb2-a409-5d9a0e5f586d",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\oauth\\getList.enterprise.js",
        "file": "\\controllers\\test\\oauth\\getList.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "4b4b5a43-0a73-417e-bbca-006908e2511f",
            "title": "Oauth",
            "fullFile": "C:\\work\\api\\controllers\\test\\oauth\\getList.enterprise.js",
            "file": "\\controllers\\test\\oauth\\getList.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "7465e7d8-7905-42fb-a5cd-2b1b3ceffb47",
                "title": "oauth.getList",
                "fullFile": "C:\\work\\api\\controllers\\test\\oauth\\getList.enterprise.js",
                "file": "\\controllers\\test\\oauth\\getList.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Oauth oauth.getList \"before each\" hook",
                    "timedOut": false,
                    "duration": 2670,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ndeleteAllInsertedRecords(function(error, output) {\n    if (error) {\n        done(error);\n    } else {\n        commonMock.setSignUpMocks(httpmock, \"enterprise\");\n        api.post(\"/enterprise/v1/signup\")\n            .send(registrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    authToken = res.body.output.authtoken;\n                    _id = res.body.output._id;\n                    _userUID = res.body.output.uid;\n                    apiURL = apiURL.replace(\":uid\", res.body.output.uid);\n                    saveOAuth({\n                        authToken: authToken,\n                        userUid: _userUID\n                    }, function() {\n                        done();\n                    });\n                }\n            });\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "28c620ab-4d2d-497b-bb75-553e9ca8d2db",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Oauth oauth.getList \"after all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "done();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e5efc2bb-897b-4a0d-a4e0-92a49f4817ec",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Oauth oauth.getList \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3d55569e-65f9-4838-9e99-f49a07f7c57e",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Oauth oauth.getList Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "13f6ddff-be04-44dd-9fd0-b38a14e15cad",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "13f6ddff-be04-44dd-9fd0-b38a14e15cad"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 4,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "88fa5d70-e448-42d4-a8dc-0bee20c4908c",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\organization\\changePlan.enterprise.js",
        "file": "\\controllers\\test\\organization\\changePlan.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "672f238a-2fb2-4687-9089-d194ca880f79",
            "title": "Organization",
            "fullFile": "C:\\work\\api\\controllers\\test\\organization\\changePlan.enterprise.js",
            "file": "\\controllers\\test\\organization\\changePlan.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "de7574c5-8aa7-42de-818b-853b9a72b5e4",
                "title": "Organization.changePlan",
                "fullFile": "C:\\work\\api\\controllers\\test\\organization\\changePlan.enterprise.js",
                "file": "\\controllers\\test\\organization\\changePlan.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Organization Organization.changePlan \"before each\" hook",
                    "timedOut": false,
                    "duration": 58,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        _data = data;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1aef3eaf-e19f-4326-bbc9-fb9637dbc30e",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Organization Organization.changePlan \"after all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2627d56f-bb72-4a58-9f69-5b56a5c6956a",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Organization Organization.changePlan \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f4873cf0-b78a-4eca-81d2-6d3866cecb90",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should allowed to change organization plan.",
                    "fullTitle": "Enterprise Organization Organization.changePlan Should allowed to change organization plan.",
                    "timedOut": false,
                    "duration": 45,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempOrgBody = getImmutable(orgBody);\ntempOrgBody.plan = \"org_standard_paid\";\ncommonMock.braintreeCancelSubscription(httpmock, \"enterprise\");\ncommonMock.braintreeUpdatePaymentMethod(httpmock, \"enterprise\");\ncommonMock.braintreeSubscription(httpmock, \"enterprise\");\napi.put(apiURL.replace(\":org_uid\", org_uid))\n    .send(tempOrgBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.uid.should.equal(org_uid);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6d42f0a0-b3a0-42a5-a994-7503709dbc0c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not allowed to change organization plan.",
                    "fullTitle": "Enterprise Organization Organization.changePlan Should not allowed to change organization plan.",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempOrgBody = getImmutable(orgBody);\ntempOrgBody.plan = \"org_standard_paid\";\ncommonMock.braintreeCancelSubscription(httpmock, \"enterprise\");\ncommonMock.braintreeUpdatePaymentMethod(httpmock, \"enterprise\");\ncommonMock.braintreeSubscription(httpmock, \"enterprise\");\napi.put(apiURL.replace(\":org_uid\", \"FAKE_ORG\"))\n    .send(tempOrgBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_NOT_FOUND);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "81d4265a-b312-4de0-a302-757854d202f3",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should allowed to change organization plan to another paid plan.",
                    "fullTitle": "Enterprise Organization Organization.changePlan Should allowed to change organization plan to another paid plan.",
                    "timedOut": false,
                    "duration": 39,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempOrgBody = getImmutable(orgBody);\ntempOrgBody.plan = \"org_standard_paid\";\ncommonMock.braintreeCancelSubscription(httpmock, \"enterprise\");\ncommonMock.braintreeUpdatePaymentMethod(httpmock, \"enterprise\");\ncommonMock.braintreeSubscription(httpmock, \"enterprise\");\napi.put(apiURL.replace(\":org_uid\", org_uid))\n    .send(tempOrgBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.uid.should.equal(org_uid);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0a14a78e-4095-4e38-b2e1-a20bd8ba19f8",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should validate organization change plan body.",
                    "fullTitle": "Enterprise Organization Organization.changePlan Should validate organization change plan body.",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.braintreeCancelSubscription(httpmock, \"enterprise\");\ncommonMock.braintreeUpdatePaymentMethod(httpmock, \"enterprise\");\ncommonMock.braintreeSubscription(httpmock, \"enterprise\");\napi.put(apiURL.replace(\":org_uid\", org_uid))\n    .send({})\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            (res.body.error.plan.message == messageList.ORG_PLAN_REQUIRED &&\n                res.body.error.nonce.message == messageList.ORG_NONCE_REQUIRED &&\n                res.body.error.billing_address1.message == messageList.ORG_BILLING_ADDR_REQUIRED &&\n                res.body.error.cardholderName.message == messageList.ORG_CARDHOLDER_NAME_REQUIRED).should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f5af81b8-ae4d-4ac1-a7c2-7c7edd64ea3f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should allowed to change organization plan by owner.",
                    "fullTitle": "Enterprise Organization Organization.changePlan Should allowed to change organization plan by owner.",
                    "timedOut": false,
                    "duration": 38,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.braintreeCancelSubscription(httpmock, \"enterprise\");\ncommonMock.braintreeUpdatePaymentMethod(httpmock, \"enterprise\");\ncommonMock.braintreeSubscription(httpmock, \"enterprise\");\nvar tempOrgBody = getImmutable(orgBody);\ntempOrgBody.plan = \"org_annual_standard\";\napi.put(apiURL.replace(\":org_uid\", org_uid))\n    .send(tempOrgBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.uid.should.equal(org_uid);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "91d16ca5-5ec5-428b-97f4-7259cebc7d2b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should allowed to change organization plan by admin role user.",
                    "fullTitle": "Enterprise Organization Organization.changePlan Should allowed to change organization plan by admin role user.",
                    "timedOut": false,
                    "duration": 40,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.braintreeCancelSubscription(httpmock, \"enterprise\");\ncommonMock.braintreeUpdatePaymentMethod(httpmock, \"enterprise\");\ncommonMock.braintreeSubscription(httpmock, \"enterprise\");\nvar tempOrgBody = getImmutable(orgBody);\ntempOrgBody.plan = \"org_annual_standard\";\napi.put(apiURL.replace(\":org_uid\", org_uid))\n    .send(tempOrgBody)\n    .set('authtoken', _data.admin.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.uid.should.equal(org_uid);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "64be32f7-edab-48c0-ae43-955a62c4d864",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should allowed to change organization plan by Billing Manager role user.",
                    "fullTitle": "Enterprise Organization Organization.changePlan Should allowed to change organization plan by Billing Manager role user.",
                    "timedOut": false,
                    "duration": 42,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.braintreeCancelSubscription(httpmock, \"enterprise\");\ncommonMock.braintreeUpdatePaymentMethod(httpmock, \"enterprise\");\ncommonMock.braintreeSubscription(httpmock, \"enterprise\");\nvar tempOrgBody = getImmutable(orgBody);\ntempOrgBody.plan = \"org_annual_standard\";\napi.put(apiURL.replace(\":org_uid\", org_uid))\n    .send(tempOrgBody)\n    .set('authtoken', _data.billing_manager.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.uid.should.equal(org_uid);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7f3de589-f36e-4e11-8aad-9c796b44ce8d",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not allowed to change organization plan by other role user.",
                    "fullTitle": "Enterprise Organization Organization.changePlan Should not allowed to change organization plan by other role user.",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.braintreeCancelSubscription(httpmock, \"enterprise\");\ncommonMock.braintreeUpdatePaymentMethod(httpmock, \"enterprise\");\ncommonMock.braintreeSubscription(httpmock, \"enterprise\");\nvar tempOrgBody = getImmutable(orgBody);\ntempOrgBody.plan = \"org_annual_standard\";\napi.put(apiURL.replace(\":org_uid\", org_uid))\n    .send(tempOrgBody)\n    .set('authtoken', _data.developer.authtoken)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_NO_ACCESS_TO_CHANGE_PLAN);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8bc3f77a-52c7-4e5e-8504-b40db313d247",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Organization Organization.changePlan Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempOrgBody = getImmutable(orgBody);\ntempOrgBody.plan = \"org_annual_standard\";\napi.put(apiURL.replace(\":org_uid\", org_uid))\n    .send(tempOrgBody)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3a7d7c82-f001-4b6a-93be-25820dd51022",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "6d42f0a0-b3a0-42a5-a994-7503709dbc0c",
                  "81d4265a-b312-4de0-a302-757854d202f3",
                  "0a14a78e-4095-4e38-b2e1-a20bd8ba19f8",
                  "f5af81b8-ae4d-4ac1-a7c2-7c7edd64ea3f",
                  "91d16ca5-5ec5-428b-97f4-7259cebc7d2b",
                  "64be32f7-edab-48c0-ae43-955a62c4d864",
                  "7f3de589-f36e-4e11-8aad-9c796b44ce8d",
                  "8bc3f77a-52c7-4e5e-8504-b40db313d247",
                  "3a7d7c82-f001-4b6a-93be-25820dd51022"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 239,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "fb8ec5a5-6d55-467b-a2d4-611968b758a2",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\organization\\checkOrgName.enterprise.js",
        "file": "\\controllers\\test\\organization\\checkOrgName.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "8d278f13-d5d3-4607-ace2-d164ef496a4d",
            "title": "Organization",
            "fullFile": "C:\\work\\api\\controllers\\test\\organization\\checkOrgName.enterprise.js",
            "file": "\\controllers\\test\\organization\\checkOrgName.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "d2f51068-e5b9-49b3-955a-2eed83b49800",
                "title": "Organization.checkOrgName",
                "fullFile": "C:\\work\\api\\controllers\\test\\organization\\checkOrgName.enterprise.js",
                "file": "\\controllers\\test\\organization\\checkOrgName.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Organization Organization.checkOrgName \"before each\" hook",
                    "timedOut": false,
                    "duration": 55,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        _data = data;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e7e8e5b7-9e62-48aa-8b5a-90603f01260e",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Organization Organization.checkOrgName \"after all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d7fd2274-fae5-45b6-a976-3c71248b9a4f",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Organization Organization.checkOrgName \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "31a316e2-781c-4eec-9dda-2c143040c8fc",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should check org name is available or not.",
                    "fullTitle": "Enterprise Organization Organization.checkOrgName Should check org name is available or not.",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar body = {\n    'name': 'org3',\n    'org_uid': org_uid\n};\napi.post(apiURL)\n    .send(body)\n    .set('authtoken', _data.admin.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.allowed.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "81dcea92-a574-4062-b3e7-6764a1141423",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should check org name is available or not without passing org_uid.",
                    "fullTitle": "Enterprise Organization Organization.checkOrgName Should check org name is available or not without passing org_uid.",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar body = {\n    'name': 'org3'\n};\napi.post(apiURL)\n    .send(body)\n    .set('authtoken', _data.admin.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.allowed.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5a4873f2-b47f-4609-96e7-4e280e9ccb64",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should validate organization details body.",
                    "fullTitle": "Enterprise Organization Organization.checkOrgName Should validate organization details body.",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .send({})\n    .set('authtoken', _data.admin.authtoken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            (res.body.error.name.message == messageList.ORG_NAME_REQUIRED).should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a039ad87-8720-495f-aa16-e9369345c4d4",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should update same name in organization details.",
                    "fullTitle": "Enterprise Organization Organization.checkOrgName Should update same name in organization details.",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar body = {\n    'name': 'org1',\n    'org_uid': org_uid\n};\napi.post(apiURL)\n    .send(body)\n    .set('authtoken', _data.admin.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.allowed.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "668c7d41-299d-4693-a436-f6cf5cd72e45",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give false for duplicate name.",
                    "fullTitle": "Enterprise Organization Organization.checkOrgName Should give false for duplicate name.",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar body = {\n    'name': 'org2',\n    'org_uid': org_uid\n};\napi.post(apiURL)\n    .send(body)\n    .set('authtoken', _data.admin.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.allowed.should.equal(false);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f7412952-4654-48c5-97e7-bf592b0b71f4",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give false for same name if org_uid not provided.",
                    "fullTitle": "Enterprise Organization Organization.checkOrgName Should give false for same name if org_uid not provided.",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar body = {\n    'name': 'org1'\n};\napi.post(apiURL)\n    .send(body)\n    .set('authtoken', _data.admin.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.allowed.should.equal(false);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5ac2d420-2686-4798-a577-552a447b703e",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Organization Organization.checkOrgName Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar body = {\n    'name': 'org3',\n    'org_uid': org_uid\n};\napi.post(apiURL)\n    .send(body)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "63933382-26ec-4bc8-ade7-661fff44ea65",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "81dcea92-a574-4062-b3e7-6764a1141423",
                  "5a4873f2-b47f-4609-96e7-4e280e9ccb64",
                  "a039ad87-8720-495f-aa16-e9369345c4d4",
                  "668c7d41-299d-4693-a436-f6cf5cd72e45",
                  "f7412952-4654-48c5-97e7-bf592b0b71f4",
                  "5ac2d420-2686-4798-a577-552a447b703e",
                  "63933382-26ec-4bc8-ade7-661fff44ea65"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 62,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "e7b40887-c5ec-466d-bd79-fc7f441e4a28",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\organization\\create.enterprise.js",
        "file": "\\controllers\\test\\organization\\create.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "b0e93bb4-fc21-4b51-9eb6-46c15ad1917d",
            "title": "Organization",
            "fullFile": "C:\\work\\api\\controllers\\test\\organization\\create.enterprise.js",
            "file": "\\controllers\\test\\organization\\create.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "e22d9bd9-83ef-4770-8ed2-80c84f479e1f",
                "title": "Organization.create",
                "fullFile": "C:\\work\\api\\controllers\\test\\organization\\create.enterprise.js",
                "file": "\\controllers\\test\\organization\\create.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Organization Organization.create \"before each\" hook",
                    "timedOut": false,
                    "duration": 2140,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nclearRecords(function() {\n    createOrgPlans(function() {\n        commonMock.setSignUpMocks(httpmock, \"enterprise\");\n        api.post(\"/enterprise/v1/signup\")\n            .send(registrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    authToken = res.body.output.authtoken;\n                    _id = res.body.output._id;\n                    done();\n                }\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1691bed8-fd45-4803-be22-f16717374e39",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Organization Organization.create \"after all\" hook",
                    "timedOut": false,
                    "duration": 3,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "clearRecords(function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2bfe3e40-744c-49a5-a2af-13d26d2c3307",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Organization Organization.create \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "86243674-1d6a-41b0-8441-985e69e84c01",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should create organization.",
                    "fullTitle": "Enterprise Organization Organization.create Should create organization.",
                    "timedOut": false,
                    "duration": 2162,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempOrgBody = getImmutable(orgBody);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(tempOrgBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            _models.User.findOne({\n                uid: res.body.output.org_account.uid\n            }).lean().exec(function(err, user) {\n                if (user) {\n                    var org_uid = res.body.output.uid;\n                    api.get(\"/enterprise/v1/organizations/\" + org_uid)\n                        .set('authtoken', authToken)\n                        .expect(httpStatus.CREATED)\n                        .end(function(err, res) {\n                            res.body.output.uid.should.equal(org_uid);\n                            done();\n                        });\n                } else {\n                    true.should.equal(false);\n                    done();\n                }\n            });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "06924387-e68a-435d-8e56-4bacb2ee6a39",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should create organization with trial plan.",
                    "fullTitle": "Enterprise Organization Organization.create Should create organization with trial plan.",
                    "timedOut": false,
                    "duration": 2948,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempOrgBody = getImmutable(orgBody);\ntempOrgBody.plan = \"org_trial\";\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(tempOrgBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            _models.User.findOne({\n                uid: res.body.output.org_account.uid\n            }).lean().exec(function(err, user) {\n                if (user) {\n                    var org_uid = res.body.output.uid;\n                    api.get(\"/enterprise/v1/organizations/\" + org_uid)\n                        .set('authtoken', authToken)\n                        .expect(httpStatus.CREATED)\n                        .end(function(err, res) {\n                            (res.body.output.org_account.subscription.days == 30 && typeof(res.body.output.org_account.subscription.start_date) != \"undefined\").should.equal(true);\n                            done();\n                        });\n                } else {\n                    true.should.equal(false);\n                    done();\n                }\n            });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "376e008b-9590-45b9-a036-b25f31d519c3",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should create multiple organization with trial plan.",
                    "fullTitle": "Enterprise Organization Organization.create Should create multiple organization with trial plan.",
                    "timedOut": false,
                    "duration": 9678,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar createOrg = function(name, callback) {\n    var tempOrgBody = getImmutable(orgBody);\n    tempOrgBody.plan = \"org_trial\";\n    tempOrgBody.name = name;\n    commonMock.setSignUpMocks(httpmock, \"enterprise\");\n    api.post(apiURL)\n        .send(tempOrgBody)\n        .set('authtoken', authToken)\n        .expect(httpStatus.CREATED)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                _models.User.findOne({\n                    uid: res.body.output.org_account.uid\n                }).lean().exec(function(err, user) {\n                    if (user) {\n                        var org_uid = res.body.output.uid;\n                        api.get(\"/enterprise/v1/organizations/\" + org_uid)\n                            .set('authtoken', authToken)\n                            .expect(httpStatus.CREATED)\n                            .end(function(err, res) {\n                                callback(err, res);\n                            });\n                    } else {\n                        true.should.equal(false);\n                        done();\n                    }\n                });\n            }\n        });\n};\ncreateOrg(\"org1\", function(err, res) {\n    if (res.body.output.org_account.subscription.days == 30 &&\n        typeof(res.body.output.org_account.subscription.start_date) != \"undefined\") {\n        createOrg(\"org2\", function(err, res) {\n            if (res.body.output.org_account.subscription.days == 30 &&\n                typeof(res.body.output.org_account.subscription.start_date) != \"undefined\") {\n                createOrg(\"org3\", function(err, res) {\n                    if (res.body.output.org_account.subscription.days == 30 &&\n                        typeof(res.body.output.org_account.subscription.start_date) != \"undefined\") {\n                        true.should.equal(true);\n                    } else {\n                        true.should.equal(false);\n                    }\n                    done();\n                })\n            } else {\n                true.should.equal(false);\n                done();\n            }\n        })\n    } else {\n        true.should.equal(false);\n        done();\n    }\n})",
                    "err": {},
                    "isRoot": false,
                    "uuid": "33bd7b55-9396-400c-af55-845d7ca4aadb",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not create duplicate entries.",
                    "fullTitle": "Enterprise Organization Organization.create Should not create duplicate entries.",
                    "timedOut": false,
                    "duration": 5518,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempOrgBody = getImmutable(orgBody);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.email = \"test.user+1@raweng.com\";\ncommonMock.setSignUpMocks(httpmock, \"express\", {\n    email: tempRegistrationBody.email\n});\nvar tempLoginBody = global.getImmutable(loginBody);\ntempLoginBody.email = tempRegistrationBody.email;\nvar newSignupUid = \"\",\n    newUserAuthtoken = \"\";\nvar doLogin = function(callback) {\n    commonMock.setSignUpMocks(httpmock, \"express\");\n    commonMock.flowLogin(httpmock, \"express\");\n    api.post(\"/express/v1/login\")\n        .send(tempLoginBody)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                commonMock.setSignUpMocks(httpmock, \"enterprise\");\n                commonMock.flowLogin(httpmock, \"enterprise\");\n                api.post(\"/enterprise/v1/login\")\n                    .send(tempLoginBody)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            callback();\n                        }\n                    });\n            }\n        });\n};\napi.post(\"/express/v1/signup\")\n    .send(tempRegistrationBody)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            newSignupUid = res.body.output.uid;\n            _models.User.findOneAndUpdate({\n                uid: newSignupUid\n            }, {\n                active: true\n            }, { new: true }, function(error, user) {\n                var tempLoginBody = global.getImmutable(loginBody);\n                tempLoginBody.email = tempRegistrationBody.email;\n                commonMock.setSignUpMocks(httpmock, \"enterprise\");\n                commonMock.flowLogin(httpmock, \"enterprise\");\n                api.post(\"/enterprise/v1/login\")\n                    .send(tempLoginBody)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            newUserAuthtoken = res.body.output.authtoken;\n                            doLogin(function() {\n                                doLogin(function() {\n                                    doLogin(function() {\n                                        doLogin(function() {\n                                            _models.User.find({\n                                                email: tempRegistrationBody.email\n                                            }, function(error, users) {\n                                                users.length.should.equal(2);\n                                                done();\n                                            });\n                                        });\n                                    });\n                                });\n                            });\n                        }\n                    });\n            });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fbcfcf17-254b-4945-afd2-c41d7798806a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Default role should not be null.",
                    "fullTitle": "Enterprise Organization Organization.create Default role should not be null.",
                    "timedOut": false,
                    "duration": 2344,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempOrgBody = getImmutable(orgBody);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(tempOrgBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            if (res.body.output.default_project) {\n                _models.User.findOne({\n                    uid: res.body.output.org_account.uid\n                }).lean().exec(function(err, user) {\n                    if (user) {\n                        api.get(\"/enterprise/v1/organizations/\" + res.body.output.uid)\n                            .set('authtoken', authToken)\n                            .expect(httpStatus.CREATED)\n                            .end(function(err, res) {\n                                true.should.equal(true);\n                                done();\n                            });\n                    } else {\n                        true.should.equal(false);\n                        done();\n                    }\n                });\n            } else {\n                true.should.equal(false);\n                done();\n            }\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "155ee902-4f50-4eff-888d-db196e64dad2",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get user record for owner.",
                    "fullTitle": "Enterprise Organization Organization.create Should get user record for owner.",
                    "timedOut": false,
                    "duration": 2164,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempOrgBody = getImmutable(orgBody);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(tempOrgBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            commonMock.setSignUpMocks(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/login\")\n                .send({\n                    email: \"test.user@raweng.com\",\n                    password: \"Raw@1234\"\n                })\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        _models.User.findOne({\n                            uid: res.body.output.uid\n                        }).lean().exec(function(err, user) {\n                            (res.body.output.uid != \"\").should.equal(true);\n                            done();\n                        });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4128360a-61cf-46d8-8cdd-9f7a95fc6fe5",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should validate organization body.",
                    "fullTitle": "Enterprise Organization Organization.create Should validate organization body.",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempOrgBody = getImmutable(orgBody);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send({})\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            (res.body.error.name.message == messageList.ORG_NAME_REQUIRED &&\n                res.body.error.plan.message == messageList.ORG_PLAN_REQUIRED &&\n                res.body.error.nonce.message == messageList.ORG_NONCE_REQUIRED &&\n                res.body.error.billing_address1.message == messageList.ORG_BILLING_ADDR_REQUIRED &&\n                res.body.error.cardholderName.message == messageList.ORG_CARDHOLDER_NAME_REQUIRED).should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6e4a085d-9690-4ba2-b007-1bb0b7a983d8",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should create organization for paid plan.",
                    "fullTitle": "Enterprise Organization Organization.create Should create organization for paid plan.",
                    "timedOut": false,
                    "duration": 2453,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempOrgBody = getImmutable(orgBody);\ntempOrgBody.plan = \"org_standard_paid\";\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\ncommonMock.braintreeUpdatePaymentMethod(httpmock, \"enterprise\");\ncommonMock.braintreeSubscription(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(tempOrgBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var company = res.body.output.org_account.company || \"\";\n            if (company == tempOrgBody.company) {\n                _models.User.findOne({\n                    uid: res.body.output.org_account.uid\n                }).lean().exec(function(err, user) {\n                    (res.body.output.uid != \"\" &&\n                        user.plan[0].toString() == paidPlan._id.toString()).should.equal(true);\n                    done();\n                });\n            } else {\n                true.should.equal(false);\n                done();\n            }\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "71d62cb5-9d61-40a8-9fb6-ad0505c210dc",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Organization Organization.create Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempOrgBody = getImmutable(orgBody);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(tempOrgBody)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "81523e65-6860-4a68-a739-3292dcb38c89",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "06924387-e68a-435d-8e56-4bacb2ee6a39",
                  "376e008b-9590-45b9-a036-b25f31d519c3",
                  "33bd7b55-9396-400c-af55-845d7ca4aadb",
                  "fbcfcf17-254b-4945-afd2-c41d7798806a",
                  "155ee902-4f50-4eff-888d-db196e64dad2",
                  "4128360a-61cf-46d8-8cdd-9f7a95fc6fe5",
                  "6e4a085d-9690-4ba2-b007-1bb0b7a983d8",
                  "71d62cb5-9d61-40a8-9fb6-ad0505c210dc",
                  "81523e65-6860-4a68-a739-3292dcb38c89"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 27283,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "ce562b23-7d98-4e6c-89bd-89ce6e625342",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\organization\\disableSSO.enterprise.js",
        "file": "\\controllers\\test\\organization\\disableSSO.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "92a852ad-c43e-4021-be66-741eefe2b3f3",
            "title": "Organization",
            "fullFile": "C:\\work\\api\\controllers\\test\\organization\\disableSSO.enterprise.js",
            "file": "\\controllers\\test\\organization\\disableSSO.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "729c2563-3788-4cb9-9b50-5a8068b20971",
                "title": "Organization.disableSSO",
                "fullFile": "C:\\work\\api\\controllers\\test\\organization\\disableSSO.enterprise.js",
                "file": "\\controllers\\test\\organization\\disableSSO.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Organization Organization.disableSSO \"before each\" hook",
                    "timedOut": false,
                    "duration": 61,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        _data = data;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "675f6228-3e22-4823-b78b-4d401e3859a2",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Organization Organization.disableSSO \"after all\" hook",
                    "timedOut": false,
                    "duration": 2,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "testCollection.organizationRemoveRecords({}, function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c1794ba1-a91e-4701-901b-d901d6e9d693",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Organization Organization.disableSSO \"after each\" hook",
                    "timedOut": false,
                    "duration": 1,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d0c84370-599e-4383-9f34-230e6898eb17",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should enable SSO.",
                    "fullTitle": "Enterprise Organization Organization.disableSSO Should enable SSO.",
                    "timedOut": false,
                    "duration": 27,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar config = getImmutable(ssoConfig);\napi.put(\"/enterprise/v1/organizations/:org_uid/ssoconfig\".replace(\":org_uid\", org_uid))\n    .send(config)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.uid != \"\" &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\" &&\n                res.body.output.sso_details.entry_point == config.entry_point &&\n                res.body.output.sso_details.algo_type == config.algo_type &&\n                res.body.output.sso_details.public_cert == config.public_cert &&\n                res.body.output.sso_details.session_time_out_hours == config.session_time_out_hours\n            if (isValid) {\n                api.post(apiURL.replace(\":org_uid\", org_uid))\n                    .send({})\n                    .set('authtoken', authToken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            res.body.output.enable_sso.should.equal(false);\n                            done();\n                        }\n                    });\n            } else {\n                isValid.should.equal(false);\n                done();\n            }\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3fc20d86-16de-4f09-975f-581b7cf4aefe",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should enable SSO by admin user.",
                    "fullTitle": "Enterprise Organization Organization.disableSSO Should enable SSO by admin user.",
                    "timedOut": false,
                    "duration": 27,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar config = getImmutable(ssoConfig);\napi.put(\"/enterprise/v1/organizations/:org_uid/ssoconfig\".replace(\":org_uid\", org_uid))\n    .send(config)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.uid != \"\" &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\" &&\n                res.body.output.sso_details.entry_point == config.entry_point &&\n                res.body.output.sso_details.algo_type == config.algo_type &&\n                res.body.output.sso_details.public_cert == config.public_cert &&\n                res.body.output.sso_details.session_time_out_hours == config.session_time_out_hours\n            if (isValid) {\n                api.post(apiURL.replace(\":org_uid\", org_uid))\n                    .send({})\n                    .set('authtoken', _data.admin.authtoken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            res.body.output.enable_sso.should.equal(false);\n                            done();\n                        }\n                    });\n            } else {\n                isValid.should.equal(false);\n                done();\n            }\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d930a09d-7940-4ec6-a030-69ce8c4314e6",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not enable SSO by developer user.",
                    "fullTitle": "Enterprise Organization Organization.disableSSO Should not enable SSO by developer user.",
                    "timedOut": false,
                    "duration": 27,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar config = getImmutable(ssoConfig);\napi.put(\"/enterprise/v1/organizations/:org_uid/ssoconfig\".replace(\":org_uid\", org_uid))\n    .send(config)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.uid != \"\" &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\" &&\n                res.body.output.sso_details.entry_point == config.entry_point &&\n                res.body.output.sso_details.algo_type == config.algo_type &&\n                res.body.output.sso_details.public_cert == config.public_cert &&\n                res.body.output.sso_details.session_time_out_hours == config.session_time_out_hours\n            if (isValid) {\n                api.post(apiURL.replace(\":org_uid\", org_uid))\n                    .send({})\n                    .set('authtoken', _data.developer.authtoken)\n                    .expect(httpStatus.UNAUTHORIZED)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            res.body.error.message.should.equal(messageList.ORG_NOT_ADMIN);\n                            done();\n                        }\n                    });\n            } else {\n                isValid.should.equal(false);\n                done();\n            }\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "59e3f21b-a81d-4f69-a46d-e5d01a2b203d",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give invalid config error.",
                    "fullTitle": "Enterprise Organization Organization.disableSSO Should give invalid config error.",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL.replace(\":org_uid\", org_uid))\n    .send({})\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_SSO_CONFIG_INVALID);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3e8d5bdf-6c19-43b1-828a-cfa35be84920",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Organization Organization.disableSSO Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL.replace(\":org_uid\", org_uid))\n    .send({})\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1a5a5671-72f3-4b41-9216-ee821884eb7b",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "3fc20d86-16de-4f09-975f-581b7cf4aefe",
                  "d930a09d-7940-4ec6-a030-69ce8c4314e6",
                  "59e3f21b-a81d-4f69-a46d-e5d01a2b203d",
                  "3e8d5bdf-6c19-43b1-828a-cfa35be84920",
                  "1a5a5671-72f3-4b41-9216-ee821884eb7b"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 96,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "ce4444a8-e471-4e7b-9f5d-306a3a2ff416",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\organization\\enableSSO.enterprise.js",
        "file": "\\controllers\\test\\organization\\enableSSO.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "8f3aeab8-527f-4a8e-93c0-6fb2beb75ac1",
            "title": "Organization",
            "fullFile": "C:\\work\\api\\controllers\\test\\organization\\enableSSO.enterprise.js",
            "file": "\\controllers\\test\\organization\\enableSSO.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "15a2836b-699c-4fcc-9a47-3fed3d9a8a64",
                "title": "Organization.enableSSO",
                "fullFile": "C:\\work\\api\\controllers\\test\\organization\\enableSSO.enterprise.js",
                "file": "\\controllers\\test\\organization\\enableSSO.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Organization Organization.enableSSO \"before each\" hook",
                    "timedOut": false,
                    "duration": 64,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        _data = data;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f8abcee8-375c-4c04-af0c-1948b9e33109",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Organization Organization.enableSSO \"after all\" hook",
                    "timedOut": false,
                    "duration": 1,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "testCollection.organizationRemoveRecords({}, function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bf2c7a75-0b85-46a5-b635-878c8aa301d4",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Organization Organization.enableSSO \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "23d313e7-7386-4b9f-abe3-cbac538fca29",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should enable SSO.",
                    "fullTitle": "Enterprise Organization Organization.enableSSO Should enable SSO.",
                    "timedOut": false,
                    "duration": 88,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar config = getImmutable(ssoConfig);\napi.put(\"/enterprise/v1/organizations/:org_uid/ssoconfig\".replace(\":org_uid\", org_uid))\n    .send(config)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.uid != \"\" &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\" &&\n                res.body.output.sso_details.entry_point == config.entry_point &&\n                res.body.output.sso_details.algo_type == config.algo_type &&\n                res.body.output.sso_details.session_time_out_hours == config.session_time_out_hours\n            if (isValid) {\n                var publicKeyFile = __dirname + \"/../../../__cert/okta.cert\";\n                var privateKeyFile = __dirname + \"/../../../__cert/SP1.pem\";\n                api.post(\"/enterprise/v1/organizations/:org_uid/sso/certs\".replace(\":org_uid\", org_uid))\n                    .set('authtoken', _data.admin.authtoken)\n                    .attach('signed_public_key', publicKeyFile)\n                    .attach('enc_private_key', privateKeyFile)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        api.post(apiURL.replace(\":org_uid\", org_uid))\n                            .send({})\n                            .set('authtoken', authToken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    res.body.output.enable_sso.should.equal(true);\n                                    done();\n                                }\n                            });\n                    });\n            } else {\n                isValid.should.equal(false);\n                done();\n            }\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "95c03e3a-4476-41a2-9351-ce8e4bc36bd9",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should enable SSO by admin user.",
                    "fullTitle": "Enterprise Organization Organization.enableSSO Should enable SSO by admin user.",
                    "timedOut": false,
                    "duration": 78,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar config = getImmutable(ssoConfig);\napi.put(\"/enterprise/v1/organizations/:org_uid/ssoconfig\".replace(\":org_uid\", org_uid))\n    .send(config)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.uid != \"\" &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\" &&\n                res.body.output.sso_details.entry_point == config.entry_point &&\n                res.body.output.sso_details.algo_type == config.algo_type &&\n                res.body.output.sso_details.session_time_out_hours == config.session_time_out_hours\n            if (isValid) {\n                var publicKeyFile = __dirname + \"/../../../__cert/okta.cert\";\n                var privateKeyFile = __dirname + \"/../../../__cert/SP1.pem\";\n                api.post(\"/enterprise/v1/organizations/:org_uid/sso/certs\".replace(\":org_uid\", org_uid))\n                    .set('authtoken', _data.admin.authtoken)\n                    .attach('signed_public_key', publicKeyFile)\n                    .attach('enc_private_key', privateKeyFile)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        api.post(apiURL.replace(\":org_uid\", org_uid))\n                            .send({})\n                            .set('authtoken', _data.admin.authtoken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    res.body.output.enable_sso.should.equal(true);\n                                    done();\n                                }\n                            });\n                    });\n            } else {\n                isValid.should.equal(false);\n                done();\n            }\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5b4a45f6-1aef-4fc8-910d-e03d8072f15a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not enable SSO by developer user.",
                    "fullTitle": "Enterprise Organization Organization.enableSSO Should not enable SSO by developer user.",
                    "timedOut": false,
                    "duration": 118,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar config = getImmutable(ssoConfig);\napi.put(\"/enterprise/v1/organizations/:org_uid/ssoconfig\".replace(\":org_uid\", org_uid))\n    .send(config)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.uid != \"\" &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\" &&\n                res.body.output.sso_details.entry_point == config.entry_point &&\n                res.body.output.sso_details.algo_type == config.algo_type &&\n                res.body.output.sso_details.public_cert == config.public_cert &&\n                res.body.output.sso_details.session_time_out_hours == config.session_time_out_hours\n            if (isValid) {\n                var publicKeyFile = __dirname + \"/../../../__cert/okta.cert\";\n                var privateKeyFile = __dirname + \"/../../../__cert/SP1.pem\";\n                api.post(apiURL.replace(\":org_uid\", org_uid))\n                    .set('authtoken', authToken)\n                    .attach('signed_public_key', publicKeyFile)\n                    .attach('enc_private_key', privateKeyFile)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        api.post(apiURL.replace(\":org_uid\", org_uid))\n                            .send({})\n                            .set('authtoken', _data.developer.authtoken)\n                            .expect(httpStatus.UNAUTHORIZED)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    res.body.error.message.should.equal(messageList.ORG_NOT_ADMIN);\n                                    done();\n                                }\n                            });\n                    });\n            } else {\n                isValid.should.equal(false);\n                done();\n            }\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "11d0e74b-acff-4bd8-9212-698f0d525cb4",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give invalid config error.",
                    "fullTitle": "Enterprise Organization Organization.enableSSO Should give invalid config error.",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL.replace(\":org_uid\", org_uid))\n    .send({})\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_SSO_CONFIG_INVALID);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d7730b27-97c6-4527-ba5c-65af5c47af37",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Organization Organization.enableSSO Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL.replace(\":org_uid\", org_uid))\n    .send({})\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4fcfdda4-4887-4f15-b697-4aa6eba87f4a",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "95c03e3a-4476-41a2-9351-ce8e4bc36bd9",
                  "5b4a45f6-1aef-4fc8-910d-e03d8072f15a",
                  "11d0e74b-acff-4bd8-9212-698f0d525cb4",
                  "d7730b27-97c6-4527-ba5c-65af5c47af37",
                  "4fcfdda4-4887-4f15-b697-4aa6eba87f4a"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 300,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "d7a83c66-6a7c-4504-a833-f222e05fee58",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\organization\\getCerts.enterprise.js",
        "file": "\\controllers\\test\\organization\\getCerts.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "21b63cfe-4047-437e-b005-c689919574f7",
            "title": "Organization",
            "fullFile": "C:\\work\\api\\controllers\\test\\organization\\getCerts.enterprise.js",
            "file": "\\controllers\\test\\organization\\getCerts.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "7694d045-74da-484c-afb9-a3e4dee733bd",
                "title": "Organization.getCerts",
                "fullFile": "C:\\work\\api\\controllers\\test\\organization\\getCerts.enterprise.js",
                "file": "\\controllers\\test\\organization\\getCerts.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Organization Organization.getCerts \"before each\" hook",
                    "timedOut": false,
                    "duration": 56,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        _data = data;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4d1d0f12-11fb-405f-8a2f-6071e3edcf33",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Organization Organization.getCerts \"after all\" hook",
                    "timedOut": false,
                    "duration": 2,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "testCollection.organizationRemoveRecords({}, function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "75fdbdde-574e-40b0-a9f9-78626aa993cf",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Organization Organization.getCerts \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e3d94d90-fdf2-4b84-bb0d-7d1ed0cbf706",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get public SSO cert.",
                    "fullTitle": "Enterprise Organization Organization.getCerts Should get public SSO cert.",
                    "timedOut": false,
                    "duration": 46,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar publicKeyFile = __dirname + \"/../../../__cert/okta.cert\";\nvar privateKeyFile = __dirname + \"/../../../__cert/SP1.pem\";\napi.post(\"/enterprise/v1/organizations/:org_uid/sso/certs\".replace(\":org_uid\", org_uid) + \"?authtoken=\" + authToken)\n    .set('authtoken', authToken)\n    .attach('signed_public_key', publicKeyFile)\n    .attach('enc_private_key', privateKeyFile)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.uid != \"\" &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\" &&\n                res.body.output.sso_details.signed_public_key != \"\" &&\n                res.body.output.sso_details.enc_private_key != \"\";\n            if (isValid) {\n                api.get(apiURL.replace(\":org_uid\", org_uid).replace(\":cert_type\", \"public\") + \"?authtoken=\" + authToken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            done();\n                        }\n                    });\n            } else {\n                true.should.equal(false);\n                done();\n            }\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "49c54663-2899-4fea-9d08-e0ad418192e0",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get private SSO cert.",
                    "fullTitle": "Enterprise Organization Organization.getCerts Should get private SSO cert.",
                    "timedOut": false,
                    "duration": 43,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar publicKeyFile = __dirname + \"/../../../__cert/okta.cert\";\nvar privateKeyFile = __dirname + \"/../../../__cert/SP1.pem\";\napi.post(\"/enterprise/v1/organizations/:org_uid/sso/certs\".replace(\":org_uid\", org_uid))\n    .set('authtoken', authToken)\n    .attach('signed_public_key', publicKeyFile)\n    .attach('enc_private_key', privateKeyFile)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.uid != \"\" &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\" &&\n                res.body.output.sso_details.signed_public_key != \"\" &&\n                res.body.output.sso_details.enc_private_key != \"\";\n            if (isValid) {\n                api.get(apiURL.replace(\":org_uid\", org_uid).replace(\":cert_type\", \"private\") + \"?authtoken=\" + authToken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            done();\n                        }\n                    });\n            } else {\n                true.should.equal(false);\n                done();\n            }\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "51bf5ad6-1bbf-4049-9551-74836da66708",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not get SSO certs by Developer.",
                    "fullTitle": "Enterprise Organization Organization.getCerts Should not get SSO certs by Developer.",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL.replace(\":org_uid\", org_uid).replace(\":cert_type\", \"public\"))\n    .set('authtoken', _data.developer.authtoken)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_NOT_ADMIN);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cd118952-1bb7-4b9d-8af0-18ede2e58c18",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should gives invalid file type errors for both files.",
                    "fullTitle": "Enterprise Organization Organization.getCerts Should gives invalid file type errors for both files.",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL.replace(\":org_uid\", org_uid).replace(\":cert_type\", \"public1\"))\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.error.message == messageList.ORG_INVALID_CERT_TYPE;\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7c0d30ef-af8c-4389-ba5d-8d4c95715023",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Organization Organization.getCerts Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL.replace(\":org_uid\", org_uid).replace(\":cert_type\", \"public\"))\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "54280709-cea0-447c-8ff6-fbe05e9eadc2",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "49c54663-2899-4fea-9d08-e0ad418192e0",
                  "51bf5ad6-1bbf-4049-9551-74836da66708",
                  "cd118952-1bb7-4b9d-8af0-18ede2e58c18",
                  "7c0d30ef-af8c-4389-ba5d-8d4c95715023",
                  "54280709-cea0-447c-8ff6-fbe05e9eadc2"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 116,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "809c7989-64e4-49d1-b9c8-b4ceaccbcf93",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\organization\\getDetails.enterprise.js",
        "file": "\\controllers\\test\\organization\\getDetails.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "e39bcebc-3810-4a55-bb64-aeb1057f2922",
            "title": "Organization",
            "fullFile": "C:\\work\\api\\controllers\\test\\organization\\getDetails.enterprise.js",
            "file": "\\controllers\\test\\organization\\getDetails.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "7c681852-3274-4f24-ab3b-df622798fdf9",
                "title": "Organization.getDetails",
                "fullFile": "C:\\work\\api\\controllers\\test\\organization\\getDetails.enterprise.js",
                "file": "\\controllers\\test\\organization\\getDetails.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Organization Organization.getDetails \"before each\" hook",
                    "timedOut": false,
                    "duration": 56,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        org_user_uid = data.organization.user_uid;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a35de462-668a-4005-aae3-0ad755bfd415",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Organization Organization.getDetails \"after all\" hook",
                    "timedOut": false,
                    "duration": 1,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "testCollection.organizationRemoveRecords({}, function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b8adb1b8-391c-46de-9456-9da9410fd57b",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Organization Organization.getDetails \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8ce641dc-d50e-431b-895d-c166b54a2c77",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get organization details.",
                    "fullTitle": "Enterprise Organization Organization.getDetails Should get organization details.",
                    "timedOut": false,
                    "duration": 20,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(\"/enterprise/v1/organizations/:org_uid\".replace(\":org_uid\", org_uid))\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.uid != \"\" &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\" &&\n                typeof(res.body.output.uid) != \"undefined\" &&\n                typeof(res.body.output.name) != \"undefined\" &&\n                typeof(res.body.output.avatar) != \"undefined\" &&\n                typeof(res.body.output.enable_sso) != \"undefined\" &&\n                typeof(res.body.output.org_account) != \"undefined\" &&\n                typeof(res.body.output.default_env) != \"undefined\" &&\n                typeof(res.body.output.default_project) != \"undefined\";\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3467b4dc-b722-47dc-8935-edb11b6b0f48",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not get organization details.",
                    "fullTitle": "Enterprise Organization Organization.getDetails Should not get organization details.",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({ uid: org_user_uid }, function() {\n    api.get(\"/enterprise/v1/organizations/:org_uid\".replace(\":org_uid\", org_uid))\n        .set('authtoken', authToken)\n        .expect(httpStatus.NOT_FOUND)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                res.body.error.message.should.equal(messageList.ORG_USER_NOT_FOUND);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "771eef05-6988-4e7c-bc7c-185df2935b3f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give organization not found error.",
                    "fullTitle": "Enterprise Organization Organization.getDetails Should give organization not found error.",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(\"/enterprise/v1/organizations/:org_uid\".replace(\":org_uid\", \"FAKE_ORG\"))\n    .set('authtoken', authToken)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_NOT_FOUND);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9a6148a9-d597-49e0-81d3-970836406a7f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Organization Organization.getDetails Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(\"/enterprise/v1/organizations/:org_uid\".replace(\":org_uid\", \"FAKE_ORG\"))\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1d595624-5a37-4fae-b94b-d4d35c027bbb",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "3467b4dc-b722-47dc-8935-edb11b6b0f48",
                  "771eef05-6988-4e7c-bc7c-185df2935b3f",
                  "9a6148a9-d597-49e0-81d3-970836406a7f",
                  "1d595624-5a37-4fae-b94b-d4d35c027bbb"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 46,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "303fae5c-19d7-40d4-bee6-13ca8d6b01f8",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\organization\\getOrgMetadata.enterprise.js",
        "file": "\\controllers\\test\\organization\\getOrgMetadata.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "a16e37c8-c053-44c4-9922-5e8f79cb14a7",
            "title": "Organization",
            "fullFile": "C:\\work\\api\\controllers\\test\\organization\\getOrgMetadata.enterprise.js",
            "file": "\\controllers\\test\\organization\\getOrgMetadata.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "09e93e4f-bdb0-40cf-9f37-b257fc1f9552",
                "title": "Organization.getOrgMetadata",
                "fullFile": "C:\\work\\api\\controllers\\test\\organization\\getOrgMetadata.enterprise.js",
                "file": "\\controllers\\test\\organization\\getOrgMetadata.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Organization Organization.getOrgMetadata \"before each\" hook",
                    "timedOut": false,
                    "duration": 60,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        org_name = data.organization.name;\n        _data = data;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9b22449d-f6e0-4164-ac42-4490d4bea7cd",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Organization Organization.getOrgMetadata \"after all\" hook",
                    "timedOut": false,
                    "duration": 2,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "testCollection.organizationRemoveRecords({}, function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fc43bf09-896f-405c-b4b8-e78adc1999b1",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Organization Organization.getOrgMetadata \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9e9c7dc0-6418-47de-b217-b5cad3036b5c",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get org metadata.",
                    "fullTitle": "Enterprise Organization Organization.getOrgMetadata Should get org metadata.",
                    "timedOut": false,
                    "duration": 84,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar config = getImmutable(ssoConfig);\napi.put(\"/enterprise/v1/organizations/:org_uid/ssoconfig\".replace(\":org_uid\", org_uid))\n    .send(config)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.uid != \"\" &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\" &&\n                res.body.output.sso_details.entry_point == config.entry_point &&\n                res.body.output.sso_details.algo_type == config.algo_type &&\n                res.body.output.sso_details.session_time_out_hours == config.session_time_out_hours\n            if (isValid) {\n                var publicKeyFile = __dirname + \"/../../../__cert/okta.cert\";\n                var privateKeyFile = __dirname + \"/../../../__cert/SP1.pem\";\n                api.post(\"/enterprise/v1/organizations/:org_uid/sso/certs\".replace(\":org_uid\", org_uid))\n                    .set('authtoken', _data.admin.authtoken)\n                    .attach('signed_public_key', publicKeyFile)\n                    .attach('enc_private_key', privateKeyFile)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        api.post(\"/enterprise/v1/organizations/:org_uid/sso/enable\".replace(\":org_uid\", org_uid))\n                            .send({})\n                            .set('authtoken', authToken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    api.get(apiURL.replace(\":org_name\", org_name))\n                                        .expect(httpStatus.OK)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                (res.text.indexOf('<?xml version=\"1.0\"?>') == 0).should.equal(true);\n                                                done();\n                                            }\n                                        });\n                                }\n                            });\n                    });\n            } else {\n                isValid.should.equal(false);\n                done();\n            }\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ef92af7d-d1a9-4e15-97f1-15347548543e",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "ef92af7d-d1a9-4e15-97f1-15347548543e"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 84,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "36f61277-100b-49e2-aba6-bb4c74c00860",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\organization\\getOrgSSOInfo.enterprise.js",
        "file": "\\controllers\\test\\organization\\getOrgSSOInfo.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "3367f219-d7b8-4571-babf-d6e5e8ec6378",
            "title": "Organization",
            "fullFile": "C:\\work\\api\\controllers\\test\\organization\\getOrgSSOInfo.enterprise.js",
            "file": "\\controllers\\test\\organization\\getOrgSSOInfo.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "24e726b0-4ecf-42ba-92ce-ec027dcd019a",
                "title": "OrganizationUser.getOrgSSOInfo",
                "fullFile": "C:\\work\\api\\controllers\\test\\organization\\getOrgSSOInfo.enterprise.js",
                "file": "\\controllers\\test\\organization\\getOrgSSOInfo.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Organization OrganizationUser.getOrgSSOInfo \"before each\" hook",
                    "timedOut": false,
                    "duration": 56,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        _data = data;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6b2864b9-ddef-47df-a7b9-d6be03de4cc7",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Organization OrganizationUser.getOrgSSOInfo \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "af398f02-d195-4390-906d-6f17462fb9a9",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should redirect user to SSO login page.",
                    "fullTitle": "Enterprise Organization OrganizationUser.getOrgSSOInfo Should redirect user to SSO login page.",
                    "timedOut": false,
                    "duration": 84,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar config = getImmutable(ssoConfig);\napi.put(\"/enterprise/v1/organizations/:org_uid/ssoconfig\".replace(\":org_uid\", _data.organization.uid))\n    .send(config)\n    .set('authtoken', _data.owner.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        var publicKeyFile = __dirname + \"/../../../__cert/okta.cert\";\n        var privateKeyFile = __dirname + \"/../../../__cert/SP1.pem\";\n        api.post(\"/enterprise/v1/organizations/:org_uid/sso/certs\".replace(\":org_uid\", _data.organization.uid))\n            .set('authtoken', _data.owner.authtoken)\n            .attach('signed_public_key', publicKeyFile)\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                api.post(\"/enterprise/v1/organizations/:org_uid/sso/enable\".replace(\":org_uid\", _data.organization.uid))\n                    .set('authtoken', _data.owner.authtoken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        api.get(\"/enterprise/v1/login/sso?org=\" + _data.organization.name)\n                            .expect(httpStatus.MOVED_TEMPORARILY)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    var url = \"https://dev-528399.oktapreview.com/app/builtiodev528399_oktasp1_1/exkbbi8vwj2OsHjbE0h7/sso/saml?SAMLRequest=\";\n                                    (res.headers.location.indexOf(ssoConfig.entry_point) == 0).should.equal(true);\n                                    done();\n                                }\n                            });\n                    });\n            });\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3a8e72af-26ba-4d18-9d29-b42b0e91f1db",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "3a8e72af-26ba-4d18-9d29-b42b0e91f1db"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 84,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "0757d7f5-8afb-48bb-a8b9-43782b6ba58d",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\organization\\invitationAccept.enterprise.js",
        "file": "\\controllers\\test\\organization\\invitationAccept.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "b93a3097-905e-4571-aa89-ff29e269c5a2",
            "title": "Organization",
            "fullFile": "C:\\work\\api\\controllers\\test\\organization\\invitationAccept.enterprise.js",
            "file": "\\controllers\\test\\organization\\invitationAccept.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "2e50a283-7242-470b-9fd4-2d6f5fc1e066",
                "title": "Organization.invitationAccept",
                "fullFile": "C:\\work\\api\\controllers\\test\\organization\\invitationAccept.enterprise.js",
                "file": "\\controllers\\test\\organization\\invitationAccept.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Organization Organization.invitationAccept \"before each\" hook",
                    "timedOut": false,
                    "duration": 60,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        _data = data;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f8e097fa-5397-4db5-a0e9-3fb4fee456b3",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Organization Organization.invitationAccept \"after all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "98c74ea2-164a-4909-90c1-9c85125d09d4",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Organization Organization.invitationAccept \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a9979703-29e1-4885-a3ee-d5d299f4e796",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should accept invitation.",
                    "fullTitle": "Enterprise Organization Organization.invitationAccept Should accept invitation.",
                    "timedOut": false,
                    "duration": 3179,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar email = \"test.user+1@raweng.com\";\napi.put(\"/enterprise/v1/organizations/:org_uid/transfer\".replace(\":org_uid\", org_uid))\n    .send({\n        \"email\": email\n    })\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            if (res.body.output.message == messageList.ORG_OWNERSHIP_INVITATION_SEND) {\n                signUpUser({\n                    done: done,\n                    email: email\n                }, function(res) {\n                    var newUserAuthtoken = res.body.output.authtoken;\n                    api.post(apiURL.replace(\":org_uid\", org_uid))\n                        .send({})\n                        .set('authtoken', newUserAuthtoken)\n                        .expect(httpStatus.OK)\n                        .end(function(err, res) {\n                            if (res.body.output.message == messageList.ORG_OWNERSHIP_INVITATION_ACCEPTED) {\n                                api.get(\"/enterprise/v1/organizations/:org_uid\".replace(\":org_uid\", org_uid))\n                                    .set('authtoken', newUserAuthtoken)\n                                    .expect(httpStatus.OK)\n                                    .end(function(err, res) {\n                                        res.body.output.org_account.email.should.equal(email);\n                                        done();\n                                    });\n                            } else {\n                                true.should.equal(false);\n                                done();\n                            }\n                        });\n                });\n            } else {\n                true.should.equal(false);\n                done();\n            }\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "629ab7fd-93ed-4b1f-977b-b8feff57efd1",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as invitation not found.",
                    "fullTitle": "Enterprise Organization Organization.invitationAccept Should give error as invitation not found.",
                    "timedOut": false,
                    "duration": 2766,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar email = \"test.user+1@raweng.com\";\napi.put(\"/enterprise/v1/organizations/:org_uid/transfer\".replace(\":org_uid\", org_uid))\n    .send({\n        \"email\": email\n    })\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            if (res.body.output.message == messageList.ORG_OWNERSHIP_INVITATION_SEND) {\n                signUpUser({\n                    done: done,\n                    email: email\n                }, function(res) {\n                    var userAuthtoken = res.body.output.authtoken;\n                    api.post(apiURL.replace(\":org_uid\", org_uid))\n                        .send({})\n                        .set('authtoken', userAuthtoken)\n                        .expect(httpStatus.OK)\n                        .end(function(err, res) {\n                            if (res.body.output.message == messageList.ORG_OWNERSHIP_INVITATION_ACCEPTED) {\n                                api.post(apiURL.replace(\":org_uid\", org_uid))\n                                    .send({})\n                                    .set('authtoken', userAuthtoken)\n                                    .expect(httpStatus.BAD_REQUEST)\n                                    .end(function(err, res) {\n                                        res.body.error.message.should.equal(messageList.ORG_OWNERSHIP_INVITATION_NOT_FOUND);\n                                        done();\n                                    });\n                            } else {\n                                true.should.equal(false);\n                                done();\n                            }\n                        });\n                });\n            } else {\n                true.should.equal(false);\n                done();\n            }\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9c8616db-7aa0-4d53-a274-749f8e73d276",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should accept invitation by new SSO user.",
                    "fullTitle": "Enterprise Organization Organization.invitationAccept Should accept invitation by new SSO user.",
                    "timedOut": false,
                    "duration": 8165,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar email = \"amber.more@raweng.com\";\nvar _ssoConfig = getImmutable(ssoConfig);\nvar firstOwnerAuthtoken = _.first(_data.owner.authtoken);\napi.put(\"/enterprise/v1/organizations/:org_uid/ssoconfig\".replace(\":org_uid\", _data.organization.uid))\n    .send(_ssoConfig)\n    .set('authtoken', _data.owner.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        var publicKeyFile = __dirname + \"/../../../__cert/okta.cert\";\n        var privateKeyFile = __dirname + \"/../../../__cert/SP1.pem\";\n        api.post(\"/enterprise/v1/organizations/:org_uid/sso/certs\".replace(\":org_uid\", org_uid))\n            .set('authtoken', _data.admin.authtoken)\n            .attach('signed_public_key', publicKeyFile)\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                api.post(\"/enterprise/v1/organizations/:org_uid/sso/enable\".replace(\":org_uid\", _data.organization.uid))\n                    .set('authtoken', _data.owner.authtoken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        api.put(\"/enterprise/v1/organizations/:org_uid/transfer\".replace(\":org_uid\", org_uid))\n                            .send({\n                                \"email\": email\n                            })\n                            .set('authtoken', authToken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    if (res.body.output.message == messageList.ORG_OWNERSHIP_INVITATION_SEND) {\n                                        api.get(\"/enterprise/v1/login/sso?org=\" + _data.organization.name)\n                                            .expect(httpStatus.MOVED_TEMPORARILY)\n                                            .end(function(err, res) {\n                                                if (err) {\n                                                    done(err);\n                                                } else {\n                                                    if (res.headers.location.indexOf(ssoConfig.entry_point) == 0) {\n                                                        var data = usersData.SMALRespWithoutAuthtoken;\n                                                        api.post(\"/enterprise/v1/login/sso\")\n                                                            .send(data)\n                                                            .expect(httpStatus.MOVED_TEMPORARILY)\n                                                            .end(function(err, res) {\n                                                                if (err) {\n                                                                    done(err);\n                                                                } else {\n                                                                    var qs = querystring.parse(res.headers.location);\n                                                                    var newUserAuthToken = qs[\"sid\"] || qs[config.enterprise.sso.loginSuccessURL + \"?sid\"] || \"\";\n                                                                    api.get(\"/enterprise/v1/organizations/\" + _data.organization.uid)\n                                                                        .set('authtoken', newUserAuthToken)\n                                                                        .expect(httpStatus.OK)\n                                                                        .end(function(err, res) {\n                                                                            if (err) {\n                                                                                done(err);\n                                                                            } else {\n                                                                                var isValid = typeof(res.body.output.owner_invitation) != \"undefined\";\n                                                                                if (isValid) {\n                                                                                    _.each(res.body.output.organizations, function(orgItem) {\n                                                                                        isValid = isValid &&\n                                                                                            typeof(orgItem._id) == \"undefined\" &&\n                                                                                            typeof(orgItem.__v) == \"undefined\" &&\n                                                                                            typeof(orgItem.org_uid) != \"undefined\" &&\n                                                                                            typeof(orgItem.org_name) != \"undefined\" &&\n                                                                                            typeof(orgItem.avatar) != \"undefined\";\n                                                                                    });\n                                                                                    if (isValid) {\n                                                                                        api.post(apiURL.replace(\":org_uid\", org_uid))\n                                                                                            .send({})\n                                                                                            .set('authtoken', newUserAuthToken)\n                                                                                            .expect(httpStatus.OK)\n                                                                                            .end(function(err, res) {\n                                                                                                if (res.body.output.message == messageList.ORG_OWNERSHIP_INVITATION_ACCEPTED) {\n                                                                                                    api.get(\"/enterprise/v1/organizations/\" + _data.organization.uid)\n                                                                                                        .set('authtoken', newUserAuthToken)\n                                                                                                        .expect(httpStatus.OK)\n                                                                                                        .end(function(err, res) {\n                                                                                                            if (err) {\n                                                                                                                done(err);\n                                                                                                            } else {\n                                                                                                                if (typeof(res.body.output.owner_invitation) == \"undefined\" &&\n                                                                                                                    res.body.output.is_owner && res.body.output.is_admin &&\n                                                                                                                    res.body.output.is_developer) {\n                                                                                                                    true.should.equal(true);\n                                                                                                                    done();\n                                                                                                                } else {\n                                                                                                                    false.should.equal(true);\n                                                                                                                    done();\n                                                                                                                }\n                                                                                                            }\n                                                                                                        });\n                                                                                                } else {\n                                                                                                    false.should.equal(true);\n                                                                                                    done();\n                                                                                                }\n                                                                                            });\n                                                                                    } else {\n                                                                                        false.should.equal(true);\n                                                                                        done();\n                                                                                    }\n                                                                                } else {\n                                                                                    false.should.equal(true);\n                                                                                    done();\n                                                                                }\n                                                                            }\n                                                                        });\n                                                                }\n                                                            });\n                                                    } else {\n                                                        true.should.equal(false);\n                                                        done();\n                                                    }\n                                                }\n                                            });\n                                    } else {\n                                        true.should.equal(false);\n                                        done();\n                                    }\n                                }\n                            });\n                    });\n            });\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "91496a43-7bfd-42e0-abe8-6abe67165649",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as organization not found.",
                    "fullTitle": "Enterprise Organization Organization.invitationAccept Should give error as organization not found.",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar email = \"test.user+1@raweng.com\";\napi.put(\"/enterprise/v1/organizations/:org_uid/transfer\".replace(\":org_uid\", \"FAKE_ORG\"))\n    .send({\n        \"email\": email\n    })\n    .set('authtoken', authToken)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_NOT_FOUND);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fff6ae1b-2691-4841-80cf-bc080d584501",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Organization Organization.invitationAccept Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL.replace(\":org_uid\", org_uid))\n    .send({})\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "85eea41e-8d38-4e7a-bbc9-095d3a67d8e4",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "629ab7fd-93ed-4b1f-977b-b8feff57efd1",
                  "9c8616db-7aa0-4d53-a274-749f8e73d276",
                  "91496a43-7bfd-42e0-abe8-6abe67165649",
                  "fff6ae1b-2691-4841-80cf-bc080d584501",
                  "85eea41e-8d38-4e7a-bbc9-095d3a67d8e4"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 14122,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "08ac1cbc-9fc0-4566-a7b3-d760308d4116",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\organization\\invitationReject.enterprise.js",
        "file": "\\controllers\\test\\organization\\invitationReject.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "53956b25-c4b8-43cb-8730-b3b62dce7c8e",
            "title": "Organization",
            "fullFile": "C:\\work\\api\\controllers\\test\\organization\\invitationReject.enterprise.js",
            "file": "\\controllers\\test\\organization\\invitationReject.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "f7c17926-8e78-4960-8e8e-8d9ada7a9b39",
                "title": "Organization.invitationReject",
                "fullFile": "C:\\work\\api\\controllers\\test\\organization\\invitationReject.enterprise.js",
                "file": "\\controllers\\test\\organization\\invitationReject.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Organization Organization.invitationReject \"before each\" hook",
                    "timedOut": false,
                    "duration": 64,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        _data = data;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bb658d23-5c83-4894-a3ff-3d6adc730cfa",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Organization Organization.invitationReject \"after all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f04ac711-6d72-440a-870a-a386151067d3",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Organization Organization.invitationReject \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1a83a36c-b340-4dfb-8917-fa3ae2d488b8",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should accept invitation.",
                    "fullTitle": "Enterprise Organization Organization.invitationReject Should accept invitation.",
                    "timedOut": false,
                    "duration": 3598,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar email = \"test.user+1@raweng.com\";\napi.put(\"/enterprise/v1/organizations/:org_uid/transfer\".replace(\":org_uid\", org_uid))\n    .send({\n        \"email\": email\n    })\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            if (res.body.output.message == messageList.ORG_OWNERSHIP_INVITATION_SEND) {\n                signUpUser({\n                    done: done,\n                    email: email\n                }, function(res) {\n                    api.post(apiURL.replace(\":org_uid\", org_uid))\n                        .send({})\n                        .set('authtoken', res.body.output.authtoken)\n                        .expect(httpStatus.OK)\n                        .end(function(err, res) {\n                            res.body.output.message.should.equal(messageList.ORG_OWNERSHIP_INVITATION_REJECTED);\n                            done();\n                        });\n                });\n            } else {\n                true.should.equal(false);\n                done();\n            }\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c9296b25-2977-4c8a-999a-f66a2ee97e29",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as invitation not found.",
                    "fullTitle": "Enterprise Organization Organization.invitationReject Should give error as invitation not found.",
                    "timedOut": false,
                    "duration": 2346,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar email = \"test.user+1@raweng.com\";\napi.put(\"/enterprise/v1/organizations/:org_uid/transfer\".replace(\":org_uid\", org_uid))\n    .send({\n        \"email\": email\n    })\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            if (res.body.output.message == messageList.ORG_OWNERSHIP_INVITATION_SEND) {\n                signUpUser({\n                    done: done,\n                    email: email\n                }, function(res) {\n                    var userAuthtoken = res.body.output.authtoken;\n                    api.post(apiURL.replace(\":org_uid\", org_uid))\n                        .send({})\n                        .set('authtoken', userAuthtoken)\n                        .expect(httpStatus.OK)\n                        .end(function(err, res) {\n                            if (res.body.output.message == messageList.ORG_OWNERSHIP_INVITATION_REJECTED) {\n                                api.post(apiURL.replace(\":org_uid\", org_uid))\n                                    .send({})\n                                    .set('authtoken', userAuthtoken)\n                                    .expect(httpStatus.BAD_REQUEST)\n                                    .end(function(err, res) {\n                                        res.body.error.message.should.equal(messageList.ORG_OWNERSHIP_INVITATION_NOT_FOUND);\n                                        done();\n                                    });\n                            } else {\n                                true.should.equal(false);\n                                done();\n                            }\n                        });\n                });\n            } else {\n                true.should.equal(false);\n                done();\n            }\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f6877430-0210-4db5-8fb1-a5c0944c2019",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as organization not found.",
                    "fullTitle": "Enterprise Organization Organization.invitationReject Should give error as organization not found.",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar email = \"test.user+1@raweng.com\";\napi.put(\"/enterprise/v1/organizations/:org_uid/transfer\".replace(\":org_uid\", \"FAKE_ORG\"))\n    .send({\n        \"email\": email\n    })\n    .set('authtoken', authToken)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_NOT_FOUND);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "13f393a7-bc6b-40ff-bfbe-83d2eab6c36f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Organization Organization.invitationReject Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL.replace(\":org_uid\", org_uid))\n    .send({})\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8ece1526-a68a-4514-a2fe-d410c9a733bb",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "c9296b25-2977-4c8a-999a-f66a2ee97e29",
                  "f6877430-0210-4db5-8fb1-a5c0944c2019",
                  "13f393a7-bc6b-40ff-bfbe-83d2eab6c36f",
                  "8ece1526-a68a-4514-a2fe-d410c9a733bb"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 5957,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "43ea4acf-6de1-4c44-b540-543492131e69",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\organization\\invite.enterprise.js",
        "file": "\\controllers\\test\\organization\\invite.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "0de41a6f-5ad1-46ed-9f60-3f93e21189ee",
            "title": "Organization",
            "fullFile": "C:\\work\\api\\controllers\\test\\organization\\invite.enterprise.js",
            "file": "\\controllers\\test\\organization\\invite.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "581b9717-59f4-406c-a8d8-686b581b43cd",
                "title": "Organization.invite",
                "fullFile": "C:\\work\\api\\controllers\\test\\organization\\invite.enterprise.js",
                "file": "\\controllers\\test\\organization\\invite.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Organization Organization.invite \"before each\" hook",
                    "timedOut": false,
                    "duration": 68,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        _data = data;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "924f3018-bbe3-4985-9cc3-047cf749e3d7",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Organization Organization.invite \"after all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "79242780-78a1-47c8-9822-a74246bc6d48",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Organization Organization.invite \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "489d392c-121e-49bc-beea-1b0317dd68df",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should send invitation to existing flow user.",
                    "fullTitle": "Enterprise Organization Organization.invite Should send invitation to existing flow user.",
                    "timedOut": false,
                    "duration": 3482,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar email = \"test.user+1@raweng.com\";\nsignUpUser({\n    done: done,\n    email: email\n}, function(res) {\n    api.post(apiURL.replace(\":org_uid\", org_uid))\n        .send({\n            \"org_roles\": [_data.roles[\"Developer\"].uid],\n            \"emails\": [email]\n        })\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                if (res.body.output.message == messageList.ORG_INVITATION_SEND) {\n                    _models.OrganizationUser.findOne({\n                        email: email,\n                        org_uid: org_uid,\n                        deleted_at: null\n                    }, function(err, orgUser) {\n                        (typeof(orgUser) != \"undefined\").should.equal(true);\n                        done();\n                    });\n                } else {\n                    true.should.equal(false);\n                    done();\n                }\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b3183dc8-dadb-4880-8fe3-956e5bdedb47",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should only invite allowed count users.",
                    "fullTitle": "Enterprise Organization Organization.invite Should only invite allowed count users.",
                    "timedOut": false,
                    "duration": 3029,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar email = \"test.user+1@raweng.com\";\nsignUpUser({\n    done: done,\n    email: email\n}, function(res) {\n    api.post(apiURL.replace(\":org_uid\", org_uid))\n        .send({\n            \"org_roles\": [_data.roles[\"Developer\"].uid],\n            \"emails\": [email, \"test.user+1@raweng.com\", \"test.user+1@rawenG.com\", \"test.user+2@raweng.com\",\n                \"test.user+3@raweng.com\", \"test.user+4@raweng.com\", \"test.user+5@raweng.com\",\n                \"test.user+6@raweng.com\", \"test.user+7@raweng.com\"\n            ]\n        })\n        .set('authtoken', authToken)\n        .expect(httpStatus.BAD_REQUEST)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                var error_message = messageList.ORG_USER_MAX_LIMIT_REACHED;\n                error_message = error_message.replace(\"%%USER_COUNT%%\", 10);\n                res.body.error.message.should.equal(error_message);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "88e6313e-70d7-4cb4-8f74-0b1adbbab8d8",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should list projects of current organization.",
                    "fullTitle": "Enterprise Organization Organization.invite Should list projects of current organization.",
                    "timedOut": false,
                    "duration": 2365,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempOrgBody = getImmutable(orgBody);\ntempOrgBody.name = \"Org3\"\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\napi.post(\"/enterprise/v1/organizations\")\n    .send(tempOrgBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var org3 = res.body.output;\n            var new_org_uid = org3.uid;\n            var admin_authtoken = _data.admin.authtoken;\n            var role = getImmutable(roleBody);\n            role.name = \"role5\";\n            role.projects = [];\n            api.post(\"/enterprise/v1/organizations/:org_uid/role\".replace(\":org_uid\", new_org_uid))\n                .send(role)\n                .set('authtoken', authToken)\n                .expect(httpStatus.CREATED)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        var orgRole = res.body.output;\n                        api.post(apiURL.replace(\":org_uid\", new_org_uid))\n                            .send({\n                                \"org_roles\": [orgRole.uid],\n                                \"emails\": [_data.admin.email]\n                            })\n                            .set('authtoken', authToken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    api.get(\"/enterprise/v1/projects\")\n                                        .set('org_uid', new_org_uid)\n                                        .set('authtoken', admin_authtoken)\n                                        .expect(httpStatus.OK)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                var isValid = true;\n                                                _.each(res.body.output.projects, function(proj) {\n                                                    if (proj.org_uid != new_org_uid) {\n                                                        isValid = false;\n                                                    }\n                                                });\n                                                isValid.should.equal(true);\n                                                done();\n                                            }\n                                        });\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2cd84a40-828d-40cb-86ba-cc91b6ac3cad",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not send invitation to existing organization user.",
                    "fullTitle": "Enterprise Organization Organization.invite Should not send invitation to existing organization user.",
                    "timedOut": false,
                    "duration": 18,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar email = _data.developer.email;\napi.post(apiURL.replace(\":org_uid\", org_uid))\n    .send({\n        \"org_roles\": [_data.roles[\"Developer\"].uid],\n        \"emails\": [email]\n    })\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            if (res.body.output.message == messageList.ORG_INVITATION_SEND) {\n                _models.OrganizationUser.find({\n                    email: email,\n                    org_uid: org_uid,\n                    deleted_at: null\n                }, function(err, orgUsers) {\n                    (orgUsers.length == 1).should.equal(true);\n                    done();\n                });\n            } else {\n                true.should.equal(false);\n                done();\n            }\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0e7ee0f7-a826-406b-80d2-9145e1a21ddf",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should send invitation to delete user from organization.",
                    "fullTitle": "Enterprise Organization Organization.invite Should send invitation to delete user from organization.",
                    "timedOut": false,
                    "duration": 5838,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar user_uid = \"\";\nvar email = _data.developer.email;\nvar inviteUser = function(callback) {\n    api.post(apiURL.replace(\":org_uid\", org_uid))\n        .send({\n            \"org_roles\": [_data.roles.Developer.uid],\n            \"emails\": [email]\n        })\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                if (res.body.output.message == messageList.ORG_INVITATION_SEND) {\n                    var tempLoginBody = getImmutable(loginBody);\n                    tempLoginBody.email = email;\n                    commonMock.flowLogin(httpmock, \"enterprise\");\n                    api.post(\"/enterprise/v1/login\")\n                        .send(tempLoginBody)\n                        .expect(httpStatus.OK)\n                        .end(function(err, res) {\n                            if (err) {\n                                done(err);\n                            } else {\n                                var userAuthToken = res.body.output.authtoken;\n                                commonMock.brainTreeClientToken(httpmock, \"enterprise\");\n                                api.get(\"/enterprise/v1/user\")\n                                    .set('authtoken', userAuthToken)\n                                    .set('org_uid', org_uid)\n                                    .expect(httpStatus.OK)\n                                    .end(function(err, res) {\n                                        if (err) {\n                                            done(err);\n                                        } else {\n                                            user_uid = res.body.output.uid;\n                                            _models.OrganizationUser.findOne({\n                                                user_uid: user_uid,\n                                                org_uid: org_uid,\n                                                deleted_at: null\n                                            }).lean().exec(function(err, orgUser) {\n                                                callback(err, orgUser);\n                                            });\n                                        }\n                                    });\n                            }\n                        });\n                } else {\n                    true.should.equal(false);\n                    done();\n                }\n            }\n        });\n};\n\n_models.OrganizationUser.findOne({\n    user_uid: _data.developer.uid\n}).lean().exec(function(error, orgUser) {\n    api.delete(\"/enterprise/v1/organizations/:org_uid/users/:org_user_uid\"\n            .replace(\":org_uid\", org_uid)\n            .replace(\":org_user_uid\", orgUser.uid))\n        .send({})\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                if (res.body.output.message == messageList.ORG_USER_DELETED_SUCCESS) {\n                    inviteUser(function(error, orgUser) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            (orgUser.uid != \"\" &&\n                                orgUser.user_uid == user_uid &&\n                                orgUser.invitation == null &&\n                                orgUser.org_uid == org_uid\n                            ).should.equal(true);\n                            done();\n                        }\n                    });\n                } else {\n                    true.should.equal(false);\n                    done();\n                }\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f1abb630-2564-47a3-8bc8-83b67bf5552a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give organization not found error.",
                    "fullTitle": "Enterprise Organization Organization.invite Should give organization not found error.",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar email = \"test.user+1@raweng.com\";\napi.post(apiURL.replace(\":org_uid\", \"FAKE_ORG\"))\n    .send({\n        \"org_roles\": [_data.developer.uid],\n        \"emails\": [email]\n    })\n    .set('authtoken', authToken)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_NOT_FOUND);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "edd84594-a149-4c59-adef-52edbe6f402e",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should send invitation to existing multiple flow users.",
                    "fullTitle": "Enterprise Organization Organization.invite Should send invitation to existing multiple flow users.",
                    "timedOut": false,
                    "duration": 4278,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar email = \"test.user+1@raweng.com\";\nsignUpUser({\n    done: done,\n    email: email\n}, function(res) {\n    var email = \"test.user+2@raweng.com\";\n    signUpUser({\n        done: done,\n        email: email\n    }, function(res) {\n        api.post(apiURL.replace(\":org_uid\", org_uid))\n            .send({\n                \"org_roles\": [_data.developer.uid],\n                \"emails\": [\"test.user+1@raweng.com\", \"test.user+2@raweng.com\"]\n            })\n            .set('authtoken', authToken)\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    res.body.output.message.should.equal(messageList.ORG_INVITATION_SEND);\n                    done();\n                }\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f705c6bc-5252-45a3-b2fe-b309425fe2b8",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should validate invitation body.",
                    "fullTitle": "Enterprise Organization Organization.invite Should validate invitation body.",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL.replace(\":org_uid\", org_uid))\n    .send({})\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            (res.body.error.emails.message == messageList.ORG_INVITEE_EMAIL_SET_REQUIRED &&\n                res.body.error.org_roles.message == messageList.ORG_ROLE_SET_REQUIRED).should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "21449dde-f3ed-4cf6-b253-07044bda4728",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should validate email set.",
                    "fullTitle": "Enterprise Organization Organization.invite Should validate email set.",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL.replace(\":org_uid\", org_uid))\n    .send({\n        \"org_roles\": [_data.developer.uid],\n        \"emails\": [\"test.user+1@raweng.com\", \"\"]\n    })\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            (res.body.error.emails.message == messageList.ORG_INVITEE_EMAIL_SET_REQUIRED).should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e6b932ef-f312-4794-adf1-866db4f51137",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should send invitation to new flow user.",
                    "fullTitle": "Enterprise Organization Organization.invite Should send invitation to new flow user.",
                    "timedOut": false,
                    "duration": 2496,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar email = \"test.user+1@raweng.com\";\napi.post(apiURL.replace(\":org_uid\", org_uid))\n    .send({\n        \"org_roles\": [_data.developer.uid],\n        \"emails\": [email]\n    })\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            if (res.body.output.message == messageList.ORG_INVITATION_SEND) {\n                signUpUser({\n                    done: done,\n                    email: email\n                }, function(res) {\n                    var userAuthToken = res.body.output.authtoken;\n                    commonMock.brainTreeClientToken(httpmock, \"enterprise\");\n                    api.get(\"/enterprise/v1/user\")\n                        .set('authtoken', userAuthToken)\n                        .set('org_uid', org_uid)\n                        .expect(httpStatus.OK)\n                        .end(function(err, res) {\n                            if (err) {\n                                done(err);\n                            } else {\n                                var isValid = res.body.output.uid != \"\" &&\n                                    typeof(res.body.output._id) == \"undefined\" &&\n                                    typeof(res.body.output.__v) == \"undefined\" &&\n                                    res.body.output.org_uid == org_uid;\n                                isValid.should.equal(true);\n                                done();\n                            }\n                        });\n                });\n            } else {\n                true.should.equal(false);\n                done();\n            }\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "600f8c96-64a6-47ca-8ba7-7dce1b8752c4",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give admin role required error.",
                    "fullTitle": "Enterprise Organization Organization.invite Should give admin role required error.",
                    "timedOut": false,
                    "duration": 17,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar email = \"test.user+1@raweng.com\";\napi.post(apiURL.replace(\":org_uid\", org_uid))\n    .send({\n        \"org_roles\": [_data.developer.uid],\n        \"emails\": [\"test.user+2@raweng.com\"]\n    })\n    .set('authtoken', _data.developer.authtoken)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_NOT_ADMIN);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b28aff0f-c220-4261-9cc3-45d5f28c9893",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should send invitation to existing google user.",
                    "fullTitle": "Enterprise Organization Organization.invite Should send invitation to existing google user.",
                    "timedOut": false,
                    "duration": 2996,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar email = \"test.user+1000@raweng.com\";\ncommonMock.setSignUpMocks(httpmock, \"enterprise\", {\n    email: email,\n    access_token: plus1000User.access_token\n});\ncommonMock.googleLogin(httpmock, \"enterprise\", {\n    email: email\n});\napi.post(\"/enterprise/v1/login/google\")\n    .send(plus1000User)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            api.post(apiURL.replace(\":org_uid\", org_uid))\n                .send({\n                    \"org_roles\": [_data.developer.uid],\n                    \"emails\": [email]\n                })\n                .set('authtoken', authToken)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        if (res.body.output.message == messageList.ORG_INVITATION_SEND) {\n                            commonMock.googleLogin(httpmock, \"enterprise\", {\n                                email: email\n                            });\n                            api.post(\"/enterprise/v1/login/google\")\n                                .send(plus1000User)\n                                .expect(httpStatus.OK)\n                                .end(function(err, res) {\n                                    if (err) {\n                                        done(err);\n                                    } else {\n                                        var isValid = res.body.output.uid != \"\" &&\n                                            typeof(res.body.output._id) == \"undefined\" &&\n                                            typeof(res.body.output.__v) == \"undefined\";\n                                        if (isValid) {\n                                            var userAuthToken = res.body.output.authtoken;\n                                            commonMock.brainTreeClientToken(httpmock, \"enterprise\");\n                                            api.get(\"/enterprise/v1/user\")\n                                                .set('authtoken', userAuthToken)\n                                                .set('org_uid', org_uid)\n                                                .expect(httpStatus.OK)\n                                                .end(function(err, res) {\n                                                    if (err) {\n                                                        done(err);\n                                                    } else {\n                                                        var isValid = res.body.output.uid != \"\" &&\n                                                            typeof(res.body.output._id) == \"undefined\" &&\n                                                            typeof(res.body.output.__v) == \"undefined\" &&\n                                                            res.body.output.org_uid == org_uid;\n                                                        isValid.should.equal(true);\n                                                        done();\n                                                    }\n                                                });\n                                        } else {\n                                            true.should.equal(false);\n                                            done();\n                                        }\n                                    }\n                                });\n                        } else {\n                            true.should.equal(false);\n                            done();\n                        }\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "394866c1-836a-45c4-93ef-cb575d752187",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should send invitation to new google user.",
                    "fullTitle": "Enterprise Organization Organization.invite Should send invitation to new google user.",
                    "timedOut": false,
                    "duration": 2748,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar email = \"test.user+1000@raweng.com\";\napi.post(apiURL.replace(\":org_uid\", org_uid))\n    .send({\n        \"org_roles\": [_data.developer.uid],\n        \"emails\": [email]\n    })\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            if (res.body.output.message == messageList.ORG_INVITATION_SEND) {\n                commonMock.setSignUpMocks(httpmock, \"enterprise\", {\n                    email: email,\n                    access_token: plus1000User.access_token\n                });\n                commonMock.googleLogin(httpmock, \"enterprise\", {\n                    email: email\n                });\n                api.post(\"/enterprise/v1/login/google\")\n                    .send(plus1000User)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            var isValid = res.body.output.uid != \"\" &&\n                                typeof(res.body.output._id) == \"undefined\" &&\n                                typeof(res.body.output.__v) == \"undefined\";\n                            if (isValid) {\n                                var userAuthToken = res.body.output.authtoken;\n                                commonMock.brainTreeClientToken(httpmock, \"enterprise\");\n                                api.get(\"/enterprise/v1/user\")\n                                    .set('authtoken', userAuthToken)\n                                    .set('org_uid', org_uid)\n                                    .expect(httpStatus.OK)\n                                    .end(function(err, res) {\n                                        if (err) {\n                                            done(err);\n                                        } else {\n                                            var isValid = res.body.output.uid != \"\" &&\n                                                typeof(res.body.output._id) == \"undefined\" &&\n                                                typeof(res.body.output.__v) == \"undefined\" &&\n                                                res.body.output.org_uid == org_uid;\n                                            isValid.should.equal(true);\n                                            done();\n                                        }\n                                    });\n                            } else {\n                                true.should.equal(false);\n                                done();\n                            }\n                        }\n                    });\n            } else {\n                true.should.equal(false);\n                done();\n            }\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9d689cb4-6315-48ea-9022-a7f301438bf1",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get organization plan for login user.",
                    "fullTitle": "Enterprise Organization Organization.invite Should get organization plan for login user.",
                    "timedOut": false,
                    "duration": 3497,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar email = \"test.user+03@raweng.com\";\napi.post(apiURL.replace(\":org_uid\", org_uid))\n    .send({\n        \"org_roles\": [_data.developer.uid],\n        \"emails\": [email]\n    })\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            if (res.body.output.message == messageList.ORG_INVITATION_SEND) {\n                var tempLoginBody = getImmutable(loginBody);\n                tempLoginBody.email = email;\n                commonMock.flowLogin(httpmock, \"enterprise\");\n                api.post(\"/enterprise/v1/login\")\n                    .send(tempLoginBody)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            var userAuthToken = res.body.output.authtoken;\n                            commonMock.brainTreeClientToken(httpmock, \"enterprise\");\n                            api.get(\"/enterprise/v1/user\")\n                                .set('authtoken', userAuthToken)\n                                .set('org_uid', org_uid)\n                                .expect(httpStatus.OK)\n                                .end(function(err, res) {\n                                    if (err) {\n                                        done(err);\n                                    } else {\n                                        var isValid = res.body.output.uid != \"\" &&\n                                            typeof(res.body.output._id) == \"undefined\" &&\n                                            typeof(res.body.output.__v) == \"undefined\" &&\n                                            typeof(res.body.output.user_plan) != \"undefined\" &&\n                                            res.body.output.org_uid == org_uid;\n                                        isValid.should.equal(true);\n                                        done();\n                                    }\n                                });\n                        }\n                    });\n            } else {\n                true.should.equal(false);\n                done();\n            }\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "360d33f1-1a3d-47a3-bf21-41bbfded7a4b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Organization Organization.invite Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar email = \"test.user+1@raweng.com\";\napi.post(apiURL.replace(\":org_uid\", org_uid))\n    .send({\n        \"org_roles\": [_data.developer.uid],\n        \"emails\": [email]\n    })\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "83815d88-36ec-46a4-992e-b427b863d99a",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "b3183dc8-dadb-4880-8fe3-956e5bdedb47",
                  "88e6313e-70d7-4cb4-8f74-0b1adbbab8d8",
                  "2cd84a40-828d-40cb-86ba-cc91b6ac3cad",
                  "0e7ee0f7-a826-406b-80d2-9145e1a21ddf",
                  "f1abb630-2564-47a3-8bc8-83b67bf5552a",
                  "edd84594-a149-4c59-adef-52edbe6f402e",
                  "f705c6bc-5252-45a3-b2fe-b309425fe2b8",
                  "21449dde-f3ed-4cf6-b253-07044bda4728",
                  "e6b932ef-f312-4794-adf1-866db4f51137",
                  "600f8c96-64a6-47ca-8ba7-7dce1b8752c4",
                  "b28aff0f-c220-4261-9cc3-45d5f28c9893",
                  "394866c1-836a-45c4-93ef-cb575d752187",
                  "9d689cb4-6315-48ea-9022-a7f301438bf1",
                  "360d33f1-1a3d-47a3-bf21-41bbfded7a4b",
                  "83815d88-36ec-46a4-992e-b427b863d99a"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 30798,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "da8c8c81-871b-4135-8fc2-24b35ab69856",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\organization\\processSSOLogin.enterprise.js",
        "file": "\\controllers\\test\\organization\\processSSOLogin.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "7d8b471a-4013-4bd7-b34d-bba98282f20b",
            "title": "Organization",
            "fullFile": "C:\\work\\api\\controllers\\test\\organization\\processSSOLogin.enterprise.js",
            "file": "\\controllers\\test\\organization\\processSSOLogin.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "54822b1b-a555-46c6-b8cf-90fd75b78109",
                "title": "OrganizationUser.processSSOLogin",
                "fullFile": "C:\\work\\api\\controllers\\test\\organization\\processSSOLogin.enterprise.js",
                "file": "\\controllers\\test\\organization\\processSSOLogin.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Organization OrganizationUser.processSSOLogin \"before each\" hook",
                    "timedOut": false,
                    "duration": 57,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        _data = data;\n        org_uid = _data.organization.uid;\n        authToken = data.owner.authtoken;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "06b02e76-7175-4bfd-bd83-077289c651f1",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Organization OrganizationUser.processSSOLogin \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d68a1750-aa5a-4884-a4ee-c5912db82c1b",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should allowed owner without SSO login.",
                    "fullTitle": "Enterprise Organization OrganizationUser.processSSOLogin Should allowed owner without SSO login.",
                    "timedOut": false,
                    "duration": 52,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar _ssoConfig = getImmutable(ssoConfig);\napi.put(\"/enterprise/v1/organizations/:org_uid/ssoconfig\".replace(\":org_uid\", _data.organization.uid))\n    .send(_ssoConfig)\n    .set('authtoken', _data.owner.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        api.post(\"/enterprise/v1/organizations/:org_uid/sso/enable\".replace(\":org_uid\", _data.organization.uid))\n            .set('authtoken', _data.owner.authtoken)\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                api.get(\"/enterprise/v1/user\")\n                    .set('authtoken', _data.owner.authtoken)\n                    .set('org_uid', _data.organization.uid)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            var isValid = res.body.output.uid != \"\" &&\n                                typeof(res.body.output._id) == \"undefined\" &&\n                                typeof(res.body.output.__v) == \"undefined\" &&\n                                typeof(res.body.output.organizations) != \"undefined\";\n                            if (isValid) {\n                                _.each(res.body.output.organizations, function(orgItem) {\n                                    isValid = isValid &&\n                                        typeof(orgItem._id) == \"undefined\" &&\n                                        typeof(orgItem.__v) == \"undefined\" &&\n                                        typeof(orgItem.org_uid) != \"undefined\" &&\n                                        typeof(orgItem.org_name) != \"undefined\" &&\n                                        typeof(orgItem.avatar) != \"undefined\";\n                                });\n                                isValid.should.equal(true);\n                                done();\n                            } else {\n                                false.should.equal(true);\n                                done();\n                            }\n                        }\n                    });\n            });\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "43c7e5b6-9168-4b50-ab15-dd3f5474105d",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should works without relaystate.",
                    "fullTitle": "Enterprise Organization OrganizationUser.processSSOLogin Should works without relaystate.",
                    "timedOut": false,
                    "duration": 196,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar _ssoConfig = getImmutable(ssoConfig);\napi.put(\"/enterprise/v1/organizations/:org_uid/ssoconfig\".replace(\":org_uid\", _data.organization.uid))\n    .send(_ssoConfig)\n    .set('authtoken', _data.owner.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        var publicKeyFile = __dirname + \"/../../../__cert/okta.cert\";\n        var privateKeyFile = __dirname + \"/../../../__cert/SP1.pem\";\n        api.post(\"/enterprise/v1/organizations/:org_uid/sso/certs\".replace(\":org_uid\", org_uid))\n            .set('authtoken', _data.admin.authtoken)\n            .attach('signed_public_key', publicKeyFile)\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                api.post(\"/enterprise/v1/organizations/:org_uid/sso/enable\".replace(\":org_uid\", _data.organization.uid))\n                    .set('authtoken', _data.owner.authtoken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        testCollection.createOrgUser({\n                            user: _data.admin,\n                            email: \"amber.more@raweng.com\",\n                            org_uid: _data.organization.uid,\n                            role: _data.roles[\"Admin\"]\n                        }, function(error, user) {\n                            api.get(\"/enterprise/v1/login/sso?org=\" + _data.organization.name)\n                                .expect(httpStatus.MOVED_TEMPORARILY)\n                                .end(function(err, res) {\n                                    if (err) {\n                                        done(err);\n                                    } else {\n                                        if (res.headers.location.indexOf(ssoConfig.entry_point) == 0) {\n                                            var data = getImmutable(usersData.SMALRespWithoutAuthtoken);\n                                            delete data.RelayState;\n                                            api.post(\"/enterprise/v1/login/sso?org=\" + _data.organization.name)\n                                                .send(data)\n                                                .expect(httpStatus.MOVED_TEMPORARILY)\n                                                .end(function(err, res) {\n                                                    if (err) {\n                                                        done(err);\n                                                    } else {\n                                                        var qs = querystring.parse(res.headers.location);\n                                                        var authtoken = qs[\"sid\"] || qs[config.enterprise.sso.loginSuccessURL + \"?sid\"] || \"\";\n                                                        var _config = config;\n                                                        api.get(\"/enterprise/v1/user\")\n                                                            .set({ 'authtoken': authtoken, org_uid: _data.organization.uid })\n                                                            .expect(httpStatus.OK)\n                                                            .end(function(err, res) {\n                                                                if (err) {\n                                                                    done(err);\n                                                                } else {\n                                                                    var isValid = res.body.output.uid != \"\" &&\n                                                                        typeof(res.body.output._id) == \"undefined\" &&\n                                                                        typeof(res.body.output.__v) == \"undefined\" &&\n                                                                        typeof(res.body.output.organizations) != \"undefined\";\n                                                                    if (isValid) {\n                                                                        _.each(res.body.output.organizations, function(orgItem) {\n                                                                            isValid = isValid &&\n                                                                                typeof(orgItem._id) == \"undefined\" &&\n                                                                                typeof(orgItem.__v) == \"undefined\" &&\n                                                                                typeof(orgItem.org_uid) != \"undefined\" &&\n                                                                                typeof(orgItem.org_name) != \"undefined\" &&\n                                                                                typeof(orgItem.avatar) != \"undefined\";\n                                                                        });\n                                                                        isValid.should.equal(true);\n                                                                        done();\n                                                                    } else {\n                                                                        false.should.equal(true);\n                                                                        done();\n                                                                    }\n                                                                }\n                                                            });\n                                                    }\n                                                });\n                                        } else {\n                                            true.should.equal(false);\n                                            done();\n                                        }\n                                    }\n                                });\n                        });\n                    });\n            });\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e312e4af-b7d0-4724-9800-07d4f80b33ea",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give org not found error.",
                    "fullTitle": "Enterprise Organization OrganizationUser.processSSOLogin Should give org not found error.",
                    "timedOut": false,
                    "duration": 146,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar _ssoConfig = getImmutable(ssoConfig);\napi.put(\"/enterprise/v1/organizations/:org_uid/ssoconfig\".replace(\":org_uid\", _data.organization.uid))\n    .send(_ssoConfig)\n    .set('authtoken', _data.owner.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        var publicKeyFile = __dirname + \"/../../../__cert/okta.cert\";\n        var privateKeyFile = __dirname + \"/../../../__cert/SP1.pem\";\n        api.post(\"/enterprise/v1/organizations/:org_uid/sso/certs\".replace(\":org_uid\", org_uid))\n            .set('authtoken', _data.admin.authtoken)\n            .attach('signed_public_key', publicKeyFile)\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                api.post(\"/enterprise/v1/organizations/:org_uid/sso/enable\".replace(\":org_uid\", _data.organization.uid))\n                    .set('authtoken', _data.owner.authtoken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        testCollection.createOrgUser({\n                            user: _data.admin,\n                            email: \"amber.more@raweng.com\",\n                            org_uid: _data.organization.uid,\n                            role: _data.roles[\"Admin\"]\n                        }, function(error, user) {\n                            api.get(\"/enterprise/v1/login/sso?org=\" + _data.organization.name)\n                                .expect(httpStatus.MOVED_TEMPORARILY)\n                                .end(function(err, res) {\n                                    if (err) {\n                                        done(err);\n                                    } else {\n                                        if (res.headers.location.indexOf(ssoConfig.entry_point) == 0) {\n                                            var data = getImmutable(usersData.SMALRespWithoutAuthtoken);\n                                            delete data.RelayState;\n                                            api.post(\"/enterprise/v1/login/sso?org=\" + _data.organization.name + \"abc\")\n                                                .send(data)\n                                                .expect(httpStatus.MOVED_TEMPORARILY)\n                                                .end(function(err, res) {\n                                                    if (err) {\n                                                        done(err);\n                                                    } else {\n                                                        res.headers.location.should.equal(\"http://localhost:8080/#/sso/error?error=Organization%20not%20found.\");\n                                                        done();\n                                                    }\n                                                });\n                                        } else {\n                                            true.should.equal(false);\n                                            done();\n                                        }\n                                    }\n                                });\n                        });\n                    });\n            });\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "886f5579-00c7-48ed-8d7d-258fd3966f38",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should login admin user with SSO.",
                    "fullTitle": "Enterprise Organization OrganizationUser.processSSOLogin Should login admin user with SSO.",
                    "timedOut": false,
                    "duration": 273,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar _ssoConfig = getImmutable(ssoConfig);\napi.put(\"/enterprise/v1/organizations/:org_uid/ssoconfig\".replace(\":org_uid\", _data.organization.uid))\n    .send(_ssoConfig)\n    .set('authtoken', _data.owner.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        var publicKeyFile = __dirname + \"/../../../__cert/okta.cert\";\n        var privateKeyFile = __dirname + \"/../../../__cert/SP1.pem\";\n        api.post(\"/enterprise/v1/organizations/:org_uid/sso/certs\".replace(\":org_uid\", org_uid))\n            .set('authtoken', _data.admin.authtoken)\n            .attach('signed_public_key', publicKeyFile)\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                api.post(\"/enterprise/v1/organizations/:org_uid/sso/enable\".replace(\":org_uid\", _data.organization.uid))\n                    .set('authtoken', _data.owner.authtoken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        testCollection.createOrgUser({\n                            user: _data.admin,\n                            email: \"amber.more@raweng.com\",\n                            org_uid: _data.organization.uid,\n                            role: _data.roles[\"Admin\"]\n                        }, function(error, user) {\n                            api.get(\"/enterprise/v1/login/sso?org=\" + _data.organization.name)\n                                .expect(httpStatus.MOVED_TEMPORARILY)\n                                .end(function(err, res) {\n                                    if (err) {\n                                        done(err);\n                                    } else {\n                                        if (res.headers.location.indexOf(ssoConfig.entry_point) == 0) {\n                                            var data = usersData.SMALRespWithoutAuthtoken;\n                                            api.post(\"/enterprise/v1/login/sso\")\n                                                .send(data)\n                                                .expect(httpStatus.MOVED_TEMPORARILY)\n                                                .end(function(err, res) {\n                                                    if (err) {\n                                                        done(err);\n                                                    } else {\n                                                        var qs = querystring.parse(res.headers.location);\n                                                        var authtoken = qs[\"sid\"] || qs[config.enterprise.sso.loginSuccessURL + \"?sid\"] || \"\";\n                                                        api.get(\"/enterprise/v1/user\")\n                                                            .set('authtoken', authtoken)\n                                                            .set('org_uid', _data.organization.uid)\n                                                            .expect(httpStatus.OK)\n                                                            .end(function(err, res) {\n                                                                if (err) {\n                                                                    done(err);\n                                                                } else {\n                                                                    var isValid = res.body.output.uid != \"\" &&\n                                                                        typeof(res.body.output._id) == \"undefined\" &&\n                                                                        typeof(res.body.output.__v) == \"undefined\" &&\n                                                                        typeof(res.body.output.organizations) != \"undefined\";\n                                                                    if (isValid) {\n                                                                        _.each(res.body.output.organizations, function(orgItem) {\n                                                                            isValid = isValid &&\n                                                                                typeof(orgItem._id) == \"undefined\" &&\n                                                                                typeof(orgItem.__v) == \"undefined\" &&\n                                                                                typeof(orgItem.org_uid) != \"undefined\" &&\n                                                                                typeof(orgItem.org_name) != \"undefined\" &&\n                                                                                typeof(orgItem.avatar) != \"undefined\";\n                                                                        });\n                                                                        isValid.should.equal(true);\n                                                                        done();\n                                                                    } else {\n                                                                        false.should.equal(true);\n                                                                        done();\n                                                                    }\n                                                                }\n                                                            });\n                                                    }\n                                                });\n                                        } else {\n                                            true.should.equal(false);\n                                            done();\n                                        }\n                                    }\n                                });\n                        });\n                    });\n            });\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b5bad9d6-d9fd-4d8c-aaa4-8cd8c9ef0dd4",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should overwrite user session management timeout.",
                    "fullTitle": "Enterprise Organization OrganizationUser.processSSOLogin Should overwrite user session management timeout.",
                    "timedOut": false,
                    "duration": 191,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar _ssoConfig = getImmutable(ssoConfig);\n_ssoConfig.session_time_out_hours = 5;\napi.put(\"/enterprise/v1/organizations/:org_uid/ssoconfig\".replace(\":org_uid\", _data.organization.uid))\n    .send(_ssoConfig)\n    .set('authtoken', _data.owner.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        var publicKeyFile = __dirname + \"/../../../__cert/okta.cert\";\n        var privateKeyFile = __dirname + \"/../../../__cert/SP1.pem\";\n        api.post(\"/enterprise/v1/organizations/:org_uid/sso/certs\".replace(\":org_uid\", org_uid))\n            .set('authtoken', _data.admin.authtoken)\n            .attach('signed_public_key', publicKeyFile)\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                api.post(\"/enterprise/v1/organizations/:org_uid/sso/enable\".replace(\":org_uid\", _data.organization.uid))\n                    .set('authtoken', _data.owner.authtoken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        testCollection.createOrgUser({\n                            user: _data.admin,\n                            email: \"amber.more@raweng.com\",\n                            org_uid: _data.organization.uid,\n                            role: _data.roles[\"Admin\"]\n                        }, function(error, user) {\n                            api.get(\"/enterprise/v1/login/sso?org=\" + _data.organization.name)\n                                .expect(httpStatus.MOVED_TEMPORARILY)\n                                .end(function(err, res) {\n                                    if (err) {\n                                        done(err);\n                                    } else {\n                                        if (res.headers.location.indexOf(ssoConfig.entry_point) == 0) {\n                                            var data = usersData.SMALRespWithoutAuthtoken;\n                                            api.post(\"/enterprise/v1/login/sso\")\n                                                .send(data)\n                                                .expect(httpStatus.MOVED_TEMPORARILY)\n                                                .end(function(err, res) {\n                                                    if (err) {\n                                                        done(err);\n                                                    } else {\n                                                        var qs = querystring.parse(res.headers.location);\n                                                        var authtoken = qs[\"sid\"] || qs[config.enterprise.sso.loginSuccessURL + \"?sid\"] || \"\";\n                                                        var date = moment(new Date());\n                                                        date.subtract({ hours: 4, minutes: 5 });\n                                                        _models.UserToken.findOneAndUpdate({\n                                                            authtoken: authtoken\n                                                        }, {\n                                                            idle_valid_till: date\n                                                        }, {\n                                                            new: true\n                                                        }, function(error, user) {\n                                                            api.get(\"/enterprise/v1/user\")\n                                                                .set('authtoken', authtoken)\n                                                                .set('org_uid', _data.organization.uid)\n                                                                .expect(httpStatus.OK)\n                                                                .end(function(err, res) {\n                                                                    if (err) {\n                                                                        done(err);\n                                                                    } else {\n                                                                        var isValid = res.body.output.uid != \"\" &&\n                                                                            typeof(res.body.output._id) == \"undefined\" &&\n                                                                            typeof(res.body.output.__v) == \"undefined\" &&\n                                                                            typeof(res.body.output.organizations) != \"undefined\";\n                                                                        if (isValid) {\n                                                                            _.each(res.body.output.organizations, function(orgItem) {\n                                                                                isValid = isValid &&\n                                                                                    typeof(orgItem._id) == \"undefined\" &&\n                                                                                    typeof(orgItem.__v) == \"undefined\" &&\n                                                                                    typeof(orgItem.org_uid) != \"undefined\" &&\n                                                                                    typeof(orgItem.org_name) != \"undefined\" &&\n                                                                                    typeof(orgItem.avatar) != \"undefined\";\n                                                                            });\n                                                                            isValid.should.equal(true);\n                                                                            done();\n                                                                        } else {\n                                                                            false.should.equal(true);\n                                                                            done();\n                                                                        }\n                                                                    }\n                                                                });\n                                                        });\n                                                    }\n                                                });\n                                        } else {\n                                            true.should.equal(false);\n                                            done();\n                                        }\n                                    }\n                                });\n                        });\n                    });\n            });\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f4829d4a-2d79-4de6-8fd3-3971f2d6d585",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should do test login without enabling SSO.",
                    "fullTitle": "Enterprise Organization OrganizationUser.processSSOLogin Should do test login without enabling SSO.",
                    "timedOut": false,
                    "duration": 2602,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar _ssoConfig = getImmutable(ssoConfig);\nvar email = \"amber.more@raweng.com\";\nsignUpUser({\n    email: email\n}, function(res) {\n    var newUserAuthtoken = res.body.output.authtoken;\n    api.post(\"/enterprise/v1/organizations/:org_uid/invite\".replace(\":org_uid\", _data.organization.uid))\n        .send({\n            \"org_roles\": [_data.roles[\"Admin\"].uid],\n            \"emails\": [email]\n        })\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                if (res.body.output.message == messageList.ORG_INVITATION_SEND) {\n                    api.put(\"/enterprise/v1/organizations/:org_uid/ssoconfig\".replace(\":org_uid\", _data.organization.uid))\n                        .send(_ssoConfig)\n                        .set('authtoken', _data.owner.authtoken)\n                        .expect(httpStatus.OK)\n                        .end(function(err, res) {\n                            var publicKeyFile = __dirname + \"/../../../__cert/okta.cert\";\n                            var privateKeyFile = __dirname + \"/../../../__cert/SP1.pem\";\n                            api.post(\"/enterprise/v1/organizations/:org_uid/sso/certs\".replace(\":org_uid\", org_uid))\n                                .set('authtoken', _data.admin.authtoken)\n                                .attach('signed_public_key', publicKeyFile)\n                                .expect(httpStatus.OK)\n                                .end(function(err, res) {\n                                    /*api.post(\"/enterprise/v1/organizations/:org_uid/sso/enable\".replace(\":org_uid\", org_uid))\n                                        .send({})\n                                        .set('authtoken', _data.admin.authtoken)\n                                        .expect(httpStatus.OK)\n                                        .end(function(err, res) {*/\n                                    api.get(\"/enterprise/v1/login/sso?org=\" + _data.organization.name + \"&test=true\")\n                                        .expect(httpStatus.MOVED_TEMPORARILY)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                if (res.headers.location.indexOf(ssoConfig.entry_point) == 0) {\n                                                    var data = usersData.SMALRespWithoutAuthtoken;\n                                                    api.post(\"/enterprise/v1/login/sso\")\n                                                        .send(data)\n                                                        .expect(httpStatus.MOVED_TEMPORARILY)\n                                                        .end(function(err, res) {\n                                                            if (err) {\n                                                                done(err);\n                                                            } else {\n                                                                var qs = querystring.parse(res.headers.location);\n                                                                var authtoken = qs[\"sid\"] || qs[config.enterprise.sso.loginSuccessTestURL + \"?sid\"] || \"\";\n                                                                api.get(\"/enterprise/v1/user\")\n                                                                    .set('authtoken', authtoken)\n                                                                    .set('org_uid', _data.organization.uid)\n                                                                    .expect(httpStatus.OK)\n                                                                    .end(function(err, res) {\n                                                                        if (err) {\n                                                                            done(err);\n                                                                        } else {\n                                                                            var isValid = res.body.output.uid != \"\" &&\n                                                                                typeof(res.body.output._id) == \"undefined\" &&\n                                                                                typeof(res.body.output.__v) == \"undefined\" &&\n                                                                                typeof(res.body.output.organizations) != \"undefined\";\n                                                                            if (isValid) {\n                                                                                _.each(res.body.output.organizations, function(orgItem) {\n                                                                                    isValid = isValid &&\n                                                                                        typeof(orgItem._id) == \"undefined\" &&\n                                                                                        typeof(orgItem.__v) == \"undefined\" &&\n                                                                                        typeof(orgItem.org_uid) != \"undefined\" &&\n                                                                                        typeof(orgItem.org_name) != \"undefined\" &&\n                                                                                        typeof(orgItem.avatar) != \"undefined\";\n                                                                                });\n                                                                                isValid.should.equal(true);\n                                                                                done();\n                                                                            } else {\n                                                                                false.should.equal(true);\n                                                                                done();\n                                                                            }\n                                                                        }\n                                                                    });\n                                                            }\n                                                        });\n                                                } else {\n                                                    true.should.equal(false);\n                                                    done();\n                                                }\n                                            }\n                                        });\n\n\n                                    //});\n                                });\n                        });\n                } else {\n                    true.should.equal(false);\n                    done();\n                }\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "497f4beb-77ca-4951-94da-c890d905284e",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should do other user SSO login without accepting invitation.",
                    "fullTitle": "Enterprise Organization OrganizationUser.processSSOLogin Should do other user SSO login without accepting invitation.",
                    "timedOut": false,
                    "duration": 5082,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar _ssoConfig = getImmutable(ssoConfig);\nvar email = \"amber.more@raweng.com\";\nsignUpUser({\n    email: email\n}, function(res) {\n    var newUserAuthtoken = res.body.output.authtoken;\n    api.post(\"/enterprise/v1/organizations/:org_uid/invite\".replace(\":org_uid\", _data.organization.uid))\n        .send({\n            \"org_roles\": [_data.roles[\"Admin\"].uid],\n            \"emails\": [email]\n        })\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                if (res.body.output.message == messageList.ORG_INVITATION_SEND) {\n                    api.put(\"/enterprise/v1/organizations/:org_uid/ssoconfig\".replace(\":org_uid\", _data.organization.uid))\n                        .send(_ssoConfig)\n                        .set('authtoken', _data.owner.authtoken)\n                        .expect(httpStatus.OK)\n                        .end(function(err, res) {\n                            var publicKeyFile = __dirname + \"/../../../__cert/okta.cert\";\n                            var privateKeyFile = __dirname + \"/../../../__cert/SP1.pem\";\n                            api.post(\"/enterprise/v1/organizations/:org_uid/sso/certs\".replace(\":org_uid\", org_uid))\n                                .set('authtoken', _data.admin.authtoken)\n                                .attach('signed_public_key', publicKeyFile)\n                                .expect(httpStatus.OK)\n                                .end(function(err, res) {\n                                    api.post(\"/enterprise/v1/organizations/:org_uid/sso/enable\".replace(\":org_uid\", org_uid))\n                                        .send({})\n                                        .set('authtoken', _data.owner.authtoken)\n                                        .expect(httpStatus.OK)\n                                        .end(function(err, res) {\n                                            api.get(\"/enterprise/v1/login/sso?org=\" + _data.organization.name)\n                                                .expect(httpStatus.MOVED_TEMPORARILY)\n                                                .end(function(err, res) {\n                                                    if (err) {\n                                                        done(err);\n                                                    } else {\n                                                        if (res.headers.location.indexOf(ssoConfig.entry_point) == 0) {\n                                                            var data = usersData.SMALRespWithoutAuthtoken;\n                                                            api.post(\"/enterprise/v1/login/sso\")\n                                                                .send(data)\n                                                                .expect(httpStatus.MOVED_TEMPORARILY)\n                                                                .end(function(err, res) {\n                                                                    if (err) {\n                                                                        done(err);\n                                                                    } else {\n                                                                        var qs = querystring.parse(res.headers.location);\n                                                                        var authtoken = qs[\"sid\"] || qs[config.enterprise.sso.loginSuccessURL + \"?sid\"] || \"\";\n                                                                        api.get(\"/enterprise/v1/user\")\n                                                                            .set('authtoken', authtoken)\n                                                                            .set('org_uid', _data.organization.uid)\n                                                                            .expect(httpStatus.OK)\n                                                                            .end(function(err, res) {\n                                                                                if (err) {\n                                                                                    done(err);\n                                                                                } else {\n                                                                                    var isValid = res.body.output.uid != \"\" &&\n                                                                                        typeof(res.body.output._id) == \"undefined\" &&\n                                                                                        typeof(res.body.output.__v) == \"undefined\" &&\n                                                                                        typeof(res.body.output.organizations) != \"undefined\";\n                                                                                    if (isValid) {\n                                                                                        _.each(res.body.output.organizations, function(orgItem) {\n                                                                                            isValid = isValid &&\n                                                                                                typeof(orgItem._id) == \"undefined\" &&\n                                                                                                typeof(orgItem.__v) == \"undefined\" &&\n                                                                                                typeof(orgItem.org_uid) != \"undefined\" &&\n                                                                                                typeof(orgItem.org_name) != \"undefined\" &&\n                                                                                                typeof(orgItem.avatar) != \"undefined\";\n                                                                                        });\n                                                                                        isValid.should.equal(true);\n                                                                                        done();\n                                                                                    } else {\n                                                                                        false.should.equal(true);\n                                                                                        done();\n                                                                                    }\n                                                                                }\n                                                                            });\n                                                                    }\n                                                                });\n                                                        } else {\n                                                            true.should.equal(false);\n                                                            done();\n                                                        }\n                                                    }\n                                                });\n                                        });\n                                });\n                        });\n                } else {\n                    true.should.equal(false);\n                    done();\n                }\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "27e2654d-f0e5-4f56-9bca-9fecb5a057e2",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should use same token for secondtime login if validtill satisfies.",
                    "fullTitle": "Enterprise Organization OrganizationUser.processSSOLogin Should use same token for secondtime login if validtill satisfies.",
                    "timedOut": false,
                    "duration": 226,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar _ssoConfig = getImmutable(ssoConfig);\nvar SSOLogin = function(sso_data, cb) {\n    var authtoken = \"\";\n    var ssoLogin = \"/enterprise/v1/login/sso?org=\" + _data.organization.name;\n    if (sso_data.RelayState) {\n        authtoken = sso_data.authtoken || \"\";\n        ssoLogin += \"&sid=\" + authtoken\n    }\n    api.get(ssoLogin)\n        .expect(httpStatus.MOVED_TEMPORARILY)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                if (res.headers.location.indexOf(ssoConfig.entry_point) == 0) {\n                    var qs = querystring.parse(res.headers.location);\n                    var rs = utils.getRelayState({\n                        body: {\n                            RelayState: qs.RelayState\n                        }\n                    });\n                    if ((rs.authtoken || \"\") == authtoken) {\n                        api.post(\"/enterprise/v1/login/sso\")\n                            .send(sso_data)\n                            .expect(httpStatus.MOVED_TEMPORARILY)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    var qs = querystring.parse(res.headers.location);\n                                    var authtoken = qs[\"sid\"] || qs[config.enterprise.sso.loginSuccessURL + \"?sid\"] || \"\";\n                                    api.get(\"/enterprise/v1/user\")\n                                        .set('authtoken', authtoken)\n                                        .set('org_uid', _data.organization.uid)\n                                        .expect(httpStatus.OK)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                var isValid = res.body.output.uid != \"\" &&\n                                                    typeof(res.body.output._id) == \"undefined\" &&\n                                                    typeof(res.body.output.__v) == \"undefined\" &&\n                                                    typeof(res.body.output.organizations) != \"undefined\";\n                                                if (isValid) {\n                                                    _.each(res.body.output.organizations, function(orgItem) {\n                                                        isValid = isValid &&\n                                                            typeof(orgItem._id) == \"undefined\" &&\n                                                            typeof(orgItem.__v) == \"undefined\" &&\n                                                            typeof(orgItem.org_uid) != \"undefined\" &&\n                                                            typeof(orgItem.org_name) != \"undefined\" &&\n                                                            typeof(orgItem.avatar) != \"undefined\";\n                                                    });\n                                                    if (isValid) {\n                                                        cb(isValid, authtoken);\n                                                    } else {\n                                                        false.should.equal(true);\n                                                        done();\n                                                    }\n                                                } else {\n                                                    false.should.equal(true);\n                                                    done();\n                                                }\n                                            }\n                                        });\n                                }\n                            });\n                    } else {\n                        true.should.equal(false);\n                        done();\n                    }\n                } else {\n                    true.should.equal(false);\n                    done();\n                }\n            }\n        });\n};\napi.put(\"/enterprise/v1/organizations/:org_uid/ssoconfig\".replace(\":org_uid\", _data.organization.uid))\n    .send(_ssoConfig)\n    .set('authtoken', _data.owner.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        var publicKeyFile = __dirname + \"/../../../__cert/okta.cert\";\n        var privateKeyFile = __dirname + \"/../../../__cert/SP1.pem\";\n        api.post(\"/enterprise/v1/organizations/:org_uid/sso/certs\".replace(\":org_uid\", org_uid))\n            .set('authtoken', _data.admin.authtoken)\n            .attach('signed_public_key', publicKeyFile)\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                api.post(\"/enterprise/v1/organizations/:org_uid/sso/enable\".replace(\":org_uid\", _data.organization.uid))\n                    .set('authtoken', _data.owner.authtoken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        testCollection.createOrgUser({\n                            user: _data.admin,\n                            email: \"amber.more@raweng.com\",\n                            org_uid: _data.organization.uid,\n                            role: _data.roles[\"Admin\"]\n                        }, function(error, user) {\n                            var data = usersData.SMALRespWithoutAuthtoken;\n                            SSOLogin(data, function(isValid, authtoken) {\n                                data.RelayState = encryption.encryptSync(JSON.stringify({\n                                    o: _data.organization.uid,\n                                    a: authtoken\n                                }), encryption.encryptSync());\n                                data.authtoken = authtoken;\n                                SSOLogin(data, function(isValid, authtoken) {\n                                    _models.OrganizationToken.find({}, function(error, tokens) {\n                                        (tokens.length == 1).should.equal(true);\n                                        done();\n                                    });\n                                });\n                            });\n                        });\n                    });\n            });\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "771a5ebb-f474-46ee-8983-9fe200e7ae52",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should create another token for secondtime login if validtill not satisfies.",
                    "fullTitle": "Enterprise Organization OrganizationUser.processSSOLogin Should create another token for secondtime login if validtill not satisfies.",
                    "timedOut": false,
                    "duration": 324,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar _ssoConfig = getImmutable(ssoConfig);\nvar last_authtoken = \"\";\nvar SSOLogin = function(sso_data, cb) {\n    api.get(\"/enterprise/v1/login/sso?org=\" + _data.organization.name)\n        .expect(httpStatus.MOVED_TEMPORARILY)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                if (res.headers.location.indexOf(ssoConfig.entry_point) == 0) {\n                    api.post(\"/enterprise/v1/login/sso\")\n                        .send(sso_data)\n                        .expect(httpStatus.MOVED_TEMPORARILY)\n                        .end(function(err, res) {\n                            if (err) {\n                                done(err);\n                            } else {\n                                var qs = querystring.parse(res.headers.location);\n                                var authtoken = qs[\"sid\"] || qs[config.enterprise.sso.loginSuccessURL + \"?sid\"] || \"\";\n                                api.get(\"/enterprise/v1/user\")\n                                    .set('authtoken', authtoken)\n                                    .set('org_uid', _data.organization.uid)\n                                    .expect(httpStatus.OK)\n                                    .end(function(err, res) {\n                                        if (err) {\n                                            done(err);\n                                        } else {\n                                            var isValid = res.body.output.uid != \"\" &&\n                                                typeof(res.body.output._id) == \"undefined\" &&\n                                                typeof(res.body.output.__v) == \"undefined\" &&\n                                                typeof(res.body.output.organizations) != \"undefined\";\n                                            if (isValid) {\n                                                _.each(res.body.output.organizations, function(orgItem) {\n                                                    isValid = isValid &&\n                                                        typeof(orgItem._id) == \"undefined\" &&\n                                                        typeof(orgItem.__v) == \"undefined\" &&\n                                                        typeof(orgItem.org_uid) != \"undefined\" &&\n                                                        typeof(orgItem.org_name) != \"undefined\" &&\n                                                        typeof(orgItem.avatar) != \"undefined\";\n                                                });\n                                                if (isValid) {\n                                                    cb(isValid, authtoken);\n                                                } else {\n                                                    false.should.equal(true);\n                                                    done();\n                                                }\n                                            } else {\n                                                false.should.equal(true);\n                                                done();\n                                            }\n                                        }\n                                    });\n                            }\n                        });\n                } else {\n                    true.should.equal(false);\n                    done();\n                }\n            }\n        });\n};\napi.put(\"/enterprise/v1/organizations/:org_uid/ssoconfig\".replace(\":org_uid\", _data.organization.uid))\n    .send(_ssoConfig)\n    .set('authtoken', _data.owner.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        var publicKeyFile = __dirname + \"/../../../__cert/okta.cert\";\n        var privateKeyFile = __dirname + \"/../../../__cert/SP1.pem\";\n        api.post(\"/enterprise/v1/organizations/:org_uid/sso/certs\".replace(\":org_uid\", org_uid))\n            .set('authtoken', _data.admin.authtoken)\n            .attach('signed_public_key', publicKeyFile)\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                api.post(\"/enterprise/v1/organizations/:org_uid/sso/enable\".replace(\":org_uid\", _data.organization.uid))\n                    .set('authtoken', _data.owner.authtoken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        testCollection.createOrgUser({\n                            user: _data.admin,\n                            email: \"amber.more@raweng.com\",\n                            org_uid: _data.organization.uid,\n                            role: _data.roles[\"Admin\"]\n                        }, function(error, user) {\n                            var data = usersData.SMALRespWithoutAuthtoken;\n                            SSOLogin(data, function(isValid, authtoken) {\n                                data.RelayState = encryption.encryptSync(JSON.stringify({\n                                    o: _data.organization.uid,\n                                    a: authtoken\n                                }), encryption.encryptSync());\n                                _models.OrganizationToken.findOneAndUpdate({\n                                    org_uid: _data.organization.uid\n                                }, {\n                                    valid_till: new Date(2001, 12, 1)\n                                }, { new: true }, function(error, tokens) {\n                                    SSOLogin(data, function(isValid, authtoken) {\n                                        _models.OrganizationToken.find({}, function(error, tokens) {\n                                            (tokens.length == 2).should.equal(true);\n                                            done();\n                                        });\n                                    });\n                                });\n                            });\n                        });\n                    });\n            });\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6e039344-6e28-43d6-ad9b-f6c3b9c1c5be",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not do SSO login if SSO is disabled.",
                    "fullTitle": "Enterprise Organization OrganizationUser.processSSOLogin Should not do SSO login if SSO is disabled.",
                    "timedOut": false,
                    "duration": 3339,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar _ssoConfig = getImmutable(ssoConfig);\nvar email = \"amber.more@raweng.com\";\nvar loginWithSSO = function(status, callback) {\n    api.get(\"/enterprise/v1/login/sso?org=\" + _data.organization.name)\n        .expect(httpStatus.MOVED_TEMPORARILY)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                if (res.headers.location.indexOf(\"error\") > -1) {\n                    var qs = querystring.parse(res.headers.location);\n                    var error = qs[\"error\"] || qs[config.enterprise.sso.loginErrorURL + \"?error\"] || \"\";\n                    callback(error, null);\n                } else {\n                    if (res.headers.location.indexOf(ssoConfig.entry_point) == 0) {\n                        var data = usersData.SMALRespWithoutAuthtoken;\n                        api.post(\"/enterprise/v1/login/sso\")\n                            .send(data)\n                            .expect(httpStatus.MOVED_TEMPORARILY)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    var qs = querystring.parse(res.headers.location);\n                                    var authtoken = qs[\"sid\"] || qs[config.enterprise.sso.loginSuccessURL + \"?sid\"] || \"\";\n                                    api.get(\"/enterprise/v1/user\")\n                                        .set('authtoken', authtoken)\n                                        .set('org_uid', _data.organization.uid)\n                                        .expect(status)\n                                        .end(callback);\n                                }\n                            });\n                    } else {\n                        true.should.equal(false);\n                        done();\n                    }\n                }\n            }\n        });\n};\nsignUpUser({\n    email: email\n}, function(res) {\n    var newUserAuthtoken = res.body.output.authtoken;\n    api.post(\"/enterprise/v1/organizations/:org_uid/invite\".replace(\":org_uid\", _data.organization.uid))\n        .send({\n            \"org_roles\": [_data.roles[\"Admin\"].uid],\n            \"emails\": [email]\n        })\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                if (res.body.output.message == messageList.ORG_INVITATION_SEND) {\n                    api.put(\"/enterprise/v1/organizations/:org_uid/ssoconfig\".replace(\":org_uid\", _data.organization.uid))\n                        .send(_ssoConfig)\n                        .set('authtoken', _data.owner.authtoken)\n                        .expect(httpStatus.OK)\n                        .end(function(err, res) {\n                            var publicKeyFile = __dirname + \"/../../../__cert/okta.cert\";\n                            var privateKeyFile = __dirname + \"/../../../__cert/SP1.pem\";\n                            api.post(\"/enterprise/v1/organizations/:org_uid/sso/certs\".replace(\":org_uid\", org_uid))\n                                .set('authtoken', _data.admin.authtoken)\n                                .attach('signed_public_key', publicKeyFile)\n                                .expect(httpStatus.OK)\n                                .end(function(err, res) {\n                                    api.post(\"/enterprise/v1/organizations/:org_uid/sso/enable\".replace(\":org_uid\", org_uid))\n                                        .send({})\n                                        .set('authtoken', _data.owner.authtoken)\n                                        .expect(httpStatus.OK)\n                                        .end(function(err, res) {\n                                            loginWithSSO(httpStatus.OK, function(err, res) {\n                                                if (err) {\n                                                    done(err);\n                                                } else {\n                                                    var isValid = res.body.output.uid != \"\" &&\n                                                        typeof(res.body.output._id) == \"undefined\" &&\n                                                        typeof(res.body.output.__v) == \"undefined\" &&\n                                                        typeof(res.body.output.organizations) != \"undefined\";\n                                                    if (isValid) {\n                                                        api.post(\"/enterprise/v1/organizations/:org_uid/sso/disable\".replace(\":org_uid\", org_uid))\n                                                            .send({})\n                                                            .set('authtoken', _data.owner.authtoken)\n                                                            .expect(httpStatus.OK)\n                                                            .end(function(err, res) {\n                                                                loginWithSSO(httpStatus.BAD_REQUEST, function(err, res) {\n                                                                    err.should.equal(messageList.ORG_SSO_DISABLE);\n                                                                    done();\n                                                                });\n                                                            });\n                                                    } else {\n                                                        false.should.equal(true);\n                                                        done();\n                                                    }\n                                                }\n                                            });\n                                        });\n                                });\n                        });\n                } else {\n                    true.should.equal(false);\n                    done();\n                }\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2d6cc621-9e54-4d60-a937-0fe46e8b751f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should logout all tokens.",
                    "fullTitle": "Enterprise Organization OrganizationUser.processSSOLogin Should logout all tokens.",
                    "timedOut": false,
                    "duration": 245,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar _ssoConfig = getImmutable(ssoConfig);\nvar last_authtoken = \"\";\nvar SSOLogin = function(cb) {\n    api.get(\"/enterprise/v1/login/sso?org=\" + _data.organization.name)\n        .expect(httpStatus.MOVED_TEMPORARILY)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                if (res.headers.location.indexOf(ssoConfig.entry_point) == 0) {\n                    var data = usersData.SMALRespWithoutAuthtoken;\n                    api.post(\"/enterprise/v1/login/sso\")\n                        .send(data)\n                        .expect(httpStatus.MOVED_TEMPORARILY)\n                        .end(function(err, res) {\n                            if (err) {\n                                done(err);\n                            } else {\n                                var qs = querystring.parse(res.headers.location);\n                                var authtoken = qs[\"sid\"] || qs[config.enterprise.sso.loginSuccessURL + \"?sid\"] || \"\";\n                                api.get(\"/enterprise/v1/user\")\n                                    .set('authtoken', authtoken)\n                                    .set('org_uid', _data.organization.uid)\n                                    .expect(httpStatus.OK)\n                                    .end(function(err, res) {\n                                        if (err) {\n                                            done(err);\n                                        } else {\n                                            var isValid = res.body.output.uid != \"\" &&\n                                                typeof(res.body.output._id) == \"undefined\" &&\n                                                typeof(res.body.output.__v) == \"undefined\" &&\n                                                typeof(res.body.output.organizations) != \"undefined\";\n                                            if (isValid) {\n                                                _.each(res.body.output.organizations, function(orgItem) {\n                                                    isValid = isValid &&\n                                                        typeof(orgItem._id) == \"undefined\" &&\n                                                        typeof(orgItem.__v) == \"undefined\" &&\n                                                        typeof(orgItem.org_uid) != \"undefined\" &&\n                                                        typeof(orgItem.org_name) != \"undefined\" &&\n                                                        typeof(orgItem.avatar) != \"undefined\";\n                                                });\n                                                if (isValid) {\n                                                    last_authtoken = authtoken;\n                                                    cb(isValid);\n                                                } else {\n                                                    false.should.equal(true);\n                                                    done();\n                                                }\n                                            } else {\n                                                false.should.equal(true);\n                                                done();\n                                            }\n                                        }\n                                    });\n                            }\n                        });\n                } else {\n                    true.should.equal(false);\n                    done();\n                }\n            }\n        });\n};\napi.put(\"/enterprise/v1/organizations/:org_uid/ssoconfig\".replace(\":org_uid\", _data.organization.uid))\n    .send(_ssoConfig)\n    .set('authtoken', _data.owner.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        var publicKeyFile = __dirname + \"/../../../__cert/okta.cert\";\n        var privateKeyFile = __dirname + \"/../../../__cert/SP1.pem\";\n        api.post(\"/enterprise/v1/organizations/:org_uid/sso/certs\".replace(\":org_uid\", org_uid))\n            .set('authtoken', _data.admin.authtoken)\n            .attach('signed_public_key', publicKeyFile)\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                api.post(\"/enterprise/v1/organizations/:org_uid/sso/enable\".replace(\":org_uid\", _data.organization.uid))\n                    .set('authtoken', _data.owner.authtoken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        testCollection.createOrgUser({\n                            user: _data.admin,\n                            email: \"amber.more@raweng.com\",\n                            org_uid: _data.organization.uid,\n                            role: _data.roles[\"Admin\"]\n                        }, function(error, user) {\n                            SSOLogin(function() {\n                                _models.OrganizationToken.findOneAndUpdate({\n                                    org_uid: _data.organization.uid\n                                }, {\n                                    valid_till: new Date(2001, 12, 1)\n                                }, { new: true }, function(error, tokens) {\n                                    SSOLogin(function() {\n                                        api.post(\"/enterprise/v1/logout\")\n                                            .set('authtoken', last_authtoken)\n                                            .expect(httpStatus.OK)\n                                            .end(function(err, res) {\n                                                _models.OrganizationToken.find({ authtoken: last_authtoken }, function(error, tokens) {\n                                                    var is_valid = true;\n                                                    _.each(tokens, function(item) {\n                                                        is_valid = is_valid && item.deleted_at != null;\n                                                    });\n                                                    is_valid.should.equal(true);\n                                                    done();\n                                                });\n                                            });\n                                    });\n                                });\n                            });\n                        });\n                    });\n            });\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f4f39db1-36e4-4005-bd57-14842fb3c926",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "43c7e5b6-9168-4b50-ab15-dd3f5474105d",
                  "e312e4af-b7d0-4724-9800-07d4f80b33ea",
                  "886f5579-00c7-48ed-8d7d-258fd3966f38",
                  "b5bad9d6-d9fd-4d8c-aaa4-8cd8c9ef0dd4",
                  "f4829d4a-2d79-4de6-8fd3-3971f2d6d585",
                  "497f4beb-77ca-4951-94da-c890d905284e",
                  "27e2654d-f0e5-4f56-9bca-9fecb5a057e2",
                  "771a5ebb-f474-46ee-8983-9fe200e7ae52",
                  "6e039344-6e28-43d6-ad9b-f6c3b9c1c5be",
                  "2d6cc621-9e54-4d60-a937-0fe46e8b751f",
                  "f4f39db1-36e4-4005-bd57-14842fb3c926"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 12676,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "6a3b0d0d-2d09-4229-abe0-00666eb13361",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\organization\\removeCerts.enterprise.js",
        "file": "\\controllers\\test\\organization\\removeCerts.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "6c067afc-f574-4373-bb92-856738109379",
            "title": "Organization",
            "fullFile": "C:\\work\\api\\controllers\\test\\organization\\removeCerts.enterprise.js",
            "file": "\\controllers\\test\\organization\\removeCerts.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "fdd583ea-9281-4471-9fb5-97dcd1f9b116",
                "title": "Organization.removeCerts",
                "fullFile": "C:\\work\\api\\controllers\\test\\organization\\removeCerts.enterprise.js",
                "file": "\\controllers\\test\\organization\\removeCerts.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Organization Organization.removeCerts \"before each\" hook",
                    "timedOut": false,
                    "duration": 56,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        _data = data;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ab66fb79-0626-4601-8b55-7e6b19160718",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Organization Organization.removeCerts \"after all\" hook",
                    "timedOut": false,
                    "duration": 1,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "testCollection.organizationRemoveRecords({}, function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8a9acf42-0e40-4642-a66b-4454d41f5e37",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Organization Organization.removeCerts \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d9b47db3-b0af-4372-852f-dca778f8f6c3",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should delete public SSO cert.",
                    "fullTitle": "Enterprise Organization Organization.removeCerts Should delete public SSO cert.",
                    "timedOut": false,
                    "duration": 36,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar publicKeyFile = __dirname + \"/../../../__cert/okta.cert\";\nvar privateKeyFile = __dirname + \"/../../../__cert/SP1.pem\";\napi.post(\"/enterprise/v1/organizations/:org_uid/sso/certs\".replace(\":org_uid\", org_uid))\n    .set('authtoken', authToken)\n    .attach('signed_public_key', publicKeyFile)\n    .attach('enc_private_key', privateKeyFile)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.uid != \"\" &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\" &&\n                res.body.output.sso_details.signed_public_key != \"\" &&\n                res.body.output.sso_details.enc_private_key != \"\";\n            if (isValid) {\n                api.delete(apiURL.replace(\":org_uid\", org_uid).replace(\":cert_type\", \"public\"))\n                    .set('authtoken', authToken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            res.body.output.message.should.equal(messageList.ORG_CERT_PUBLIC_DELETED_SUCCESS);\n                            done();\n                        }\n                    });\n            } else {\n                true.should.equal(false);\n                done();\n            }\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "eeb05760-7724-4a07-9b9a-94cc261f697b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should delete private SSO cert.",
                    "fullTitle": "Enterprise Organization Organization.removeCerts Should delete private SSO cert.",
                    "timedOut": false,
                    "duration": 37,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar publicKeyFile = __dirname + \"/../../../__cert/okta.cert\";\nvar privateKeyFile = __dirname + \"/../../../__cert/SP1.pem\";\napi.post(\"/enterprise/v1/organizations/:org_uid/sso/certs\".replace(\":org_uid\", org_uid))\n    .set('authtoken', authToken)\n    .attach('signed_public_key', publicKeyFile)\n    .attach('enc_private_key', privateKeyFile)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.uid != \"\" &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\" &&\n                res.body.output.sso_details.signed_public_key != \"\" &&\n                res.body.output.sso_details.enc_private_key != \"\";\n            if (isValid) {\n                api.delete(apiURL.replace(\":org_uid\", org_uid).replace(\":cert_type\", \"private\"))\n                    .set('authtoken', authToken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            res.body.output.message.should.equal(messageList.ORG_CERT_PRIVATE_DELETED_SUCCESS);\n                            done();\n                        }\n                    });\n            } else {\n                true.should.equal(false);\n                done();\n            }\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3a09a6b9-2b87-4b7b-af3a-da40e3e8554f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not get SSO certs by Developer.",
                    "fullTitle": "Enterprise Organization Organization.removeCerts Should not get SSO certs by Developer.",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.delete(apiURL.replace(\":org_uid\", org_uid).replace(\":cert_type\", \"public\"))\n    .set('authtoken', _data.developer.authtoken)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_NOT_ADMIN);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "461d1fa1-00e1-4403-9b27-4c9612f59597",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should gives invalid file type errors for both files.",
                    "fullTitle": "Enterprise Organization Organization.removeCerts Should gives invalid file type errors for both files.",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.delete(apiURL.replace(\":org_uid\", org_uid).replace(\":cert_type\", \"public1\"))\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.error.message == messageList.ORG_INVALID_CERT_TYPE;\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7f0d9725-743c-4e74-8cbb-39bb2ca0b237",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Organization Organization.removeCerts Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.delete(apiURL.replace(\":org_uid\", org_uid).replace(\":cert_type\", \"public\"))\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "15fde30c-3af4-4b73-9484-1a698126cb1a",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "eeb05760-7724-4a07-9b9a-94cc261f697b",
                  "3a09a6b9-2b87-4b7b-af3a-da40e3e8554f",
                  "461d1fa1-00e1-4403-9b27-4c9612f59597",
                  "7f0d9725-743c-4e74-8cbb-39bb2ca0b237",
                  "15fde30c-3af4-4b73-9484-1a698126cb1a"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 98,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "794b5063-0af0-4e78-bf3a-c39ae304f97f",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\organization\\transfer.enterprise.js",
        "file": "\\controllers\\test\\organization\\transfer.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "004b649e-2516-4b03-a064-7aa8436a693c",
            "title": "Organization",
            "fullFile": "C:\\work\\api\\controllers\\test\\organization\\transfer.enterprise.js",
            "file": "\\controllers\\test\\organization\\transfer.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "0dcb4031-c7c7-456d-9cc8-2e70b0569214",
                "title": "Organization.transfer",
                "fullFile": "C:\\work\\api\\controllers\\test\\organization\\transfer.enterprise.js",
                "file": "\\controllers\\test\\organization\\transfer.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Organization Organization.transfer \"before each\" hook",
                    "timedOut": false,
                    "duration": 57,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        _data = data;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "467721a9-0535-4466-8f54-f57ea4803197",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Organization Organization.transfer \"after all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "done();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "59af82ee-0eee-411e-b3f5-3e51ea52e471",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Organization Organization.transfer \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "425dfbc3-470f-4409-ad54-ca86b88ef308",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should send ownership invitation to existing flow user.",
                    "fullTitle": "Enterprise Organization Organization.transfer Should send ownership invitation to existing flow user.",
                    "timedOut": false,
                    "duration": 18,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.put(apiURL.replace(\":org_uid\", org_uid))\n    .send({\n        \"email\": _data.other_user.email\n    })\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            if (res.body.output.message == messageList.ORG_OWNERSHIP_INVITATION_SEND) {\n                _models.OrganizationOwnerInvitation.findOne({ org_uid: org_uid, email: _data.other_user.email }, function(error, orgInvitation) {\n                    if (error || !orgInvitation) {\n                        false.should.equal(true);\n                        done();\n                    } else {\n                        true.should.equal(true);\n                        done();\n                    }\n                });\n            } else {\n                true.should.equal(false);\n                done();\n            }\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "66d1cc71-5880-42a7-bfcb-873700fc196e",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get ownership invitation.",
                    "fullTitle": "Enterprise Organization Organization.transfer Should get ownership invitation.",
                    "timedOut": false,
                    "duration": 40,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.put(apiURL.replace(\":org_uid\", org_uid))\n    .send({\n        \"email\": _data.other_user.email\n    })\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            if (res.body.output.message == messageList.ORG_OWNERSHIP_INVITATION_SEND) {\n                api.get(\"/enterprise/v1/organizations/:org_uid\".replace(\":org_uid\", org_uid))\n                    .set('authtoken', _data.other_user.authtoken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            res.body.output.owner_invitation.should.not.equal(undefined);\n                            done();\n                        }\n                    });\n            } else {\n                true.should.equal(false);\n                done();\n            }\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2e5e74ea-487a-46d5-92a8-826ae694b3a4",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should limit ownership invitation.",
                    "fullTitle": "Enterprise Organization Organization.transfer Should limit ownership invitation.",
                    "timedOut": false,
                    "duration": 38,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(\"/enterprise/v1/organizations/:org_uid/invite\".replace(\":org_uid\", org_uid))\n    .send({\n        \"org_roles\": [_data.roles[\"Developer\"].uid],\n        \"emails\": [\"test.user+1@raweng.com\", \"test.user+1@rawenG.com\", \"test.user+2@raweng.com\",\n            \"test.user+3@raweng.com\", \"test.user+4@raweng.com\", \"test.user+5@raweng.com\"\n        ]\n    })\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            api.put(apiURL.replace(\":org_uid\", org_uid))\n                .send({\n                    \"email\": \"test.user+6@raweng.com\"\n                })\n                .set('authtoken', authToken)\n                .expect(httpStatus.BAD_REQUEST)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        var error_message = messageList.ORG_USER_MAX_LIMIT_REACHED;\n                        error_message = error_message.replace(\"%%USER_COUNT%%\", 10);\n                        res.body.error.message.should.equal(error_message);\n                        done();\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cac75db5-93bf-4127-9dd4-d2bf602311bf",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give organization not found error.",
                    "fullTitle": "Enterprise Organization Organization.transfer Should give organization not found error.",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.put(apiURL.replace(\":org_uid\", \"FAKE_ORG\"))\n    .send({\n        \"email\": _data.other_user.email\n    })\n    .set('authtoken', authToken)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_NOT_FOUND);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cecc4d88-cc04-449b-b5a3-49be983c480d",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should validate ownership invitation body.",
                    "fullTitle": "Enterprise Organization Organization.transfer Should validate ownership invitation body.",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.put(apiURL.replace(\":org_uid\", org_uid))\n    .send({})\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            (res.body.error.email.message == messageList.ORG_EMAIL_REQUIRED).should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e3e1c25f-3453-4f1c-b31d-060368a2644b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should send ownership invitation to existing organization flow user.",
                    "fullTitle": "Enterprise Organization Organization.transfer Should send ownership invitation to existing organization flow user.",
                    "timedOut": false,
                    "duration": 21,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.put(apiURL.replace(\":org_uid\", org_uid))\n    .send({\n        \"email\": _data.developer.email\n    })\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            if (res.body.output.message == messageList.ORG_OWNERSHIP_INVITATION_SEND) {\n                _models.OrganizationOwnerInvitation.findOne({ org_uid: org_uid, email: _data.developer.email }, function(error, orgInvitation) {\n                    if (error || !orgInvitation) {\n                        false.should.equal(true);\n                        done();\n                    } else {\n                        true.should.equal(true);\n                        done();\n                    }\n                });\n            } else {\n                true.should.equal(false);\n                done();\n            }\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e8519dc5-38ed-4ea3-85de-f66111f97625",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should send ownership invitation to new flow user.",
                    "fullTitle": "Enterprise Organization Organization.transfer Should send ownership invitation to new flow user.",
                    "timedOut": false,
                    "duration": 18,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar email = \"test.user+1000@raweng.com\";\napi.put(apiURL.replace(\":org_uid\", org_uid))\n    .send({\n        \"email\": email\n    })\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            if (res.body.output.message == messageList.ORG_OWNERSHIP_INVITATION_SEND) {\n                _models.OrganizationOwnerInvitation.findOne({ org_uid: org_uid, email: email }, function(error, orgInvitation) {\n                    if (error || !orgInvitation) {\n                        false.should.equal(true);\n                        done();\n                    } else {\n                        true.should.equal(true);\n                        done();\n                    }\n                });\n            } else {\n                true.should.equal(false);\n                done();\n            }\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0049a63d-3d17-4c8b-8d19-3938be1dab21",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should send ownership invitation to existing google user.",
                    "fullTitle": "Enterprise Organization Organization.transfer Should send ownership invitation to existing google user.",
                    "timedOut": false,
                    "duration": 2915,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar email = \"test.user+1000@raweng.com\";\nsignUpGoogleUser({\n    done: done,\n    email: email\n}, function(res) {\n    var new_user_uid = res.body.output.uid;\n    api.put(apiURL.replace(\":org_uid\", org_uid))\n        .send({\n            \"email\": email\n        })\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                if (res.body.output.message == messageList.ORG_OWNERSHIP_INVITATION_SEND) {\n                    _models.OrganizationOwnerInvitation.findOne({ org_uid: org_uid, email: email }, function(error, orgInvitation) {\n                        if (error || !orgInvitation) {\n                            false.should.equal(true);\n                            done();\n                        } else {\n                            true.should.equal(true);\n                            done();\n                        }\n                    });\n                } else {\n                    true.should.equal(false);\n                    done();\n                }\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5162062a-ab22-466c-ba20-fbc13c07ae92",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should send ownership invitation to new google user.",
                    "fullTitle": "Enterprise Organization Organization.transfer Should send ownership invitation to new google user.",
                    "timedOut": false,
                    "duration": 20,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar email = \"test.user+1000@raweng.com\";\napi.put(apiURL.replace(\":org_uid\", org_uid))\n    .send({\n        \"email\": email\n    })\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            if (res.body.output.message == messageList.ORG_OWNERSHIP_INVITATION_SEND) {\n                _models.OrganizationOwnerInvitation.findOne({ org_uid: org_uid, email: email }, function(error, orgInvitation) {\n                    if (error || !orgInvitation) {\n                        false.should.equal(true);\n                        done();\n                    } else {\n                        true.should.equal(true);\n                        done();\n                    }\n                });\n            } else {\n                true.should.equal(false);\n                done();\n            }\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "aeeaa2c9-f75a-4285-a675-13d17d0f3ced",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give owner required error for admin role user.",
                    "fullTitle": "Enterprise Organization Organization.transfer Should give owner required error for admin role user.",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.put(apiURL.replace(\":org_uid\", org_uid))\n    .send({\n        \"email\": _data.developer.email\n    })\n    .set('authtoken', _data.admin.authtoken)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_NOT_OWNER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5f1c22eb-493c-40fb-b00c-84f74125ff17",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give owner required error for developer role user.",
                    "fullTitle": "Enterprise Organization Organization.transfer Should give owner required error for developer role user.",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.put(apiURL.replace(\":org_uid\", org_uid))\n    .send({\n        \"email\": _data.developer.email\n    })\n    .set('authtoken', _data.developer.authtoken)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_NOT_OWNER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "23c4af99-00b8-4bf8-91e1-d0c2c104b0b4",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Organization Organization.transfer Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.put(apiURL.replace(\":org_uid\", org_uid))\n    .send({\n        \"email\": _data.developer.email\n    })\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3d61f6d4-62b3-44f1-9ff6-4cb25035dbd5",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "66d1cc71-5880-42a7-bfcb-873700fc196e",
                  "2e5e74ea-487a-46d5-92a8-826ae694b3a4",
                  "cac75db5-93bf-4127-9dd4-d2bf602311bf",
                  "cecc4d88-cc04-449b-b5a3-49be983c480d",
                  "e3e1c25f-3453-4f1c-b31d-060368a2644b",
                  "e8519dc5-38ed-4ea3-85de-f66111f97625",
                  "0049a63d-3d17-4c8b-8d19-3938be1dab21",
                  "5162062a-ab22-466c-ba20-fbc13c07ae92",
                  "aeeaa2c9-f75a-4285-a675-13d17d0f3ced",
                  "5f1c22eb-493c-40fb-b00c-84f74125ff17",
                  "23c4af99-00b8-4bf8-91e1-d0c2c104b0b4",
                  "3d61f6d4-62b3-44f1-9ff6-4cb25035dbd5"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 3118,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "b0035b75-8c3f-455e-a839-5dc4411277cb",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\organization\\update.enterprise.js",
        "file": "\\controllers\\test\\organization\\update.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "352aeb57-ba87-4461-833b-08d21fd09869",
            "title": "Organization",
            "fullFile": "C:\\work\\api\\controllers\\test\\organization\\update.enterprise.js",
            "file": "\\controllers\\test\\organization\\update.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "adec7dff-399e-49e5-a494-50dcb3817154",
                "title": "Organization.update",
                "fullFile": "C:\\work\\api\\controllers\\test\\organization\\update.enterprise.js",
                "file": "\\controllers\\test\\organization\\update.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Organization Organization.update \"before each\" hook",
                    "timedOut": false,
                    "duration": 57,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        _data = data;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4bd861f1-31bf-4b46-a614-a9782bf93b56",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Organization Organization.update \"after all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5a0cad1c-fd79-44f2-8bf3-80683c4dfe17",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Organization Organization.update \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2766b919-5a80-4ed3-88c9-934724a235a6",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should update organization details.",
                    "fullTitle": "Enterprise Organization Organization.update Should update organization details.",
                    "timedOut": false,
                    "duration": 19,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar body = {\n    'name': 'org3',\n    'sso_details': {\n        'name': 'sso',\n        'url': 'https://example.com'\n    },\n    'avatar': 'https://example.com/img1.png'\n};\nserver.agents[\"enterprise\"].s3.UploadAvatar = function(options, callback) {\n    callback(null, {\n        ETag: \"sdfdsf35s6dfsdfdsf6565656565655665\"\n    });\n};\nserver.agents[\"enterprise\"].s3.DownloadAvatar = function(options, callback) {\n    callback(null, body.avatar);\n};\napi.put(apiURL.replace(\":org_uid\", org_uid))\n    .send(body)\n    .set('authtoken', _data.admin.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var output = res.body.output || {};\n            (output.uid == org_uid &&\n                output.name == body.name &&\n                output.avatar == body.avatar).should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2c511375-cb10-4c9c-b748-47460cf99025",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give organization not found error.",
                    "fullTitle": "Enterprise Organization Organization.update Should give organization not found error.",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar body = {\n    'name': 'org3',\n    'sso_details': {\n        'name': 'sso',\n        'url': 'https://example.com'\n    },\n    'avatar': 'https://example.com/img1.png'\n};\nserver.agents[\"enterprise\"].s3.UploadAvatar = function(options, callback) {\n    callback(null, {\n        ETag: \"sdfdsf35s6dfsdfdsf6565656565655665\"\n    });\n};\nserver.agents[\"enterprise\"].s3.DownloadAvatar = function(options, callback) {\n    callback(null, body.avatar);\n};\napi.put(apiURL.replace(\":org_uid\", \"FAKE_ORG\"))\n    .send(body)\n    .set('authtoken', _data.admin.authtoken)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_NOT_FOUND);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b52dd5bb-f907-414a-9514-57275e0523dc",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should update same name in organization details.",
                    "fullTitle": "Enterprise Organization Organization.update Should update same name in organization details.",
                    "timedOut": false,
                    "duration": 18,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar body = {\n    'name': 'org1',\n    'sso_details': {\n        'name': 'sso',\n        'url': 'https://example.com'\n    },\n    'avatar': 'https://example.com/img1.png'\n};\nserver.agents[\"enterprise\"].s3.UploadAvatar = function(options, callback) {\n    callback(null, {\n        ETag: \"sdfdsf35s6dfsdfdsf6565656565655665\"\n    });\n};\nserver.agents[\"enterprise\"].s3.DownloadAvatar = function(options, callback) {\n    callback(null, body.avatar);\n};\napi.put(apiURL.replace(\":org_uid\", org_uid))\n    .send(body)\n    .set('authtoken', _data.admin.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var output = res.body.output || {};\n            (output.uid == org_uid &&\n                output.name == body.name &&\n                output.avatar == body.avatar).should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f697b4ff-41e2-4d32-b0a0-5ec0efa2da65",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should update organization details without name.",
                    "fullTitle": "Enterprise Organization Organization.update Should update organization details without name.",
                    "timedOut": false,
                    "duration": 21,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar body = {\n    'sso_details': {\n        'name': 'sso',\n        'url': 'https://example.com'\n    },\n    'avatar': 'https://example.com/img1.png'\n};\nserver.agents[\"enterprise\"].s3.UploadAvatar = function(options, callback) {\n    callback(null, {\n        ETag: \"sdfdsf35s6dfsdfdsf6565656565655665\"\n    });\n};\nserver.agents[\"enterprise\"].s3.DownloadAvatar = function(options, callback) {\n    callback(null, body.avatar);\n};\napi.put(apiURL.replace(\":org_uid\", org_uid))\n    .send(body)\n    .set('authtoken', _data.admin.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var output = res.body.output || {};\n            (output.uid == org_uid &&\n                output.name != \"\" &&\n                output.avatar == body.avatar).should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "671b35cd-73f2-4de9-945e-310a63292602",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give duplicate organization name error.",
                    "fullTitle": "Enterprise Organization Organization.update Should give duplicate organization name error.",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar body = {\n    'name': 'org2',\n    'sso_details': {\n        'name': 'sso',\n        'url': 'https://example.com'\n    },\n    'avatar': 'https://example.com/img1.png'\n};\nserver.agents[\"enterprise\"].s3.UploadAvatar = function(options, callback) {\n    callback(null, {\n        ETag: \"sdfdsf35s6dfsdfdsf6565656565655665\"\n    });\n};\nserver.agents[\"enterprise\"].s3.DownloadAvatar = function(options, callback) {\n    callback(null, body.avatar);\n};\napi.put(apiURL.replace(\":org_uid\", org_uid))\n    .send(body)\n    .set('authtoken', _data.admin.authtoken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_DUPLICATE_NAME_ERROR);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "16dcf9b6-929f-4c83-817b-b5dbb6002f8d",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should only allowed to update org details by owner and admin role user.",
                    "fullTitle": "Enterprise Organization Organization.update Should only allowed to update org details by owner and admin role user.",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar body = {\n    'name': 'org3',\n    'sso_details': {\n        'name': 'sso',\n        'url': 'https://example.com'\n    },\n    'avatar': 'https://example.com/img1.png'\n};\nserver.agents[\"enterprise\"].s3.UploadAvatar = function(options, callback) {\n    callback(null, {\n        ETag: \"sdfdsf35s6dfsdfdsf6565656565655665\"\n    });\n};\nserver.agents[\"enterprise\"].s3.DownloadAvatar = function(options, callback) {\n    callback(null, body.avatar);\n};\napi.put(apiURL.replace(\":org_uid\", org_uid))\n    .send(body)\n    .set('authtoken', _data.developer.authtoken)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_NOT_ADMIN);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "db47c598-cd70-4fc7-a535-08c16c365cb1",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Organization Organization.update Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar body = {\n    'name': 'org3',\n    'sso_details': {\n        'name': 'sso',\n        'url': 'https://example.com'\n    },\n    'avatar': 'https://example.com/img1.png'\n};\nserver.agents[\"enterprise\"].s3.UploadAvatar = function(options, callback) {\n    callback(null, {\n        ETag: \"sdfdsf35s6dfsdfdsf6565656565655665\"\n    });\n};\nserver.agents[\"enterprise\"].s3.DownloadAvatar = function(options, callback) {\n    callback(null, body.avatar);\n};\napi.put(apiURL.replace(\":org_uid\", org_uid))\n    .send(body)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2581a363-a82f-4bf9-bfb3-bcd059508dbe",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "2c511375-cb10-4c9c-b748-47460cf99025",
                  "b52dd5bb-f907-414a-9514-57275e0523dc",
                  "f697b4ff-41e2-4d32-b0a0-5ec0efa2da65",
                  "671b35cd-73f2-4de9-945e-310a63292602",
                  "16dcf9b6-929f-4c83-817b-b5dbb6002f8d",
                  "db47c598-cd70-4fc7-a535-08c16c365cb1",
                  "2581a363-a82f-4bf9-bfb3-bcd059508dbe"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 89,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "b82ea207-1a31-4e7a-850b-6829462f502d",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\organization\\updateAvatar.enterprise.js",
        "file": "\\controllers\\test\\organization\\updateAvatar.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "a30fce2e-3088-41c0-b913-860f0bf30287",
            "title": "Organization",
            "fullFile": "C:\\work\\api\\controllers\\test\\organization\\updateAvatar.enterprise.js",
            "file": "\\controllers\\test\\organization\\updateAvatar.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "a652c710-63f5-486c-8830-c2245abc2cdf",
                "title": "Organization.updateAvatar",
                "fullFile": "C:\\work\\api\\controllers\\test\\organization\\updateAvatar.enterprise.js",
                "file": "\\controllers\\test\\organization\\updateAvatar.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Organization Organization.updateAvatar \"before each\" hook",
                    "timedOut": false,
                    "duration": 57,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        _data = data;\n        org_uid = data.organization.uid;\n        user_uid = data.organization.user_uid;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0ec1553b-0f52-497f-bef5-2a7cefd93614",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Organization Organization.updateAvatar \"after all\" hook",
                    "timedOut": false,
                    "duration": 1,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "testCollection.organizationRemoveRecords({}, function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "df7f6c6b-a01c-4399-9040-74efd4c3256a",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Organization Organization.updateAvatar \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "97251242-7d47-43ef-83f3-4c9b55c4024f",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Owner should update organization details.",
                    "fullTitle": "Enterprise Organization Organization.updateAvatar Owner should update organization details.",
                    "timedOut": false,
                    "duration": 24,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar body = {\n    'avatar': 'https://example.com/img1.png'\n};\nserver.agents[\"enterprise\"].s3.UploadAvatar = function(options, callback) {\n    callback(null, {\n        ETag: \"sdfdsf35s6dfsdfdsf6565656565655665\"\n    });\n};\nserver.agents[\"enterprise\"].s3.DownloadAvatar = function(options, callback) {\n    callback(null, body.avatar);\n};\napi.put(apiURL.replace(\":org_uid\", org_uid))\n    .send(body)\n    .set('authtoken', _data.owner.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var output = res.body.output || {};\n            (output.uid == org_uid &&\n                output.avatar == body.avatar).should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "41f2e499-587b-428b-9c7e-2a2bebe2f4fc",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Owner should able to remove organization image.",
                    "fullTitle": "Enterprise Organization Organization.updateAvatar Owner should able to remove organization image.",
                    "timedOut": false,
                    "duration": 23,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar body = {\n    'avatar': null\n};\nserver.agents[\"enterprise\"].s3.UploadAvatar = function(options, callback) {\n    callback(null, {\n        ETag: \"sdfdsf35s6dfsdfdsf6565656565655665\"\n    });\n};\nserver.agents[\"enterprise\"].s3.DownloadAvatar = function(options, callback) {\n    callback(null, body.avatar);\n};\napi.put(apiURL.replace(\":org_uid\", org_uid))\n    .send(body)\n    .set('authtoken', _data.owner.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var output = res.body.output || {};\n            (output.uid == org_uid &&\n                output.avatar == body.avatar).should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ddc67661-97ef-4b9c-a776-1c93777458ef",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Admin should update organization details.",
                    "fullTitle": "Enterprise Organization Organization.updateAvatar Admin should update organization details.",
                    "timedOut": false,
                    "duration": 22,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar body = {\n    'avatar': 'https://example.com/img1.png'\n};\nserver.agents[\"enterprise\"].s3.UploadAvatar = function(options, callback) {\n    callback(null, {\n        ETag: \"sdfdsf35s6dfsdfdsf6565656565655665\"\n    });\n};\nserver.agents[\"enterprise\"].s3.DownloadAvatar = function(options, callback) {\n    callback(null, body.avatar);\n};\napi.put(apiURL.replace(\":org_uid\", org_uid))\n    .send(body)\n    .set('authtoken', _data.admin.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var output = res.body.output || {};\n            (output.uid == org_uid &&\n                output.avatar == body.avatar).should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "acf46786-d272-4195-8058-5255e9589ec7",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Other roles should not update avatar.",
                    "fullTitle": "Enterprise Organization Organization.updateAvatar Other roles should not update avatar.",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar body = {\n    'avatar': 'https://example.com/img1.png'\n};\nserver.agents[\"enterprise\"].s3.UploadAvatar = function(options, callback) {\n    callback(null, {\n        ETag: \"sdfdsf35s6dfsdfdsf6565656565655665\"\n    });\n};\nserver.agents[\"enterprise\"].s3.DownloadAvatar = function(options, callback) {\n    callback(null, body.avatar);\n};\napi.put(apiURL.replace(\":org_uid\", org_uid))\n    .send(body)\n    .set('authtoken', _data.developer.authtoken)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_NOT_ADMIN);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1c8f05e7-a3b2-4443-ae38-aa60ca105fe7",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Organization Organization.updateAvatar Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar body = {\n    'avatar': 'https://example.com/img1.png'\n};\nserver.agents[\"enterprise\"].s3.UploadAvatar = function(options, callback) {\n    callback(null, {\n        ETag: \"sdfdsf35s6dfsdfdsf6565656565655665\"\n    });\n};\nserver.agents[\"enterprise\"].s3.DownloadAvatar = function(options, callback) {\n    callback(null, body.avatar);\n};\napi.put(apiURL.replace(\":org_uid\", org_uid))\n    .send(body)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "20300bd4-b7e7-49d0-a415-8e7ba0f75720",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "41f2e499-587b-428b-9c7e-2a2bebe2f4fc",
                  "ddc67661-97ef-4b9c-a776-1c93777458ef",
                  "acf46786-d272-4195-8058-5255e9589ec7",
                  "1c8f05e7-a3b2-4443-ae38-aa60ca105fe7",
                  "20300bd4-b7e7-49d0-a415-8e7ba0f75720"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 85,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "847c0428-d7cd-4238-b45b-668be5368890",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\organization\\updateSSODetails.enterprise.js",
        "file": "\\controllers\\test\\organization\\updateSSODetails.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "c8e4e80a-eedf-4521-b828-7f84167fc403",
            "title": "Organization",
            "fullFile": "C:\\work\\api\\controllers\\test\\organization\\updateSSODetails.enterprise.js",
            "file": "\\controllers\\test\\organization\\updateSSODetails.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "8b8746ea-a45c-422e-bfa2-375896bdf01b",
                "title": "Organization.updateSSODetails",
                "fullFile": "C:\\work\\api\\controllers\\test\\organization\\updateSSODetails.enterprise.js",
                "file": "\\controllers\\test\\organization\\updateSSODetails.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Organization Organization.updateSSODetails \"before each\" hook",
                    "timedOut": false,
                    "duration": 57,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        _data = data;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3bafe565-94bc-4cb9-ad89-ea639842505a",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Organization Organization.updateSSODetails \"after all\" hook",
                    "timedOut": false,
                    "duration": 1,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "testCollection.organizationRemoveRecords({}, function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "74714099-e55f-4931-81c4-f856e694e902",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Organization Organization.updateSSODetails \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "03616dcf-18ff-4644-9b53-5ff5ff76af6a",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should update SSO Config details.",
                    "fullTitle": "Enterprise Organization Organization.updateSSODetails Should update SSO Config details.",
                    "timedOut": false,
                    "duration": 26,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar config = getImmutable(ssoConfig);\napi.put(apiURL.replace(\":org_uid\", org_uid))\n    .send(config)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.uid != \"\" &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\" &&\n                res.body.output.sso_details.entry_point == config.entry_point &&\n                res.body.output.sso_details.algo_type == config.algo_type &&\n                res.body.output.sso_details.session_time_out_hours == config.session_time_out_hours &&\n                res.body.output.sso_details.issuer == config.issuer\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "27bf48dc-c469-48bc-972c-acdc86d9a0ec",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should validate SSO Config details.",
                    "fullTitle": "Enterprise Organization Organization.updateSSODetails Should validate SSO Config details.",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar config = getImmutable(ssoConfig);\napi.put(apiURL.replace(\":org_uid\", org_uid))\n    .send({})\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.error.entry_point.message == messageList.ORG_SSO_ENTRY_POINT_REQUIRED &&\n                res.body.error.algo_type.message == messageList.ORG_SSO_ALGO_TYPE_REQUIRED &&\n                res.body.error.session_time_out_hours.message == messageList.ORG_SSO_SESSION_TIMEOUT_POSITIVE_REQUIRED;\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "07adf34d-e0f2-4900-ba00-2becedf16ab6",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should update SSO Config details by admin.",
                    "fullTitle": "Enterprise Organization Organization.updateSSODetails Should update SSO Config details by admin.",
                    "timedOut": false,
                    "duration": 23,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar config = getImmutable(ssoConfig);\napi.put(apiURL.replace(\":org_uid\", org_uid))\n    .send(config)\n    .set('authtoken', _data.admin.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.uid != \"\" &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\" &&\n                res.body.output.sso_details.entry_point == config.entry_point &&\n                res.body.output.sso_details.algo_type == config.algo_type &&\n                res.body.output.sso_details.session_time_out_hours == config.session_time_out_hours\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "973f2ddf-4f13-44e9-b016-f716b1f722ba",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not update SSO Config details by developer.",
                    "fullTitle": "Enterprise Organization Organization.updateSSODetails Should not update SSO Config details by developer.",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar config = getImmutable(ssoConfig);\napi.put(apiURL.replace(\":org_uid\", org_uid))\n    .send(config)\n    .set('authtoken', _data.developer.authtoken)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_NOT_ADMIN);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0045252e-b3a1-4569-94ff-17088a3d555e",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give organization not found error.",
                    "fullTitle": "Enterprise Organization Organization.updateSSODetails Should give organization not found error.",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.put(apiURL.replace(\":org_uid\", \"FAKE_ORG\"))\n    .set('authtoken', authToken)\n    .send({})\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_NOT_FOUND);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d131c166-f74a-476c-9594-fee9ffcd7383",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Organization Organization.updateSSODetails Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.put(apiURL.replace(\":org_uid\", \"FAKE_ORG\"))\n    .send({})\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cf430db1-afe4-424c-a662-c0018e49bd02",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "27bf48dc-c469-48bc-972c-acdc86d9a0ec",
                  "07adf34d-e0f2-4900-ba00-2becedf16ab6",
                  "973f2ddf-4f13-44e9-b016-f716b1f722ba",
                  "0045252e-b3a1-4569-94ff-17088a3d555e",
                  "d131c166-f74a-476c-9594-fee9ffcd7383",
                  "cf430db1-afe4-424c-a662-c0018e49bd02"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 83,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "94f5d5e7-47e1-4d0d-a27d-333f22d40ef0",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\organization\\uploadCerts.enterprise.js",
        "file": "\\controllers\\test\\organization\\uploadCerts.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "1d9e762b-67ce-49b0-a69b-bc7650b5d7cf",
            "title": "Organization",
            "fullFile": "C:\\work\\api\\controllers\\test\\organization\\uploadCerts.enterprise.js",
            "file": "\\controllers\\test\\organization\\uploadCerts.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "12b3de18-84a3-402f-95d4-54fa999f23b9",
                "title": "Organization.uploadCerts",
                "fullFile": "C:\\work\\api\\controllers\\test\\organization\\uploadCerts.enterprise.js",
                "file": "\\controllers\\test\\organization\\uploadCerts.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Organization Organization.uploadCerts \"before each\" hook",
                    "timedOut": false,
                    "duration": 51,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        _data = data;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3a96145a-26b5-440b-891a-73e2a13879a9",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Organization Organization.uploadCerts \"after all\" hook",
                    "timedOut": false,
                    "duration": 2,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "testCollection.organizationRemoveRecords({}, function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9b29f5ee-d3d5-4a36-9596-c33323d8dafd",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Organization Organization.uploadCerts \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4154fdca-0e29-4db6-b26d-fde81ed458e7",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should upload SSO certs.",
                    "fullTitle": "Enterprise Organization Organization.uploadCerts Should upload SSO certs.",
                    "timedOut": false,
                    "duration": 23,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar publicKeyFile = __dirname + \"/../../../__cert/okta.cert\";\nvar privateKeyFile = __dirname + \"/../../../__cert/SP1.pem\";\napi.post(apiURL.replace(\":org_uid\", org_uid))\n    .set('authtoken', authToken)\n    .attach('signed_public_key', publicKeyFile)\n    .attach('enc_private_key', privateKeyFile)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.uid != \"\" &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\" &&\n                res.body.output.sso_details.signed_public_key != \"\" &&\n                res.body.output.sso_details.enc_private_key != \"\";\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1fc8515b-e880-4a84-9707-d53d814a7195",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should upload SSO certs by Admin.",
                    "fullTitle": "Enterprise Organization Organization.uploadCerts Should upload SSO certs by Admin.",
                    "timedOut": false,
                    "duration": 24,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar publicKeyFile = __dirname + \"/../../../__cert/okta.cert\";\nvar privateKeyFile = __dirname + \"/../../../__cert/SP1.pem\";\napi.post(apiURL.replace(\":org_uid\", org_uid))\n    .set('authtoken', _data.admin.authtoken)\n    .attach('signed_public_key', publicKeyFile)\n    .attach('enc_private_key', privateKeyFile)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.uid != \"\" &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\" &&\n                res.body.output.sso_details.signed_public_key != \"\" &&\n                res.body.output.sso_details.enc_private_key != \"\";\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "aa12f014-b32b-4252-bb54-d00e46a211ae",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not upload SSO certs by Billing Manager.",
                    "fullTitle": "Enterprise Organization Organization.uploadCerts Should not upload SSO certs by Billing Manager.",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar publicKeyFile = __dirname + \"/../../../__cert/okta.cert\";\nvar privateKeyFile = __dirname + \"/../../../__cert/SP1.pem\";\napi.post(apiURL.replace(\":org_uid\", org_uid))\n    .set('authtoken', _data.billing_manager.authtoken)\n    .attach('signed_public_key', publicKeyFile)\n    .attach('enc_private_key', privateKeyFile)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_NOT_ADMIN);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1d03a9dd-fde4-466a-b7e8-879bc7e61a78",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not upload SSO certs by Developer.",
                    "fullTitle": "Enterprise Organization Organization.uploadCerts Should not upload SSO certs by Developer.",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar publicKeyFile = __dirname + \"/../../../__cert/okta.cert\";\nvar privateKeyFile = __dirname + \"/../../../__cert/SP1.pem\";\napi.post(apiURL.replace(\":org_uid\", org_uid))\n    .set('authtoken', _data.developer.authtoken)\n    .attach('signed_public_key', publicKeyFile)\n    .attach('enc_private_key', privateKeyFile)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_NOT_ADMIN);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ab067c20-56aa-4da9-9525-0e1a9167eef0",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should upload only public key.",
                    "fullTitle": "Enterprise Organization Organization.uploadCerts Should upload only public key.",
                    "timedOut": false,
                    "duration": 23,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar publicKeyFile = __dirname + \"/../../../__cert/okta.cert\";\nvar privateKeyFile = __dirname + \"/../../../__cert/SP1.pem\";\napi.post(apiURL.replace(\":org_uid\", org_uid))\n    .set('authtoken', authToken)\n    .attach('signed_public_key', publicKeyFile)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.uid != \"\" &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\" &&\n                res.body.output.sso_details.signed_public_key != \"\";\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6d9928d4-cfdc-44df-9010-a4b2a95d6959",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should upload only private certificate.",
                    "fullTitle": "Enterprise Organization Organization.uploadCerts Should upload only private certificate.",
                    "timedOut": false,
                    "duration": 23,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar publicKeyFile = __dirname + \"/../../../__cert/okta.cert\";\nvar privateKeyFile = __dirname + \"/../../../__cert/SP1.pem\";\napi.post(apiURL.replace(\":org_uid\", org_uid))\n    .set('authtoken', authToken)\n    .attach('enc_private_key', privateKeyFile)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.uid != \"\" &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\" &&\n                res.body.output.sso_details.enc_private_key != \"\";\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "048f9e8c-adfa-4239-9185-c881974b4554",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should gives invalid public key file type error.",
                    "fullTitle": "Enterprise Organization Organization.uploadCerts Should gives invalid public key file type error.",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar publicKeyFile = __dirname + \"/../../../__cert/okta.cert\";\nvar privateKeyFile = __dirname + \"/../../../__cert/SP1.pem\";\napi.post(apiURL.replace(\":org_uid\", org_uid))\n    .set('authtoken', authToken)\n    .attach('signed_public_key', privateKeyFile)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.error.signed_public_key.message == messageList.ORG_SSO_PUBLIC_CERT_FILE_TYPE_ERROR;\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3b5b9ead-3562-492b-98e0-5a0247c4402b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should gives invalid private cert file type error.",
                    "fullTitle": "Enterprise Organization Organization.uploadCerts Should gives invalid private cert file type error.",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar publicKeyFile = __dirname + \"/../../../__cert/okta.cert\";\nvar privateKeyFile = __dirname + \"/../../../__cert/SP1.pem\";\napi.post(apiURL.replace(\":org_uid\", org_uid))\n    .set('authtoken', authToken)\n    .attach('enc_private_key', publicKeyFile)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.error.enc_private_key.message == messageList.ORG_SSO_PRIVATE_KEY_FILE_TYPE_ERROR;\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d220bf8d-422b-478e-aa14-07f796499e9e",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should gives invalid file type errors for both files.",
                    "fullTitle": "Enterprise Organization Organization.uploadCerts Should gives invalid file type errors for both files.",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar publicKeyFile = __dirname + \"/../../../__cert/okta.cert\";\nvar privateKeyFile = __dirname + \"/../../../__cert/SP1.pem\";\napi.post(apiURL.replace(\":org_uid\", org_uid))\n    .set('authtoken', authToken)\n    .attach('signed_public_key', privateKeyFile)\n    .attach('enc_private_key', publicKeyFile)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.error.signed_public_key.message == messageList.ORG_SSO_PUBLIC_CERT_FILE_TYPE_ERROR &&\n                res.body.error.enc_private_key.message == messageList.ORG_SSO_PRIVATE_KEY_FILE_TYPE_ERROR;\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b98f85ac-6da2-4577-8bb2-7a6fa99450ad",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Organization Organization.uploadCerts Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL.replace(\":org_uid\", org_uid))\n    .send({})\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3f97ab4d-2cbb-4e86-ab69-2160463896f6",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "1fc8515b-e880-4a84-9707-d53d814a7195",
                  "aa12f014-b32b-4252-bb54-d00e46a211ae",
                  "1d03a9dd-fde4-466a-b7e8-879bc7e61a78",
                  "ab067c20-56aa-4da9-9525-0e1a9167eef0",
                  "6d9928d4-cfdc-44df-9010-a4b2a95d6959",
                  "048f9e8c-adfa-4239-9185-c881974b4554",
                  "3b5b9ead-3562-492b-98e0-5a0247c4402b",
                  "d220bf8d-422b-478e-aa14-07f796499e9e",
                  "b98f85ac-6da2-4577-8bb2-7a6fa99450ad",
                  "3f97ab4d-2cbb-4e86-ab69-2160463896f6"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 154,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "24921c62-9c9c-4144-9693-340fef90e4ac",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\organizationRole\\create.enterprise.js",
        "file": "\\controllers\\test\\organizationRole\\create.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "eb65acf2-6ad6-435b-b05c-28980dee0635",
            "title": "Organization",
            "fullFile": "C:\\work\\api\\controllers\\test\\organizationRole\\create.enterprise.js",
            "file": "\\controllers\\test\\organizationRole\\create.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "7510ae60-4926-4ed6-a255-88a7439040d8",
                "title": "OrganizationRole.create",
                "fullFile": "C:\\work\\api\\controllers\\test\\organizationRole\\create.enterprise.js",
                "file": "\\controllers\\test\\organizationRole\\create.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Organization OrganizationRole.create \"before each\" hook",
                    "timedOut": false,
                    "duration": 57,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        _data = data;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "78e75215-210a-4b7d-85ab-6a73023d69d6",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Organization OrganizationRole.create \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e632ac21-5d56-47ec-90d7-1c334c9f0ccb",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should create organization role.",
                    "fullTitle": "Enterprise Organization OrganizationRole.create Should create organization role.",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar role = getImmutable(roleBody);\nrole.name = \"role5\";\nrole.projects = [_data.org_projects[0].uid, _data.org_projects[1].uid];\napi.post(apiURL.replace(\":org_uid\", org_uid))\n    .send(role)\n    .set('authtoken', authToken)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.uid.should.not.equal(\"\");\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "479d7009-d6e3-46e0-85b5-1cf1f55645e5",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give organization not found error.",
                    "fullTitle": "Enterprise Organization OrganizationRole.create Should give organization not found error.",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar role = getImmutable(roleBody);\nrole.name = \"role5\";\nrole.projects = [_data.org_projects[0].uid, _data.org_projects[1].uid];\napi.post(apiURL.replace(\":org_uid\", \"FAKE_ORG\"))\n    .send(role)\n    .set('authtoken', authToken)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_NOT_FOUND);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c52ff877-ced2-4352-9b89-863770d1e71c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should validate organization role body.",
                    "fullTitle": "Enterprise Organization OrganizationRole.create Should validate organization role body.",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL.replace(\":org_uid\", org_uid))\n    .send({})\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            (res.body.error.name.message == messageList.ORG_ROLE_NAME_REQUIRED &&\n                res.body.error.projects.message == messageList.ORG_PROJECT_SET_REQUIRED).should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b0d4ae46-38a5-4375-bba0-f9b8e24b0f79",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not allow to create organization role with duplicate name.",
                    "fullTitle": "Enterprise Organization OrganizationRole.create Should not allow to create organization role with duplicate name.",
                    "timedOut": false,
                    "duration": 30,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar role = getImmutable(roleBody);\nrole.name = \"role5\";\nrole.projects = [_data.org_projects[0].uid, _data.org_projects[1].uid];\napi.post(apiURL.replace(\":org_uid\", org_uid))\n    .send(role)\n    .set('authtoken', authToken)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            api.post(apiURL.replace(\":org_uid\", org_uid))\n                .send(role)\n                .set('authtoken', authToken)\n                .expect(httpStatus.BAD_REQUEST)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        res.body.error.message.should.equal(messageList.ORG_DUPLICATE_ROLE_NAME);\n                        done();\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7fb5f07d-ade1-4329-9d2e-0024ff3c8fa7",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not allow to create organization role to user of other role.",
                    "fullTitle": "Enterprise Organization OrganizationRole.create Should not allow to create organization role to user of other role.",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar role = getImmutable(roleBody);\nrole.name = \"role3\";\nrole.projects = [_data.org_projects[0].uid];\napi.post(apiURL.replace(\":org_uid\", org_uid))\n    .send(role)\n    .set('authtoken', _data.role1.authtoken)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_NOT_ADMIN);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4e8d5596-a0f6-4b55-9b93-432b0e600b92",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Organization OrganizationRole.create Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar role = getImmutable(roleBody);\nrole.name = \"role3\";\napi.post(apiURL)\n    .send(role)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f163e5b8-89f5-481d-91e2-039ee7ff4421",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "479d7009-d6e3-46e0-85b5-1cf1f55645e5",
                  "c52ff877-ced2-4352-9b89-863770d1e71c",
                  "b0d4ae46-38a5-4375-bba0-f9b8e24b0f79",
                  "7fb5f07d-ade1-4329-9d2e-0024ff3c8fa7",
                  "4e8d5596-a0f6-4b55-9b93-432b0e600b92",
                  "f163e5b8-89f5-481d-91e2-039ee7ff4421"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 79,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "4e180a01-9cfc-48a7-a215-8bc0d0d14175",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\organizationRole\\delete.enterprise.js",
        "file": "\\controllers\\test\\organizationRole\\delete.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "784cfd1b-fbf5-43bb-99b5-21a1238b3ba9",
            "title": "Organization",
            "fullFile": "C:\\work\\api\\controllers\\test\\organizationRole\\delete.enterprise.js",
            "file": "\\controllers\\test\\organizationRole\\delete.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "b94bde8f-148c-4976-8851-e60eed9091d5",
                "title": "OrganizationRole.deleteRole",
                "fullFile": "C:\\work\\api\\controllers\\test\\organizationRole\\delete.enterprise.js",
                "file": "\\controllers\\test\\organizationRole\\delete.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Organization OrganizationRole.deleteRole \"before each\" hook",
                    "timedOut": false,
                    "duration": 55,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        _data = data;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fdb0e50b-c92c-4ad5-82f7-18842a9bbb08",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Organization OrganizationRole.deleteRole \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "25f36c23-0d57-40fb-b6d3-5d30383338b2",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should delete organization role.",
                    "fullTitle": "Enterprise Organization OrganizationRole.deleteRole Should delete organization role.",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar org_role_uid = _data.roles[\"role3\"].uid;\napi.delete(apiURL.replace(\":org_uid\", org_uid).replace(\":org_role_uid\", org_role_uid))\n    .send({})\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.message.should.equal(messageList.ORG_ROLE_DELETED_SUCCESS);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2f6c7a8d-d22b-4762-a4fc-fcb59d9d528e",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give organization not found error.",
                    "fullTitle": "Enterprise Organization OrganizationRole.deleteRole Should give organization not found error.",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar org_role_uid = _data.roles[\"role1\"].uid;\napi.delete(apiURL.replace(\":org_uid\", \"FAKE_ORG\").replace(\":org_role_uid\", org_role_uid))\n    .send({})\n    .set('authtoken', authToken)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_NOT_FOUND);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e2fe9ad9-ec87-49af-8d4b-c5d1cde18332",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not delete Admin role.",
                    "fullTitle": "Enterprise Organization OrganizationRole.deleteRole Should not delete Admin role.",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar org_role_uid = _data.roles[\"Admin\"].uid;\napi.delete(apiURL.replace(\":org_uid\", org_uid).replace(\":org_role_uid\", org_role_uid))\n    .send({})\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_DEFAULT_ROLE_CANNOT_DELETE);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "173fea8b-f46c-45de-8f9b-2cd64e3381d9",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not delete Billing Manager role.",
                    "fullTitle": "Enterprise Organization OrganizationRole.deleteRole Should not delete Billing Manager role.",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar org_role_uid = _data.roles[\"Billing Manager\"].uid;\napi.delete(apiURL.replace(\":org_uid\", org_uid).replace(\":org_role_uid\", org_role_uid))\n    .send({})\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_DEFAULT_ROLE_CANNOT_DELETE);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "27583076-d45d-41f3-bce1-3f7db2a313e6",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not delete Developer role.",
                    "fullTitle": "Enterprise Organization OrganizationRole.deleteRole Should not delete Developer role.",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar org_role_uid = _data.roles[\"Developer\"].uid;\napi.delete(apiURL.replace(\":org_uid\", org_uid).replace(\":org_role_uid\", org_role_uid))\n    .send({})\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_DEFAULT_ROLE_CANNOT_DELETE);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0bb969ab-8371-4cc7-8265-9e1657d89262",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not delete role if it is used.",
                    "fullTitle": "Enterprise Organization OrganizationRole.deleteRole Should not delete role if it is used.",
                    "timedOut": false,
                    "duration": 26,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.OrganizationUser.findOne({\n    user_uid: _data.developer.uid\n}).lean().exec(function(error, orgUser) {\n    api.put(\"/enterprise/v1/organizations/:org_uid/users/:org_user_uid/roles\".replace(\":org_uid\", org_uid).replace(\":org_user_uid\", orgUser.uid))\n        .send({\n            org_roles: [_data.roles[\"role3\"].uid]\n        })\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                api.delete(apiURL.replace(\":org_uid\", org_uid).replace(\":org_role_uid\", _data.roles[\"role3\"].uid))\n                    .set('authtoken', authToken)\n                    .expect(httpStatus.BAD_REQUEST)\n                    .end(function(err, res) {\n                        res.body.error.message.should.equal(messageList.ORG_ASSIGNED_ROLE_DELETE_ERROR);\n                        done();\n                    });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6ffca429-e864-4403-8c80-aa5aa16ad005",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should delete role if it is unused.",
                    "fullTitle": "Enterprise Organization OrganizationRole.deleteRole Should delete role if it is unused.",
                    "timedOut": false,
                    "duration": 56,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.OrganizationUser.findOne({\n    user_uid: _data.developer.uid\n}).lean().exec(function(error, orgUser) {\n    api.put(\"/enterprise/v1/organizations/:org_uid/users/:org_user_uid/roles\".replace(\":org_uid\", org_uid).replace(\":org_user_uid\", orgUser.uid))\n        .send({\n            org_roles: [_data.roles[\"role3\"].uid]\n        })\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                api.delete(apiURL.replace(\":org_uid\", org_uid).replace(\":org_role_uid\", _data.roles[\"role3\"].uid))\n                    .set('authtoken', authToken)\n                    .expect(httpStatus.BAD_REQUEST)\n                    .end(function(err, res) {\n                        if (res.body.error.message == messageList.ORG_ASSIGNED_ROLE_DELETE_ERROR) {\n                            api.put(\"/enterprise/v1/organizations/:org_uid/users/:org_user_uid/roles\".replace(\":org_uid\", org_uid).replace(\":org_user_uid\", orgUser.uid))\n                                .send({\n                                    org_roles: []\n                                })\n                                .set('authtoken', authToken)\n                                .expect(httpStatus.OK)\n                                .end(function(err, res) {\n                                    if (err) {\n                                        done(err);\n                                    } else {\n                                        api.delete(apiURL.replace(\":org_uid\", org_uid).replace(\":org_role_uid\", _data.roles[\"role3\"].uid))\n                                            .send({})\n                                            .set('authtoken', authToken)\n                                            .expect(httpStatus.OK)\n                                            .end(function(err, res) {\n                                                if (err) {\n                                                    done(err);\n                                                } else {\n                                                    res.body.output.message.should.equal(messageList.ORG_ROLE_DELETED_SUCCESS);\n                                                    done();\n                                                }\n                                            });\n                                    }\n                                });\n                        } else {\n                            true.should.equal(false);\n                            done();\n                        }\n                    });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "36b11347-7442-4fb8-9c5c-a767a3a20d02",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should delete role if used user is removed.",
                    "fullTitle": "Enterprise Organization OrganizationRole.deleteRole Should delete role if used user is removed.",
                    "timedOut": false,
                    "duration": 55,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.OrganizationUser.findOne({\n    user_uid: _data.developer.uid\n}).lean().exec(function(error, orgUser) {\n    api.put(\"/enterprise/v1/organizations/:org_uid/users/:org_user_uid/roles\".replace(\":org_uid\", org_uid).replace(\":org_user_uid\", orgUser.uid))\n        .send({\n            org_roles: [_data.roles[\"role3\"].uid]\n        })\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                api.delete(apiURL.replace(\":org_uid\", org_uid).replace(\":org_role_uid\", _data.roles[\"role3\"].uid))\n                    .set('authtoken', authToken)\n                    .expect(httpStatus.BAD_REQUEST)\n                    .end(function(err, res) {\n                        if (res.body.error.message == messageList.ORG_ASSIGNED_ROLE_DELETE_ERROR) {\n                            api.delete(\"/enterprise/v1/organizations/:org_uid/users/:org_user_uid\".replace(\":org_uid\", org_uid).replace(\":org_user_uid\", orgUser.uid))\n                                .send({})\n                                .set('authtoken', authToken)\n                                .expect(httpStatus.OK)\n                                .end(function(err, res) {\n                                    if (err) {\n                                        done(err);\n                                    } else {\n                                        api.delete(apiURL.replace(\":org_uid\", org_uid).replace(\":org_role_uid\", _data.roles[\"role3\"].uid))\n                                            .send({})\n                                            .set('authtoken', authToken)\n                                            .expect(httpStatus.OK)\n                                            .end(function(err, res) {\n                                                if (err) {\n                                                    done(err);\n                                                } else {\n                                                    res.body.output.message.should.equal(messageList.ORG_ROLE_DELETED_SUCCESS);\n                                                    done();\n                                                }\n                                            });\n                                    }\n                                });\n                        } else {\n                            true.should.equal(false);\n                            done();\n                        }\n                    });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c663122f-1caf-45aa-8751-589b16a6ec28",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not allow to delete organization role to user of other role.",
                    "fullTitle": "Enterprise Organization OrganizationRole.deleteRole Should not allow to delete organization role to user of other role.",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar org_role_uid = _data.roles[\"role1\"].uid;\napi.delete(apiURL.replace(\":org_uid\", org_uid).replace(\":org_role_uid\", org_role_uid))\n    .set('authtoken', _data.developer.authtoken)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_NOT_ADMIN);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9b5516f3-2c8f-40e4-b5b8-6a9ff9f59a8e",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Organization OrganizationRole.deleteRole Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar org_role_uid = _data.roles[\"role1\"].uid;\napi.delete(apiURL.replace(\":org_uid\", org_uid).replace(\":org_role_uid\", org_role_uid))\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "05f17fcd-dfa7-4a7a-9aa3-f41fff348c05",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "2f6c7a8d-d22b-4762-a4fc-fcb59d9d528e",
                  "e2fe9ad9-ec87-49af-8d4b-c5d1cde18332",
                  "173fea8b-f46c-45de-8f9b-2cd64e3381d9",
                  "27583076-d45d-41f3-bce1-3f7db2a313e6",
                  "0bb969ab-8371-4cc7-8265-9e1657d89262",
                  "6ffca429-e864-4403-8c80-aa5aa16ad005",
                  "36b11347-7442-4fb8-9c5c-a767a3a20d02",
                  "c663122f-1caf-45aa-8751-589b16a6ec28",
                  "9b5516f3-2c8f-40e4-b5b8-6a9ff9f59a8e",
                  "05f17fcd-dfa7-4a7a-9aa3-f41fff348c05"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 208,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "4b922890-ee9f-4bf7-bb36-e2fcbe8d0189",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\organizationRole\\list.enterprise.js",
        "file": "\\controllers\\test\\organizationRole\\list.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "8938bcc8-7526-499f-a93d-75977cd609c3",
            "title": "Organization",
            "fullFile": "C:\\work\\api\\controllers\\test\\organizationRole\\list.enterprise.js",
            "file": "\\controllers\\test\\organizationRole\\list.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "3f77f9ea-5495-4890-bd98-347e63287c7a",
                "title": "OrganizationRole.list",
                "fullFile": "C:\\work\\api\\controllers\\test\\organizationRole\\list.enterprise.js",
                "file": "\\controllers\\test\\organizationRole\\list.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Organization OrganizationRole.list \"before each\" hook",
                    "timedOut": false,
                    "duration": 55,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        _data = data;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a799c399-6c52-40de-acd8-8c37e1a5c595",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Organization OrganizationRole.list \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "725914ae-769a-4173-9712-8646a57b12b6",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should list organization roles.",
                    "fullTitle": "Enterprise Organization OrganizationRole.list Should list organization roles.",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL.replace(\":org_uid\", org_uid))\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (Array.isArray(res.body.output.objects)) {\n                isValid = res.body.output.count != 0 &&\n                    res.body.output.objects.length > 0;\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\";\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c0e3c7b9-39d4-409c-acea-35aa0f51471b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give organization not found error.",
                    "fullTitle": "Enterprise Organization OrganizationRole.list Should give organization not found error.",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL.replace(\":org_uid\", \"FAKE_ORG\"))\n    .set('authtoken', authToken)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_NOT_FOUND);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c69a2bbc-7efa-4b50-92a3-d126c7543abe",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should sort organization roles.",
                    "fullTitle": "Enterprise Organization OrganizationRole.list Should sort organization roles.",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar orgGetUrl = apiURL.replace(\":org_uid\", org_uid) +\n    \"?skip=2&limit=2&field=name&direction=desc\";\napi.get(orgGetUrl)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (Array.isArray(res.body.output.objects)) {\n                isValid = res.body.output.count != 0 &&\n                    res.body.output.objects.length == 2;\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\";\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "69368c5e-c349-45b6-9c83-565b764ad40d",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should list of two organization roles.",
                    "fullTitle": "Enterprise Organization OrganizationRole.list Should list of two organization roles.",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var orgGetUrl = apiURL.replace(\":org_uid\", org_uid) +\n    \"?skip=2&limit=2\";\napi.get(orgGetUrl)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (Array.isArray(res.body.output.objects)) {\n                isValid = res.body.output.count != 0 &&\n                    res.body.output.objects.length == 2;\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\";\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e236853b-0222-4119-983d-772c3a9c983f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should list of filter roles.",
                    "fullTitle": "Enterprise Organization OrganizationRole.list Should list of filter roles.",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar orgGetUrl = apiURL.replace(\":org_uid\", org_uid) +\n    \"?query=role1\";\napi.get(orgGetUrl)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (Array.isArray(res.body.output.objects)) {\n                isValid = res.body.output.count != 0 &&\n                    res.body.output.objects.length == 1;\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\";\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3d1a0989-ea92-47b7-a6fc-11027259ddec",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give admin role required error.",
                    "fullTitle": "Enterprise Organization OrganizationRole.list Should give admin role required error.",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n                api.get(apiURL.replace(\":org_uid\", org_uid))\n                    .set('authtoken', _data.role1.authtoken)\n                    .expect(httpStatus.UNAUTHORIZED)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            res.body.error.message.should.equal(messageList.ORG_NOT_ADMIN);\n                            done();\n                        }\n                    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "feea0d54-26f5-4a21-90d3-4917e88a3812",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Organization OrganizationRole.list Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL.replace(\":org_uid\", org_uid))\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d2c78e2e-a45d-4081-a8b1-8c8f699e38ac",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "c0e3c7b9-39d4-409c-acea-35aa0f51471b",
                  "c69a2bbc-7efa-4b50-92a3-d126c7543abe",
                  "69368c5e-c349-45b6-9c83-565b764ad40d",
                  "e236853b-0222-4119-983d-772c3a9c983f",
                  "3d1a0989-ea92-47b7-a6fc-11027259ddec",
                  "feea0d54-26f5-4a21-90d3-4917e88a3812",
                  "d2c78e2e-a45d-4081-a8b1-8c8f699e38ac"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 77,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "36ffc84e-5664-4148-a1bf-95f3bfc0fb7c",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\organizationRole\\update.enterprise.js",
        "file": "\\controllers\\test\\organizationRole\\update.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "e93dbc41-9fec-4d32-b9ac-b9ec480c837f",
            "title": "Organization",
            "fullFile": "C:\\work\\api\\controllers\\test\\organizationRole\\update.enterprise.js",
            "file": "\\controllers\\test\\organizationRole\\update.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "4345730f-7989-4e49-ba6d-9a179900013f",
                "title": "OrganizationRole.update",
                "fullFile": "C:\\work\\api\\controllers\\test\\organizationRole\\update.enterprise.js",
                "file": "\\controllers\\test\\organizationRole\\update.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Organization OrganizationRole.update \"before each\" hook",
                    "timedOut": false,
                    "duration": 59,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        _data = data;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "19dcbaa4-f1da-4d6c-b3f9-715885dcaa17",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Organization OrganizationRole.update \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f166565a-e56a-4b28-a5ac-2302436db5a9",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should update organization role.",
                    "fullTitle": "Enterprise Organization OrganizationRole.update Should update organization role.",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar role = getImmutable(roleBody);\nrole.name = \"org2\";\nrole.projects = [_data.org_projects[0].uid];\nvar org_role_uid = _data.roles[\"role2\"].uid;\napi.put(apiURL.replace(\":org_uid\", org_uid).replace(\":org_role_uid\", org_role_uid))\n    .send(role)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            (res.body.output.uid != \"\" &&\n                res.body.output.name == role.name &&\n                res.body.output.projects.length == 1 &&\n                res.body.output.projects[0] == _data.org_projects[0].uid).should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8a95ed05-e302-492d-9567-6baef5b086eb",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give role not found error.",
                    "fullTitle": "Enterprise Organization OrganizationRole.update Should give role not found error.",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar role = getImmutable(roleBody);\nrole.name = \"org2\";\nrole.projects = [_data.org_projects[0].uid];\nvar org_role_uid = _data.roles[\"role2\"].uid;\napi.put(apiURL.replace(\":org_uid\", org_uid).replace(\":org_role_uid\", \"FAKE_ROLE\"))\n    .send(role)\n    .set('authtoken', authToken)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_ROLE_NOT_FOUND);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e47a41d9-5bcd-40e1-9731-8bcbe6c2cae8",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not update Admin role.",
                    "fullTitle": "Enterprise Organization OrganizationRole.update Should not update Admin role.",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar role = getImmutable(roleBody);\nrole.name = \"org2\";\nrole.projects = [_data.org_projects[0].uid];\nvar org_role_uid = _data.roles[\"Admin\"].uid;\napi.put(apiURL.replace(\":org_uid\", org_uid).replace(\":org_role_uid\", org_role_uid))\n    .send(role)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_DEFAULT_ROLE_CANNOT_MODIFY);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b46cbc91-40da-4e5a-9232-b0e0a4f4c304",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not update Billing Manager role.",
                    "fullTitle": "Enterprise Organization OrganizationRole.update Should not update Billing Manager role.",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar role = getImmutable(roleBody);\nrole.name = \"org2\";\nrole.projects = [_data.org_projects[0].uid];\nvar org_role_uid = _data.roles[\"Billing Manager\"].uid;\napi.put(apiURL.replace(\":org_uid\", org_uid).replace(\":org_role_uid\", org_role_uid))\n    .send(role)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_DEFAULT_ROLE_CANNOT_MODIFY);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c76373c7-8841-42c5-a112-0f1b027713cb",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not update Developer role.",
                    "fullTitle": "Enterprise Organization OrganizationRole.update Should not update Developer role.",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar role = getImmutable(roleBody);\nrole.name = \"org2\";\nrole.projects = [_data.org_projects[0].uid];\nvar org_role_uid = _data.roles[\"Developer\"].uid;\napi.put(apiURL.replace(\":org_uid\", org_uid).replace(\":org_role_uid\", org_role_uid))\n    .send(role)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_DEFAULT_ROLE_CANNOT_MODIFY);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e2b828bc-e4b3-49a7-86ab-1faad8bd1595",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give organization not found error.",
                    "fullTitle": "Enterprise Organization OrganizationRole.update Should give organization not found error.",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar role = getImmutable(roleBody);\nrole.name = \"org2\";\nrole.projects = [_data.org_projects[0].uid];\nvar org_role_uid = _data.roles[\"role2\"].uid;\napi.put(apiURL.replace(\":org_uid\", \"FAKE_ORG\").replace(\":org_role_uid\", org_role_uid))\n    .send(role)\n    .set('authtoken', authToken)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_NOT_FOUND);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e460cbb6-16ff-44d9-8533-a6658f982b68",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should validate organization role body.",
                    "fullTitle": "Enterprise Organization OrganizationRole.update Should validate organization role body.",
                    "timedOut": false,
                    "duration": 97,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar org_role_uid = _data.roles[\"role2\"].uid;\napi.put(apiURL.replace(\":org_uid\", org_uid).replace(\":org_role_uid\", org_role_uid))\n    .send({})\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            (res.body.error.name.message == messageList.ORG_ROLE_NAME_REQUIRED &&\n                res.body.error.projects.message == messageList.ORG_PROJECT_SET_REQUIRED).should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8b9de2f1-cfd2-4164-9085-81d73d69e025",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should update organization projects.",
                    "fullTitle": "Enterprise Organization OrganizationRole.update Should update organization projects.",
                    "timedOut": false,
                    "duration": 17,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar role = getImmutable(roleBody);\nrole.name = \"role2\";\nrole.projects = [_data.org_projects[0].uid];\nvar org_role_uid = _data.roles[\"role2\"].uid;\napi.put(apiURL.replace(\":org_uid\", org_uid).replace(\":org_role_uid\", org_role_uid))\n    .send(role)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            (res.body.output.uid != \"\" &&\n                res.body.output.name == role.name &&\n                res.body.output.projects.length == 1 &&\n                res.body.output.projects[0] == _data.org_projects[0].uid).should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0937b6a6-d6ad-4de3-98d2-554262ed08ef",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not allow to update organization role to user of other role.",
                    "fullTitle": "Enterprise Organization OrganizationRole.update Should not allow to update organization role to user of other role.",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar role = getImmutable(roleBody);\nvar org_role_uid = _data.roles[\"role1\"].uid;\napi.put(apiURL.replace(\":org_uid\", org_uid).replace(\":org_role_uid\", org_role_uid))\n    .send(role)\n    .set('authtoken', _data.role1.authtoken)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_NOT_ADMIN);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "149550aa-b4c4-43f1-90f8-428378ebc5cd",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Organization OrganizationRole.update Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar role = getImmutable(roleBody);\nvar org_role_uid = _data.roles[\"role1\"].uid;\napi.put(apiURL.replace(\":org_uid\", org_uid).replace(\":org_role_uid\", org_role_uid))\n    .send(role)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "854529fc-825a-498f-96f0-a775b60acffc",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "8a95ed05-e302-492d-9567-6baef5b086eb",
                  "e47a41d9-5bcd-40e1-9731-8bcbe6c2cae8",
                  "b46cbc91-40da-4e5a-9232-b0e0a4f4c304",
                  "c76373c7-8841-42c5-a112-0f1b027713cb",
                  "e2b828bc-e4b3-49a7-86ab-1faad8bd1595",
                  "e460cbb6-16ff-44d9-8533-a6658f982b68",
                  "8b9de2f1-cfd2-4164-9085-81d73d69e025",
                  "0937b6a6-d6ad-4de3-98d2-554262ed08ef",
                  "149550aa-b4c4-43f1-90f8-428378ebc5cd",
                  "854529fc-825a-498f-96f0-a775b60acffc"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 201,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "b4639d9a-be46-4d89-afac-3f7e17062347",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\organizationUser\\assignedRoles.enterprise.js",
        "file": "\\controllers\\test\\organizationUser\\assignedRoles.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "52771e85-cc50-4b68-969a-5020792ced19",
            "title": "Organization",
            "fullFile": "C:\\work\\api\\controllers\\test\\organizationUser\\assignedRoles.enterprise.js",
            "file": "\\controllers\\test\\organizationUser\\assignedRoles.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "8f82b75b-367c-4122-a89c-b4316ebd4053",
                "title": "OrganizationUser.assignedRoles",
                "fullFile": "C:\\work\\api\\controllers\\test\\organizationUser\\assignedRoles.enterprise.js",
                "file": "\\controllers\\test\\organizationUser\\assignedRoles.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Organization OrganizationUser.assignedRoles \"before each\" hook",
                    "timedOut": false,
                    "duration": 62,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        _data = data;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0b616fd6-e460-4095-9481-a87caf747350",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Organization OrganizationUser.assignedRoles \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6e51aa1e-31c8-4c64-aeb7-24f00b83da9f",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should assigned default project while assigning billing manger role.",
                    "fullTitle": "Enterprise Organization OrganizationUser.assignedRoles Should assigned default project while assigning billing manger role.",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.OrganizationUser.findOne({\n    user_uid: _data.developer.uid\n}).lean().exec(function(error, orgUser) {\n    api.put(apiURL.replace(\":org_uid\", org_uid).replace(\":org_user_uid\", orgUser.uid))\n        .send({\n            org_roles: [_data.roles[\"Billing Manager\"].uid]\n        })\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                (res.body.output.roles[0].name == \"Billing Manager\").should.equal(true);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4c7d3151-2499-4eb8-8672-9b1dcc4fbf24",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should assigned new role to organization user.",
                    "fullTitle": "Enterprise Organization OrganizationUser.assignedRoles Should assigned new role to organization user.",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.OrganizationUser.findOne({\n    user_uid: _data.developer.uid\n}).lean().exec(function(error, orgUser) {\n    api.put(apiURL.replace(\":org_uid\", org_uid).replace(\":org_user_uid\", orgUser.uid))\n        .send({\n            org_roles: [_data.roles[\"role1\"].uid]\n        })\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                res.body.output.roles[0].name.should.equal(\"role1\");\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4131de29-3d5e-4167-a5be-f7b479dac287",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should update allowed project list of user, if assigned roles changed.",
                    "fullTitle": "Enterprise Organization OrganizationUser.assignedRoles Should update allowed project list of user, if assigned roles changed.",
                    "timedOut": false,
                    "duration": 32,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.OrganizationUser.findOne({\n    user_uid: _data.developer.uid\n}).lean().exec(function(error, orgUser) {\n    api.put(apiURL.replace(\":org_uid\", org_uid).replace(\":org_user_uid\", orgUser.uid))\n        .send({\n            org_roles: [_data.roles[\"role3\"].uid]\n        })\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                api.get(\"/enterprise/v1/projects\")\n                    .set('authtoken', _data.developer.authtoken)\n                    .set('org_uid', org_uid)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        (res.body.output.projects || res.body.output.objects).length.should.equal(2);\n                        done();\n                    });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "498c4d8d-cc89-4272-9ec3-c5e2c8cf60c4",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Organization OrganizationUser.assignedRoles Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.OrganizationUser.findOne({\n    user_uid: _data.developer.uid\n}).lean().exec(function(error, orgUser) {\n    api.put(apiURL.replace(\":org_uid\", org_uid).replace(\":org_user_uid\", orgUser.uid))\n        .send({\n            org_roles: [_data.roles[\"role3\"].uid]\n        })\n        .expect(httpStatus.UNAUTHORIZED)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "20ac3910-78fb-4b6a-84fd-06442731a416",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "4c7d3151-2499-4eb8-8672-9b1dcc4fbf24",
                  "4131de29-3d5e-4167-a5be-f7b479dac287",
                  "498c4d8d-cc89-4272-9ec3-c5e2c8cf60c4",
                  "20ac3910-78fb-4b6a-84fd-06442731a416"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 64,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "c5806c1d-049f-4ca7-9461-f43bc6a18091",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\organizationUser\\currentUser.enterprise.js",
        "file": "\\controllers\\test\\organizationUser\\currentUser.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "39ec5a46-8f5c-4ede-8298-139d1ed0814b",
            "title": "Organization",
            "fullFile": "C:\\work\\api\\controllers\\test\\organizationUser\\currentUser.enterprise.js",
            "file": "\\controllers\\test\\organizationUser\\currentUser.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "9d3e8b0d-ce26-431c-81ad-2b97cc2a7ef0",
                "title": "OrganizationUser.currentUser",
                "fullFile": "C:\\work\\api\\controllers\\test\\organizationUser\\currentUser.enterprise.js",
                "file": "\\controllers\\test\\organizationUser\\currentUser.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Organization OrganizationUser.currentUser \"before each\" hook",
                    "timedOut": false,
                    "duration": 57,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        _data = data;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f65afecf-e6e7-4822-be0f-09d20c3d9eb2",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Organization OrganizationUser.currentUser \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3759821a-1423-46d6-b4ed-00f710364bad",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get owner information in currentuser call.",
                    "fullTitle": "Enterprise Organization OrganizationUser.currentUser Should get owner information in currentuser call.",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar config = getImmutable(ssoConfig);\napi.get(\"/enterprise/v1/user\")\n    .set('authtoken', _data.owner.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.uid != \"\" &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\";\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7ab2b399-64ea-447b-b634-c2d6ddd8f9aa",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get access for owner if SSO is enabled.",
                    "fullTitle": "Enterprise Organization OrganizationUser.currentUser Should get access for owner if SSO is enabled.",
                    "timedOut": false,
                    "duration": 85,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar config = getImmutable(ssoConfig);\napi.put(\"/enterprise/v1/organizations/:org_uid/ssoconfig\".replace(\":org_uid\", _data.organization.uid))\n    .send(config)\n    .set('authtoken', _data.owner.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        var publicKeyFile = __dirname + \"/../../../__cert/okta.cert\";\n        var privateKeyFile = __dirname + \"/../../../__cert/SP1.pem\";\n        api.post(\"/enterprise/v1/organizations/:org_uid/sso/certs\".replace(\":org_uid\", _data.organization.uid))\n            .set('authtoken', _data.admin.authtoken)\n            .attach('signed_public_key', publicKeyFile)\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                api.post(\"/enterprise/v1/organizations/:org_uid/sso/enable\".replace(\":org_uid\", _data.organization.uid))\n                    .set('authtoken', _data.owner.authtoken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        api.get(\"/enterprise/v1/user\")\n                            .set('org_uid', _data.organization.uid)\n                            .set('authtoken', _data.owner.authtoken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    var isValid = res.body.output.uid != \"\" &&\n                                        typeof(res.body.output._id) == \"undefined\" &&\n                                        typeof(res.body.output.__v) == \"undefined\";\n                                    isValid.should.equal(true);\n                                    done();\n                                }\n                            });\n                    });\n            });\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "928d901a-75b2-4d4e-83b1-a96dbe80903f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not get access for admin if SSO is enabled.",
                    "fullTitle": "Enterprise Organization OrganizationUser.currentUser Should not get access for admin if SSO is enabled.",
                    "timedOut": false,
                    "duration": 83,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar config = getImmutable(ssoConfig);\napi.put(\"/enterprise/v1/organizations/:org_uid/ssoconfig\".replace(\":org_uid\", _data.organization.uid))\n    .send(config)\n    .set('authtoken', _data.owner.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        var publicKeyFile = __dirname + \"/../../../__cert/okta.cert\";\n        var privateKeyFile = __dirname + \"/../../../__cert/SP1.pem\";\n        api.post(\"/enterprise/v1/organizations/:org_uid/sso/certs\".replace(\":org_uid\", _data.organization.uid))\n            .set('authtoken', _data.admin.authtoken)\n            .attach('signed_public_key', publicKeyFile)\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                api.post(\"/enterprise/v1/organizations/:org_uid/sso/enable\".replace(\":org_uid\", _data.organization.uid))\n                    .set('authtoken', _data.owner.authtoken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        api.get(\"/enterprise/v1/user\")\n                            .set('org_uid', _data.organization.uid)\n                            .set('authtoken', _data.admin.authtoken)\n                            .expect(httpStatus.UNAUTHORIZED)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    res.body.error.message.should.equal(messageList.ACCESS_DENIED);\n                                    done();\n                                }\n                            });\n                    });\n            });\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "837cdd1f-e7f0-4bb6-a64a-a5e1da01be31",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not get access for developer if SSO is enabled.",
                    "fullTitle": "Enterprise Organization OrganizationUser.currentUser Should not get access for developer if SSO is enabled.",
                    "timedOut": false,
                    "duration": 82,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar config = getImmutable(ssoConfig);\napi.put(\"/enterprise/v1/organizations/:org_uid/ssoconfig\".replace(\":org_uid\", _data.organization.uid))\n    .send(config)\n    .set('authtoken', _data.owner.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        var publicKeyFile = __dirname + \"/../../../__cert/okta.cert\";\n        var privateKeyFile = __dirname + \"/../../../__cert/SP1.pem\";\n        api.post(\"/enterprise/v1/organizations/:org_uid/sso/certs\".replace(\":org_uid\", _data.organization.uid))\n            .set('authtoken', _data.admin.authtoken)\n            .attach('signed_public_key', publicKeyFile)\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                api.post(\"/enterprise/v1/organizations/:org_uid/sso/enable\".replace(\":org_uid\", _data.organization.uid))\n                    .set('authtoken', _data.owner.authtoken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        api.get(\"/enterprise/v1/user\")\n                            .set('org_uid', _data.organization.uid)\n                            .set('authtoken', _data.developer.authtoken)\n                            .expect(httpStatus.UNAUTHORIZED)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    res.body.error.message.should.equal(messageList.ACCESS_DENIED);\n                                    done();\n                                }\n                            });\n                    });\n            });\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "66440b3a-d12d-47e0-a890-0064f43fd757",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not get access for role1 if SSO is enabled.",
                    "fullTitle": "Enterprise Organization OrganizationUser.currentUser Should not get access for role1 if SSO is enabled.",
                    "timedOut": false,
                    "duration": 82,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar config = getImmutable(ssoConfig);\napi.put(\"/enterprise/v1/organizations/:org_uid/ssoconfig\".replace(\":org_uid\", _data.organization.uid))\n    .send(config)\n    .set('authtoken', _data.owner.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        var publicKeyFile = __dirname + \"/../../../__cert/okta.cert\";\n        var privateKeyFile = __dirname + \"/../../../__cert/SP1.pem\";\n        api.post(\"/enterprise/v1/organizations/:org_uid/sso/certs\".replace(\":org_uid\", _data.organization.uid))\n            .set('authtoken', _data.admin.authtoken)\n            .attach('signed_public_key', publicKeyFile)\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                api.post(\"/enterprise/v1/organizations/:org_uid/sso/enable\".replace(\":org_uid\", _data.organization.uid))\n                    .set('authtoken', _data.owner.authtoken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        api.get(\"/enterprise/v1/user\")\n                            .set('org_uid', _data.organization.uid)\n                            .set('authtoken', _data.role1.authtoken)\n                            .expect(httpStatus.UNAUTHORIZED)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    res.body.error.message.should.equal(messageList.ACCESS_DENIED);\n                                    done();\n                                }\n                            });\n                    });\n            });\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ccf8a346-c79e-4303-8db0-4c8e3c85bb13",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get organization owner information in currentuser call.",
                    "fullTitle": "Enterprise Organization OrganizationUser.currentUser Should get organization owner information in currentuser call.",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar config = getImmutable(ssoConfig);\napi.get(\"/enterprise/v1/user\")\n    .set('org_uid', _data.organization.uid)\n    .set('authtoken', _data.owner.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.uid != \"\" &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\";\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "199f1905-a5da-4903-823f-a950a48a075b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get organization owner and sso information in currentuser call.",
                    "fullTitle": "Enterprise Organization OrganizationUser.currentUser Should get organization owner and sso information in currentuser call.",
                    "timedOut": false,
                    "duration": 17,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar config = getImmutable(ssoConfig);\napi.get(\"/enterprise/v1/user\")\n    .set('org_uid', _data.organization.uid)\n    .set('authtoken', _data.owner.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.uid != \"\" &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\";\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bac4cefa-e1ab-45b1-9497-a08282b8d61d",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get organization information in currentuser call.",
                    "fullTitle": "Enterprise Organization OrganizationUser.currentUser Should get organization information in currentuser call.",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(\"/enterprise/v1/user\")\n    .set('authtoken', _data.developer.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.uid != \"\" &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\" &&\n                typeof(res.body.output.organizations) != \"undefined\";\n            if (isValid) {\n                _.each(res.body.output.organizations, function(orgItem) {\n                    isValid = isValid &&\n                        typeof(orgItem._id) == \"undefined\" &&\n                        typeof(orgItem.__v) == \"undefined\" &&\n                        typeof(orgItem.org_uid) != \"undefined\" &&\n                        typeof(orgItem.org_name) != \"undefined\" &&\n                        typeof(orgItem.avatar) != \"undefined\";\n                });\n                isValid.should.equal(true);\n                done();\n            } else {\n                false.should.equal(true);\n                done();\n            }\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6beaa4b5-e97c-4287-b3c8-e2628f7dc8ba",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get organization information in login call.",
                    "fullTitle": "Enterprise Organization OrganizationUser.currentUser Should get organization information in login call.",
                    "timedOut": false,
                    "duration": 80,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(\"/enterprise/v1/login\")\n    .send({\n        \"email\": _data.developer.email,\n        \"password\": \"Raw@1234\"\n    })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.uid != \"\" &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\" &&\n                typeof(res.body.output.organizations) != \"undefined\";\n            if (isValid) {\n                _.each(res.body.output.organizations, function(orgItem) {\n                    isValid = isValid &&\n                        typeof(orgItem._id) == \"undefined\" &&\n                        typeof(orgItem.__v) == \"undefined\" &&\n                        typeof(orgItem.org_uid) != \"undefined\" &&\n                        typeof(orgItem.org_name) != \"undefined\" &&\n                        typeof(orgItem.avatar) != \"undefined\";\n                });\n                isValid.should.equal(true);\n                done();\n            } else {\n                false.should.equal(true);\n                done();\n            }\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "919a3359-defd-4322-9644-01531071086d",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get organization information in gmail login call.",
                    "fullTitle": "Enterprise Organization OrganizationUser.currentUser Should get organization information in gmail login call.",
                    "timedOut": false,
                    "duration": 25,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\ncommonMock.googleLogin(httpmock, \"enterprise\", {\n    \"email\": _data.developer.email\n});\napi.post(\"/enterprise/v1/login/google\")\n    .send({\n        \"access_token\": \"ya29.CjaXA59GmnRCMOCYxSm8kPuqY1H4k10wipfcQF6gFxAyAZXaokdxwQTW0ViQ1fG9m7-JVBkaUsM\"\n    })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.uid != \"\" &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\" &&\n                typeof(res.body.output.organizations) != \"undefined\";\n            if (isValid) {\n                _.each(res.body.output.organizations, function(orgItem) {\n                    isValid = isValid &&\n                        typeof(orgItem._id) == \"undefined\" &&\n                        typeof(orgItem.__v) == \"undefined\" &&\n                        typeof(orgItem.org_uid) != \"undefined\" &&\n                        typeof(orgItem.org_name) != \"undefined\" &&\n                        typeof(orgItem.avatar) != \"undefined\";\n                });\n                isValid.should.equal(true);\n                done();\n            } else {\n                false.should.equal(true);\n                done();\n            }\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ce0f1b1a-ecbd-4f59-9d6e-e46566b0a191",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get organization information in currentuser call of organization for Admin.",
                    "fullTitle": "Enterprise Organization OrganizationUser.currentUser Should get organization information in currentuser call of organization for Admin.",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(\"/enterprise/v1/user\")\n    .set('org_uid', _data.organization.uid)\n    .set('authtoken', _data.admin.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.uid != \"\" &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\" &&\n                typeof(res.body.output.organizations) != \"undefined\";\n            if (isValid) {\n                _.each(res.body.output.organizations, function(orgItem) {\n                    isValid = isValid &&\n                        typeof(orgItem._id) == \"undefined\" &&\n                        typeof(orgItem.__v) == \"undefined\" &&\n                        typeof(orgItem.org_uid) != \"undefined\" &&\n                        typeof(orgItem.org_name) != \"undefined\" &&\n                        typeof(orgItem.avatar) != \"undefined\";\n                });\n                isValid.should.equal(true);\n                done();\n            } else {\n                false.should.equal(true);\n                done();\n            }\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "929a73d0-f4cb-4874-8b19-9e00c58cb2a4",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get organization information in currentuser call of organization for Billing Manager.",
                    "fullTitle": "Enterprise Organization OrganizationUser.currentUser Should get organization information in currentuser call of organization for Billing Manager.",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(\"/enterprise/v1/user\")\n    .set('org_uid', _data.organization.uid)\n    .set('authtoken', _data.billing_manager.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.uid != \"\" &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\" &&\n                typeof(res.body.output.organizations) != \"undefined\";\n            if (isValid) {\n                _.each(res.body.output.organizations, function(orgItem) {\n                    isValid = isValid &&\n                        typeof(orgItem._id) == \"undefined\" &&\n                        typeof(orgItem.__v) == \"undefined\" &&\n                        typeof(orgItem.org_uid) != \"undefined\" &&\n                        typeof(orgItem.org_name) != \"undefined\" &&\n                        typeof(orgItem.avatar) != \"undefined\";\n                });\n                isValid.should.equal(true);\n                done();\n            } else {\n                false.should.equal(true);\n                done();\n            }\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "165b8055-1498-4047-80f1-0175fcdb64e1",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "7ab2b399-64ea-447b-b634-c2d6ddd8f9aa",
                  "928d901a-75b2-4d4e-83b1-a96dbe80903f",
                  "837cdd1f-e7f0-4bb6-a64a-a5e1da01be31",
                  "66440b3a-d12d-47e0-a890-0064f43fd757",
                  "ccf8a346-c79e-4303-8db0-4c8e3c85bb13",
                  "199f1905-a5da-4903-823f-a950a48a075b",
                  "bac4cefa-e1ab-45b1-9497-a08282b8d61d",
                  "6beaa4b5-e97c-4287-b3c8-e2628f7dc8ba",
                  "919a3359-defd-4322-9644-01531071086d",
                  "ce0f1b1a-ecbd-4f59-9d6e-e46566b0a191",
                  "929a73d0-f4cb-4874-8b19-9e00c58cb2a4",
                  "165b8055-1498-4047-80f1-0175fcdb64e1"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 523,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "2b487d58-2b7f-4882-9ffb-48b05cec74bf",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\organizationUser\\delete.enterprise.js",
        "file": "\\controllers\\test\\organizationUser\\delete.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "dc195b7a-1de4-4d37-93ea-f775fdb69468",
            "title": "Organization",
            "fullFile": "C:\\work\\api\\controllers\\test\\organizationUser\\delete.enterprise.js",
            "file": "\\controllers\\test\\organizationUser\\delete.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "29e89146-65ba-446f-b4c9-506223b15aa7",
                "title": "OrganizationUser.deleteOrgUser",
                "fullFile": "C:\\work\\api\\controllers\\test\\organizationUser\\delete.enterprise.js",
                "file": "\\controllers\\test\\organizationUser\\delete.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Organization OrganizationUser.deleteOrgUser \"before each\" hook",
                    "timedOut": false,
                    "duration": 58,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        _data = data;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b08d0270-60ab-4e52-9ef6-e6b3d9a16aa0",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Organization OrganizationUser.deleteOrgUser \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9d991a85-293c-4862-894d-cf3474694e42",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should delete organization user.",
                    "fullTitle": "Enterprise Organization OrganizationUser.deleteOrgUser Should delete organization user.",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.OrganizationUser.findOne({\n    user_uid: _data.role1.uid\n}).lean().exec(function(error, orgUser) {\n    api.delete(apiURL.replace(\":org_uid\", org_uid).replace(\":org_user_uid\", orgUser.uid))\n        .send({})\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                res.body.output.message.should.equal(messageList.ORG_USER_DELETED_SUCCESS);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b9ab3bf4-3618-457c-afcd-46d2250aae57",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should delete organization admin user.",
                    "fullTitle": "Enterprise Organization OrganizationUser.deleteOrgUser Should delete organization admin user.",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.OrganizationUser.findOne({\n    user_uid: _data.admin.uid\n}).lean().exec(function(error, orgUser) {\n    api.delete(apiURL.replace(\":org_uid\", org_uid).replace(\":org_user_uid\", orgUser.uid))\n        .send({})\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                res.body.output.message.should.equal(messageList.ORG_USER_DELETED_SUCCESS);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8a314fec-3871-4261-ac92-d9de3a1ebd28",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give organization not found error.",
                    "fullTitle": "Enterprise Organization OrganizationUser.deleteOrgUser Should give organization not found error.",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.OrganizationUser.findOne({\n    user_uid: _data.role1.uid\n}).lean().exec(function(error, orgUser) {\n    api.delete(apiURL.replace(\":org_uid\", \"FAKE_ORG\").replace(\":org_user_uid\", orgUser.uid))\n        .send({})\n        .set('authtoken', authToken)\n        .expect(httpStatus.NOT_FOUND)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                res.body.error.message.should.equal(messageList.ORG_NOT_FOUND);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5ece6104-5e60-4b29-aaaf-32db3472166f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should delete Admin user.",
                    "fullTitle": "Enterprise Organization OrganizationUser.deleteOrgUser Should delete Admin user.",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.OrganizationUser.findOne({\n    user_uid: _data.admin.uid\n}).lean().exec(function(error, orgUser) {\n    api.delete(apiURL.replace(\":org_uid\", org_uid).replace(\":org_user_uid\", orgUser.uid))\n        .send({})\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                res.body.output.message.should.equal(messageList.ORG_USER_DELETED_SUCCESS);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c916cc82-aa3d-4bb8-ab6e-58f60f2a4bf3",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should delete Billing Manager user.",
                    "fullTitle": "Enterprise Organization OrganizationUser.deleteOrgUser Should delete Billing Manager user.",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.OrganizationUser.findOne({\n    user_uid: _data.billing_manager.uid\n}).lean().exec(function(error, orgUser) {\n    api.delete(apiURL.replace(\":org_uid\", org_uid).replace(\":org_user_uid\", orgUser.uid))\n        .send({})\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                res.body.output.message.should.equal(messageList.ORG_USER_DELETED_SUCCESS);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a66519a4-9e30-4bbc-8c9f-706c3a8b3341",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not delete owner.",
                    "fullTitle": "Enterprise Organization OrganizationUser.deleteOrgUser Should not delete owner.",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.OrganizationUser.findOne({\n    org_uid: org_uid,\n    user_uid: _data.owner.uid\n}, function(err, orgUser) {\n    api.delete(apiURL.replace(\":org_uid\", org_uid).replace(\":org_user_uid\", orgUser.uid))\n        .send({})\n        .set('authtoken', authToken)\n        .expect(httpStatus.BAD_REQUEST)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                res.body.error.message.should.equal(messageList.ORG_OWNER_CANNOT_BE_DELETED);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a2803c17-2f57-4436-81da-815906de88b0",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give user not found error.",
                    "fullTitle": "Enterprise Organization OrganizationUser.deleteOrgUser Should give user not found error.",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.delete(apiURL.replace(\":org_uid\", org_uid).replace(\":org_user_uid\", \"ABC\"))\n    .send({})\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_USER_NOT_FOUND);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9de25642-b0b3-4bc1-9b6f-327cbbbbeccc",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not allowed to delete user to Developer user.",
                    "fullTitle": "Enterprise Organization OrganizationUser.deleteOrgUser Should not allowed to delete user to Developer user.",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.OrganizationUser.findOne({\n    org_uid: org_uid,\n    user_uid: _data.role1.uid\n}, function(err, orgUser) {\n    api.delete(apiURL.replace(\":org_uid\", org_uid).replace(\":org_user_uid\", orgUser.uid))\n        .send({})\n        .set('authtoken', _data.developer.authtoken)\n        .expect(httpStatus.UNAUTHORIZED)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                res.body.error.message.should.equal(messageList.ORG_NOT_ADMIN);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "370c6040-6bf0-461f-94ba-b214debf180e",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not allowed to delete user to Billing Manager user.",
                    "fullTitle": "Enterprise Organization OrganizationUser.deleteOrgUser Should not allowed to delete user to Billing Manager user.",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n\n_models.OrganizationUser.findOne({\n    org_uid: org_uid,\n    user_uid: _data.role1.uid\n}, function(err, orgUser) {\n    api.delete(apiURL.replace(\":org_uid\", org_uid).replace(\":org_user_uid\", orgUser.uid))\n        .send({})\n        .set('authtoken', _data.billing_manager.authtoken)\n        .expect(httpStatus.UNAUTHORIZED)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                res.body.error.message.should.equal(messageList.ORG_NOT_ADMIN);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "96bbfa8f-4bc3-486d-9115-811c3480353f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not delete owner.",
                    "fullTitle": "Enterprise Organization OrganizationUser.deleteOrgUser Should not delete owner.",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.OrganizationUser.findOne({\n    org_uid: org_uid,\n    user_uid: _data.owner.uid\n}, function(err, orgUser) {\n    api.delete(apiURL.replace(\":org_uid\", org_uid).replace(\":org_user_uid\", orgUser.uid))\n        .send({})\n        .set('authtoken', authToken)\n        .expect(httpStatus.BAD_REQUEST)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                res.body.error.message.should.equal(messageList.ORG_OWNER_CANNOT_BE_DELETED);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b8e3c395-a72d-439c-a4ff-15d30b38df2b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Organization OrganizationUser.deleteOrgUser Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.OrganizationUser.findOne({\n    org_uid: org_uid,\n    user_uid: _data.owner.uid\n}, function(err, orgUser) {\n    api.delete(apiURL.replace(\":org_uid\", org_uid).replace(\":org_user_uid\", orgUser.uid))\n        .send({})\n        .expect(httpStatus.UNAUTHORIZED)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "703e6744-b91a-4376-85ae-9594b1bc41e0",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "b9ab3bf4-3618-457c-afcd-46d2250aae57",
                  "8a314fec-3871-4261-ac92-d9de3a1ebd28",
                  "5ece6104-5e60-4b29-aaaf-32db3472166f",
                  "c916cc82-aa3d-4bb8-ab6e-58f60f2a4bf3",
                  "a66519a4-9e30-4bbc-8c9f-706c3a8b3341",
                  "a2803c17-2f57-4436-81da-815906de88b0",
                  "9de25642-b0b3-4bc1-9b6f-327cbbbbeccc",
                  "370c6040-6bf0-461f-94ba-b214debf180e",
                  "96bbfa8f-4bc3-486d-9115-811c3480353f",
                  "b8e3c395-a72d-439c-a4ff-15d30b38df2b",
                  "703e6744-b91a-4376-85ae-9594b1bc41e0"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 119,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "816d0b48-ce9b-4db3-80a3-5731ba605613",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\organizationUser\\list.enterprise.js",
        "file": "\\controllers\\test\\organizationUser\\list.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "db00c4f6-230a-42e3-88e4-89d10e77367b",
            "title": "Organization",
            "fullFile": "C:\\work\\api\\controllers\\test\\organizationUser\\list.enterprise.js",
            "file": "\\controllers\\test\\organizationUser\\list.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "221c7024-32cd-4e61-8dec-562bdb57476a",
                "title": "OrganizationUser.list",
                "fullFile": "C:\\work\\api\\controllers\\test\\organizationUser\\list.enterprise.js",
                "file": "\\controllers\\test\\organizationUser\\list.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Organization OrganizationUser.list \"before each\" hook",
                    "timedOut": false,
                    "duration": 59,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        _data = data;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "dd7268be-a2b6-47bc-a303-2b66552f48c7",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Organization OrganizationUser.list \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6e05a3a3-446d-47ae-a50a-0059d8cf92ae",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should list organization users.",
                    "fullTitle": "Enterprise Organization OrganizationUser.list Should list organization users.",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL.replace(\":org_uid\", org_uid))\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (Array.isArray(res.body.output.objects)) {\n                isValid = res.body.output.count > 0;\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\";\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1f1ff3ae-4efe-45ab-9234-02c41463b204",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give organization not found error.",
                    "fullTitle": "Enterprise Organization OrganizationUser.list Should give organization not found error.",
                    "timedOut": false,
                    "duration": 140,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar email = \"test.user+1@raweng.com\";\nfetchRoles({\n    done: done,\n    org_uid: org_uid\n}, function(res) {\n    inviteUsers({\n        roles: res.body.output.objects,\n        user_uid: user_uid,\n        org_uid: org_uid\n    }, function() {\n        api.get(apiURL.replace(\":org_uid\", \"FAKE_ORG\"))\n            .set('authtoken', authToken)\n            .expect(httpStatus.NOT_FOUND)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    res.body.error.message.should.equal(messageList.ORG_NOT_FOUND);\n                    done();\n                }\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "de663fd7-ef55-499f-bf10-1698d22e7174",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should sort organization users.",
                    "fullTitle": "Enterprise Organization OrganizationUser.list Should sort organization users.",
                    "timedOut": false,
                    "duration": 146,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar email = \"test.user+1@raweng.com\";\nfetchRoles({\n    done: done,\n    org_uid: org_uid\n}, function(res) {\n    inviteUsers({\n        roles: res.body.output.objects,\n        user_uid: user_uid,\n        org_uid: org_uid\n    }, function() {\n        var orgGetUrl = apiURL.replace(\":org_uid\", org_uid) +\n            \"?skip=2&limit=2&field=email&direction=desc\";\n        api.get(orgGetUrl)\n            .set('authtoken', authToken)\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    var isValid = false;\n                    if (Array.isArray(res.body.output.objects)) {\n                        isValid = res.body.output.count != 0 &&\n                            res.body.output.objects.length == 2;\n                        _.each(res.body.output.objects, function(item) {\n                            isValid = isValid &&\n                                typeof(item._id) == \"undefined\" &&\n                                typeof(item.__v) == \"undefined\";\n                        });\n                    }\n                    isValid.should.equal(true);\n                    done();\n                }\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "713665b8-e17a-46ef-b620-2ec8d929674f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should list two items of organization users.",
                    "fullTitle": "Enterprise Organization OrganizationUser.list Should list two items of organization users.",
                    "timedOut": false,
                    "duration": 141,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar email = \"test.user+1@raweng.com\";\nfetchRoles({\n    done: done,\n    org_uid: org_uid\n}, function(res) {\n    inviteUsers({\n        roles: res.body.output.objects,\n        user_uid: user_uid,\n        org_uid: org_uid\n    }, function() {\n        var orgGetUrl = apiURL.replace(\":org_uid\", org_uid) +\n            \"?skip=2&limit=2\";\n        api.get(orgGetUrl)\n            .set('authtoken', authToken)\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    var isValid = false;\n                    if (Array.isArray(res.body.output.objects)) {\n                        isValid = res.body.output.count != 0 &&\n                            res.body.output.objects.length == 2;\n                        _.each(res.body.output.objects, function(item) {\n                            isValid = isValid &&\n                                typeof(item._id) == \"undefined\" &&\n                                typeof(item.__v) == \"undefined\";\n                        });\n                    }\n                    isValid.should.equal(true);\n                    done();\n                }\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0fa295bf-21de-4153-9dcc-ec10a317384d",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should list of filter users.",
                    "fullTitle": "Enterprise Organization OrganizationUser.list Should list of filter users.",
                    "timedOut": false,
                    "duration": 139,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar email = \"test.user+1@raweng.com\";\nfetchRoles({\n    done: done,\n    org_uid: org_uid\n}, function(res) {\n    inviteUsers({\n        roles: res.body.output.objects,\n        user_uid: user_uid,\n        org_uid: org_uid\n    }, function() {\n        var orgGetUrl = apiURL.replace(\":org_uid\", org_uid) +\n            \"?query=test.user+1\";\n        api.get(orgGetUrl)\n            .set('authtoken', authToken)\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    var isValid = false;\n                    if (Array.isArray(res.body.output.objects)) {\n                        isValid = res.body.output.count != 0 &&\n                            res.body.output.objects.length > 0;\n                        _.each(res.body.output.objects, function(item) {\n                            isValid = isValid &&\n                                typeof(item._id) == \"undefined\" &&\n                                typeof(item.__v) == \"undefined\";\n                        });\n                    }\n                    isValid.should.equal(true);\n                    done();\n                }\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a546b5da-b104-4f2f-8dad-ea38ff750403",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get invitation object null after accepting invitation.",
                    "fullTitle": "Enterprise Organization OrganizationUser.list Should get invitation object null after accepting invitation.",
                    "timedOut": false,
                    "duration": 132,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar email = \"test.user+1@raweng.com\";\napi.post(\"/enterprise/v1/organizations/:org_uid/invite\".replace(\":org_uid\", org_uid))\n    .send({\n        \"org_roles\": [_data.roles[\"Developer\"].uid],\n        \"emails\": [email]\n    })\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            if (res.body.output.message == messageList.ORG_INVITATION_SEND) {\n                signUpUser({\n                    done: done,\n                    email: email\n                }, function(res) {\n                    api.post(\"/enterprise/v1/organizations/:org_uid/invitation/accept\".replace(\":org_uid\", org_uid))\n                        .send({})\n                        .set('authtoken', res.body.output.authtoken)\n                        .expect(httpStatus.OK)\n                        .end(function(err, res) {\n                            api.get(apiURL.replace(\":org_uid\", org_uid))\n                                .set('authtoken', authToken)\n                                .expect(httpStatus.OK)\n                                .end(function(err, res) {\n                                    if (err) {\n                                        done(err);\n                                    } else {\n                                        var isValid = false;\n                                        if (Array.isArray(res.body.output.objects)) {\n                                            isValid = res.body.output.count > 0;\n                                            _.each(res.body.output.objects, function(item) {\n                                                isValid = isValid &&\n                                                    typeof(item._id) == \"undefined\" &&\n                                                    typeof(item.__v) == \"undefined\" &&\n                                                    item.invitation == null;\n                                            });\n                                        }\n                                        isValid.should.equal(true);\n                                        done();\n                                    }\n                                });\n                        });\n                });\n            } else {\n                true.should.equal(false);\n                done();\n            }\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "abd2f8a9-cfad-45b5-83d3-1d989fdb9cfd",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should list re-invited organization user.",
                    "fullTitle": "Enterprise Organization OrganizationUser.list Should list re-invited organization user.",
                    "timedOut": false,
                    "duration": 171,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar user_uid = \"\";\nvar email = _data.developer.email;\nvar inviteUser = function(callback) {\n    api.post(\"/enterprise/v1/organizations/:org_uid/invite\".replace(\":org_uid\", org_uid))\n        .send({\n            \"org_roles\": [_data.roles.Developer.uid],\n            \"emails\": [email]\n        })\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                if (res.body.output.message == messageList.ORG_INVITATION_SEND) {\n                    var tempLoginBody = getImmutable(loginBody);\n                    tempLoginBody.email = email;\n                    commonMock.flowLogin(httpmock, \"enterprise\");\n                    api.post(\"/enterprise/v1/login\")\n                        .send(tempLoginBody)\n                        .expect(httpStatus.OK)\n                        .end(function(err, res) {\n                            if (err) {\n                                done(err);\n                            } else {\n                                var userAuthToken = res.body.output.authtoken;\n                                api.post(\"/enterprise/v1/organizations/:org_uid/invitation/accept\".replace(\":org_uid\", org_uid))\n                                    .send({})\n                                    .set('authtoken', userAuthToken)\n                                    .expect(httpStatus.OK)\n                                    .end(function(err, res) {\n                                        commonMock.brainTreeClientToken(httpmock, \"enterprise\");\n                                        api.get(\"/enterprise/v1/user\")\n                                            .set('authtoken', userAuthToken)\n                                            .set('org_uid', org_uid)\n                                            .expect(httpStatus.OK)\n                                            .end(function(err, res) {\n                                                if (err) {\n                                                    done(err);\n                                                } else {\n                                                    user_uid = res.body.output.uid;\n                                                    _models.OrganizationUser.findOne({\n                                                        user_uid: user_uid,\n                                                        org_uid: org_uid,\n                                                        deleted_at: null\n                                                    }).lean().exec(function(err, orgUser) {\n                                                        callback(err, orgUser);\n                                                    });\n                                                }\n                                            });\n                                    });\n                            }\n                        });\n                } else {\n                    true.should.equal(false);\n                    done();\n                }\n            }\n        });\n};\n\n_models.OrganizationUser.findOne({\n    org_uid: org_uid,\n    user_uid: _data.developer.uid\n}).lean().exec(function(error, orgUser) {\n    api.get(apiURL.replace(\":org_uid\", org_uid))\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                api.delete(\"/enterprise/v1/organizations/:org_uid/users/:org_user_uid\"\n                        .replace(\":org_uid\", org_uid)\n                        .replace(\":org_user_uid\", orgUser.uid))\n                    .send({})\n                    .set('authtoken', authToken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            if (res.body.output.message == messageList.ORG_USER_DELETED_SUCCESS) {\n                                inviteUser(function(error, orgUser) {\n                                    if (err) {\n                                        done(err);\n                                    } else {\n                                        api.get(apiURL.replace(\":org_uid\", org_uid))\n                                            .set('authtoken', authToken)\n                                            .expect(httpStatus.OK)\n                                            .end(function(err, res) {\n                                                if (err) {\n                                                    done(err);\n                                                } else {\n                                                    var isValid = false;\n                                                    if (Array.isArray(res.body.output.objects)) {\n                                                        isValid = res.body.output.count > 0;\n                                                        _.each(res.body.output.objects, function(item) {\n                                                            isValid = isValid &&\n                                                                typeof(item._id) == \"undefined\" &&\n                                                                typeof(item.__v) == \"undefined\";\n                                                        });\n                                                    }\n                                                    isValid.should.equal(true);\n                                                    done();\n                                                }\n                                            });\n                                    }\n                                });\n                            } else {\n                                true.should.equal(false);\n                                done();\n                            }\n                        }\n                    });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4146d5e4-566c-4775-b732-5477b53d6a1a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should list re-invited organization user before accepting second invitation.",
                    "fullTitle": "Enterprise Organization OrganizationUser.list Should list re-invited organization user before accepting second invitation.",
                    "timedOut": false,
                    "duration": 45,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar user_uid = \"\";\nvar email = _data.developer.email;\nvar inviteUser = function(callback) {\n    api.post(\"/enterprise/v1/organizations/:org_uid/invite\".replace(\":org_uid\", org_uid))\n        .send({\n            \"org_roles\": [_data.roles.Developer.uid],\n            \"emails\": [email]\n        })\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                if (res.body.output.message == messageList.ORG_INVITATION_SEND) {\n                    callback(err, res);\n                } else {\n                    true.should.equal(false);\n                    done();\n                }\n            }\n        });\n};\n\n_models.OrganizationUser.findOne({\n    user_uid: _data.developer.uid\n}).lean().exec(function(error, orgUser) {\n    api.delete(\"/enterprise/v1/organizations/:org_uid/users/:org_user_uid\"\n            .replace(\":org_uid\", org_uid)\n            .replace(\":org_user_uid\", orgUser.uid))\n        .send({})\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                if (res.body.output.message == messageList.ORG_USER_DELETED_SUCCESS) {\n                    inviteUser(function(error, orgUser) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            api.get(apiURL.replace(\":org_uid\", org_uid))\n                                .set('authtoken', authToken)\n                                .expect(httpStatus.OK)\n                                .end(function(err, res) {\n                                    if (err) {\n                                        done(err);\n                                    } else {\n                                        var isValid = false;\n                                        if (Array.isArray(res.body.output.objects)) {\n                                            isValid = res.body.output.count > 0;\n                                            _.each(res.body.output.objects, function(item) {\n                                                isValid = isValid &&\n                                                    typeof(item._id) == \"undefined\" &&\n                                                    typeof(item.__v) == \"undefined\";\n                                            });\n                                        }\n                                        isValid.should.equal(true);\n                                        done();\n                                    }\n                                });\n                        }\n                    });\n                } else {\n                    true.should.equal(false);\n                    done();\n                }\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e17ed1be-59ad-4903-a930-635942e32dc6",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Organization OrganizationUser.list Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 130,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar email = \"test.user+1@raweng.com\";\nfetchRoles({\n    done: done,\n    org_uid: org_uid\n}, function(res) {\n    inviteUsers({\n        roles: res.body.output.objects,\n        user_uid: user_uid,\n        org_uid: org_uid\n    }, function() {\n        api.get(apiURL.replace(\":org_uid\", org_uid))\n            .expect(httpStatus.UNAUTHORIZED)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n                    done();\n                }\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9e18f449-983d-4e17-91a3-1b1a3346a8e5",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "1f1ff3ae-4efe-45ab-9234-02c41463b204",
                  "de663fd7-ef55-499f-bf10-1698d22e7174",
                  "713665b8-e17a-46ef-b620-2ec8d929674f",
                  "0fa295bf-21de-4153-9dcc-ec10a317384d",
                  "a546b5da-b104-4f2f-8dad-ea38ff750403",
                  "abd2f8a9-cfad-45b5-83d3-1d989fdb9cfd",
                  "4146d5e4-566c-4775-b732-5477b53d6a1a",
                  "e17ed1be-59ad-4903-a930-635942e32dc6",
                  "9e18f449-983d-4e17-91a3-1b1a3346a8e5"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 1060,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "9cb1219c-65a4-4353-bb0c-fb1ea860695f",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\organizationUser\\removeSelf.enterprise.js",
        "file": "\\controllers\\test\\organizationUser\\removeSelf.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "b5f7a174-d65b-4f86-8759-1196d0c4a42e",
            "title": "Organization",
            "fullFile": "C:\\work\\api\\controllers\\test\\organizationUser\\removeSelf.enterprise.js",
            "file": "\\controllers\\test\\organizationUser\\removeSelf.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "84874aa2-c2ae-4b21-afd9-d5a83caee4dc",
                "title": "OrganizationUser.removeSelf",
                "fullFile": "C:\\work\\api\\controllers\\test\\organizationUser\\removeSelf.enterprise.js",
                "file": "\\controllers\\test\\organizationUser\\removeSelf.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Organization OrganizationUser.removeSelf \"before each\" hook",
                    "timedOut": false,
                    "duration": 56,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        _data = data;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cfa37176-929c-436d-8a08-b3e90c976557",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Organization OrganizationUser.removeSelf \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "992cbeb3-1237-466d-a85b-d9e89fd68ae0",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should left organization.",
                    "fullTitle": "Enterprise Organization OrganizationUser.removeSelf Should left organization.",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.delete(apiURL.replace(\":org_uid\", org_uid))\n    .send({})\n    .set('authtoken', _data.role1.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.message.should.equal(messageList.ORG_USER_LEFT_SUCCESS);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "79bf6d9d-a5c9-41a9-9a54-fb5979097307",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should left organization if SSO is enable.",
                    "fullTitle": "Enterprise Organization OrganizationUser.removeSelf Should left organization if SSO is enable.",
                    "timedOut": false,
                    "duration": 83,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar config = getImmutable(ssoConfig);\napi.put(\"/enterprise/v1/organizations/:org_uid/ssoconfig\".replace(\":org_uid\", org_uid))\n    .send(config)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.uid != \"\" &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\" &&\n                res.body.output.sso_details.entry_point == config.entry_point &&\n                res.body.output.sso_details.algo_type == config.algo_type &&\n                res.body.output.sso_details.session_time_out_hours == config.session_time_out_hours\n            if (isValid) {\n                var publicKeyFile = __dirname + \"/../../../__cert/okta.cert\";\n                var privateKeyFile = __dirname + \"/../../../__cert/SP1.pem\";\n                api.post(\"/enterprise/v1/organizations/:org_uid/sso/certs\".replace(\":org_uid\", org_uid))\n                    .set('authtoken', _data.admin.authtoken)\n                    .attach('signed_public_key', publicKeyFile)\n                    .attach('enc_private_key', privateKeyFile)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        api.post(\"/enterprise/v1/organizations/:org_uid/sso/enable\".replace(\":org_uid\", org_uid))\n                            .send({})\n                            .set('authtoken', authToken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    if (res.body.output.enable_sso) {\n                                        api.delete(apiURL.replace(\":org_uid\", org_uid))\n                                            .send({})\n                                            .set('authtoken', _data.role1.authtoken)\n                                            .expect(httpStatus.OK)\n                                            .end(function(err, res) {\n                                                if (err) {\n                                                    done(err);\n                                                } else {\n                                                    res.body.output.message.should.equal(messageList.ORG_USER_LEFT_SUCCESS);\n                                                    done();\n                                                }\n                                            });\n                                    } else {\n                                        true.should.equal(false);\n                                        done();\n                                    }\n                                }\n                            });\n                    });\n            } else {\n                isValid.should.equal(false);\n                done();\n            }\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f0f7a6d6-a90a-4ba0-a171-524a910fd185",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give organization not found error.",
                    "fullTitle": "Enterprise Organization OrganizationUser.removeSelf Should give organization not found error.",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.delete(apiURL.replace(\":org_uid\", \"FAKE_ORG\"))\n    .send({})\n    .set('authtoken', _data.role1.authtoken)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_NOT_FOUND);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "35a6c3e7-a690-4e09-8767-3b58ad3f7072",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Owner sholud not leave organization.",
                    "fullTitle": "Enterprise Organization OrganizationUser.removeSelf Owner sholud not leave organization.",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.delete(apiURL.replace(\":org_uid\", org_uid))\n    .send({})\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ORG_OWNER_LEAVE_NOT_ALLOWED);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "169448a9-4057-4fad-a3cf-c84aba49edb3",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Organization OrganizationUser.removeSelf Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.delete(apiURL.replace(\":org_uid\", org_uid))\n    .send({})\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2d76ab4d-f102-4fbe-a809-4ce5baa1bcc1",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "79bf6d9d-a5c9-41a9-9a54-fb5979097307",
                  "f0f7a6d6-a90a-4ba0-a171-524a910fd185",
                  "35a6c3e7-a690-4e09-8767-3b58ad3f7072",
                  "169448a9-4057-4fad-a3cf-c84aba49edb3",
                  "2d76ab4d-f102-4fbe-a809-4ce5baa1bcc1"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 120,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "b1caffe7-335b-4d92-a215-37ca4cd592ca",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\payment\\cancelBraintreeSubscription.enterprise.js",
        "file": "\\controllers\\test\\payment\\cancelBraintreeSubscription.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "8705a8ee-b843-4a2d-812f-62252f5c668c",
            "title": "Payment",
            "fullFile": "C:\\work\\api\\controllers\\test\\payment\\cancelBraintreeSubscription.enterprise.js",
            "file": "\\controllers\\test\\payment\\cancelBraintreeSubscription.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "7c90b745-202c-48db-a75f-6e39b48f4b27",
                "title": "Payment.cancelBraintreeSubscription",
                "fullFile": "C:\\work\\api\\controllers\\test\\payment\\cancelBraintreeSubscription.enterprise.js",
                "file": "\\controllers\\test\\payment\\cancelBraintreeSubscription.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Payment Payment.cancelBraintreeSubscription \"before each\" hook",
                    "timedOut": false,
                    "duration": 149,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    commonMock.setSignUpMocks(httpmock, \"enterprise\");\n    api.post(\"/enterprise/v1/signup\")\n        .send(registrationBody)\n        .expect(httpStatus.CREATED)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                authToken = res.body.output.authtoken;\n                _id = res.body.output._id;\n                _braintreeCustId = res.body.output.braintree_customerId;\n                _userUid = res.body.output.uid;\n                subscribedPayload.options[\"braintree_customerId\"] = _braintreeCustId;\n                subscribedCanceledPayload.options[\"braintree_customerId\"] = _braintreeCustId;\n                //commonMock.braintreeSubscription(httpmock, \"enterprise\");\n                commonMock.braintreeSubscription(httpmock, \"enterprise\");\n                commonMock.braintreeUpdatePaymentMethod(httpmock, \"enterprise\");\n                api.post(\"/enterprise/v1/user/account/creditcards\")\n                    .send(saveCardBody)\n                    .set('authtoken', authToken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            commonMock.braintreeSubscription(httpmock, \"enterprise\");\n                            commonMock.intercomUserUpdate(httpmock, \"enterprise\");\n                            api.post(\"/v1/webhook/subscription/start\")\n                                .send(subscribedPayload)\n                                .expect(httpStatus.OK)\n                                .end(function(err, res) {\n                                    if (err) {\n                                        done(err);\n                                    } else {\n                                        done();\n                                    }\n                                });\n                        }\n                    });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ec268f4a-7ede-4634-abb5-d5bb00809cba",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Payment Payment.cancelBraintreeSubscription \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7da4b9a6-7088-4e67-b9f0-f2162debde17",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should cancel subscription.",
                    "fullTitle": "Enterprise Payment Payment.cancelBraintreeSubscription Should cancel subscription.",
                    "timedOut": false,
                    "duration": 68,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.braintreeCancelSubscription(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(subscribedCanceledPayload)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            commonMock.brainTreeClientToken(httpmock, \"enterprise\");\n            api.get(\"/enterprise/v1/user\")\n                .set('authtoken', authToken)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    // After cancelation of subcription default plans get set.\n                    commonMock.braintreeFindSubscription(httpmock, \"enterprise\");\n                    commonMock.braintreeFindCard(httpmock, \"enterprise\");\n                    api.get(\"/enterprise/v1/user/account/subscription\")\n                        .set('authtoken', authToken)\n                        .expect(httpStatus.OK)\n                        .end(function(err, res) {\n                            if (err) {\n                                done(err);\n                            } else {\n                                (res.body.output.billingDetails.firstName ==\n                                    registrationBody.first_name + \" \" + registrationBody.last_name).should.equal(true);\n                                done();\n                            }\n                        });\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a5da4ae5-4b8c-4c54-baf4-87154b7a6222",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should cancel subscription org user.",
                    "fullTitle": "Enterprise Payment Payment.cancelBraintreeSubscription Should cancel subscription org user.",
                    "timedOut": false,
                    "duration": 88,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRecordsEntry({}, function(data) {\n    commonMock.braintreeCancelSubscription(httpmock, \"enterprise\");\n    var temp_subscribedCanceledPayload = getImmutable(subscribedCanceledPayload);\n    temp_subscribedCanceledPayload.options.braintree_customerId = data.organization_account.braintree_customerId;\n    api.post(apiURL)\n        .send(temp_subscribedCanceledPayload)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                var org_uid = data.organization.uid;\n                var org_owner_authtoken = data.organization.uid;\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8ea88bf2-8612-4cd3-8efd-58c73ba2d55d",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "a5da4ae5-4b8c-4c54-baf4-87154b7a6222",
                  "8ea88bf2-8612-4cd3-8efd-58c73ba2d55d"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 156,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "6562f0be-a32e-4c8b-80c3-3d171e1d40f9",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\payment\\createBraintreeSubscription.enterprise.js",
        "file": "\\controllers\\test\\payment\\createBraintreeSubscription.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "c28082b3-1284-404b-973f-e22c7b6e9ea8",
            "title": "Payment",
            "fullFile": "C:\\work\\api\\controllers\\test\\payment\\createBraintreeSubscription.enterprise.js",
            "file": "\\controllers\\test\\payment\\createBraintreeSubscription.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "4dca5b9a-5e94-46f4-83fa-6be0746c68ce",
                "title": "Payment.createBraintreeSubscription",
                "fullFile": "C:\\work\\api\\controllers\\test\\payment\\createBraintreeSubscription.enterprise.js",
                "file": "\\controllers\\test\\payment\\createBraintreeSubscription.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Payment Payment.createBraintreeSubscription \"before each\" hook",
                    "timedOut": false,
                    "duration": 124,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    commonMock.setSignUpMocks(httpmock, \"enterprise\");\n    api.post(\"/enterprise/v1/signup\")\n        .send(registrationBody)\n        .expect(httpStatus.CREATED)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                authToken = res.body.output.authtoken;\n                _id = res.body.output._id;\n                _braintreeCustId = res.body.output.braintree_customerId;\n                _userUid = res.body.output.uid;\n                subscribedPayload.options[\"braintree_customerId\"] = _braintreeCustId;\n                commonMock.braintreeSubscription(httpmock, \"enterprise\");\n                commonMock.braintreeCancelSubscription(httpmock, \"enterprise\");\n                commonMock.braintreeUpdatePaymentMethod(httpmock, \"enterprise\");\n                api.post(\"/enterprise/v1/user/account/creditcards\")\n                    .send(saveCardBody)\n                    .set('authtoken', authToken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            done();\n                        }\n                    });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "47e4c4d7-9862-41c8-9ca8-c8acc80bac8f",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Payment Payment.createBraintreeSubscription \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2bcd09d3-6967-48dd-86f5-e62cc89bbabb",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should subscribed.",
                    "fullTitle": "Enterprise Payment Payment.createBraintreeSubscription Should subscribed.",
                    "timedOut": false,
                    "duration": 33,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.braintreeSubscription(httpmock, \"enterprise\");\ncommonMock.intercomUserUpdate(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(subscribedPayload)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            commonMock.brainTreeClientToken(httpmock, \"enterprise\");\n            api.get(\"/enterprise/v1/user\")\n                .set('authtoken', authToken)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    var _userUid = res.body.output.uid;\n                    var braintree_subscriptionId = res.body.output.braintree_subscriptionId;\n                    var isValid = _userUid != \"\" &&\n                        braintree_subscriptionId != \"\";\n                    isValid.should.equal(true);\n                    done();\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cd0515c0-53cd-4a9d-94e1-66762afc10f4",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should subscribed for org user.",
                    "fullTitle": "Enterprise Payment Payment.createBraintreeSubscription Should subscribed for org user.",
                    "timedOut": false,
                    "duration": 77,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRecordsEntry({}, function(data) {\n    commonMock.braintreeSubscription(httpmock, \"enterprise\");\n    commonMock.intercomUserUpdate(httpmock, \"enterprise\");\n    var temp_subscribedPayload = getImmutable(subscribedPayload);\n    temp_subscribedPayload.options.braintree_customerId = data.organization_account.braintree_customerId;\n    api.post(apiURL)\n        .send(temp_subscribedPayload)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                commonMock.brainTreeClientToken(httpmock, \"enterprise\");\n                _models.User.findOne({\n                    braintree_customerId: data.organization_account.braintree_customerId\n                }, function(error, user) {\n                    var braintree_subscriptionId = user.braintree_subscriptionId;\n                    var isValid = braintree_subscriptionId != \"\";\n                    isValid.should.equal(true);\n                    done();\n                });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4f072ffb-998f-49ac-881a-973e8b1b370b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should reset credit limit email flag.",
                    "fullTitle": "Enterprise Payment Payment.createBraintreeSubscription Should reset credit limit email flag.",
                    "timedOut": false,
                    "duration": 32,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User._findOneAndUpdate({ \"uid\": _userUid }, { credit_limit_email: true }, function(err, feature) {\n    commonMock.braintreeSubscription(httpmock, \"enterprise\");\n    commonMock.intercomUserUpdate(httpmock, \"enterprise\");\n    api.post(apiURL)\n        .send(subscribedPayload)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                commonMock.brainTreeClientToken(httpmock, \"enterprise\");\n                api.get(\"/enterprise/v1/user\")\n                    .set('authtoken', authToken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        var _userUid = res.body.output.uid;\n                        var braintree_subscriptionId = res.body.output.braintree_subscriptionId;\n                        var credit_limit_email = res.body.output.credit_limit_email;\n                        var isValid = _userUid != \"\" &&\n                            braintree_subscriptionId != \"\" &&\n                            credit_limit_email == false;\n                        isValid.should.equal(true);\n                        done();\n                    });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6f9dda94-7fb0-4692-88e9-c77bc77b39ea",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "cd0515c0-53cd-4a9d-94e1-66762afc10f4",
                  "4f072ffb-998f-49ac-881a-973e8b1b370b",
                  "6f9dda94-7fb0-4692-88e9-c77bc77b39ea"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 142,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "dbe602db-c951-4ec8-ae95-f08f7a5abcfd",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\payment\\disableAccount.enterprise.js",
        "file": "\\controllers\\test\\payment\\disableAccount.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "3670b53d-2c3c-4a15-9b97-e92f0449a500",
            "title": "Payment",
            "fullFile": "C:\\work\\api\\controllers\\test\\payment\\disableAccount.enterprise.js",
            "file": "\\controllers\\test\\payment\\disableAccount.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "239a9892-2401-4ef5-917f-ef19463d464a",
                "title": "Payment.disableAccount",
                "fullFile": "C:\\work\\api\\controllers\\test\\payment\\disableAccount.enterprise.js",
                "file": "\\controllers\\test\\payment\\disableAccount.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Enterprise Payment Payment.disableAccount \"before all\" hook",
                    "timedOut": false,
                    "duration": 129,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n    _models.Mail.remove({ $or: [{ to: new RegExp('^test.user+', \"i\") }, { to: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n        commonMock.setSignUpMocks(httpmock, \"enterprise\");\n        api.post(\"/enterprise/v1/signup\")\n            .send(registrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    authToken = res.body.output.authtoken;\n                    _id = res.body.output._id;\n                    commonMock.braintreeSubscription(httpmock, \"enterprise\");\n                    commonMock.braintreeUpdatePaymentMethod(httpmock, \"enterprise\");\n                    api.post(\"/enterprise/v1/user/account/creditcards\")\n                        .send(saveCardBody)\n                        .set('authtoken', authToken)\n                        .expect(httpStatus.OK)\n                        .end(function(err, res) {\n                            if (err) {\n                                done(err);\n                            } else {\n                                done();\n                            }\n                        });\n                }\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1ab16ad6-de74-4d55-8394-c541a93a6580",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Payment Payment.disableAccount \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1355fb02-3415-4a19-bcea-82ea8398ec1e",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should disable register user plan.",
                    "fullTitle": "Enterprise Payment Payment.disableAccount Should disable register user plan.",
                    "timedOut": false,
                    "duration": 26,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.braintreeCancelSubscription(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send({})\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.force_suspend == false &&\n                res.body.output.set_disable_status &&\n                typeof(res.body.output.authtoken) == \"string\";\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e759ecd5-9362-4701-ae47-f4f7c8d55b27",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Payment Payment.disableAccount Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.braintreeCancelSubscription(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send({})\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "657e7ea0-a922-44a2-89ba-b8c718dec6ac",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "e759ecd5-9362-4701-ae47-f4f7c8d55b27",
                  "657e7ea0-a922-44a2-89ba-b8c718dec6ac"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 29,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "8f08e365-f5c7-4b8d-bcef-c8e81ddfeaed",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\payment\\errorWhileBraintreeSubscription.enterprise.js",
        "file": "\\controllers\\test\\payment\\errorWhileBraintreeSubscription.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "e85fa92e-d3af-4ed7-852f-0c42d7cd4030",
            "title": "Payment",
            "fullFile": "C:\\work\\api\\controllers\\test\\payment\\errorWhileBraintreeSubscription.enterprise.js",
            "file": "\\controllers\\test\\payment\\errorWhileBraintreeSubscription.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "ed0cae18-6f3e-4884-be05-748902928f48",
                "title": "Payment.errorWhileBraintreeSubscription",
                "fullFile": "C:\\work\\api\\controllers\\test\\payment\\errorWhileBraintreeSubscription.enterprise.js",
                "file": "\\controllers\\test\\payment\\errorWhileBraintreeSubscription.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Payment Payment.errorWhileBraintreeSubscription \"before each\" hook",
                    "timedOut": false,
                    "duration": 127,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    commonMock.setSignUpMocks(httpmock, \"enterprise\");\n    api.post(\"/enterprise/v1/signup\")\n        .send(registrationBody)\n        .expect(httpStatus.CREATED)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                authToken = res.body.output.authtoken;\n                _id = res.body.output._id;\n                _braintreeCustId = res.body.output.braintree_customerId;\n                _userUid = res.body.output.uid;\n                subscriptionError.options[\"braintree_customerId\"] = _braintreeCustId;\n                commonMock.braintreeSubscription(httpmock, \"enterprise\");\n                commonMock.braintreeUpdatePaymentMethod(httpmock, \"enterprise\");\n                api.post(\"/enterprise/v1/user/account/creditcards\")\n                    .send(saveCardBody)\n                    .set('authtoken', authToken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            done();\n                        }\n                    });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d61b42e4-e536-43ec-b05a-017c7cfa2b4c",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Payment Payment.errorWhileBraintreeSubscription \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "57112a36-81b7-41a5-8931-8f46a5baa7c3",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should increment subscription failure count",
                    "fullTitle": "Enterprise Payment Payment.errorWhileBraintreeSubscription Should increment subscription failure count",
                    "timedOut": false,
                    "duration": 21,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.braintreeCancelSubscription(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(subscriptionError)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            commonMock.brainTreeClientToken(httpmock, \"enterprise\");\n            api.get(\"/enterprise/v1/user\")\n                .set('authtoken', authToken)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    res.body.output.subscription_failure_count.should.equal(1);\n                    done();\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "527009a0-6b4f-4ca2-8199-6d7e69eb0b15",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should increment subscription failure count for org user.",
                    "fullTitle": "Enterprise Payment Payment.errorWhileBraintreeSubscription Should increment subscription failure count for org user.",
                    "timedOut": false,
                    "duration": 67,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRecordsEntry({}, function(data) {\n    commonMock.braintreeCancelSubscription(httpmock, \"enterprise\");\n    var temp_subscriptionError = getImmutable(subscriptionError);\n    temp_subscriptionError.options.braintree_customerId = data.organization_account.braintree_customerId;\n    api.post(apiURL)\n        .send(temp_subscriptionError)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                _models.User.findOne({\n                    uid: data.organization.user_uid\n                }, function(error, user) {\n                    user.subscription_failure_count.should.equal(1);\n                    done();\n                });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "26026e24-0e29-4f4f-98fc-bb37f749f899",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should suspend user, if subscription failure count is greater than two.",
                    "fullTitle": "Enterprise Payment Payment.errorWhileBraintreeSubscription Should suspend user, if subscription failure count is greater than two.",
                    "timedOut": false,
                    "duration": 21,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.braintreeCancelSubscription(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(subscriptionError)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            commonMock.braintreeCancelSubscription(httpmock, \"enterprise\");\n            api.post(apiURL)\n                .send(subscriptionError)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        commonMock.braintreeCancelSubscription(httpmock, \"enterprise\");\n                        api.post(apiURL)\n                            .send(subscriptionError)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    _models.User.findOne({\n                                        uid: _userUid\n                                    }, function(error, user) {\n                                        user.force_suspend.should.equal(true);\n                                        done();\n                                    });\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c29dc47c-f728-4a46-b658-8a4ebc2a5110",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should suspend user, if subscription failure count is greater than two for org user.",
                    "fullTitle": "Enterprise Payment Payment.errorWhileBraintreeSubscription Should suspend user, if subscription failure count is greater than two for org user.",
                    "timedOut": false,
                    "duration": 75,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRecordsEntry({}, function(data) {\n    var temp_subscriptionError = getImmutable(subscriptionError);\n    temp_subscriptionError.options.braintree_customerId = data.organization_account.braintree_customerId;\n    _models.User.findOneAndUpdate({\n        braintree_customerId: temp_subscriptionError.options.braintree_customerId\n    }, {\n        subscription_failure_count: 5\n    }, { new: true }, function(error, user) {\n        commonMock.braintreeCancelSubscription(httpmock, \"enterprise\");\n        api.post(apiURL)\n            .send(temp_subscriptionError)\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    _models.User.findOne({\n                        uid: data.organization_account.uid\n                    }, function(error, user) {\n                        user.force_suspend.should.equal(true);\n                        done();\n                    });\n                }\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b0cffb99-95ad-43c1-9794-814ce387afa7",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "527009a0-6b4f-4ca2-8199-6d7e69eb0b15",
                  "26026e24-0e29-4f4f-98fc-bb37f749f899",
                  "c29dc47c-f728-4a46-b658-8a4ebc2a5110",
                  "b0cffb99-95ad-43c1-9794-814ce387afa7"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 184,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "aaeb36b5-3d4a-4cf7-b2b2-fee9bf1719cb",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\payment\\expiredInBraintreeSubscription.enterprise.js",
        "file": "\\controllers\\test\\payment\\expiredInBraintreeSubscription.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "bec2ea4e-7b16-489f-9530-f5d65100069a",
            "title": "Payment",
            "fullFile": "C:\\work\\api\\controllers\\test\\payment\\expiredInBraintreeSubscription.enterprise.js",
            "file": "\\controllers\\test\\payment\\expiredInBraintreeSubscription.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "fad49778-b167-4ef6-9e7d-c1c1dbce7270",
                "title": "Payment.expiredInBraintreeSubscription",
                "fullFile": "C:\\work\\api\\controllers\\test\\payment\\expiredInBraintreeSubscription.enterprise.js",
                "file": "\\controllers\\test\\payment\\expiredInBraintreeSubscription.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Payment Payment.expiredInBraintreeSubscription \"before each\" hook",
                    "timedOut": false,
                    "duration": 138,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    commonMock.setSignUpMocks(httpmock, \"enterprise\");\n    api.post(\"/enterprise/v1/signup\")\n        .send(registrationBody)\n        .expect(httpStatus.CREATED)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                authToken = res.body.output.authtoken;\n                _id = res.body.output._id;\n                _braintreeCustId = res.body.output.braintree_customerId;\n                _userUid = res.body.output.uid;\n                subscribedPayload.options[\"braintree_customerId\"] = _braintreeCustId;\n                subscriptionExpire.options[\"braintree_customerId\"] = _braintreeCustId;\n                commonMock.braintreeSubscription(httpmock, \"enterprise\");\n                commonMock.braintreeUpdatePaymentMethod(httpmock, \"enterprise\");\n                api.post(\"/enterprise/v1/user/account/creditcards\")\n                    .send(saveCardBody)\n                    .set('authtoken', authToken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            commonMock.braintreeSubscription(httpmock, \"enterprise\");\n                            commonMock.intercomUserUpdate(httpmock, \"enterprise\");\n                            api.post(\"/v1/webhook/subscription/start\")\n                                .send(subscribedPayload)\n                                .expect(httpStatus.OK)\n                                .end(function(err, res) {\n                                    if (err) {\n                                        done(err);\n                                    } else {\n                                        done();\n                                    }\n                                });\n                        }\n                    });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5210a377-2a5f-45b5-b8d6-34786cbcaaad",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Payment Payment.expiredInBraintreeSubscription \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "11cbe962-d6e5-4b9b-baeb-cff1f6850754",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should expired subscription.",
                    "fullTitle": "Enterprise Payment Payment.expiredInBraintreeSubscription Should expired subscription.",
                    "timedOut": false,
                    "duration": 29,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.braintreeCancelSubscription(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(subscriptionExpire)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            commonMock.brainTreeClientToken(httpmock, \"enterprise\");\n            api.get(\"/enterprise/v1/user\")\n                .set('authtoken', authToken)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        var isValid = res.body.output.force_suspend &&\n                            res.body.output.uid == _userUid;\n                        isValid.should.equal(true);\n                        done();\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e51f4a14-c3b7-4e0b-961f-c13a6d771f97",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should expired subscription for org user.",
                    "fullTitle": "Enterprise Payment Payment.expiredInBraintreeSubscription Should expired subscription for org user.",
                    "timedOut": false,
                    "duration": 78,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRecordsEntry({}, function(data) {\n    commonMock.braintreeCancelSubscription(httpmock, \"enterprise\");\n    var temp_subscriptionExpire = getImmutable(subscriptionExpire);\n    temp_subscriptionExpire.options.braintree_customerId = data.organization_account.braintree_customerId;\n    api.post(apiURL)\n        .send(temp_subscriptionExpire)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                _models.User.findOne({\n                    uid: data.organization.user_uid\n                }, function(error, user) {\n                    user.force_suspend.should.equal(true);\n                    done();\n                });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f05fbfde-9a26-4cfa-914b-88555384cb5a",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "e51f4a14-c3b7-4e0b-961f-c13a6d771f97",
                  "f05fbfde-9a26-4cfa-914b-88555384cb5a"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 107,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "3a556120-51b8-4eb8-9272-a634d0fc5d3a",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\payment\\getBillByUIDOrg.enterprise.js",
        "file": "\\controllers\\test\\payment\\getBillByUIDOrg.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "aa36478f-2f75-468b-a2de-bdd142257899",
            "title": "Payment",
            "fullFile": "C:\\work\\api\\controllers\\test\\payment\\getBillByUIDOrg.enterprise.js",
            "file": "\\controllers\\test\\payment\\getBillByUIDOrg.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "19951a49-ce53-40db-b2df-8be779dcf0d3",
                "title": "Payment.getBillByUIDOrg",
                "fullFile": "C:\\work\\api\\controllers\\test\\payment\\getBillByUIDOrg.enterprise.js",
                "file": "\\controllers\\test\\payment\\getBillByUIDOrg.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Payment Payment.getBillByUIDOrg \"before each\" hook",
                    "timedOut": false,
                    "duration": 1235,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_acc_authToken = _.first(data.organization_account.authtoken);\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        api.get(\"/enterprise/v1/projects\")\n            .set('org_uid', org_uid)\n            .set('authtoken', authToken)\n            .expect(httpStatus.OK)\n            .end(function(error, res) {\n                project_uid = _.first(res.body.output.projects).uid\n                saveBillEntries(\n                    _.extend(getImmutable(billBody), {\n                        authtoken: authToken\n                    }),\n                    function(error, bills) {\n                        savedBills = bills;\n                        done();\n                    });\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c0106fbe-6bb5-4ad1-badd-836fcc139409",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Payment Payment.getBillByUIDOrg \"after each\" hook",
                    "timedOut": false,
                    "duration": 2,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ntestCollection.organizationRemoveRecords({}, function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f85897f6-4e63-4aa8-8123-124c39922520",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should gives bill on providing bill uid.",
                    "fullTitle": "Enterprise Payment Payment.getBillByUIDOrg Should gives bill on providing bill uid.",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL.replace(\":bill_uid\", savedBills[0].body.output.uid);\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.uid.should.equal(savedBills[0].body.output.uid);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7c1510a4-165d-426d-bb4d-b58d37b41ed2",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not gives bill on providing wrong bill uid.",
                    "fullTitle": "Enterprise Payment Payment.getBillByUIDOrg Should not gives bill on providing wrong bill uid.",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL.replace(\":bill_uid\", \"flabc\");\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.USER_BILLS_NOT_EXISTS);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "94c20b18-1bb5-41d8-9003-74ad7dca68bc",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Payment Payment.getBillByUIDOrg Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "61c6f52f-1087-4291-9e1d-a78dc9e0fe30",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "7c1510a4-165d-426d-bb4d-b58d37b41ed2",
                  "94c20b18-1bb5-41d8-9003-74ad7dca68bc",
                  "61c6f52f-1087-4291-9e1d-a78dc9e0fe30"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 37,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "8922d8ad-9bcc-4bb2-8fee-f21d8ad4f7c1",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\payment\\getBillLogs.enterprise.js",
        "file": "\\controllers\\test\\payment\\getBillLogs.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "9835582f-f712-4ca5-9e8a-3dc9032ee40a",
            "title": "Payment",
            "fullFile": "C:\\work\\api\\controllers\\test\\payment\\getBillLogs.enterprise.js",
            "file": "\\controllers\\test\\payment\\getBillLogs.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "45ec277e-ad24-451b-ac61-b0d5ceb70f3b",
                "title": "Payment.getBillLogs",
                "fullFile": "C:\\work\\api\\controllers\\test\\payment\\getBillLogs.enterprise.js",
                "file": "\\controllers\\test\\payment\\getBillLogs.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Enterprise Payment Payment.getBillLogs \"before all\" hook",
                    "timedOut": false,
                    "duration": 1224,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n    _models.Mail.remove({ $or: [{ to: new RegExp('^test.user+', \"i\") }, { to: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n        _models.Bill.remove({ flow_name: new RegExp('^utest_cases_', \"i\") }, function(error, user) {\n            commonMock.setSignUpMocks(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/signup\")\n                .send(registrationBody)\n                .expect(httpStatus.CREATED)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        authToken = res.body.output.authtoken;\n                        _id = res.body.output._id;\n                        uid = res.body.output.uid;\n                        apiURL = apiURL.replace(\":uid\", uid);\n                        saveBillEntries(\n                            _.extend(getImmutable(billBody), {\n                                authtoken: authToken\n                            }),\n                            function(error, bills) {\n                                savedBills = bills;\n                                done();\n                            });\n                    }\n                });\n        });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0b56060d-da6c-441d-b560-da512e28551d",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Payment Payment.getBillLogs \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "708655c3-a7b1-4b14-a7e4-454718a5b4f4",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get list of bills.",
                    "fullTitle": "Enterprise Payment Payment.getBillLogs Should get list of bills.",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = typeof(res.body.output.count) == \"number\" &&\n                Array.isArray(res.body.output.objects);\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\";\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4369c1ab-dfce-4b3c-8ab4-caa35bd8fe54",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should gives bill on filteration.",
                    "fullTitle": "Enterprise Payment Payment.getBillLogs Should gives bill on filteration.",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?filter=utest_cases_1\"\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.count == 1 &&\n                Array.isArray(res.body.output.objects);\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\";\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ca368c6c-e556-4891-bd65-a6f77999a8a6",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not gives bill on filteration.",
                    "fullTitle": "Enterprise Payment Payment.getBillLogs Should not gives bill on filteration.",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?filter=utest_cases_122\"\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.USER_BILLS_NOT_EXISTS);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7db105fd-8419-4c3a-90ab-a422627c0dc6",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should gives bills on respective flow ids selections.",
                    "fullTitle": "Enterprise Payment Payment.getBillLogs Should gives bills on respective flow ids selections.",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=fld5aaeb1211f273e3c41f01,fld5aaeb1211f273e3c41f02\"\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.count == 2 &&\n                Array.isArray(res.body.output.objects);\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\";\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "96caa9d4-d7fc-4dcd-aa0b-d20dbac5cf00",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not gives bills on wrong flow ids selections.",
                    "fullTitle": "Enterprise Payment Payment.getBillLogs Should not gives bills on wrong flow ids selections.",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=fld5aaeb1211f273e3c41f15,fld5aaeb1211f273e3c41f99\"\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.USER_BILLS_NOT_EXISTS);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "52c89cab-ed36-43a7-968a-61b6a02bf06b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should gives bill on providing bill id.",
                    "fullTitle": "Enterprise Payment Payment.getBillLogs Should gives bill on providing bill id.",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?bill_uid=\" + savedBills[0].body.output.uid;\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.count == 1 &&\n                Array.isArray(res.body.output.objects);\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\";\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3abc932f-dcf7-46d9-a1d2-cb556c5da923",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not gives bill on providing wrong bill id.",
                    "fullTitle": "Enterprise Payment Payment.getBillLogs Should not gives bill on providing wrong bill id.",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?bill_uid=flabc\";\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.USER_BILLS_NOT_EXISTS);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "73aedc82-7410-4899-8d48-53b42b2c5e20",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should gives 2 bills after skiping 2 bills.",
                    "fullTitle": "Enterprise Payment Payment.getBillLogs Should gives 2 bills after skiping 2 bills.",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?limit=2&skip=2\";\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            _models.Bill.find({\n                deleted_at: null,\n                user_uid: uid\n            }).sort({ \"created_at\": 1 }).lean().exec(function(error, bills) {\n                if (error) {\n                    done(error);\n                } else {\n                    //bills = bills;\n                    //bills = utils.sortBy(bills, \"created_at\", \"date\");\n                    var validOutput = false;\n                    if (res.body.output.count == 10) {\n                        validOutput = res.body.output.objects[0].uid == bills[2].uid &&\n                            res.body.output.objects[1].uid == bills[3].uid;\n                        if (validOutput) {\n                            _.each(res.body.output.objects, function(item) {\n                                validOutput = validOutput &&\n                                    typeof(item._id) == \"undefined\" &&\n                                    typeof(item.__v) == \"undefined\";\n                            });\n                        }\n                    }\n                    validOutput.should.equal(true);\n                    done();\n                }\n            });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "972cfe23-27b1-4694-b902-243e5bc037e8",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should gives bills in ascending order.",
                    "fullTitle": "Enterprise Payment Payment.getBillLogs Should gives bills in ascending order.",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?field=created_at&order=asc\";\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            _models.Bill.find({\n                deleted_at: null,\n                user_uid: uid\n            }).sort({ \"created_at\": 1 }).lean().exec(function(error, bills) {\n                if (error) {\n                    done(error);\n                } else {\n                    //bills = convert.getJSON(bills);\n                    //bills = utils.sortBy(bills, \"created_at\", \"date\");\n                    var validOutput = false;\n                    if (res.body.output.count == 10) {\n                        validOutput = res.body.output.objects[0].uid == bills[0].uid &&\n                            res.body.output.objects[9].uid == bills[9].uid;\n                        if (validOutput) {\n                            _.each(res.body.output.objects, function(item) {\n                                validOutput = validOutput &&\n                                    typeof(item._id) == \"undefined\" &&\n                                    typeof(item.__v) == \"undefined\";\n                            });\n                        }\n                    }\n                    validOutput.should.equal(true);\n                    done();\n                }\n            });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4d556170-8c93-4403-892e-cbb2d611d4b8",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Payment Payment.getBillLogs Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "adedf64d-7588-45af-a110-c71c9c32ac00",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "4369c1ab-dfce-4b3c-8ab4-caa35bd8fe54",
                  "ca368c6c-e556-4891-bd65-a6f77999a8a6",
                  "7db105fd-8419-4c3a-90ab-a422627c0dc6",
                  "96caa9d4-d7fc-4dcd-aa0b-d20dbac5cf00",
                  "52c89cab-ed36-43a7-968a-61b6a02bf06b",
                  "3abc932f-dcf7-46d9-a1d2-cb556c5da923",
                  "73aedc82-7410-4899-8d48-53b42b2c5e20",
                  "972cfe23-27b1-4694-b902-243e5bc037e8",
                  "4d556170-8c93-4403-892e-cbb2d611d4b8",
                  "adedf64d-7588-45af-a110-c71c9c32ac00"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 131,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "8bf527df-cfa2-40da-86f9-e9f374d6a74d",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\payment\\getBillLogsOrg.enterprise.js",
        "file": "\\controllers\\test\\payment\\getBillLogsOrg.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "77268ed6-8509-4e45-9e52-786f9c477db4",
            "title": "Payment",
            "fullFile": "C:\\work\\api\\controllers\\test\\payment\\getBillLogsOrg.enterprise.js",
            "file": "\\controllers\\test\\payment\\getBillLogsOrg.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "d58976e7-ddb6-49e8-90f5-b13f900d293d",
                "title": "Payment.getBillLogsOrg",
                "fullFile": "C:\\work\\api\\controllers\\test\\payment\\getBillLogsOrg.enterprise.js",
                "file": "\\controllers\\test\\payment\\getBillLogsOrg.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Payment Payment.getBillLogsOrg \"before each\" hook",
                    "timedOut": false,
                    "duration": 1222,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        saveBillEntries(\n            _.extend(getImmutable(billBody), {\n                authtoken: authToken\n            }),\n            function(error, bills) {\n                savedBills = bills;\n                done();\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5d993158-05a5-4d54-bbf6-78db41457105",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Payment Payment.getBillLogsOrg \"after each\" hook",
                    "timedOut": false,
                    "duration": 2,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ntestCollection.organizationRemoveRecords({}, function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fac1f513-7168-4d6e-8fc0-05cc62e3b65f",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get list of bills.",
                    "fullTitle": "Enterprise Payment Payment.getBillLogsOrg Should get list of bills.",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = typeof(res.body.output.count) == \"number\" &&\n                Array.isArray(res.body.output.objects);\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\";\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1364521d-d533-4b0e-a312-7510628a03e6",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should gives bill on filteration.",
                    "fullTitle": "Enterprise Payment Payment.getBillLogsOrg Should gives bill on filteration.",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?filter=utest_cases_1\"\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.count == 1 &&\n                Array.isArray(res.body.output.objects);\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\";\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3dff8b95-a173-448a-8367-7a82580c9036",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not gives bill on filteration.",
                    "fullTitle": "Enterprise Payment Payment.getBillLogsOrg Should not gives bill on filteration.",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?filter=utest_cases_122\"\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.USER_BILLS_NOT_EXISTS);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "76277332-dbb5-4602-9698-0effefac38be",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should gives bills on respective flow ids selections.",
                    "fullTitle": "Enterprise Payment Payment.getBillLogsOrg Should gives bills on respective flow ids selections.",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=fld5aaeb1211f273e3c41f01,fld5aaeb1211f273e3c41f02\"\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.count == 2 &&\n                Array.isArray(res.body.output.objects);\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\";\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "da474156-33b7-4544-8dd2-a15aeb6b1bf8",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not gives bills on wrong flow ids selections.",
                    "fullTitle": "Enterprise Payment Payment.getBillLogsOrg Should not gives bills on wrong flow ids selections.",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=fld5aaeb1211f273e3c41f15,fld5aaeb1211f273e3c41f99\"\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.USER_BILLS_NOT_EXISTS);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4f548d63-457e-417e-aea2-fcfad6daa847",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should gives bill on providing bill id.",
                    "fullTitle": "Enterprise Payment Payment.getBillLogsOrg Should gives bill on providing bill id.",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?bill_uid=\" + savedBills[0].body.output.uid;\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.count == 1 &&\n                Array.isArray(res.body.output.objects);\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\";\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e4187150-1310-4e58-a795-3306cdead1b9",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not gives bill on providing wrong bill id.",
                    "fullTitle": "Enterprise Payment Payment.getBillLogsOrg Should not gives bill on providing wrong bill id.",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?bill_uid=flabc\";\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.USER_BILLS_NOT_EXISTS);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "acdbcefa-63e9-4a04-b89e-12e6f8c2bea0",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should gives 2 bills after skiping 2 bills.",
                    "fullTitle": "Enterprise Payment Payment.getBillLogsOrg Should gives 2 bills after skiping 2 bills.",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?limit=2&skip=2\";\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            _models.Bill.find({\n                deleted_at: null,\n                user_uid: org_account_uid\n            }).sort({ \"created_at\": 1 }).lean().exec(function(error, bills) {\n                if (error) {\n                    done(error);\n                } else {\n                    //bills = bills;\n                    //bills = utils.sortBy(bills, \"created_at\", \"date\");\n                    var validOutput = false;\n                    if (res.body.output.count == 10) {\n                        validOutput = res.body.output.objects[0].uid == bills[2].uid &&\n                            res.body.output.objects[1].uid == bills[3].uid;\n                        if (validOutput) {\n                            _.each(res.body.output.objects, function(item) {\n                                validOutput = validOutput &&\n                                    typeof(item._id) == \"undefined\" &&\n                                    typeof(item.__v) == \"undefined\";\n                            });\n                        }\n                    }\n                    validOutput.should.equal(true);\n                    done();\n                }\n            });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7812915d-3c10-41b8-9e66-8d720beb2b7f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should gives bills in ascending order.",
                    "fullTitle": "Enterprise Payment Payment.getBillLogsOrg Should gives bills in ascending order.",
                    "timedOut": false,
                    "duration": 17,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?field=created_at&order=asc\";\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            _models.Bill.find({\n                deleted_at: null,\n                user_uid: org_account_uid\n            }).sort({ \"created_at\": 1 }).lean().exec(function(error, bills) {\n                if (error) {\n                    done(error);\n                } else {\n                    //bills = convert.getJSON(bills);\n                    //bills = utils.sortBy(bills, \"created_at\", \"date\");\n                    var validOutput = false;\n                    if (res.body.output.count == 10) {\n                        validOutput = res.body.output.objects[0].uid == bills[0].uid &&\n                            res.body.output.objects[9].uid == bills[9].uid;\n                        if (validOutput) {\n                            _.each(res.body.output.objects, function(item) {\n                                validOutput = validOutput &&\n                                    typeof(item._id) == \"undefined\" &&\n                                    typeof(item.__v) == \"undefined\";\n                            });\n                        }\n                    }\n                    validOutput.should.equal(true);\n                    done();\n                }\n            });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "aeecb632-ed96-4e9c-a9a2-3a9bec9ca54d",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Payment Payment.getBillLogsOrg Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2a8d8480-6655-482c-aeb5-2b329f9e2a95",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "1364521d-d533-4b0e-a312-7510628a03e6",
                  "3dff8b95-a173-448a-8367-7a82580c9036",
                  "76277332-dbb5-4602-9698-0effefac38be",
                  "da474156-33b7-4544-8dd2-a15aeb6b1bf8",
                  "4f548d63-457e-417e-aea2-fcfad6daa847",
                  "e4187150-1310-4e58-a795-3306cdead1b9",
                  "acdbcefa-63e9-4a04-b89e-12e6f8c2bea0",
                  "7812915d-3c10-41b8-9e66-8d720beb2b7f",
                  "aeecb632-ed96-4e9c-a9a2-3a9bec9ca54d",
                  "2a8d8480-6655-482c-aeb5-2b329f9e2a95"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 141,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "f1183640-6423-491e-b38a-8ce7dfc38b38",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\payment\\getBraintreeToken.enterprise.js",
        "file": "\\controllers\\test\\payment\\getBraintreeToken.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "f2d7218e-7140-44ae-8893-b32fc000e133",
            "title": "Payment",
            "fullFile": "C:\\work\\api\\controllers\\test\\payment\\getBraintreeToken.enterprise.js",
            "file": "\\controllers\\test\\payment\\getBraintreeToken.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "875291c7-ee49-45cd-a792-d5e7b6fe5ea5",
                "title": "Payment.getBraintreeToken",
                "fullFile": "C:\\work\\api\\controllers\\test\\payment\\getBraintreeToken.enterprise.js",
                "file": "\\controllers\\test\\payment\\getBraintreeToken.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Enterprise Payment Payment.getBraintreeToken \"before all\" hook",
                    "timedOut": false,
                    "duration": 92,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n    _models.Mail.remove({ $or: [{ to: new RegExp('^test.user+', \"i\") }, { to: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n        commonMock.setSignUpMocks(httpmock, \"enterprise\");\n        api.post(\"/enterprise/v1/signup\")\n            .send(registrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    authToken = res.body.output.authtoken;\n                    _id = res.body.output._id;\n                    user_uid = res.body.output.uid;\n                    done();\n                }\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "221106ad-1804-4a97-92f6-ff0b71b9b735",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Payment Payment.getBraintreeToken \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "18b04b21-2883-469e-809d-a9c3281f80f2",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get client braintree token.",
                    "fullTitle": "Enterprise Payment Payment.getBraintreeToken Should get client braintree token.",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.brainTreeClientToken(httpmock, \"enterprise\");\napi.get(apiURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.token.should.not.equal(\"\");\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "46c891fa-6631-4b7b-a0df-b201729c4159",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get client braintree token, if user have braintree id is blank.",
                    "fullTitle": "Enterprise Payment Payment.getBraintreeToken Should get client braintree token, if user have braintree id is blank.",
                    "timedOut": false,
                    "duration": 30,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.brainTreeClientToken(httpmock, \"enterprise\");\napi.get(apiURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            _models.User.findOne({\n                uid: user_uid\n            }).lean().exec(function(err, user) {\n                if (err) {\n                    done(err);\n                } else {\n                    var braintree_customerId = user.braintree_customerId;\n                    _models.User.findOneAndUpdate({\n                        uid: user_uid\n                    }, {\n                        payment_set: \"\",\n                        braintree_customerId: \"\"\n                    }).lean().exec(function(err, user) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            commonMock.brainTreeCustomerCreate(httpmock, \"enterprise\");\n                            commonMock.brainTreeClientToken(httpmock, \"enterprise\");\n                            commonMock.brainTreeGenerateAuthToken(httpmock, \"enterprise\");\n                            api.get(apiURL)\n                                .set('authtoken', authToken)\n                                .expect(httpStatus.OK)\n                                .end(function(err, res) {\n                                    if (err) {\n                                        done(err);\n                                    } else {\n                                        _models.User.findOne({\n                                            uid: user_uid\n                                        }).lean().exec(function(err, user) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                (\n                                                    res.body.output.token != \"\" &&\n                                                    user.braintree_customerId != \"\"\n                                                ).should.equal(true);\n                                                done();\n                                            }\n                                        });\n                                    }\n                                });\n                        }\n                    });\n                }\n            });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3e18e94d-7c1a-4184-9648-c0d07e7ad7d8",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get client braintree token, if user have invalid braintree id.",
                    "fullTitle": "Enterprise Payment Payment.getBraintreeToken Should get client braintree token, if user have invalid braintree id.",
                    "timedOut": false,
                    "duration": 28,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.brainTreeClientToken(httpmock, \"enterprise\");\napi.get(apiURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            _models.User.findOne({\n                uid: user_uid\n            }).lean().exec(function(error, user) {\n                if (err) {\n                    done(err);\n                } else {\n                    var braintree_customerId = user.braintree_customerId;\n                    _models.User.findOneAndUpdate({\n                        uid: user_uid\n                    }, {\n                        payment_set: \"\",\n                        braintree_customerId: \"00000005620\"\n                    }).lean().exec(function(error, user) {\n                        if (error) {\n                            done(error);\n                        } else {\n                            commonMock.brainTreeCustomerCreate(httpmock, \"enterprise\");\n                            commonMock.brainTreeClientToken(httpmock, \"enterprise\");\n                            commonMock.brainTreeGenerateAuthToken(httpmock, \"enterprise\");\n                            api.get(apiURL)\n                                .set('authtoken', authToken)\n                                .expect(httpStatus.OK)\n                                .end(function(err, res) {\n                                    if (err) {\n                                        done(err);\n                                    } else {\n                                        _models.User.findOne({\n                                            uid: user_uid\n                                        }).lean().exec(function(error, user) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                (\n                                                    res.body.output.token != \"\" &&\n                                                    user.braintree_customerId != \"\"\n                                                ).should.equal(true);\n                                                done();\n                                            }\n                                        });\n                                    }\n                                });\n                        }\n                    });\n                }\n            });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d2bda09f-f87f-4004-8689-215955282b9e",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get client braintree token, if user have default invalid braintree id.",
                    "fullTitle": "Enterprise Payment Payment.getBraintreeToken Should get client braintree token, if user have default invalid braintree id.",
                    "timedOut": false,
                    "duration": 29,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.brainTreeClientToken(httpmock, \"enterprise\");\napi.get(apiURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            _models.User.findOne({\n                uid: user_uid\n            }).lean().exec(function(error, user) {\n                if (err) {\n                    done(err);\n                } else {\n                    var braintree_customerId = user.braintree_customerId;\n                    _models.User.findOneAndUpdate({\n                        uid: user_uid\n                    }, {\n                        payment_set: \"\",\n                        braintree_customerId: \"210934322\"\n                    }).lean().exec(function(error, user) {\n                        if (error) {\n                            done(error);\n                        } else {\n                            commonMock.brainTreeCustomerCreate(httpmock, \"enterprise\");\n                            commonMock.brainTreeClientToken(httpmock, \"enterprise\");\n                            commonMock.brainTreeGenerateAuthToken(httpmock, \"enterprise\");\n                            api.get(apiURL)\n                                .set('authtoken', authToken)\n                                .expect(httpStatus.OK)\n                                .end(function(err, res) {\n                                    if (err) {\n                                        done(err);\n                                    } else {\n                                        _models.User.findOne({\n                                            uid: user_uid\n                                        }).lean().exec(function(error, user) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                (\n                                                    res.body.output.token != \"\" &&\n                                                    user.braintree_customerId != \"\"\n                                                ).should.equal(true);\n                                                done();\n                                            }\n                                        });\n                                    }\n                                });\n                        }\n                    });\n                }\n            });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "992afc58-4f89-4ccb-9235-6214567f8be9",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Payment Payment.getBraintreeToken Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.brainTreeClientToken(httpmock, \"enterprise\");\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "36d080df-9138-45b4-8850-fae827c1e8da",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "46c891fa-6631-4b7b-a0df-b201729c4159",
                  "3e18e94d-7c1a-4184-9648-c0d07e7ad7d8",
                  "d2bda09f-f87f-4004-8689-215955282b9e",
                  "992afc58-4f89-4ccb-9235-6214567f8be9",
                  "36d080df-9138-45b4-8850-fae827c1e8da"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 104,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "95b87c5e-b8d6-4fdb-bed2-24a3fb48ddc8",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\payment\\getBraintreeTokenOrg.enterprise.js",
        "file": "\\controllers\\test\\payment\\getBraintreeTokenOrg.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "8ee02ee6-cacc-4a67-998e-70147f90ed64",
            "title": "Payment",
            "fullFile": "C:\\work\\api\\controllers\\test\\payment\\getBraintreeTokenOrg.enterprise.js",
            "file": "\\controllers\\test\\payment\\getBraintreeTokenOrg.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "81fa025b-0010-4354-89af-c2b1efc590e7",
                "title": "Payment.getBraintreeTokenOrg",
                "fullFile": "C:\\work\\api\\controllers\\test\\payment\\getBraintreeTokenOrg.enterprise.js",
                "file": "\\controllers\\test\\payment\\getBraintreeTokenOrg.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Payment Payment.getBraintreeTokenOrg \"before each\" hook",
                    "timedOut": false,
                    "duration": 62,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "63eef5f2-eb6f-402f-ab2b-937c93e8e207",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Payment Payment.getBraintreeTokenOrg \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a6717398-cb9f-467b-9aec-937f037f082d",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get client braintree token.",
                    "fullTitle": "Enterprise Payment Payment.getBraintreeTokenOrg Should get client braintree token.",
                    "timedOut": false,
                    "duration": 21,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.brainTreeClientToken(httpmock, \"enterprise\");\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.token.should.not.equal(\"\");\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1fbe20df-33d6-4b60-a5a1-91f34cbe23fc",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get client braintree token, if user have braintree id is blank.",
                    "fullTitle": "Enterprise Payment Payment.getBraintreeTokenOrg Should get client braintree token, if user have braintree id is blank.",
                    "timedOut": false,
                    "duration": 37,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.brainTreeClientToken(httpmock, \"enterprise\");\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            _models.User.findOne({\n                uid: org_account_uid\n            }).lean().exec(function(err, user) {\n                if (err) {\n                    done(err);\n                } else {\n                    var braintree_customerId = user.braintree_customerId;\n                    _models.User.findOneAndUpdate({\n                        uid: org_account_uid\n                    }, {\n                        payment_set: \"\",\n                        braintree_customerId: \"\"\n                    }).lean().exec(function(err, user) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            commonMock.brainTreeCustomerCreate(httpmock, \"enterprise\");\n                            commonMock.brainTreeClientToken(httpmock, \"enterprise\");\n                            commonMock.brainTreeGenerateAuthToken(httpmock, \"enterprise\");\n                            api.get(apiURL)\n                                .set('org_uid', org_uid)\n                                .set('authtoken', authToken)\n                                .expect(httpStatus.OK)\n                                .end(function(err, res) {\n                                    if (err) {\n                                        done(err);\n                                    } else {\n                                        _models.User.findOne({\n                                            uid: org_account_uid\n                                        }).lean().exec(function(err, user) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                (\n                                                    res.body.output.token != \"\" &&\n                                                    user.braintree_customerId != \"\"\n                                                ).should.equal(true);\n                                                done();\n                                            }\n                                        });\n                                    }\n                                });\n                        }\n                    });\n                }\n            });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "58987fe2-0dd6-4b43-b2a5-eeccaeb2546e",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get client braintree token, if user have invalid braintree id.",
                    "fullTitle": "Enterprise Payment Payment.getBraintreeTokenOrg Should get client braintree token, if user have invalid braintree id.",
                    "timedOut": false,
                    "duration": 37,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.brainTreeClientToken(httpmock, \"enterprise\");\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            _models.User.findOne({\n                uid: org_account_uid\n            }).lean().exec(function(error, user) {\n                if (err) {\n                    done(err);\n                } else {\n                    var braintree_customerId = user.braintree_customerId;\n                    _models.User.findOneAndUpdate({\n                        uid: org_account_uid\n                    }, {\n                        payment_set: \"\",\n                        braintree_customerId: \"00000005620\"\n                    }).lean().exec(function(error, user) {\n                        if (error) {\n                            done(error);\n                        } else {\n                            commonMock.brainTreeCustomerCreate(httpmock, \"enterprise\");\n                            commonMock.brainTreeClientToken(httpmock, \"enterprise\");\n                            commonMock.brainTreeGenerateAuthToken(httpmock, \"enterprise\");\n                            api.get(apiURL)\n                                .set('org_uid', org_uid)\n                                .set('authtoken', authToken)\n                                .expect(httpStatus.OK)\n                                .end(function(err, res) {\n                                    if (err) {\n                                        done(err);\n                                    } else {\n                                        _models.User.findOne({\n                                            uid: org_account_uid\n                                        }).lean().exec(function(error, user) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                (\n                                                    res.body.output.token != \"\" &&\n                                                    user.braintree_customerId != \"\"\n                                                ).should.equal(true);\n                                                done();\n                                            }\n                                        });\n                                    }\n                                });\n                        }\n                    });\n                }\n            });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "117100d9-21c8-4b18-acd4-dc414a0c2d03",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get client braintree token, if user have default invalid braintree id.",
                    "fullTitle": "Enterprise Payment Payment.getBraintreeTokenOrg Should get client braintree token, if user have default invalid braintree id.",
                    "timedOut": false,
                    "duration": 35,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.brainTreeClientToken(httpmock, \"enterprise\");\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            _models.User.findOne({\n                uid: org_account_uid\n            }).lean().exec(function(error, user) {\n                if (err) {\n                    done(err);\n                } else {\n                    var braintree_customerId = user.braintree_customerId;\n                    _models.User.findOneAndUpdate({\n                        uid: org_account_uid\n                    }, {\n                        payment_set: \"\",\n                        braintree_customerId: \"210934322\"\n                    }).lean().exec(function(error, user) {\n                        if (error) {\n                            done(error);\n                        } else {\n                            commonMock.brainTreeCustomerCreate(httpmock, \"enterprise\");\n                            commonMock.brainTreeClientToken(httpmock, \"enterprise\");\n                            commonMock.brainTreeGenerateAuthToken(httpmock, \"enterprise\");\n                            api.get(apiURL)\n                                .set('org_uid', org_uid)\n                                .set('authtoken', authToken)\n                                .expect(httpStatus.OK)\n                                .end(function(err, res) {\n                                    if (err) {\n                                        done(err);\n                                    } else {\n                                        _models.User.findOne({\n                                            uid: org_account_uid\n                                        }).lean().exec(function(error, user) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                (\n                                                    res.body.output.token != \"\" &&\n                                                    user.braintree_customerId != \"\"\n                                                ).should.equal(true);\n                                                done();\n                                            }\n                                        });\n                                    }\n                                });\n                        }\n                    });\n                }\n            });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7b6f21a9-f07d-4d91-8ee9-6b689b7be7e6",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Payment Payment.getBraintreeTokenOrg Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.brainTreeClientToken(httpmock, \"enterprise\");\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5328595c-b430-4a9a-ae53-2d5d33e8894c",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "1fbe20df-33d6-4b60-a5a1-91f34cbe23fc",
                  "58987fe2-0dd6-4b43-b2a5-eeccaeb2546e",
                  "117100d9-21c8-4b18-acd4-dc414a0c2d03",
                  "7b6f21a9-f07d-4d91-8ee9-6b689b7be7e6",
                  "5328595c-b430-4a9a-ae53-2d5d33e8894c"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 134,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "64681c66-2169-4ac5-baf4-58da14fd5432",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\payment\\getCardDetail.enterprise.js",
        "file": "\\controllers\\test\\payment\\getCardDetail.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "f35be26d-1389-4905-ae72-c9b596b2b431",
            "title": "Payment",
            "fullFile": "C:\\work\\api\\controllers\\test\\payment\\getCardDetail.enterprise.js",
            "file": "\\controllers\\test\\payment\\getCardDetail.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "bbc69f5d-1d51-441e-960a-5261eb691b3b",
                "title": "Payment.getCardDetail",
                "fullFile": "C:\\work\\api\\controllers\\test\\payment\\getCardDetail.enterprise.js",
                "file": "\\controllers\\test\\payment\\getCardDetail.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Enterprise Payment Payment.getCardDetail \"before all\" hook",
                    "timedOut": false,
                    "duration": 56,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "77ad2ee0-15d1-422f-9978-ea907ac16aac",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Payment Payment.getCardDetail \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "91679243-1049-4f84-95ab-225a7bcf6359",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get card details.",
                    "fullTitle": "Enterprise Payment Payment.getCardDetail Should get card details.",
                    "timedOut": false,
                    "duration": 23,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.braintreeFindCard(httpmock, \"enterprise\");\ncommonMock.braintreeFindSubscription(httpmock, \"enterprise\");\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.token.should.not.empty;\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1198fcf8-85d9-4d6f-a1ee-51e558b1599d",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Payment Payment.getCardDetail Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2e2e486b-6b16-4514-8d9a-189ddaf26ef1",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "1198fcf8-85d9-4d6f-a1ee-51e558b1599d",
                  "2e2e486b-6b16-4514-8d9a-189ddaf26ef1"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 26,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "24a5d903-92a7-4d33-a848-557a8e0f9af4",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\payment\\getCardDetailOrg.enterprise.js",
        "file": "\\controllers\\test\\payment\\getCardDetailOrg.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "022a674a-3bd1-48b1-b37f-b55314bbe5be",
            "title": "Payment",
            "fullFile": "C:\\work\\api\\controllers\\test\\payment\\getCardDetailOrg.enterprise.js",
            "file": "\\controllers\\test\\payment\\getCardDetailOrg.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "22bdbfe1-a0f5-4334-822a-605b60f1151d",
                "title": "Payment.getCardDetailOrg",
                "fullFile": "C:\\work\\api\\controllers\\test\\payment\\getCardDetailOrg.enterprise.js",
                "file": "\\controllers\\test\\payment\\getCardDetailOrg.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Payment Payment.getCardDetailOrg \"before each\" hook",
                    "timedOut": false,
                    "duration": 57,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6b78f933-345f-49f2-a5eb-9d6a95d4ca78",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Payment Payment.getCardDetailOrg \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4805372c-c560-4db7-95b7-6b20d1825098",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get card details.",
                    "fullTitle": "Enterprise Payment Payment.getCardDetailOrg Should get card details.",
                    "timedOut": false,
                    "duration": 23,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.braintreeFindCard(httpmock, \"enterprise\");\ncommonMock.braintreeFindSubscription(httpmock, \"enterprise\");\napi.get(apiURL)\n    .set(\"org_uid\", org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.token.should.not.empty;\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5bd565ee-a8e6-4d74-b3e0-027ac2288750",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Payment Payment.getCardDetailOrg Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set(\"org_uid\", org_uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ae9de40f-5622-4183-9c81-dedb0a209ede",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "5bd565ee-a8e6-4d74-b3e0-027ac2288750",
                  "ae9de40f-5622-4183-9c81-dedb0a209ede"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 26,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "9b227a26-3957-4778-816b-661ab07df3b7",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\payment\\getClientTokenOrg.enterprise.js",
        "file": "\\controllers\\test\\payment\\getClientTokenOrg.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "49ad70b0-1c49-45c8-b57d-d1c1a0c5e46d",
            "title": "Payment",
            "fullFile": "C:\\work\\api\\controllers\\test\\payment\\getClientTokenOrg.enterprise.js",
            "file": "\\controllers\\test\\payment\\getClientTokenOrg.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "b18727a9-8aa6-4163-87eb-c218b03048f9",
                "title": "Payment.getClientTokenOrg",
                "fullFile": "C:\\work\\api\\controllers\\test\\payment\\getClientTokenOrg.enterprise.js",
                "file": "\\controllers\\test\\payment\\getClientTokenOrg.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Payment Payment.getClientTokenOrg \"before each\" hook",
                    "timedOut": false,
                    "duration": 61,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a6341963-180c-4eb9-ab31-434dec64f5ba",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Payment Payment.getClientTokenOrg \"after all\" hook",
                    "timedOut": false,
                    "duration": 2,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "testCollection.organizationRemoveRecords({}, function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3f6c8c8a-aa24-4e5b-b625-e385b86d1087",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Payment Payment.getClientTokenOrg \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5e423d2c-d4d1-4fc8-af8f-173a7002fde4",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get current user payment logs.",
                    "fullTitle": "Enterprise Payment Payment.getClientTokenOrg Should get current user payment logs.",
                    "timedOut": false,
                    "duration": 18,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = Array.isArray(res.body.output);\n            if (isValid) {\n                if (res.body.output.length > 0) {\n                    isValid = (_.first(res.body.output) || {}).user_uid == userUid;\n                }\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "15075d00-bffe-453e-9bd1-a37d8ad10a74",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Payment Payment.getClientTokenOrg Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5ce174fd-2176-4b4d-92ff-f076a583c895",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "15075d00-bffe-453e-9bd1-a37d8ad10a74",
                  "5ce174fd-2176-4b4d-92ff-f076a583c895"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 21,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "6146e65e-dacf-46f2-9e6a-167e89cdc7d0",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\payment\\getCreditDetails.enterprise.js",
        "file": "\\controllers\\test\\payment\\getCreditDetails.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "1346c207-a1f2-44e3-ae2f-9e30155243d9",
            "title": "Payment",
            "fullFile": "C:\\work\\api\\controllers\\test\\payment\\getCreditDetails.enterprise.js",
            "file": "\\controllers\\test\\payment\\getCreditDetails.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "08db9118-7951-4dce-b27a-ef68789735bb",
                "title": "Payment.getCreditDetails",
                "fullFile": "C:\\work\\api\\controllers\\test\\payment\\getCreditDetails.enterprise.js",
                "file": "\\controllers\\test\\payment\\getCreditDetails.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Payment Payment.getCreditDetails \"before each\" hook",
                    "timedOut": false,
                    "duration": 149,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ndeleteAllInsertedRecords(function(error, output) {\n    if (error) {\n        done(error);\n    } else {\n        commonMock.setSignUpMocks(httpmock, \"enterprise\");\n        api.post(\"/enterprise/v1/signup\")\n            .send(registrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    authToken = res.body.output.authtoken;\n                    _id = res.body.output._id;\n                    saveInvoices({\n                        authToken: authToken,\n                        braintree_customerId: res.body.output.braintree_customerId || \"\",\n                        uid: res.body.output.uid || \"\"\n                    }, function() {\n                        var obj = {\n                            title: \"test1\",\n                            body_detail: \"test1\",\n                            email_body: \"test1\",\n                            agreement_link: \"http://example.com\",\n                            schedule_link: \"http://example.com\",\n                            attachment_link: \"http://example.com\",\n                            message: \"test msg\",\n                            email: \"test@example.com\",\n                            subject: \"test\"\n                        }\n                        _models.CreditDetail.create(obj, function(err, detail) {\n                            credit_details_uid = detail.uid;\n                            done();\n                        });\n                    });\n                }\n            });\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3dac98d6-f85c-4dac-a4aa-0e11f2c99829",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Payment Payment.getCreditDetails \"after all\" hook",
                    "timedOut": false,
                    "duration": 1,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "deleteAllInsertedRecords(function(error, output) {\n    if (error) {\n        done(error);\n    } else {\n        done();\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fdf3fea8-74cb-4d48-95ae-4a680cda5f57",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Payment Payment.getCreditDetails \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "267b07e8-5106-4cb4-aabe-9a1b79cefbc9",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get credit details.",
                    "fullTitle": "Enterprise Payment Payment.getCreditDetails Should get credit details.",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL.replace(\":uid\", credit_details_uid))\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.uid != \"\" &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\";\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "05b9f310-6f0f-4bfc-8d2c-010f53a7fa5a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give credit details not found error.",
                    "fullTitle": "Enterprise Payment Payment.getCreditDetails Should give credit details not found error.",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL.replace(\":uid\", \"FAKE_UID\"))\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.CARD_DETAIL_NOT_FOUND);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3ebf1b83-bbc6-4cf0-9d03-c3fba0ee2b8a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Payment Payment.getCreditDetails Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.braintreeUpdateCustomerPaymentDetail(httpmock, \"enterprise\");\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2f1ac01e-3ab6-45ee-a7fc-4e3575776297",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "05b9f310-6f0f-4bfc-8d2c-010f53a7fa5a",
                  "3ebf1b83-bbc6-4cf0-9d03-c3fba0ee2b8a",
                  "2f1ac01e-3ab6-45ee-a7fc-4e3575776297"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 30,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "7e0e2b58-d9d7-49be-8946-b81b9c0e6f07",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\payment\\getPaymentLog.enterprise.js",
        "file": "\\controllers\\test\\payment\\getPaymentLog.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "f22b160b-4103-408d-8e8e-02d64a79f66f",
            "title": "Payment",
            "fullFile": "C:\\work\\api\\controllers\\test\\payment\\getPaymentLog.enterprise.js",
            "file": "\\controllers\\test\\payment\\getPaymentLog.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "e9dab1af-bcd0-4b4c-8b79-9ba63b6b8b68",
                "title": "Payment.getPaymentLog",
                "fullFile": "C:\\work\\api\\controllers\\test\\payment\\getPaymentLog.enterprise.js",
                "file": "\\controllers\\test\\payment\\getPaymentLog.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Payment Payment.getPaymentLog \"before each\" hook",
                    "timedOut": false,
                    "duration": 129,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ndeleteAllInsertedRecords(function(error, output) {\n    if (error) {\n        done(error);\n    } else {\n        commonMock.setSignUpMocks(httpmock, \"enterprise\");\n        api.post(\"/enterprise/v1/signup\")\n            .send(registrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    authToken = res.body.output.authtoken;\n                    _id = res.body.output._id;\n                    userUid = res.body.output.uid;\n                    savePaymentLogs({\n                        authToken: authToken,\n                        braintree_customerId: res.body.output.braintree_customerId || \"\",\n                        uid: res.body.output.uid || \"\"\n                    }, function() {\n                        done();\n                    });\n                }\n            });\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "628a34f4-835a-4954-93c0-cfef1d86739e",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Payment Payment.getPaymentLog \"after all\" hook",
                    "timedOut": false,
                    "duration": 1,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "deleteAllInsertedRecords(function(error, output) {\n    if (error) {\n        done(error);\n    } else {\n        done();\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "33b3fc66-2445-4b73-946b-80862a2a4aff",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Payment Payment.getPaymentLog \"after each\" hook",
                    "timedOut": false,
                    "duration": 1,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c7b2b399-71fa-4e1a-87fd-ad7d99aa297f",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get current user payment logs.",
                    "fullTitle": "Enterprise Payment Payment.getPaymentLog Should get current user payment logs.",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = Array.isArray(res.body.output);\n            if (isValid) {\n                if (res.body.output.length > 0) {\n                    isValid = (_.first(res.body.output) || {}).user_uid == userUid;\n                }\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "96dc6889-9bd5-4363-97c4-97d711358715",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Payment Payment.getPaymentLog Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "57d06943-edd7-4c99-8031-f15327f62b1c",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "96dc6889-9bd5-4363-97c4-97d711358715",
                  "57d06943-edd7-4c99-8031-f15327f62b1c"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 17,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "be81aa02-93b6-4d55-9c68-b3f6ae45be5b",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\payment\\getPaymentLogOrg.enterprise.js",
        "file": "\\controllers\\test\\payment\\getPaymentLogOrg.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "a5698fbf-4a5a-488b-8c12-7299a6b292b8",
            "title": "Payment",
            "fullFile": "C:\\work\\api\\controllers\\test\\payment\\getPaymentLogOrg.enterprise.js",
            "file": "\\controllers\\test\\payment\\getPaymentLogOrg.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "4d10328d-d208-4832-b6f1-afbc41f4ecc9",
                "title": "Payment.getPaymentLogOrg",
                "fullFile": "C:\\work\\api\\controllers\\test\\payment\\getPaymentLogOrg.enterprise.js",
                "file": "\\controllers\\test\\payment\\getPaymentLogOrg.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Payment Payment.getPaymentLogOrg \"before each\" hook",
                    "timedOut": false,
                    "duration": 62,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6084717b-f272-4d30-9372-55ec2fd9a8fe",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Payment Payment.getPaymentLogOrg \"after all\" hook",
                    "timedOut": false,
                    "duration": 2,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "testCollection.organizationRemoveRecords({}, function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5c9845bf-3ae1-4c2d-b0f5-587ff086e7b3",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Payment Payment.getPaymentLogOrg \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "509fac0e-c0ec-4668-997e-6225ef9c80ba",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get current user payment logs.",
                    "fullTitle": "Enterprise Payment Payment.getPaymentLogOrg Should get current user payment logs.",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = Array.isArray(res.body.output);\n            if (isValid) {\n                if (res.body.output.length > 0) {\n                    isValid = (_.first(res.body.output) || {}).user_uid == userUid;\n                }\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a0867ee8-60f5-4bc6-839c-c02745ff7324",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Payment Payment.getPaymentLogOrg Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "50b44257-b88c-4381-b33f-aa60a9518c4a",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "a0867ee8-60f5-4bc6-839c-c02745ff7324",
                  "50b44257-b88c-4381-b33f-aa60a9518c4a"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 19,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "c4eeb792-d7c5-43cb-b265-d6b0ff2300b7",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\payment\\getPaymentSet.enterprise.js",
        "file": "\\controllers\\test\\payment\\getPaymentSet.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "43dd1afe-f2d0-466d-899b-5a98a1e1db66",
            "title": "Payment",
            "fullFile": "C:\\work\\api\\controllers\\test\\payment\\getPaymentSet.enterprise.js",
            "file": "\\controllers\\test\\payment\\getPaymentSet.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "d0304a2d-8cce-4860-a36d-05560675858a",
                "title": "Payment.getPaymentSet",
                "fullFile": "C:\\work\\api\\controllers\\test\\payment\\getPaymentSet.enterprise.js",
                "file": "\\controllers\\test\\payment\\getPaymentSet.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Enterprise Payment Payment.getPaymentSet \"before all\" hook",
                    "timedOut": false,
                    "duration": 87,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n    _models.Mail.remove({ $or: [{ to: new RegExp('^test.user+', \"i\") }, { to: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n        commonMock.setSignUpMocks(httpmock, \"enterprise\");\n        api.post(\"/enterprise/v1/signup\")\n            .send(registrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(error, res) {\n                if (error) {\n                    done(error);\n                } else {\n                    var data = res.body.output;\n                    authToken = data.authtoken;\n                    _id = data._id;\n                    payment_set = data.payment_set;\n                    if (error) {\n                        done(error);\n                    } else {\n                        done();\n                    }\n                }\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d885562e-082a-4a31-b2bd-9bbb0382235c",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Payment Payment.getPaymentSet \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "37168077-2ddd-4f82-b4ef-1c0f4d4812e3",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get payment_set for user.",
                    "fullTitle": "Enterprise Payment Payment.getPaymentSet Should get payment_set for user.",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.brainTreeClientToken(httpmock, \"enterprise\");\napi.get(apiURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = (res.body.output.payment_set != \"\" &&\n                res.body.output.payment_set != payment_set)\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1ddc0862-192f-4922-8c83-6babc05f756e",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Payment Payment.getPaymentSet Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.brainTreeClientToken(httpmock, \"enterprise\");\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cb5b404c-76e0-4b54-aabe-fdd8278f7ee6",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "1ddc0862-192f-4922-8c83-6babc05f756e",
                  "cb5b404c-76e0-4b54-aabe-fdd8278f7ee6"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 16,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "d37c6b22-5d79-4fa2-9c71-4af1613f7054",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\payment\\getPaymentSetOrg.enterprise.js",
        "file": "\\controllers\\test\\payment\\getPaymentSetOrg.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "822d271c-61f6-43fe-bbd5-dae940f3a25d",
            "title": "Payment",
            "fullFile": "C:\\work\\api\\controllers\\test\\payment\\getPaymentSetOrg.enterprise.js",
            "file": "\\controllers\\test\\payment\\getPaymentSetOrg.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "f4100fc1-b3d3-41b4-87bc-2469d0649e49",
                "title": "Payment.getPaymentSetOrg",
                "fullFile": "C:\\work\\api\\controllers\\test\\payment\\getPaymentSetOrg.enterprise.js",
                "file": "\\controllers\\test\\payment\\getPaymentSetOrg.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Payment Payment.getPaymentSetOrg \"before each\" hook",
                    "timedOut": false,
                    "duration": 59,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "efb75daf-3c0d-41ec-b11f-a017ca1ab7f8",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Payment Payment.getPaymentSetOrg \"after each\" hook",
                    "timedOut": false,
                    "duration": 1,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c376e6e7-e7fd-49e4-8f86-2bd98edc27fe",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get payment_set for user.",
                    "fullTitle": "Enterprise Payment Payment.getPaymentSetOrg Should get payment_set for user.",
                    "timedOut": false,
                    "duration": 17,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.brainTreeClientToken(httpmock, \"enterprise\");\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = (res.body.output.payment_set != \"\" &&\n                res.body.output.payment_set != payment_set)\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c8b749fc-fcf8-4771-b357-e88257de94b0",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Payment Payment.getPaymentSetOrg Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.brainTreeClientToken(httpmock, \"enterprise\");\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1177ea1d-a0c5-407b-aab5-3690c153bfe8",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "c8b749fc-fcf8-4771-b357-e88257de94b0",
                  "1177ea1d-a0c5-407b-aab5-3690c153bfe8"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 20,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "6ef54283-0ef3-4f03-b0aa-7c221e237e86",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\payment\\getStatistic.enterprise.js",
        "file": "\\controllers\\test\\payment\\getStatistic.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "d700901f-bcdb-4410-a433-5198dd076b68",
            "title": "Payment",
            "fullFile": "C:\\work\\api\\controllers\\test\\payment\\getStatistic.enterprise.js",
            "file": "\\controllers\\test\\payment\\getStatistic.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "d2757235-c1a7-4c89-9139-946bfbd2980a",
                "title": "Payment.getStatistic",
                "fullFile": "C:\\work\\api\\controllers\\test\\payment\\getStatistic.enterprise.js",
                "file": "\\controllers\\test\\payment\\getStatistic.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Payment Payment.getStatistic \"before each\" hook",
                    "timedOut": false,
                    "duration": 107,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveRecords(function(error, output) {\n    commonMock.setSignUpMocks(httpmock, \"enterprise\");\n    api.post(\"/enterprise/v1/signup\")\n        .send(registrationBody)\n        .expect(httpStatus.CREATED)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                authToken = res.body.output.authtoken;\n                _id = res.body.output._id;\n                user_uid = res.body.output.uid;\n                email = res.body.output.email;\n                api.get(\"/enterprise/v1/user\")\n                    .set(\"authtoken\", authToken)\n                    .expect(httpStatus.CREATED)\n                    .end(function(err, res) {\n                        env_uid = res.body.output.env_uid;\n                        done();\n                    });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "99786d17-1386-4370-b6ac-253b3b036a78",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Payment Payment.getStatistic \"after all\" hook",
                    "timedOut": false,
                    "duration": 2,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "removeRecords(function(error, output) {\n    if (error) {\n        done(error);\n    } else {\n        done();\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c6bd6391-060d-4a37-a35a-5df3036631f6",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Payment Payment.getStatistic \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c031b214-3dab-4603-9294-44befaba7804",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get list of bills.",
                    "fullTitle": "Enterprise Payment Payment.getStatistic Should get list of bills.",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (Array.isArray(res.body.output.objects)) {\n                isValid = res.body.output.objects.length == 0;\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3294a91b-4c21-482a-8740-cd404d532ad0",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get count of triggers of current user.",
                    "fullTitle": "Enterprise Payment Payment.getStatistic Should get count of triggers of current user.",
                    "timedOut": false,
                    "duration": 25,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nsaveUserTriggers(function(error, triggers) {\n    var filterURL = apiURL + \"?get=triggercount\";\n    api.get(filterURL)\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(error, res) {\n            if (error) {\n                done(error);\n            } else {\n                (parseInt(res.body.output.objects) == 10).should.equal(true);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0195f17c-f5be-4341-9d6f-c9a5a33c064a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get count of triggers of current user in specific range.",
                    "fullTitle": "Enterprise Payment Payment.getStatistic Should get count of triggers of current user in specific range.",
                    "timedOut": false,
                    "duration": 24,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nsaveUserTriggers(function(error, triggers) {\n    var frange = triggers[2].toJSON().created_at.toISOString();\n    var srange = triggers[8].toJSON().created_at.toISOString();\n    var filterURL = apiURL + \"?get=triggercount&frange=\" + frange + \"&srange=\" + srange;\n    api.get(filterURL)\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(error, res) {\n            if (error) {\n                done(error);\n            } else {\n                (parseInt(res.body.output.objects) > 0).should.equal(true);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "05e5542c-c272-4d31-bbca-9596f0b6bbf8",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get count of flows of current user.",
                    "fullTitle": "Enterprise Payment Payment.getStatistic Should get count of flows of current user.",
                    "timedOut": false,
                    "duration": 481,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nsaveUserFlows(done, function(error, flows) {\n    var filterURL = apiURL + \"?get=flowcount\";\n    api.get(filterURL)\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(error, res) {\n            if (error) {\n                done(error);\n            } else {\n                (parseInt(res.body.output.objects) >= 10).should.equal(true);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "32cb4735-747f-472e-8875-466488e46f2a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get count of flows of current user in specific range.",
                    "fullTitle": "Enterprise Payment Payment.getStatistic Should get count of flows of current user in specific range.",
                    "timedOut": false,
                    "duration": 380,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nsaveUserFlows(done, function(error, flows) {\n    var frange = new Date((new Date(flows[1].created_at)) - 300000).toISOString();\n    var srange = (new Date(flows[8].created_at)).toISOString();\n    var filterURL = apiURL + \"?get=flowcount&frange=\" + frange + \"&srange=\" + srange;\n    api.get(filterURL)\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(error, res) {\n            if (error) {\n                done(error);\n            } else {\n                (parseInt(res.body.output.objects) >= 9).should.equal(true);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "eb81ec85-adea-44b7-94bd-0c835b49ccd0",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get count of present flows of current user.",
                    "fullTitle": "Enterprise Payment Payment.getStatistic Should get count of present flows of current user.",
                    "timedOut": false,
                    "duration": 48,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nsaveFlowsPresent(function(error, flows) {\n    var filterURL = apiURL + \"?get=flowspresent\";\n    api.get(filterURL)\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(error, res) {\n            if (error) {\n                done(error);\n            } else {\n                parseInt(res.body.output.objects).should.not.equal(NaN);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6a1d9444-2751-42fe-ac80-95e9d3706e23",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get count of present flows of current user in specific range.",
                    "fullTitle": "Enterprise Payment Payment.getStatistic Should get count of present flows of current user in specific range.",
                    "timedOut": false,
                    "duration": 44,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nsaveFlowsPresent(function(error, flows) {\n    var frange = new Date((new Date(flows[1].created_at.toISOString())) - 300000).toISOString();\n    var srange = flows[8].created_at.toISOString();\n    var filterURL = apiURL + \"?get=flowspresent&frange=\" + frange + \"&srange=\" + srange;\n    api.get(filterURL)\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(error, res) {\n            if (error) {\n                done(error);\n            } else {\n                parseInt(res.body.output.objects).should.not.equal(NaN);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f3ab378f-6f97-48a3-93de-3b21a992e681",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get count zero credits.",
                    "fullTitle": "Enterprise Payment Payment.getStatistic Should get count zero credits.",
                    "timedOut": false,
                    "duration": 106,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = getImmutable(registrationBody);\ntempRegistrationBody.email = \"test.user+1000@raweng.com\";\ncommonMock.setSignUpMocks(httpmock, \"enterprise\", {\n    email: tempRegistrationBody.email\n});\napi.post(\"/enterprise/v1/signup\")\n    .send(tempRegistrationBody)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var filterURL = apiURL + \"?get=credits\";\n            api.get(filterURL)\n                .set('authtoken', res.body.output.authtoken)\n                .expect(httpStatus.OK)\n                .end(function(error, res) {\n                    if (error) {\n                        done(error);\n                    } else {\n                        (parseInt(res.body.output.objects) == 0).should.equal(true);\n                        done();\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e6ac2599-c783-43ad-8ac9-8220f8f91e7a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get count of flows and triggers of current user.",
                    "fullTitle": "Enterprise Payment Payment.getStatistic Should get count of flows and triggers of current user.",
                    "timedOut": false,
                    "duration": 47,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nsaveFlowsPresent(function(error, flows) {\n    var filterURL = apiURL + \"?get=flow_trigger\";\n    api.get(filterURL)\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(error, res) {\n            if (error) {\n                done(error);\n            } else {\n                (typeof(res.body.output.trigger) == \"number\" &&\n                    typeof(res.body.output.flows) == \"number\").should.equal(true);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f15ee98b-43b5-44d8-9d1e-dd7eccbec134",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get userstream count.",
                    "fullTitle": "Enterprise Payment Payment.getStatistic Should get userstream count.",
                    "timedOut": false,
                    "duration": 122,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nsaveBillEntries({\n    email: email,\n    authtoken: authToken,\n    user_uid: user_uid\n}, function(options, callback) {\n    saveUserStreamEntries({\n        email: email,\n        authtoken: authToken,\n        user_uid: user_uid\n    }, function(error, flows) {\n        var filterURL = apiURL + \"?get=librarydownload\";\n        api.get(filterURL)\n            .set('authtoken', authToken)\n            .expect(httpStatus.OK)\n            .end(function(error, res) {\n                if (error) {\n                    done(error);\n                } else {\n                    (typeof(res.body.output.objects) != \"undefined\").should.equal(true);\n                    done();\n                }\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2f5258e8-3aba-452d-ad58-c9e2babe79c0",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get library download count.",
                    "fullTitle": "Enterprise Payment Payment.getStatistic Should get library download count.",
                    "timedOut": false,
                    "duration": 106,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nsaveBillEntries({\n    email: email,\n    authtoken: authToken,\n}, function(options, callback) {\n    saveUserStreamEntries({\n        email: email,\n        authtoken: authToken,\n    }, function(error, flows) {\n        var filterURL = apiURL + \"?get=librarydownload\";\n        api.get(filterURL)\n            .set('authtoken', authToken)\n            .expect(httpStatus.OK)\n            .end(function(error, res) {\n                if (error) {\n                    done(error);\n                } else {\n                    (typeof(res.body.output.objects) != \"undefined\").should.equal(true);\n                    done();\n                }\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "62f011a6-1891-4e5f-bc74-3fd57b069b7f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get flow shared count.",
                    "fullTitle": "Enterprise Payment Payment.getStatistic Should get flow shared count.",
                    "timedOut": false,
                    "duration": 116,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nsaveBillEntries({\n    email: email,\n    authtoken: authToken,\n}, function(options, callback) {\n    saveUserStreamEntries({\n        email: email,\n        authtoken: authToken,\n    }, function(error, flows) {\n        var filterURL = apiURL + \"?get=flowshared\";\n        api.get(filterURL)\n            .set('authtoken', authToken)\n            .expect(httpStatus.OK)\n            .end(function(error, res) {\n                if (error) {\n                    done(error);\n                } else {\n                    (typeof(res.body.output.objects) != \"undefined\").should.equal(true);\n                    done();\n                }\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d95396d8-26dc-4a10-bc54-6f872919106f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get flow total run count.",
                    "fullTitle": "Enterprise Payment Payment.getStatistic Should get flow total run count.",
                    "timedOut": false,
                    "duration": 112,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nsaveBillEntries({\n    email: email,\n    authtoken: authToken,\n}, function(options, callback) {\n    saveUserStreamEntries({\n        email: email,\n        authtoken: authToken,\n    }, function(error, flows) {\n        var filterURL = apiURL + \"?get=totalrun\";\n        api.get(filterURL)\n            .set('authtoken', authToken)\n            .expect(httpStatus.OK)\n            .end(function(error, res) {\n                if (error) {\n                    done(error);\n                } else {\n                    (typeof(res.body.output.objects) != \"undefined\").should.equal(true);\n                    done();\n                }\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "91d6c0b5-6775-468d-8822-4f0940b2858d",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Payment Payment.getStatistic Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "05d65223-acc6-4b20-8a7d-bc348b6c73b6",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "3294a91b-4c21-482a-8740-cd404d532ad0",
                  "0195f17c-f5be-4341-9d6f-c9a5a33c064a",
                  "05e5542c-c272-4d31-bbca-9596f0b6bbf8",
                  "32cb4735-747f-472e-8875-466488e46f2a",
                  "eb81ec85-adea-44b7-94bd-0c835b49ccd0",
                  "6a1d9444-2751-42fe-ac80-95e9d3706e23",
                  "f3ab378f-6f97-48a3-93de-3b21a992e681",
                  "e6ac2599-c783-43ad-8ac9-8220f8f91e7a",
                  "f15ee98b-43b5-44d8-9d1e-dd7eccbec134",
                  "2f5258e8-3aba-452d-ad58-c9e2babe79c0",
                  "62f011a6-1891-4e5f-bc74-3fd57b069b7f",
                  "d95396d8-26dc-4a10-bc54-6f872919106f",
                  "91d6c0b5-6775-468d-8822-4f0940b2858d",
                  "05d65223-acc6-4b20-8a7d-bc348b6c73b6"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 1628,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "95ce6600-7a22-4349-8748-70982a83bfc4",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\payment\\getStatisticMonthWise.enterprise.js",
        "file": "\\controllers\\test\\payment\\getStatisticMonthWise.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "99847a10-d18b-4fad-8771-7302afb42f04",
            "title": "Payment",
            "fullFile": "C:\\work\\api\\controllers\\test\\payment\\getStatisticMonthWise.enterprise.js",
            "file": "\\controllers\\test\\payment\\getStatisticMonthWise.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "c205af2c-fb24-41a5-b674-c93932ce8b4e",
                "title": "Payment.getStatisticMonthWise",
                "fullFile": "C:\\work\\api\\controllers\\test\\payment\\getStatisticMonthWise.enterprise.js",
                "file": "\\controllers\\test\\payment\\getStatisticMonthWise.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Enterprise Payment Payment.getStatisticMonthWise \"before all\" hook",
                    "timedOut": false,
                    "duration": 192,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nremoveRecords(function() {\n    async.waterfall([\n        function(cbk) {\n            _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n                cbk(err, user);\n            })\n        },\n        function(userTrigger, cbk) {\n            api.post(\"/enterprise/v1/signup\")\n                .send(testData.testRegistrationBody)\n                .expect(httpStatus.CREATED)\n                .end(function(err, res) {\n                    authToken = res.body.output.authtoken;\n                    _id = res.body.output._id;\n                    user_uid = res.body.output.uid;\n                    email = res.body.output.email;\n                    cbk(err, res);\n                })\n        },\n        function(result, cbk) {\n            dummyUser = result.body.output;\n            testData.mongoUserTriggerObj.user_uid = dummyUser.uid;\n            _models.UserTrigger.create(testData.mongoUserTriggerObj, function(err, userTrigger) {\n                cbk(err, userTrigger);\n            })\n        },\n        function(userTrigger, cbk) {\n            var userTriggerObj = userTrigger;\n            var flowData = _.cloneDeep(testData.flowBody);\n            flowData.isExpress = false;\n            flowData.trigger.handlers = [userTriggerObj.uid]\n            async.parallel({\n                triggerFlow: function(cb) {\n                    createFlow(flowURL, flowData, dummyUser, function(err, result) {\n                        cb(err, result);\n                    })\n                },\n                inactiveFlow: function(cb) {\n                    var inactiveFlow = _.cloneDeep(flowData);\n                    inactiveFlow.active = false;\n                    createFlow(flowURL, inactiveFlow, dummyUser, function(err, result) {\n                        cb(err, result);\n                    })\n                },\n                draftFlow: function(cb) {\n                    var draftFlow = _.cloneDeep(flowData);\n                    draftFlow.is_draft = true;\n                    createFlow(flowURL, draftFlow, dummyUser, function(err, result) {\n                        cb(err, result);\n                    })\n                },\n                webHookFlow: function(cb) {\n                    var WHFlow = _.cloneDeep(flowData);\n                    WHFlow.trigger = testData.defaultTriggerObj;\n                    WHFlow.settings = testData.webHookSetting;\n                    WHFlow.active = true;\n                    WHFlow.settings = testData.webHookSetting;\n                    createFlow(flowURL, WHFlow, dummyUser, function(err, result) {\n                        cb(err, result);\n                    })\n                },\n                invalidEnvFlow: function(cb) {\n                    var IVWHFlow = _.cloneDeep(flowData);\n                    IVWHFlow.trigger = testData.defaultTriggerObj;\n                    IVWHFlow.settings = testData.webHookSetting;\n                    IVWHFlow.environment[0].params.push({ key: \"body\", required: true });\n                    createFlow(flowURL, IVWHFlow, dummyUser, function(err, result) {\n                        cb(err, result);\n                    })\n                }\n            }, function(err, result) {\n                cbk(err, result)\n            })\n        }\n    ], function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            userTriggerFlow = res.triggerFlow.body.output;\n            userDraftFlow = res.draftFlow.body.output;\n            userWebHookFlow = res.webHookFlow.body.output;\n            invalidEnvFlow = res.invalidEnvFlow.body.output;\n            inactiveFlow = res.inactiveFlow.body.output;\n            _models.newFlow.findOneAndUpdate({ uid: userWebHookFlow.uid }, {\n                current_month_run_time: 5,\n                total_run_count: 20\n            }, function(err, deletedFlows) {\n                done();\n            });\n        }\n    })\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "050be673-e03f-46cc-b0b4-d024a7e6b1e5",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Payment Payment.getStatisticMonthWise \"after all\" hook",
                    "timedOut": false,
                    "duration": 2,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveRecords(function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "45219103-e7fa-48b0-aff5-adc2d9ff1335",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Payment Payment.getStatisticMonthWise \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "425bb2ef-aea6-4c8c-9866-cd4ae0d6970b",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get month wise flow statistic of current user.",
                    "fullTitle": "Enterprise Payment Payment.getStatisticMonthWise Should get month wise flow statistic of current user.",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (isNaN(parseInt(res.body.output.current_month_run)) == false &&\n                isNaN(parseInt(res.body.output.total_run)) == false) {\n                isValid = parseInt(res.body.output.current_month_run) > 0 &&\n                    parseInt(res.body.output.total_run) > 0;\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "75f2813c-4ef6-4e12-9568-7b8a3f93192e",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Payment Payment.getStatisticMonthWise Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "35524cb7-fb53-4f8f-ade6-459c13f0b50a",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "75f2813c-4ef6-4e12-9568-7b8a3f93192e",
                  "35524cb7-fb53-4f8f-ade6-459c13f0b50a"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 18,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "c625138c-11c5-4760-ad37-e732134d61b9",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\payment\\getStatisticMonthWiseOrg.enterprise.js",
        "file": "\\controllers\\test\\payment\\getStatisticMonthWiseOrg.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "acd5012f-c4bb-4d3a-bd2a-8ee8449d9c61",
            "title": "Payment",
            "fullFile": "C:\\work\\api\\controllers\\test\\payment\\getStatisticMonthWiseOrg.enterprise.js",
            "file": "\\controllers\\test\\payment\\getStatisticMonthWiseOrg.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "0e3bb6e6-ef35-4968-b0f9-211ea367a912",
                "title": "Payment.getStatisticMonthWiseOrg",
                "fullFile": "C:\\work\\api\\controllers\\test\\payment\\getStatisticMonthWiseOrg.enterprise.js",
                "file": "\\controllers\\test\\payment\\getStatisticMonthWiseOrg.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Payment Payment.getStatisticMonthWiseOrg \"before each\" hook",
                    "timedOut": false,
                    "duration": 539,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nremoveRecords(function() {\n    async.waterfall([\n        function(cbk) {\n            _models.User.remove({}, function(err, user) {\n                cbk(err, user);\n            })\n        },\n        function(userTrigger, cbk) {\n            api.post(\"/enterprise/v1/signup\")\n                .send(testData.testRegistrationBody)\n                .expect(httpStatus.CREATED)\n                .end(function(err, res) {\n                    authToken = res.body.output.authtoken;\n                    _id = res.body.output._id;\n                    user_uid = res.body.output.uid;\n                    email = res.body.output.email;\n                    createOrgEntries({\n                        done: done\n                    }, function() {\n                        cbk(err, res);\n                    });\n                })\n        },\n        function(result, cbk) {\n            dummyUser = result.body.output;\n            testData.mongoUserTriggerObj.user_uid = dummyUser.uid;\n            _models.UserTrigger.create(testData.mongoUserTriggerObj, function(err, userTrigger) {\n                cbk(err, userTrigger);\n            })\n        },\n        function(userTrigger, cbk) {\n            var userTriggerObj = userTrigger;\n            var flowData = _.cloneDeep(testData.flowBody);\n            flowData.isExpress = false;\n            flowData.trigger.handlers = [userTriggerObj.uid]\n            async.parallel({\n                triggerFlow: function(cb) {\n                    createFlow(flowURL, flowData, dummyUser, function(err, result) {\n                        cb(err, result);\n                    })\n                },\n                inactiveFlow: function(cb) {\n                    var inactiveFlow = _.cloneDeep(flowData);\n                    inactiveFlow.active = false;\n                    createFlow(flowURL, inactiveFlow, dummyUser, function(err, result) {\n                        cb(err, result);\n                    })\n                },\n                draftFlow: function(cb) {\n                    var draftFlow = _.cloneDeep(flowData);\n                    draftFlow.is_draft = true;\n                    createFlow(flowURL, draftFlow, dummyUser, function(err, result) {\n                        cb(err, result);\n                    })\n                },\n                webHookFlow: function(cb) {\n                    var WHFlow = _.cloneDeep(flowData);\n                    WHFlow.trigger = testData.defaultTriggerObj;\n                    WHFlow.settings = testData.webHookSetting;\n                    WHFlow.active = true;\n                    WHFlow.settings = testData.webHookSetting;\n                    createFlow(flowURL, WHFlow, dummyUser, function(err, result) {\n                        cb(err, result);\n                    })\n                },\n                invalidEnvFlow: function(cb) {\n                    var IVWHFlow = _.cloneDeep(flowData);\n                    IVWHFlow.trigger = testData.defaultTriggerObj;\n                    IVWHFlow.settings = testData.webHookSetting;\n                    IVWHFlow.environment[0].params.push({ key: \"body\", required: true });\n                    createFlow(flowURL, IVWHFlow, dummyUser, function(err, result) {\n                        cb(err, result);\n                    })\n                }\n            }, function(err, result) {\n                cbk(err, result)\n            })\n        }\n    ], function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            userTriggerFlow = res.triggerFlow.body.output;\n            userDraftFlow = res.draftFlow.body.output;\n            userWebHookFlow = res.webHookFlow.body.output;\n            invalidEnvFlow = res.invalidEnvFlow.body.output;\n            inactiveFlow = res.inactiveFlow.body.output;\n            _models.newFlow.findOneAndUpdate({ uid: userWebHookFlow.uid }, {\n                current_month_run_time: 5,\n                total_run_count: 20\n            }, function(err, deletedFlows) {\n                done();\n            });\n        }\n    })\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2e114b26-b7d7-4507-979e-b2fcc7029bcf",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Payment Payment.getStatisticMonthWiseOrg \"after all\" hook",
                    "timedOut": false,
                    "duration": 4,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveRecords(function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "87667ef4-22c6-4dc6-9852-b85437808080",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Payment Payment.getStatisticMonthWiseOrg \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2f36430a-e703-46aa-83dc-9e58224c31b0",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get month wise flow statistic of current user.",
                    "fullTitle": "Enterprise Payment Payment.getStatisticMonthWiseOrg Should get month wise flow statistic of current user.",
                    "timedOut": false,
                    "duration": 18,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (isNaN(parseInt(res.body.output.current_month_run)) == false &&\n                isNaN(parseInt(res.body.output.total_run)) == false) {\n                isValid = parseInt(res.body.output.current_month_run) > 0 &&\n                    parseInt(res.body.output.total_run) > 0;\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c8577945-aeaa-4a05-b88c-1c0ddf9c851c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Payment Payment.getStatisticMonthWiseOrg Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7ba6b1d2-2036-47fd-a042-64453bf4fa2f",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "c8577945-aeaa-4a05-b88c-1c0ddf9c851c",
                  "7ba6b1d2-2036-47fd-a042-64453bf4fa2f"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 23,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "b56c0dfc-a0a8-4d8c-8e35-9a39c2683ebb",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\payment\\getStatisticOrg.enterprise.js",
        "file": "\\controllers\\test\\payment\\getStatisticOrg.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "fefae41a-89ed-41c2-b861-03d4be6b5faa",
            "title": "Payment",
            "fullFile": "C:\\work\\api\\controllers\\test\\payment\\getStatisticOrg.enterprise.js",
            "file": "\\controllers\\test\\payment\\getStatisticOrg.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "4d9ce972-ff9b-4e01-bfd6-eb149a0c1d07",
                "title": "Payment.getStatisticOrg",
                "fullFile": "C:\\work\\api\\controllers\\test\\payment\\getStatisticOrg.enterprise.js",
                "file": "\\controllers\\test\\payment\\getStatisticOrg.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Payment Payment.getStatisticOrg \"before each\" hook",
                    "timedOut": false,
                    "duration": 87,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        api.get(\"/enterprise/v1/user\")\n            .set('org_uid', org_uid)\n            .set('authtoken', authToken)\n            .expect(httpStatus.OK)\n            .end(function(error, res) {\n                env_uid = res.body.output.env_uid;\n                api.get(\"/enterprise/v1/projects\")\n                    .set('org_uid', org_uid)\n                    .set('authtoken', authToken)\n                    .expect(httpStatus.OK)\n                    .end(function(error, res) {\n                        project_uid = _.first(res.body.output.projects).uid\n                        done();\n                    });\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "70672a07-3296-4d87-aebf-1542284b6e54",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Payment Payment.getStatisticOrg \"after all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6943594e-e029-464f-8a13-ea6994c616c0",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get list of bills.",
                    "fullTitle": "Enterprise Payment Payment.getStatisticOrg Should get list of bills.",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (Array.isArray(res.body.output.objects)) {\n                isValid = res.body.output.objects.length == 0;\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "12a7f20c-0875-4dec-89b2-f234d7f1881b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get count of triggers of current user.",
                    "fullTitle": "Enterprise Payment Payment.getStatisticOrg Should get count of triggers of current user.",
                    "timedOut": false,
                    "duration": 23,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nsaveUserTriggers({\n    user_uid: org_account_uid,\n    project_uid: project_uid,\n    org_uid: org_uid\n}, function(error, triggers) {\n    var filterURL = apiURL + \"?get=triggercount\";\n    api.get(filterURL)\n        .set('org_uid', org_uid)\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(error, res) {\n            if (error) {\n                done(error);\n            } else {\n                (parseInt(res.body.output.objects) == 10).should.equal(true);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "db86228a-0981-4b74-a8d3-3959a914c7e3",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get count of triggers of current user in specific range.",
                    "fullTitle": "Enterprise Payment Payment.getStatisticOrg Should get count of triggers of current user in specific range.",
                    "timedOut": false,
                    "duration": 24,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nsaveUserTriggers({\n    user_uid: org_account_uid,\n    project_uid: project_uid,\n    org_uid: org_uid\n}, function(error, triggers) {\n    var frange = triggers[2].toJSON().created_at.toISOString();\n    var srange = triggers[8].toJSON().created_at.toISOString();\n    var filterURL = apiURL + \"?get=triggercount&frange=\" + frange + \"&srange=\" + srange;\n    api.get(filterURL)\n        .set('org_uid', org_uid)\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(error, res) {\n            if (error) {\n                done(error);\n            } else {\n                (parseInt(res.body.output.objects) == 6).should.equal(true);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0cd37799-bfe3-4e12-a36b-a261ee78b702",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get count of flows of current user.",
                    "fullTitle": "Enterprise Payment Payment.getStatisticOrg Should get count of flows of current user.",
                    "timedOut": false,
                    "duration": 362,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nsaveUserFlows(done, function(error, flows) {\n    var filterURL = apiURL + \"?get=flowcount\";\n    api.get(filterURL)\n        .set('org_uid', org_uid)\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(error, res) {\n            if (error) {\n                done(error);\n            } else {\n                (parseInt(res.body.output.objects) >= 10).should.equal(true);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d76d8d0c-2641-431a-8672-388a7ec04038",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get count of flows of current user in specific range.",
                    "fullTitle": "Enterprise Payment Payment.getStatisticOrg Should get count of flows of current user in specific range.",
                    "timedOut": false,
                    "duration": 367,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nsaveUserFlows(done, function(error, flows) {\n    var frange = new Date((new Date(flows[1].created_at)) - 300000).toISOString();\n    var srange = (new Date(flows[8].created_at)).toISOString();\n    var filterURL = apiURL + \"?get=flowcount&frange=\" + frange + \"&srange=\" + srange;\n    api.get(filterURL)\n        .set('org_uid', org_uid)\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(error, res) {\n            if (error) {\n                done(error);\n            } else {\n                (parseInt(res.body.output.objects) >= 10).should.equal(true);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "41edcb2f-9bbc-4838-a1b8-98dab53cbbb5",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get count of present flows of current user.",
                    "fullTitle": "Enterprise Payment Payment.getStatisticOrg Should get count of present flows of current user.",
                    "timedOut": false,
                    "duration": 366,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nsaveFlowsPresent(function(error, flows) {\n    var filterURL = apiURL + \"?get=flowspresent\";\n    api.get(filterURL)\n        .set('org_uid', org_uid)\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(error, res) {\n            if (error) {\n                done(error);\n            } else {\n                (parseInt(res.body.output.objects) >= 9).should.equal(true);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7fca23ee-50e2-46da-a2fb-aa36f3cde8e1",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get count of present flows of current user in specific range.",
                    "fullTitle": "Enterprise Payment Payment.getStatisticOrg Should get count of present flows of current user in specific range.",
                    "timedOut": false,
                    "duration": 360,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nsaveFlowsPresent(function(error, flows) {\n    var frange = new Date((new Date(flows[1].created_at)) - 300000).toISOString();\n    var srange = flows[8].created_at;\n    var filterURL = apiURL + \"?get=flowspresent&frange=\" + frange + \"&srange=\" + srange;\n    api.get(filterURL)\n        .set('org_uid', org_uid)\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(error, res) {\n            if (error) {\n                done(error);\n            } else {\n                (parseInt(res.body.output.objects) >= 9).should.equal(true);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "eaff7219-0b6c-438c-9b8e-34504f6a7ccd",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get count zero credits.",
                    "fullTitle": "Enterprise Payment Payment.getStatisticOrg Should get count zero credits.",
                    "timedOut": false,
                    "duration": 356,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nsaveFlowsPresent(function(error, flows) {\n    var filterURL = apiURL + \"?get=credits\";\n    api.get(filterURL)\n        .set('org_uid', org_uid)\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(error, res) {\n            if (error) {\n                done(error);\n            } else {\n                (typeof(res.body.output.objects) == \"number\").should.equal(true);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fd9635d3-a989-4dce-bb13-f0aca0a1b485",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get count of flows and triggers of current user.",
                    "fullTitle": "Enterprise Payment Payment.getStatisticOrg Should get count of flows and triggers of current user.",
                    "timedOut": false,
                    "duration": 361,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nsaveFlowsPresent(function(error, flows) {\n    var filterURL = apiURL + \"?get=flow_trigger\";\n    api.get(filterURL)\n        .set('org_uid', org_uid)\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(error, res) {\n            if (error) {\n                done(error);\n            } else {\n                (typeof(res.body.output.trigger) == \"number\" &&\n                    typeof(res.body.output.flows) == \"number\").should.equal(true);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cf9bc251-cde2-431f-bd69-cfa87e2f9180",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get userstream count.",
                    "fullTitle": "Enterprise Payment Payment.getStatisticOrg Should get userstream count.",
                    "timedOut": false,
                    "duration": 95,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nsaveBillEntries({\n    email: email,\n    authtoken: authToken,\n    user_uid: user_uid\n}, function(options, callback) {\n    saveUserStreamEntries({\n        email: email,\n        authtoken: authToken,\n        user_uid: user_uid\n    }, function(error, flows) {\n        var filterURL = apiURL + \"?get=librarydownload\";\n        api.get(filterURL)\n            .set('org_uid', org_uid)\n            .set('authtoken', authToken)\n            .expect(httpStatus.OK)\n            .end(function(error, res) {\n                if (error) {\n                    done(error);\n                } else {\n                    (typeof(res.body.output.objects) != \"undefined\").should.equal(true);\n                    done();\n                }\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d06dc8f0-4acc-4dc7-bebf-987a09c6734e",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get library download count.",
                    "fullTitle": "Enterprise Payment Payment.getStatisticOrg Should get library download count.",
                    "timedOut": false,
                    "duration": 95,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nsaveBillEntries({\n    email: email,\n    authtoken: authToken,\n}, function(options, callback) {\n    saveUserStreamEntries({\n        email: email,\n        authtoken: authToken,\n    }, function(error, flows) {\n        var filterURL = apiURL + \"?get=librarydownload\";\n        api.get(filterURL)\n            .set('org_uid', org_uid)\n            .set('authtoken', authToken)\n            .expect(httpStatus.OK)\n            .end(function(error, res) {\n                if (error) {\n                    done(error);\n                } else {\n                    (typeof(res.body.output.objects) != \"undefined\").should.equal(true);\n                    done();\n                }\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "06102967-2200-472a-98a8-ca210b60e975",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get flow shared count.",
                    "fullTitle": "Enterprise Payment Payment.getStatisticOrg Should get flow shared count.",
                    "timedOut": false,
                    "duration": 92,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nsaveBillEntries({\n    email: email,\n    authtoken: authToken,\n}, function(options, callback) {\n    saveUserStreamEntries({\n        email: email,\n        authtoken: authToken,\n    }, function(error, flows) {\n        var filterURL = apiURL + \"?get=flowshared\";\n        api.get(filterURL)\n            .set('org_uid', org_uid)\n            .set('authtoken', authToken)\n            .expect(httpStatus.OK)\n            .end(function(error, res) {\n                if (error) {\n                    done(error);\n                } else {\n                    (typeof(res.body.output.objects) != \"undefined\").should.equal(true);\n                    done();\n                }\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "acfe2733-eecd-4a0e-a966-d1506c9c8c22",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get flow total run count.",
                    "fullTitle": "Enterprise Payment Payment.getStatisticOrg Should get flow total run count.",
                    "timedOut": false,
                    "duration": 94,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nsaveBillEntries({\n    email: email,\n    authtoken: authToken,\n}, function(options, callback) {\n    saveUserStreamEntries({\n        email: email,\n        authtoken: authToken,\n    }, function(error, flows) {\n        var filterURL = apiURL + \"?get=totalrun\";\n        api.get(filterURL)\n            .set('org_uid', org_uid)\n            .set('authtoken', authToken)\n            .expect(httpStatus.OK)\n            .end(function(error, res) {\n                if (error) {\n                    done(error);\n                } else {\n                    (typeof(res.body.output.objects) != \"undefined\").should.equal(true);\n                    done();\n                }\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ce7f8ccc-7499-48f3-a0c0-67f2b1dfcdb4",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Payment Payment.getStatisticOrg Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c12a21c8-21b2-4ce9-8bad-a95eea000bdc",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "12a7f20c-0875-4dec-89b2-f234d7f1881b",
                  "db86228a-0981-4b74-a8d3-3959a914c7e3",
                  "0cd37799-bfe3-4e12-a36b-a261ee78b702",
                  "d76d8d0c-2641-431a-8672-388a7ec04038",
                  "41edcb2f-9bbc-4838-a1b8-98dab53cbbb5",
                  "7fca23ee-50e2-46da-a2fb-aa36f3cde8e1",
                  "eaff7219-0b6c-438c-9b8e-34504f6a7ccd",
                  "fd9635d3-a989-4dce-bb13-f0aca0a1b485",
                  "cf9bc251-cde2-431f-bd69-cfa87e2f9180",
                  "d06dc8f0-4acc-4dc7-bebf-987a09c6734e",
                  "06102967-2200-472a-98a8-ca210b60e975",
                  "acfe2733-eecd-4a0e-a966-d1506c9c8c22",
                  "ce7f8ccc-7499-48f3-a0c0-67f2b1dfcdb4",
                  "c12a21c8-21b2-4ce9-8bad-a95eea000bdc"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 2613,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "c8cddb8c-4c60-4117-aae2-6eba31ec3190",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\payment\\getSubscriptionDetailFromBraintree.enterprise.js",
        "file": "\\controllers\\test\\payment\\getSubscriptionDetailFromBraintree.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "be5b6ef7-31c8-4eab-939d-f085ddaddec8",
            "title": "User",
            "fullFile": "C:\\work\\api\\controllers\\test\\payment\\getSubscriptionDetailFromBraintree.enterprise.js",
            "file": "\\controllers\\test\\payment\\getSubscriptionDetailFromBraintree.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "7ba18062-ce46-48c7-970d-7e2b4e2109f8",
                "title": "Payment.getSubscriptionDetailFromBraintree",
                "fullFile": "C:\\work\\api\\controllers\\test\\payment\\getSubscriptionDetailFromBraintree.enterprise.js",
                "file": "\\controllers\\test\\payment\\getSubscriptionDetailFromBraintree.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User Payment.getSubscriptionDetailFromBraintree \"before each\" hook",
                    "timedOut": false,
                    "duration": 85,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n    _models.Mail.remove({ $or: [{ to: new RegExp('^test.user+', \"i\") }, { to: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n        commonMock.setSignUpMocks(httpmock, \"enterprise\");\n        api.post(\"/enterprise/v1/signup\")\n            .send(registrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    authToken = res.body.output.authtoken;\n                    token = res.body.output.activation_token;\n                    _id = res.body.output._id;\n                    uid = res.body.output.uid;\n                    done();\n                }\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0a37f7d5-d870-42da-94a5-b6c174bc0058",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User Payment.getSubscriptionDetailFromBraintree \"after each\" hook",
                    "timedOut": false,
                    "duration": 1,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "49f4a439-daae-43ec-91ec-d8e0dafb8e4d",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should suspend user account.",
                    "fullTitle": "Enterprise User Payment.getSubscriptionDetailFromBraintree Should suspend user account.",
                    "timedOut": false,
                    "duration": 21,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.findOneAndUpdate({ uid: uid }, {\n    braintree_subscriptionId: \"FAKE_SUBSCRIPTION_ID\",\n    braintree_customerId: \"FAKE_ID\",\n    merchantid: \"FAKE_MERCHANT_ID\"\n}, function(error, user) {\n    commonMock.braintreeFindCard(httpmock, \"enterprise\");\n    commonMock.braintreeFindSubscription(httpmock, \"enterprise\");\n    api.get(apiURL)\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                (res.body.output.cardDetails.cardholderName == res.body.output.billingDetails.firstName && res.body.output.billingDetails.firstName == \"Amber More\").should.equal(true);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a93a3d9b-8268-408d-9355-922cae61c8d4",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give card detail not fount error.",
                    "fullTitle": "Enterprise User Payment.getSubscriptionDetailFromBraintree Should give card detail not fount error.",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.CARD_DETAIL_CC_NOT_FOUND);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2ac03693-b879-4190-819c-7585990309d0",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise User Payment.getSubscriptionDetailFromBraintree Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.braintreeFindCard(httpmock, \"enterprise\");\ncommonMock.braintreeFindSubscription(httpmock, \"enterprise\");\napi.get(apiURL)\n    .send({})\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e781533f-a4b5-4fb2-98fe-f07e7b04615b",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "a93a3d9b-8268-408d-9355-922cae61c8d4",
                  "2ac03693-b879-4190-819c-7585990309d0",
                  "e781533f-a4b5-4fb2-98fe-f07e7b04615b"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 39,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "be532bc9-cb2b-473c-88ed-3477334e7b54",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\payment\\getSubscriptionDetailFromBraintreeOrg.enterprise.js",
        "file": "\\controllers\\test\\payment\\getSubscriptionDetailFromBraintreeOrg.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "8e7d5695-70fd-405b-b890-a9247eceb29e",
            "title": "User",
            "fullFile": "C:\\work\\api\\controllers\\test\\payment\\getSubscriptionDetailFromBraintreeOrg.enterprise.js",
            "file": "\\controllers\\test\\payment\\getSubscriptionDetailFromBraintreeOrg.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "4e6170e0-11e4-41c9-8b06-b6bec82f13e7",
                "title": "Payment.getSubscriptionDetailFromBraintreeOrg",
                "fullFile": "C:\\work\\api\\controllers\\test\\payment\\getSubscriptionDetailFromBraintreeOrg.enterprise.js",
                "file": "\\controllers\\test\\payment\\getSubscriptionDetailFromBraintreeOrg.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User Payment.getSubscriptionDetailFromBraintreeOrg \"before each\" hook",
                    "timedOut": false,
                    "duration": 63,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "35322640-92fc-4b43-b704-700c4a731959",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User Payment.getSubscriptionDetailFromBraintreeOrg \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "51c47645-4fd5-45a3-a1ca-380f3f62661f",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should suspend user account.",
                    "fullTitle": "Enterprise User Payment.getSubscriptionDetailFromBraintreeOrg Should suspend user account.",
                    "timedOut": false,
                    "duration": 26,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.findOneAndUpdate({ uid: org_account_uid }, {\n    braintree_subscriptionId: \"FAKE_SUBSCRIPTION_ID\",\n    braintree_customerId: \"FAKE_ID\",\n    merchantid: \"FAKE_MERCHANT_ID\"\n}, function(error, user) {\n    commonMock.braintreeFindCard(httpmock, \"enterprise\");\n    commonMock.braintreeFindSubscription(httpmock, \"enterprise\");\n    api.get(apiURL)\n        .set('org_uid', org_uid)\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                (res.body.output.cardDetails.cardholderName == res.body.output.billingDetails.firstName && res.body.output.billingDetails.firstName == \"Amber More\").should.equal(true);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6622bc35-2ec8-4949-b2ae-e9d7ad8319a4",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give card detail not fount error.",
                    "fullTitle": "Enterprise User Payment.getSubscriptionDetailFromBraintreeOrg Should give card detail not fount error.",
                    "timedOut": false,
                    "duration": 4617,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.CARD_DETAIL_CC_NOT_FOUND);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9f6f2cb9-c8c9-42a3-be48-4206997f6557",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise User Payment.getSubscriptionDetailFromBraintreeOrg Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.braintreeFindCard(httpmock, \"enterprise\");\ncommonMock.braintreeFindSubscription(httpmock, \"enterprise\");\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .send({})\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "eecc4527-3858-44c5-8019-2ccab7cfbdea",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "6622bc35-2ec8-4949-b2ae-e9d7ad8319a4",
                  "9f6f2cb9-c8c9-42a3-be48-4206997f6557",
                  "eecc4527-3858-44c5-8019-2ccab7cfbdea"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 4647,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "4586260e-4d2f-4b6e-8f53-a346ca6e2ca1",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\payment\\pastDueInBraintreeSubscription.enterprise.js",
        "file": "\\controllers\\test\\payment\\pastDueInBraintreeSubscription.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "7c4bfc27-9161-4201-b370-80499532f5f5",
            "title": "Payment",
            "fullFile": "C:\\work\\api\\controllers\\test\\payment\\pastDueInBraintreeSubscription.enterprise.js",
            "file": "\\controllers\\test\\payment\\pastDueInBraintreeSubscription.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "1e2527fb-2c2c-4bac-bfb1-6da2aabcbc6d",
                "title": "Payment.pastDueInBraintreeSubscription",
                "fullFile": "C:\\work\\api\\controllers\\test\\payment\\pastDueInBraintreeSubscription.enterprise.js",
                "file": "\\controllers\\test\\payment\\pastDueInBraintreeSubscription.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Payment Payment.pastDueInBraintreeSubscription \"before each\" hook",
                    "timedOut": false,
                    "duration": 146,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n\ntestCollection.organizationRemoveRecords({}, function() {\n    commonMock.setSignUpMocks(httpmock, \"enterprise\");\n    api.post(\"/enterprise/v1/signup\")\n        .send(registrationBody)\n        .expect(httpStatus.CREATED)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                authToken = res.body.output.authtoken;\n                _id = res.body.output._id;\n                _braintreeCustId = res.body.output.braintree_customerId;\n                _userUid = res.body.output.uid;\n                subscribedPayload.options[\"braintree_customerId\"] = _braintreeCustId;\n                subscriptionPastdue.options[\"braintree_customerId\"] = _braintreeCustId;\n                commonMock.braintreeSubscription(httpmock, \"enterprise\");\n                commonMock.braintreeUpdatePaymentMethod(httpmock, \"enterprise\");\n                api.post(\"/enterprise/v1/user/account/creditcards\")\n                    .send(saveCardBody)\n                    .set('authtoken', authToken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            commonMock.braintreeSubscription(httpmock, \"enterprise\");\n                            commonMock.intercomUserUpdate(httpmock, \"enterprise\");\n                            api.post(\"/v1/webhook/subscription/start\")\n                                .send(subscribedPayload)\n                                .expect(httpStatus.OK)\n                                .end(function(err, res) {\n                                    if (err) {\n                                        done(err);\n                                    } else {\n                                        done();\n                                    }\n                                });\n                        }\n                    });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "214d2712-2d65-4a26-bc03-8ccb470daa68",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Payment Payment.pastDueInBraintreeSubscription \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9bf8e19b-5a6d-4837-910e-abe72ae1e068",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should subscription pastdue.",
                    "fullTitle": "Enterprise Payment Payment.pastDueInBraintreeSubscription Should subscription pastdue.",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.braintreeSubscription(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(subscriptionPastdue)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.message.should.equal(messageList.BRAINTREE_WEBHOOK_NOTED);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "66bb24f7-291e-45d6-832a-ef4a88d10f5d",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should subscription pastdue.",
                    "fullTitle": "Enterprise Payment Payment.pastDueInBraintreeSubscription Should subscription pastdue.",
                    "timedOut": false,
                    "duration": 68,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRecordsEntry({}, function(data) {\n    commonMock.braintreeSubscription(httpmock, \"enterprise\");\n    var temp_subscriptionPastdue = getImmutable(subscriptionPastdue);\n    temp_subscriptionPastdue.options.braintree_customerId = data.organization_account.braintree_customerId;\n    api.post(apiURL)\n        .send(temp_subscriptionPastdue)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                res.body.output.message.should.equal(messageList.BRAINTREE_WEBHOOK_NOTED);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "29c753ad-2983-4014-8621-83c9a8a6ab9b",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "66bb24f7-291e-45d6-832a-ef4a88d10f5d",
                  "29c753ad-2983-4014-8621-83c9a8a6ab9b"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 81,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "bd8ab51c-821a-4d8c-af43-1b6fd3b7380b",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\payment\\saveCardInBrainTree.enterprise.js",
        "file": "\\controllers\\test\\payment\\saveCardInBrainTree.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "52fec247-9752-4dc3-9a89-4905a12c8c39",
            "title": "Payment",
            "fullFile": "C:\\work\\api\\controllers\\test\\payment\\saveCardInBrainTree.enterprise.js",
            "file": "\\controllers\\test\\payment\\saveCardInBrainTree.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "0356e270-e775-4a93-8153-020f34a02272",
                "title": "Payment.SaveCardInBrainTree",
                "fullFile": "C:\\work\\api\\controllers\\test\\payment\\saveCardInBrainTree.enterprise.js",
                "file": "\\controllers\\test\\payment\\saveCardInBrainTree.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Payment Payment.SaveCardInBrainTree \"before each\" hook",
                    "timedOut": false,
                    "duration": 108,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    signupUser({}, done, function(res) {\n        authToken = res.body.output.authtoken;\n        _id = res.body.output._id;\n        uid = res.body.output.uid;\n        plan_uid = res.body.output.plan[0].uid;\n        savePlanEntries({\n            count: 5\n        }, function(error, planEntries) {\n            _planEntries = planEntries;\n            done();\n        });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a5f22206-81fd-4d9e-b19e-9179480b34ab",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Payment Payment.SaveCardInBrainTree \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e99545ea-361f-4fa7-9335-084deaecc190",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should save credit card.",
                    "fullTitle": "Enterprise Payment Payment.SaveCardInBrainTree Should save credit card.",
                    "timedOut": false,
                    "duration": 38,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.braintreeUpdatePaymentMethod(httpmock, \"enterprise\");\ncommonMock.braintreeSubscription(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(saveCardBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var flag = (((res.body.output.plan || [{\n                braintree_plan: \"\"\n            }])[0].braintree_plan || \"\") == saveCardBody.data.selectedPlan.braintree_plan);\n            (flag && res.body.output.metadata.test_flag).should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "aaa0aab3-15e2-4e38-9190-6cd8563f4f05",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should user save credit card.",
                    "fullTitle": "Enterprise Payment Payment.SaveCardInBrainTree Should user save credit card.",
                    "timedOut": false,
                    "duration": 83,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.braintreeUpdatePaymentMethod(httpmock, \"enterprise\");\ncommonMock.braintreeSubscription(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(saveCardBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var tempSaveCardBody = _.cloneDeep(saveCardBody);\n            tempSaveCardBody.data.use_existing_card = true;\n            commonMock.braintreeCancelSubscription(httpmock, \"enterprise\");\n            commonMock.braintreeSubscription(httpmock, \"enterprise\");\n            api.post(apiURL)\n                .send(tempSaveCardBody)\n                .set('authtoken', authToken)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        var flag = (((res.body.output.plan || [{\n                            braintree_plan: \"\"\n                        }])[0].braintree_plan || \"\") == saveCardBody.data.selectedPlan.braintree_plan);\n                        (flag && res.body.output.metadata.test_flag).should.equal(true);\n                        done();\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "12021615-16e8-4e93-b75e-1187e23b664e",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Apply promocode while saving card in braintree.",
                    "fullTitle": "Enterprise Payment Payment.SaveCardInBrainTree Apply promocode while saving card in braintree.",
                    "timedOut": false,
                    "duration": 63,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napplyPromoCode({}, done, function(res) {\n    if (((res.body.output.plan[0] || { \"plan_price\": \"\" }).plan_price || \"\") == \"\") {\n        true.should.equal(false);\n        done();\n    } else {\n        api.get(\"/enterprise/v1/user\")\n            .set('authtoken', authToken)\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    var user = res.body.output;\n                    var isValid = typeof(user._id) == \"undefined\" &&\n                        typeof(user.__v) == \"undefined\" &&\n                        user.user_plan.reimburse.credits == 100005 &&\n                        user.user_plan.reimburse.period == 30 &&\n                        user.user_plan.trigger.count == 22;\n                    isValid.should.equal(true);\n                    done();\n                }\n            });\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e9aadd87-8456-4185-b501-ed5d6358cea5",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give invalid parameters error.",
                    "fullTitle": "Enterprise Payment Payment.SaveCardInBrainTree Should give invalid parameters error.",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.braintreeUpdatePaymentMethod(httpmock, \"enterprise\");\ncommonMock.braintreeSubscription(httpmock, \"enterprise\");\nvar tempSaveCardBody = getImmutable(saveCardBody);\ndelete tempSaveCardBody.data.cardholderName;\ndelete tempSaveCardBody.data.selectedPlan;\ndelete tempSaveCardBody.data.nonce;\ndelete tempSaveCardBody.data.company;\ndelete tempSaveCardBody.data.billing_address1;\napi.post(apiURL)\n    .send(tempSaveCardBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.error.name.message == messageList.SAVE_CARD_CUSTOMER_NAME_RQUIRED &&\n                res.body.error[\"selectedPlan.braintree_plan\"].message == messageList.SAVE_CARD_BRAINTREE_PLAN_REQUIRED &&\n                //res.body.error.nonce.message == messageList.SAVE_CARD_NONCE_RQUIRED &&\n                res.body.error.company.message == messageList.SAVE_CARD_COMPANY_RQUIRED &&\n                res.body.error.billing_address1.message == messageList.SAVE_CARD_STREET_ADDRESS_RQUIRED;\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ac3c059e-7a52-4411-869f-f980063f1b86",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give invalid parameters error for empty parameters.",
                    "fullTitle": "Enterprise Payment Payment.SaveCardInBrainTree Should give invalid parameters error for empty parameters.",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.braintreeUpdatePaymentMethod(httpmock, \"enterprise\");\ncommonMock.braintreeSubscription(httpmock, \"enterprise\");\nvar tempSaveCardBody = getImmutable(saveCardBody);\ntempSaveCardBody.data.cardholderName = \" \";\ntempSaveCardBody.data.selectedPlan.braintree_plan = \" \";\ntempSaveCardBody.data.nonce = \" \";\ntempSaveCardBody.data.company = \" \";\ntempSaveCardBody.data.billing_address1 = \" \";\napi.post(apiURL)\n    .send(tempSaveCardBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.error.name.message == messageList.SAVE_CARD_CUSTOMER_NAME_RQUIRED &&\n                res.body.error[\"selectedPlan.braintree_plan\"].message == messageList.SAVE_CARD_BRAINTREE_PLAN_REQUIRED &&\n                //res.body.error.nonce.message == messageList.SAVE_CARD_NONCE_RQUIRED &&\n                res.body.error.company.message == messageList.SAVE_CARD_COMPANY_RQUIRED &&\n                res.body.error.billing_address1.message == messageList.SAVE_CARD_STREET_ADDRESS_RQUIRED;\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c673981d-1cb4-4867-a79e-be4b4117e7b8",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give invalid parameters error for empty name parameter.",
                    "fullTitle": "Enterprise Payment Payment.SaveCardInBrainTree Should give invalid parameters error for empty name parameter.",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.braintreeUpdatePaymentMethod(httpmock, \"enterprise\");\ncommonMock.braintreeSubscription(httpmock, \"enterprise\");\nvar tempSaveCardBody = getImmutable(saveCardBody);\ndelete tempSaveCardBody.data.cardholderName;\ntempSaveCardBody.data.name = \" \";\ntempSaveCardBody.data.selectedPlan.braintree_plan = \" \";\ntempSaveCardBody.data.nonce = \" \";\ntempSaveCardBody.data.company = \" \";\ntempSaveCardBody.data.billing_address1 = \" \";\napi.post(apiURL)\n    .send(tempSaveCardBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.error.name.message == messageList.SAVE_CARD_CUSTOMER_NAME_RQUIRED &&\n                res.body.error[\"selectedPlan.braintree_plan\"].message == messageList.SAVE_CARD_BRAINTREE_PLAN_REQUIRED &&\n                //res.body.error.nonce.message == messageList.SAVE_CARD_NONCE_RQUIRED &&\n                res.body.error.company.message == messageList.SAVE_CARD_COMPANY_RQUIRED &&\n                res.body.error.billing_address1.message == messageList.SAVE_CARD_STREET_ADDRESS_RQUIRED;\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "11c07a04-72f4-4a19-82e6-26d8000e6158",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error if wrong promocode is provide.",
                    "fullTitle": "Enterprise Payment Payment.SaveCardInBrainTree Should give error if wrong promocode is provide.",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napplyPromoCode({\n    promo_code: \"FAKE_PROMOCODE\",\n    status: httpStatus.BAD_REQUEST\n}, done, function(res) {\n    res.body.error.message.should.equal(messageList.PROMOCODE_INVALID);\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "db165f38-bd29-40b0-b6c4-4ee25d4546f2",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Apply another promocode while saving card in braintree.",
                    "fullTitle": "Enterprise Payment Payment.SaveCardInBrainTree Apply another promocode while saving card in braintree.",
                    "timedOut": false,
                    "duration": 93,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napplyPromoCodeToAlreadyApplyPromocode({}, done, function(user) {\n    var isValid = typeof(user._id) == \"undefined\" &&\n        typeof(user.__v) == \"undefined\" &&\n        user.user_plan.reimburse.credits == 100005 &&\n        user.user_plan.reimburse.period == 30 &&\n        user.user_plan.trigger.count == 22;\n    isValid.should.equal(true);\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "77dada2f-309b-407e-b524-d6be488caeb6",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not allowed to apply promocode if second time subscribe plan is not allowed.",
                    "fullTitle": "Enterprise Payment Payment.SaveCardInBrainTree Should not allowed to apply promocode if second time subscribe plan is not allowed.",
                    "timedOut": false,
                    "duration": 48,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.Plan.findOne({\n    uid: plan_uid\n}, function(error, plan) {\n    addPromcode({\n        count: 2,\n        promo_code: \"PROMO_CODE\",\n        domain: \"raweng.com\",\n        redemption_count: 1,\n        redemption_start: moment(new Date()).subtract(1, 'days'),\n        redemption_end: moment(new Date()).add(1, 'days'),\n        allowed_plans: [plan],\n        default_plan: null,\n        addon_credits: 5,\n        addon_flows: 2,\n        addon_triggers: 2,\n        addon_trial_days: 10,\n        braintree_discount_id: \"PROMO_CODE\",\n        promo_features_expiration: moment(new Date()).add(10, 'days')\n    }, function(error, promoCodes) {\n        addPromcodeToUser({\n            promo_code: promoCodes[0].promo_code\n        }, function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                var userPromoCode = res.body.output;\n                if (userPromoCode.user_uid == uid &&\n                    userPromoCode.uid != \"\") {\n                    commonMock.brainTreeClientToken(httpmock, \"enterprise\");\n                    api.get(\"/enterprise/v1/user\")\n                        .set('authtoken', authToken)\n                        .expect(httpStatus.OK)\n                        .end(function(err, res) {\n                            if (err) {\n                                done(err);\n                            } else {\n                                var isValid = res.body.output.uid == uid &&\n                                    typeof(res.body.output._id) == \"undefined\" &&\n                                    typeof(res.body.output.__v) == \"undefined\" &&\n                                    res.body.output.subscription.days == 40;\n                                var firstPrommoCode = res.body.output.user_promocode.promo_code;\n                                if (isValid) {\n                                    commonMock.braintreeUpdatePaymentMethod(httpmock, \"enterprise\");\n                                    commonMock.braintreeSubscription(httpmock, \"enterprise\");\n                                    var tempSaveCardBody = getImmutable(saveCardBody);\n                                    tempSaveCardBody.data.promo_code = promoCodes[1].promo_code;\n                                    api.post(apiURL)\n                                        .send(tempSaveCardBody)\n                                        .set('authtoken', authToken)\n                                        .expect(httpStatus.BAD_REQUEST)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                res.body.error.message.should.equal(messageList.PROMOCODE_NOT_ALLOWED_PLAN);\n                                                done();\n                                            }\n                                        });\n                                } else {\n                                    true.should.equal(false);\n                                    done();\n                                }\n                            }\n                        });\n                } else {\n                    true.should.equal(false);\n                    done();\n                }\n            }\n        });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a279abf4-6d73-4680-ba42-c3207bae19de",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not allowed to apply promocode if second time subscribe plan is not allowed and revoked_promo is set to true.",
                    "fullTitle": "Enterprise Payment Payment.SaveCardInBrainTree Should not allowed to apply promocode if second time subscribe plan is not allowed and revoked_promo is set to true.",
                    "timedOut": false,
                    "duration": 52,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.Plan.findOne({\n    uid: plan_uid\n}, function(error, plan) {\n    addPromcode({\n        count: 2,\n        promo_code: \"PROMO_CODE\",\n        domain: \"raweng.com\",\n        redemption_count: 1,\n        redemption_start: moment(new Date()).subtract(1, 'days'),\n        redemption_end: moment(new Date()).add(1, 'days'),\n        allowed_plans: [plan],\n        default_plan: null,\n        addon_credits: 5,\n        addon_flows: 2,\n        addon_triggers: 2,\n        addon_trial_days: 10,\n        braintree_discount_id: \"PROMO_CODE\",\n        promo_features_expiration: moment(new Date()).add(10, 'days')\n    }, function(error, promoCodes) {\n        addPromcodeToUser({\n            promo_code: promoCodes[0].promo_code\n        }, function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                var userPromoCode = res.body.output;\n                if (userPromoCode.user_uid == uid &&\n                    userPromoCode.uid != \"\") {\n                    commonMock.brainTreeClientToken(httpmock, \"enterprise\");\n                    api.get(\"/enterprise/v1/user\")\n                        .set('authtoken', authToken)\n                        .expect(httpStatus.OK)\n                        .end(function(err, res) {\n                            if (err) {\n                                done(err);\n                            } else {\n                                var isValid = res.body.output.uid == uid &&\n                                    typeof(res.body.output._id) == \"undefined\" &&\n                                    typeof(res.body.output.__v) == \"undefined\" &&\n                                    res.body.output.subscription.days == 40;\n                                var firstPrommoCode = res.body.output.user_promocode.promo_code;\n                                if (isValid) {\n                                    commonMock.braintreeUpdatePaymentMethod(httpmock, \"enterprise\");\n                                    commonMock.braintreeSubscription(httpmock, \"enterprise\");\n                                    var tempSaveCardBody = getImmutable(saveCardBody);\n                                    tempSaveCardBody.data.promo_code = promoCodes[0].promo_code;\n                                    tempSaveCardBody.data.revoked_promo = true;\n                                    api.post(apiURL)\n                                        .send(tempSaveCardBody)\n                                        .set('authtoken', authToken)\n                                        .expect(httpStatus.BAD_REQUEST)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                res.body.error.message.should.equal(messageList.PROMOCODE_NOT_ALLOWED_PLAN);\n                                                done();\n                                            }\n                                        });\n                                } else {\n                                    true.should.equal(false);\n                                    done();\n                                }\n                            }\n                        });\n                } else {\n                    true.should.equal(false);\n                    done();\n                }\n            }\n        });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "791ee1ed-cb4a-4364-8c92-77eea3d37e5f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not show empty plan_price on save credit card.",
                    "fullTitle": "Enterprise Payment Payment.SaveCardInBrainTree Should not show empty plan_price on save credit card.",
                    "timedOut": false,
                    "duration": 44,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.braintreeUpdatePaymentMethod(httpmock, \"enterprise\");\ncommonMock.braintreeSubscription(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(saveCardBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            ((res.body.output.plan[0] || { \"plan_price\": \"\" }).plan_price || \"\")\n            .should.not.equal(\"\");\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0134df6a-45fd-497e-9197-22158bb9b927",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should save credit card and cancel earlier subscription.",
                    "fullTitle": "Enterprise Payment Payment.SaveCardInBrainTree Should save credit card and cancel earlier subscription.",
                    "timedOut": false,
                    "duration": 85,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.braintreeUpdatePaymentMethod(httpmock, \"enterprise\");\ncommonMock.braintreeSubscription(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(saveCardBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            commonMock.braintreeCancelSubscription(httpmock, \"enterprise\");\n            commonMock.braintreeUpdatePaymentMethod(httpmock, \"enterprise\");\n            commonMock.braintreeSubscription(httpmock, \"enterprise\");\n            api.post(apiURL)\n                .send(saveCardBody)\n                .set('authtoken', authToken)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        ((res.body.output.plan || [{\n                            braintree_plan: \"\"\n                        }])[0].braintree_plan || \"\").should.equal(saveCardBody.data.selectedPlan.braintree_plan);\n                        done();\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "86490c61-ebf3-47f2-9482-3bd77c4ab5e4",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should save credit card and ignore already subscription cancellation error.",
                    "fullTitle": "Enterprise Payment Payment.SaveCardInBrainTree Should save credit card and ignore already subscription cancellation error.",
                    "timedOut": false,
                    "duration": 170,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.braintreeUpdatePaymentMethod(httpmock, \"enterprise\");\ncommonMock.braintreeSubscription(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(saveCardBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            commonMock.braintreeAlreadyCancelSubscription(httpmock, \"enterprise\");\n            commonMock.braintreeUpdatePaymentMethod(httpmock, \"enterprise\");\n            commonMock.braintreeSubscription(httpmock, \"enterprise\");\n            api.post(apiURL)\n                .send(saveCardBody)\n                .set('authtoken', authToken)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        ((res.body.output.plan || [{\n                            braintree_plan: \"\"\n                        }])[0].braintree_plan || \"\").should.equal(saveCardBody.data.selectedPlan.braintree_plan);\n                        done();\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ce4fba1c-313b-4e11-a9ad-f01ea1fab3ac",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Payment Payment.SaveCardInBrainTree Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.braintreeCancelSubscription(httpmock, \"enterprise\");\ncommonMock.braintreeSubscription(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(saveCardBody)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "deebbc9d-1bb6-4580-b103-095aaf2d70a1",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "aaa0aab3-15e2-4e38-9190-6cd8563f4f05",
                  "12021615-16e8-4e93-b75e-1187e23b664e",
                  "e9aadd87-8456-4185-b501-ed5d6358cea5",
                  "ac3c059e-7a52-4411-869f-f980063f1b86",
                  "c673981d-1cb4-4867-a79e-be4b4117e7b8",
                  "11c07a04-72f4-4a19-82e6-26d8000e6158",
                  "db165f38-bd29-40b0-b6c4-4ee25d4546f2",
                  "77dada2f-309b-407e-b524-d6be488caeb6",
                  "a279abf4-6d73-4680-ba42-c3207bae19de",
                  "791ee1ed-cb4a-4364-8c92-77eea3d37e5f",
                  "0134df6a-45fd-497e-9197-22158bb9b927",
                  "86490c61-ebf3-47f2-9482-3bd77c4ab5e4",
                  "ce4fba1c-313b-4e11-a9ad-f01ea1fab3ac",
                  "deebbc9d-1bb6-4580-b103-095aaf2d70a1"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 734,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "b8c3860b-3ed2-431a-80c2-b72b5027b727",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\payment\\updatePaymentDetails.enterprise.js",
        "file": "\\controllers\\test\\payment\\updatePaymentDetails.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "9fa61950-333e-40e6-bfea-a4fd476b9ec6",
            "title": "Payment",
            "fullFile": "C:\\work\\api\\controllers\\test\\payment\\updatePaymentDetails.enterprise.js",
            "file": "\\controllers\\test\\payment\\updatePaymentDetails.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "4e893635-a11a-48b6-8b8e-5723003ba888",
                "title": "Payment.updatePaymentDetails",
                "fullFile": "C:\\work\\api\\controllers\\test\\payment\\updatePaymentDetails.enterprise.js",
                "file": "\\controllers\\test\\payment\\updatePaymentDetails.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Payment Payment.updatePaymentDetails \"before each\" hook",
                    "timedOut": false,
                    "duration": 139,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n    _models.Mail.remove({ $or: [{ to: new RegExp('^test.user+', \"i\") }, { to: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n        commonMock.setSignUpMocks(httpmock, \"enterprise\");\n        api.post(\"/enterprise/v1/signup\")\n            .send(registrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    var data = res.body.output;\n                    authToken = data.authtoken;\n                    _id = data._id;\n                    //braintreeToken = data.payment_set;\n                    //updatePaymentBody.data.token = braintreeToken;\n                    //done();\n                    commonMock.braintreeUpdatePaymentMethod(httpmock, \"enterprise\");\n                    commonMock.braintreeSubscription(httpmock, \"enterprise\");\n                    var userUid = res.body.output.uid;\n                    api.post(\"/enterprise/v1/user/account/creditcards\")\n                        .send(saveCardBody)\n                        .set('authtoken', authToken)\n                        .expect(httpStatus.OK)\n                        .end(function(err, res) {\n                            if (err) {\n                                done(err);\n                            } else {\n                                //updatePaymentBody.data.token = res.body.output.token;\n                                done();\n                            }\n                        });\n                }\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b6006e08-e530-4acf-a4a6-39df306f514c",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Payment Payment.updatePaymentDetails \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "dd30a8d0-984d-4226-b862-ec94fdae95ea",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should update payment method.",
                    "fullTitle": "Enterprise Payment Payment.updatePaymentDetails Should update payment method.",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.braintreeUpdatePaymentDetail(httpmock, \"enterprise\");\napi.put(apiURL)\n    .send(updatePaymentBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            (res.body.output || {}).cardholderName.should.equal(updatePaymentBody.data.billing.cardholderName);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9f5ccfee-c4e1-4e28-9eff-afbdd1bb3315",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should update payment method with firstName field.",
                    "fullTitle": "Enterprise Payment Payment.updatePaymentDetails Should update payment method with firstName field.",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.braintreeUpdatePaymentDetail(httpmock, \"enterprise\");\nvar userDetails = getImmutable(updatePaymentBody);\nuserDetails.data.billing.firstName = userDetails.data.billing.cardholderName;\ndelete userDetails.data.billing.cardholderName;\napi.put(apiURL)\n    .send(updatePaymentBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            (res.body.output || {}).cardholderName.should.equal(updatePaymentBody.data.billing.cardholderName);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "eee3b292-f1e2-40e6-90f5-fc61f0a04f22",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give invalid parameters error.",
                    "fullTitle": "Enterprise Payment Payment.updatePaymentDetails Should give invalid parameters error.",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.braintreeUpdatePaymentMethod(httpmock, \"enterprise\");\ncommonMock.braintreeSubscription(httpmock, \"enterprise\");\nvar tempSaveCardBody = getImmutable(saveCardBody);\ndelete tempSaveCardBody.data.cardholderName;\ndelete tempSaveCardBody.data.nonce;\ndelete tempSaveCardBody.data.token;\ndelete tempSaveCardBody.data.company;\ndelete tempSaveCardBody.data.streetAddress;\napi.put(apiURL)\n    .send(tempSaveCardBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.error[\"billing.name\"].message == messageList.UPDATE_PAYMENT_BILLING_NAME_REQUIRED &&\n                res.body.error.nonce.message == messageList.UPDATE_PAYMENT_NONCE_REQUIRED &&\n                res.body.error.token.message == messageList.UPDATE_PAYMENT_TOKEN_REQUIRED &&\n                res.body.error[\"billing.company\"].message == messageList.UPDATE_PAYMENT_COMPANY_REQUIRED &&\n                res.body.error[\"billing.streetAddress\"].message == messageList.UPDATE_PAYMENT_STREET_ADDRESS_REQUIRED;\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5896d8f3-5250-44b8-a1fa-da54db5b7c7f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give invalid parameters error for empty parameters.",
                    "fullTitle": "Enterprise Payment Payment.updatePaymentDetails Should give invalid parameters error for empty parameters.",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.braintreeUpdatePaymentMethod(httpmock, \"enterprise\");\ncommonMock.braintreeSubscription(httpmock, \"enterprise\");\nvar tempSaveCardBody = getImmutable(saveCardBody);\ntempSaveCardBody.data.cardholderName = \" \";\ntempSaveCardBody.data.nonce = \" \";\ntempSaveCardBody.data.token = \" \";\ntempSaveCardBody.data.company = \" \";\ntempSaveCardBody.data.streetAddress = \" \";\napi.put(apiURL)\n    .send(tempSaveCardBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.error[\"billing.name\"].message == messageList.UPDATE_PAYMENT_BILLING_NAME_REQUIRED &&\n                res.body.error.nonce.message == messageList.UPDATE_PAYMENT_NONCE_REQUIRED &&\n                res.body.error.token.message == messageList.UPDATE_PAYMENT_TOKEN_REQUIRED &&\n                res.body.error[\"billing.company\"].message == messageList.UPDATE_PAYMENT_COMPANY_REQUIRED &&\n                res.body.error[\"billing.streetAddress\"].message == messageList.UPDATE_PAYMENT_STREET_ADDRESS_REQUIRED;\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1b9aa434-bf13-4708-b836-59c9d9d781b2",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Payment Payment.updatePaymentDetails Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.braintreeUpdatePaymentDetail(httpmock, \"enterprise\");\napi.put(apiURL)\n    .send(updatePaymentBody)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a2b0a77a-d42d-4c3a-bb41-494b738f2881",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "9f5ccfee-c4e1-4e28-9eff-afbdd1bb3315",
                  "eee3b292-f1e2-40e6-90f5-fc61f0a04f22",
                  "5896d8f3-5250-44b8-a1fa-da54db5b7c7f",
                  "1b9aa434-bf13-4708-b836-59c9d9d781b2",
                  "a2b0a77a-d42d-4c3a-bb41-494b738f2881"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 63,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "3fb06cad-8ecc-4f23-a66b-46ec798f9ff6",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\payment\\updatePaymentSet.enterprise.js",
        "file": "\\controllers\\test\\payment\\updatePaymentSet.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "296b8e2f-7071-4d20-bc41-fc589f032707",
            "title": "Payment",
            "fullFile": "C:\\work\\api\\controllers\\test\\payment\\updatePaymentSet.enterprise.js",
            "file": "\\controllers\\test\\payment\\updatePaymentSet.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "846ee243-ada9-4e13-9a19-f790194bcdf8",
                "title": "Payment.UpdatePaymentSet",
                "fullFile": "C:\\work\\api\\controllers\\test\\payment\\updatePaymentSet.enterprise.js",
                "file": "\\controllers\\test\\payment\\updatePaymentSet.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Payment Payment.UpdatePaymentSet \"before each\" hook",
                    "timedOut": false,
                    "duration": 95,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n    _models.Mail.remove({ $or: [{ to: new RegExp('^test.user+', \"i\") }, { to: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n        commonMock.setSignUpMocks(httpmock, \"enterprise\");\n        api.post(\"/enterprise/v1/signup\")\n            .send(registrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(error, res) {\n                if (error) {\n                    done(error);\n                } else {\n                    var data = res.body.output;\n                    authToken = data.authtoken;\n                    _id = data._id;\n                    payment_set = data.payment_set;\n                    if (error) {\n                        done(error);\n                    } else {\n                        done();\n                    }\n                }\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7d457b71-9d50-4acc-8e23-909811c613af",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Payment Payment.UpdatePaymentSet \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "19972cb5-2f5e-48fd-ad16-503547c9ac7a",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should update payment_set for user.",
                    "fullTitle": "Enterprise Payment Payment.UpdatePaymentSet Should update payment_set for user.",
                    "timedOut": false,
                    "duration": 31,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.brainTreeClientToken(httpmock, \"enterprise\");\napi.put(apiURL)\n    .send({})\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.payment_set.should.not.equal(\"\");\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "99d080e0-eab9-44f7-ac51-6bea475f1a60",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Payment Payment.UpdatePaymentSet Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.brainTreeClientToken(httpmock, \"enterprise\");\napi.put(apiURL)\n    .send({})\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "699cf323-ea03-44db-a60c-4f567453b24f",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "99d080e0-eab9-44f7-ac51-6bea475f1a60",
                  "699cf323-ea03-44db-a60c-4f567453b24f"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 34,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "ed72c297-cb0a-4e66-aeba-570067b71570",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\payment\\upgradeAccount.enterprise.js",
        "file": "\\controllers\\test\\payment\\upgradeAccount.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "794d90f6-7df1-4c58-959b-22e7b3011b90",
            "title": "Payment",
            "fullFile": "C:\\work\\api\\controllers\\test\\payment\\upgradeAccount.enterprise.js",
            "file": "\\controllers\\test\\payment\\upgradeAccount.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "6e6f4267-805c-408c-ba3d-ac6acc1e5596",
                "title": "Payment.upgradeAccount",
                "fullFile": "C:\\work\\api\\controllers\\test\\payment\\upgradeAccount.enterprise.js",
                "file": "\\controllers\\test\\payment\\upgradeAccount.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Payment Payment.upgradeAccount \"before each\" hook",
                    "timedOut": false,
                    "duration": 155,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ndeleteAllInsertedRecords(function(error, output) {\n    if (error) {\n        done(error);\n    } else {\n        commonMock.setSignUpMocks(httpmock, \"enterprise\");\n        api.post(\"/enterprise/v1/signup\")\n            .send(registrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    authToken = res.body.output.authtoken;\n                    _id = res.body.output._id;\n                    saveInvoices({\n                        authToken: authToken,\n                        braintree_customerId: res.body.output.braintree_customerId || \"\",\n                        uid: res.body.output.uid || \"\"\n                    }, function() {\n                        done();\n                    });\n                }\n            });\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7d064eb4-3d86-4ae2-83a5-692ba581c995",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Payment Payment.upgradeAccount \"after all\" hook",
                    "timedOut": false,
                    "duration": 1,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "deleteAllInsertedRecords(function(error, output) {\n    if (error) {\n        done(error);\n    } else {\n        done();\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1ef548c9-160d-412d-8d9a-a900366b349b",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Payment Payment.upgradeAccount \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7cb2c32f-b38e-4970-af0e-01de3b9e89ea",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should update payment method.",
                    "fullTitle": "Enterprise Payment Payment.upgradeAccount Should update payment method.",
                    "timedOut": false,
                    "duration": 22,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.braintreeUpdateCustomerPaymentDetail(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(upgradeAccountBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.uid != \"\" &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\";\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "baaa2920-82e7-46f9-9f16-89e8d53a3dfc",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Payment Payment.upgradeAccount Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.braintreeUpdateCustomerPaymentDetail(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(upgradeAccountBody)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7140403a-adf1-4125-ad32-0d1a971d09c5",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "baaa2920-82e7-46f9-9f16-89e8d53a3dfc",
                  "7140403a-adf1-4125-ad32-0d1a971d09c5"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 26,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "cc34a541-f807-41f6-b5dc-745cff37b516",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\plans\\getAllPlanFaq.enterprise.js",
        "file": "\\controllers\\test\\plans\\getAllPlanFaq.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "6bb0f876-edcc-4764-a637-7abaf2d84c4b",
            "title": "Plan",
            "fullFile": "C:\\work\\api\\controllers\\test\\plans\\getAllPlanFaq.enterprise.js",
            "file": "\\controllers\\test\\plans\\getAllPlanFaq.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "94821948-9b00-48fb-9a45-6e89cd0cf769",
                "title": "Plan.getAllPlanFaq",
                "fullFile": "C:\\work\\api\\controllers\\test\\plans\\getAllPlanFaq.enterprise.js",
                "file": "\\controllers\\test\\plans\\getAllPlanFaq.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Enterprise Plan Plan.getAllPlanFaq \"before all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "97e36206-9022-49e5-9f46-fe49fd0a03b5",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Plan Plan.getAllPlanFaq \"after all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\nthis.timeout(apiTimeOut);\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f749ce89-1ced-4694-9b36-b0d7e0dfce18",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get list of plans faqs.",
                    "fullTitle": "Enterprise Plan Plan.getAllPlanFaq Should get list of plans faqs.",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = Array.isArray(res.body.output);\n            if (isValid) {\n                _.each(res.body.output, function(item) {\n                    isValid = isValid && typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\";\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4facec27-692b-4deb-aa0a-c0e8c3619497",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "4facec27-692b-4deb-aa0a-c0e8c3619497"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 4,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "20e2f6c4-b412-4df1-9430-89285e28b7f6",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\plans\\getFeatures.enterprise.js",
        "file": "\\controllers\\test\\plans\\getFeatures.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "268e967d-6333-4f8c-827d-c8a55743abf3",
            "title": "Plan",
            "fullFile": "C:\\work\\api\\controllers\\test\\plans\\getFeatures.enterprise.js",
            "file": "\\controllers\\test\\plans\\getFeatures.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "c1cae84a-8d4a-497f-b27a-e26b95a331b7",
                "title": "plans.getFeatures",
                "fullFile": "C:\\work\\api\\controllers\\test\\plans\\getFeatures.enterprise.js",
                "file": "\\controllers\\test\\plans\\getFeatures.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Enterprise Plan plans.getFeatures \"before all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6e5bb88d-b9f8-4e87-a75d-da0657d39c96",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Plan plans.getFeatures \"after all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\nthis.timeout(apiTimeOut);\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a17f19cd-af7e-47c3-9f1c-0e311e2b75b7",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get list of features.",
                    "fullTitle": "Enterprise Plan plans.getFeatures Should get list of features.",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = Array.isArray(res.body.output);\n            if (isValid) {\n                _.each(res.body.output, function(item) {\n                    isValid = isValid && typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\";\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a9bae0f2-2917-4902-9287-23d197780217",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of features in specific range.",
                    "fullTitle": "Enterprise Plan plans.getFeatures Should get list of features in specific range.",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar paramURL = apiURL + \"?skip=2&limit=2\";\napi.get(paramURL)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = Array.isArray(res.body.output);\n            if (isValid) {\n                _.each(res.body.output, function(item) {\n                    isValid = isValid && typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\";\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5683b88f-e8be-4385-8d81-7db157f90867",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of features with query by feature name.",
                    "fullTitle": "Enterprise Plan plans.getFeatures Should get list of features with query by feature name.",
                    "timedOut": false,
                    "duration": 18,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var featureName = ((res.body.output || [])[0] || {}).feature_name || \"\";\n            var paramURL = apiURL + \"?query=\" + featureName;\n            api.get(paramURL)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        var isValid = false;\n                        if (Array.isArray(res.body.output)) {\n                            isValid = res.body.output.length >= 1;\n                            _.each(res.body.output, function(item) {\n                                isValid = isValid && typeof(item._id) == \"undefined\" &&\n                                    typeof(item.__v) == \"undefined\";\n                            });\n                        }\n                        isValid.should.equal(true);\n                        done();\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "60f9221c-1271-46a6-8b5a-19416966b00b",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "a9bae0f2-2917-4902-9287-23d197780217",
                  "5683b88f-e8be-4385-8d81-7db157f90867",
                  "60f9221c-1271-46a6-8b5a-19416966b00b"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 36,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "ab0f37d9-b0a2-405c-8e2e-ce077ad51417",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\plans\\getFeaturesCount.enterprise.js",
        "file": "\\controllers\\test\\plans\\getFeaturesCount.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "434c1794-3cd7-43f8-a691-fc3463ea8d6b",
            "title": "Plan",
            "fullFile": "C:\\work\\api\\controllers\\test\\plans\\getFeaturesCount.enterprise.js",
            "file": "\\controllers\\test\\plans\\getFeaturesCount.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "cf1c7a79-188c-4132-9a1d-bfa3524da6e1",
                "title": "Plan.getFeaturesCount",
                "fullFile": "C:\\work\\api\\controllers\\test\\plans\\getFeaturesCount.enterprise.js",
                "file": "\\controllers\\test\\plans\\getFeaturesCount.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Enterprise Plan Plan.getFeaturesCount \"before all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d346e3f1-b06e-4453-a8a3-bbfbb51e5111",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Plan Plan.getFeaturesCount \"after all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "88c01071-9505-4556-9206-1180b6cc5491",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get count of features.",
                    "fullTitle": "Enterprise Plan Plan.getFeaturesCount Should get count of features.",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (isNaN(parseInt(res.body.output.count)) == false) {\n                isValid = parseInt(res.body.output.count) > 0;\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "91e5ce12-998e-446b-946d-09304552dddf",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "91e5ce12-998e-446b-946d-09304552dddf"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 4,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "64aae142-cfb5-469a-9a1f-8224b8823d53",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\plans\\getOrgPlansData.enterprise.js",
        "file": "\\controllers\\test\\plans\\getOrgPlansData.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "841fdc83-4e40-4dce-8699-de33d110e1d4",
            "title": "Plan",
            "fullFile": "C:\\work\\api\\controllers\\test\\plans\\getOrgPlansData.enterprise.js",
            "file": "\\controllers\\test\\plans\\getOrgPlansData.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "b724e7c8-91d6-41cc-8f6c-fcddcc33bffc",
                "title": "Plan.getOrgPlansData",
                "fullFile": "C:\\work\\api\\controllers\\test\\plans\\getOrgPlansData.enterprise.js",
                "file": "\\controllers\\test\\plans\\getOrgPlansData.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Enterprise Plan Plan.getOrgPlansData \"before all\" hook",
                    "timedOut": false,
                    "duration": 113,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveEntries(function() {\n    commonMock.setSignUpMocks(httpmock, \"enterprise\");\n    api.post(\"/enterprise/v1/signup\")\n        .send(registrationBody)\n        .expect(httpStatus.CREATED)\n        .end(function(error, res) {\n            if (error) {\n                done(error);\n            } else {\n                authToken = res.body.output.authtoken;\n                user_uid = res.body.output.uid;\n                _id = res.body.output._id;\n                savePlanEntries({\n                    authtoken: authToken\n                }, function(error, tempPlanEntries) {\n                    savePlanEntries({\n                        authtoken: authToken,\n                        plan_type: \"enterprise_organization\"\n                    }, function(error, planEntries) {\n                        if (error) {\n                            done(error);\n                        } else {\n                            _planEntries = planEntries;\n                            done();\n                        }\n                    });\n                });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "aec0bf2e-8386-42b4-96c2-6e13f21642c4",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Plan Plan.getOrgPlansData \"after all\" hook",
                    "timedOut": false,
                    "duration": 2,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveEntries(function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6387b8e4-7839-41e6-8511-0f3c111d7a30",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Plan Plan.getOrgPlansData \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "054b780f-116d-45e1-bdd5-f65d9a2827b4",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get list of plans.",
                    "fullTitle": "Enterprise Plan Plan.getOrgPlansData Should get list of plans.",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = Array.isArray(res.body.output);\n            if (isValid) {\n                _.each(res.body.output, function(item) {\n                    isValid = isValid && typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\" &&\n                        item.plan_type == \"enterprise_organization\";\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "33c975a9-d7f4-4d93-a9e0-1fdbd4555299",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of organization required plans.",
                    "fullTitle": "Enterprise Plan Plan.getOrgPlansData Should get list of organization required plans.",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?get=require\";\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = Array.isArray(res.body.output);\n            if (isValid) {\n                _.each(res.body.output, function(item) {\n                    isValid = isValid && typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\" &&\n                        item.plan_type == \"enterprise_organization\";\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8603134f-ad6e-4ef1-bd0c-6e41f3a46362",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get limited list of plans based on skip/limit.",
                    "fullTitle": "Enterprise Plan Plan.getOrgPlansData Should get limited list of plans based on skip/limit.",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?skip=2&limit=2\";\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (Array.isArray(res.body.output)) {\n                isValid = res.body.output.length == 2;\n                _.each(res.body.output, function(item) {\n                    isValid = isValid && typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\" &&\n                        item.plan_type == \"enterprise_organization\";\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "dd08e444-36fb-47be-ab41-15b66c5efb76",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get limited list of plans based on skip/limit.",
                    "fullTitle": "Enterprise Plan Plan.getOrgPlansData Should get limited list of plans based on skip/limit.",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?skip=2&limit=2\";\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (Array.isArray(res.body.output)) {\n                isValid = res.body.output.length == 2;\n                _.each(res.body.output, function(item) {\n                    isValid = isValid && typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\" &&\n                        item.plan_type == \"enterprise_organization\";\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5c980b3b-7081-4969-a824-a12cc21e7ef7",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get filter list of plans.",
                    "fullTitle": "Enterprise Plan Plan.getOrgPlansData Should get filter list of plans.",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?query=utest_cases_\";\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (Array.isArray(res.body.output)) {\n                isValid = res.body.output.length == 10;\n                _.each(res.body.output, function(item) {\n                    isValid = isValid && typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\" &&\n                        item.plan_type == \"enterprise_organization\";\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "181297bd-e7ea-432d-baef-752b850400be",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get filter limited list of plans based on skip/limit.",
                    "fullTitle": "Enterprise Plan Plan.getOrgPlansData Should get filter limited list of plans based on skip/limit.",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?skip=2&limit=2&query=utest_cases_\";\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (Array.isArray(res.body.output)) {\n                isValid = res.body.output.length == 2;\n                _.each(res.body.output, function(item) {\n                    isValid = isValid && typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\" &&\n                        item.plan_type == \"enterprise_organization\";\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1847fc3e-ed61-411d-8cda-b9330cff74d7",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get filter limited list of plans based on skip/limit and name in descending order.",
                    "fullTitle": "Enterprise Plan Plan.getOrgPlansData Should get filter limited list of plans based on skip/limit and name in descending order.",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?skip=2&limit=2&query=utest_cases_&field=name&direction=desc\";\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (Array.isArray(res.body.output)) {\n                isValid = res.body.output[0].uid == _planEntries[7].uid &&\n                    res.body.output[1].uid == _planEntries[6].uid;\n\n                _.each(res.body.output, function(item) {\n                    isValid = isValid && typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\" &&\n                        item.plan_type == \"enterprise_organization\";\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "74c01ae8-eab5-4f32-9740-b8c0c4a500fd",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "33c975a9-d7f4-4d93-a9e0-1fdbd4555299",
                  "8603134f-ad6e-4ef1-bd0c-6e41f3a46362",
                  "dd08e444-36fb-47be-ab41-15b66c5efb76",
                  "5c980b3b-7081-4969-a824-a12cc21e7ef7",
                  "181297bd-e7ea-432d-baef-752b850400be",
                  "1847fc3e-ed61-411d-8cda-b9330cff74d7",
                  "74c01ae8-eab5-4f32-9740-b8c0c4a500fd"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 39,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "12c9adfe-7689-4fa0-a979-0ec8207cc9a6",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\plans\\getPlanById.enterprise.js",
        "file": "\\controllers\\test\\plans\\getPlanById.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "8bbdfc88-c127-41e1-b954-a07ecec40e7b",
            "title": "Plan",
            "fullFile": "C:\\work\\api\\controllers\\test\\plans\\getPlanById.enterprise.js",
            "file": "\\controllers\\test\\plans\\getPlanById.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "4e6ed01d-8d38-487a-b6b2-0ca3b4f6b934",
                "title": "Plan.getPlanById",
                "fullFile": "C:\\work\\api\\controllers\\test\\plans\\getPlanById.enterprise.js",
                "file": "\\controllers\\test\\plans\\getPlanById.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Enterprise Plan Plan.getPlanById \"before all\" hook",
                    "timedOut": false,
                    "duration": 107,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveEntries(function() {\n    commonMock.setSignUpMocks(httpmock, \"enterprise\");\n    api.post(\"/enterprise/v1/signup\")\n        .send(registrationBody)\n        .expect(httpStatus.CREATED)\n        .end(function(error, res) {\n            if (error) {\n                done(error);\n            } else {\n                authToken = res.body.output.authtoken;\n                user_uid = res.body.output.uid;\n                _id = res.body.output._id;\n                //apiURL = apiURL.replace(\":uid\", res.body.output.uid);\n                savePlanEntries({\n                    authtoken: authToken\n                }, function(error, planEntries) {\n                    if (error) {\n                        done(error);\n                    } else {\n                        _planEntries = planEntries;\n                        done();\n                    }\n                });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1e8604ea-b04b-4051-9775-2f78e861e0e6",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Plan Plan.getPlanById \"after all\" hook",
                    "timedOut": false,
                    "duration": 1,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveEntries(function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "07f4ab9f-5456-4007-8bc5-d97274d25ca4",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Plan Plan.getPlanById \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2217d37b-252f-4c77-82c1-92f9abc659e8",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get plan by id.",
                    "fullTitle": "Enterprise Plan Plan.getPlanById Should get plan by id.",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar paramURL = apiURL.replace(\":plan_uid\", _planUid)\napi.get(paramURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.uid.should.equal(_planUid);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6babaf58-d782-4683-889d-6cf75418ec69",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Plan Plan.getPlanById Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar paramURL = apiURL.replace(\":plan_uid\", _planUid)\napi.get(paramURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "550b58dd-18a6-48ae-9cde-d8553a704caa",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "6babaf58-d782-4683-889d-6cf75418ec69",
                  "550b58dd-18a6-48ae-9cde-d8553a704caa"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 17,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "02d081ad-aad5-4029-9b01-5af99c9942e2",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\plans\\getPlansCount.enterprise.js",
        "file": "\\controllers\\test\\plans\\getPlansCount.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "effc00c6-f1d9-49f1-a038-feddf8f688fd",
            "title": "Plan",
            "fullFile": "C:\\work\\api\\controllers\\test\\plans\\getPlansCount.enterprise.js",
            "file": "\\controllers\\test\\plans\\getPlansCount.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "a1737102-b3f5-4732-b0f2-5317a4fb5e8e",
                "title": "Plan.getPlansCount",
                "fullFile": "C:\\work\\api\\controllers\\test\\plans\\getPlansCount.enterprise.js",
                "file": "\\controllers\\test\\plans\\getPlansCount.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Enterprise Plan Plan.getPlansCount \"before all\" hook",
                    "timedOut": false,
                    "duration": 106,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveEntries(function() {\n    commonMock.setSignUpMocks(httpmock, \"enterprise\");\n    api.post(\"/enterprise/v1/signup\")\n        .send(registrationBody)\n        .expect(httpStatus.CREATED)\n        .end(function(error, res) {\n            if (error) {\n                done(error);\n            } else {\n                authToken = res.body.output.authtoken;\n                user_uid = res.body.output.uid;\n                _id = res.body.output._id;\n                savePlanEntries({\n                    authtoken: authToken\n                }, function(error, planEntries) {\n                    if (error) {\n                        done(error);\n                    } else {\n                        _planEntries = planEntries;\n                        done();\n                    }\n                });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "44d64965-8709-44fb-9bf5-d57ae66cff7d",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Plan Plan.getPlansCount \"after all\" hook",
                    "timedOut": false,
                    "duration": 1,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveEntries(function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d5951f6e-c9fd-47ae-8267-06732bf63562",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Plan Plan.getPlansCount \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f650b15b-75aa-4cd8-871f-c90b312a66b6",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get count of plans.",
                    "fullTitle": "Enterprise Plan Plan.getPlansCount Should get count of plans.",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            isNaN(parseInt(res.body.output.count)).should.equal(false);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c217c63b-2a16-43e8-ab18-56dce1734807",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "c217c63b-2a16-43e8-ab18-56dce1734807"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 4,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "4ccc27e4-868d-400a-98db-a5456a5dee72",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\plans\\getPlansData.enterprise.js",
        "file": "\\controllers\\test\\plans\\getPlansData.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "5944a906-7aea-4044-9145-92f15f59d6f4",
            "title": "Plan",
            "fullFile": "C:\\work\\api\\controllers\\test\\plans\\getPlansData.enterprise.js",
            "file": "\\controllers\\test\\plans\\getPlansData.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "0c4a0125-0956-4106-95d9-d0c32accdd5b",
                "title": "Plan.getPlansData",
                "fullFile": "C:\\work\\api\\controllers\\test\\plans\\getPlansData.enterprise.js",
                "file": "\\controllers\\test\\plans\\getPlansData.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Enterprise Plan Plan.getPlansData \"before all\" hook",
                    "timedOut": false,
                    "duration": 103,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveEntries(function() {\n    commonMock.setSignUpMocks(httpmock, \"enterprise\");\n    api.post(\"/enterprise/v1/signup\")\n        .send(registrationBody)\n        .expect(httpStatus.CREATED)\n        .end(function(error, res) {\n            if (error) {\n                done(error);\n            } else {\n                authToken = res.body.output.authtoken;\n                user_uid = res.body.output.uid;\n                _id = res.body.output._id;\n                savePlanEntries({\n                    authtoken: authToken\n                }, function(error, planEntries) {\n                    if (error) {\n                        done(error);\n                    } else {\n                        _planEntries = planEntries;\n                        done();\n                    }\n                });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "040f41b1-9960-44d2-affc-85b1cfc0b68e",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Plan Plan.getPlansData \"after all\" hook",
                    "timedOut": false,
                    "duration": 1,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveEntries(function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "407312a9-d5d1-4964-aae0-2ec5d109ae43",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Plan Plan.getPlansData \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ae378316-a271-400f-8bed-a452f744acd0",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get list of plans.",
                    "fullTitle": "Enterprise Plan Plan.getPlansData Should get list of plans.",
                    "timedOut": false,
                    "duration": 25,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = Array.isArray(res.body.output);\n            if (isValid) {\n                _.each(res.body.output, function(item) {\n                    isValid = isValid && typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\";\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cc235485-7709-4ff3-8aa2-92037853fe2b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get limited list of plans based on skip/limit.",
                    "fullTitle": "Enterprise Plan Plan.getPlansData Should get limited list of plans based on skip/limit.",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?skip=2&limit=2\";\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (Array.isArray(res.body.output)) {\n                isValid = res.body.output.length == 2;\n                _.each(res.body.output, function(item) {\n                    isValid = isValid && typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\";\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ab32e39f-3956-4141-bdb5-6adae8d78b90",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get filter list of plans.",
                    "fullTitle": "Enterprise Plan Plan.getPlansData Should get filter list of plans.",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?query=utest_cases_\";\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (Array.isArray(res.body.output)) {\n                isValid = res.body.output.length == 10;\n                _.each(res.body.output, function(item) {\n                    isValid = isValid && typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\";\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "df3cdb07-69e0-4974-82d3-054f9b0b7437",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get filter limited list of plans based on skip/limit.",
                    "fullTitle": "Enterprise Plan Plan.getPlansData Should get filter limited list of plans based on skip/limit.",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?skip=2&limit=2&query=utest_cases_\";\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (Array.isArray(res.body.output)) {\n                isValid = res.body.output.length == 2;\n                _.each(res.body.output, function(item) {\n                    isValid = isValid && typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\";\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "75ae0748-91c7-441c-8729-1382014f0310",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get filter limited list of plans based on skip/limit and name in descending order.",
                    "fullTitle": "Enterprise Plan Plan.getPlansData Should get filter limited list of plans based on skip/limit and name in descending order.",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?skip=2&limit=2&query=utest_cases_&field=name&direction=desc\";\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (Array.isArray(res.body.output)) {\n                isValid = res.body.output[0].uid == _planEntries[7].uid &&\n                    res.body.output[1].uid == _planEntries[6].uid;\n\n                _.each(res.body.output, function(item) {\n                    isValid = isValid && typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\";\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4efc02b9-4454-4a86-8c12-22a9c5e511d7",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "cc235485-7709-4ff3-8aa2-92037853fe2b",
                  "ab32e39f-3956-4141-bdb5-6adae8d78b90",
                  "df3cdb07-69e0-4974-82d3-054f9b0b7437",
                  "75ae0748-91c7-441c-8729-1382014f0310",
                  "4efc02b9-4454-4a86-8c12-22a9c5e511d7"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 44,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "ee9dbdda-4226-40e1-b8f5-7bacc581fe43",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\plans\\getRequiredPlans.enterprise.js",
        "file": "\\controllers\\test\\plans\\getRequiredPlans.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "ae3c02f5-3281-4bb5-8930-0fce19fdc95a",
            "title": "Plan",
            "fullFile": "C:\\work\\api\\controllers\\test\\plans\\getRequiredPlans.enterprise.js",
            "file": "\\controllers\\test\\plans\\getRequiredPlans.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "73bcab8f-8662-4184-bbbe-149f7d2f0702",
                "title": "Plan.getRequiredPlans",
                "fullFile": "C:\\work\\api\\controllers\\test\\plans\\getRequiredPlans.enterprise.js",
                "file": "\\controllers\\test\\plans\\getRequiredPlans.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Enterprise Plan Plan.getRequiredPlans \"before all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9b12353d-c63f-4bc6-992c-35f0d5f3a99b",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Plan Plan.getRequiredPlans \"after all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a455432e-bc59-4ac4-95c6-78181191086d",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get list of required plans.",
                    "fullTitle": "Enterprise Plan Plan.getRequiredPlans Should get list of required plans.",
                    "timedOut": false,
                    "duration": 86,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = Array.isArray(res.body.output);\n            if (isValid) {\n                _.each(res.body.output, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\";\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6646fe1b-15c3-44cf-9e26-7024d53884aa",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "6646fe1b-15c3-44cf-9e26-7024d53884aa"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 86,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "083794ad-1bca-437b-9cad-1b23beef751d",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\plans\\getViewPlans.enterprise.js",
        "file": "\\controllers\\test\\plans\\getViewPlans.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "697326e1-dccb-4656-8377-b9c0ac1a9faf",
            "title": "Plan",
            "fullFile": "C:\\work\\api\\controllers\\test\\plans\\getViewPlans.enterprise.js",
            "file": "\\controllers\\test\\plans\\getViewPlans.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "095957fa-3acd-4e97-8d97-1c6fdf1fd0a4",
                "title": "Plan.getViewPlans",
                "fullFile": "C:\\work\\api\\controllers\\test\\plans\\getViewPlans.enterprise.js",
                "file": "\\controllers\\test\\plans\\getViewPlans.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Enterprise Plan Plan.getViewPlans \"before all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8216251d-dfdc-4618-8cd9-16c657727ca0",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise Plan Plan.getViewPlans \"after all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b9cf58f4-5130-4136-b543-2ce39f91e3e9",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get list of viewed plans.",
                    "fullTitle": "Enterprise Plan Plan.getViewPlans Should get list of viewed plans.",
                    "timedOut": false,
                    "duration": 82,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = Array.isArray(res.body.output);\n            if (isValid) {\n                _.each(res.body.output, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\";\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6cdf411e-027f-493f-a194-92973d43e25a",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "6cdf411e-027f-493f-a194-92973d43e25a"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 82,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "1faf4d32-6fc4-4f51-b561-724fc5b04768",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\plans\\planSendMail.enterprise.js",
        "file": "\\controllers\\test\\plans\\planSendMail.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "1cc01afa-5444-4e4a-891d-3bd1a6892a80",
            "title": "Plan",
            "fullFile": "C:\\work\\api\\controllers\\test\\plans\\planSendMail.enterprise.js",
            "file": "\\controllers\\test\\plans\\planSendMail.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "ff72c4c9-7d88-47a8-b75b-43a443675240",
                "title": "Plan.planSendMail",
                "fullFile": "C:\\work\\api\\controllers\\test\\plans\\planSendMail.enterprise.js",
                "file": "\\controllers\\test\\plans\\planSendMail.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise Plan Plan.planSendMail \"before each\" hook",
                    "timedOut": false,
                    "duration": 60,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3c6a871f-abac-4544-b5e1-de62b89a7568",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise Plan Plan.planSendMail \"after each\" hook",
                    "timedOut": false,
                    "duration": 2,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "589380aa-e91f-41e3-8a83-4ab1ca3e9023",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get list of plans faqs.",
                    "fullTitle": "Enterprise Plan Plan.planSendMail Should get list of plans faqs.",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.sendMailFlowExecution(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(planSendBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.message.should.equal(\"Mail send successfully.\");\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8430fab3-b5cd-4f6c-ab43-1a63fe70152b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise Plan Plan.planSendMail Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .send(planSendBody)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b5ff1b06-08b9-46c6-a5cc-60c76d98d8ae",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "8430fab3-b5cd-4f6c-ab43-1a63fe70152b",
                  "b5ff1b06-08b9-46c6-a5cc-60c76d98d8ae"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 16,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "d1ddbd6f-1d11-4741-8ec0-af12b74f9f80",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\project\\cloneProject.enterprise.js",
        "file": "\\controllers\\test\\project\\cloneProject.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "df69a266-e68a-4a19-9cec-d6014df1c918",
            "title": "Project.Clone",
            "fullFile": "C:\\work\\api\\controllers\\test\\project\\cloneProject.enterprise.js",
            "file": "\\controllers\\test\\project\\cloneProject.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Project.Clone \"before all\" hook",
                "timedOut": false,
                "duration": 109,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data;\n        customRoleProject = _.find(orgData.org_projects, { name: 'proj2' })\n        async.waterfall([\n            function(cbk) {\n                var query = _models.newFlow.remove()\n                query.exec(function(err) {\n                    dummyUser = orgData.owner;\n                    dummyUser.authtoken = dummyUser.authtoken;\n                    testData.mongoUserTriggerObj.user_uid = dummyUser.uid;\n                    _models.UserTrigger.create(testData.mongoUserTriggerObj, function(err, userTrigger) {\n                        cbk(err, userTrigger);\n                    })\n                })\n            },\n            function(userTrigger, cbk) {\n                var userTriggerObj = userTrigger;\n                var flowData = _.cloneDeep(testData.flowBody);\n                flowData.isExpress = false;\n                flowData.trigger.handlers = [userTriggerObj]\n                async.parallel({\n                    triggerFlow: function(cb) {\n                        createFlow(flowURL, flowData, dummyUser, function(err, result) {\n                            cb(err, result);\n                        })\n                    },\n                    webHookFlow: function(cb) {\n                        var WHFlow = _.cloneDeep(flowData);\n                        WHFlow.trigger = testData.defaultTriggerObj;\n                        WHFlow.settings = testData.webHookSetting;\n                        WHFlow.active = true;\n                        WHFlow.settings = testData.webHookSetting;\n                        createFlow(flowURL, WHFlow, dummyUser, function(err, result) {\n                            cb(err, result);\n                        })\n                    }\n                }, function(err, result) {\n                    cbk(err, result)\n                })\n            }\n        ], function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                userTriggerFlow = res.triggerFlow._doc;\n                userWebHookFlow = res.webHookFlow._doc;\n                done()\n            }\n        })\n    });\n})",
                "err": {},
                "isRoot": false,
                "uuid": "c473e61f-19e7-4c68-8b49-5afccb0af72b",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Project.Clone \"after all\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nhttpmock.cleanAll();\nvar flowUIDS = [userTriggerFlow.uid, userWebHookFlow.uid];\nasync.parallel([\n    function(cb) {\n        _models.newFlow.remove({ uid: { $in: flowUIDS } }, function(err, deletedFlows) {\n            cb(err, deletedFlows)\n        });\n    },\n    function(cb) {\n        _models.UserTrigger.remove({ uid: userTriggerObj.uid }, function(err, deletedUserTrigger) {\n            cb(err, deletedUserTrigger);\n        })\n    }\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        //clearRecords(function(err, result) {\n        done()\n            //})\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "058c097d-2252-4023-9eab-1f3c86e27112",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Project.Clone Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(_.replace(apiURL, ':project_uid', dummyUser.default_project))\n    .send(getExecuteBody(userTriggerFlow))\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "33f99121-c9a6-4999-a0ae-e39e580a1f66",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should clone project.",
                "fullTitle": "Enterprise Project.Clone Should clone project.",
                "timedOut": false,
                "duration": 53,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { user_uid: dummyUser.uid }\nvar cloneOpt = { path: '/triggers/clone', body: { \"uid\": 'testUserTrigger' } };\ncommonMock.projectTriggerCloneSuccess(cloneOpt);\napi.post(_.replace(apiURL, ':project_uid', dummyUser.default_project))\n    .set('authtoken', dummyUser.authtoken)\n    .send()\n    .expect(200)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var newProject = res.body.output\n            expect(newProject).to.have.any.keys(['uid']);\n            _models.newFlow.find({ project_uid: newProject.uid }, function(err, results) {\n                expect(results.length).to.equal(2);\n            })\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "90cde60a-2c6e-4bc6-a88c-870f11fd829c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "33f99121-c9a6-4999-a0ae-e39e580a1f66",
              "90cde60a-2c6e-4bc6-a88c-870f11fd829c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 56,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "1a8c5d4d-8104-4e3d-8c11-3d8d79a71160",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\project\\createProject.js",
        "file": "\\controllers\\test\\project\\createProject.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "d3355e86-4e5c-4e29-a566-e739ec842f3a",
            "title": "Project.Create",
            "fullFile": "C:\\work\\api\\controllers\\test\\project\\createProject.js",
            "file": "\\controllers\\test\\project\\createProject.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Project.Create \"before all\" hook",
                "timedOut": false,
                "duration": 59,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data;\n        dummyUser = orgData.owner;\n        dummyUser.authtoken = dummyUser.authtoken;\n        done()\n    });\n})",
                "err": {},
                "isRoot": false,
                "uuid": "c47a622c-5279-4b6c-92c0-b8bd04aad546",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Project.Create \"after all\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.parallel([\n        function(cb) {\n            _models.Project.remove({\n                    uid: {\n                        \"$in\": [project.uid, adminOwnProject.uid, developerOwnProject.uid]\n                    }\n                },\n                function(err) {\n                    cb(err)\n                })\n        }\n    ],\n    function(err, result) {\n        if (err) {\n            done(err)\n        } else {\n            done()\n        }\n    })",
                "err": {},
                "isRoot": false,
                "uuid": "6d56326c-2a4c-4d7f-a1c8-77493f6c67a0",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise Project.Create Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "7fabd02c-85df-4384-84b7-820587976f39",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should create project, if data is valid.",
                "fullTitle": "Enterprise Project.Create Should create project, if data is valid.",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nprojectData.owner_uid = dummyUser.uid\nprojectData.created_by = dummyUser.uid\nprojectData.updated_by = dummyUser.uid\nprojectData.env_uid = 'flc9f0bbfd3393a79903fda5'\napi.post(apiURL)\n    .set({ authtoken: dummyUser.authtoken })\n    .send(projectData)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            project = res.body.output\n            expect(project.name).equal(projectData.name);\n            expect(project).to.have.any.keys(['name', 'created_by', 'flow_count', 'icons', 'updated_by', 'locked_by', 'owner_uid']);\n            _models.UserConfig.findOne({ project_uid: project.uid, name: 'default' }, function(err, result) {\n                if (err) {\n                    done(err);\n                } else {\n                    expect(result.name).equal('default');\n                    done();\n                }\n            })\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "cc680f62-c2b8-4b09-ac70-9743953c238c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should create project, if developer tried to create a project in an valid org.",
                "fullTitle": "Enterprise Project.Create Should create project, if developer tried to create a project in an valid org.",
                "timedOut": false,
                "duration": 23,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar developerProject = _.cloneDeep(projectData)\ndeveloperProject.name = 'developerProject'\ndeveloperProject.owner_uid = orgData.developer.uid\ndeveloperProject.created_by = orgData.developer.uid\ndeveloperProject.updated_by = orgData.developer.uid\ndeveloperProject.env_uid = 'flc9f0bbfd3393a79903fda5'\napi.post(apiURL)\n    .set({ authtoken: orgData.developer.authtoken, org_uid: orgData.organization.uid })\n    .send(developerProject)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            developerOwnProject = res.body.output\n            expect(developerOwnProject.name).equal(developerProject.name);\n            expect(developerOwnProject).to.have.any.keys(['name', 'created_by', 'flow_count', 'icons', 'updated_by', 'locked_by', 'owner_uid']);\n            _models.UserConfig.findOne({ project_uid: developerOwnProject.uid, name: config.default_project }, function(err, result) {\n                if (err) {\n                    done(err);\n                } else {\n                    expect(result.name).equal(config.default_project);\n                    done();\n                }\n            })\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "f785ead5-bca0-429e-80a5-c0e3d84acc3a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should create project, if admin tried to create a project in an valid org.",
                "fullTitle": "Enterprise Project.Create Should create project, if admin tried to create a project in an valid org.",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar adminProject = _.cloneDeep(projectData)\nadminProject.name = 'adminProject'\nadminProject.owner_uid = dummyUser.uid\nadminProject.created_by = dummyUser.uid\nadminProject.updated_by = dummyUser.uid\nadminProject.env_uid = dummyUser.default_env\napi.post(apiURL)\n    .set({ authtoken: orgData.admin.authtoken, org_uid: orgData.organization.uid })\n    .send(adminProject)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            adminOwnProject = res.body.output\n            expect(adminOwnProject.name).equal(adminProject.name);\n            expect(adminOwnProject).to.have.all.keys(['uid', 'name', 'created_by', 'updated_by',\n                'owner_uid', 'updated_at', 'created_at', 'flow_count', 'icons', 'env_uid', 'org_uid', 'deleted_at'\n            ]);\n            _models.UserConfig.findOne({ project_uid: adminOwnProject.uid, name: config.default_project }, function(err, result) {\n                if (err) {\n                    done(err);\n                } else {\n                    expect(result.name).equal(config.default_project);\n                    done();\n                }\n            })\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "38d32918-8b56-4c3c-94e0-d44674b3fb1d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error,  if billing manger tied to create a project in an org.",
                "fullTitle": "Enterprise Project.Create Should get error,  if billing manger tied to create a project in an org.",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nprojectData.owner_uid = dummyUser.uid\nprojectData.created_by = dummyUser.uid\nprojectData.updated_by = dummyUser.uid\nprojectData.env_uid = dummyUser.default_env\napi.post(apiURL)\n    .set({ authtoken: orgData.billing_manager.authtoken, org_uid: orgData.organization.uid })\n    .send(projectData)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).equal(messageList.ACCESS_DENIED);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "89d1da89-6ae4-46e3-a594-ece62aa6b206",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error,  if normal tied to create a project in an org.",
                "fullTitle": "Enterprise Project.Create Should get error,  if normal tied to create a project in an org.",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nprojectData.owner_uid = dummyUser.uid\nprojectData.created_by = dummyUser.uid\nprojectData.updated_by = dummyUser.uid\nprojectData.env_uid = dummyUser.default_env\napi.post(apiURL)\n    .set({ authtoken: orgData.role1.authtoken, org_uid: orgData.organization.uid })\n    .send(projectData)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).equal(messageList.ACCESS_DENIED);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "c4d3f857-068d-48d4-b1a5-dda664b04db6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error if user tried to create project with name already exists in an environment.",
                "fullTitle": "Enterprise Project.Create Should get error if user tried to create project with name already exists in an environment.",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nprojectData.user_uid = dummyUser.uid\nprojectData.env_uid = dummyUser.default_env\napi.post(apiURL)\n    .set({ authtoken: dummyUser.authtoken })\n    .send(projectData)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).equal(messageList.PROJECT_NAME_UNIQUE_ERROR);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "1bb64921-d0c3-474f-b497-242f4b9bcaf8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error if  project name is blank.",
                "fullTitle": "Enterprise Project.Create Should get error if  project name is blank.",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nprojectData.name = ''\nprojectData.user_uid = dummyUser.uid\nprojectData.env_uid = dummyUser.default_env\napi.post(apiURL)\n    .set({ authtoken: dummyUser.authtoken })\n    .send(projectData)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            expect(res.body.error.name.message).equal(messageList.PROJECT_NAME_REQUIRED);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "6e7d0062-a525-46d5-8151-e80bbc86884c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "7fabd02c-85df-4384-84b7-820587976f39",
              "cc680f62-c2b8-4b09-ac70-9743953c238c",
              "f785ead5-bca0-429e-80a5-c0e3d84acc3a",
              "38d32918-8b56-4c3c-94e0-d44674b3fb1d",
              "89d1da89-6ae4-46e3-a594-ece62aa6b206",
              "c4d3f857-068d-48d4-b1a5-dda664b04db6",
              "1bb64921-d0c3-474f-b497-242f4b9bcaf8",
              "6e7d0062-a525-46d5-8151-e80bbc86884c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 110,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "c6e41bb1-f3cb-4300-aae0-5722eb424729",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\project\\createProjectParam.js",
        "file": "\\controllers\\test\\project\\createProjectParam.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "0fa3f505-0e1c-44e3-ab5d-36e23bc0134f",
            "title": "ProjectParam.Create",
            "fullFile": "C:\\work\\api\\controllers\\test\\project\\createProjectParam.js",
            "file": "\\controllers\\test\\project\\createProjectParam.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise ProjectParam.Create \"before all\" hook",
                "timedOut": false,
                "duration": 66,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data;\n        async.waterfall([\n            function(cbk) {\n                dummyUser = orgData.owner;\n                projectData.owner_uid = dummyUser.uid\n                projectData.env_uid = dummyUser.default_env\n                api.post(projectURL)\n                    .set('authtoken', dummyUser.authtoken)\n                    .send(projectData)\n                    .expect(httpStatus.CREATED)\n                    .end(function(err, result) {\n                        cbk(err, result);\n                    })\n            }\n        ], function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                project = res.body.output\n                done()\n            }\n        })\n    })\n})",
                "err": {},
                "isRoot": false,
                "uuid": "321457a3-1181-4878-85f7-01cd8011d075",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise ProjectParam.Create \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.parallel([\n    function(cb) {\n        _models.Project.remove({ uid: project.uid }, function(err) {\n            cb(err)\n        })\n    },\n    function(cb) {\n        _models.ConfigSchema.remove({ uid: configSchema.uid }, function(err) {\n            cb(err)\n        })\n    }\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "b84cd764-9298-420b-b7e8-7b255e2b58d6",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise ProjectParam.Create Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .send(paramData)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "dd88ed3d-e987-4a77-86c8-e50f45815ac0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should create project param, if user send valid data.",
                "fullTitle": "Enterprise ProjectParam.Create Should create project param, if user send valid data.",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set({ authtoken: dummyUser.authtoken, project_uid: project.uid })\n    .send(paramData)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output.length).equal(2);\n            _models.ConfigSchema.find({ user_uid: dummyUser.uid, type: 'param' }, function(err, results) {\n                expect(results).length.gt(0);\n                done();\n            })\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "cebda049-79a9-4ebb-94c1-2e1504068744",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should give empty array in response, if user send data which is not in same project.",
                "fullTitle": "Enterprise ProjectParam.Create Should give empty array in response, if user send data which is not in same project.",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set({ authtoken: dummyUser.authtoken, project_uid: project.uid })\n    .send([{\n        uid: \"dummy\",\n        key: \"key\",\n        value: \"value\",\n        \"required\": false,\n        \"isPassword\": true,\n        \"hasError\": false\n    }])\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output.length).equal(0);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "8ed0f8e9-11f2-49f6-be8f-bc477e8a6f79",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should create project param within an org, if user send valid data.",
                "fullTitle": "Enterprise ProjectParam.Create Should create project param within an org, if user send valid data.",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set({ authtoken: orgData.admin.authtoken, org_uid: orgData.organization.uid })\n    .send(paramData)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output.length).equal(2);\n            _models.ConfigSchema.find({ org_uid: orgData.organization.uid, type: 'param' }, function(err, results) {\n                expect(results).length.gt(0);\n                done();\n            })\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "23fab28f-ab40-49c6-a3d2-d0e7b94734bc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if project not found.",
                "fullTitle": "Enterprise ProjectParam.Create Should get error, if project not found.",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set({ authtoken: dummyUser.authtoken, project_uid: 'ABC' })\n    .send({})\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).equal(messageList.PROJECT_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "a7894005-a75b-43b4-a939-efbb07d3127a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "dd88ed3d-e987-4a77-86c8-e50f45815ac0",
              "cebda049-79a9-4ebb-94c1-2e1504068744",
              "8ed0f8e9-11f2-49f6-be8f-bc477e8a6f79",
              "23fab28f-ab40-49c6-a3d2-d0e7b94734bc",
              "a7894005-a75b-43b4-a939-efbb07d3127a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 56,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "60dc5fb7-0ba7-446c-be94-e9e920ff12f4",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\project\\deleteProject.js",
        "file": "\\controllers\\test\\project\\deleteProject.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "354d9701-9b68-454e-835e-0dcf828a72b6",
            "title": "Project.Delete",
            "fullFile": "C:\\work\\api\\controllers\\test\\project\\deleteProject.js",
            "file": "\\controllers\\test\\project\\deleteProject.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Project.Delete \"before all\" hook",
                "timedOut": false,
                "duration": 67,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data\n        async.waterfall([\n            function(cbk) {\n                dummyUser = orgData.owner;\n                dummyUser.authtoken = dummyUser.authtoken\n                projectData.owner_uid = dummyUser.uid\n                projectData.env_uid = dummyUser.default_env\n                api.post(apiURL)\n                    .set('authtoken', dummyUser.authtoken)\n                    .send(projectData)\n                    .expect(httpStatus.CREATED)\n                    .end(function(err, result) {\n                        cbk(err, result);\n                    })\n            }\n        ], function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                project = res.body.output\n                done()\n            }\n        })\n    });\n})",
                "err": {},
                "isRoot": false,
                "uuid": "55f127e0-2a17-4add-9868-ab662abc66af",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Project.Delete \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.parallel([\n    function(cb) {\n        _models.Project.remove({ uid: project.uid }, function(err) {\n            cb(err)\n        })\n    }\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "a93a7c12-00f7-4249-9857-c853a3a65b0c",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise Project.Delete Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.delete(apiURL + project.uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "31f5bc28-4543-4ad4-b0db-9ddc3ad6c3e6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error if user tried to delete project which is not exists.",
                "fullTitle": "Enterprise Project.Delete Should get error if user tried to delete project which is not exists.",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nprojectData.user_uid = dummyUser.uid\nprojectData.env_uid = dummyUser.default_env\napi.delete(apiURL + 'project.uid')\n    .set({ authtoken: dummyUser.authtoken, env_uid: dummyUser.env_uid || dummyUser.default_env })\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).equal(messageList.PROJECT_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "0de5da3b-f539-42c2-9ea6-551eb0257afa",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error if user tried to delete project which is default.",
                "fullTitle": "Enterprise Project.Delete Should get error if user tried to delete project which is default.",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nprojectData.user_uid = dummyUser.uid\nprojectData.env_uid = dummyUser.default_env\napi.delete(apiURL + dummyUser.default_project)\n    .set({ authtoken: dummyUser.authtoken, env_uid: dummyUser.env_uid || dummyUser.default_env })\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).equal(messageList.DEFAULT_PROJECT_DELETE_ERROR);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "c98ab375-a2cb-489d-a66e-60698b2a6ecc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should delete project, if user send valid data.",
                "fullTitle": "Enterprise Project.Delete Should delete project, if user send valid data.",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nprojectData.name = 'updated project'\napi.delete(apiURL + project.uid)\n    .set({ authtoken: dummyUser.authtoken, env_uid: dummyUser.env_uid || dummyUser.default_env })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output.message).to.be.equal(messageList.PROJECT_DELETE_SUCCESS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "f24b42d3-7f1f-4759-9c84-dc1bc8964982",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if normal user tried to delete Project which is allocated to him.",
                "fullTitle": "Enterprise Project.Delete Should get error, if normal user tried to delete Project which is allocated to him.",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar proj1 = _.find(orgData.org_projects, { name: 'proj1' })\napi.delete(apiURL + proj1.uid)\n    .set({ authtoken: orgData.role1.authtoken, org_uid: orgData.organization.uid })\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //expect(res.body.output).to.have.any.keys(['project', 'flows', 'configs'])\n            expect(res.body.error.message).equal(messageList.ACCESS_DENIED);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "d6d78653-ccc3-4758-a6d7-a56c9ca861aa",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if normal user tried to delete Project which allocated to him but org_uid not passed in header.",
                "fullTitle": "Enterprise Project.Delete Should get error, if normal user tried to delete Project which allocated to him but org_uid not passed in header.",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar proj1 = _.find(orgData.org_projects, { name: 'proj1' })\napi.delete(apiURL + proj1.uid)\n    .set({ authtoken: orgData.role1.authtoken })\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //expect(res.body.output).to.have.any.keys(['project', 'flows', 'configs'])\n            expect(res.body.error.message).equal(messageList.ACCESS_DENIED);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "325637a0-cafb-4d56-a08e-d3672e77d3bd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should not delete project, if normal user tried to delete Project which is not allocated to him.",
                "fullTitle": "Enterprise Project.Delete Should not delete project, if normal user tried to delete Project which is not allocated to him.",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar proj3 = _.find(orgData.org_projects, { name: 'proj3' })\napi.delete(apiURL + proj3.uid)\n    .set({ authtoken: orgData.role1.authtoken, org_uid: orgData.organization.uid })\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //expect(res.body.output).to.have.any.keys(['project', 'flows', 'configs'])\n            expect(res.body.error.message).equal(messageList.ACCESS_DENIED);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "23791a9a-23cc-42d0-bf46-eb369f850eea",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if billing manager tried to delete Project which is not allocated to him.",
                "fullTitle": "Enterprise Project.Delete Should get error, if billing manager tried to delete Project which is not allocated to him.",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar proj1 = _.find(orgData.org_projects, { name: 'proj1' })\napi.delete(apiURL + proj1.uid)\n    .set({ authtoken: orgData.billing_manager.authtoken, org_uid: orgData.organization.uid })\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //expect(res.body.output).to.have.any.keys(['project', 'flows', 'configs'])\n            expect(res.body.error.message).equal(messageList.ACCESS_DENIED);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "037025f1-2947-443c-b383-00c619b19e04",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should delete project, if admin of org tried to delete Project.",
                "fullTitle": "Enterprise Project.Delete Should delete project, if admin of org tried to delete Project.",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar proj2 = _.find(orgData.org_projects, { name: 'proj2' })\ntestData.mongoUserTriggerObj.user_uid = dummyUser.uid;\ntestData.mongoUserTriggerObj.project_uid = proj2.uid\n_models.UserTrigger.create(testData.mongoUserTriggerObj, function(err, userTrigger) {\n    api.delete(apiURL + proj2.uid)\n        .set({ authtoken: orgData.admin.authtoken, org_uid: orgData.organization.uid })\n        .send(projectData)\n        .expect(httpStatus.BAD_REQUEST)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                expect(res.body.error.message).to.be.equal(messageList.PROJECT_HAS_TRIGGER);\n                _models.UserTrigger.remove({uid: userTrigger.uid}, function(err){\n                    done(err);\n                })\n            }\n        });\n})",
                "err": {},
                "isRoot": false,
                "uuid": "de7ceaa8-512a-4d1a-8cbe-4b6707ef2bf3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should delete project, if admin of org tried to delete Project.",
                "fullTitle": "Enterprise Project.Delete Should delete project, if admin of org tried to delete Project.",
                "timedOut": false,
                "duration": 23,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar proj2 = _.find(orgData.org_projects, { name: 'proj2' })\napi.delete(apiURL + proj2.uid)\n    .set({ authtoken: orgData.admin.authtoken, org_uid: orgData.organization.uid })\n    .send(projectData)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //expect(res.body.output).to.have.any.keys(['project', 'flows', 'configs'])\n            expect(res.body.output.message).to.be.equal(messageList.PROJECT_DELETE_SUCCESS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "35cd2b53-3ee2-4c60-a6e2-922e4a488a5b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should delete project, if developer of org tried to delete Project.",
                "fullTitle": "Enterprise Project.Delete Should delete project, if developer of org tried to delete Project.",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar proj1 = _.find(orgData.org_projects, { name: 'proj1' })\napi.delete(apiURL + proj1.uid)\n    .set({ authtoken: orgData.developer.authtoken, org_uid: orgData.organization.uid })\n    .send(projectData)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //expect(res.body.output).to.have.any.keys(['project', 'flows', 'configs'])\n            expect(res.body.output.message).to.be.equal(messageList.PROJECT_DELETE_SUCCESS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "91b452dd-d0f0-4419-b21e-e3f1f454785d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "31f5bc28-4543-4ad4-b0db-9ddc3ad6c3e6",
              "0de5da3b-f539-42c2-9ea6-551eb0257afa",
              "c98ab375-a2cb-489d-a66e-60698b2a6ecc",
              "f24b42d3-7f1f-4759-9c84-dc1bc8964982",
              "d6d78653-ccc3-4758-a6d7-a56c9ca861aa",
              "325637a0-cafb-4d56-a08e-d3672e77d3bd",
              "23791a9a-23cc-42d0-bf46-eb369f850eea",
              "037025f1-2947-443c-b383-00c619b19e04",
              "de7ceaa8-512a-4d1a-8cbe-4b6707ef2bf3",
              "35cd2b53-3ee2-4c60-a6e2-922e4a488a5b",
              "91b452dd-d0f0-4419-b21e-e3f1f454785d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 161,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "fb5ade64-a167-4512-91a5-89a63da5995a",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\project\\deleteProjectParam.js",
        "file": "\\controllers\\test\\project\\deleteProjectParam.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "8b22c719-6922-4b46-8c30-8a01a1462b11",
            "title": "ProjectParam.Delete",
            "fullFile": "C:\\work\\api\\controllers\\test\\project\\deleteProjectParam.js",
            "file": "\\controllers\\test\\project\\deleteProjectParam.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise ProjectParam.Delete \"before all\" hook",
                "timedOut": false,
                "duration": 128,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(user, cbk) {\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    },\n    function(result, cbk) {\n        dummyUser = result.body.output;\n        projectData.owner_uid = dummyUser.uid\n        projectData.env_uid = dummyUser.default_env\n        api.post(projectURL)\n            .set('authtoken', dummyUser.authtoken)\n            .send(projectData)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    },\n    function(res, cbk) {\n        project = res.body.output\n        api.post(apiURL)\n            .set({ authtoken: dummyUser.authtoken, project_uid: project.uid })\n            .send(paramData)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                cbk(err, res)\n            })\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        configSchema = res.body.output\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "5eb4964a-5cbb-450d-9191-18e59603f880",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise ProjectParam.Delete \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.parallel([\n    function(cb) {\n        _models.Project.remove({ uid: project.uid }, function(err) {\n            cb(err)\n        })\n    },\n    function(cb) {\n        _models.ConfigSchema.remove({ uid: configSchema.uid }, function(err) {\n            cb(err)\n        })\n    }\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "8e29360b-ca7e-47b8-ba56-faa9b12a9247",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise ProjectParam.Delete Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.delete(apiURL + configSchema.uid)\n    .send(paramData)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "8737ba2c-aa30-444d-ab20-eae7fad3fbad",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should delete project param, if user send valid data.",
                "fullTitle": "Enterprise ProjectParam.Delete Should delete project param, if user send valid data.",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.delete(apiURL + configSchema.uid)\n    .set({ authtoken: dummyUser.authtoken, project_uid: project.uid })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output.message).equal(messageList.PARAMS_DELETE_SUCCESS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "a714a350-ef42-426a-a620-b79de1b6a7a6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if project not found.",
                "fullTitle": "Enterprise ProjectParam.Delete Should get error, if project not found.",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.delete(apiURL + project.uid)\n    .set({ authtoken: dummyUser.authtoken, project_uid: 'ABC' })\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).equal(messageList.PROJECT_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "5a7d7e9c-4770-4a11-9bf7-a74bf5dcb34e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if configSchema not found.",
                "fullTitle": "Enterprise ProjectParam.Delete Should get error, if configSchema not found.",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.delete(apiURL + project.uid)\n    .set({ authtoken: dummyUser.authtoken, project_uid: project.uid })\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).equal(messageList.NO_DATA_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "a98fa66e-2f4a-46ba-ba73-bd353a03328b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8737ba2c-aa30-444d-ab20-eae7fad3fbad",
              "a714a350-ef42-426a-a620-b79de1b6a7a6",
              "5a7d7e9c-4770-4a11-9bf7-a74bf5dcb34e",
              "a98fa66e-2f4a-46ba-ba73-bd353a03328b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 51,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "e5580df2-3be8-467d-b8c9-c8d57f6017f9",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\project\\getProject.js",
        "file": "\\controllers\\test\\project\\getProject.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "2bb015c9-e3bb-4489-985d-97e2bcc78b6e",
            "title": "Project.Get",
            "fullFile": "C:\\work\\api\\controllers\\test\\project\\getProject.js",
            "file": "\\controllers\\test\\project\\getProject.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Project.Get \"before all\" hook",
                "timedOut": false,
                "duration": 101,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data;\n        async.waterfall([\n            function(cbk) {\n                dummyUser = orgData.owner\n                dummyUser.authtoken = dummyUser.authtoken\n                projectData.owner_uid = dummyUser.uid\n                projectData.env_uid = dummyUser.default_env\n                api.post(apiURL)\n                    .set('authtoken', dummyUser.authtoken)\n                    .send(projectData)\n                    .expect(httpStatus.CREATED)\n                    .end(function(err, result) {\n                        cbk(err, result);\n                    })\n            },\n            function(res, cbk) {\n                project = res.body.output\n                flowData.created_by = dummyUser.uid\n                flowData.updated_by = dummyUser.uid\n                flowData.project_uid = project.uid\n                api.post(flowURL)\n                    .set('authtoken', dummyUser.authtoken)\n                    .send(flowData)\n                    .expect(httpStatus.CREATED)\n                    .end(function(err, res) {\n                        cbk(err, res)\n                    })\n            }\n        ], function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                userFlow = res.body.output\n                done()\n            }\n        })\n    })\n})",
                "err": {},
                "isRoot": false,
                "uuid": "5b2deb59-f008-41c3-b597-b13c6168b7a9",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Project.Get \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.parallel([\n    function(cb) {\n        _models.Project.remove({ uid: project.uid }, function(err) {\n            cb(err)\n        })\n    }\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "9511221b-ffc5-4586-b8e6-1595cfcfb03b",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise Project.Get Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + project.uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "a43f026d-2d70-442e-ba67-63f8451d0065",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if user tried to get project which not exists in an environment.",
                "fullTitle": "Enterprise Project.Get Should get error, if user tried to get project which not exists in an environment.",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nprojectData.owner_uid = dummyUser.uid\nprojectData.env_uid = dummyUser.default_env\napi.get(apiURL + 'project.uid')\n    .set({ authtoken: dummyUser.authtoken })\n    .send(projectData)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).equal(messageList.PROJECT_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "971898ad-5967-4fb7-a499-ae692c820321",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get project, if user send valid data.",
                "fullTitle": "Enterprise Project.Get Should get project, if user send valid data.",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + project.uid)\n    .set({ authtoken: dummyUser.authtoken })\n    .send(projectData)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //expect(res.body.output).to.have.any.keys(['project', 'flows', 'configs'])\n            expect(res.body.output.name).equal(projectData.name);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "768f0d72-35a4-4b67-8b63-3275c0187194",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get project, if normal user tried to get Project which is allocated to him.",
                "fullTitle": "Enterprise Project.Get Should get project, if normal user tried to get Project which is allocated to him.",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar proj1 = _.find(orgData.org_projects, { name: 'proj1' })\napi.get(apiURL + proj1.uid)\n    .set({ authtoken: orgData.role1.authtoken, org_uid: orgData.organization.uid })\n    .send(projectData)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //expect(res.body.output).to.have.any.keys(['project', 'flows', 'configs'])\n            expect(res.body.output.name).equal(proj1.name);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "f505ce9e-6a90-4a39-a7aa-77a3de95501f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if normal user tried to get Project which is not allocated to him.",
                "fullTitle": "Enterprise Project.Get Should get error, if normal user tried to get Project which is not allocated to him.",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar proj3 = _.find(orgData.org_projects, { name: 'proj3' })\napi.get(apiURL + proj3.uid)\n    .set({ authtoken: orgData.role1.authtoken, org_uid: orgData.organization.uid })\n    .send(projectData)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //expect(res.body.output).to.have.any.keys(['project', 'flows', 'configs'])\n            expect(res.body.error.message).equal(messageList.ACCESS_DENIED);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "8de48c50-d557-4e22-966c-9a723545fc17",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if billing manager tried to get Project which is not allocated to him.",
                "fullTitle": "Enterprise Project.Get Should get error, if billing manager tried to get Project which is not allocated to him.",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar proj1 = _.find(orgData.org_projects, { name: 'proj1' })\napi.get(apiURL + proj1.uid)\n    .set({ authtoken: orgData.billing_manager.authtoken, org_uid: orgData.organization.uid })\n    .send(projectData)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //expect(res.body.output).to.have.any.keys(['project', 'flows', 'configs'])\n            expect(res.body.error.message).equal(messageList.ACCESS_DENIED);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "7a833cd9-1bda-4f0e-9e67-e9090975a678",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get project, if admin of org tried to get Project.",
                "fullTitle": "Enterprise Project.Get Should get project, if admin of org tried to get Project.",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar proj1 = _.find(orgData.org_projects, { name: 'proj1' })\napi.get(apiURL + proj1.uid)\n    .set({ authtoken: orgData.admin.authtoken, org_uid: orgData.organization.uid })\n    .send(projectData)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //expect(res.body.output).to.have.any.keys(['project', 'flows', 'configs'])\n            expect(res.body.output.name).equal(proj1.name);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "2e16b776-0b71-4a7a-b025-afc9e4fcc91c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get project, if developer of org tried to get Project.",
                "fullTitle": "Enterprise Project.Get Should get project, if developer of org tried to get Project.",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar proj1 = _.find(orgData.org_projects, { name: 'proj1' })\napi.get(apiURL + proj1.uid)\n    .set({ authtoken: orgData.developer.authtoken, org_uid: orgData.organization.uid })\n    .send(projectData)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //expect(res.body.output).to.have.any.keys(['project', 'flows', 'configs'])\n            expect(res.body.output.name).equal(proj1.name);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "53dce374-6498-492b-839f-af7075647b58",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a43f026d-2d70-442e-ba67-63f8451d0065",
              "971898ad-5967-4fb7-a499-ae692c820321",
              "768f0d72-35a4-4b67-8b63-3275c0187194",
              "f505ce9e-6a90-4a39-a7aa-77a3de95501f",
              "8de48c50-d557-4e22-966c-9a723545fc17",
              "7a833cd9-1bda-4f0e-9e67-e9090975a678",
              "2e16b776-0b71-4a7a-b025-afc9e4fcc91c",
              "53dce374-6498-492b-839f-af7075647b58"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 103,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "b60a59f4-ea41-4138-a6e1-a0fe4c45a005",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\project\\getProjectParam.js",
        "file": "\\controllers\\test\\project\\getProjectParam.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "641212a7-4368-434b-b4e6-a9a01b1e2f57",
            "title": "ProjectParam.Get",
            "fullFile": "C:\\work\\api\\controllers\\test\\project\\getProjectParam.js",
            "file": "\\controllers\\test\\project\\getProjectParam.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise ProjectParam.Get \"before all\" hook",
                "timedOut": false,
                "duration": 129,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(user, cbk) {\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    },\n    function(result, cbk) {\n        dummyUser = result.body.output;\n        projectData.owner_uid = dummyUser.uid\n        projectData.env_uid = dummyUser.default_env\n        api.post(projectURL)\n            .set('authtoken', dummyUser.authtoken)\n            .send(projectData)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    },\n    function(res, cbk) {\n        project = res.body.output\n        api.post(apiURL)\n            .set({ authtoken: dummyUser.authtoken, project_uid: project.uid })\n            .send(paramData)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                cbk(err, res)\n            })\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        configSchema = res.body.output\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "0b5a4d4b-d78f-473e-b6b9-022b398330da",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise ProjectParam.Get \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.parallel([\n    function(cb) {\n        _models.Project.remove({ uid: project.uid }, function(err) {\n            cb(err)\n        })\n    },\n    function(cb) {\n        _models.ConfigSchema.remove({ uid: configSchema.uid }, function(err) {\n            cb(err)\n        })\n    }\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "fd23d441-544b-4922-ac9a-69ccbec56859",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise ProjectParam.Get Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + configSchema.uid)\n    .send(paramData)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "d643a344-fce3-43e7-af5a-3b617343bb8b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get project param, if user send valid data.",
                "fullTitle": "Enterprise ProjectParam.Get Should get project param, if user send valid data.",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + configSchema.uid)\n    .set({ authtoken: dummyUser.authtoken, project_uid: project.uid })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output.key).equal(paramData.key);\n            expect(res.body.output.value).equal(paramData.value);\n            expect(res.body.output).not.have.all.keys(['param'])\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "2c4ef660-3139-40aa-8dae-79a95bd88131",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if project not found.",
                "fullTitle": "Enterprise ProjectParam.Get Should get error, if project not found.",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + project.uid)\n    .set({ authtoken: dummyUser.authtoken, project_uid: 'ABC' })\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).equal(messageList.PROJECT_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "fd0249a4-1842-4325-9b0e-90df19493e46",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if configSchema not found.",
                "fullTitle": "Enterprise ProjectParam.Get Should get error, if configSchema not found.",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + project.uid)\n    .set({ authtoken: dummyUser.authtoken, project_uid: project.uid })\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).equal(messageList.NO_DATA_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "78aca646-4681-4bd1-a50a-89bea4ff7c4d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d643a344-fce3-43e7-af5a-3b617343bb8b",
              "2c4ef660-3139-40aa-8dae-79a95bd88131",
              "fd0249a4-1842-4325-9b0e-90df19493e46",
              "78aca646-4681-4bd1-a50a-89bea4ff7c4d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 50,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "30eddd38-b73b-4e91-9b75-8b5a43691165",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\project\\listProjectParams.js",
        "file": "\\controllers\\test\\project\\listProjectParams.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "0048e84f-68a9-4063-abba-0ed6ad4ca492",
            "title": "ProjectParam.List",
            "fullFile": "C:\\work\\api\\controllers\\test\\project\\listProjectParams.js",
            "file": "\\controllers\\test\\project\\listProjectParams.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise ProjectParam.List \"before all\" hook",
                "timedOut": false,
                "duration": 129,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(user, cbk) {\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    },\n    function(result, cbk) {\n        dummyUser = result.body.output;\n        projectData.owner_uid = dummyUser.uid\n        projectData.env_uid = dummyUser.default_env\n        api.post(projectURL)\n            .set('authtoken', dummyUser.authtoken)\n            .send(projectData)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    },\n    function(res, cbk) {\n        project = res.body.output\n        api.post(apiURL)\n            .set({ authtoken: dummyUser.authtoken, project_uid: project.uid })\n            .send(paramData)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                cbk(err, res)\n            })\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        configSchema = res.body.output\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "3ecdc3cf-ca77-4b52-8d7e-a04c96009201",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise ProjectParam.List \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.parallel([\n    function(cb) {\n        _models.Project.remove({ uid: project.uid }, function(err) {\n            cb(err)\n        })\n    },\n    function(cb) {\n        _models.ConfigSchema.remove({ uid: configSchema.uid }, function(err) {\n            cb(err)\n        })\n    }\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "1b0a14be-0cfe-4d4d-8110-230b6307f1ee",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise ProjectParam.List Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .send(paramData)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "5bf6d24d-a154-4686-ba23-a856fa0a50e6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get project params, if user send valid data.",
                "fullTitle": "Enterprise ProjectParam.List Should get project params, if user send valid data.",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set({ authtoken: dummyUser.authtoken, project_uid: project.uid })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output.length).equal(1)\n            expect(_.first(res.body.output)).not.have.all.keys(['param'])\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "69ec1e78-4840-4617-8522-c18784a698bf",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "5bf6d24d-a154-4686-ba23-a856fa0a50e6",
              "69ec1e78-4840-4617-8522-c18784a698bf"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 21,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "f75b746c-1014-40b7-b4f5-068e70ca749a",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\project\\listProjects.js",
        "file": "\\controllers\\test\\project\\listProjects.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "6db8ed68-67a8-4cda-a3ec-7506e8be878a",
            "title": "Project.List",
            "fullFile": "C:\\work\\api\\controllers\\test\\project\\listProjects.js",
            "file": "\\controllers\\test\\project\\listProjects.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Project.List \"before all\" hook",
                "timedOut": false,
                "duration": 78,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data;\n        async.waterfall([\n            function(cbk) {\n                dummyUser = orgData.owner;\n                dummyUser.authtoken = dummyUser.authtoken;\n                projectData.owner_uid = dummyUser.uid\n                projectData.env_uid = dummyUser.default_env\n                api.post(apiURL)\n                    .set('authtoken', dummyUser.authtoken)\n                    .send(projectData)\n                    .expect(httpStatus.CREATED)\n                    .end(function(err, result) {\n                        cbk(err, result);\n                    })\n            }\n        ], function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                project = res.body.output\n                done()\n            }\n        })\n    });\n})",
                "err": {},
                "isRoot": false,
                "uuid": "9222acb8-c448-453e-b36c-5e4a1fad5bf7",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Project.List \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.parallel([\n    function(cb) {\n        _models.Project.remove({ uid: project.uid }, function(err) {\n            cb(err)\n        })\n    }\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "ad6b433f-b2f9-4dd1-afcc-adb77e42f65c",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise Project.List Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "de618747-0c8c-42c9-bf63-9ca07a345ce1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get project list.",
                "fullTitle": "Enterprise Project.List Should get project list.",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set({ authtoken: dummyUser.authtoken })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output.projects.length).equal(2);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "36713c40-fa01-4a6c-86b4-7140acc86e54",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get project list.",
                "fullTitle": "Enterprise Project.List Should get project list.",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n\napi.get(apiURL + '?q=' + projectData.name)\n    .set({ authtoken: dummyUser.authtoken })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(_.first(res.body.output.projects).name).equal(projectData.name);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "4228a61f-950d-49ac-9a1b-f7c52d05e2a4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "billing manager should get defualt project only in list call.",
                "fullTitle": "Enterprise Project.List billing manager should get defualt project only in list call.",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set({ authtoken: orgData.billing_manager.authtoken, org_uid: orgData.organization.uid })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output.count).to.be.equal(1)\n            expect(_.first(res.body.output.projects).name).to.be.equal(config.default_project)\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "ecf72b6f-3a4e-494c-9f17-fc5258a3e05c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "admin should get all projects of an org in list call.",
                "fullTitle": "Enterprise Project.List admin should get all projects of an org in list call.",
                "timedOut": false,
                "duration": 19,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set({ authtoken: orgData.admin.authtoken, org_uid: orgData.organization.uid })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output.count).to.be.equal(5)\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "d2a82e39-e387-4265-aa36-3d3d10fc9f86",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "custom role user should get projects assigned to him in list call.",
                "fullTitle": "Enterprise Project.List custom role user should get projects assigned to him in list call.",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set({ authtoken: orgData.role1.authtoken, org_uid: orgData.organization.uid })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output.count).to.be.equal(3)\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "a7bbe668-8e18-496c-8424-aa3035a14030",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "owner of org should get all projects of org.",
                "fullTitle": "Enterprise Project.List owner of org should get all projects of org.",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set({ authtoken: dummyUser.authtoken, org_uid: orgData.organization.uid })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output.projects.length).equal(5);\n            expect(res.body.output.projects[0].org_uid).equal(orgData.organization.uid);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "747a480b-0074-409e-b58d-150a09fd5d45",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "de618747-0c8c-42c9-bf63-9ca07a345ce1",
              "36713c40-fa01-4a6c-86b4-7140acc86e54",
              "4228a61f-950d-49ac-9a1b-f7c52d05e2a4",
              "ecf72b6f-3a4e-494c-9f17-fc5258a3e05c",
              "d2a82e39-e387-4265-aa36-3d3d10fc9f86",
              "a7bbe668-8e18-496c-8424-aa3035a14030",
              "747a480b-0074-409e-b58d-150a09fd5d45"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 95,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "08723853-3dcb-48ec-bb70-561ece8b5015",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\project\\updateProject.js",
        "file": "\\controllers\\test\\project\\updateProject.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "715da809-6963-4630-8d7d-fa5a110cb9ac",
            "title": "Project.Update",
            "fullFile": "C:\\work\\api\\controllers\\test\\project\\updateProject.js",
            "file": "\\controllers\\test\\project\\updateProject.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Project.Update \"before all\" hook",
                "timedOut": false,
                "duration": 112,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(user, cbk) {\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    },\n    function(result, cbk) {\n        dummyUser = result.body.output;\n        projectData.user_uid = dummyUser.uid\n        projectData.env_uid = dummyUser.default_env\n        api.post(apiURL)\n            .set('authtoken', dummyUser.authtoken)\n            .send(projectData)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        project = res.body.output\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "3a3891b6-27db-4c94-9c35-218d01f41832",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Project.Update \"after all\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.parallel([\n    function(cb) {\n        _models.Project.remove({ uid: project.uid }, function(err) {\n            cb(err)\n        })\n    }\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "82ace8c1-e3e5-4aa6-bbee-d61b7aed9c5a",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise Project.Update Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put(apiURL + project.uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "95b0e3a4-6571-4368-b2b2-ae24217db332",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if user tried to update project which not exists in an environment.",
                "fullTitle": "Enterprise Project.Update Should get error, if user tried to update project which not exists in an environment.",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nprojectData.owner_uid = dummyUser.uid\nprojectData.env_uid = dummyUser.default_env\napi.put(apiURL + 'project.uid')\n    .set({ authtoken: dummyUser.authtoken })\n    .send(projectData)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).equal(messageList.PROJECT_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "53d036ef-b4f6-4689-9e7a-71986774a79c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error if user tried to update project with name already exists in an environment.",
                "fullTitle": "Enterprise Project.Update Should get error if user tried to update project with name already exists in an environment.",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar project1 = _.cloneDeep(projectData)\nproject1.owner_uid = dummyUser.uid\nproject1.env_uid = dummyUser.default_env\napi.put(apiURL + project.uid)\n    .set({ authtoken: dummyUser.authtoken, env_uid: dummyUser.env_uid || dummyUser.default_env })\n    .send(project1)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).equal(messageList.PROJECT_NAME_UNIQUE_ERROR);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "025682fd-794a-4ff5-bba8-e2be35fc98b7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error if user tried to update project which is default.",
                "fullTitle": "Enterprise Project.Update Should get error if user tried to update project which is default.",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar project1 = _.cloneDeep(projectData)\nproject1.owner_uid = dummyUser.uid\nproject1.env_uid = dummyUser.default_env\napi.put(apiURL + dummyUser.default_project)\n    .set({ authtoken: dummyUser.authtoken, env_uid: dummyUser.env_uid || dummyUser.default_env })\n    .send(project1)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).equal(messageList.DEFAULT_PROJECT_DELETE_ERROR);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "554b72df-3635-476c-9376-7dd070b2075e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should update project, if user send valid data.",
                "fullTitle": "Enterprise Project.Update Should update project, if user send valid data.",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nprojectData.name = 'updated project'\napi.put(apiURL + project.uid)\n    .set({ authtoken: dummyUser.authtoken })\n    .send(projectData)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output.name).equal(projectData.name);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "a91a57b2-f487-4a5e-9521-a844b936816b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error if  project name is blank.",
                "fullTitle": "Enterprise Project.Update Should get error if  project name is blank.",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nprojectData.name = ''\nprojectData.owner_uid = dummyUser.uid\nprojectData.env_uid = dummyUser.default_env\napi.put(apiURL + project.uid)\n    .set({ authtoken: dummyUser.authtoken, env_uid: dummyUser.env_uid || dummyUser.default_env })\n    .send(projectData)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            expect(res.body.error.name.message).equal(messageList.PROJECT_NAME_REQUIRED);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "239f901b-ec0a-4616-ab31-834dc7737a67",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "95b0e3a4-6571-4368-b2b2-ae24217db332",
              "53d036ef-b4f6-4689-9e7a-71986774a79c",
              "025682fd-794a-4ff5-bba8-e2be35fc98b7",
              "554b72df-3635-476c-9376-7dd070b2075e",
              "a91a57b2-f487-4a5e-9521-a844b936816b",
              "239f901b-ec0a-4616-ab31-834dc7737a67"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 82,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "7e896912-984d-4ba2-a1f0-ed9f1ef7971d",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\project\\updateProjectParam.js",
        "file": "\\controllers\\test\\project\\updateProjectParam.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "dfb5b430-2bc4-4000-a7ed-eab1e20e05d4",
            "title": "ProjectParam.Update",
            "fullFile": "C:\\work\\api\\controllers\\test\\project\\updateProjectParam.js",
            "file": "\\controllers\\test\\project\\updateProjectParam.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise ProjectParam.Update \"before all\" hook",
                "timedOut": false,
                "duration": 82,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data;\n        async.waterfall([\n            function(cbk) {\n                dummyUser = orgData.owner;\n                dummyUser.authtoken = dummyUser.authtoken;\n                projectData.owner_uid = dummyUser.uid\n                projectData.env_uid = dummyUser.default_env\n                api.post(projectURL)\n                    .set('authtoken', dummyUser.authtoken)\n                    .send(projectData)\n                    .expect(httpStatus.CREATED)\n                    .end(function(err, result) {\n                        cbk(err, result);\n                    })\n            },\n            function(res, cbk) {\n                project = res.body.output\n                api.post(apiURL)\n                    .set({ authtoken: dummyUser.authtoken, project_uid: project.uid })\n                    .send(paramData)\n                    .expect(httpStatus.CREATED)\n                    .end(function(err, res) {\n                        cbk(err, res)\n                    })\n            }\n        ], function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                configSchema = res.body.output\n                done()\n            }\n        })\n    });\n})",
                "err": {},
                "isRoot": false,
                "uuid": "f5c4d7c4-25a5-4e96-baf9-c68956cc0887",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise ProjectParam.Update \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.parallel([\n    function(cb) {\n        _models.Project.remove({ uid: project.uid }, function(err) {\n            cb(err)\n        })\n    },\n    function(cb) {\n        _models.ConfigSchema.remove({ uid: configSchema.uid }, function(err) {\n            cb(err)\n        })\n    }\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "27700878-fff4-47ae-aedc-241ddbcea9fd",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise ProjectParam.Update Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put(apiURL + configSchema.uid)\n    .send(paramData)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "b4b1bb2e-9f33-47c9-8759-91269f4e0c70",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should update project param, if user send valid data.",
                "fullTitle": "Enterprise ProjectParam.Update Should update project param, if user send valid data.",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar paramData2 = {\n    key: \"key2\",\n    value: \"value2\",\n    required: false,\n    isPassword: true,\n    hasError: false\n}\nparamData2.key = 'key2'\napi.put(apiURL + configSchema.uid)\n    .set({ authtoken: dummyUser.authtoken, project_uid: project.uid })\n    .send(paramData2)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output.param.key).equal(paramData2.key);\n            expect(res.body.output.param.value).equal(paramData2.value);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "c1284ff3-3ea6-4d78-a2aa-59807f6e5b5d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if unauthorised user tried to update data of other user.",
                "fullTitle": "Enterprise ProjectParam.Update Should get error, if unauthorised user tried to update data of other user.",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put(apiURL + project.uid)\n    .set({ authtoken: orgData.role1.authtoken })\n    .send({})\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).equal(messageList.NO_DATA_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "d232d20a-1b53-47e3-a7d1-c804601d806e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if project not found.",
                "fullTitle": "Enterprise ProjectParam.Update Should get error, if project not found.",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put(apiURL + project.uid)\n    .set({ authtoken: dummyUser.authtoken, project_uid: 'ABC' })\n    .send({})\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).equal(messageList.PROJECT_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "621ea122-473d-4724-9c13-97ed4c6152d4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if configSchema not found.",
                "fullTitle": "Enterprise ProjectParam.Update Should get error, if configSchema not found.",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar paramData3 = {\n    key: \"key2\",\n    value: \"value2\",\n    required: false,\n    isPassword: true,\n    hasError: false\n}\nparamData3.key = 'key2'\napi.put(apiURL + project.uid)\n    .set({ authtoken: dummyUser.authtoken, project_uid: project.uid })\n    .send(paramData3)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).equal(messageList.NO_DATA_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "0b675eb5-d9bc-4a10-9a0d-5548005c631e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b4b1bb2e-9f33-47c9-8759-91269f4e0c70",
              "c1284ff3-3ea6-4d78-a2aa-59807f6e5b5d",
              "d232d20a-1b53-47e3-a7d1-c804601d806e",
              "621ea122-473d-4724-9c13-97ed4c6152d4",
              "0b675eb5-d9bc-4a10-9a0d-5548005c631e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 47,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "dad9af07-5186-4eea-93e4-7736c5f8fde7",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\promoCode\\create.enterprise.js",
        "file": "\\controllers\\test\\promoCode\\create.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "c8b68c38-df14-4b11-93fa-8768f1c6467b",
            "title": "PromoCode",
            "fullFile": "C:\\work\\api\\controllers\\test\\promoCode\\create.enterprise.js",
            "file": "\\controllers\\test\\promoCode\\create.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "6e8c506a-05b9-4e64-9056-480a16241630",
                "title": "PromoCode.Create",
                "fullFile": "C:\\work\\api\\controllers\\test\\promoCode\\create.enterprise.js",
                "file": "\\controllers\\test\\promoCode\\create.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise PromoCode PromoCode.Create \"before each\" hook",
                    "timedOut": false,
                    "duration": 8,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n    _models.Plan.remove({ $or: [{ name: new RegExp('^RANDOM_PLAN+', \"i\") }, { name: new RegExp('^utest_cases_Standard+', \"i\") }] }, function(error, plan) {\n        _models.Mail.remove({ $or: [{ to: new RegExp('^test.user+', \"i\") }, { to: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n            _models.Promocode.remove({}, function(error, promo) {\n                _models.UserPromocode.remove({}, function(error, userPromos) {\n                    savePlanEntries({\n                        count: 5\n                    }, function(error, planEntries) {\n                        _planEntries = planEntries;\n                        done();\n                    });\n                });\n            });\n        });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "763f32ae-9ce7-4070-a3e5-c93f48c72b7f",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise PromoCode PromoCode.Create \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9cb24a10-b6e4-40ca-9778-b989e43aa4ad",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should add only promocode to user.",
                    "fullTitle": "Enterprise PromoCode PromoCode.Create Should add only promocode to user.",
                    "timedOut": false,
                    "duration": 102,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\naddPromcode({\n    count: 1,\n    promo_code: \"PROMO_CODE\",\n    domain: \"raweng.com\",\n    redemption_count: 1,\n    redemption_start: moment(new Date()).subtract(1, 'days'),\n    redemption_end: moment(new Date()).add(1, 'days'),\n    allowed_plans: [],\n    default_plan: null,\n    addon_credits: 5,\n    addon_flows: 2,\n    addon_triggers: 2,\n    addon_trial_days: 10,\n    braintree_discount_id: \"\",\n    promo_features_expiration: moment(new Date()).add(10, 'days')\n}, function(error, promoCodes) {\n    signUpUser({\n        promo_code: promoCodes[0].promo_code\n    }, function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            (res.body.output.uid != \"\").should.equal(true);\n            done();\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "df75af86-2b06-48eb-9708-ee70304105df",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as promocode is not allowed for trial plan.",
                    "fullTitle": "Enterprise PromoCode PromoCode.Create Should give error as promocode is not allowed for trial plan.",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\naddPromcode({\n    count: 1,\n    promo_code: \"PROMO_CODE\",\n    domain: \"raweng.com\",\n    redemption_count: 1,\n    redemption_start: moment(new Date()).subtract(1, 'days'),\n    redemption_end: moment(new Date()).add(1, 'days'),\n    allowed_plans: [_planEntries[0]],\n    default_plan: null,\n    addon_credits: 5,\n    addon_flows: 2,\n    addon_triggers: 2,\n    addon_trial_days: 10,\n    braintree_discount_id: \"\",\n    promo_features_expiration: moment(new Date()).add(10, 'days')\n}, function(error, promoCodes) {\n    signUpUser({\n        promo_code: promoCodes[0].promo_code,\n        status: httpStatus.BAD_REQUEST\n    }, function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            (res.body.error.message).should.equal(messageList.PROMOCODE_NOT_ALLOWED_FOR_DEFAULT);\n            done();\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4c7e122e-483f-4f2a-ae7e-02d576a94edb",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should add promocode and its default plan to user.",
                    "fullTitle": "Enterprise PromoCode PromoCode.Create Should add promocode and its default plan to user.",
                    "timedOut": false,
                    "duration": 99,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\naddPromcode({\n    count: 1,\n    promo_code: \"PROMO_CODE\",\n    domain: \"raweng.com\",\n    redemption_count: 1,\n    redemption_start: moment(new Date()).subtract(1, 'days'),\n    redemption_end: moment(new Date()).add(1, 'days'),\n    allowed_plans: [_planEntries[0]],\n    default_plan: _planEntries[0],\n    addon_credits: 5,\n    addon_flows: 2,\n    addon_triggers: 2,\n    addon_trial_days: 10,\n    braintree_discount_id: \"\",\n    promo_features_expiration: moment(new Date()).add(10, 'days')\n}, function(error, promoCodes) {\n    signUpUser({\n        promo_code: promoCodes[0].promo_code\n    }, function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            (res.body.output.uid != \"\" &&\n                res.body.output.plan[0].uid == _planEntries[0].uid).should.equal(true);\n            done();\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "91e417ac-c166-49c3-bd40-a377b182bca1",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should add promocode to user and return proper user_plan.",
                    "fullTitle": "Enterprise PromoCode PromoCode.Create Should add promocode to user and return proper user_plan.",
                    "timedOut": false,
                    "duration": 98,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\naddPromcode({\n    count: 1,\n    promo_code: \"PROMO_CODE\",\n    domain: \"raweng.com\",\n    redemption_count: 1,\n    redemption_start: moment(new Date()).subtract(1, 'days'),\n    redemption_end: moment(new Date()).add(1, 'days'),\n    allowed_plans: [_planEntries[0]],\n    default_plan: _planEntries[0],\n    addon_credits: 5,\n    addon_flows: 2,\n    addon_triggers: 2,\n    addon_trial_days: 10,\n    braintree_discount_id: \"\",\n    promo_features_expiration: moment(new Date()).add(10, 'days')\n}, function(error, promoCodes) {\n    signUpUser({\n        promo_code: promoCodes[0].promo_code\n    }, function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var user = res.body.output;\n            var isValid = typeof(user._id) == \"undefined\" &&\n                typeof(user.__v) == \"undefined\" &&\n                user.user_plan.reimburse.credits == 2505 &&\n                user.user_plan.reimburse.period == 30 &&\n                user.user_plan.trigger.count == 7;\n            isValid.should.equal(true);\n            done();\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cf878f21-814d-495d-9998-9d9131885037",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as promocode invalid domain.",
                    "fullTitle": "Enterprise PromoCode PromoCode.Create Should give error as promocode invalid domain.",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\naddPromcode({\n    count: 1,\n    promo_code: \"PROMO_CODE\",\n    domain: \"raweng.com\",\n    redemption_count: 1,\n    redemption_start: moment(new Date()).subtract(1, 'days'),\n    redemption_end: moment(new Date()).add(1, 'days'),\n    allowed_plans: [_planEntries[0]],\n    default_plan: _planEntries[0],\n    addon_credits: 5,\n    addon_flows: 2,\n    addon_triggers: 2,\n    addon_trial_days: 10,\n    braintree_discount_id: \"\",\n    promo_features_expiration: moment(new Date()).add(10, 'days')\n}, function(error, promoCodes) {\n    signUpUser({\n        promo_code: promoCodes[0].promo_code,\n        email: \"test.user+1@built.io\",\n        status: httpStatus.BAD_REQUEST\n    }, function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            (res.body.error.message).should.equal(messageList.PROMOCODE_DOMAIN_NOT_ALLOWED);\n            done();\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f44d7d1c-9c41-47bc-a6a7-f92e2566e418",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as invalid promocode.",
                    "fullTitle": "Enterprise PromoCode PromoCode.Create Should give error as invalid promocode.",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\naddPromcode({\n    count: 1,\n    promo_code: \"PROMO_CODE\",\n    domain: \"raweng.com\",\n    redemption_count: 1,\n    redemption_start: moment(new Date()).subtract(1, 'days'),\n    redemption_end: moment(new Date()).add(1, 'days'),\n    allowed_plans: [_planEntries[0]],\n    default_plan: _planEntries[0],\n    addon_credits: 5,\n    addon_flows: 2,\n    addon_triggers: 2,\n    addon_trial_days: 10,\n    braintree_discount_id: \"\",\n    promo_features_expiration: moment(new Date()).add(10, 'days')\n}, function(error, promoCodes) {\n    signUpUser({\n        promo_code: \"FAKE_PROMO_CODE\",\n        status: httpStatus.BAD_REQUEST\n    }, function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            (res.body.error.message).should.equal(messageList.PROMOCODE_INVALID);\n            done();\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5a11f30c-9953-45ff-a7c6-47d51d0126af",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give invalid promocode error for future promocode.",
                    "fullTitle": "Enterprise PromoCode PromoCode.Create Should give invalid promocode error for future promocode.",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\naddPromcode({\n    count: 1,\n    promo_code: \"PROMO_CODE\",\n    domain: \"raweng.com\",\n    redemption_count: 1,\n    redemption_start: moment(new Date()).add(2, 'days'),\n    redemption_end: moment(new Date()).add(3, 'days'),\n    allowed_plans: [_planEntries[0]],\n    default_plan: _planEntries[0],\n    addon_credits: 5,\n    addon_flows: 2,\n    addon_triggers: 2,\n    addon_trial_days: 10,\n    braintree_discount_id: \"\",\n    promo_features_expiration: moment(new Date()).add(10, 'days')\n}, function(error, promoCodes) {\n    signUpUser({\n        promo_code: promoCodes[0].promo_code,\n        status: httpStatus.BAD_REQUEST\n    }, function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            (res.body.error.message).should.equal(messageList.PROMOCODE_INVALID);\n            done();\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5fbbc05e-f0b3-440e-9cfc-ea6e45a14f3d",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give promocode expire error.",
                    "fullTitle": "Enterprise PromoCode PromoCode.Create Should give promocode expire error.",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\naddPromcode({\n    count: 1,\n    promo_code: \"PROMO_CODE\",\n    domain: \"raweng.com\",\n    redemption_count: 1,\n    redemption_start: moment(new Date()).subtract(2, 'days'),\n    redemption_end: moment(new Date()).subtract(1, 'days'),\n    allowed_plans: [_planEntries[0]],\n    default_plan: _planEntries[0],\n    addon_credits: 5,\n    addon_flows: 2,\n    addon_triggers: 2,\n    addon_trial_days: 10,\n    braintree_discount_id: \"\",\n    promo_features_expiration: moment(new Date()).add(10, 'days')\n}, function(error, promoCodes) {\n    signUpUser({\n        promo_code: promoCodes[0].promo_code,\n        status: httpStatus.BAD_REQUEST\n    }, function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            (res.body.error.message).should.equal(messageList.PROMOCODE_EXPIRED);\n            done();\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "554f0c0a-958b-4306-b5c0-9e792e067838",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should allocate promocode to only two users.",
                    "fullTitle": "Enterprise PromoCode PromoCode.Create Should allocate promocode to only two users.",
                    "timedOut": false,
                    "duration": 216,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\naddPromcode({\n    count: 1,\n    promo_code: \"PROMO_CODE\",\n    domain: \"raweng.com\",\n    redemption_count: 2,\n    redemption_start: moment(new Date()).subtract(1, 'days'),\n    redemption_end: moment(new Date()).add(1, 'days'),\n    allowed_plans: [_planEntries[0]],\n    default_plan: _planEntries[0],\n    addon_credits: 5,\n    addon_flows: 2,\n    addon_triggers: 2,\n    addon_trial_days: 10,\n    braintree_discount_id: \"\",\n    promo_features_expiration: moment(new Date()).add(10, 'days')\n}, function(error, promoCodes) {\n    signUpUser({\n        email: \"test.user+1@raweng.com\",\n        promo_code: promoCodes[0].promo_code\n    }, function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            if (res.body.output.uid != \"\" &&\n                res.body.output.plan[0].uid == _planEntries[0].uid) {\n                signUpUser({\n                    email: \"test.user+2@raweng.com\",\n                    promo_code: promoCodes[0].promo_code\n                }, function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        if (res.body.output.uid != \"\" &&\n                            res.body.output.plan[0].uid == _planEntries[0].uid) {\n                            signUpUser({\n                                email: \"test.user+3@raweng.com\",\n                                promo_code: promoCodes[0].promo_code,\n                                status: httpStatus.BAD_REQUEST\n                            }, function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    (res.body.error.message).should.equal(messageList.PROMOCODE_OVER_REDEMPT);\n                                    done();\n                                }\n                            });\n                        } else {\n                            true.should.equal(false);\n                            done();\n                        }\n                    }\n                });\n            } else {\n                true.should.equal(false);\n                done();\n            }\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "76fabbc2-8665-4357-bf5e-a85e73abe883",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should add promocode add signup.",
                    "fullTitle": "Enterprise PromoCode PromoCode.Create Should add promocode add signup.",
                    "timedOut": false,
                    "duration": 94,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\naddPromcode({\n    count: 1,\n    promo_code: \"PROMO_CODE\",\n    domain: \"gmail.com\",\n    redemption_count: 1,\n    redemption_start: moment(new Date()).subtract(1, 'days'),\n    redemption_end: moment(new Date()).add(1, 'days'),\n    allowed_plans: [],\n    default_plan: null,\n    addon_credits: 5,\n    addon_flows: 2,\n    addon_triggers: 2,\n    addon_trial_days: 10,\n    braintree_discount_id: \"\",\n    promo_features_expiration: moment(new Date()).add(10, 'days')\n}, function(error, promoCodes) {\n    commonMock.setSignUpMocks(httpmock, \"enterprise\");\n    var tempRegistrationBody = getImmutable(registrationBody);\n    tempRegistrationBody.promo_code = promoCodes[0].promo_code;\n    tempRegistrationBody.email = \"test.user@gmail.com\";\n    api.post(\"/enterprise/v1/signup\")\n        .send(tempRegistrationBody)\n        .expect(httpStatus.CREATED)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                res.body.output.subscription.days.should.equal(40);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8d657cec-e10d-42e8-815a-33d412a8ed25",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "df75af86-2b06-48eb-9708-ee70304105df",
                  "4c7e122e-483f-4f2a-ae7e-02d576a94edb",
                  "91e417ac-c166-49c3-bd40-a377b182bca1",
                  "cf878f21-814d-495d-9998-9d9131885037",
                  "f44d7d1c-9c41-47bc-a6a7-f92e2566e418",
                  "5a11f30c-9953-45ff-a7c6-47d51d0126af",
                  "5fbbc05e-f0b3-440e-9cfc-ea6e45a14f3d",
                  "554f0c0a-958b-4306-b5c0-9e792e067838",
                  "76fabbc2-8665-4357-bf5e-a85e73abe883",
                  "8d657cec-e10d-42e8-815a-33d412a8ed25"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 677,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "1d1dd610-3c9c-4933-b94b-6d2b19add8fa",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\promoCode\\getUserList.enterprise.js",
        "file": "\\controllers\\test\\promoCode\\getUserList.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "39dbdb06-53ab-46b2-9d68-ae456a91e63b",
            "title": "PromoCode",
            "fullFile": "C:\\work\\api\\controllers\\test\\promoCode\\getUserList.enterprise.js",
            "file": "\\controllers\\test\\promoCode\\getUserList.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "add0568c-590b-45e7-8070-3edcf6a932d0",
                "title": "PromoCode.getUserList",
                "fullFile": "C:\\work\\api\\controllers\\test\\promoCode\\getUserList.enterprise.js",
                "file": "\\controllers\\test\\promoCode\\getUserList.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise PromoCode PromoCode.getUserList \"before each\" hook",
                    "timedOut": false,
                    "duration": 2939,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveRecords(function() {\n    savePlanEntries({\n        count: 5\n    }, function(error, planEntries) {\n        _planEntries = planEntries;\n        addPromcode({\n            count: 1,\n            promo_code: \"PROMO_CODE\",\n            domain: \"raweng.com\",\n            redemption_count: 30,\n            redemption_start: moment(new Date()).subtract(1, 'days'),\n            redemption_end: moment(new Date()).add(1, 'days'),\n            allowed_plans: [],\n            default_plan: _planEntries[0],\n            addon_credits: 5,\n            addon_flows: 2,\n            addon_active_flows: 2,\n            addon_triggers: 2,\n            addon_trial_days: 10,\n            braintree_discount_id: \"\",\n            promo_features_expiration: moment(new Date()).add(10, 'days')\n        }, function(error, promoCodes) {\n            addUsersWithPromocode({\n                count: 30,\n                promo_code: promoCodes[0].promo_code\n            }, function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    done();\n                }\n            });\n        });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "638aa500-1545-4c0b-a1d5-2ecc44c84d60",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise PromoCode PromoCode.getUserList \"after all\" hook",
                    "timedOut": false,
                    "duration": 2,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\nremoveRecords(function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c63e4b0d-2d1b-4f4b-9ccb-150cd1c26e4f",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get list users.",
                    "fullTitle": "Enterprise PromoCode PromoCode.getUserList Should get list users.",
                    "timedOut": false,
                    "duration": 77,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set(\"ui_admin_key\", config.UI_ADMIN_KEY)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isArray = Array.isArray(res.body.output.objects);\n            isArray.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3021dbfe-e680-4f5c-a646-c9edf14009c1",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should add promocode to user and return proper user_plan.",
                    "fullTitle": "Enterprise PromoCode PromoCode.getUserList Should add promocode to user and return proper user_plan.",
                    "timedOut": false,
                    "duration": 74,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set(\"ui_admin_key\", config.UI_ADMIN_KEY)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isArray = Array.isArray(res.body.output.objects);\n            if (isArray) {\n                var isValid = true;\n                _.forEach(res.body.output.objects, function(user) {\n                    if (user.plan[0].uid == _planEntries[0].uid) {\n                        isValid = isValid && user.uid != \"\" &&\n                            typeof(user._id) == \"undefined\" &&\n                            typeof(user.__v) == \"undefined\" &&\n                            user.user_plan.reimburse.credits == 1005 &&\n                            user.user_plan.reimburse.period == 30 &&\n                            user.user_plan.trigger.count == 42 &&\n                            user.user_plan.flow.count == 102;\n                    }\n                });\n                isValid.should.equal(true);\n            } else {\n                true.should.equal(false);\n            }\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c6da68ec-ea73-4a59-a0d4-b9324d6146df",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of users by considering skip.",
                    "fullTitle": "Enterprise PromoCode PromoCode.getUserList Should get list of users by considering skip.",
                    "timedOut": false,
                    "duration": 67,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?skip=5\";\napi.get(filterURL)\n    .set(\"ui_admin_key\", config.UI_ADMIN_KEY)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            (Array.isArray(res.body.output.objects) &&\n                res.body.output.objects.length == 25 &&\n                res.body.output.count == 30).should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3e8ea50b-2f56-467f-948c-47901de11a0f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of users by considering limit.",
                    "fullTitle": "Enterprise PromoCode PromoCode.getUserList Should get list of users by considering limit.",
                    "timedOut": false,
                    "duration": 18,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?limit=5\";\napi.get(filterURL)\n    .set(\"ui_admin_key\", config.UI_ADMIN_KEY)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            (Array.isArray(res.body.output.objects) &&\n                res.body.output.objects.length == 5 &&\n                res.body.output.count == 30).should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2d3b2f32-8bc2-4a50-a629-31e8b8ebda2f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of promocode applied users by considering skip/limit.",
                    "fullTitle": "Enterprise PromoCode PromoCode.getUserList Should get list of promocode applied users by considering skip/limit.",
                    "timedOut": false,
                    "duration": 31,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?skip=5&limit=10\";\napi.get(filterURL)\n    .set(\"ui_admin_key\", config.UI_ADMIN_KEY)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            (Array.isArray(res.body.output.objects) &&\n                res.body.output.objects.length == 10 &&\n                res.body.output.count == 30).should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7f1dd53c-1b89-4c01-aa94-f9734faf5ce3",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "3021dbfe-e680-4f5c-a646-c9edf14009c1",
                  "c6da68ec-ea73-4a59-a0d4-b9324d6146df",
                  "3e8ea50b-2f56-467f-948c-47901de11a0f",
                  "2d3b2f32-8bc2-4a50-a629-31e8b8ebda2f",
                  "7f1dd53c-1b89-4c01-aa94-f9734faf5ce3"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 267,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "2088c174-71f0-4360-80c0-73d244c7f999",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\promoCode\\userPromocodeAdd.enterprise.js",
        "file": "\\controllers\\test\\promoCode\\userPromocodeAdd.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "988dfe36-59b7-4d23-8dde-ab5ccd712ae9",
            "title": "PromoCode",
            "fullFile": "C:\\work\\api\\controllers\\test\\promoCode\\userPromocodeAdd.enterprise.js",
            "file": "\\controllers\\test\\promoCode\\userPromocodeAdd.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "57c8c844-06f9-4e27-8474-355254388048",
                "title": "PromoCode.userPromocodeAdd",
                "fullFile": "C:\\work\\api\\controllers\\test\\promoCode\\userPromocodeAdd.enterprise.js",
                "file": "\\controllers\\test\\promoCode\\userPromocodeAdd.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeAdd \"before each\" hook",
                    "timedOut": false,
                    "duration": 97,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({}, function(error, user) {\n    _models.Plan.remove({ $or: [{ name: new RegExp('^RANDOM_PLAN+', \"i\") }, { name: new RegExp('^utest_cases_Standard+', \"i\") }] }, function(error, plan) {\n        _models.Mail.remove({}, function(error, user) {\n            _models.Promocode.remove({}, function(error, promo) {\n                _models.UserPromocode.remove({}, function(error, userPromos) {\n                    signUpUser({}, function(err, res) {\n                        authToken = res.body.output.authtoken;\n                        token = res.body.output.activation_token;\n                        _id = res.body.output._id;\n                        uid = res.body.output.uid;\n                        savePlanEntries({\n                            count: 5\n                        }, function(error, planEntries) {\n                            _planEntries = planEntries;\n                            done();\n                        });\n                    });\n                });\n            });\n        });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e4e6496c-a6b3-413f-bb7e-791a63848fc4",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeAdd \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f0bfbe5f-93a0-43b7-a675-0ed679bc8876",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should add promocode to user.",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeAdd Should add promocode to user.",
                    "timedOut": false,
                    "duration": 29,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\naddPromcode({\n    count: 1,\n    promo_code: \"PROMO_CODE\",\n    domain: \"raweng.com\",\n    redemption_count: 1,\n    redemption_start: moment(new Date()).subtract(1, 'days'),\n    redemption_end: moment(new Date()).add(1, 'days'),\n    allowed_plans: [],\n    default_plan: null,\n    addon_credits: 5,\n    addon_flows: 2,\n    addon_triggers: 2,\n    addon_trial_days: 10,\n    braintree_discount_id: \"\",\n    promo_features_expiration: moment(new Date()).add(10, 'days')\n}, function(error, promoCodes) {\n    addPromcodeToUser({\n        promo_code: promoCodes[0].promo_code\n    }, function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var userPromoCode = res.body.output;\n            if (userPromoCode.user_uid == uid &&\n                userPromoCode.uid != \"\") {\n                commonMock.brainTreeClientToken(httpmock, \"enterprise\");\n                api.get(\"/enterprise/v1/user\")\n                    .set('authtoken', authToken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            var isValid = res.body.output.uid == uid &&\n                                typeof(res.body.output._id) == \"undefined\" &&\n                                typeof(res.body.output.__v) == \"undefined\" &&\n                                res.body.output.subscription.days == 40;\n                            isValid.should.equal(true);\n                            done();\n                        }\n                    });\n            } else {\n                true.should.equal(false);\n                done();\n            }\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9e415f1d-267c-40d3-8b66-a388edde63bd",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should add promocode to user and return proper user_plan.",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeAdd Should add promocode to user and return proper user_plan.",
                    "timedOut": false,
                    "duration": 114,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\naddPromcode({\n    count: 1,\n    promo_code: \"PROMO_CODE\",\n    domain: \"raweng.com\",\n    redemption_count: 1,\n    redemption_start: moment(new Date()).subtract(1, 'days'),\n    redemption_end: moment(new Date()).add(1, 'days'),\n    allowed_plans: [],\n    default_plan: null,\n    addon_credits: 5,\n    addon_flows: 2,\n    addon_triggers: 2,\n    addon_trial_days: 10,\n    braintree_discount_id: \"\",\n    promo_features_expiration: moment(new Date()).add(10, 'days')\n}, function(error, promoCodes) {\n    signUpUser({\n        email: \"test.user+1@raweng.com\",\n        plan: _planEntries[0].name\n    }, function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var authtoken = res.body.output.authtoken;\n            var user_uid = res.body.output.uid;\n            addPromcodeToUser({\n                promo_code: promoCodes[0].promo_code,\n                user_uid: user_uid,\n                status: httpStatus.OK\n            }, function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    api.get(\"/enterprise/v1/user\")\n                        .set('authtoken', authtoken)\n                        .expect(httpStatus.OK)\n                        .end(function(err, res) {\n                            if (err) {\n                                done(err);\n                            } else {\n                                var user = res.body.output;\n                                var isValid = user.uid == user_uid &&\n                                    typeof(user._id) == \"undefined\" &&\n                                    typeof(user.__v) == \"undefined\" &&\n                                    user.user_plan.reimburse.credits == 1005 &&\n                                    user.user_plan.reimburse.period == 30 &&\n                                    user.user_plan.trigger.count == 42 &&\n                                    user.user_plan.flow.count == 102;\n                                isValid.should.equal(true);\n                                done();\n                            }\n                        });\n                }\n            });\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "12cd43fd-b1f6-468c-9590-be67c261c130",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should re-again redempt another promocode.",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeAdd Should re-again redempt another promocode.",
                    "timedOut": false,
                    "duration": 24,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\naddPromcode({\n    count: 2,\n    promo_code: \"PROMO_CODE\",\n    domain: \"raweng.com\",\n    redemption_count: 1,\n    redemption_start: moment(new Date()).subtract(1, 'days'),\n    redemption_end: moment(new Date()).add(1, 'days'),\n    allowed_plans: [],\n    default_plan: null,\n    addon_credits: 5,\n    addon_flows: 2,\n    addon_triggers: 2,\n    addon_trial_days: 10,\n    braintree_discount_id: \"\",\n    promo_features_expiration: moment(new Date()).add(10, 'days')\n}, function(error, promoCodes) {\n    addPromcodeToUser({\n        promo_code: promoCodes[0].promo_code\n    }, function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var userPromoCode = res.body.output;\n            if (userPromoCode.user_uid == uid && userPromoCode.uid != \"\") {\n                var promocode_uid = userPromoCode.promocode_uid[0];\n                addPromcodeToUser({\n                    promo_code: promoCodes[1].promo_code\n                }, function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        var userPromoCode = res.body.output;\n                        (userPromoCode.user_uid == uid &&\n                            userPromoCode.uid != \"\" &&\n                            userPromoCode.promocode_uid[0] != promocode_uid).should.equal(true);\n                        done();\n                    }\n                });\n            } else {\n                true.should.equal(false);\n                done();\n            }\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e933cd83-e5fb-486c-bbf3-535ef8f5558f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should allocate promocode to only two users.",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeAdd Should allocate promocode to only two users.",
                    "timedOut": false,
                    "duration": 210,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\naddPromcode({\n    count: 1,\n    promo_code: \"PROMO_CODE\",\n    domain: \"raweng.com\",\n    redemption_count: 2,\n    redemption_start: moment(new Date()).subtract(1, 'days'),\n    redemption_end: moment(new Date()).add(1, 'days'),\n    allowed_plans: [],\n    default_plan: null,\n    addon_credits: 5,\n    addon_flows: 2,\n    addon_triggers: 2,\n    addon_trial_days: 10,\n    braintree_discount_id: \"\",\n    promo_features_expiration: moment(new Date()).add(10, 'days')\n}, function(error, promoCodes) {\n    addPromcodeToUser({\n        promo_code: promoCodes[0].promo_code\n    }, function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var userPromoCode = res.body.output;\n            if (userPromoCode.user_uid == uid && userPromoCode.uid != \"\") {\n                signUpUser({\n                    email: \"test.user+1@raweng.com\"\n                }, function(err, res) {\n                    var userUID1 = res.body.output.uid;\n                    addPromcodeToUser({\n                        promo_code: promoCodes[0].promo_code,\n                        user_uid: userUID1\n                    }, function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            var userPromoCode = res.body.output;\n                            if (userPromoCode.user_uid == userUID1 && userPromoCode.uid != \"\") {\n                                signUpUser({\n                                    email: \"test.user+2@raweng.com\"\n                                }, function(err, res) {\n                                    var userUID2 = res.body.output.uid;\n                                    addPromcodeToUser({\n                                        promo_code: promoCodes[0].promo_code,\n                                        status: httpStatus.BAD_REQUEST\n                                    }, function(err, res) {\n                                        if (err) {\n                                            done(err);\n                                        } else {\n                                            (res.body.error.message).should.equal(messageList.PROMOCODE_OVER_REDEMPT);\n                                            done();\n                                        }\n                                    });\n                                });\n                            } else {\n                                true.should.equal(false);\n                                done();\n                            }\n                        }\n                    });\n                });\n            } else {\n                true.should.equal(false);\n                done();\n            }\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7d5d8136-2a2f-4be3-894a-700b724d6d91",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should allocate promocode if user plan is included in allowed_plans.",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeAdd Should allocate promocode if user plan is included in allowed_plans.",
                    "timedOut": false,
                    "duration": 101,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\naddPromcode({\n    count: 1,\n    promo_code: \"PROMO_CODE\",\n    domain: \"raweng.com\",\n    redemption_count: 1,\n    redemption_start: moment(new Date()).subtract(1, 'days'),\n    redemption_end: moment(new Date()).add(1, 'days'),\n    allowed_plans: [_planEntries[0]],\n    default_plan: null,\n    addon_credits: 5,\n    addon_flows: 2,\n    addon_triggers: 2,\n    addon_trial_days: 10,\n    braintree_discount_id: \"\",\n    promo_features_expiration: moment(new Date()).add(10, 'days')\n}, function(error, promoCodes) {\n    var promocode_uid = promoCodes[0].uid;\n    signUpUser({\n        email: \"test.user+1@raweng.com\",\n        plan: _planEntries[0].name\n    }, function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            addPromcodeToUser({\n                promo_code: promoCodes[0].promo_code,\n                status: httpStatus.OK,\n                user_uid: res.body.output.uid\n            }, function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    res.body.output.uid.should.not.equal(\"\");\n                    done();\n                }\n            });\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "86a92bc6-cae1-4e85-adef-3efd75450cb4",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as user is not allowed to redempt promocode.",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeAdd Should give error as user is not allowed to redempt promocode.",
                    "timedOut": false,
                    "duration": 97,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\naddPromcode({\n    count: 1,\n    promo_code: \"PROMO_CODE\",\n    domain: \"raweng.com\",\n    redemption_count: 1,\n    redemption_start: moment(new Date()).subtract(1, 'days'),\n    redemption_end: moment(new Date()).add(1, 'days'),\n    allowed_plans: [_planEntries[1]],\n    default_plan: null,\n    addon_credits: 5,\n    addon_flows: 2,\n    addon_triggers: 2,\n    addon_trial_days: 10,\n    braintree_discount_id: \"\",\n    promo_features_expiration: moment(new Date()).add(10, 'days')\n}, function(error, promoCodes) {\n    var promocode_uid = promoCodes[0].uid;\n    signUpUser({\n        email: \"test.user+1@raweng.com\",\n        plan: _planEntries[0].name\n    }, function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            addPromcodeToUser({\n                promo_code: promoCodes[0].promo_code,\n                user_uid: res.body.output.uid,\n                status: httpStatus.BAD_REQUEST\n            }, function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    (res.body.error.message).should.equal(messageList.PROMOCODE_NOT_ALLOWED_PLAN);\n                    done();\n                }\n            });\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e3b37052-2ae8-42c6-aa25-033d57cd5c80",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error if promocode is already reverted.",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeAdd Should give error if promocode is already reverted.",
                    "timedOut": false,
                    "duration": 107,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\naddPromcode({\n    count: 1,\n    promo_code: \"PROMO_CODE\",\n    domain: \"raweng.com\",\n    redemption_count: 1,\n    redemption_start: moment(new Date()).subtract(1, 'days'),\n    redemption_end: moment(new Date()).add(1, 'days'),\n    allowed_plans: [],\n    default_plan: null,\n    addon_credits: 5,\n    addon_flows: 2,\n    addon_triggers: 2,\n    addon_trial_days: 10,\n    braintree_discount_id: \"\",\n    promo_features_expiration: moment(new Date()).add(10, 'days')\n}, function(error, promoCodes) {\n    signUpUser({\n        email: \"test.user+1@raweng.com\",\n        plan: _planEntries[0].name\n    }, function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var user_uid = res.body.output.uid;\n            addPromcodeToUser({\n                promo_code: promoCodes[0].promo_code,\n                user_uid: user_uid,\n                status: httpStatus.OK\n            }, function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    _models.UserPromocode.findOneAndUpdate({\n                        uid: res.body.output.uid\n                    }, {\n                        deleted_at: new Date()\n                    }, function(error, userPromo) {\n                        if (error) {\n                            done(error);\n                        } else {\n                            addPromcodeToUser({\n                                promo_code: promoCodes[0].promo_code,\n                                user_uid: user_uid,\n                                status: httpStatus.BAD_REQUEST\n                            }, function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    (res.body.error.message).should.equal(messageList.PROMOCODE_IS_ALREADY_ALLOCATED);\n                                    done();\n                                }\n                            });\n                        }\n                    })\n                }\n            });\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9a94a593-875a-427c-9be4-46fbc058a395",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give promocode expire error.",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeAdd Should give promocode expire error.",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\naddPromcode({\n    count: 1,\n    promo_code: \"PROMO_CODE\",\n    domain: \"raweng.com\",\n    redemption_count: 1,\n    redemption_start: moment(new Date()).subtract(2, 'days'),\n    redemption_end: moment(new Date()).subtract(1, 'days'),\n    allowed_plans: [],\n    default_plan: null,\n    addon_credits: 5,\n    addon_flows: 2,\n    addon_triggers: 2,\n    addon_trial_days: 10,\n    braintree_discount_id: \"\",\n    promo_features_expiration: moment(new Date()).add(10, 'days')\n}, function(error, promoCodes) {\n    addPromcodeToUser({\n        promo_code: promoCodes[0].promo_code,\n        status: httpStatus.BAD_REQUEST\n    }, function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            (res.body.error.message).should.equal(messageList.PROMOCODE_EXPIRED);\n            done();\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bb8dafe7-3cd8-4873-ae80-ded380d5428f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give invalid promocode error for future promocode.",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeAdd Should give invalid promocode error for future promocode.",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\naddPromcode({\n    count: 1,\n    promo_code: \"PROMO_CODE\",\n    domain: \"raweng.com\",\n    redemption_count: 1,\n    redemption_start: moment(new Date()).add(2, 'days'),\n    redemption_end: moment(new Date()).add(3, 'days'),\n    allowed_plans: [],\n    default_plan: null,\n    addon_credits: 5,\n    addon_flows: 2,\n    addon_triggers: 2,\n    addon_trial_days: 10,\n    braintree_discount_id: \"\",\n    promo_features_expiration: moment(new Date()).add(10, 'days')\n}, function(error, promoCodes) {\n    addPromcodeToUser({\n        promo_code: promoCodes[0].promo_code,\n        status: httpStatus.BAD_REQUEST\n    }, function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            (res.body.error.message).should.equal(messageList.PROMOCODE_INVALID);\n            done();\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8cd32026-0d9e-4624-acdc-cd0549472870",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as promo code already redempt.",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeAdd Should give error as promo code already redempt.",
                    "timedOut": false,
                    "duration": 17,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\naddPromcode({\n    count: 1,\n    promo_code: \"PROMO_CODE\",\n    domain: \"raweng.com\",\n    redemption_count: 2,\n    redemption_start: moment(new Date()).subtract(1, 'days'),\n    redemption_end: moment(new Date()).add(1, 'days'),\n    allowed_plans: [],\n    default_plan: null,\n    addon_credits: 5,\n    addon_flows: 2,\n    addon_triggers: 2,\n    addon_trial_days: 10,\n    braintree_discount_id: \"\",\n    promo_features_expiration: moment(new Date()).add(10, 'days')\n}, function(error, promoCodes) {\n    addPromcodeToUser({\n        promo_code: promoCodes[0].promo_code\n    }, function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var userPromoCode = res.body.output;\n            if (userPromoCode.user_uid == uid && userPromoCode.uid != \"\") {\n                addPromcodeToUser({\n                    promo_code: promoCodes[0].promo_code,\n                    status: httpStatus.BAD_REQUEST\n                }, function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        (res.body.error.message).should.equal(messageList.PROMOCODE_IS_ALREADY_ALLOCATED);\n                        done();\n                    }\n                });\n            } else {\n                true.should.equal(false);\n                done();\n            }\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a32ab77c-c28d-466b-9d1a-21a354951648",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as invalid promocode.",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeAdd Should give error as invalid promocode.",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\naddPromcode({\n    count: 1,\n    promo_code: \"PROMO_CODE\",\n    domain: \"raweng.com\",\n    redemption_count: 1,\n    redemption_start: moment(new Date()).subtract(1, 'days'),\n    redemption_end: moment(new Date()).add(1, 'days'),\n    allowed_plans: [],\n    default_plan: null,\n    addon_credits: 5,\n    addon_flows: 2,\n    addon_triggers: 2,\n    addon_trial_days: 10,\n    braintree_discount_id: \"\",\n    promo_features_expiration: moment(new Date()).add(10, 'days')\n}, function(error, promoCodes) {\n    addPromcodeToUser({\n        promo_code: \"FAKE_PROMO_CODE\",\n        status: httpStatus.BAD_REQUEST\n    }, function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            (res.body.error.message).should.equal(messageList.PROMOCODE_INVALID);\n            done();\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4bc27956-8eb6-43a4-81b7-077f3467dcbf",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as promocode invalid domain.",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeAdd Should give error as promocode invalid domain.",
                    "timedOut": false,
                    "duration": 92,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\naddPromcode({\n    count: 1,\n    promo_code: \"PROMO_CODE\",\n    domain: \"raweng.com\",\n    redemption_count: 1,\n    redemption_start: moment(new Date()).subtract(1, 'days'),\n    redemption_end: moment(new Date()).add(1, 'days'),\n    allowed_plans: [],\n    default_plan: null,\n    addon_credits: 5,\n    addon_flows: 2,\n    addon_triggers: 2,\n    addon_trial_days: 10,\n    braintree_discount_id: \"\",\n    promo_features_expiration: moment(new Date()).add(10, 'days')\n}, function(error, promoCodes) {\n    signUpUser({\n        email: \"test.user@built.io\"\n    }, function(err, res) {\n        addPromcodeToUser({\n            promo_code: promoCodes[0].promo_code,\n            status: httpStatus.BAD_REQUEST,\n            user_uid: res.body.output.uid\n        }, function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                (res.body.error.message).should.equal(messageList.PROMOCODE_DOMAIN_NOT_ALLOWED);\n                done();\n            }\n        });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1163061e-d540-4d1c-81fe-a6eddeb6b5b3",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "9e415f1d-267c-40d3-8b66-a388edde63bd",
                  "12cd43fd-b1f6-468c-9590-be67c261c130",
                  "e933cd83-e5fb-486c-bbf3-535ef8f5558f",
                  "7d5d8136-2a2f-4be3-894a-700b724d6d91",
                  "86a92bc6-cae1-4e85-adef-3efd75450cb4",
                  "e3b37052-2ae8-42c6-aa25-033d57cd5c80",
                  "9a94a593-875a-427c-9be4-46fbc058a395",
                  "bb8dafe7-3cd8-4873-ae80-ded380d5428f",
                  "8cd32026-0d9e-4624-acdc-cd0549472870",
                  "a32ab77c-c28d-466b-9d1a-21a354951648",
                  "4bc27956-8eb6-43a4-81b7-077f3467dcbf",
                  "1163061e-d540-4d1c-81fe-a6eddeb6b5b3"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 810,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "97d74024-9380-4c43-9bf7-1907b76ad931",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\promoCode\\userPromocodeDelete.enterprise.js",
        "file": "\\controllers\\test\\promoCode\\userPromocodeDelete.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "c03611a8-0aed-43a2-9a3c-d3074c3f7ac0",
            "title": "PromoCode",
            "fullFile": "C:\\work\\api\\controllers\\test\\promoCode\\userPromocodeDelete.enterprise.js",
            "file": "\\controllers\\test\\promoCode\\userPromocodeDelete.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "63b82e29-3c08-4eeb-9327-e93aac13c186",
                "title": "PromoCode.userPromocodeDelete",
                "fullFile": "C:\\work\\api\\controllers\\test\\promoCode\\userPromocodeDelete.enterprise.js",
                "file": "\\controllers\\test\\promoCode\\userPromocodeDelete.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeDelete \"before each\" hook",
                    "timedOut": false,
                    "duration": 94,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n    _models.Plan.remove({ $or: [{ name: new RegExp('^RANDOM_PLAN+', \"i\") }, { name: new RegExp('^utest_cases_Standard+', \"i\") }] }, function(error, plan) {\n        _models.Mail.remove({ $or: [{ to: new RegExp('^test.user+', \"i\") }, { to: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n            _models.Promocode.remove({}, function(error, promo) {\n                _models.UserPromocode.remove({}, function(error, userPromos) {\n                    signUpUser({}, function(err, res) {\n                        authToken = res.body.output.authtoken;\n                        token = res.body.output.activation_token;\n                        _id = res.body.output._id;\n                        uid = res.body.output.uid;\n                        savePlanEntries({\n                            count: 5\n                        }, function(error, planEntries) {\n                            _planEntries = planEntries;\n                            done();\n                        });\n                    });\n                });\n            });\n        });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fe1b3d6e-255a-40ba-8246-a5a12d52298a",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeDelete \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "716a72af-e5d1-46cf-8b1d-4cefc3904367",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should delete user promocode.",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeDelete Should delete user promocode.",
                    "timedOut": false,
                    "duration": 18,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\naddPromcode({\n    count: 1,\n    promo_code: \"PROMO_CODE\",\n    domain: \"raweng.com\",\n    redemption_count: 1,\n    redemption_start: moment(new Date()).subtract(1, 'days'),\n    redemption_end: moment(new Date()).add(1, 'days'),\n    allowed_plans: [],\n    default_plan: null,\n    addon_credits: 5,\n    addon_flows: 2,\n    addon_triggers: 2,\n    addon_trial_days: 10,\n    braintree_discount_id: \"\",\n    promo_features_expiration: moment(new Date()).add(10, 'days')\n}, function(error, promoCodes) {\n    addPromcodeToUser({\n        promo_code: promoCodes[0].promo_code\n    }, function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var userPromoCode = res.body.output;\n            var user_promo_uid = userPromoCode.uid || \"\";\n            api.delete(apiURL)\n                .set(\"ui_admin_key\", config.UI_ADMIN_KEY)\n                .send({\n                    user_promo_uid: user_promo_uid\n                })\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        (res.body.output.message).should.equal(messageList.PROMOCODE_REVOKED_SUCCESSFULLY);\n                        done();\n                    }\n                });\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "59820bbb-589d-49b5-b599-2c01f9b368d4",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give promocode already revoked error.",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeDelete Should give promocode already revoked error.",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\naddPromcode({\n    count: 1,\n    promo_code: \"PROMO_CODE\",\n    domain: \"raweng.com\",\n    redemption_count: 1,\n    redemption_start: moment(new Date()).subtract(1, 'days'),\n    redemption_end: moment(new Date()).add(1, 'days'),\n    allowed_plans: [],\n    default_plan: null,\n    addon_credits: 5,\n    addon_flows: 2,\n    addon_triggers: 2,\n    addon_trial_days: 10,\n    braintree_discount_id: \"\",\n    promo_features_expiration: moment(new Date()).add(10, 'days')\n}, function(error, promoCodes) {\n    addPromcodeToUser({\n        promo_code: promoCodes[0].promo_code\n    }, function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var userPromoCode = res.body.output;\n            var user_promo_uid = userPromoCode.uid || \"\";\n            _models.UserPromocode.findOneAndUpdate({\n                uid: user_promo_uid\n            }, {\n                deleted_at: new Date()\n            }, function(error, userPromoCode) {\n                if (error) {\n                    done(err);\n                } else {\n                    api.delete(apiURL)\n                        .set(\"ui_admin_key\", config.UI_ADMIN_KEY)\n                        .send({\n                            user_promo_uid: user_promo_uid\n                        })\n                        .expect(httpStatus.BAD_REQUEST)\n                        .end(function(err, res) {\n                            if (err) {\n                                done(err);\n                            } else {\n                                (res.body.error.message).should.equal(messageList.PROMOCODE_ALREADY_REVOKED);\n                                done();\n                            }\n                        });\n                }\n            });\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f0412ce0-58cc-4c66-a4da-53685fb8fbf8",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "59820bbb-589d-49b5-b599-2c01f9b368d4",
                  "f0412ce0-58cc-4c66-a4da-53685fb8fbf8"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 34,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "47537584-418f-4def-ba7b-bbe53be501bc",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\promoCode\\userPromocodeList.enterprise.js",
        "file": "\\controllers\\test\\promoCode\\userPromocodeList.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "4bd68548-16cb-4a26-9295-1bf1a22deaf5",
            "title": "PromoCode",
            "fullFile": "C:\\work\\api\\controllers\\test\\promoCode\\userPromocodeList.enterprise.js",
            "file": "\\controllers\\test\\promoCode\\userPromocodeList.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "1bb53361-a475-46b4-88f8-8eaeadbaa9bc",
                "title": "PromoCode.userPromocodeList",
                "fullFile": "C:\\work\\api\\controllers\\test\\promoCode\\userPromocodeList.enterprise.js",
                "file": "\\controllers\\test\\promoCode\\userPromocodeList.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeList \"before all\" hook",
                    "timedOut": false,
                    "duration": 3045,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveRecords(function() {\n    savePlanEntries({\n        count: 5\n    }, function(error, planEntries) {\n        _planEntries = planEntries;\n        addPromcode({\n            count: 1,\n            promo_code: \"PROMO_CODE\",\n            domain: \"raweng.com\",\n            redemption_count: 30,\n            redemption_start: moment(new Date()).subtract(1, 'days'),\n            redemption_end: moment(new Date()).add(1, 'days'),\n            allowed_plans: [],\n            default_plan: null,\n            addon_credits: 5,\n            addon_flows: 2,\n            addon_triggers: 2,\n            addon_trial_days: 10,\n            braintree_discount_id: \"\",\n            promo_features_expiration: moment(new Date()).add(10, 'days')\n        }, function(error, promoCodes) {\n            addUsersWithPromocode({\n                count: 30,\n                promo_code: promoCodes[0].promo_code\n            }, function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    done();\n                }\n            });\n        });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "14f0fc41-a842-45ad-936f-02d970641437",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeList \"after all\" hook",
                    "timedOut": false,
                    "duration": 2,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\nremoveRecords(function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "370bad0e-285e-4c2f-944f-16a82843fccf",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get list promocode applied users.",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeList Should get list promocode applied users.",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set(\"ui_admin_key\", config.UI_ADMIN_KEY)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output.objects).to.be.a('array');\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "080bec71-0640-407d-b28b-855f47c78b0c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of promocode applied users by considering skip.",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeList Should get list of promocode applied users by considering skip.",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?skip=5\";\napi.get(filterURL)\n    .set(\"ui_admin_key\", config.UI_ADMIN_KEY)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            (Array.isArray(res.body.output.objects) &&\n                res.body.output.objects.length == 25 &&\n                res.body.output.count == 30).should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d725b27e-0795-4fbf-9234-d0f18244c4fd",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of promocode applied users by considering limit.",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeList Should get list of promocode applied users by considering limit.",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?limit=5\";\napi.get(filterURL)\n    .set(\"ui_admin_key\", config.UI_ADMIN_KEY)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            (Array.isArray(res.body.output.objects) &&\n                res.body.output.objects.length == 5 &&\n                res.body.output.count == 30).should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "80e51ce0-5752-4f75-b30d-26253ef9eeac",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of promocode by applying email filter.",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeList Should get list of promocode by applying email filter.",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?limit=5&email=test.user+1\";\napi.get(filterURL)\n    .set(\"ui_admin_key\", config.UI_ADMIN_KEY)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (Array.isArray(res.body.output.objects) &&\n                res.body.output.objects.length == 5 &&\n                res.body.output.count == 11) {\n                isValid = true;\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid && item.user.email.indexOf(\"test.user+1\") == 0;\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4336c669-b9e8-4414-9230-ba5adca204c4",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of promocode by applying uid filter.",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeList Should get list of promocode by applying uid filter.",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?limit=5&uid=\" + user_uid;\napi.get(filterURL)\n    .set(\"ui_admin_key\", config.UI_ADMIN_KEY)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (Array.isArray(res.body.output.objects) &&\n                res.body.output.objects.length == 1 &&\n                res.body.output.count == 1) {\n                isValid = true;\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid && item.user.uid == user_uid;\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "669a1862-f493-4b1a-9e2e-b211a334133d",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give first preference to email filter.",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeList Should give first preference to email filter.",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?limit=5&uid=\" + user_uid + \"&email=test.user+1\";\napi.get(filterURL)\n    .set(\"ui_admin_key\", config.UI_ADMIN_KEY)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (Array.isArray(res.body.output.objects) &&\n                res.body.output.objects.length == 5 &&\n                res.body.output.count == 11) {\n                isValid = true;\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid && item.user.email.indexOf(\"test.user+1\") == 0;\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c663bd74-aa02-482e-ad51-fc5f2e75ee3a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of promocode applied users by considering skip/limit.",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeList Should get list of promocode applied users by considering skip/limit.",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?skip=5&limit=10\";\napi.get(filterURL)\n    .set(\"ui_admin_key\", config.UI_ADMIN_KEY)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            (Array.isArray(res.body.output.objects) &&\n                res.body.output.objects.length == 10 &&\n                res.body.output.count == 30).should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a1b6d20b-75ea-45ea-bdf2-199e78cdee43",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "080bec71-0640-407d-b28b-855f47c78b0c",
                  "d725b27e-0795-4fbf-9234-d0f18244c4fd",
                  "80e51ce0-5752-4f75-b30d-26253ef9eeac",
                  "4336c669-b9e8-4414-9230-ba5adca204c4",
                  "669a1862-f493-4b1a-9e2e-b211a334133d",
                  "c663bd74-aa02-482e-ad51-fc5f2e75ee3a",
                  "a1b6d20b-75ea-45ea-bdf2-199e78cdee43"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 61,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "f2669e45-ecdb-4a64-ac8c-79629f9ec911",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\promoCode\\userPromocodeRedempt.enterprise.js",
        "file": "\\controllers\\test\\promoCode\\userPromocodeRedempt.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "2e25008d-7e22-43c3-84fd-3058d7f8c2c6",
            "title": "PromoCode",
            "fullFile": "C:\\work\\api\\controllers\\test\\promoCode\\userPromocodeRedempt.enterprise.js",
            "file": "\\controllers\\test\\promoCode\\userPromocodeRedempt.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "ae16e2ca-b85c-4f5b-95ee-458f40d509a6",
                "title": "PromoCode.userPromocodeRedempt",
                "fullFile": "C:\\work\\api\\controllers\\test\\promoCode\\userPromocodeRedempt.enterprise.js",
                "file": "\\controllers\\test\\promoCode\\userPromocodeRedempt.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeRedempt \"before each\" hook",
                    "timedOut": false,
                    "duration": 90,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n    _models.Plan.remove({ $or: [{ name: new RegExp('^RANDOM_PLAN+', \"i\") }, { name: new RegExp('^utest_cases_Standard+', \"i\") }] }, function(error, plan) {\n        _models.Mail.remove({ $or: [{ to: new RegExp('^test.user+', \"i\") }, { to: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n            _models.Promocode.remove({}, function(error, promo) {\n                _models.UserPromocode.remove({}, function(error, userPromos) {\n                    signUpUser({}, function(err, res) {\n                        authToken = res.body.output.authtoken;\n                        token = res.body.output.activation_token;\n                        _id = res.body.output._id;\n                        uid = res.body.output.uid;\n                        savePlanEntries({\n                            count: 5\n                        }, function(error, planEntries) {\n                            _planEntries = planEntries;\n                            done();\n                        });\n                    });\n                });\n            });\n        });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "56525a21-8996-4c63-90c2-d01a687b9acb",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeRedempt \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7837e93b-a1f7-4191-ad3a-ed11d0e4054c",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should add promocode to user.",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeRedempt Should add promocode to user.",
                    "timedOut": false,
                    "duration": 39,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\naddPromcode({\n    count: 1,\n    promo_code: \"PROMO_CODE\",\n    domain: \"raweng.com\",\n    redemption_count: 1,\n    redemption_start: moment(new Date()).subtract(1, 'days'),\n    redemption_end: moment(new Date()).add(1, 'days'),\n    allowed_plans: [],\n    default_plan: null,\n    addon_credits: 5,\n    addon_flows: 2,\n    addon_triggers: 2,\n    addon_trial_days: 10,\n    braintree_discount_id: \"\",\n    promo_features_expiration: moment(new Date()).add(10, 'days')\n}, function(error, promoCodes) {\n    redemptPromcodeToUser({\n        promo_code: promoCodes[0].promo_code\n    }, function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var userPromoCode = res.body.output;\n            if (userPromoCode.user_uid == uid &&\n                userPromoCode.uid != \"\") {\n                api.get(\"/enterprise/v1/user\")\n                    .set(\"authtoken\", authToken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            res.body.output.subscription.days.should.equal(40);\n                            done();\n                        }\n                    });\n            } else {\n                true.should.equal(false);\n                done();\n            }\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "27a7562a-deef-48f6-a52a-009b6d4c336d",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should properly add promocode fatures to standard plan.",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeRedempt Should properly add promocode fatures to standard plan.",
                    "timedOut": false,
                    "duration": 125,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nsignUpUser({\n    \"email\": \"test.user+1@raweng.com\",\n    \"plan\": \"Standard Plan (Annual)\"\n}, function(err, res) {\n    var userFeatures = {};\n    userFeatures.flow_count = res.body.output.user_plan.flow.count;\n    userFeatures.flow_active = res.body.output.user_plan.flow.active;\n    userFeatures.trigger_count = res.body.output.user_plan.trigger.count;\n    userFeatures.days = (res.body.output.user_plan.reimburse || {}).period || 0;\n    userFeatures.credits = (res.body.output.user_plan.reimburse || {}).credits || 0;\n    authToken = res.body.output.authtoken || \"\";\n    uid = res.body.output.uid || \"\";\n    addPromcode({\n        count: 1,\n        promo_code: \"PROMO_CODE\",\n        domain: \"raweng.com\",\n        redemption_count: 1,\n        redemption_start: moment(new Date()).subtract(1, 'days'),\n        redemption_end: moment(new Date()).add(1, 'days'),\n        allowed_plans: [],\n        default_plan: null,\n        addon_credits: 5,\n        addon_flows: 2,\n        addon_triggers: 2,\n        addon_trial_days: 10,\n        braintree_discount_id: \"\",\n        promo_features_expiration: moment(new Date()).add(10, 'days')\n    }, function(error, promoCodes) {\n        redemptPromcodeToUser({\n            promo_code: promoCodes[0].promo_code\n        }, function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                var userPromoCode = res.body.output;\n                if (userPromoCode.user_uid == uid &&\n                    userPromoCode.uid != \"\") {\n                    api.get(\"/enterprise/v1/user\")\n                        .set(\"authtoken\", authToken)\n                        .expect(httpStatus.OK)\n                        .end(function(err, res) {\n                            var userNewFeatures = {};\n                            userNewFeatures.flow_count = res.body.output.user_plan.flow.count;\n                            userNewFeatures.flow_active = res.body.output.user_plan.flow.active;\n                            userNewFeatures.trigger_count = res.body.output.user_plan.trigger.count;\n                            userNewFeatures.days = (res.body.output.user_plan.reimburse || {}).period || 0;\n                            userNewFeatures.credits = (res.body.output.user_plan.reimburse || {}).credits || 0;\n                            (userFeatures.flow_count == userNewFeatures.flow_count &&\n                                userFeatures.flow_active == userNewFeatures.flow_active &&\n                                (userFeatures.trigger_count + 2) == userNewFeatures.trigger_count &&\n                                userFeatures.days == userNewFeatures.days &&\n                                (userFeatures.credits + 5) == userNewFeatures.credits).should.equal(true);\n                            done();\n                        });\n                } else {\n                    true.should.equal(false);\n                    done();\n                }\n            }\n        });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "61ccb787-dc47-4482-a57a-397fdcf4549a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should re-again redempt another promocode.",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeRedempt Should re-again redempt another promocode.",
                    "timedOut": false,
                    "duration": 46,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\naddPromcode({\n    count: 2,\n    promo_code: \"PROMO_CODE\",\n    domain: \"raweng.com\",\n    redemption_count: 1,\n    redemption_start: moment(new Date()).subtract(1, 'days'),\n    redemption_end: moment(new Date()).add(1, 'days'),\n    allowed_plans: [],\n    default_plan: null,\n    addon_credits: 5,\n    addon_flows: 2,\n    addon_triggers: 2,\n    addon_trial_days: 10,\n    braintree_discount_id: \"\",\n    promo_features_expiration: moment(new Date()).add(10, 'days')\n}, function(error, promoCodes) {\n    redemptPromcodeToUser({\n        promo_code: promoCodes[0].promo_code\n    }, function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var userPromoCode = res.body.output;\n            if (userPromoCode.user_uid == uid && userPromoCode.uid != \"\") {\n                var promocode_uid = userPromoCode.promocode_uid[0];\n                redemptPromcodeToUser({\n                    promo_code: promoCodes[1].promo_code\n                }, function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        var userPromoCode = res.body.output;\n                        (userPromoCode.user_uid == uid &&\n                            userPromoCode.uid != \"\" &&\n                            userPromoCode.promocode_uid[0] != promocode_uid).should.equal(true);\n                        done();\n                    }\n                });\n            } else {\n                true.should.equal(false);\n                done();\n            }\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cb0ca2d4-5dcc-4509-b8f9-eee9caf74294",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should allocate promocode to only two users.",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeRedempt Should allocate promocode to only two users.",
                    "timedOut": false,
                    "duration": 232,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\naddPromcode({\n    count: 1,\n    promo_code: \"PROMO_CODE\",\n    domain: \"raweng.com\",\n    redemption_count: 2,\n    redemption_start: moment(new Date()).subtract(1, 'days'),\n    redemption_end: moment(new Date()).add(1, 'days'),\n    allowed_plans: [],\n    default_plan: null,\n    addon_credits: 5,\n    addon_flows: 2,\n    addon_triggers: 2,\n    addon_trial_days: 10,\n    braintree_discount_id: \"\",\n    promo_features_expiration: moment(new Date()).add(10, 'days')\n}, function(error, promoCodes) {\n    redemptPromcodeToUser({\n        promo_code: promoCodes[0].promo_code\n    }, function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var userPromoCode = res.body.output;\n            if (userPromoCode.user_uid == uid && userPromoCode.uid != \"\") {\n                signUpUser({\n                    email: \"test.user+1@raweng.com\"\n                }, function(err, res) {\n                    var userUID1 = res.body.output.uid;\n                    var authtoken1 = res.body.output.authtoken;\n                    redemptPromcodeToUser({\n                        promo_code: promoCodes[0].promo_code,\n                        authtoken: authtoken1\n                    }, function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            var userPromoCode = res.body.output;\n                            if (userPromoCode.user_uid == userUID1 && userPromoCode.uid != \"\") {\n                                signUpUser({\n                                    email: \"test.user+2@raweng.com\"\n                                }, function(err, res) {\n                                    var userUID2 = res.body.output.uid;\n                                    var authtoken2 = res.body.output.authtoken;\n                                    redemptPromcodeToUser({\n                                        promo_code: promoCodes[0].promo_code,\n                                        status: httpStatus.BAD_REQUEST,\n                                        authtoken: authtoken2\n                                    }, function(err, res) {\n                                        if (err) {\n                                            done(err);\n                                        } else {\n                                            (res.body.error.message).should.equal(messageList.PROMOCODE_OVER_REDEMPT);\n                                            done();\n                                        }\n                                    });\n                                });\n                            } else {\n                                true.should.equal(false);\n                                done();\n                            }\n                        }\n                    });\n                });\n            } else {\n                true.should.equal(false);\n                done();\n            }\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "dbe5703b-b799-4e8c-ab62-79057ed9c95b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should allocate promocode if user plan is included in allowed_plans.",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeRedempt Should allocate promocode if user plan is included in allowed_plans.",
                    "timedOut": false,
                    "duration": 101,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\naddPromcode({\n    count: 1,\n    promo_code: \"PROMO_CODE\",\n    domain: \"raweng.com\",\n    redemption_count: 1,\n    redemption_start: moment(new Date()).subtract(1, 'days'),\n    redemption_end: moment(new Date()).add(1, 'days'),\n    allowed_plans: [_planEntries[0]],\n    default_plan: null,\n    addon_credits: 5,\n    addon_flows: 2,\n    addon_triggers: 2,\n    addon_trial_days: 10,\n    braintree_discount_id: \"\",\n    promo_features_expiration: moment(new Date()).add(10, 'days')\n}, function(error, promoCodes) {\n    var promocode_uid = promoCodes[0].uid;\n    signUpUser({\n        email: \"test.user+1@raweng.com\",\n        plan: _planEntries[0].name\n    }, function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var authtoken1 = res.body.output.authtoken;\n            redemptPromcodeToUser({\n                promo_code: promoCodes[0].promo_code,\n                status: httpStatus.OK,\n                user_uid: res.body.output.uid,\n                authtoken: authtoken1\n            }, function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    res.body.output.uid.should.not.equal(\"\");\n                    done();\n                }\n            });\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "00a948c0-a565-4b1c-8c4c-d6056e0ff292",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as user is not allowed to redempt promocode.",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeRedempt Should give error as user is not allowed to redempt promocode.",
                    "timedOut": false,
                    "duration": 102,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\naddPromcode({\n    count: 1,\n    promo_code: \"PROMO_CODE\",\n    domain: \"raweng.com\",\n    redemption_count: 1,\n    redemption_start: moment(new Date()).subtract(1, 'days'),\n    redemption_end: moment(new Date()).add(1, 'days'),\n    allowed_plans: [_planEntries[1]],\n    default_plan: null,\n    addon_credits: 5,\n    addon_flows: 2,\n    addon_triggers: 2,\n    addon_trial_days: 10,\n    braintree_discount_id: \"\",\n    promo_features_expiration: moment(new Date()).add(10, 'days')\n}, function(error, promoCodes) {\n    var promocode_uid = promoCodes[0].uid;\n    signUpUser({\n        email: \"test.user+1@raweng.com\",\n        plan: _planEntries[0].name\n    }, function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            redemptPromcodeToUser({\n                promo_code: promoCodes[0].promo_code,\n                user_uid: res.body.output.uid,\n                status: httpStatus.BAD_REQUEST\n            }, function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    (res.body.error.message).should.equal(messageList.PROMOCODE_NOT_ALLOWED_PLAN);\n                    done();\n                }\n            });\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "75c4342b-d006-4a43-b5c9-2289398e4d8a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give promocode expire error.",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeRedempt Should give promocode expire error.",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\naddPromcode({\n    count: 1,\n    promo_code: \"PROMO_CODE\",\n    domain: \"raweng.com\",\n    redemption_count: 1,\n    redemption_start: moment(new Date()).subtract(2, 'days'),\n    redemption_end: moment(new Date()).subtract(1, 'days'),\n    allowed_plans: [],\n    default_plan: null,\n    addon_credits: 5,\n    addon_flows: 2,\n    addon_triggers: 2,\n    addon_trial_days: 10,\n    braintree_discount_id: \"\",\n    promo_features_expiration: moment(new Date()).add(10, 'days')\n}, function(error, promoCodes) {\n    redemptPromcodeToUser({\n        promo_code: promoCodes[0].promo_code,\n        status: httpStatus.BAD_REQUEST\n    }, function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            (res.body.error.message).should.equal(messageList.PROMOCODE_EXPIRED);\n            done();\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "85d9c4fc-e06d-4e5e-b277-d745136b523a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give invalid promocode error for future promocode.",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeRedempt Should give invalid promocode error for future promocode.",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\naddPromcode({\n    count: 1,\n    promo_code: \"PROMO_CODE\",\n    domain: \"raweng.com\",\n    redemption_count: 1,\n    redemption_start: moment(new Date()).add(2, 'days'),\n    redemption_end: moment(new Date()).add(3, 'days'),\n    allowed_plans: [],\n    default_plan: null,\n    addon_credits: 5,\n    addon_flows: 2,\n    addon_triggers: 2,\n    addon_trial_days: 10,\n    braintree_discount_id: \"\",\n    promo_features_expiration: moment(new Date()).add(10, 'days')\n}, function(error, promoCodes) {\n    redemptPromcodeToUser({\n        promo_code: promoCodes[0].promo_code,\n        status: httpStatus.BAD_REQUEST\n    }, function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            (res.body.error.message).should.equal(messageList.PROMOCODE_INVALID);\n            done();\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b9c95a9f-2454-4781-ae12-3e4b0a372f02",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as promo code already redempt.",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeRedempt Should give error as promo code already redempt.",
                    "timedOut": false,
                    "duration": 37,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\naddPromcode({\n    count: 1,\n    promo_code: \"PROMO_CODE\",\n    domain: \"raweng.com\",\n    redemption_count: 2,\n    redemption_start: moment(new Date()).subtract(1, 'days'),\n    redemption_end: moment(new Date()).add(1, 'days'),\n    allowed_plans: [],\n    default_plan: null,\n    addon_credits: 5,\n    addon_flows: 2,\n    addon_triggers: 2,\n    addon_trial_days: 10,\n    braintree_discount_id: \"\",\n    promo_features_expiration: moment(new Date()).add(10, 'days')\n}, function(error, promoCodes) {\n    redemptPromcodeToUser({\n        promo_code: promoCodes[0].promo_code\n    }, function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var userPromoCode = res.body.output;\n            if (userPromoCode.user_uid == uid && userPromoCode.uid != \"\") {\n                redemptPromcodeToUser({\n                    promo_code: promoCodes[0].promo_code,\n                    status: httpStatus.BAD_REQUEST\n                }, function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        (res.body.error.message).should.equal(messageList.PROMOCODE_IS_ALREADY_ALLOCATED);\n                        done();\n                    }\n                });\n            } else {\n                true.should.equal(false);\n                done();\n            }\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a2590248-9b0b-4b0e-87ba-9afe29a16ff8",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as invalid promocode.",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeRedempt Should give error as invalid promocode.",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\naddPromcode({\n    count: 1,\n    promo_code: \"PROMO_CODE\",\n    domain: \"raweng.com\",\n    redemption_count: 1,\n    redemption_start: moment(new Date()).subtract(1, 'days'),\n    redemption_end: moment(new Date()).add(1, 'days'),\n    allowed_plans: [],\n    default_plan: null,\n    addon_credits: 5,\n    addon_flows: 2,\n    addon_triggers: 2,\n    addon_trial_days: 10,\n    braintree_discount_id: \"\",\n    promo_features_expiration: moment(new Date()).add(10, 'days')\n}, function(error, promoCodes) {\n    redemptPromcodeToUser({\n        promo_code: \"FAKE_PROMO_CODE\",\n        status: httpStatus.BAD_REQUEST\n    }, function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            (res.body.error.message).should.equal(messageList.PROMOCODE_INVALID);\n            done();\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3a76c089-a5f5-4d4a-8929-a25f0f28142a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as promocode invalid domain.",
                    "fullTitle": "Enterprise PromoCode PromoCode.userPromocodeRedempt Should give error as promocode invalid domain.",
                    "timedOut": false,
                    "duration": 104,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\naddPromcode({\n    count: 1,\n    promo_code: \"PROMO_CODE\",\n    domain: \"raweng.com\",\n    redemption_count: 1,\n    redemption_start: moment(new Date()).subtract(1, 'days'),\n    redemption_end: moment(new Date()).add(1, 'days'),\n    allowed_plans: [],\n    default_plan: null,\n    addon_credits: 5,\n    addon_flows: 2,\n    addon_triggers: 2,\n    addon_trial_days: 10,\n    braintree_discount_id: \"\",\n    promo_features_expiration: moment(new Date()).add(10, 'days')\n}, function(error, promoCodes) {\n    signUpUser({\n        email: \"test.user@built.io\"\n    }, function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var authtoken1 = res.body.output.authtoken;\n            redemptPromcodeToUser({\n                promo_code: promoCodes[0].promo_code,\n                status: httpStatus.BAD_REQUEST,\n                user_uid: res.body.output.uid,\n                authtoken: authtoken1\n            }, function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    (res.body.error.message).should.equal(messageList.PROMOCODE_DOMAIN_NOT_ALLOWED);\n                    done();\n                }\n            });\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c010365a-5e5e-4269-b7b7-eaa5353e1224",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "27a7562a-deef-48f6-a52a-009b6d4c336d",
                  "61ccb787-dc47-4482-a57a-397fdcf4549a",
                  "cb0ca2d4-5dcc-4509-b8f9-eee9caf74294",
                  "dbe5703b-b799-4e8c-ab62-79057ed9c95b",
                  "00a948c0-a565-4b1c-8c4c-d6056e0ff292",
                  "75c4342b-d006-4a43-b5c9-2289398e4d8a",
                  "85d9c4fc-e06d-4e5e-b277-d745136b523a",
                  "b9c95a9f-2454-4781-ae12-3e4b0a372f02",
                  "a2590248-9b0b-4b0e-87ba-9afe29a16ff8",
                  "3a76c089-a5f5-4d4a-8929-a25f0f28142a",
                  "c010365a-5e5e-4269-b7b7-eaa5353e1224"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 834,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "193faaf2-6b11-456b-8693-b36f0c653194",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\templates\\getTemplate.enterprise.js",
        "file": "\\controllers\\test\\templates\\getTemplate.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "e9108f4b-83f5-419f-b856-b0e1dfb90e9d",
            "title": "Templates.getTemplate",
            "fullFile": "C:\\work\\api\\controllers\\test\\templates\\getTemplate.enterprise.js",
            "file": "\\controllers\\test\\templates\\getTemplate.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Templates.getTemplate \"before all\" hook",
                "timedOut": false,
                "duration": 86,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(user, cbk) {\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            });\n    },\n    function(result, cbk) {\n        dummyUser = result.body.output;\n        var templateBody = testData.templateBody;\n        templateBody.author = dummyUser._id\n        _models.Template.create(templateBody, function(err, res) {\n            cbk(err, res);\n        })\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        userTemplate = res.toJSON();\n        done();\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "cdc34c16-98e1-433e-84a0-a225897ae63a",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Templates.getTemplate \"after all\" hook",
                "timedOut": false,
                "duration": 3,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.parallel([\n    function(cb) {\n        _models.User.remove({ uid: dummyUser.uid }, function(err) {\n            cb(err)\n        });\n    },\n    function(cb) {\n        _models.Template.remove({ uid: userTemplate.uid }, function(err) {\n            cb(err)\n        });\n    },\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n});",
                "err": {},
                "isRoot": false,
                "uuid": "55f3edcd-e904-47a3-93ee-329a96a64cd7",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Templates.getTemplate Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + userTemplate.uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "eb34291d-73ef-45e6-9b89-b61aa4fa9415",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if template not found.",
                "fullTitle": "Enterprise Templates.getTemplate Should get error, if template not found.",
                "timedOut": false,
                "duration": 19,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + 'dummyTemplate')\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.TEMPLATE_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "0bb6ae33-1455-46b5-8427-0dcf09e74e76",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get template.",
                "fullTitle": "Enterprise Templates.getTemplate Should get template.",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + userTemplate.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output.name).to.be.equal(testData.templateBody.name);\n            expect(res.body.output).not.to.have.all.keys(['_id', '__v']);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "b29d2b93-efd5-477e-9b45-254cddbea4d1",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "eb34291d-73ef-45e6-9b89-b61aa4fa9415",
              "0bb6ae33-1455-46b5-8427-0dcf09e74e76",
              "b29d2b93-efd5-477e-9b45-254cddbea4d1"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 42,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "e4fdc2a9-24d5-4a3c-8d6e-0cf966445192",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\templates\\importTemplate.enterprise.js",
        "file": "\\controllers\\test\\templates\\importTemplate.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "54ad0536-627d-43ef-b479-c2dd9160eee8",
            "title": "Templates.importTemplate",
            "fullFile": "C:\\work\\api\\controllers\\test\\templates\\importTemplate.enterprise.js",
            "file": "\\controllers\\test\\templates\\importTemplate.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Templates.importTemplate \"before all\" hook",
                "timedOut": false,
                "duration": 71,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data\n        async.waterfall([\n            function(cbk) {\n                dummyUser = orgData.owner;\n                dummyUser.authtoken = dummyUser.authtoken\n                var templateBody = _.cloneDeep(testData.templateBody);\n                templateBody.author = dummyUser._id\n                _models.Template.create(templateBody, function(err, res) {\n                    cbk(err, res);\n                })\n            },\n            function(result, cbk) {\n                userTemplate = result.toJSON();\n                var templateBodyWithFlowData = _.cloneDeep(testData.templateBodyWithFlowData);\n                var encrypt = encryption.encryptMultipleSync([templateBodyWithFlowData.environment, templateBodyWithFlowData.activities], encryption.getKeySync())\n                templateBodyWithFlowData.author = dummyUser._id\n                templateBodyWithFlowData.environment = encrypt[0]\n                templateBodyWithFlowData.activities = encrypt[1]\n                _models.Template.create(templateBodyWithFlowData, function(err, res) {\n                    cbk(err, res);\n                })\n            }\n        ], function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                userTemplateWithFlowData = res.toJSON();\n                tempWithFlowData.data.template_uid = userTemplateWithFlowData.uid;\n                done();\n            }\n        })\n    })\n})",
                "err": {},
                "isRoot": false,
                "uuid": "a75fbfcd-7fd8-44d2-bc1c-f9191a82cede",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Templates.importTemplate \"after all\" hook",
                "timedOut": false,
                "duration": 3,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.parallel([\n    function(cb) {\n        _models.User.remove({ uid: dummyUser.uid }, function(err) {\n            cb(err)\n        });\n    },\n    function(cb) {\n        _models.Template.remove({ uid: { $in: [userTemplate.uid, userTemplateWithFlowData.uid] } }, function(err) {\n            cb(err)\n        });\n    },\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n});",
                "err": {},
                "isRoot": false,
                "uuid": "55b3bbe3-e65b-45da-9f65-0773fef5dbfd",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Templates.importTemplate Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .send(data)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "07e156d7-ecda-4803-92a2-07c8ffc75d8a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should import template with flow_data, if template data is valid.",
                "fullTitle": "Enterprise Templates.importTemplate Should import template with flow_data, if template data is valid.",
                "timedOut": false,
                "duration": 33,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(tempWithFlowData)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var flow = res.body.output\n            expect(flow).to.be.any.keys(['uid']);\n            expect(flow.flow_version).to.be.equal(1);\n            done();\n            //_models.ConfigSchema.find({ type: 'param', project_uid: flow.project_uid }, function(err, result) {\n            //    if (err) {\n            //        done(err)\n            //    } else {\n            //        expect(_.first(result).uid).equal(_.first(tempWithFlowData.data.project_params).uid)\n            //        done();\n            //    }\n            //})\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "a52f7478-1d30-4e19-b2a4-902e23db3ab3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should import template in org with flow_data, if template data is valid.",
                "fullTitle": "Enterprise Templates.importTemplate Should import template in org with flow_data, if template data is valid.",
                "timedOut": false,
                "duration": 35,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set({ 'authtoken': dummyUser.authtoken, org_uid: orgData.organization.uid })\n    .send(tempWithFlowData)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output).to.be.any.keys(['uid']);\n            expect(res.body.output.org_uid).to.be.equal(orgData.organization.uid);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "547fe6b7-9e2e-4832-94b9-99e9db7458d6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should import template without flow_data, if template data is valid.",
                "fullTitle": "Enterprise Templates.importTemplate Should import template without flow_data, if template data is valid.",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post('/enterprise/v1/templates/import')\n    .set('authtoken', dummyUser.authtoken)\n    .send({ uid: userTemplate.uid })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output).to.be.any.keys(['uid']);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "7c7d65b8-5c16-4956-8ad8-87bfeb9e8cd7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if template not found.",
                "fullTitle": "Enterprise Templates.importTemplate Should get error, if template not found.",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ntempWithFlowData.data.template_uid = 'dummyTemplate'\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(tempWithFlowData)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.TEMPLATE_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "4dec84f0-15bf-4fb4-b040-785b7f5f3f1c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "07e156d7-ecda-4803-92a2-07c8ffc75d8a",
              "a52f7478-1d30-4e19-b2a4-902e23db3ab3",
              "547fe6b7-9e2e-4832-94b9-99e9db7458d6",
              "7c7d65b8-5c16-4956-8ad8-87bfeb9e8cd7",
              "4dec84f0-15bf-4fb4-b040-785b7f5f3f1c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 107,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "6cf011f4-0032-46e7-b19f-30d76751b947",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\templates\\listTagsOfTemplates.enterprise.js",
        "file": "\\controllers\\test\\templates\\listTagsOfTemplates.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "157e150c-1dae-44e2-a1ae-9a28610e8d21",
            "title": "Template.ListTagsOfTemplates",
            "fullFile": "C:\\work\\api\\controllers\\test\\templates\\listTagsOfTemplates.enterprise.js",
            "file": "\\controllers\\test\\templates\\listTagsOfTemplates.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Template.ListTagsOfTemplates \"before all\" hook",
                "timedOut": false,
                "duration": 87,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\n_models.User.remove({ email: testData.testRegistrationBody.email }, function(error, user) {\n    api.post(\"/enterprise/v1/signup\")\n        .send(testData.testRegistrationBody)\n        .expect(httpStatus.CREATED)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                dummyUser = res.body.output;\n                done();\n            }\n        });\n});",
                "err": {},
                "isRoot": false,
                "uuid": "dc4bc701-d5b5-4981-9117-15d52d584f84",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should get list of templates by Tags.",
                "fullTitle": "Enterprise Template.ListTagsOfTemplates Should get list of templates by Tags.",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.should.be.instanceOf(Array);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "1a94627f-2db5-42cd-ae38-248c563f1690",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "1a94627f-2db5-42cd-ae38-248c563f1690"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 9,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "c1909211-b14f-478f-84a2-7961c571e9fa",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\templates\\listTemplateIcons.enterprise.js",
        "file": "\\controllers\\test\\templates\\listTemplateIcons.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "b9b6b5fd-0901-424b-93c1-58c42f91bff5",
            "title": "Templates.listTemplatesIcon",
            "fullFile": "C:\\work\\api\\controllers\\test\\templates\\listTemplateIcons.enterprise.js",
            "file": "\\controllers\\test\\templates\\listTemplateIcons.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Templates.listTemplatesIcon \"before all\" hook",
                "timedOut": false,
                "duration": 88,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(user, cbk) {\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            });\n    }\n], function(err, result) {\n    if (err) {\n        done(err);\n    } else {\n        dummyUser = result.body.output;\n        done();\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "c61f6be2-80c2-4201-bf0f-770d30168515",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Templates.listTemplatesIcon \"after all\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.parallel([\n    function(cb) {\n        _models.User.remove({ uid: dummyUser.uid }, function(err) {\n            cb(err)\n        });\n    }\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n});",
                "err": {},
                "isRoot": false,
                "uuid": "7d3f2398-7e94-4d03-b2af-15e0bcfb1ca5",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Templates.listTemplatesIcon Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "9520172b-6817-4944-8519-efc835c02a49",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of icons of templates.",
                "fullTitle": "Enterprise Templates.listTemplatesIcon Should get list of icons of templates.",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.should.be.instanceOf(Array);\n            expect(_.first(res.body.output)).to.have.all.keys(['category', 'category_icons']);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "1756b4b8-1d7e-412a-bc74-e6a1d4f8bede",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9520172b-6817-4944-8519-efc835c02a49",
              "1756b4b8-1d7e-412a-bc74-e6a1d4f8bede"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 22,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "abcab33d-4aba-4faa-9da7-b8262956a9d6",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\templates\\listTemplates.enterprise.js",
        "file": "\\controllers\\test\\templates\\listTemplates.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "64456c33-45ca-4e3d-9592-4d3e9bb33d00",
            "title": "Templates.list",
            "fullFile": "C:\\work\\api\\controllers\\test\\templates\\listTemplates.enterprise.js",
            "file": "\\controllers\\test\\templates\\listTemplates.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Templates.list \"before all\" hook",
                "timedOut": false,
                "duration": 86,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(user, cbk) {\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            });\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        dummyUser = res.body.output;\n        done();\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "aa5139a1-6fb9-4f22-8df2-c4f3914d7b35",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Templates.list \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.parallel([\n    function(cb) {\n        _models.User.remove({ uid: dummyUser.uid }, function(err) {\n            cb(err)\n        });\n    }\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n});",
                "err": {},
                "isRoot": false,
                "uuid": "76244b82-e3b4-40ca-ada8-c0103c3fe611",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should get list template.",
                "fullTitle": "Enterprise Templates.list Should get list template.",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.should.be.instanceOf(Array);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "62a80c5c-88e2-455c-b908-a0cc31b62e48",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "62a80c5c-88e2-455c-b908-a0cc31b62e48"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 12,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "77d4d24c-b3de-4910-9621-c52ff94c88a5",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\templates\\listTemplateServices.enterprise.js",
        "file": "\\controllers\\test\\templates\\listTemplateServices.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "f59169a8-11e9-439b-8b22-df87215544f5",
            "title": "Templates.listTemplateServices",
            "fullFile": "C:\\work\\api\\controllers\\test\\templates\\listTemplateServices.enterprise.js",
            "file": "\\controllers\\test\\templates\\listTemplateServices.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Templates.listTemplateServices \"before all\" hook",
                "timedOut": false,
                "duration": 107,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(user, cbk) {\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            });\n    },\n    function(result, cbk) {\n        dummyUser = result.body.output;\n        api.get('/enterprise/v1/templatesicon')\n            .set('authtoken', dummyUser.authtoken)\n            .expect(httpStatus.OK)\n            .end(function(err, result) {\n                cbk(err, result);\n            });\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        templates = res.body.output;\n        done();\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "63f1454b-e6ac-4075-ad95-1c99d716859a",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Templates.listTemplateServices \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.parallel([\n    function(cb) {\n        _models.User.remove({ uid: dummyUser.uid }, function(err) {\n            cb(err)\n        });\n    }\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n});",
                "err": {},
                "isRoot": false,
                "uuid": "3c658e1e-ccb9-479a-979c-399f0682e177",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should get list of services of template.",
                "fullTitle": "Enterprise Templates.listTemplateServices Should get list of services of template.",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + '/' + templates[0].category + '/services')\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output).to.have.all.keys(['count', 'objects']);\n            expect(_.first(_.first(res.body.output.objects).category)).to.be.equal(templates[0].category);\n            expect(_.first(_.first(res.body.output.objects).activities)).to.be.String;\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "f0d14084-3f81-4fd6-bbe1-def91d90671c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f0d14084-3f81-4fd6-bbe1-def91d90671c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 10,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "a81f8ec8-c5b9-4cd8-afa0-4f7f440daf6a",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\trigger\\createUserTrigger.enterprise.js",
        "file": "\\controllers\\test\\trigger\\createUserTrigger.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "a18827e7-1476-4f8b-9aee-1792fa83b53e",
            "title": "Trigger.CreateUserTrigger",
            "fullFile": "C:\\work\\api\\controllers\\test\\trigger\\createUserTrigger.enterprise.js",
            "file": "\\controllers\\test\\trigger\\createUserTrigger.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Trigger.CreateUserTrigger \"before all\" hook",
                "timedOut": false,
                "duration": 101,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data\n        async.waterfall([\n            function(cbk) {\n                api.get('/enterprise/v1/user')\n                    .set('authtoken', orgData.owner.authtoken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            dummyUser = res.body.output;\n                            cbk(err, dummyUser)\n                        }\n                    });\n            },\n            function(dummyUser, cbk) {\n                _models.Project.findOne({\n                    name: config.default_project,\n                    owner_uid: dummyUser.uid\n                }, function(err, project) {\n                    cbk(err, project)\n                })\n            },\n            function(result, cbk) {\n                api.post(flowURL)\n                    .set('authtoken', dummyUser.authtoken)\n                    .send(testData.enterpriseFlowBody)\n                    .expect(httpStatus.CREATED)\n                    .end(function(err, res) {\n                        cbk(err, res)\n                    })\n            }\n        ], function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                userFlow = res.body.output;\n                done()\n            }\n        })\n    });\n})",
                "err": {},
                "isRoot": false,
                "uuid": "c5f1e559-631c-48c3-ac4e-a4cae90cff0d",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Trigger.CreateUserTrigger \"after all\" hook",
                "timedOut": false,
                "duration": 2,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nhttpmock.cleanAll();\nasync.parallel([\n    function(cb) {\n        _models.newFlow.remove({ uid: userFlow.uid }, function(err) {\n            cb(err)\n        })\n    },\n    function(cb) {\n        createdTriggers.push(userTrigger.uid)\n        _models.UserTrigger.remove({ uid: { $in: createdTriggers } }, function(err) {\n            cb(err)\n        })\n    },\n    function(cb) {\n        clearRecords(function(err, result) {\n            cb(err, result)\n        })\n    }\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "34a214a0-64f1-431a-8109-187f57b6fc3c",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise Trigger.CreateUserTrigger Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "466dd8ef-9253-4d90-b499-f9bb8b41a4a9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error if \"trigger\" key missing in request body.",
                "fullTitle": "Enterprise Trigger.CreateUserTrigger Should get error if \"trigger\" key missing in request body.",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar triggerData = _.clone(testData.enterpriseFlowBody);\ntriggerData = _.omit(triggerData, 'trigger');\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(triggerData)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "3650b5ce-050d-479b-9da0-1ccab4ec3200",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error if trigger data is invalid in request body.",
                "fullTitle": "Enterprise Trigger.CreateUserTrigger Should get error if trigger data is invalid in request body.",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar triggerData = _.clone(testData.triggerBody);\ntriggerData = _.omit(triggerData.trigger, 'name');\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(triggerData)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "b6cc922d-90c5-4cf1-af46-ee1f6be1187f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error if user-auth token is invalid.",
                "fullTitle": "Enterprise Trigger.CreateUserTrigger Should get error if user-auth token is invalid.",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { path: triggerPath, body: triggerPath }\ncommonMock.triggerCreateExchangeTokenError(opt)\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(testData.triggerBody)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ERROR_WHILE_EXCHANGING_TOKEN);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "f307faad-450b-4219-98be-51545a16ac74",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should create trigger, if trigger data is valid.",
                "fullTitle": "Enterprise Trigger.CreateUserTrigger Should create trigger, if trigger data is valid.",
                "timedOut": false,
                "duration": 26,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.waterfall([\n    function(cbk) {\n        testData.mongoUserTriggerObj.user_uid = dummyUser.uid;\n        var trigUID = testData.expressTriggerResponse.uid;\n        // _models.UserTrigger.remove({uid: trigUID}, function(err, ut) {\n        _models.UserTrigger.create(testData.mongoUserTriggerObj, function(err, ut) {\n                var data = { uid: trigUID }\n                _models.UserTrigger.findOneAndUpdate({ uid: ut.uid }, data, { new: true }, function(err, userTrig) {\n                    cbk(err, userTrig);\n                })\n            })\n            // })\n    },\n    function(ut, cbk) {\n        var opt = { path: triggerPath, body: triggerPath }\n        commonMock.triggerCreateSuccess(opt);\n        var opt1 = { path: triggerPath, getPath: getTriggerPath + '/handlers', body: { \"unset\": [/^fl\\w*/] }, update: true, times: 2 };\n        commonMock.triggerPushSuccess(opt1);\n        var opt2 = { path: triggerPath, getPath: getTriggerPath + '/handlers', body: { \"push\": [/^fl\\w*/] }, update: true, times: 2 };\n        commonMock.triggerPushSuccess(opt2);\n        var opt3 = { path: triggerPath, getPath: getTriggerPath + '/handlers', body: { \"pull\": [/^fl\\w*/] }, update: true, times: 2 };\n        commonMock.triggerPushSuccess(opt3);\n        var triggerData = _.cloneDeep(testData.triggerEnterpriseBody);\n        triggerData.trigger.flow = userFlow.uid\n        api.post(apiURL)\n            .set('authtoken', dummyUser.authtoken)\n            .send(triggerData)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                cbk(err, res)\n            });\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        userTrigger = res.body.output;\n        expect(userTrigger).to.have.any.keys(_.keys(testData.getUserTriggerResponse))\n        expect(userTrigger).not.to.have.all.keys(['_id', '__v']);\n        _models.UserTrigger.remove({ uid: userTrigger.uid }, function(err) {\n            done(err)\n        })\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "c754137b-ac50-4b74-b43d-1a0710e076b9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should create trigger within organization.",
                "fullTitle": "Enterprise Trigger.CreateUserTrigger Should create trigger within organization.",
                "timedOut": false,
                "duration": 63,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.waterfall([\n    function(cbk) {\n        testData.mongoUserTriggerObj.user_uid = orgData.organization.user_uid;\n        testData.mongoUserTriggerObj.org_uid = orgData.organization.uid;\n        var trigUID = testData.expressTriggerResponse.uid;\n        // _models.UserTrigger.remove({uid: trigUID}, function(err, ut) {\n        _models.UserTrigger.create(testData.mongoUserTriggerObj, function(err, ut) {\n            var data = { uid: trigUID }\n            _models.UserTrigger.findOneAndUpdate({ uid: ut.uid }, data, { new: true }, function(err, userTrig) {\n                cbk(err, userTrig);\n            })\n        })\n    },\n    function(userTrig, cbk) {\n        api.post(flowURL)\n            .set({ 'authtoken': dummyUser.authtoken, org_uid: orgData.organization.uid })\n            .send(testData.enterpriseFlowBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                cbk(err, res, org)\n            })\n    },\n    function(res, org, cbk) {\n        orgFlow = res.body.output\n        var opt = { path: triggerPath, body: triggerPath }\n        commonMock.triggerCreateSuccess(opt);\n        var opt1 = { path: triggerPath, getPath: getTriggerPath + '/handlers', body: { \"unset\": [/^fl\\w*/] }, update: true };\n        commonMock.triggerPushSuccess(opt1);\n        var opt2 = { path: triggerPath, getPath: getTriggerPath + '/handlers', body: { \"push\": [/^fl\\w*/] }, update: true };\n        commonMock.triggerPushSuccess(opt2);\n        var opt3 = { path: triggerPath, getPath: getTriggerPath + '/handlers', body: { \"pull\": [/^fl\\w*/] }, update: true };\n        commonMock.triggerPushSuccess(opt3);\n        var triggerData = _.cloneDeep(testData.triggerEnterpriseBody);\n        triggerData.trigger.flow = orgFlow.uid\n        api.post(apiURL)\n            .set({ authtoken: dummyUser.authtoken, org_uid: orgData.organization.uid })\n            .send(triggerData)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                cbk(err, res, org)\n            });\n    }\n], function(err, res, org) {\n    if (err) {\n        done(err);\n    } else {\n        userTrigger = res.body.output;\n        expect(userTrigger).to.have.any.keys(_.keys(testData.getUserTriggerResponse))\n        expect(userTrigger).not.to.have.all.keys(['_id', '__v']);\n        expect(userTrigger.org_uid).to.equal(orgData.organization.uid);\n        expect(userTrigger.user_uid).to.equal(orgData.organization.user_uid);\n        done();\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "7e07e905-6e47-4eb9-8209-848706b675c9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if user trigger limit exceeds.",
                "fullTitle": "Enterprise Trigger.CreateUserTrigger Should get error, if user trigger limit exceeds.",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.waterfall([\n    function(cbk) {\n        userTriggerLimit = (dummyUser.user_plan.trigger || {}).count\n        var triggerData = _.cloneDeep(testData.mongoUserTriggerObj)\n        triggerData.user_uid = dummyUser.uid;\n        async.times(userTriggerLimit, function(n, next) {\n            _models.UserTrigger.create(triggerData, function(err, userTrigger) {\n                next(err, userTrigger);\n            })\n        }, function(err, result) {\n            createdTriggers = _.map(_.flattenDeep(result), 'uid')\n            cbk(err, result)\n        })\n    },\n    function(result, cbk) {\n        var triggerData = _.cloneDeep(testData.triggerEnterpriseBody);\n        triggerData.trigger.flow = userFlow.uid\n        api.post(apiURL)\n            .set('authtoken', dummyUser.authtoken)\n            .send(triggerData)\n            .expect(httpStatus.BAD_REQUEST)\n            .end(function(err, res) {\n                cbk(err, res)\n            });\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        var errMSG = \"Your current plan does not allow using more than \" + userTriggerLimit + \" trigger(s) in your workflows. Please delete a trigger or upgrade your account before creating a new one.\";\n        expect(res.body.error.message).to.be.equal(errMSG);\n        done();\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "16425712-b8b6-4901-864b-79ced2d905be",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "466dd8ef-9253-4d90-b499-f9bb8b41a4a9",
              "3650b5ce-050d-479b-9da0-1ccab4ec3200",
              "b6cc922d-90c5-4cf1-af46-ee1f6be1187f",
              "f307faad-450b-4219-98be-51545a16ac74",
              "c754137b-ac50-4b74-b43d-1a0710e076b9",
              "7e07e905-6e47-4eb9-8209-848706b675c9",
              "16425712-b8b6-4901-864b-79ced2d905be"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 141,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "66d24a1d-2e13-4b3b-a84b-b052fdcada4a",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\trigger\\deleteUserTrigger.enterprise.js",
        "file": "\\controllers\\test\\trigger\\deleteUserTrigger.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "78538b28-d169-4ee5-9513-86ae0523b730",
            "title": "Trigger.DeleteUserTrigger",
            "fullFile": "C:\\work\\api\\controllers\\test\\trigger\\deleteUserTrigger.enterprise.js",
            "file": "\\controllers\\test\\trigger\\deleteUserTrigger.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Trigger.DeleteUserTrigger \"before all\" hook",
                "timedOut": false,
                "duration": 87,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\n_models.User.remove({ email: testData.testRegistrationBody.email }, function(error, user) {\n    api.post(\"/enterprise/v1/signup\")\n        .send(testData.testRegistrationBody)\n        .expect(httpStatus.CREATED)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                dummyUser = res.body.output;\n                done();\n            }\n        });\n});",
                "err": {},
                "isRoot": false,
                "uuid": "8372ec7d-89de-4f5e-a0f5-9763009197da",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise Trigger.DeleteUserTrigger Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.delete(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "84a0737e-ceef-4259-9905-171f6c43c66f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if trigger not found.",
                "fullTitle": "Enterprise Trigger.DeleteUserTrigger Should get error, if trigger not found.",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { path: triggerPath, body: triggerPath };\ncommonMock.triggerDeleteNotFound(opt);\napi.delete(apiURL404)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.TRIGGER_NOT_FOUND);\n            httpmock.cleanAll();\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "b277de82-7866-4078-ae96-730502de9004",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should delete trigger, if trigger is found.",
                "fullTitle": "Enterprise Trigger.DeleteUserTrigger Should delete trigger, if trigger is found.",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { path: triggerPath, body: triggerPath };\ncommonMock.triggerDeleteSuccess(opt);\ntestData.mongoUserTriggerObj.user_uid = dummyUser.uid;\n//testData.mongoUserTriggerObj.project_uid = project.uid;\ntestData.mongoUserTriggerObj.uid = 'dummyTrigger'\n_models.UserTrigger.create(testData.mongoUserTriggerObj, function(err, result) {\n    //cbk(err, userTrigger);\n    if (err) {\n        done(err)\n    } else {\n        api.delete(apiURL)\n            .set('authtoken', dummyUser.authtoken)\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    res.body.output.message.should.equal(messageList.TRIGGER_DELETED_SUCCESSFULLY);\n                    done();\n                }\n            });\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "969abfae-0239-4a68-bdca-8e881f502f4c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "84a0737e-ceef-4259-9905-171f6c43c66f",
              "b277de82-7866-4078-ae96-730502de9004",
              "969abfae-0239-4a68-bdca-8e881f502f4c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 33,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "1ae1d894-b9f7-460d-968c-17dd6c50cc80",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\trigger\\executeUserTrigger.enterprise.js",
        "file": "\\controllers\\test\\trigger\\executeUserTrigger.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "9b237ab8-6136-4f41-9479-b1e3f348f19e",
            "title": "Trigger.ExecuteUserTrigger",
            "fullFile": "C:\\work\\api\\controllers\\test\\trigger\\executeUserTrigger.enterprise.js",
            "file": "\\controllers\\test\\trigger\\executeUserTrigger.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Trigger.ExecuteUserTrigger \"before all\" hook",
                "timedOut": false,
                "duration": 87,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\n_models.User.remove({ email: testData.testRegistrationBody.email }, function(error, user) {\n    api.post(\"/enterprise/v1/signup\")\n        .send(testData.testRegistrationBody)\n        .expect(httpStatus.CREATED)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                dummyUser = res.body.output;\n                done();\n            }\n        });\n});",
                "err": {},
                "isRoot": false,
                "uuid": "73ada6df-4f40-478f-8a19-ec84d17a675e",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise Trigger.ExecuteUserTrigger Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "4464cad2-b615-4c91-bac8-f718033c58e8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if trigger not found.",
                "fullTitle": "Enterprise Trigger.ExecuteUserTrigger Should get error, if trigger not found.",
                "timedOut": false,
                "duration": 107,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { path: triggerPath, body: triggerPath };\ncommonMock.triggerExecuteNotFound(opt);\napi.get(apiURL404)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.TRIGGER_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "c035ed85-4f97-4eb0-af06-dedd84a5c870",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should execute trigger, if trigger is found.",
                "fullTitle": "Enterprise Trigger.ExecuteUserTrigger Should execute trigger, if trigger is found.",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { path: triggerPath, body: triggerPath };\ncommonMock.triggerExecuteSuccess(opt);\napi.get(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.message.should.equal(messageList.TRIGGER_EXECUTED_SUCCESSFULLY);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "2c22ec91-ed97-4557-9abd-5c907cfeedd0",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "4464cad2-b615-4c91-bac8-f718033c58e8",
              "c035ed85-4f97-4eb0-af06-dedd84a5c870",
              "2c22ec91-ed97-4557-9abd-5c907cfeedd0"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 126,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "e170526c-e157-4dac-bf91-0663fcb4481b",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\trigger\\getUserTrigger.enterprise.js",
        "file": "\\controllers\\test\\trigger\\getUserTrigger.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "fd2fa3ed-2163-4fcd-b7ab-6a4179577aa6",
            "title": "Trigger.GetUserTrigger",
            "fullFile": "C:\\work\\api\\controllers\\test\\trigger\\getUserTrigger.enterprise.js",
            "file": "\\controllers\\test\\trigger\\getUserTrigger.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Trigger.GetUserTrigger \"before all\" hook",
                "timedOut": false,
                "duration": 91,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(user, cbk) {\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    },\n    function(result, cbk) {\n        dummyUser = result.body.output;\n        _models.Project.findOne({ name: config.default_project, owner_uid: dummyUser.uid }, function(err, project) {\n            cbk(err, project)\n        })\n    },\n    function(project, cbk) {\n        testData.mongoUserTriggerObj.user_uid = dummyUser.uid;\n        testData.mongoUserTriggerObj.project_uid = project.uid;\n        _models.UserTrigger.create(testData.mongoUserTriggerObj, function(err, userTrigger) {\n            cbk(err, userTrigger);\n        })\n    }\n], function(err, userTrigger) {\n    if (err) {\n        done(err);\n    } else {\n        userTriggerObj = userTrigger\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "8ad66b10-45b2-4e54-854d-f375a16c630c",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Trigger.GetUserTrigger \"after all\" hook",
                "timedOut": false,
                "duration": 3,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nhttpmock.cleanAll();\n_models.UserTrigger.remove({ uid: userTriggerObj.uid }, function(err, userTrigger) {\n    if (err) {\n        done(err)\n    } else {\n        clearRecords(function(err, result) {\n            done(err)\n        })\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "be4d3bbf-fc5d-47d5-829e-e10d2afcc352",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Trigger.GetUserTrigger Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + userTriggerObj.uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "276ac4ad-ba48-427e-90db-c2c5c0e15111",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if trigger is not found.",
                "fullTitle": "Enterprise Trigger.GetUserTrigger Should get error, if trigger is not found.",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL404)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.TRIGGER_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "6a22ca30-554b-4bf3-a924-784bdff978a1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if trigger server is not responding.",
                "fullTitle": "Enterprise Trigger.GetUserTrigger Should get error, if trigger server is not responding.",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { path: triggerPath, body: triggerPath };\ncommonMock.triggerRequestTimeout(opt);\napi.get(apiURL + userTriggerObj.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.GATEWAY_TIMEOUT)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).to.be.equal(messageList.TRIGGER_SERVER_DOWN)\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "70a9bde3-2782-4a27-9922-aa3b686f60a5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get user-trigger, if trigger is found.",
                "fullTitle": "Enterprise Trigger.GetUserTrigger Should get user-trigger, if trigger is found.",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { path: triggerPath, body: triggerPath };\ncommonMock.triggerGetSuccess(opt);\napi.get(apiURL + userTriggerObj.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output).to.have.any.keys(_.keys(testData.getUserTriggerResponse))\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "9d73e4a1-893d-41ff-9853-745be7709b38",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "276ac4ad-ba48-427e-90db-c2c5c0e15111",
              "6a22ca30-554b-4bf3-a924-784bdff978a1",
              "70a9bde3-2782-4a27-9922-aa3b686f60a5",
              "9d73e4a1-893d-41ff-9853-745be7709b38"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 48,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "7f582816-7c91-4ddc-8440-598a07558a00",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\trigger\\getUserTriggerByAuth.enterprise.js",
        "file": "\\controllers\\test\\trigger\\getUserTriggerByAuth.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "75b9f074-24d7-42b5-873b-47f71dd2b506",
            "title": "Trigger.GetUserTriggerByAuth",
            "fullFile": "C:\\work\\api\\controllers\\test\\trigger\\getUserTriggerByAuth.enterprise.js",
            "file": "\\controllers\\test\\trigger\\getUserTriggerByAuth.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Trigger.GetUserTriggerByAuth \"before all\" hook",
                "timedOut": false,
                "duration": 90,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\n_models.User.remove({ email: testData.testRegistrationBody.email }, function(error, user) {\n    api.post(\"/enterprise/v1/signup\")\n        .send(testData.testRegistrationBody)\n        .expect(httpStatus.CREATED)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                dummyUser = res.body.output;\n                done();\n            }\n        });\n});",
                "err": {},
                "isRoot": false,
                "uuid": "d8083eb9-fd0b-4fdd-9700-f4e3f5f1e557",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Trigger.GetUserTriggerByAuth Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "53313546-01bf-418d-bc59-1c45da9b55a6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if \"uid\" param is missing.",
                "fullTitle": "Enterprise Trigger.GetUserTriggerByAuth Should get error, if \"uid\" param is missing.",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send()\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "1e0bf96f-deec-4417-b2fc-57a50ba35a2e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get user-triggers, if auth uid is present and valid.",
                "fullTitle": "Enterprise Trigger.GetUserTriggerByAuth Should get user-triggers, if auth uid is present and valid.",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(searchParam)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.should.be.instanceOf(Array);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "4d23fac5-38f6-4c18-b30f-3a8ac23d57d2",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "53313546-01bf-418d-bc59-1c45da9b55a6",
              "1e0bf96f-deec-4417-b2fc-57a50ba35a2e",
              "4d23fac5-38f6-4c18-b30f-3a8ac23d57d2"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 32,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "81ac6634-7cdd-4325-8a9f-bccbc1d570fa",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\trigger\\listTriggers.enterprise.js",
        "file": "\\controllers\\test\\trigger\\listTriggers.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "0e12dcbf-31e8-4ecc-9068-7d003d51d1e9",
            "title": "Trigger.ListTriggers",
            "fullFile": "C:\\work\\api\\controllers\\test\\trigger\\listTriggers.enterprise.js",
            "file": "\\controllers\\test\\trigger\\listTriggers.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Trigger.ListTriggers \"before all\" hook",
                "timedOut": false,
                "duration": 85,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\n_models.User.remove({ email: testData.testRegistrationBody.email }, function(error, user) {\n    api.post(\"/enterprise/v1/signup\")\n        .send(testData.testRegistrationBody)\n        .expect(httpStatus.CREATED)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                dummyUser = res.body.output;\n                done();\n            }\n        });\n});",
                "err": {},
                "isRoot": false,
                "uuid": "0a8061e9-0b78-459a-b85c-2b41642d16c0",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should get list of triggers.",
                "fullTitle": "Enterprise Trigger.ListTriggers Should get list of triggers.",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.should.be.instanceOf(Array);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "3ab48e42-e3c5-4730-90be-3ea18fb51d39",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Trigger.ListTriggers Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "6e589966-7639-4e04-a23d-f3e6d0c014b7",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "3ab48e42-e3c5-4730-90be-3ea18fb51d39",
              "6e589966-7639-4e04-a23d-f3e6d0c014b7"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 17,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "71f040e9-6c96-4d7c-a3bb-8ad1539399a8",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\trigger\\listUserTriggers.enterprise.js",
        "file": "\\controllers\\test\\trigger\\listUserTriggers.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "937919d6-f33e-431a-b781-6ffd8eb8fa38",
            "title": "Trigger.ListUserTriggers",
            "fullFile": "C:\\work\\api\\controllers\\test\\trigger\\listUserTriggers.enterprise.js",
            "file": "\\controllers\\test\\trigger\\listUserTriggers.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Trigger.ListUserTriggers \"before all\" hook",
                "timedOut": false,
                "duration": 94,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(user, cbk) {\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    },\n    function(result, cbk) {\n        dummyUser = result.body.output;\n        _models.Project.findOne({ name: config.default_project, owner_uid: dummyUser.uid }, function(err, project) {\n            cbk(err, project)\n        })\n    },\n    function(project, cbk) {\n        testData.mongoUserTriggerObj.user_uid = dummyUser.uid;\n        testData.mongoUserTriggerObj.project_uid = project.uid;\n        testData.mongoUserTriggerObj.env_uid = project.env_uid;\n        _models.UserTrigger.create(testData.mongoUserTriggerObj, function(err, userTrigger) {\n            cbk(err, userTrigger);\n        })\n    }\n], function(err, userTrigger) {\n    if (err) {\n        done(err);\n    } else {\n        userTriggerObj = userTrigger\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "1d8a3388-c382-44db-81dd-f0911b89223c",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Trigger.ListUserTriggers \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n_models.UserTrigger.remove({ uid: userTriggerObj.uid }, function(err, userTrigger) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "8b8d145f-0acf-4a56-848d-873e85dfa233",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should get list of triggers.",
                "fullTitle": "Enterprise Trigger.ListUserTriggers Should get list of triggers.",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var response = res.body.output\n            response.should.be.instanceOf(Array);\n            expect(_.first(_.first(response).triggers)).to.have.any.keys(_.keys(testData.getUserTriggerResponse))\n            expect(_.first(_.first(response).triggers)).not.to.have.all.keys(['_id', '__v']);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "d833eb3f-132a-4ead-8678-92f179aaefea",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Trigger.ListUserTriggers Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "f0b9c4d4-ee0d-4d4f-bf1e-0b5f6ca02b23",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d833eb3f-132a-4ead-8678-92f179aaefea",
              "f0b9c4d4-ee0d-4d4f-bf1e-0b5f6ca02b23"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 20,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "81323c44-7e01-43a8-8b8f-b4e160269bd4",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\trigger\\pullUserTrigger.enterprise.js",
        "file": "\\controllers\\test\\trigger\\pullUserTrigger.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "e5e10764-c691-4883-b487-43c38154c90f",
            "title": "Trigger.PullUserTrigger",
            "fullFile": "C:\\work\\api\\controllers\\test\\trigger\\pullUserTrigger.enterprise.js",
            "file": "\\controllers\\test\\trigger\\pullUserTrigger.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Trigger.PullUserTrigger \"before all\" hook",
                "timedOut": false,
                "duration": 123,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(user, cbk) {\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    },\n    function(result, cbk) {\n        dummyUser = result.body.output;\n        testData.mongoUserTriggerObj.user_uid = dummyUser.uid;\n        _models.UserTrigger.create(testData.mongoUserTriggerObj, function(err, userTrigger) {\n            cbk(err, userTrigger);\n        })\n    },\n    function(userTrigger, cbk) {\n        userTriggerObj = userTrigger\n        testData.flowBody.trigger.handlers = [userTriggerObj.uid]\n        api.post(flowURL)\n            .set('authtoken', dummyUser.authtoken)\n            .send(testData.flowBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                cbk(err, res)\n            })\n    },\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        userFlow = res.body.output;\n        pullTriggerData = {\n            \"trigger\": {\n                \"flow_uid\": userFlow.uid,\n                \"uid\": userTriggerObj.uid,\n                \"provider\": \"clock\"\n            }\n        }\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "b66a83ee-495a-4482-a370-69ff0bc2cfde",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Trigger.PullUserTrigger \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nhttpmock.cleanAll();\nasync.parallel([\n    function(cb) {\n        _models.newFlow.remove({ uid: userFlow.uid }, function(err) {\n            cb(err)\n        })\n    },\n    function(cb) {\n        _models.UserTrigger.remove({ uid: userTriggerObj.uid }, function(err, deletedUserTrigger) {\n            cb(err, deletedUserTrigger);\n        })\n    },\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "e28e0123-019b-4099-ba0f-977a8ccbb50c",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise Trigger.PullUserTrigger Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "e46ad3f9-1427-4507-b68a-84e778bc748e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error if \"trigger\" key missing in request body.",
                "fullTitle": "Enterprise Trigger.PullUserTrigger Should get error if \"trigger\" key missing in request body.",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar data = _.clone(pullTriggerData);\ndata = _.omit(data, 'trigger');\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(data)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "a1ab2ff7-f14d-41c6-9b28-6a5edee18da0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error if \"flow_uid\" key missing in request body.",
                "fullTitle": "Enterprise Trigger.PullUserTrigger Should get error if \"flow_uid\" key missing in request body.",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar data = _.clone(pullTriggerData);\ndata = _.omit(data.trigger, 'flow_uid');\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(data)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "76f9b03f-0a45-47d5-ad05-96b14363d431",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should pull trigger, if trigger data is valid.",
                "fullTitle": "Enterprise Trigger.PullUserTrigger Should pull trigger, if trigger data is valid.",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { path: triggerPath, getPath: getTriggerPath + '/handlers', body: { \"unset\": [/^fl\\w*/] } };\ncommonMock.triggerPullSuccess(opt);\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(pullTriggerData)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output.flow.trigger.handlers).to.be.empty\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "f310e21a-929e-41fe-9ebf-5459f918ba6c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error if trigger not found.",
                "fullTitle": "Enterprise Trigger.PullUserTrigger Should get error if trigger not found.",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar data = _.clone(pullTriggerData);\ndata.trigger.uid = 'dummyTrigger';\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(data)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.TRIGGER_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "45f9477f-22d4-46a9-8893-52d005fc1830",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e46ad3f9-1427-4507-b68a-84e778bc748e",
              "a1ab2ff7-f14d-41c6-9b28-6a5edee18da0",
              "76f9b03f-0a45-47d5-ad05-96b14363d431",
              "f310e21a-929e-41fe-9ebf-5459f918ba6c",
              "45f9477f-22d4-46a9-8893-52d005fc1830"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 71,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "77a41c64-8965-4b0e-9a79-6a57f8713ae8",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\trigger\\testUserTrigger.enterprise.js",
        "file": "\\controllers\\test\\trigger\\testUserTrigger.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "40028780-9f13-4e9c-a47f-f71dfa7d8272",
            "title": "Trigger.TestUserTrigger",
            "fullFile": "C:\\work\\api\\controllers\\test\\trigger\\testUserTrigger.enterprise.js",
            "file": "\\controllers\\test\\trigger\\testUserTrigger.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Trigger.TestUserTrigger \"before all\" hook",
                "timedOut": false,
                "duration": 104,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data\n        async.waterfall([\n            function(cbk) {\n                api.get('/enterprise/v1/user')\n                    .set('authtoken', orgData.owner.authtoken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            dummyUser = res.body.output;\n                            cbk(err, dummyUser)\n                        }\n                    });\n            },\n            function(dummyUser, cbk) {\n                _models.Project.findOne({\n                    name: config.default_project,\n                    owner_uid: dummyUser.uid\n                }, function(err, project) {\n                    cbk(err, project)\n                })\n            },\n            function(result, cbk) {\n                api.post(flowURL)\n                    .set('authtoken', dummyUser.authtoken)\n                    .send(testData.enterpriseFlowBody)\n                    .expect(httpStatus.CREATED)\n                    .end(function(err, res) {\n                        cbk(err, res)\n                    })\n            }\n        ], function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                userFlow = res.body.output;\n                done()\n            }\n        })\n    });\n})",
                "err": {},
                "isRoot": false,
                "uuid": "32eb2b41-3a9f-4a6e-bfe7-5710290f4f1c",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Trigger.TestUserTrigger \"after all\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nhttpmock.cleanAll();\nasync.parallel([\n    function(cb) {\n        _models.newFlow.remove({ uid: userFlow.uid }, function(err) {\n            cb(err)\n        })\n    },\n    function(cb) {\n        createdTriggers.push(userTrigger.uid)\n        _models.UserTrigger.remove({ uid: { $in: createdTriggers } }, function(err) {\n            cb(err)\n        })\n    }\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "f527dfc7-d419-43a9-884e-9ae102b193a5",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise Trigger.TestUserTrigger Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "da307e62-04f9-4a95-b6c1-506d96345715",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error if \"trigger\" key missing in request body.",
                "fullTitle": "Enterprise Trigger.TestUserTrigger Should get error if \"trigger\" key missing in request body.",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar triggerData = _.clone(testData.enterpriseFlowBody);\ntriggerData = _.omit(triggerData, 'trigger');\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(triggerData)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "7c18873c-aa8c-4864-8200-fc68bc9ab0d1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error if trigger data is invalid in request body.",
                "fullTitle": "Enterprise Trigger.TestUserTrigger Should get error if trigger data is invalid in request body.",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar triggerData = _.clone(testData.triggerBody);\ntriggerData = _.omit(triggerData.trigger, 'name');\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(triggerData)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "b24421dc-4e4e-4581-88e3-6ad38f00d786",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error if user-auth token is invalid.",
                "fullTitle": "Enterprise Trigger.TestUserTrigger Should get error if user-auth token is invalid.",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { path: triggerPath, body: triggerPath }\ncommonMock.triggerCreateExchangeTokenError(opt)\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(testData.triggerBody)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ERROR_WHILE_EXCHANGING_TOKEN);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "5767befd-ac91-428e-9889-f85611b66ffb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should test trigger, if trigger data is valid.",
                "fullTitle": "Enterprise Trigger.TestUserTrigger Should test trigger, if trigger data is valid.",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.waterfall([\n    function(cbk) {\n        testData.mongoUserTriggerObj.user_uid = dummyUser.uid;\n        var trigUID = testData.expressTriggerResponse.uid;\n        // _models.UserTrigger.remove({uid: trigUID}, function(err, ut) {\n        _models.UserTrigger.create(testData.mongoUserTriggerObj, function(err, ut) {\n                var data = { uid: trigUID }\n                _models.UserTrigger.findOneAndUpdate({ uid: ut.uid }, data, { new: true }, function(err, userTrig) {\n                    cbk(err, userTrig);\n                })\n            })\n            // })\n    },\n    function(ut, cbk) {\n        var opt = { path: triggerPath, body: triggerPath }\n        commonMock.triggerCreateSuccess(opt);\n        var opt1 = { path: triggerPath, getPath: getTriggerPath + '/handlers', body: { \"unset\": [/^fl\\w*/] }, update: true, times: 2 };\n        commonMock.triggerPushSuccess(opt1);\n        var opt2 = { path: triggerPath, getPath: getTriggerPath + '/handlers', body: { \"push\": [/^fl\\w*/] }, update: true, times: 2 };\n        commonMock.triggerPushSuccess(opt2);\n        var opt3 = { path: triggerPath, getPath: getTriggerPath + '/handlers', body: { \"pull\": [/^fl\\w*/] }, update: true, times: 2 };\n        commonMock.triggerPushSuccess(opt3);\n        var triggerData = _.cloneDeep(testData.triggerEnterpriseBody);\n        triggerData.trigger.flow = userFlow.uid\n        api.post(apiURL)\n            .set('authtoken', dummyUser.authtoken)\n            .send(triggerData)\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                cbk(err, res)\n            });\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        userTrigger = res.body.output;\n        expect(userTrigger).to.have.any.keys(_.keys(testData.getUserTriggerResponse))\n        expect(userTrigger).not.to.have.all.keys(['_id', '__v']);\n        _models.UserTrigger.remove({ uid: userTrigger.uid }, function(err) {\n            done(err)\n        })\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "3d346d64-340e-4b50-bd69-143744415fd2",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "da307e62-04f9-4a95-b6c1-506d96345715",
              "7c18873c-aa8c-4864-8200-fc68bc9ab0d1",
              "b24421dc-4e4e-4581-88e3-6ad38f00d786",
              "5767befd-ac91-428e-9889-f85611b66ffb",
              "3d346d64-340e-4b50-bd69-143744415fd2"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 50,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "fd732b3b-9d14-4d96-b1c1-6ac785e0ad97",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\trigger\\updateUserTrigger.enterprise.js",
        "file": "\\controllers\\test\\trigger\\updateUserTrigger.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "d43b6ed3-3401-405a-bbf8-16395cbc0781",
            "title": "Trigger.UpdateUserTrigger",
            "fullFile": "C:\\work\\api\\controllers\\test\\trigger\\updateUserTrigger.enterprise.js",
            "file": "\\controllers\\test\\trigger\\updateUserTrigger.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Trigger.UpdateUserTrigger \"before all\" hook",
                "timedOut": false,
                "duration": 89,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(user, cbk) {\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    },\n    function(result, cbk) {\n        dummyUser = result.body.output;\n        _models.Project.findOne({ name: config.default_project, owner_uid: dummyUser.uid }, function(err, project) {\n            cbk(err, project)\n        })\n    },\n    function(project, cbk) {\n        testData.mongoUserTriggerObj.user_uid = dummyUser.uid;\n        testData.mongoUserTriggerObj.project_uid = project.uid;\n        _models.UserTrigger.create(testData.mongoUserTriggerObj, function(err, userTrigger) {\n            cbk(err, userTrigger);\n        })\n    }\n], function(err, userTrigger) {\n    if (err) {\n        done(err);\n    } else {\n        userTriggerObj = userTrigger\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "201eca87-f5fa-4761-9de4-f948afb83fca",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Trigger.UpdateUserTrigger \"after all\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nhttpmock.cleanAll();\n_models.UserTrigger.remove({ uid: userTriggerObj.uid }, function(err, userTrigger) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "3b2bd579-e904-405f-8a48-2b2976db11b4",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise Trigger.UpdateUserTrigger Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put(apiURL + userTriggerObj.uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "426426c4-291a-4f42-b060-bf09a9402100",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if \"trigger\" key missing in request body.",
                "fullTitle": "Enterprise Trigger.UpdateUserTrigger Should get error, if \"trigger\" key missing in request body.",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar triggerData = _.cloneDeep(testData.triggerBody);\ntriggerData = _.omit(triggerData, 'trigger');\napi.put(apiURL + userTriggerObj.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .send(triggerData)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "7b2cf428-a335-4ea2-a4a6-516326b1b7ec",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if trigger data is invalid in request body.",
                "fullTitle": "Enterprise Trigger.UpdateUserTrigger Should get error, if trigger data is invalid in request body.",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar triggerData = _.clone(testData.triggerBody);\ntriggerData = _.omit(triggerData.trigger, 'name');\napi.put(apiURL + userTriggerObj.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .send(triggerData)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "9c5505af-d968-4da2-8f58-f3347fd1af62",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if user-auth token is invalid.",
                "fullTitle": "Enterprise Trigger.UpdateUserTrigger Should get error, if user-auth token is invalid.",
                "timedOut": false,
                "duration": 19,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { path: triggerPath, body: triggerPath };\ncommonMock.triggerUpdateExchangeTokenError(opt);\napi.put(apiURL + userTriggerObj.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .send(testData.triggerBody)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.ERROR_WHILE_EXCHANGING_TOKEN);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "7be9f809-b785-466c-b1c1-f26de3f6f020",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should update trigger, if trigger data is valid.",
                "fullTitle": "Enterprise Trigger.UpdateUserTrigger Should update trigger, if trigger data is valid.",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { path: triggerPath, body: triggerPath };\ncommonMock.triggerUpdateSuccess(opt);\napi.put(apiURL + userTriggerObj.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .send(testData.triggerBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var userTrigger = res.body.output;\n            expect(userTrigger).to.have.any.keys(_.keys(testData.getUserTriggerResponse))\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "97cc56b4-0724-4f6f-836c-640bd9138451",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if trigger not found.",
                "fullTitle": "Enterprise Trigger.UpdateUserTrigger Should get error, if trigger not found.",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { path: triggerPath, body: triggerPath };\ncommonMock.triggerUpdateNotFound(opt);\napi.put(apiURL + 'dummyTrigger')\n    .set('authtoken', dummyUser.authtoken)\n    .send(testData.triggerBody)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.TRIGGER_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "d9ec829f-1bb1-4d5e-bf32-8314de1a70cf",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "426426c4-291a-4f42-b060-bf09a9402100",
              "7b2cf428-a335-4ea2-a4a6-516326b1b7ec",
              "9c5505af-d968-4da2-8f58-f3347fd1af62",
              "7be9f809-b785-466c-b1c1-f26de3f6f020",
              "97cc56b4-0724-4f6f-836c-640bd9138451",
              "d9ec829f-1bb1-4d5e-bf32-8314de1a70cf"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 82,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "22fe26fe-1745-4769-b1c5-2889f69a372f",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\trigger\\upsertUserTrigger.enterprise.js",
        "file": "\\controllers\\test\\trigger\\upsertUserTrigger.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "93313c09-288c-46f3-a8a4-d2a968078d36",
            "title": "Trigger.UpsertUserTrigger",
            "fullFile": "C:\\work\\api\\controllers\\test\\trigger\\upsertUserTrigger.enterprise.js",
            "file": "\\controllers\\test\\trigger\\upsertUserTrigger.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Trigger.UpsertUserTrigger \"before all\" hook",
                "timedOut": false,
                "duration": 92,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data\n        async.waterfall([\n            function(cbk) {\n                dummyUser = orgData.owner;\n                dummyUser.authtoken = dummyUser.authtoken;\n                _models.Project.findOne({\n                    name: config.default_project,\n                    owner_uid: dummyUser.uid\n                }, function(err, project) {\n                    cbk(err, project)\n                })\n            },\n            function(project, cbk) {\n                testData.mongoUserTriggerObj.user_uid = dummyUser.uid;\n                testData.mongoUserTriggerObj.project_uid = project.uid;\n                _models.UserTrigger.create(testData.mongoUserTriggerObj, function(err, userTrigger) {\n                    cbk(err, userTrigger);\n                })\n            },\n            function(userTrigger, cbk) {\n                userTriggerObj = userTrigger;\n                testData.flowBody.trigger.handlers = [userTriggerObj]\n                var flow = _.cloneDeep(testData.flowBody)\n                flow.active = false;\n                api.post(flowURL)\n                    .set('authtoken', dummyUser.authtoken)\n                    .send(flow)\n                    .expect(httpStatus.CREATED)\n                    .end(function(err, res) {\n                        cbk(err, res)\n                    })\n            }\n        ], function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                userFlow = res.body.output;\n                upsertData = { flow_uid: userFlow.uid, trigger_uid: userTriggerObj.uid }\n                done()\n            }\n        })\n    });\n})",
                "err": {},
                "isRoot": false,
                "uuid": "675c9016-62d8-4261-978a-3b5384ccb266",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Trigger.UpsertUserTrigger \"after all\" hook",
                "timedOut": false,
                "duration": 3,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nhttpmock.cleanAll();\nasync.parallel([\n    function(cb) {\n        _models.newFlow.remove({ uid: userFlow.uid }, function(err) {\n            cb(err)\n        })\n    },\n    function(cb) {\n        _models.UserTrigger.remove({ uid: userTriggerObj.uid }, function(err, deletedUserTrigger) {\n            cb(err, deletedUserTrigger);\n        })\n    },\n    function(cb) {\n        clearRecords(function(err, result) {\n            cb(err, result)\n        })\n    }\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "714622d8-9695-4914-a46f-cbe88fe4c565",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise Trigger.UpsertUserTrigger Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "807dc72a-c786-4a89-9ab0-74248f9a5245",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error if \"trigger_uid\" key missing in request body.",
                "fullTitle": "Enterprise Trigger.UpsertUserTrigger Should get error if \"trigger_uid\" key missing in request body.",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar data = _.cloneDeep(upsertData);\ndata = _.omit(data, 'trigger_uid');\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(data)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "95a9affb-f04f-476a-a9e9-dc6da1113ca3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error if \"flow_uid\" key missing in request body.",
                "fullTitle": "Enterprise Trigger.UpsertUserTrigger Should get error if \"flow_uid\" key missing in request body.",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar data = _.cloneDeep(upsertData);\ndata = _.omit(data, 'flow_uid');\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(data)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "847b76aa-0105-4963-90e7-b47cb79a0bf6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error if flow not found.",
                "fullTitle": "Enterprise Trigger.UpsertUserTrigger Should get error if flow not found.",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar data = _.cloneDeep(upsertData);\ndata.flow_uid = 'dummyFlow';\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(data)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.FLOW_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "0edc5867-8f8d-4f25-8abb-e5a7c7605250",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should upsert trigger and keep flow in in-active state if plan exceeds and trigger data is valid.",
                "fullTitle": "Enterprise Trigger.UpsertUserTrigger Should upsert trigger and keep flow in in-active state if plan exceeds and trigger data is valid.",
                "timedOut": false,
                "duration": 98,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { path: triggerPath, getPath: getTriggerPath + '/handlers', body: { \"unset\": [/^fl\\w*/] }, update: true, times: 2 };\ncommonMock.triggerPullSuccess(opt);\nopt.body = { \"push\": [/^fl\\w*/] }\ncommonMock.triggerPushSuccess(opt);\nvar flowData = testData.enterpriseFlowBody\nasync.times(5, function(n, next) {\n    createFlow(flowURL, flowData, dummyUser, function(err, flow) {\n        next(err, flow)\n    })\n}, function(err, results) {\n    if (err) {\n        done(err)\n    } else {\n        var triggerData = testData.triggerEnterpriseBody;\n        triggerData.trigger.flow = userFlow.uid\n        api.post(apiURL)\n            .set('authtoken', dummyUser.authtoken)\n            .send(upsertData)\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    expect(res.body.output.uid).to.be.equal(upsertData.trigger_uid)\n                    expect(res.body.output).not.to.have.all.keys(['_id', '__v']);\n                    _models.newFlow.findOne({ uid: userFlow.uid }, function(err, result) {\n                        if (err) {\n                            done(err)\n                        } else {\n                            expect(result.active).to.be.equal(false)\n                            done();\n                        }\n                    })\n                }\n            });\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "7663bb9a-8270-4796-afbb-954a8daf92d6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should upsert trigger within organization.",
                "fullTitle": "Enterprise Trigger.UpsertUserTrigger Should upsert trigger within organization.",
                "timedOut": false,
                "duration": 60,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { path: triggerPath, getPath: getTriggerPath + '/handlers', body: { \"unset\": [/^fl\\w*/] }, update: true };\ncommonMock.triggerPullSuccess(opt);\nopt.body = { \"push\": [/^fl\\w*/] }\ncommonMock.triggerPushSuccess(opt);\nvar tempOrgBody = orgBody;\n// var opt = { path: getTriggerPath, body: getTriggerPath, times: 2 };\n// commonMock.triggerCreateSuccess(opt);\nasync.waterfall([\n    function(cbk) {\n        //dummyUser = result.body.output;\n        _models.Project.findOne({ name: config.default_project, owner_uid: orgData.organization.user_uid }, function(err, project) {\n            cbk(err, project, org)\n        })\n    },\n    function(project, org, cbk) {\n        testData.mongoUserTriggerObj.user_uid = orgData.organization.user_uid;\n        testData.mongoUserTriggerObj.project_uid = project.uid;\n        testData.mongoUserTriggerObj.org_uid = orgData.organization.uid;\n        var trigUID = testData.expressTriggerResponse.uid;\n        // _models.UserTrigger.remove({uid: trigUID}, function(err, ut) {\n        _models.UserTrigger.create(testData.mongoUserTriggerObj, function(err, ut) {\n                var data = { uid: trigUID }\n                _models.UserTrigger.findOneAndUpdate({ uid: ut.uid }, data, { new: true }, function(err, userTrig) {\n                    cbk(err, userTrig, org);\n                })\n            })\n            // })\n    },\n    function(userTrig, org, cbk) {\n        api.post(flowURL)\n            .set({ 'authtoken': dummyUser.authtoken, org_uid: orgData.organization.uid })\n            .send(testData.enterpriseFlowBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                cbk(err, res, org, userTrig)\n            })\n    },\n    function(res, org, userTrig, cbk) {\n        orgFlow = res.body.output\n        upsertData.flow_uid = orgFlow.uid;\n        upsertData.trigger_uid = userTrig.uid;\n        var opt = { path: triggerPath, body: triggerPath }\n        commonMock.triggerCreateSuccess(opt);\n        var triggerData = testData.triggerEnterpriseBody;\n        triggerData.trigger.flow = orgFlow.uid\n        api.post(apiURL)\n            .set({ authtoken: dummyUser.authtoken, org_uid: orgData.organization.uid })\n            .send(upsertData)\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                cbk(err, res, org)\n            });\n\n    }\n], function(err, res, org) {\n    if (err) {\n        done(err);\n    } else {\n        expect(res.body.output.uid).to.be.equal(upsertData.trigger_uid)\n            // expect(res.body.output.org_uid).to.be.equal(orgData.organization.uid)\n            // expect(res.body.output.user_uid).to.be.equal(orgData.organization.user_uid)\n        expect(res.body.output).not.to.have.all.keys(['_id', '__v']);\n        expect(res.body.output.project_uid).not.to.be.null;\n        done();\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "04da5062-9801-4fd7-b86a-085f2a855aee",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "807dc72a-c786-4a89-9ab0-74248f9a5245",
              "95a9affb-f04f-476a-a9e9-dc6da1113ca3",
              "847b76aa-0105-4963-90e7-b47cb79a0bf6",
              "0edc5867-8f8d-4f25-8abb-e5a7c7605250",
              "7663bb9a-8270-4796-afbb-954a8daf92d6",
              "04da5062-9801-4fd7-b86a-085f2a855aee"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 191,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "78ac4d41-c8f2-4604-b29a-6bba13626563",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\userAuth\\createUserAuth.enterprise.js",
        "file": "\\controllers\\test\\userAuth\\createUserAuth.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "97a537a2-ab78-4e23-b2b1-4f78cedc4775",
            "title": "UserAuth",
            "fullFile": "C:\\work\\api\\controllers\\test\\userAuth\\createUserAuth.enterprise.js",
            "file": "\\controllers\\test\\userAuth\\createUserAuth.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "d0e99cc9-e435-4377-9b1c-d809e1757b9b",
                "title": "UserAuth.createUserAuth",
                "fullFile": "C:\\work\\api\\controllers\\test\\userAuth\\createUserAuth.enterprise.js",
                "file": "\\controllers\\test\\userAuth\\createUserAuth.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Enterprise UserAuth UserAuth.createUserAuth \"before all\" hook",
                    "timedOut": false,
                    "duration": 922,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.createFlowUser({}, function(error, user) {\n        if (error) {\n            done(error);\n        } else {\n            authToken = user.authtoken;\n            token = user.activation_token;\n            _id = user._id;\n            uid = user.uid;\n            done();\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "42b57261-d4ff-44c5-9597-735b703055f5",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise UserAuth UserAuth.createUserAuth \"after all\" hook",
                    "timedOut": false,
                    "duration": 6,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\nclearRecords(function(err, result) {\n    done(err);\n})",
                    "err": {},
                    "isRoot": false,
                    "uuid": "856abbda-0fc9-4a8d-90bb-94902a5ee69e",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should create user auth.",
                    "fullTitle": "Enterprise UserAuth UserAuth.createUserAuth Should create user auth.",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .send(userAuthyBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.uid != \"\" &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\";\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f57105ee-a719-4e50-b9b4-ee6629a4723a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should create user auth within organization.",
                    "fullTitle": "Enterprise UserAuth UserAuth.createUserAuth Should create user auth within organization.",
                    "timedOut": false,
                    "duration": 5188,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempOrgBody = orgBody;\nasync.waterfall([\n    function(cbk) {\n        createOrgPlans(function() {\n            api.post('/enterprise/v1/organizations')\n                .send(tempOrgBody)\n                .set('authtoken', authToken)\n                .expect(httpStatus.CREATED)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        var org = res.body.output;\n                        _models.User.findOne({\n                            uid: res.body.output.user_uid\n                        }).lean().exec(function(err, user) {\n                            cbk(err, org)\n                        });\n                    }\n                });\n        });\n    },\n    function(org, cbk) {\n        api.post(apiURL)\n            .send(userAuthyBody)\n            .set({ authtoken: authToken, org_uid: org.uid })\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                cbk(err, res, org)\n            });\n    }\n], function(err, res, org) {\n    if (err) {\n        done(err);\n    } else {\n        var userAuth = res.body.output\n        var isValid = userAuth.uid != \"\" &&\n            typeof(userAuth._id) == \"undefined\" &&\n            typeof(userAuth.__v) == \"undefined\";\n        isValid.should.equal(true);\n        expect(userAuth).to.have.any.keys(['uid', 'org_uid', 'env_uid', 'project_uid']);\n        expect(userAuth.org_uid).equal(org.uid);\n        expect(userAuth.user).equal(org.org_account.uid);\n        done();\n    }\n})",
                    "err": {},
                    "isRoot": false,
                    "uuid": "49d2ad76-94f8-48a2-a682-6b5d942561fd",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as auth name is not provided.",
                    "fullTitle": "Enterprise UserAuth UserAuth.createUserAuth Should give error as auth name is not provided.",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempUserAuthyBody = global.getImmutable(userAuthyBody);\ndelete tempUserAuthyBody.name;\napi.post(apiURL)\n    .send(tempUserAuthyBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.name.message.should.equal(messageList.USER_AUTH_NAME_REQUIRED);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8f650c29-0a83-44cb-b6fc-436e97588208",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should create auth when category is not provided.",
                    "fullTitle": "Enterprise UserAuth UserAuth.createUserAuth Should create auth when category is not provided.",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempUserAuthyBody = global.getImmutable(userAuthyBody);\ndelete tempUserAuthyBody.category;\napi.post(apiURL)\n    .send(tempUserAuthyBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.uid != \"\" &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\";\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e01a97d0-6fd4-4846-a780-be35ac647f7d",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as auth data is not provided.",
                    "fullTitle": "Enterprise UserAuth UserAuth.createUserAuth Should give error as auth data is not provided.",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempUserAuthyBody = global.getImmutable(userAuthyBody);\ndelete tempUserAuthyBody.data;\napi.post(apiURL)\n    .send(tempUserAuthyBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.data.message.should.equal(messageList.USER_AUTH_DATA_REQUIRED);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8f76030f-79ca-4621-8798-583990bc989d",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise UserAuth UserAuth.createUserAuth Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .send(userAuthyBody)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "507771f3-b8fd-4393-bc59-d35391462418",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "f57105ee-a719-4e50-b9b4-ee6629a4723a",
                  "49d2ad76-94f8-48a2-a682-6b5d942561fd",
                  "8f650c29-0a83-44cb-b6fc-436e97588208",
                  "e01a97d0-6fd4-4846-a780-be35ac647f7d",
                  "8f76030f-79ca-4621-8798-583990bc989d",
                  "507771f3-b8fd-4393-bc59-d35391462418"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 5235,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "ccf800a2-e20e-401a-b499-eb9db8318a95",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\userAuth\\deleteUserAuth.enterprise.js",
        "file": "\\controllers\\test\\userAuth\\deleteUserAuth.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "bbde3438-0f2c-4d67-bc55-2e59f07d4735",
            "title": "UserAuth",
            "fullFile": "C:\\work\\api\\controllers\\test\\userAuth\\deleteUserAuth.enterprise.js",
            "file": "\\controllers\\test\\userAuth\\deleteUserAuth.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "11d190bf-eb23-4f55-8ea4-c185029069aa",
                "title": "UserAuth.deleteUserAuth",
                "fullFile": "C:\\work\\api\\controllers\\test\\userAuth\\deleteUserAuth.enterprise.js",
                "file": "\\controllers\\test\\userAuth\\deleteUserAuth.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise UserAuth UserAuth.deleteUserAuth \"before each\" hook",
                    "timedOut": false,
                    "duration": 19,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.createFlowUser({}, function(error, user) {\n        if (error) {\n            done(error);\n        } else {\n            authToken = user.authtoken;\n            token = user.activation_token;\n            _id = user._id;\n            uid = user.uid;\n            apiURL = apiURL.replace(\":user_uid\", uid);\n            api.post(apiURL)\n                .send(userAuthyBody)\n                .set('authtoken', authToken)\n                .expect(httpStatus.CREATED)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        _authUid = res.body.output.uid;\n                        done();\n                    }\n                });\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "21eff91a-b0d3-4aa5-a991-a867723a7d8c",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise UserAuth UserAuth.deleteUserAuth \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "85b2154e-c126-4d45-9745-9986f1683342",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should delete user auth.",
                    "fullTitle": "Enterprise UserAuth UserAuth.deleteUserAuth Should delete user auth.",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar deleteAPIURL = apiURL + \"/\" + _authUid;\nvar opt = { path: '/oauth/' + _authUid };\ncommonMock.authDeleteSuccess(opt);\napi.delete(deleteAPIURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.message.should.equal(messageList.USER_AUTH_DELETED_SUCCESSFULLY);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ca4c83b6-2904-478b-b084-07c3720e4b71",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not delete another user's auth.",
                    "fullTitle": "Enterprise UserAuth UserAuth.deleteUserAuth Should not delete another user's auth.",
                    "timedOut": false,
                    "duration": 104,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar opt = { path: '/oauth/' + _authUid };\ncommonMock.authNotFound(opt);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.email = \"test.user+1@raweng.com\";\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\napi.post(\"/enterprise/v1/signup\")\n    .send(tempRegistrationBody)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            anotherUserAuthToken = res.body.output.authtoken;\n            anotherUserUid = res.body.output._id;\n            var deleteAPIURL = apiURL + \"/\" + _authUid;\n            api.delete(deleteAPIURL)\n                .set('authtoken', anotherUserAuthToken)\n                .expect(httpStatus.NOT_FOUND)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        res.body.error.message.should.equal(messageList.USER_AUTH_NOT_FOUND);\n                        done();\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7e70ff37-d45d-4d7a-9fd1-2d290010e48b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise UserAuth UserAuth.deleteUserAuth Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar deleteAPIURL = apiURL + \"/\" + _authUid;\napi.delete(deleteAPIURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4988be89-d4ac-4f3f-acce-20531dd60a85",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "ca4c83b6-2904-478b-b084-07c3720e4b71",
                  "7e70ff37-d45d-4d7a-9fd1-2d290010e48b",
                  "4988be89-d4ac-4f3f-acce-20531dd60a85"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 122,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "972b2ab2-a3b3-49bf-b628-c6b402dfbcd7",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\userAuth\\findUserAuth.enterprise.js",
        "file": "\\controllers\\test\\userAuth\\findUserAuth.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "8533f120-85f8-42a8-9183-b4853a7eea0e",
            "title": "UserAuth",
            "fullFile": "C:\\work\\api\\controllers\\test\\userAuth\\findUserAuth.enterprise.js",
            "file": "\\controllers\\test\\userAuth\\findUserAuth.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "0dbfd74b-66da-4431-8c96-51302b7a93f8",
                "title": "UserAuth.findUserAuth",
                "fullFile": "C:\\work\\api\\controllers\\test\\userAuth\\findUserAuth.enterprise.js",
                "file": "\\controllers\\test\\userAuth\\findUserAuth.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Enterprise UserAuth UserAuth.findUserAuth \"before all\" hook",
                    "timedOut": false,
                    "duration": 22,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.createFlowUser({}, function(error, user) {\n        if (error) {\n            done(error);\n        } else {\n            authToken = user.authtoken;\n            token = user.activation_token;\n            _id = user._id;\n            uid = user.uid;\n            apiURL = apiURL.replace(\":user_uid\", uid);\n            api.post(apiURL)\n                .send(userAuthyBody)\n                .set('authtoken', authToken)\n                .expect(httpStatus.CREATED)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        _authUid = res.body.output.uid;\n                        done();\n                    }\n                });\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "62058153-cd76-4553-a7e9-0aa028fcd086",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise UserAuth UserAuth.findUserAuth \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "217221e3-a6c2-4a66-8d2d-928e29d9fa74",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should find user auth.",
                    "fullTitle": "Enterprise UserAuth UserAuth.findUserAuth Should find user auth.",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar getAPIURL = apiURL + \"/\" + _authUid;\napi.get(getAPIURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.uid.should.equal(_authUid);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "db9f9daf-633e-45bb-b17d-998655501f1d",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error, if user auth not found.",
                    "fullTitle": "Enterprise UserAuth UserAuth.findUserAuth Should give error, if user auth not found.",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar getAPIURL = apiURL + \"/dummyAuth\";\napi.get(getAPIURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.USER_AUTH_NOT_FOUND);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4655d43d-5905-4db9-bd71-a398f5e37ae9",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise UserAuth UserAuth.findUserAuth Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar getAPIURL = apiURL + \"/\" + _authUid;\napi.get(getAPIURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8e8f74b9-61e0-4451-b684-1065ff6284bd",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "db9f9daf-633e-45bb-b17d-998655501f1d",
                  "4655d43d-5905-4db9-bd71-a398f5e37ae9",
                  "8e8f74b9-61e0-4451-b684-1065ff6284bd"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 27,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "1a3314d0-02ee-48ae-b48c-ffdadb5e22a3",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\userAuth\\getUserAuthList.enterprise.js",
        "file": "\\controllers\\test\\userAuth\\getUserAuthList.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "f405f999-9f6a-4d03-add0-8fd1f065dbf1",
            "title": "UserAuth",
            "fullFile": "C:\\work\\api\\controllers\\test\\userAuth\\getUserAuthList.enterprise.js",
            "file": "\\controllers\\test\\userAuth\\getUserAuthList.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "7e7d6498-f134-489b-bdc5-017e7af40e51",
                "title": "UserAuth.getUserAuthList",
                "fullFile": "C:\\work\\api\\controllers\\test\\userAuth\\getUserAuthList.enterprise.js",
                "file": "\\controllers\\test\\userAuth\\getUserAuthList.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise UserAuth UserAuth.getUserAuthList \"before each\" hook",
                    "timedOut": false,
                    "duration": 471,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    saveUserAuthForOneUser(\"test.user@raweng.com\", done, function() {\n        saveUserAuthForOneUser(\"test.user+10@raweng.com\", done, function() {\n            done();\n        });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b7dd28f0-55e8-4668-8b99-2bf0fd40f854",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise UserAuth UserAuth.getUserAuthList \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c2a2d203-8779-4129-8cf5-83e60846c1e6",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get user auths list group by type.",
                    "fullTitle": "Enterprise UserAuth UserAuth.getUserAuthList Should get user auths list group by type.",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (Array.isArray(res.body.output)) {\n                isValid = res.body.output[0].userauths.length == 10;\n                _.each(res.body.output[0].userauths, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) != \"undefined\" &&\n                        typeof(item.__v) == \"undefined\";\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c33ebda5-6de6-43a4-9395-a82db15c7fc9",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user auths.",
                    "fullTitle": "Enterprise UserAuth UserAuth.getUserAuthList Should get list of user auths.",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?list=true\";\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (Array.isArray(res.body.output)) {\n                isValid = res.body.output.length == 10;\n                _.each(res.body.output, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) != \"undefined\" &&\n                        typeof(item.__v) == \"undefined\";\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "dc28c035-da2b-49ae-8838-dc4c88949ed3",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get limited list of user auths based on skip/limit.",
                    "fullTitle": "Enterprise UserAuth UserAuth.getUserAuthList Should get limited list of user auths based on skip/limit.",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?list=true&skip=2&limit=2&field=created_at&direction=asc\";\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (Array.isArray(res.body.output)) {\n                isValid = res.body.output.length == 2;\n                _.each(res.body.output, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) != \"undefined\" &&\n                        typeof(item.__v) == \"undefined\";\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "76c96a6f-391f-4fc5-aba7-38a9f57c7151",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get limited list of user auths based on skip/limit in description descending order.",
                    "fullTitle": "Enterprise UserAuth UserAuth.getUserAuthList Should get limited list of user auths based on skip/limit in description descending order.",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?list=true&skip=2&limit=2&field=description&direction=desc\";\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (Array.isArray(res.body.output)) {\n                isValid = res.body.output.length == 2;\n                _.each(res.body.output, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) != \"undefined\" &&\n                        typeof(item.__v) == \"undefined\";\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c2158549-e8be-4579-9f96-d65d72b0af2d",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise UserAuth UserAuth.getUserAuthList Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "75ca1e7e-ca76-4328-a28c-9b9898faab23",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "c33ebda5-6de6-43a4-9395-a82db15c7fc9",
                  "dc28c035-da2b-49ae-8838-dc4c88949ed3",
                  "76c96a6f-391f-4fc5-aba7-38a9f57c7151",
                  "c2158549-e8be-4579-9f96-d65d72b0af2d",
                  "75ca1e7e-ca76-4328-a28c-9b9898faab23"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 61,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "fdadd280-3d05-4fee-ae90-2d0316bc03d3",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\userAuth\\updateUserAuth.enterprise.js",
        "file": "\\controllers\\test\\userAuth\\updateUserAuth.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "2d3bfcaa-6246-42ed-a2df-c6f53b117b02",
            "title": "UserAuth",
            "fullFile": "C:\\work\\api\\controllers\\test\\userAuth\\updateUserAuth.enterprise.js",
            "file": "\\controllers\\test\\userAuth\\updateUserAuth.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "900843c5-c139-4c34-9ecd-f44a41421aa4",
                "title": "UserAuth.updateUserAuth",
                "fullFile": "C:\\work\\api\\controllers\\test\\userAuth\\updateUserAuth.enterprise.js",
                "file": "\\controllers\\test\\userAuth\\updateUserAuth.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise UserAuth UserAuth.updateUserAuth \"before each\" hook",
                    "timedOut": false,
                    "duration": 111,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.createFlowUser({}, function(error, user) {\n        if (error) {\n            done(error);\n        } else {\n            authToken = user.authtoken;\n            token = user.activation_token;\n            _id = user._id;\n            uid = user.uid;\n            apiURL = apiURL.replace(\":uid\", uid);\n            saveUserAuthEntries({\n                authtoken: authToken\n            }, function(error, userAuthEntries) {\n                _userAuthEntries = userAuthEntries;\n                done();\n            });\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "918af42a-7017-4b34-b4da-508500aebd57",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise UserAuth UserAuth.updateUserAuth \"after all\" hook",
                    "timedOut": false,
                    "duration": 1,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveRecords(function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "830f0a6f-63bf-4937-bfff-dceae3c4f89e",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise UserAuth UserAuth.updateUserAuth \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ee61196b-26ee-4c38-bde8-e4b6f6150eb7",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should update user auth.",
                    "fullTitle": "Enterprise UserAuth UserAuth.updateUserAuth Should update user auth.",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempUserAuthyBody = global.getImmutable(_userAuthEntries[0].body.output);\ntempUserAuthyBody.name = \"utest_cases_MODIFIED\";\nparamURL = apiURL.replace(\":auth_uid\", tempUserAuthyBody.uid);\napi.put(paramURL)\n    .send(tempUserAuthyBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.uid != \"\" &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\";\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "38efefb6-0d37-4e1a-b54a-150d81b2d169",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should update user auth within organization.",
                    "fullTitle": "Enterprise UserAuth UserAuth.updateUserAuth Should update user auth within organization.",
                    "timedOut": false,
                    "duration": 5124,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempOrgBody = orgBody;\nvar userAuth = {\n    \"category\": \"google\",\n    \"name\": \"utest_cases_org\",\n    \"data\": {\n        \"code\": \"o2t:a0738c29-7775-4cbf-88df-d2718b7cbb7d\",\n        \"keys\": [\n            \"access_token\"\n        ]\n    },\n    \"description\": \"google_drive login\",\n    \"type\": \"google_drive\",\n    \"icon\": \"google-drive\"\n};\nasync.waterfall([\n    function(cbk) {\n        createOrgPlans(function() {\n            api.post('/enterprise/v1/organizations')\n                .send(tempOrgBody)\n                .set('authtoken', authToken)\n                .expect(httpStatus.CREATED)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        var org = res.body.output;\n                        _models.User.findOne({\n                            uid: res.body.output.user_uid\n                        }).lean().exec(function(err, user) {\n                            cbk(err, org)\n                        });\n                    }\n                });\n        });\n    },\n    function(org, cbk) {\n        api.post('/enterprise/v1/user/auths')\n            .send(userAuth)\n            .set({ authtoken: authToken, org_uid: org.uid })\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                cbk(err, res, org)\n            });\n    },\n    function(res, org, cbk) {\n        var tempUserAuthyBody = res.body.output\n        tempUserAuthyBody.name = \"utest_cases_MODIFIED\";\n        paramURL = apiURL.replace(\":auth_uid\", tempUserAuthyBody.uid);\n        api.put(paramURL)\n            .send(tempUserAuthyBody)\n            .set({ authtoken: authToken, org_uid: org.uid })\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                cbk(err, res, org)\n            });\n    }\n], function(err, res, org) {\n    if (err) {\n        done(err);\n    } else {\n        var userAuth = res.body.output\n        var isValid = userAuth.uid != \"\" &&\n            typeof(userAuth._id) == \"undefined\" &&\n            typeof(userAuth.__v) == \"undefined\";\n        isValid.should.equal(true);\n        expect(userAuth).to.have.any.keys(['uid', 'org_uid', 'env_uid', 'project_uid']);\n        expect(userAuth.org_uid).equal(org.uid);\n        expect(userAuth.user).equal(org.org_account.uid);\n        done();\n    }\n})",
                    "err": {},
                    "isRoot": false,
                    "uuid": "197de2bc-6af0-4f0e-9074-6a8fadcfe201",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as auth name is not provided.",
                    "fullTitle": "Enterprise UserAuth UserAuth.updateUserAuth Should give error as auth name is not provided.",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempUserAuthyBody = global.getImmutable(_userAuthEntries[0].body.output);\ndelete tempUserAuthyBody.name;\nparamURL = apiURL.replace(\":auth_uid\", tempUserAuthyBody.uid);\napi.put(paramURL)\n    .send(tempUserAuthyBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.name.message.should.equal(messageList.USER_AUTH_NAME_REQUIRED);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2c5e63b1-d24e-4049-af13-0527979d79be",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error, if user auth not found.",
                    "fullTitle": "Enterprise UserAuth UserAuth.updateUserAuth Should give error, if user auth not found.",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempUserAuthyBody = global.getImmutable(_userAuthEntries[0].body.output);\nparamURL = apiURL.replace(\":auth_uid\", \"dummyAuth\");\ntempUserAuthyBody.uid = \"dummyAuth\"\napi.put(paramURL)\n    .send(tempUserAuthyBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.USER_AUTH_NOT_FOUND);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "95bf6960-2262-4932-9460-7a870c39acaa",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as auth data is not provided.",
                    "fullTitle": "Enterprise UserAuth UserAuth.updateUserAuth Should give error as auth data is not provided.",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempUserAuthyBody = global.getImmutable(_userAuthEntries[0].body.output);\ndelete tempUserAuthyBody.data;\nparamURL = apiURL.replace(\":auth_uid\", tempUserAuthyBody.uid);\napi.put(paramURL)\n    .send(tempUserAuthyBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.data.message.should.equal(messageList.USER_AUTH_DATA_REQUIRED);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "772163e8-d6c9-441a-8e9b-2d9e936fb82f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error, if user auth not found.",
                    "fullTitle": "Enterprise UserAuth UserAuth.updateUserAuth Should give error, if user auth not found.",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempUserAuthyBody = global.getImmutable(_userAuthEntries[0].body.output);\nparamURL = apiURL.replace(\":auth_uid\", \"dummyAuth\");\ntempUserAuthyBody.uid = \"dummyAuth\"\napi.put(paramURL)\n    .send(tempUserAuthyBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.USER_AUTH_NOT_FOUND);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0ff429d8-757f-4b8d-8b80-db78c0328cc1",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise UserAuth UserAuth.updateUserAuth Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempUserAuthyBody = global.getImmutable(_userAuthEntries[0].body.output);\ntempUserAuthyBody.name = \"utest_cases_MODIFIED\";\nparamURL = apiURL.replace(\":auth_uid\", tempUserAuthyBody.uid);\napi.put(paramURL)\n    .send(tempUserAuthyBody)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ede40679-734a-40cc-8f5b-a83fe04a048a",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "38efefb6-0d37-4e1a-b54a-150d81b2d169",
                  "197de2bc-6af0-4f0e-9074-6a8fadcfe201",
                  "2c5e63b1-d24e-4049-af13-0527979d79be",
                  "95bf6960-2262-4932-9460-7a870c39acaa",
                  "772163e8-d6c9-441a-8e9b-2d9e936fb82f",
                  "0ff429d8-757f-4b8d-8b80-db78c0328cc1",
                  "ede40679-734a-40cc-8f5b-a83fe04a048a"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 5180,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "66dc76a7-0973-4f6f-a2dd-bcbb0f9f486b",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\userAuth\\updateUserAuthName.enterprise.js",
        "file": "\\controllers\\test\\userAuth\\updateUserAuthName.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "87d33676-55d8-4dd1-a1e1-9807d06ad1a5",
            "title": "UserAuth",
            "fullFile": "C:\\work\\api\\controllers\\test\\userAuth\\updateUserAuthName.enterprise.js",
            "file": "\\controllers\\test\\userAuth\\updateUserAuthName.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "e1d0b295-3d65-419c-8dc5-3a923610d95a",
                "title": "UserAuth.updateUserAuthName",
                "fullFile": "C:\\work\\api\\controllers\\test\\userAuth\\updateUserAuthName.enterprise.js",
                "file": "\\controllers\\test\\userAuth\\updateUserAuthName.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Enterprise UserAuth UserAuth.updateUserAuthName \"before all\" hook",
                    "timedOut": false,
                    "duration": 490,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveRecords(function() {\n    commonMock.setSignUpMocks(httpmock, \"enterprise\");\n    api.post(\"/enterprise/v1/signup\")\n        .send(registrationBody)\n        .expect(httpStatus.CREATED)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                saveUserAuthEntries({\n                    authtoken: res.body.output.authtoken\n                }, function(error, userAuthEntries) {\n                    _userAuthEntries0 = userAuthEntries;\n                    var tempRegistrationBody = global.getImmutable(registrationBody);\n                    tempRegistrationBody.email = \"test.user+101@raweng.com\";\n                    commonMock.setSignUpMocks(httpmock, \"enterprise\");\n                    api.post(\"/enterprise/v1/signup\")\n                        .send(tempRegistrationBody)\n                        .expect(httpStatus.CREATED)\n                        .end(function(err, res) {\n                            if (err) {\n                                done(err);\n                            } else {\n                                authToken = res.body.output.authtoken;\n                                _id = res.body.output._id;\n\n                                saveUserAuthEntries({\n                                    authtoken: authToken\n                                }, function(error, userAuthEntries) {\n                                    _userAuthEntries1 = userAuthEntries;\n                                    done();\n                                });\n                            }\n                        });\n                });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4d8a681d-b32d-4868-8d74-8d05ef0b5740",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise UserAuth UserAuth.updateUserAuthName \"after all\" hook",
                    "timedOut": false,
                    "duration": 1,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveRecords(function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "78f8295f-3c6c-4511-8650-8abd192b08c1",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise UserAuth UserAuth.updateUserAuthName \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5c8c1247-9ef4-49bc-958e-7aea16324800",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should update user auth.",
                    "fullTitle": "Enterprise UserAuth UserAuth.updateUserAuthName Should update user auth.",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempUserAuthyBody = global.getImmutable(_userAuthEntries1[0].body.output);\ntempUserAuthyBody.name = \"utest_cases_MODIFIED\";\nvar paramApiURL = apiURL.replace(\":auth_uid\", tempUserAuthyBody.uid);\napi.put(paramApiURL)\n    .send(tempUserAuthyBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.name.should.equal(\"utest_cases_MODIFIED\");\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a86425c8-f0e9-4693-8082-7284028f0307",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as authname is required.",
                    "fullTitle": "Enterprise UserAuth UserAuth.updateUserAuthName Should give error as authname is required.",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempUserAuthyBody = global.getImmutable(_userAuthEntries0[0].body.output);\ntempUserAuthyBody.name = \"utest_cases_MODIFIED\";\nvar paramApiURL = apiURL.replace(\":auth_uid\", tempUserAuthyBody.uid);\napi.put(paramApiURL)\n    .send(tempUserAuthyBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.USER_AUTH_NOT_FOUND);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8edf81ca-e495-4190-bdea-013124977434",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as authname is required.",
                    "fullTitle": "Enterprise UserAuth UserAuth.updateUserAuthName Should give error as authname is required.",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempUserAuthyBody = global.getImmutable(_userAuthEntries1[0].body.output);\ndelete tempUserAuthyBody.name;\nvar paramApiURL = apiURL.replace(\":auth_uid\", tempUserAuthyBody.uid);\napi.put(paramApiURL)\n    .send(tempUserAuthyBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.name.message.should.equal(messageList.USER_AUTH_NAME_REQUIRED);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1236238b-9f49-4049-89bf-84f7ea7cc015",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise UserAuth UserAuth.updateUserAuthName Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempUserAuthyBody = global.getImmutable(_userAuthEntries1[0].body.output);\ntempUserAuthyBody.name = \"utest_cases_MODIFIED\";\nvar paramApiURL = apiURL.replace(\":auth_uid\", tempUserAuthyBody.uid);\napi.put(paramApiURL)\n    .send(tempUserAuthyBody)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "506cfe59-f285-45be-bfd6-9bb5a2ec85f1",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "a86425c8-f0e9-4693-8082-7284028f0307",
                  "8edf81ca-e495-4190-bdea-013124977434",
                  "1236238b-9f49-4049-89bf-84f7ea7cc015",
                  "506cfe59-f285-45be-bfd6-9bb5a2ec85f1"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 49,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "b68eb0b6-25b2-4495-8bb1-015a825df0aa",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\userConfig\\getConfigData.enterprise.js",
        "file": "\\controllers\\test\\userConfig\\getConfigData.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "e26232ee-a4ed-4e2e-82ff-651886c929a8",
            "title": "UserConfig.GetConfigData",
            "fullFile": "C:\\work\\api\\controllers\\test\\userConfig\\getConfigData.enterprise.js",
            "file": "\\controllers\\test\\userConfig\\getConfigData.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise UserConfig.GetConfigData \"before all\" hook",
                "timedOut": false,
                "duration": 101,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data;\n        async.waterfall([\n            function(cbk) {\n                dummyUser = orgData.owner;\n                dummyUser.authtoken = dummyUser.authtoken;\n                testData.mongoUserTriggerObj.user_uid = dummyUser.uid;\n                _models.UserTrigger.create(testData.mongoUserTriggerObj, function(err, userTrigger) {\n                    cbk(err, userTrigger);\n                })\n            },\n            function(userTrigger, cbk) {\n                userTriggerObj = userTrigger\n                _id = dummyUser._id\n                flowData.trigger.handlers = [userTriggerObj]\n                api.post(flowURL)\n                    .set('authtoken', dummyUser.authtoken)\n                    .send(flowData)\n                    .expect(httpStatus.CREATED)\n                    .end(function(err, res) {\n                        cbk(err, res)\n                    })\n            }\n        ], function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                userFlow = res.body.output;\n                var query = _models.ConfigData.find({ flow_uid: userFlow.uid })\n                query.lean().exec(function(err, results) {\n                    if (err) {\n                        done(err)\n                    } else {\n                        configData = results\n                        done()\n                    }\n                })\n            }\n        })\n    });\n})",
                "err": {},
                "isRoot": false,
                "uuid": "6d2e8714-5703-4411-84ea-b368d4203314",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise UserConfig.GetConfigData \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nhttpmock.cleanAll();\nasync.parallel([\n    function(cb) {\n        _models.ConfigData.remove({ uid: { $in: _.map(configData, 'uid') } }, function(err) {\n            cb(err)\n        })\n    },\n    function(cb) {\n        _models.newFlow.remove({ uid: userFlow.uid }, function(err) {\n            cb(err)\n        })\n    }\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "7c632d00-4e2e-4236-9862-b5d19a4c8f78",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise UserConfig.GetConfigData Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ndata.active_config = 'default'\nvar triggerConfigData = _.find(configData, { activity_id: 'start' })\napi.get(apiURL + dummyUser.default_config + '/configdata')\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "cb03a5e4-ea76-4729-961c-c6bbb84a2751",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if user config uid is invalid.",
                "fullTitle": "Enterprise UserConfig.GetConfigData Should get error, if user config uid is invalid.",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + 'dummyUser.default_config/configdata')\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.USER_CONFIG_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "88c70e79-1f38-48d8-b0bc-fc00e4f9a038",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get config data.",
                "fullTitle": "Enterprise UserConfig.GetConfigData Should get config data.",
                "timedOut": false,
                "duration": 19,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + dummyUser.default_config + '/configdata')\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output.length).to.be.above(1);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "be1f36bd-afbb-4603-8f3e-8856b1ddc8f8",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "cb03a5e4-ea76-4729-961c-c6bbb84a2751",
              "88c70e79-1f38-48d8-b0bc-fc00e4f9a038",
              "be1f36bd-afbb-4603-8f3e-8856b1ddc8f8"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 34,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "f7035508-54c6-4ddf-99be-848ec5a942b8",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\userConfig\\getUsage.enterprise.js",
        "file": "\\controllers\\test\\userConfig\\getUsage.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "aa6b598c-159e-4a8d-931b-6604f7f0fb88",
            "title": "ConfigData.getUsage",
            "fullFile": "C:\\work\\api\\controllers\\test\\userConfig\\getUsage.enterprise.js",
            "file": "\\controllers\\test\\userConfig\\getUsage.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise ConfigData.getUsage \"before all\" hook",
                "timedOut": false,
                "duration": 130,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(user, cbk) {\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    },\n    function(res, cbk) {\n        dummyUser = res.body.output;\n        var opt = { path: getTriggerPath, body: getTriggerPath };\n        commonMock.triggerGetSuccess(opt);\n        opt.getPath = getTriggerPath + '/handlers';\n        opt.body = { \"pull\": [/^fl\\w*/] };\n        commonMock.triggerPullSuccess(opt);\n        opt.body = { \"push\": [/^fl\\w*/] };\n        commonMock.triggerPushSuccess(opt);\n\n        api.post('/enterprise/v1/flows')\n            .set('authtoken', dummyUser.authtoken)\n            .send(flowWithAllData)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                cbk(err, res)\n            });\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        userConfig = res.body.output\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "66dc49bb-e041-45be-a48d-89a1ffb7042c",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise ConfigData.getUsage \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nhttpmock.cleanAll();\n_models.ConfigData.remove({ user_uid: dummyUser.uid }, function(err) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "adbfe66f-0da3-4167-8e91-b20e2fa32b84",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise ConfigData.getUsage Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "72b5827d-65be-4af2-a5b8-27918c9c32d1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of auth usage, if data is valid.",
                "fullTitle": "Enterprise ConfigData.getUsage Should get list of auth usage, if data is valid.",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + '?auth=fl05b96ad7388b364a4d1f7c')\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(_.first(res.body.output)).to.have.any.keys(['activities', 'name', 'uid', 'flow_version']);;\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "a81f2894-4482-4c16-a67f-08c2f851282a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of trigger usage, if data is valid.",
                "fullTitle": "Enterprise ConfigData.getUsage Should get list of trigger usage, if data is valid.",
                "timedOut": false,
                "duration": 65,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { path: getTriggerPath, body: getTriggerPath };\ncommonMock.triggerGetSuccess(opt);\nopt.getPath = getTriggerPath + '/handlers';\nopt.body = { \"pull\": [/^fl\\w*/] };\ncommonMock.triggerPullSuccess(opt);\nopt.body = { \"push\": [/^fl\\w*/] };\ncommonMock.triggerPushSuccess(opt);\n\napi.put('/enterprise/v1/flows/' + userConfig.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .send(flowWithAllData)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        //cbk(err, res)\n        api.get(apiURL + '?trigger=tgb00434df13b4b8564796af')\n            .set('authtoken', dummyUser.authtoken)\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    expect(_.first(res.body.output)).to.have.any.keys(['name', 'uid', 'flow_version']);;\n                    done();\n                }\n            });\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "6208a2ff-fac1-4175-a93e-49431989c1a1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of connection usage, if data is valid.",
                "fullTitle": "Enterprise ConfigData.getUsage Should get list of connection usage, if data is valid.",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + '?connection=fl3ade9788e74f0554ec1852')\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(_.first(res.body.output)).to.have.any.keys(['activities', 'name', 'uid', 'flow_version']);;\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "d9975827-5815-4bb0-9278-856db0fd1e09",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of agent usage, if data is valid.",
                "fullTitle": "Enterprise ConfigData.getUsage Should get list of agent usage, if data is valid.",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + '?agent=ega6fdbacca405caf12f0c15f')\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(_.first(res.body.output)).to.have.any.keys(['activities', 'name', 'uid', 'flow_version']);;\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "248270c3-c5ef-44df-a5ab-525f1b609fea",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of agent usage, if data is valid.",
                "fullTitle": "Enterprise ConfigData.getUsage Should get list of agent usage, if data is valid.",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + '?param=random')\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(_.first(res.body.output)).to.have.any.keys(['activities', 'name', 'uid', 'flow_version']);;\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "79723200-dfd0-4647-82b0-a10e7135d3d6",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "72b5827d-65be-4af2-a5b8-27918c9c32d1",
              "a81f2894-4482-4c16-a67f-08c2f851282a",
              "6208a2ff-fac1-4175-a93e-49431989c1a1",
              "d9975827-5815-4bb0-9278-856db0fd1e09",
              "248270c3-c5ef-44df-a5ab-525f1b609fea",
              "79723200-dfd0-4647-82b0-a10e7135d3d6"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 133,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "0cbd8697-c08a-4e3b-87d2-34ed1ccbe5c0",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\userConfig\\listConfigData.enterprise.js",
        "file": "\\controllers\\test\\userConfig\\listConfigData.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "96c41fc6-7aff-4483-8653-a8b099a2c011",
            "title": "ConfigData.List",
            "fullFile": "C:\\work\\api\\controllers\\test\\userConfig\\listConfigData.enterprise.js",
            "file": "\\controllers\\test\\userConfig\\listConfigData.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise ConfigData.List \"before all\" hook",
                "timedOut": false,
                "duration": 123,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(user, cbk) {\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    },\n    function(res, cbk) {\n        dummyUser = res.body.output;\n        api.post('/enterprise/v1/flows')\n            .set('authtoken', dummyUser.authtoken)\n            .send(testData.flowBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                cbk(err, res)\n            });\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        userConfig = res.body.output\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "07ba6716-d24c-4aa2-a9c1-05bcf57f396b",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise ConfigData.List \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nhttpmock.cleanAll();\n_models.ConfigData.remove({ user_uid: dummyUser.uid }, function(err) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "c3d0677d-0f9b-413f-80f3-5f8eabac4759",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise ConfigData.List Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "373c70fe-b057-4c43-b40e-d5fb709d1eef",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of user configs, if data is valid.",
                "fullTitle": "Enterprise ConfigData.List Should get list of user configs, if data is valid.",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output).to.be.array;\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "56ec03c6-2c97-4c94-a35e-03023fe4e42a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "373c70fe-b057-4c43-b40e-d5fb709d1eef",
              "56ec03c6-2c97-4c94-a35e-03023fe4e42a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 20,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "1ecdbaf9-0c65-45b7-a93c-13d239237b40",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\userConfig\\listConfigSchema.enterprise.js",
        "file": "\\controllers\\test\\userConfig\\listConfigSchema.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "973c8497-3201-4e22-89fd-0cf337d001a3",
            "title": "ConfigSchema.List",
            "fullFile": "C:\\work\\api\\controllers\\test\\userConfig\\listConfigSchema.enterprise.js",
            "file": "\\controllers\\test\\userConfig\\listConfigSchema.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise ConfigSchema.List \"before all\" hook",
                "timedOut": false,
                "duration": 125,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(user, cbk) {\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    },\n    function(res, cbk) {\n        dummyUser = res.body.output;\n        api.post('/enterprise/v1/flows')\n            .set('authtoken', dummyUser.authtoken)\n            .send(testData.flowBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                cbk(err, res)\n            });\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        userConfig = res.body.output\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "8045ba4f-5332-40af-9334-97492eaf9039",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise ConfigSchema.List \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nhttpmock.cleanAll();\n_models.ConfigSchema.remove({ uid: dummyUser.uid }, function(err) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "42ee18a9-e585-4bb2-ab57-d63b746b260c",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise ConfigSchema.List Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "c7bd2557-e4fd-4248-9fda-74248dd6ed1d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get list of user configs, if data is valid.",
                "fullTitle": "Enterprise ConfigSchema.List Should get list of user configs, if data is valid.",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output).to.be.array;\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "d8c45243-3ed8-47f3-b420-f3c086053f42",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c7bd2557-e4fd-4248-9fda-74248dd6ed1d",
              "d8c45243-3ed8-47f3-b420-f3c086053f42"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 21,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "dc583163-612b-47ad-b803-daf1dd8fddf2",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\userConfig\\updateConfigData.enterprise.js",
        "file": "\\controllers\\test\\userConfig\\updateConfigData.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "b9dce3dd-b750-485d-8031-55b1249bd783",
            "title": "UserConfig.UpdateConfigData",
            "fullFile": "C:\\work\\api\\controllers\\test\\userConfig\\updateConfigData.enterprise.js",
            "file": "\\controllers\\test\\userConfig\\updateConfigData.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise UserConfig.UpdateConfigData \"before all\" hook",
                "timedOut": false,
                "duration": 94,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data;\n        async.waterfall([\n            function(cbk) {\n                dummyUser = orgData.owner;\n                dummyUser.authtoken = dummyUser.authtoken;\n                testData.mongoUserTriggerObj.user_uid = dummyUser.uid;\n                _models.UserTrigger.create(testData.mongoUserTriggerObj, function(err, userTrigger) {\n                    cbk(err, userTrigger);\n                })\n            },\n            function(userTrigger, cbk) {\n                userTriggerObj = userTrigger\n                _id = dummyUser._id\n                flowData.trigger.handlers = [userTriggerObj]\n                api.post(flowURL)\n                    .set('authtoken', dummyUser.authtoken)\n                    .send(flowData)\n                    .expect(httpStatus.CREATED)\n                    .end(function(err, res) {\n                        cbk(err, res)\n                    })\n            }\n        ], function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                userFlow = res.body.output;\n                var query = _models.ConfigData.find({ flow_uid: userFlow.uid })\n                query.lean().exec(function(err, results) {\n                    if (err) {\n                        done(err)\n                    } else {\n                        configData = results\n                        done()\n                    }\n                })\n            }\n        })\n    });\n})",
                "err": {},
                "isRoot": false,
                "uuid": "0d675537-d2ab-40b1-9394-3d07a649fb2e",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise UserConfig.UpdateConfigData \"after all\" hook",
                "timedOut": false,
                "duration": 2,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nhttpmock.cleanAll();\nasync.parallel([\n    function(cb) {\n        _models.ConfigData.remove({ uid: { $in: _.map(configData, 'uid') } }, function(err) {\n            cb(err)\n        })\n    },\n    function(cb) {\n        _models.newFlow.remove({ uid: userFlow.uid }, function(err) {\n            cb(err)\n        })\n    }\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "1521a19e-d2ba-4912-92ff-6b0cea52a218",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise UserConfig.UpdateConfigData Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ndata.active_config = 'default'\nvar triggerConfigData = _.find(configData, { activity_id: 'start' })\napi.put(apiURL + triggerConfigData.uid)\n    .send(data)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "dd7a2147-037a-4f07-9bba-292afdeba1bb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if user config uid is invalid.",
                "fullTitle": "Enterprise UserConfig.UpdateConfigData Should get error, if user config uid is invalid.",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ndata.config_uid = 'dummyConfig'\napi.put(apiURL + configData.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .send(data)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.USER_CONFIG_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "697958b1-d43b-484a-873f-9c976fdff42c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if same record already present.",
                "fullTitle": "Enterprise UserConfig.UpdateConfigData Should get error, if same record already present.",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar authConfigData = _.find(configData, { activity_id: 'a0' })\nvar connConfigData = _.find(configData, { activity_id: 'a1' })\napi.put(apiURL + authConfigData.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .send(connConfigData)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.RECORD_ALREADY_PRESENT);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "daf9457a-f6e5-441d-a736-7eda164a3101",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should update config data and update flow for auth remove.",
                "fullTitle": "Enterprise UserConfig.UpdateConfigData Should update config data and update flow for auth remove.",
                "timedOut": false,
                "duration": 26,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { path: getTriggerPath, body: getTriggerPath };\ncommonMock.triggerGetSuccess(opt);\nvar authConfigData = _.find(configData, { activity_id: 'a0' })\ndelete authConfigData.auth\n    //authConfigData.auth = 'dummyAuth'\napi.put(apiURL + authConfigData.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .send(authConfigData)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var flowConfigData = res.body.output\n            expect(flowConfigData.auth).to.be.equal(undefined);\n            var query = _models.newFlow.findOne({ uid: flowConfigData.flow_uid })\n            query.lean().exec(function(err, flow) {\n                if (err) {\n                    done(err)\n                } else {\n                    expect(flow.is_draft).to.be.equal(true);\n                    expect(flow.trigger.handlers.length).to.be.equal(1);\n                    var error = _.filter(flow.errors_obj, { id: 'a0-token' })\n                    expect(error.length).to.be.gte(1);\n                    done();\n                }\n            })\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "951f6541-ef6c-44ae-98a7-d699e06175ba",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should update config data and update flow for connection remove.",
                "fullTitle": "Enterprise UserConfig.UpdateConfigData Should update config data and update flow for connection remove.",
                "timedOut": false,
                "duration": 22,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { path: getTriggerPath, body: getTriggerPath };\ncommonMock.triggerGetSuccess(opt);\nvar connConfigData = _.find(configData, { activity_id: 'a1' })\ndelete connConfigData.connection\napi.put(apiURL + connConfigData.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .send(connConfigData)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var flowConfigData = res.body.output\n            expect(flowConfigData.connection).to.be.equal(undefined);\n            var query = _models.newFlow.findOne({ uid: flowConfigData.flow_uid })\n            query.lean().exec(function(err, flow) {\n                if (err) {\n                    done(err)\n                } else {\n                    expect(flow.is_draft).to.be.equal(true);\n                    var error = _.filter(flow.errors_obj, { id: 'a1-connection' })\n                    expect(error.length).to.be.gte(1);\n                    done();\n                }\n            })\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "2887522d-d617-4fff-97df-9495ef538380",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should update config data and update flow for agent remove.",
                "fullTitle": "Enterprise UserConfig.UpdateConfigData Should update config data and update flow for agent remove.",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar opt = { path: getTriggerPath, body: getTriggerPath };\ncommonMock.triggerGetSuccess(opt);\nvar agentConfigData = _.find(configData, { activity_id: 'a2' })\ndelete agentConfigData.agent\napi.put(apiURL + agentConfigData.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .send(agentConfigData)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var flowConfigData = res.body.output\n            expect(flowConfigData.agent).to.be.equal(undefined);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "e22028cd-83db-487e-b7d1-5502205897bf",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if config data uid is invalid.",
                "fullTitle": "Enterprise UserConfig.UpdateConfigData Should get error, if config data uid is invalid.",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar connConfigData = _.find(configData, { activity_id: 'a1' })\nconnConfigData.flow_uid = 'abc'\napi.put(apiURL + 'dummyConfigData')\n    .set('authtoken', dummyUser.authtoken)\n    .send(connConfigData)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.RECORD_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "76f0268c-e8d4-40af-ac01-ac6f2d20d905",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "dd7a2147-037a-4f07-9bba-292afdeba1bb",
              "697958b1-d43b-484a-873f-9c976fdff42c",
              "daf9457a-f6e5-441d-a736-7eda164a3101",
              "951f6541-ef6c-44ae-98a7-d699e06175ba",
              "2887522d-d617-4fff-97df-9495ef538380",
              "e22028cd-83db-487e-b7d1-5502205897bf",
              "76f0268c-e8d4-40af-ac01-ac6f2d20d905"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 111,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "46a426dc-1484-4064-a90a-b30687fe2064",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\userLogs\\downloadLogsBasedOnBillUid.enterprise.js",
        "file": "\\controllers\\test\\userLogs\\downloadLogsBasedOnBillUid.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "505f7aa0-05ee-4901-862d-35bfc504b6d1",
            "title": "UserLogs",
            "fullFile": "C:\\work\\api\\controllers\\test\\userLogs\\downloadLogsBasedOnBillUid.enterprise.js",
            "file": "\\controllers\\test\\userLogs\\downloadLogsBasedOnBillUid.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "f041022a-ed32-4250-b7ee-cbce9300ab35",
                "title": "UserLogs.downloadLogsBasedOnBillUid",
                "fullFile": "C:\\work\\api\\controllers\\test\\userLogs\\downloadLogsBasedOnBillUid.enterprise.js",
                "file": "\\controllers\\test\\userLogs\\downloadLogsBasedOnBillUid.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Enterprise UserLogs UserLogs.downloadLogsBasedOnBillUid \"before all\" hook",
                    "timedOut": false,
                    "duration": 1108,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveEntries(function() {\n    commonMock.setSignUpMocks(httpmock, \"enterprise\");\n    api.post(\"/enterprise/v1/signup\")\n        .send(registrationBody)\n        .expect(httpStatus.CREATED)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                fillEntries(res.body.output.uid, res.body.output.authtoken, function(error, result) {\n                    if (error) {\n                        done(error);\n                    } else {\n                        var tempImmutableSignupObject = getImmutable(registrationBody);\n                        tempImmutableSignupObject.email = \"test.user+101@raweng.com\";\n                        commonMock.setSignUpMocks(httpmock, \"enterprise\", {\n                            email: tempImmutableSignupObject.email\n                        });\n                        api.post(\"/enterprise/v1/signup\")\n                            .send(tempImmutableSignupObject)\n                            .expect(httpStatus.CREATED)\n                            .end(function(error, res) {\n                                if (error) {\n                                    done(error);\n                                } else {\n                                    authToken = res.body.output.authtoken;\n                                    user_uid = res.body.output.uid;\n                                    fillEntries(res.body.output.uid, res.body.output.authtoken, function(error, result) {\n                                        if (error) {\n                                            done(error);\n                                        } else {\n                                            done();\n                                        }\n                                    });\n                                }\n                            });\n                    }\n                });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cd01bb32-62e7-4a42-b9d5-5d3ef9ba4402",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise UserLogs UserLogs.downloadLogsBasedOnBillUid \"after all\" hook",
                    "timedOut": false,
                    "duration": 2,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveEntries(function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e1804614-27fd-4fdb-af3a-0b78d01d566c",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get list of bill logs.",
                    "fullTitle": "Enterprise UserLogs UserLogs.downloadLogsBasedOnBillUid Should get list of bill logs.",
                    "timedOut": false,
                    "duration": 22,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar paramURL = apiURL.replace(\":bill_uid\", secondBillUid) + \"?authtoken=\" + authToken;\napi.get(paramURL)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "01d0d2f9-0bed-48ce-a520-413f7295e6a9",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise UserLogs UserLogs.downloadLogsBasedOnBillUid Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar paramURL = apiURL.replace(\":bill_uid\", secondBillUid);\napi.get(paramURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "288f7083-1c44-4c55-b1f1-dd71208f75f7",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "01d0d2f9-0bed-48ce-a520-413f7295e6a9",
                  "288f7083-1c44-4c55-b1f1-dd71208f75f7"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 25,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "722267ad-a895-4b3e-9339-db619574f1dc",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\userLogs\\downloadLogsBasedOnBillUidOrg.enterprise.js",
        "file": "\\controllers\\test\\userLogs\\downloadLogsBasedOnBillUidOrg.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "236a2b8f-2382-4ab7-92fe-02ffe874f28b",
            "title": "UserLogs",
            "fullFile": "C:\\work\\api\\controllers\\test\\userLogs\\downloadLogsBasedOnBillUidOrg.enterprise.js",
            "file": "\\controllers\\test\\userLogs\\downloadLogsBasedOnBillUidOrg.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "56d645c5-9213-42a7-b923-40d3bb77d35f",
                "title": "UserLogs.downloadLogsBasedOnBillUidOrg",
                "fullFile": "C:\\work\\api\\controllers\\test\\userLogs\\downloadLogsBasedOnBillUidOrg.enterprise.js",
                "file": "\\controllers\\test\\userLogs\\downloadLogsBasedOnBillUidOrg.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise UserLogs UserLogs.downloadLogsBasedOnBillUidOrg \"before each\" hook",
                    "timedOut": false,
                    "duration": 537,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_acc_authToken = _.first(data.organization_account.authtoken);\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        api.get(\"/enterprise/v1/projects\")\n            .set('org_uid', org_uid)\n            .set('authtoken', authToken)\n            .expect(httpStatus.OK)\n            .end(function(error, res) {\n                project_uid = _.first(res.body.output.projects).uid\n                api.get(\"/enterprise/v1/user\")\n                    .set('org_uid', org_uid)\n                    .set('authtoken', authToken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        env_uid = res.body.output.env_uid;\n                        fillEntries(user_uid, authToken, function(error, result) {\n                            if (error) {\n                                done(error);\n                            } else {\n                                done();\n                            }\n                        });\n                    });\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "179c678b-851b-4ddc-b0d1-3933861dc8a4",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise UserLogs UserLogs.downloadLogsBasedOnBillUidOrg \"after each\" hook",
                    "timedOut": false,
                    "duration": 2,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ntestCollection.organizationRemoveRecords({}, function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a97e9e04-0ce5-4efe-a658-4765c9194548",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get list of bill logs.",
                    "fullTitle": "Enterprise UserLogs UserLogs.downloadLogsBasedOnBillUidOrg Should get list of bill logs.",
                    "timedOut": false,
                    "duration": 19,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar paramURL = apiURL.replace(\":bill_uid\", secondBillUid) + \"?authtoken=\" + authToken;\napi.get(paramURL)\n    .set(\"org_uid\", org_uid)\n    .set(\"project_uid\", project_uid)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9543b823-dbdc-4a80-be10-f7d8faed5158",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise UserLogs UserLogs.downloadLogsBasedOnBillUidOrg Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar paramURL = apiURL.replace(\":bill_uid\", secondBillUid);\napi.get(paramURL)\n    .set(\"org_uid\", org_uid)\n    .set(\"project_uid\", project_uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5a4f337f-5a58-41d5-969e-b59694c7fc3a",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "9543b823-dbdc-4a80-be10-f7d8faed5158",
                  "5a4f337f-5a58-41d5-969e-b59694c7fc3a"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 23,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "df54fea3-2c1a-4935-8487-4c8d8a8456c3",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\userLogs\\getDebugMessage.enterprise.js",
        "file": "\\controllers\\test\\userLogs\\getDebugMessage.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "7456b341-3461-4db6-96c9-0164bae89809",
            "title": "logs",
            "fullFile": "C:\\work\\api\\controllers\\test\\userLogs\\getDebugMessage.enterprise.js",
            "file": "\\controllers\\test\\userLogs\\getDebugMessage.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "62062812-ec47-474b-8e26-164e6c7f9f22",
                "title": "UserLogs.getDebugMessage",
                "fullFile": "C:\\work\\api\\controllers\\test\\userLogs\\getDebugMessage.enterprise.js",
                "file": "\\controllers\\test\\userLogs\\getDebugMessage.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise logs UserLogs.getDebugMessage \"before each\" hook",
                    "timedOut": false,
                    "duration": 179,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nclearRecords(function() {\n    _models.User.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n        _models.Mail.remove({ $or: [{ to: new RegExp('^test.user+', \"i\") }, { to: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n            _models.Log.remove({ flow_name: new RegExp('^utest_cases_', \"i\") }, function(error, user) {\n                commonMock.setSignUpMocks(httpmock, \"enterprise\");\n                api.post(\"/enterprise/v1/signup\")\n                    .send(registrationBody)\n                    .expect(httpStatus.CREATED)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            authToken = res.body.output.authtoken;\n                            api.get(\"/enterprise/v1/user\")\n                                .set('authtoken', authToken)\n                                .expect(httpStatus.OK)\n                                .end(function(err, res) {\n                                    user_uid = res.body.output.uid;\n                                    env_uid = res.body.output.env_uid;\n                                    saveUserLogs({\n                                            authtoken: authToken,\n                                            user_uid: user_uid\n                                        },\n                                        function(error, userLogs) {\n                                            _userLogs = userLogs;\n                                            done();\n                                        });\n                                });\n                        }\n                    });\n            });\n        });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8fed884a-0d0a-4677-9c43-e68e5fbb12b4",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise logs UserLogs.getDebugMessage \"after all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.Log.remove({ flow_name: new RegExp('^utest_cases_', \"i\") }, function(error, user) {\n    if (error) {\n        done(error);\n    } else {\n        done();\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1c59d4b0-e1d3-46ae-97e1-17a617de116a",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get list of user logs.",
                    "fullTitle": "Enterprise logs UserLogs.getDebugMessage Should get list of user logs.",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar log_uid = _userLogs[0].body.output.uid;\nvar paramURL = apiURL.replace(\":log_uid\", log_uid);\napi.get(paramURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.uid.should.equal(log_uid);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a1b7c4a5-4854-456d-8621-a313a82f66c4",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise logs UserLogs.getDebugMessage Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c52326cf-7b07-4a7a-82de-cad40d708696",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "a1b7c4a5-4854-456d-8621-a313a82f66c4",
                  "c52326cf-7b07-4a7a-82de-cad40d708696"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 18,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "044cc937-b022-4f13-bd8e-e5062e9eaf71",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\userLogs\\getDebugMessageOrg.enterprise.js",
        "file": "\\controllers\\test\\userLogs\\getDebugMessageOrg.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "e38e638a-7e96-4c49-9928-30834983c87c",
            "title": "logs",
            "fullFile": "C:\\work\\api\\controllers\\test\\userLogs\\getDebugMessageOrg.enterprise.js",
            "file": "\\controllers\\test\\userLogs\\getDebugMessageOrg.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "e0c8845e-087f-413b-a9cb-6e2324459f2a",
                "title": "UserLogs.getDebugMessageOrg",
                "fullFile": "C:\\work\\api\\controllers\\test\\userLogs\\getDebugMessageOrg.enterprise.js",
                "file": "\\controllers\\test\\userLogs\\getDebugMessageOrg.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise logs UserLogs.getDebugMessageOrg \"before each\" hook",
                    "timedOut": false,
                    "duration": 165,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_acc_authToken = _.first(data.organization_account.authtoken);\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        api.get(\"/enterprise/v1/projects\")\n            .set('org_uid', org_uid)\n            .set('authtoken', authToken)\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                project_uid = _.first(res.body.output.projects).uid\n                api.get(\"/enterprise/v1/user\")\n                    .set('org_uid', org_uid)\n                    .set('authtoken', authToken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        env_uid = res.body.output.env_uid;\n                        saveUserLogs({\n                                authtoken: authToken,\n                                user_uid: user_uid\n                            },\n                            function(error, userLogs) {\n                                _userLogs = userLogs;\n                                done();\n                            });\n                    });\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ec4bac3e-5f3a-4a77-a1eb-2395f59778ad",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise logs UserLogs.getDebugMessageOrg \"after each\" hook",
                    "timedOut": false,
                    "duration": 1,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ntestCollection.organizationRemoveRecords({}, function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "865a67df-d1a0-4577-9222-4134bff2b741",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get list of user logs.",
                    "fullTitle": "Enterprise logs UserLogs.getDebugMessageOrg Should get list of user logs.",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar log_uid = _userLogs[0].body.output.uid;\nvar paramURL = apiURL.replace(\":log_uid\", log_uid);\napi.get(paramURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.uid.should.equal(log_uid);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a20b659f-9035-45e2-83d2-848cf3ca9e04",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise logs UserLogs.getDebugMessageOrg Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b600700b-59f4-42d9-82bb-dbdd8c556d91",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "a20b659f-9035-45e2-83d2-848cf3ca9e04",
                  "b600700b-59f4-42d9-82bb-dbdd8c556d91"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 18,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "fde9cc59-77d5-4172-bab3-0cfa8cd495a3",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\userLogs\\getLogs.enterprise.js",
        "file": "\\controllers\\test\\userLogs\\getLogs.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "5fb92c5c-0a3f-45b3-b7d1-fd8515a450a0",
            "title": "logs",
            "fullFile": "C:\\work\\api\\controllers\\test\\userLogs\\getLogs.enterprise.js",
            "file": "\\controllers\\test\\userLogs\\getLogs.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "a8711599-df82-4490-b01a-32df42e99e21",
                "title": "UserLogs.getLogs",
                "fullFile": "C:\\work\\api\\controllers\\test\\userLogs\\getLogs.enterprise.js",
                "file": "\\controllers\\test\\userLogs\\getLogs.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise logs UserLogs.getLogs \"before each\" hook",
                    "timedOut": false,
                    "duration": 115,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        api.get(\"/enterprise/v1/user\")\n            .set('authtoken', authToken)\n            .expect(httpStatus.OK)\n            .end(function(error, res) {\n                saveUserLogs({\n                        authtoken: authToken,\n                        user_uid: user_uid\n                    },\n                    function(error, userLogs) {\n                        savedUserLogs = userLogs;\n                        done();\n                    });\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "37a8220e-78eb-49b1-af96-5e307518368c",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise logs UserLogs.getLogs \"after each\" hook",
                    "timedOut": false,
                    "duration": 2,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ntestCollection.organizationRemoveRecords({}, function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c83da62d-dfbc-400d-92b5-cf88fbd3785f",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get list of user logs.",
                    "fullTitle": "Enterprise logs UserLogs.getLogs Should get list of user logs.",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = Array.isArray(res.body.output.objects);\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\";\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "77b29b6b-fbb9-400e-b613-d8ac9318e4bb",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get limited list of user logs based on skip/limit.",
                    "fullTitle": "Enterprise logs UserLogs.getLogs Should get limited list of user logs based on skip/limit.",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar skipLimitURL = apiURL + \"?limit=2&skip=2\";\napi.get(skipLimitURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (res.body.output.count == 5) {\n                isValid = Array.isArray(res.body.output.objects) &&\n                    res.body.output.objects.length == 2;\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6906d4b8-dcee-4346-a184-d115373bf418",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise logs UserLogs.getLogs Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f6e3e64e-8181-43ef-a8a2-8f75ae2bc90c",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "77b29b6b-fbb9-400e-b613-d8ac9318e4bb",
                  "6906d4b8-dcee-4346-a184-d115373bf418",
                  "f6e3e64e-8181-43ef-a8a2-8f75ae2bc90c"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 22,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "5a5f68d0-2833-40db-a051-6f3ec85598c9",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\userLogs\\getLogsBasedOnBillUid.enterprise.js",
        "file": "\\controllers\\test\\userLogs\\getLogsBasedOnBillUid.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "4b0f5193-7587-4e3b-863a-6a8472f6d8d4",
            "title": "UserLogs",
            "fullFile": "C:\\work\\api\\controllers\\test\\userLogs\\getLogsBasedOnBillUid.enterprise.js",
            "file": "\\controllers\\test\\userLogs\\getLogsBasedOnBillUid.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "01d89872-1bbb-452d-b91c-373c30ced7c5",
                "title": "UserLogs.getLogsBasedOnBillUid",
                "fullFile": "C:\\work\\api\\controllers\\test\\userLogs\\getLogsBasedOnBillUid.enterprise.js",
                "file": "\\controllers\\test\\userLogs\\getLogsBasedOnBillUid.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise UserLogs UserLogs.getLogsBasedOnBillUid \"before each\" hook",
                    "timedOut": false,
                    "duration": 527,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveEntries(function() {\n    commonMock.setSignUpMocks(httpmock, \"enterprise\");\n    api.post(\"/enterprise/v1/signup\")\n        .send(registrationBody)\n        .expect(httpStatus.CREATED)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                authToken = res.body.output.authtoken;\n\n                api.get(\"/enterprise/v1/user\")\n                    .set('authtoken', authToken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        user_uid = res.body.output.uid;\n                        env_uid = res.body.output.env_uid;\n                        fillEntries(res.body.output.uid, res.body.output.authtoken, function(error, result) {\n                            if (error) {\n                                done(error);\n                            } else {\n                                done();\n                            }\n                        });\n                    });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "49b9a678-9aa5-4f3d-9b75-d58a4a976c02",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise UserLogs UserLogs.getLogsBasedOnBillUid \"after all\" hook",
                    "timedOut": false,
                    "duration": 1,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveEntries(function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "60768996-5d7c-499f-ba57-134bdff179b4",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get list of bill logs.",
                    "fullTitle": "Enterprise UserLogs UserLogs.getLogsBasedOnBillUid Should get list of bill logs.",
                    "timedOut": false,
                    "duration": 20,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar paramURL = apiURL.replace(\":bill_uid\", secondBillUid);\napi.get(paramURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (Array.isArray(res.body.output.objects)) {\n                isValid = res.body.output.objects.length == 10;\n                if (isValid) {\n                    _.each(res.body.output.objects, function(item) {\n                        isValid = isValid &&\n                            item.user_uid == user_uid &&\n                            typeof(item._id) == \"undefined\" &&\n                            typeof(item.__v) == \"undefined\";\n                    });\n                }\n            }\n            isValid.should.be.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "10e0b6a1-27b7-45cc-ad1c-648d851b5235",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get limited list of bill logs based on skip/limit.",
                    "fullTitle": "Enterprise UserLogs UserLogs.getLogsBasedOnBillUid Should get limited list of bill logs based on skip/limit.",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar paramURL = apiURL.replace(\":bill_uid\", secondBillUid) + \"?skip=2&limit=2\";\napi.get(paramURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = Array.isArray(res.body.output.objects);\n            isValid.should.be.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0122226d-2541-47c6-b0bb-da206233440a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get limited list of bill logs based on skip/limit in descending order of message.",
                    "fullTitle": "Enterprise UserLogs UserLogs.getLogsBasedOnBillUid Should get limited list of bill logs based on skip/limit in descending order of message.",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar paramURL = apiURL.replace(\":bill_uid\", secondBillUid) + \"?skip=2&limit=2&field=message&direction=asc\";\napi.get(paramURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = Array.isArray(res.body.output.objects);\n            isValid.should.be.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d5b052cb-8d76-4820-a145-d98f517a6b3c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of bill old logs.",
                    "fullTitle": "Enterprise UserLogs UserLogs.getLogsBasedOnBillUid Should get list of bill old logs.",
                    "timedOut": false,
                    "duration": 19,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar paramURL = apiURL.replace(\":bill_uid\", secondBillUid);\napi.get(paramURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (Array.isArray(res.body.output.objects)) {\n                //isValid = res.body.output.objects.length == 10;\n                isValid = true; //res.body.output.objects.length == 10;\n            }\n            isValid.should.be.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bff90155-b619-484f-ac9b-b5f65ecad084",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get limited list of bill old logs based on skip/limit.",
                    "fullTitle": "Enterprise UserLogs UserLogs.getLogsBasedOnBillUid Should get limited list of bill old logs based on skip/limit.",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar paramURL = apiURL.replace(\":bill_uid\", firstBillUid) + \"?skip=2&limit=2\";\napi.get(paramURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (Array.isArray(res.body.output.objects)) {\n                /*\n                isValid = res.body.output.objects[0].uid == _oldLogEntries[7].body.output.uid &&\n                    res.body.output.objects[1].uid == _oldLogEntries[6].body.output.uid;\n                */\n                isValid = true; //res.body.output.objects.length == 2;\n            }\n            isValid.should.be.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1f0555ac-b028-487a-bd0d-36a73401cf2e",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get limited list of bill old logs based on skip/limit in descending order of message.",
                    "fullTitle": "Enterprise UserLogs UserLogs.getLogsBasedOnBillUid Should get limited list of bill old logs based on skip/limit in descending order of message.",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar paramURL = apiURL.replace(\":bill_uid\", firstBillUid) + \"?skip=2&limit=2&field=message&direction=asc\";\napi.get(paramURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (Array.isArray(res.body.output.objects)) {\n                isValid = true; //res.body.output.objects.length == 2;\n            }\n            isValid.should.be.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "feacc196-2066-4849-87d4-a29724b52671",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise UserLogs UserLogs.getLogsBasedOnBillUid Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar paramURL = apiURL.replace(\":bill_uid\", secondBillUid);\napi.get(paramURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "62510113-10b6-4705-9266-ed2d7f2cf564",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "10e0b6a1-27b7-45cc-ad1c-648d851b5235",
                  "0122226d-2541-47c6-b0bb-da206233440a",
                  "d5b052cb-8d76-4820-a145-d98f517a6b3c",
                  "bff90155-b619-484f-ac9b-b5f65ecad084",
                  "1f0555ac-b028-487a-bd0d-36a73401cf2e",
                  "feacc196-2066-4849-87d4-a29724b52671",
                  "62510113-10b6-4705-9266-ed2d7f2cf564"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 103,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "50cee407-1282-4bd0-b729-0df21928d01a",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\userLogs\\getLogsBasedOnBillUidOrg.enterprise.js",
        "file": "\\controllers\\test\\userLogs\\getLogsBasedOnBillUidOrg.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "7e58cfda-00d5-44fb-a48d-449d4eeae8af",
            "title": "UserLogs",
            "fullFile": "C:\\work\\api\\controllers\\test\\userLogs\\getLogsBasedOnBillUidOrg.enterprise.js",
            "file": "\\controllers\\test\\userLogs\\getLogsBasedOnBillUidOrg.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "3ea819d6-0a43-40bc-9022-d064009d90a7",
                "title": "UserLogs.getLogsBasedOnBillUidOrg",
                "fullFile": "C:\\work\\api\\controllers\\test\\userLogs\\getLogsBasedOnBillUidOrg.enterprise.js",
                "file": "\\controllers\\test\\userLogs\\getLogsBasedOnBillUidOrg.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise UserLogs UserLogs.getLogsBasedOnBillUidOrg \"before each\" hook",
                    "timedOut": false,
                    "duration": 531,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_acc_authToken = _.first(data.organization_account.authtoken);\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        api.get(\"/enterprise/v1/projects\")\n            .set('org_uid', org_uid)\n            .set('authtoken', authToken)\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                project_uid = _.first(res.body.output.projects).uid\n                api.get(\"/enterprise/v1/user\")\n                    .set('org_uid', org_uid)\n                    .set('authtoken', authToken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        env_uid = res.body.output.env_uid;\n                        fillEntries(user_uid, authToken, function(error, result) {\n                            if (error) {\n                                done(error);\n                            } else {\n                                done();\n                            }\n                        });\n                    });\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "632b66c8-dff8-4e23-87e5-6b9bf440ef18",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise UserLogs UserLogs.getLogsBasedOnBillUidOrg \"after each\" hook",
                    "timedOut": false,
                    "duration": 2,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7f28ad02-84c1-4a80-b0ce-709233b4159d",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get list of bill logs.",
                    "fullTitle": "Enterprise UserLogs UserLogs.getLogsBasedOnBillUidOrg Should get list of bill logs.",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar paramURL = apiURL.replace(\":bill_uid\", secondBillUid);\napi.get(paramURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (Array.isArray(res.body.output.objects)) {\n                isValid = res.body.output.objects.length == 10;\n                if (isValid) {\n                    _.each(res.body.output.objects, function(item) {\n                        isValid = isValid &&\n                            item.user_uid == org_account_uid &&\n                            typeof(item._id) == \"undefined\" &&\n                            typeof(item.__v) == \"undefined\";\n                    });\n                }\n            }\n            isValid.should.be.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b42ba353-2d3c-43d1-96b7-11064fcdde07",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get limited list of bill logs based on skip/limit.",
                    "fullTitle": "Enterprise UserLogs UserLogs.getLogsBasedOnBillUidOrg Should get limited list of bill logs based on skip/limit.",
                    "timedOut": false,
                    "duration": 17,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar paramURL = apiURL.replace(\":bill_uid\", secondBillUid) + \"?skip=2&limit=2\";\napi.get(paramURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = Array.isArray(res.body.output.objects);\n            isValid.should.be.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2cad9276-4936-4192-a74e-863eb133a28c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get limited list of bill logs based on skip/limit in descending order of message.",
                    "fullTitle": "Enterprise UserLogs UserLogs.getLogsBasedOnBillUidOrg Should get limited list of bill logs based on skip/limit in descending order of message.",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar paramURL = apiURL.replace(\":bill_uid\", secondBillUid) + \"?skip=2&limit=2&field=message&direction=asc\";\napi.get(paramURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = Array.isArray(res.body.output.objects);\n            isValid.should.be.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "38670b03-a523-44da-ad61-2c9c0912de71",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of bill old logs.",
                    "fullTitle": "Enterprise UserLogs UserLogs.getLogsBasedOnBillUidOrg Should get list of bill old logs.",
                    "timedOut": false,
                    "duration": 17,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar paramURL = apiURL.replace(\":bill_uid\", firstBillUid);\napi.get(paramURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (Array.isArray(res.body.output.objects)) {\n                //isValid = res.body.output.objects.length == 10;\n                isValid = res.body.output.objects.length == 10;\n            }\n            isValid.should.be.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1633d495-2941-4daa-931e-9078811cdf7f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get limited list of bill old logs based on skip/limit.",
                    "fullTitle": "Enterprise UserLogs UserLogs.getLogsBasedOnBillUidOrg Should get limited list of bill old logs based on skip/limit.",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar paramURL = apiURL.replace(\":bill_uid\", firstBillUid) + \"?skip=2&limit=2\";\napi.get(paramURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (Array.isArray(res.body.output.objects)) {\n                /*\n                isValid = res.body.output.objects[0].uid == _oldLogEntries[7].body.output.uid &&\n                    res.body.output.objects[1].uid == _oldLogEntries[6].body.output.uid;\n                */\n                isValid = res.body.output.objects.length == 2;\n            }\n            isValid.should.be.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c51f66c6-f999-403b-8dd3-86601691eec1",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get limited list of bill old logs based on skip/limit in descending order of message.",
                    "fullTitle": "Enterprise UserLogs UserLogs.getLogsBasedOnBillUidOrg Should get limited list of bill old logs based on skip/limit in descending order of message.",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar paramURL = apiURL.replace(\":bill_uid\", firstBillUid) + \"?skip=2&limit=2&field=message&direction=asc\";\napi.get(paramURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (Array.isArray(res.body.output.objects)) {\n                /*\n                isValid = res.body.output.objects[0].uid == _oldLogEntries[2].body.output.uid &&\n                    res.body.output.objects[1].uid == _oldLogEntries[3].body.output.uid;\n                */\n                isValid = res.body.output.objects.length == 2;\n            }\n            isValid.should.be.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e490902a-3d90-44e4-b4a5-ad615011999f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise UserLogs UserLogs.getLogsBasedOnBillUidOrg Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar paramURL = apiURL.replace(\":bill_uid\", secondBillUid);\napi.get(paramURL)\n    .set('org_uid', org_uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "190c9249-2c98-4ae9-8efd-6da729b11c9a",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "b42ba353-2d3c-43d1-96b7-11064fcdde07",
                  "2cad9276-4936-4192-a74e-863eb133a28c",
                  "38670b03-a523-44da-ad61-2c9c0912de71",
                  "1633d495-2941-4daa-931e-9078811cdf7f",
                  "c51f66c6-f999-403b-8dd3-86601691eec1",
                  "e490902a-3d90-44e4-b4a5-ad615011999f",
                  "190c9249-2c98-4ae9-8efd-6da729b11c9a"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 97,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "3b8f634e-b579-446f-99b2-8f069e85e650",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\userLogs\\getLogsOrg.enterprise.js",
        "file": "\\controllers\\test\\userLogs\\getLogsOrg.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "aec59731-18a7-4c33-b052-75d6c0df573c",
            "title": "logs",
            "fullFile": "C:\\work\\api\\controllers\\test\\userLogs\\getLogsOrg.enterprise.js",
            "file": "\\controllers\\test\\userLogs\\getLogsOrg.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "34b0747a-d14a-46e8-ac49-990b40b9f567",
                "title": "UserLogs.getLogs",
                "fullFile": "C:\\work\\api\\controllers\\test\\userLogs\\getLogsOrg.enterprise.js",
                "file": "\\controllers\\test\\userLogs\\getLogsOrg.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise logs UserLogs.getLogs \"before each\" hook",
                    "timedOut": false,
                    "duration": 137,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_acc_authToken = _.first(data.organization_account.authtoken);\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        api.get(\"/enterprise/v1/projects\")\n            .set('org_uid', org_uid)\n            .set('authtoken', authToken)\n            .expect(httpStatus.OK)\n            .end(function(error, res) {\n                project_uid = _.first(res.body.output.projects).uid\n                api.get(\"/enterprise/v1/user\")\n                    .set('org_uid', org_uid)\n                    .set('authtoken', authToken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        env_uid = res.body.output.env_uid;\n                        saveUserLogs({\n                                authtoken: authToken,\n                                user_uid: user_uid\n                            },\n                            function(error, userLogs) {\n                                savedUserLogs = userLogs;\n                                done();\n                            });\n                    });\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "016d0a3f-88b6-4d67-b14a-d13617ce8197",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise logs UserLogs.getLogs \"after each\" hook",
                    "timedOut": false,
                    "duration": 2,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ntestCollection.organizationRemoveRecords({}, function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c95e718f-2e71-4a84-9302-2c65d4b0d1ae",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get list of user logs.",
                    "fullTitle": "Enterprise logs UserLogs.getLogs Should get list of user logs.",
                    "timedOut": false,
                    "duration": 17,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = Array.isArray(res.body.output.objects);\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\";\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6e173d3a-9bf8-4370-8c32-d601a4e1e4db",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get limited list of user logs based on skip/limit.",
                    "fullTitle": "Enterprise logs UserLogs.getLogs Should get limited list of user logs based on skip/limit.",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar skipLimitURL = apiURL + \"?limit=2&skip=2\";\napi.get(skipLimitURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = Array.isArray(res.body.output.objects);\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\";\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "77208f58-3652-4840-978f-6e105f89bb90",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise logs UserLogs.getLogs Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5871bd1c-7a88-4358-8d25-0885f5536360",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "6e173d3a-9bf8-4370-8c32-d601a4e1e4db",
                  "77208f58-3652-4840-978f-6e105f89bb90",
                  "5871bd1c-7a88-4358-8d25-0885f5536360"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 36,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "c7ecb7b9-31ba-4cef-a3df-bc72bdf232a4",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\users\\activate.enterprise.js",
        "file": "\\controllers\\test\\users\\activate.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "f9ce7e21-58be-4edc-a882-c3d5d56967c3",
            "title": "User",
            "fullFile": "C:\\work\\api\\controllers\\test\\users\\activate.enterprise.js",
            "file": "\\controllers\\test\\users\\activate.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "3cbe2a7f-0953-4186-80ea-43697756ff23",
                "title": "User.activate",
                "fullFile": "C:\\work\\api\\controllers\\test\\users\\activate.enterprise.js",
                "file": "\\controllers\\test\\users\\activate.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.activate \"before each\" hook",
                    "timedOut": false,
                    "duration": 6,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.createFlowUser({}, function(error, user) {\n        if (error) {\n            done(error);\n        } else {\n            authToken = user.authtoken;\n            token = user.activation_token;\n            _id = user._id;\n            uid = user.uid;\n            done();\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9b870c0c-7a79-4637-a230-9932b212bb7c",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User User.activate \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "554908e9-b6e1-40a8-9144-6dfe6beb1542",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should activate account.",
                    "fullTitle": "Enterprise User User.activate Should activate account.",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .send({\n        user_uid: uid,\n        token: token\n    })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.message.should.equal(messageList.USER_ACTIVATION_ACTIVATED_SUCCESSFULLY);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4b4f8431-c615-4e2f-b03f-a309b1fa5b60",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should activate account after activation_expired gets false.",
                    "fullTitle": "Enterprise User User.activate Should activate account after activation_expired gets false.",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.findOneAndUpdate({\n    uid: uid\n}, {\n    activation_expired: true,\n    active: false\n}, function(error, result) {\n    api.post(apiURL)\n        .send({\n            user_uid: uid,\n            token: token\n        })\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                _models.User.findOne({\n                    uid: uid\n                }).lean().exec(function(error, user) {\n                    (user.activation_expired == false && user.active).should.equal(true);\n                    done();\n                });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "97660b89-8498-4033-b917-2b1d3fd4d3df",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should activate account, when user is lock.",
                    "fullTitle": "Enterprise User User.activate Should activate account, when user is lock.",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.findOneAndUpdate({ \"uid\": uid }, {\n    failed_login_count: 7\n}, { new: true }, function(err, user) {\n    api.post(\"/enterprise/v1/user/activate\")\n        .send({\n            user_uid: uid,\n            token: token\n        })\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                res.body.output.message.should.equal(messageList.USER_ACTIVATION_ACTIVATED_SUCCESSFULLY);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "12886bf6-ec82-445c-8205-aaaa77a22146",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should allowed to raised forgot password request, for 5 times invalid login attempt user.",
                    "fullTitle": "Enterprise User User.activate Should allowed to raised forgot password request, for 5 times invalid login attempt user.",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempBody = getImmutable(loginBody);\ntempBody.password = \"abc123\";\nvar loginCount = [];\n_models.User.findOneAndUpdate({\n    uid: uid\n}, {\n    failed_login_count: 5\n}, { new: true }, function(error, result) {\n    if (error) {\n        done(error);\n    } else {\n        api.post(\"/enterprise/v1/user/activate\")\n            .send({\n                user_uid: uid,\n                token: token\n            })\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    res.body.output.message.should.equal(messageList.USER_ACTIVATION_ACTIVATED_SUCCESSFULLY);\n                    done();\n                }\n            });\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5e23f6f9-714d-471a-8a15-86868ac7aff5",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as email not register.",
                    "fullTitle": "Enterprise User User.activate Should give error as email not register.",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .send({\n        user_uid: uid,\n        token: \"FAKE_CODE\"\n    })\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.USER_ACTIVATION_INCORRECT_CODE);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5f348e50-35d6-43f4-ba5f-2c8d62f801c4",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "4b4f8431-c615-4e2f-b03f-a309b1fa5b60",
                  "97660b89-8498-4033-b917-2b1d3fd4d3df",
                  "12886bf6-ec82-445c-8205-aaaa77a22146",
                  "5e23f6f9-714d-471a-8a15-86868ac7aff5",
                  "5f348e50-35d6-43f4-ba5f-2c8d62f801c4"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 23,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "74450b9c-a9ac-4c5c-a79c-28d73ab422f7",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\users\\authyContact.enterprise.js",
        "file": "\\controllers\\test\\users\\authyContact.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "b4754871-2c1a-426c-b52d-71e173e58c61",
            "title": "User",
            "fullFile": "C:\\work\\api\\controllers\\test\\users\\authyContact.enterprise.js",
            "file": "\\controllers\\test\\users\\authyContact.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "f83de40f-f819-4e15-9859-cae205892a2c",
                "title": "User.authyContact",
                "fullFile": "C:\\work\\api\\controllers\\test\\users\\authyContact.enterprise.js",
                "file": "\\controllers\\test\\users\\authyContact.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.authyContact \"before each\" hook",
                    "timedOut": false,
                    "duration": 88,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({ deleted_at: null }, function(error, user) {\n    _models.Mail.remove({ deleted_at: null }, function(error, user) {\n        _models.Authy.remove({ deleted_at: null }, function(error, user) {\n            commonMock.setSignUpMocks(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/signup\")\n                .send(registrationBody)\n                .expect(httpStatus.CREATED)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        authToken = res.body.output.authtoken;\n                        _id = res.body.output._id;\n                        apiURL = apiURL.replace(\":uid\", res.body.output.uid);\n                        done();\n                    }\n                });\n        });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8ad2a658-9a2f-41e6-acfc-4bfb89007ad3",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User User.authyContact \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7602f8b4-ee22-40a2-adda-70381e6fdbfd",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get error, if user is unauthorised.",
                    "fullTitle": "Enterprise User User.authyContact Should get error, if user is unauthorised.",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable({});\ntempRegistrationBody.authy_number = \"9619982150\";\ntempRegistrationBody.country_code = \"91\";\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\")\napi.put(apiURL)\n    .send(tempRegistrationBody)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "48aff840-37c0-44f4-af4f-2b8d47171b2c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should register phone number with authy.",
                    "fullTitle": "Enterprise User User.authyContact Should register phone number with authy.",
                    "timedOut": false,
                    "duration": 27,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable({});\ntempRegistrationBody.authy_number = \"9619982150\";\ntempRegistrationBody.country_code = \"91\";\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\napi.put(apiURL)\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.authy_number == tempRegistrationBody.authy_number &&\n                res.body.output.enable_twofa == \"enable\";\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3238e6d2-5ac0-46eb-a279-1c7d45b8f08c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get default plan.",
                    "fullTitle": "Enterprise User User.authyContact Should get default plan.",
                    "timedOut": false,
                    "duration": 30,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable({});\ntempRegistrationBody.authy_number = \"9619982150\";\ntempRegistrationBody.country_code = \"91\";\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\napi.put(apiURL)\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (res.body.output.plan.length == 1) {\n                var defaultPlan = _.first(_.filter(server.plan.list, function(plan) {\n                    //return (plan || {}).enterprise_plan || false;\n                    return ((plan || {}).plan_type || \"\") == \"enterprise\";\n                })) || {};\n                defaultPlan = utils.skipAttr(convert.getJSON(defaultPlan));\n                isValid = res.body.output.plan[0].uid == defaultPlan.uid;\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "79403d0d-9e56-4cdc-87b1-7245bbe324e6",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get default attributes.",
                    "fullTitle": "Enterprise User User.authyContact Should get default attributes.",
                    "timedOut": false,
                    "duration": 26,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable({});\ntempRegistrationBody.authy_number = \"9619982150\";\ntempRegistrationBody.country_code = \"91\";\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\napi.put(apiURL)\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (res.body.output.plan.length == 1) {\n                isValid = utils.isHaveKeyVals(res.body.output, [\n                        \"first_name\", \"flow_uid\", \"job_title\", \"last_name\", \"locale\",\n                        \"merchantid\", \"payment_set\", \"subscription\"\n                    ]) &&\n                    res.body.output.subscription.days == server.plan.enterprise.TrialPeriod &&\n                    moment(new Date(res.body.output.subscription.start_date)).format(\"YYYY-MM-DD\") ==\n                    moment(new Date()).format(\"YYYY-MM-DD\");\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6c51c10f-93df-46c8-896f-e15fbd25664c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as authy number is required.",
                    "fullTitle": "Enterprise User User.authyContact Should give error as authy number is required.",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable({});\n//tempRegistrationBody.authy_number = \"9619982150\";\ntempRegistrationBody.country_code = \"91\";\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\napi.put(apiURL)\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.error.authy_number.message == messageList.AUTHY_NUMBER_IS_REQUIRED;\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "65658b52-0423-450c-a77a-c736bb64be5e",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as authy country code is required.",
                    "fullTitle": "Enterprise User User.authyContact Should give error as authy country code is required.",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable({});\ntempRegistrationBody.authy_number = \"9619982150\";\n//tempRegistrationBody.country_code = \"91\";\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\napi.put(apiURL)\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.error.country_code.message == messageList.AUTHY_COUNTRY_CODE_IS_REQUIRED;\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f366d0b2-2692-4658-9764-41fcacc63a31",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should de-register and then register same phone number with authy.",
                    "fullTitle": "Enterprise User User.authyContact Should de-register and then register same phone number with authy.",
                    "timedOut": false,
                    "duration": 59,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable({});\ntempRegistrationBody.authy_number = \"9619982150\";\ntempRegistrationBody.country_code = \"91\";\n\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\napi.put(apiURL)\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var oldAuthyUserID = res.body.output.authy_user_uid;\n            commonMock.authyNumberChange(httpmock, \"enterprise\");\n            commonMock.authyDelete(httpmock, \"enterprise\");\n            api.put(apiURL)\n                .send(tempRegistrationBody)\n                .set('authtoken', authToken)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        var isValid =\n                            res.body.output.authy_user_uid == oldAuthyUserID &&\n                            (res.body.output.authy_user_uid || \"\") != \"\" &&\n                            (oldAuthyUserID || \"\") != \"\" &&\n                            res.body.output.enable_twofa == \"enable\";\n                        isValid.should.equal(true);\n                        done();\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "971315b8-7f45-4f07-bab3-aa0ab06b2b65",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "48aff840-37c0-44f4-af4f-2b8d47171b2c",
                  "3238e6d2-5ac0-46eb-a279-1c7d45b8f08c",
                  "79403d0d-9e56-4cdc-87b1-7245bbe324e6",
                  "6c51c10f-93df-46c8-896f-e15fbd25664c",
                  "65658b52-0423-450c-a77a-c736bb64be5e",
                  "f366d0b2-2692-4658-9764-41fcacc63a31",
                  "971315b8-7f45-4f07-bab3-aa0ab06b2b65"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 175,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "4c440cb3-7a6f-4742-82d6-02feed080e09",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\users\\cancelTwoFA.enterprise.js",
        "file": "\\controllers\\test\\users\\cancelTwoFA.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "c7b7b282-7678-4140-8ae3-97b105050278",
            "title": "User",
            "fullFile": "C:\\work\\api\\controllers\\test\\users\\cancelTwoFA.enterprise.js",
            "file": "\\controllers\\test\\users\\cancelTwoFA.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "7e1dc89a-0dd4-459f-8d97-8e750680288b",
                "title": "User.cancelTwoFA",
                "fullFile": "C:\\work\\api\\controllers\\test\\users\\cancelTwoFA.enterprise.js",
                "file": "\\controllers\\test\\users\\cancelTwoFA.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.cancelTwoFA \"before each\" hook",
                    "timedOut": false,
                    "duration": 86,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({ deleted_at: null }, function(error, user) {\n    _models.Mail.remove({ deleted_at: null }, function(error, user) {\n        _models.Authy.remove({ deleted_at: null }, function(error, user) {\n            commonMock.setSignUpMocks(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/signup\")\n                .send(registrationBody)\n                .expect(httpStatus.CREATED)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        authToken = res.body.output.authtoken;\n                        _id = res.body.output._id;\n                        uid = res.body.output.uid;\n                        done();\n                    }\n                });\n        });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "17486dbc-cfa7-4a1c-b7cb-856db0c577bb",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User User.cancelTwoFA \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c42be19e-0ed3-412a-9d67-94c3ba6b11c3",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should cancel twofa.",
                    "fullTitle": "Enterprise User User.cancelTwoFA Should cancel twofa.",
                    "timedOut": false,
                    "duration": 87,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.authy_number = \"9619982150\";\ntempRegistrationBody.country_code = \"91\";\ndelete tempRegistrationBody.password;\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\napi.put(\"/enterprise/v1/user\")\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var authy_userId = res.body.output.authy_user_uid;\n            commonMock.authySMSVerification(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/authy/sms\")\n                .send({\n                    authy_id: authy_userId\n                })\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                        api.post(\"/enterprise/v1/authy/verifyotp\")\n                            .send({\n                                authy_user_uid: authy_userId,\n                                token: otpBody.token,\n                                option_selected: \"otp\"\n                            })\n                            .set('authtoken', authToken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    var enable_twofa = res.body.output.enable_twofa;\n                                    if (enable_twofa == \"verified\") {\n                                        api.post(apiURL)\n                                            .send({})\n                                            .set('authtoken', authToken)\n                                            .expect(httpStatus.OK)\n                                            .end(function(err, res) {\n                                                if (err) {\n                                                    done(err);\n                                                } else {\n                                                    var isValid =\n                                                        res.body.output.enable_twofa == \"disable\" &&\n                                                        res.body.output.authy_user_uid == \"\" &&\n                                                        res.body.output.is_twofa_sms_enabled == false;\n                                                    isValid.should.equal(true);\n                                                    done();\n                                                }\n                                            });\n                                    } else {\n                                        true.should.equal(false);\n                                    }\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1b0103f6-9273-4476-9b18-b72af852de44",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should cancel twofa if same email account exists in express.",
                    "fullTitle": "Enterprise User User.cancelTwoFA Should cancel twofa if same email account exists in express.",
                    "timedOut": false,
                    "duration": 2804,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"express\");\napi.post(\"/express/v1/login\")\n    .send({\n        email: registrationBody.email,\n        password: registrationBody.password\n    })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var tempRegistrationBody = global.getImmutable(registrationBody);\n            tempRegistrationBody.authy_number = \"9619982150\";\n            tempRegistrationBody.country_code = \"91\";\n            delete tempRegistrationBody.password;\n            commonMock.authyNumberChange(httpmock, \"enterprise\");\n            commonMock.authyDelete(httpmock, \"enterprise\");\n            api.put(\"/enterprise/v1/user\")\n                .send(tempRegistrationBody)\n                .set('authtoken', authToken)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        var authy_userId = res.body.output.authy_user_uid;\n                        commonMock.authySMSVerification(httpmock, \"enterprise\");\n                        api.post(\"/enterprise/v1/authy/sms\")\n                            .send({\n                                authy_id: authy_userId\n                            })\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                                    api.post(\"/enterprise/v1/authy/verifyotp\")\n                                        .send({\n                                            authy_user_uid: authy_userId,\n                                            token: otpBody.token,\n                                            option_selected: \"otp\"\n                                        })\n                                        .set('authtoken', authToken)\n                                        .expect(httpStatus.OK)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                var enable_twofa = res.body.output.enable_twofa;\n                                                if (enable_twofa == \"verified\") {\n                                                    api.post(apiURL)\n                                                        .send({})\n                                                        .set('authtoken', authToken)\n                                                        .expect(httpStatus.OK)\n                                                        .end(function(err, res) {\n                                                            if (err) {\n                                                                done(err);\n                                                            } else {\n                                                                var isValid =\n                                                                    res.body.output.enable_twofa == \"disable\" &&\n                                                                    res.body.output.authy_user_uid == \"\" &&\n                                                                    res.body.output.is_twofa_sms_enabled == false;\n                                                                isValid.should.equal(true);\n                                                                done();\n                                                            }\n                                                        });\n                                                } else {\n                                                    true.should.equal(false);\n                                                }\n                                            }\n                                        });\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c7f9aa44-7c14-49c9-8c28-d017ff9a647d",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get default plan for cancel twofa.",
                    "fullTitle": "Enterprise User User.cancelTwoFA Should get default plan for cancel twofa.",
                    "timedOut": false,
                    "duration": 82,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.authy_number = \"9619982150\";\ntempRegistrationBody.country_code = \"91\";\ndelete tempRegistrationBody.password;\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\napi.put(\"/enterprise/v1/user\")\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var authy_userId = res.body.output.authy_user_uid;\n            commonMock.authySMSVerification(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/authy/sms\")\n                .send({\n                    authy_id: authy_userId\n                })\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                        api.post(\"/enterprise/v1/authy/verifyotp\")\n                            .send({\n                                authy_user_uid: authy_userId,\n                                token: otpBody.token,\n                                option_selected: \"otp\"\n                            })\n                            .set('authtoken', authToken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    var enable_twofa = res.body.output.enable_twofa;\n                                    if (enable_twofa == \"verified\") {\n                                        api.post(apiURL)\n                                            .send({})\n                                            .set('authtoken', authToken)\n                                            .expect(httpStatus.OK)\n                                            .end(function(err, res) {\n                                                if (err) {\n                                                    done(err);\n                                                } else {\n                                                    var isValid = false;\n                                                    if (res.body.output.plan.length == 1) {\n                                                        var defaultPlan = _.first(_.filter(server.plan.list, function(plan) {\n                                                            //return (plan || {}).express_plan || false;\n                                                            return ((plan || {}).plan_type || \"\") == \"enterprise\";\n                                                        })) || {};\n                                                        defaultPlan = utils.skipAttr(convert.getJSON(defaultPlan));\n                                                        isValid = res.body.output.plan[0].uid == defaultPlan.uid;\n                                                    }\n                                                    isValid.should.equal(true);\n                                                    done();\n                                                }\n                                            });\n                                    } else {\n                                        true.should.equal(false);\n                                    }\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "03f78b64-57c8-4a8d-91aa-66bab992da9e",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get default attributes for cancel twofa.",
                    "fullTitle": "Enterprise User User.cancelTwoFA Should get default attributes for cancel twofa.",
                    "timedOut": false,
                    "duration": 83,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.authy_number = \"9619982150\";\ntempRegistrationBody.country_code = \"91\";\ndelete tempRegistrationBody.password;\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\napi.put(\"/enterprise/v1/user\")\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var authy_userId = res.body.output.authy_user_uid;\n            commonMock.authySMSVerification(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/authy/sms\")\n                .send({\n                    authy_id: authy_userId\n                })\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                        api.post(\"/enterprise/v1/authy/verifyotp\")\n                            .send({\n                                authy_user_uid: authy_userId,\n                                token: otpBody.token,\n                                option_selected: \"otp\"\n                            })\n                            .set('authtoken', authToken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    var enable_twofa = res.body.output.enable_twofa;\n                                    if (enable_twofa == \"verified\") {\n                                        api.post(apiURL)\n                                            .send({})\n                                            .set('authtoken', authToken)\n                                            .expect(httpStatus.OK)\n                                            .end(function(err, res) {\n                                                if (err) {\n                                                    done(err);\n                                                } else {\n                                                    var isValid = false;\n                                                    if (res.body.output.plan.length == 1) {\n                                                        isValid = utils.isHaveKeyVals(res.body.output, [\n                                                                \"first_name\", \"flow_uid\", \"job_title\", \"last_name\", \"locale\",\n                                                                \"merchantid\", \"payment_set\", \"subscription\"\n                                                            ]) &&\n                                                            res.body.output.subscription.days == server.plan.enterprise.TrialPeriod &&\n                                                            moment(new Date(res.body.output.subscription.start_date)).format(\"YYYY-MM-DD\") ==\n                                                            moment(new Date()).format(\"YYYY-MM-DD\");\n                                                    }\n                                                    isValid.should.equal(true);\n                                                    done();\n                                                }\n                                            });\n                                    } else {\n                                        true.should.equal(false);\n                                    }\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f3b5ab9c-e497-4b16-8e8e-ee19af408307",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should cancel twofa for google login.",
                    "fullTitle": "Enterprise User User.cancelTwoFA Should cancel twofa for google login.",
                    "timedOut": false,
                    "duration": 112,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\ncommonMock.googleLogin(httpmock, \"enterprise\");\napi.post(\"/enterprise/v1/login/google\")\n    .send(loginBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            authToken = res.body.output.authtoken;\n            _id = res.body.output._id;\n\n            var tempRegistrationBody = global.getImmutable(registrationBody);\n            tempRegistrationBody.authy_number = \"9619982150\";\n            tempRegistrationBody.country_code = \"91\";\n            delete tempRegistrationBody.password;\n            commonMock.authyNumberChange(httpmock, \"enterprise\");\n            commonMock.authyDelete(httpmock, \"enterprise\");\n\n            api.put(\"/enterprise/v1/user\")\n                .send(tempRegistrationBody)\n                .set('authtoken', authToken)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        var authy_userId = res.body.output.authy_user_uid;\n                        commonMock.authySMSVerification(httpmock, \"enterprise\");\n                        api.post(\"/enterprise/v1/authy/sms\")\n                            .send({\n                                authy_id: authy_userId\n                            })\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                                    api.post(\"/enterprise/v1/authy/verifyotp\")\n                                        .send({\n                                            authy_user_uid: authy_userId,\n                                            token: otpBody.token,\n                                            option_selected: \"otp\"\n                                        })\n                                        .set('authtoken', authToken)\n                                        .expect(httpStatus.OK)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                var enable_twofa = res.body.output.enable_twofa;\n                                                commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                                                if (enable_twofa == \"verified\") {\n                                                    api.post(apiURL)\n                                                        .send({})\n                                                        .set('authtoken', authToken)\n                                                        .expect(httpStatus.OK)\n                                                        .end(function(err, res) {\n                                                            if (err) {\n                                                                done(err);\n                                                            } else {\n                                                                var isValid =\n                                                                    res.body.output.enable_twofa == \"disable\" &&\n                                                                    res.body.output.authy_user_uid == \"\" &&\n                                                                    res.body.output.is_twofa_sms_enabled == false;\n                                                                isValid.should.equal(true);\n                                                                done();\n                                                            }\n                                                        });\n                                                } else {\n                                                    true.should.equal(false);\n                                                }\n                                            }\n                                        });\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "dea5efca-c235-453c-8cc1-a71a2ea7f48d",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get default plan for cancel twofa with google login.",
                    "fullTitle": "Enterprise User User.cancelTwoFA Should get default plan for cancel twofa with google login.",
                    "timedOut": false,
                    "duration": 100,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\ncommonMock.googleLogin(httpmock, \"enterprise\");\napi.post(\"/enterprise/v1/login/google\")\n    .send(loginBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            authToken = res.body.output.authtoken;\n            _id = res.body.output._id;\n\n            var tempRegistrationBody = global.getImmutable(registrationBody);\n            tempRegistrationBody.authy_number = \"9619982150\";\n            tempRegistrationBody.country_code = \"91\";\n            delete tempRegistrationBody.password;\n            commonMock.authyNumberChange(httpmock, \"enterprise\");\n            commonMock.authyDelete(httpmock, \"enterprise\");\n\n            api.put(\"/enterprise/v1/user\")\n                .send(tempRegistrationBody)\n                .set('authtoken', authToken)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        var authy_userId = res.body.output.authy_user_uid;\n                        commonMock.authySMSVerification(httpmock, \"enterprise\");\n                        api.post(\"/enterprise/v1/authy/sms\")\n                            .send({\n                                authy_id: authy_userId\n                            })\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                                    api.post(\"/enterprise/v1/authy/verifyotp\")\n                                        .send({\n                                            authy_user_uid: authy_userId,\n                                            token: otpBody.token,\n                                            option_selected: \"otp\"\n                                        })\n                                        .set('authtoken', authToken)\n                                        .expect(httpStatus.OK)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                var enable_twofa = res.body.output.enable_twofa;\n                                                if (enable_twofa == \"verified\") {\n                                                    api.post(apiURL)\n                                                        .send({})\n                                                        .set('authtoken', authToken)\n                                                        .expect(httpStatus.OK)\n                                                        .end(function(err, res) {\n                                                            if (err) {\n                                                                done(err);\n                                                            } else {\n                                                                var isValid = false;\n                                                                if (res.body.output.plan.length == 1) {\n                                                                    var defaultPlan = _.first(_.filter(server.plan.list, function(plan) {\n                                                                        //return (plan || {}).express_plan || false;\n                                                                        return ((plan || {}).plan_type || \"\") == \"enterprise\";\n                                                                    })) || {};\n                                                                    defaultPlan = utils.skipAttr(convert.getJSON(defaultPlan));\n                                                                    isValid = res.body.output.plan[0].uid == defaultPlan.uid;\n                                                                }\n                                                                isValid.should.equal(true);\n                                                                done();\n                                                            }\n                                                        });\n                                                } else {\n                                                    true.should.equal(false);\n                                                }\n                                            }\n                                        });\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "05337818-b71e-4615-a014-1b54afd91cc7",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get default attributes for cancel twofa with google login.",
                    "fullTitle": "Enterprise User User.cancelTwoFA Should get default attributes for cancel twofa with google login.",
                    "timedOut": false,
                    "duration": 103,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\ncommonMock.googleLogin(httpmock, \"enterprise\");\napi.post(\"/enterprise/v1/login/google\")\n    .send(loginBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            authToken = res.body.output.authtoken;\n            _id = res.body.output._id;\n\n            var tempRegistrationBody = global.getImmutable(registrationBody);\n            tempRegistrationBody.authy_number = \"9619982150\";\n            tempRegistrationBody.country_code = \"91\";\n            delete tempRegistrationBody.password;\n            commonMock.authyNumberChange(httpmock, \"enterprise\");\n            commonMock.authyDelete(httpmock, \"enterprise\");\n\n            api.put(\"/enterprise/v1/user\")\n                .send(tempRegistrationBody)\n                .set('authtoken', authToken)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        var authy_userId = res.body.output.authy_user_uid;\n                        commonMock.authySMSVerification(httpmock, \"enterprise\");\n                        api.post(\"/enterprise/v1/authy/sms\")\n                            .send({\n                                authy_id: authy_userId\n                            })\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                                    api.post(\"/enterprise/v1/authy/verifyotp\")\n                                        .send({\n                                            authy_user_uid: authy_userId,\n                                            token: otpBody.token,\n                                            option_selected: \"otp\"\n                                        })\n                                        .set('authtoken', authToken)\n                                        .expect(httpStatus.OK)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                var enable_twofa = res.body.output.enable_twofa;\n                                                if (enable_twofa == \"verified\") {\n                                                    api.post(apiURL)\n                                                        .send({})\n                                                        .set('authtoken', authToken)\n                                                        .expect(httpStatus.OK)\n                                                        .end(function(err, res) {\n                                                            if (err) {\n                                                                done(err);\n                                                            } else {\n                                                                var isValid = false;\n                                                                if (res.body.output.plan.length == 1) {\n                                                                    isValid = utils.isHaveKeyVals(res.body.output, [\n                                                                            \"first_name\", \"flow_uid\", \"job_title\", \"last_name\", \"locale\",\n                                                                            \"merchantid\", \"payment_set\", \"subscription\"\n                                                                        ]) &&\n                                                                        res.body.output.subscription.days == server.plan.enterprise.TrialPeriod &&\n                                                                        moment(new Date(res.body.output.subscription.start_date)).format(\"YYYY-MM-DD\") ==\n                                                                        moment(new Date()).format(\"YYYY-MM-DD\");\n                                                                }\n                                                                isValid.should.equal(true);\n                                                                done();\n                                                            }\n                                                        });\n                                                } else {\n                                                    true.should.equal(false);\n                                                }\n                                            }\n                                        });\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "34dd1c16-5809-4b75-8d29-5a47ee3046be",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise User User.cancelTwoFA Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .send({})\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b0baecfa-6c2b-48db-8b77-b2c6d62dc91a",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "1b0103f6-9273-4476-9b18-b72af852de44",
                  "c7f9aa44-7c14-49c9-8c28-d017ff9a647d",
                  "03f78b64-57c8-4a8d-91aa-66bab992da9e",
                  "f3b5ab9c-e497-4b16-8e8e-ee19af408307",
                  "dea5efca-c235-453c-8cc1-a71a2ea7f48d",
                  "05337818-b71e-4615-a014-1b54afd91cc7",
                  "34dd1c16-5809-4b75-8d29-5a47ee3046be",
                  "b0baecfa-6c2b-48db-8b77-b2c6d62dc91a"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 3375,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "75c72f22-59a7-4cce-900b-2209cd894cf0",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\users\\changeFirstTime.enterprise.js",
        "file": "\\controllers\\test\\users\\changeFirstTime.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "ec1fea7b-68ef-40bd-b453-883b96f2b55e",
            "title": "User",
            "fullFile": "C:\\work\\api\\controllers\\test\\users\\changeFirstTime.enterprise.js",
            "file": "\\controllers\\test\\users\\changeFirstTime.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "6381bfa4-48f8-454f-8d3b-fd9f890b80ea",
                "title": "User.changeFirstTime",
                "fullFile": "C:\\work\\api\\controllers\\test\\users\\changeFirstTime.enterprise.js",
                "file": "\\controllers\\test\\users\\changeFirstTime.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.changeFirstTime \"before each\" hook",
                    "timedOut": false,
                    "duration": 90,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n    _models.Mail.remove({ $or: [{ to: new RegExp('^test.user+', \"i\") }, { to: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n        commonMock.setSignUpMocks(httpmock, \"enterprise\");\n        api.post(\"/enterprise/v1/signup\")\n            .send(registrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    authToken = res.body.output.authtoken;\n                    uid = res.body.output.uid;\n                    done();\n                }\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3276ba3b-22ed-4970-8b4f-0d282a0b535e",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User User.changeFirstTime \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a0c68f23-44d3-4fe8-9479-e69ed0065562",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should set first time login false.",
                    "fullTitle": "Enterprise User User.changeFirstTime Should set first time login false.",
                    "timedOut": false,
                    "duration": 27,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.put(apiURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.first_login.should.equal(false);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b2cf4f95-8280-429e-b171-268f02fc9bb9",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get organizations details for firsttime login.",
                    "fullTitle": "Enterprise User User.changeFirstTime Should get organizations details for firsttime login.",
                    "timedOut": false,
                    "duration": 85,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        api.put(apiURL)\n            .set('authtoken', data.role1.authtoken)\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    res.body.output.organizations.length == 1;\n                    done();\n                }\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f85e69f2-a279-4b1b-a89c-43304672c009",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should set first time login false if user is expired.",
                    "fullTitle": "Enterprise User User.changeFirstTime Should set first time login false if user is expired.",
                    "timedOut": false,
                    "duration": 25,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.findOneAndUpdate({\n    uid: uid\n}, {\n    activation_token: \"fl554d45sfdsfdsf54554\",\n    activation_expired: true,\n    active: false,\n    created_at: new Date(2017, 00, 01),\n    subscription: {\n        \"start_date\": new Date(2017, 00, 01),\n        \"hasUnlimitedPlan\": false,\n        \"days\": 30,\n        \"expired\": false\n    }\n}, { new: true }, function(err, activity) {\n    if (err) {\n        done(err);\n    } else {\n        api.put(apiURL)\n            .set('authtoken', authToken)\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    res.body.output.first_login.should.equal(false);\n                    done();\n                }\n            });\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a5812f2c-1817-4bdc-bf30-39870b07bd10",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise User User.changeFirstTime Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.put(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cd01b1cb-7ec8-4a1a-a04d-1e49a433291c",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "b2cf4f95-8280-429e-b171-268f02fc9bb9",
                  "f85e69f2-a279-4b1b-a89c-43304672c009",
                  "a5812f2c-1817-4bdc-bf30-39870b07bd10",
                  "cd01b1cb-7ec8-4a1a-a04d-1e49a433291c"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 141,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "bc2261bf-6ede-4cba-b021-9a8557a51fde",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\users\\changePassword.enterprise.js",
        "file": "\\controllers\\test\\users\\changePassword.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "86a3c2d6-6cee-4897-b605-50e2797a2db1",
            "title": "User",
            "fullFile": "C:\\work\\api\\controllers\\test\\users\\changePassword.enterprise.js",
            "file": "\\controllers\\test\\users\\changePassword.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "c7b88bae-28ad-4049-b701-ba77952a9dc5",
                "title": "User.changePassword",
                "fullFile": "C:\\work\\api\\controllers\\test\\users\\changePassword.enterprise.js",
                "file": "\\controllers\\test\\users\\changePassword.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.changePassword \"before each\" hook",
                    "timedOut": false,
                    "duration": 85,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n    _models.Mail.remove({ $or: [{ to: new RegExp('^test.user+', \"i\") }, { to: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n        _models.Authy.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n            commonMock.setSignUpMocks(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/signup\")\n                .send(registrationBody)\n                .expect(httpStatus.CREATED)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        authToken = res.body.output.authtoken;\n                        _id = res.body.output._id;\n                        apiURL = apiURL.replace(\":uid\", res.body.output.uid);\n                        done();\n                    }\n                });\n        });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b83ec14c-ba28-4612-a6c3-882df51daf81",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User User.changePassword \"after each\" hook",
                    "timedOut": false,
                    "duration": 1,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "32e451c8-4b93-4337-aba0-bbf270d699d3",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should update new password.",
                    "fullTitle": "Enterprise User User.changePassword Should update new password.",
                    "timedOut": false,
                    "duration": 140,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = {};\ntempRegistrationBody.password = \"Raw@1235\";\ntempRegistrationBody.password_confirmation = \"Raw@1235\";\ntempRegistrationBody.oldpassword = \"Raw@1234\";\napi.put(apiURL)\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.uid.should.not.equal(\"\");\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b140cf08-4c3c-441a-bfd1-8bb60b412428",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as invalid password format.",
                    "fullTitle": "Enterprise User User.changePassword Should give error as invalid password format.",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = {};\ntempRegistrationBody.password = \"Raw\";\ntempRegistrationBody.password_confirmation = \"Raw\";\ntempRegistrationBody.oldpassword = \"Raw@1234\";\napi.put(apiURL)\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.password.message.should.equal(messageList.USER_REG_INVALID_PASSWORD);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "499a52ce-c3e6-4bf1-b660-096d95bcb3be",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as password is required.",
                    "fullTitle": "Enterprise User User.changePassword Should give error as password is required.",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = {};\n//tempRegistrationBody.password = \"Raw@1235\";\ntempRegistrationBody.password_confirmation = \"Raw@1235\";\ntempRegistrationBody.oldpassword = \"Raw@1234\";\napi.put(apiURL)\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.password.message.should.equal(messageList.USER_REG_INVALID_PASSWORD);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c5c58122-d796-43a7-94ff-af3c8bfd68ce",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as confirm password is required.",
                    "fullTitle": "Enterprise User User.changePassword Should give error as confirm password is required.",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = {};\ntempRegistrationBody.password = \"Raw@1235\";\n//tempRegistrationBody.password_confirmation = \"Raw@1235\";\ntempRegistrationBody.oldpassword = \"Raw@1234\";\napi.put(apiURL)\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.password_confirmation.message.should.equal(messageList.USER_PASS_NOT_MATCH_WITH_CONFIRM_PASS);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2d1c25a9-5f33-445a-b47c-bc5829c54918",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as old password is required.",
                    "fullTitle": "Enterprise User User.changePassword Should give error as old password is required.",
                    "timedOut": false,
                    "duration": 18,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = {};\ntempRegistrationBody.password = \"Raw@1235\";\ntempRegistrationBody.password_confirmation = \"Raw@1235\";\n//tempRegistrationBody.oldpassword = \"Raw@1234\";\napi.put(apiURL)\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.oldpassword.message.should.equal(messageList.USER_CHANGE_PASSWARD_OLD_PASSWORD_REQUIRED);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d2b1d7bc-f6f6-4e5c-8a28-7a8b892e17fe",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as password and confirm passwords are different.",
                    "fullTitle": "Enterprise User User.changePassword Should give error as password and confirm passwords are different.",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = {};\ntempRegistrationBody.password = \"Raw@1235\";\ntempRegistrationBody.password_confirmation = \"Raw@1236\";\ntempRegistrationBody.oldpassword = \"Raw@1234\";\napi.put(apiURL)\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.password_confirmation.message.should.equal(messageList.USER_PASS_NOT_MATCH_WITH_CONFIRM_PASS);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b62a5f61-ccff-4566-944f-f3d74ddf9e40",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise User User.changePassword Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = {};\ntempRegistrationBody.password = \"Raw@1235\";\ntempRegistrationBody.password_confirmation = \"Raw@1236\";\ntempRegistrationBody.oldpassword = \"Raw@1234\";\napi.put(apiURL)\n    .send(tempRegistrationBody)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c42ef6de-0fc8-41e4-9c1c-835c7ad08f2d",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "b140cf08-4c3c-441a-bfd1-8bb60b412428",
                  "499a52ce-c3e6-4bf1-b660-096d95bcb3be",
                  "c5c58122-d796-43a7-94ff-af3c8bfd68ce",
                  "2d1c25a9-5f33-445a-b47c-bc5829c54918",
                  "d2b1d7bc-f6f6-4e5c-8a28-7a8b892e17fe",
                  "b62a5f61-ccff-4566-944f-f3d74ddf9e40",
                  "c42ef6de-0fc8-41e4-9c1c-835c7ad08f2d"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 216,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "f7086600-87f3-4c6e-98d7-bc14dbbe4ecd",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\users\\checkMyEmail.enterprise.js",
        "file": "\\controllers\\test\\users\\checkMyEmail.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "64fa1c56-3d82-41ad-9e18-67d7b28e46d6",
            "title": "User",
            "fullFile": "C:\\work\\api\\controllers\\test\\users\\checkMyEmail.enterprise.js",
            "file": "\\controllers\\test\\users\\checkMyEmail.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "040a7855-220d-43bd-b0ca-6d499ad0aa6a",
                "title": "User.checkMyEmail",
                "fullFile": "C:\\work\\api\\controllers\\test\\users\\checkMyEmail.enterprise.js",
                "file": "\\controllers\\test\\users\\checkMyEmail.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.checkMyEmail \"before each\" hook",
                    "timedOut": false,
                    "duration": 90,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n    _models.Mail.remove({ $or: [{ to: new RegExp('^test.user+', \"i\") }, { to: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n        _models.Authy.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n            commonMock.setSignUpMocks(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/signup\")\n                .send(registrationBody)\n                .expect(httpStatus.CREATED)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        authToken = res.body.output.authtoken;\n                        _id = res.body.output._id;\n                        done();\n                    }\n                });\n        });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9752cefe-5460-40d9-855a-ed309f7a1692",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User User.checkMyEmail \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d94d6ff9-946f-4fc9-b909-1ad3e9a2db5a",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should give false for block status after first fail login attempt.",
                    "fullTitle": "Enterprise User User.checkMyEmail Should give false for block status after first fail login attempt.",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar paramURL = apiURL + \"?email=test.user@raweng.com\";\napi.get(paramURL)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.block.should.equal(false);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f0f3dce9-23ef-4a88-87db-ba747daa52a2",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give true for show_captcha status for user.",
                    "fullTitle": "Enterprise User User.checkMyEmail Should give true for show_captcha status for user.",
                    "timedOut": false,
                    "duration": 248,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(\"/enterprise/v1/login\")\n    .send({\n        \"email\": \"test.user@raweng.com\",\n        \"password\": \"Raw@123456\"\n    })\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            api.post(\"/enterprise/v1/login\")\n                .send({\n                    \"email\": \"test.user@raweng.com\",\n                    \"password\": \"Raw@123456\"\n                })\n                .expect(httpStatus.UNAUTHORIZED)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        api.post(\"/enterprise/v1/login\")\n                            .send({\n                                \"email\": \"test.user@raweng.com\",\n                                \"password\": \"Raw@123456\"\n                            })\n                            .expect(httpStatus.UNAUTHORIZED)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    var paramURL = apiURL + \"?email=test.user@raweng.com\";\n                                    api.get(paramURL)\n                                        .expect(httpStatus.OK)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                res.body.output.show_captcha.should.equal(true);\n                                                done();\n                                            }\n                                        });\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "257b69f2-ebb9-4a76-bb00-ef829876dd2c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give false for show_captcha status after two fail login attempts.",
                    "fullTitle": "Enterprise User User.checkMyEmail Should give false for show_captcha status after two fail login attempts.",
                    "timedOut": false,
                    "duration": 164,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(\"/enterprise/v1/login\")\n    .send({\n        \"email\": \"test.user@raweng.com\",\n        \"password\": \"Raw@123456\"\n    })\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            api.post(\"/enterprise/v1/login\")\n                .send({\n                    \"email\": \"test.user@raweng.com\",\n                    \"password\": \"Raw@123456\"\n                })\n                .expect(httpStatus.UNAUTHORIZED)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        var paramURL = apiURL + \"?email=test.user@raweng.com\";\n                        api.get(paramURL)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    res.body.output.show_captcha.should.equal(false);\n                                    done();\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "72bc6747-6232-4d81-bd29-a9dcb7a49fb9",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give true block status for user.",
                    "fullTitle": "Enterprise User User.checkMyEmail Should give true block status for user.",
                    "timedOut": false,
                    "duration": 489,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(\"/enterprise/v1/login\")\n    .send({\n        \"email\": \"test.user@raweng.com\",\n        \"password\": \"Raw@123456\"\n    })\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            api.post(\"/enterprise/v1/login\")\n                .send({\n                    \"email\": \"test.user@raweng.com\",\n                    \"password\": \"Raw@123456\"\n                })\n                .expect(httpStatus.UNAUTHORIZED)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        api.post(\"/enterprise/v1/login\")\n                            .send({\n                                \"email\": \"test.user@raweng.com\",\n                                \"password\": \"Raw@123456\"\n                            })\n                            .expect(httpStatus.UNAUTHORIZED)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n\n                                    api.post(\"/enterprise/v1/login\")\n                                        .send({\n                                            \"email\": \"test.user@raweng.com\",\n                                            \"password\": \"Raw@123456\"\n                                        })\n                                        .expect(httpStatus.UNAUTHORIZED)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n\n                                                api.post(\"/enterprise/v1/login\")\n                                                    .send({\n                                                        \"email\": \"test.user@raweng.com\",\n                                                        \"password\": \"Raw@123456\"\n                                                    })\n                                                    .expect(httpStatus.UNAUTHORIZED)\n                                                    .end(function(err, res) {\n                                                        if (err) {\n                                                            done(err);\n                                                        } else {\n                                                            api.post(\"/enterprise/v1/login\")\n                                                                .send({\n                                                                    \"email\": \"test.user@raweng.com\",\n                                                                    \"password\": \"Raw@123456\"\n                                                                })\n                                                                .expect(httpStatus.UNAUTHORIZED)\n                                                                .end(function(err, res) {\n                                                                    if (err) {\n                                                                        done(err);\n                                                                    } else {\n                                                                        var paramURL = apiURL + \"?email=test.user@raweng.com\";\n                                                                        api.get(paramURL)\n                                                                            .expect(httpStatus.OK)\n                                                                            .end(function(err, res) {\n                                                                                if (err) {\n                                                                                    done(err);\n                                                                                } else {\n                                                                                    res.body.output.block.should.equal(true);\n                                                                                    done();\n                                                                                }\n                                                                            });\n\n\n                                                                    }\n                                                                });\n                                                        }\n                                                    });\n                                            }\n                                        });\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b5249506-8f68-4fae-a369-746f65786649",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give false for block status after fifth fail login attempts.",
                    "fullTitle": "Enterprise User User.checkMyEmail Should give false for block status after fifth fail login attempts.",
                    "timedOut": false,
                    "duration": 408,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(\"/enterprise/v1/login\")\n    .send({\n        \"email\": \"test.user@raweng.com\",\n        \"password\": \"Raw@123456\"\n    })\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            api.post(\"/enterprise/v1/login\")\n                .send({\n                    \"email\": \"test.user@raweng.com\",\n                    \"password\": \"Raw@123456\"\n                })\n                .expect(httpStatus.UNAUTHORIZED)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        api.post(\"/enterprise/v1/login\")\n                            .send({\n                                \"email\": \"test.user@raweng.com\",\n                                \"password\": \"Raw@123456\"\n                            })\n                            .expect(httpStatus.UNAUTHORIZED)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n\n                                    api.post(\"/enterprise/v1/login\")\n                                        .send({\n                                            \"email\": \"test.user@raweng.com\",\n                                            \"password\": \"Raw@123456\"\n                                        })\n                                        .expect(httpStatus.UNAUTHORIZED)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n\n                                                api.post(\"/enterprise/v1/login\")\n                                                    .send({\n                                                        \"email\": \"test.user@raweng.com\",\n                                                        \"password\": \"Raw@123456\"\n                                                    })\n                                                    .expect(httpStatus.UNAUTHORIZED)\n                                                    .end(function(err, res) {\n                                                        if (err) {\n                                                            done(err);\n                                                        } else {\n\n                                                            var paramURL = apiURL + \"?email=test.user@raweng.com\";\n                                                            api.get(paramURL)\n                                                                .expect(httpStatus.OK)\n                                                                .end(function(err, res) {\n                                                                    if (err) {\n                                                                        done(err);\n                                                                    } else {\n                                                                        res.body.output.block.should.equal(false);\n                                                                        done();\n                                                                    }\n                                                                });\n                                                        }\n                                                    });\n                                            }\n                                        });\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "628547ab-854b-47dc-b6cd-0407140d5c4b",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "f0f3dce9-23ef-4a88-87db-ba747daa52a2",
                  "257b69f2-ebb9-4a76-bb00-ef829876dd2c",
                  "72bc6747-6232-4d81-bd29-a9dcb7a49fb9",
                  "b5249506-8f68-4fae-a369-746f65786649",
                  "628547ab-854b-47dc-b6cd-0407140d5c4b"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 1314,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "306f6e83-0289-4100-9a1a-40fb10e40d7f",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\users\\clearPendingUserStream.enterprise.js",
        "file": "\\controllers\\test\\users\\clearPendingUserStream.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "9453d6f9-a64d-4dfc-a319-dc36cd50405d",
            "title": "User",
            "fullFile": "C:\\work\\api\\controllers\\test\\users\\clearPendingUserStream.enterprise.js",
            "file": "\\controllers\\test\\users\\clearPendingUserStream.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "f725de09-dab4-4621-9ac6-38a83154b019",
                "title": "User.clearPendingUserStream",
                "fullFile": "C:\\work\\api\\controllers\\test\\users\\clearPendingUserStream.enterprise.js",
                "file": "\\controllers\\test\\users\\clearPendingUserStream.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.clearPendingUserStream \"before each\" hook",
                    "timedOut": false,
                    "duration": 778,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveEntries(function() {\n    commonMock.setSignUpMocks(httpmock, \"enterprise\");\n    api.post(\"/enterprise/v1/signup\")\n        .send(registrationBody)\n        .expect(httpStatus.CREATED)\n        .end(function(error, res) {\n            if (error) {\n                done(error);\n            } else {\n                authToken = res.body.output.authtoken;\n                user_uid = res.body.output.uid;\n                _id = res.body.output._id;\n                saveBillEntries({\n                    user_uid: user_uid,\n                    authtoken: authToken,\n                    email: res.body.output.email\n                }, function(error, billEntries) {\n                    if (error) {\n                        done(error);\n                    } else {\n                        _billEntries = billEntries;\n                        saveUserStreamEntries({\n                            user_uid: user_uid,\n                            authtoken: authToken,\n                            email: res.body.output.email\n                        }, function(error, userStreamEntries) {\n                            if (error) {\n                                done(error);\n                            } else {\n                                _userStreamEntries = userStreamEntries;\n                                done();\n                            }\n                        });\n                    }\n                });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "78374377-9f27-4c90-a027-4cb4daa51bc6",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User User.clearPendingUserStream \"after each\" hook",
                    "timedOut": false,
                    "duration": 2,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nhttpmock.cleanAll();\nremoveEntries(function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f514e771-7fba-4133-a9c2-128b033681f6",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should clear pending stream of user.",
                    "fullTitle": "Enterprise User User.clearPendingUserStream Should clear pending stream of user.",
                    "timedOut": false,
                    "duration": 19,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('authtoken', authToken)\n    .send({\n        stream_ids: [userStreamIDs[0], userStreamIDs[1]]\n    })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            _models.UserStream.find({ user_uid: user_uid }, function(error, userStreams) {\n                var isValid01 = true,\n                    isValid02 = true;\n                _.each(userStreams, function(item) {\n                    if (item.uid == userStreamIDs[0] || item.uid == userStreamIDs[1]) {\n                        isValid01 = isValid01 && item.pending_view == false;\n                    } else {\n                        isValid02 = isValid02 && item.pending_view;\n                    }\n                });\n                (isValid01 && isValid02).should.equal(true);\n                done();\n            });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ab716625-5e99-48e0-9b3d-3639a42a43c9",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give ids required error.",
                    "fullTitle": "Enterprise User User.clearPendingUserStream Should give ids required error.",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.USER_STREAM_REQUIRED_IDS);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9467fb29-7889-45c6-b36b-6a4b7f3ea277",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise User User.clearPendingUserStream Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .send({\n        stream_ids: [userStreamIDs[0], userStreamIDs[1]]\n    })\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "97b8ab7d-26cc-4b57-9100-76cca8850dec",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "ab716625-5e99-48e0-9b3d-3639a42a43c9",
                  "9467fb29-7889-45c6-b36b-6a4b7f3ea277",
                  "97b8ab7d-26cc-4b57-9100-76cca8850dec"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 36,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "e4c64a02-b4c4-4f63-a51a-3580ebd71d10",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\users\\create.enterprise.js",
        "file": "\\controllers\\test\\users\\create.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "b5b4970c-6480-47f0-9d79-471f404652d9",
            "title": "User",
            "fullFile": "C:\\work\\api\\controllers\\test\\users\\create.enterprise.js",
            "file": "\\controllers\\test\\users\\create.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "a15f6fd7-e655-4dda-beda-2a943d2114b6",
                "title": "User.Create",
                "fullFile": "C:\\work\\api\\controllers\\test\\users\\create.enterprise.js",
                "file": "\\controllers\\test\\users\\create.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.Create \"before each\" hook",
                    "timedOut": false,
                    "duration": 1,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "removeRecords(function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1ec4a3ff-017a-46f8-a7b0-0896070f7c76",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User User.Create \"after each\" hook",
                    "timedOut": false,
                    "duration": 2,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "removeRecords(function() {\n    httpmock.cleanAll();\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "652b9240-abb4-4c34-a54f-2a430159b0a7",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should return success output on pass of valid parameters.",
                    "fullTitle": "Enterprise User User.Create Should return success output on pass of valid parameters.",
                    "timedOut": false,
                    "duration": 88,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(registrationBody)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            (res.body.output.email == registrationBody.email &&\n                res.body.output.marketo_lead_id != \"\" &&\n                (res.body.output.authtoken || \"\") != \"\" &&\n                res.body.output.flow_uid != \"\").should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "95eaa711-fe6b-4a9f-ab72-7bfe76bac158",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should add promocode add signup.",
                    "fullTitle": "Enterprise User User.Create Should add promocode add signup.",
                    "timedOut": false,
                    "duration": 97,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\naddPromcode({\n    count: 1,\n    promo_code: \"PROMO_CODE\",\n    domain: \"gmail.com\",\n    redemption_count: 1,\n    redemption_start: moment(new Date()).subtract(1, 'days'),\n    redemption_end: moment(new Date()).add(1, 'days'),\n    allowed_plans: [],\n    default_plan: null,\n    addon_credits: 5,\n    addon_flows: 2,\n    addon_triggers: 2,\n    addon_trial_days: 10,\n    braintree_discount_id: \"\",\n    promo_features_expiration: moment(new Date()).add(10, 'days')\n}, function(error, promoCodes) {\n    commonMock.setSignUpMocks(httpmock, \"enterprise\");\n    var tempRegistrationBody = getImmutable(registrationBody);\n    tempRegistrationBody.promo_code = promoCodes[0].promo_code;\n    api.post(apiURL)\n        .send(tempRegistrationBody)\n        .expect(httpStatus.CREATED)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                res.body.output.subscription.days.should.equal(40);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8b32d7d9-fa65-4323-b4c9-5b10b6ad5520",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should add promocode fatures with default plan.",
                    "fullTitle": "Enterprise User User.Create Should add promocode fatures with default plan.",
                    "timedOut": false,
                    "duration": 94,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.Plan.findOne({ \"uid\": \"fl6f0c5a598b56e5e4e3fbf5\" }, function(error, plan) {\n    var plan_id = null;\n    if (plan) {\n        plan_id = plan._id;\n    }\n    addPromcode({\n        count: 1,\n        promo_code: \"PROMO_CODE\",\n        domain: \"gmail.com\",\n        redemption_count: 1,\n        redemption_start: moment(new Date()).subtract(1, 'days'),\n        redemption_end: moment(new Date()).add(1, 'days'),\n        allowed_plans: [],\n        default_plan: plan_id,\n        addon_credits: 5,\n        addon_flows: 2,\n        addon_triggers: 2,\n        addon_trial_days: 10,\n        braintree_discount_id: \"\",\n        promo_features_expiration: moment(new Date()).add(10, 'days')\n    }, function(error, promoCodes) {\n        commonMock.setSignUpMocks(httpmock, \"enterprise\");\n        var tempRegistrationBody = getImmutable(registrationBody);\n        tempRegistrationBody.promo_code = promoCodes[0].promo_code;\n        api.post(apiURL)\n            .send(tempRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    var userNewFeatures = {};\n                    userNewFeatures.flow_count = res.body.output.user_plan.flow.count;\n                    userNewFeatures.flow_active = res.body.output.user_plan.flow.active;\n                    userNewFeatures.trigger_count = res.body.output.user_plan.trigger.count;\n                    userNewFeatures.days = (res.body.output.user_plan.reimburse || {}).period || 0;\n                    userNewFeatures.credits = (res.body.output.user_plan.reimburse || {}).credits || 0;\n                    (userNewFeatures.credits == 10005 && userNewFeatures.days == 30 &&\n                        userNewFeatures.trigger_count == 12).should.equal(true);\n                    done();\n                }\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2a68626d-6537-4a6d-921b-e1c38c2d7cd2",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should return success output for intercom error output.",
                    "fullTitle": "Enterprise User User.Create Should return success output for intercom error output.",
                    "timedOut": false,
                    "duration": 87,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar service = \"enterprise\";\nvar options = {\n};\ncommonMock.brainTreeCustomerCreate(httpmock, service, {\n    email: options.email,\n    access_token: options.access_token\n});\ncommonMock.brainTreeClientToken(httpmock, service, {\n    email: options.email,\n    access_token: options.access_token\n});\ncommonMock.brainTreeGenerateAuthToken(httpmock, service, {\n    email: options.email,\n    access_token: options.access_token\n});\ncommonMock.intercomUserError(httpmock, service, {\n    email: options.email,\n    access_token: options.access_token,\n    times: 2\n});\ncommonMock.marketoGetToken(httpmock, service, {});\ncommonMock.marketoCreateLead(httpmock, service, {});\napi.post(apiURL)\n    .send(registrationBody)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.email.should.equal(registrationBody.email);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0f83c29b-8d1a-4cfe-b15a-574293208a3b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should return success output if same user with blank user_type exists.",
                    "fullTitle": "Enterprise User User.Create Should return success output if same user with blank user_type exists.",
                    "timedOut": false,
                    "duration": 174,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(registrationBody)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            _models.User.findOneAndUpdate({\n                uid: res.body.output.uid\n            }, {\n                user_type: null\n            }, { new: true }, function(error, user) {\n                commonMock.setSignUpMocks(httpmock, \"enterprise\");\n                api.post(apiURL)\n                    .send(registrationBody)\n                    .expect(httpStatus.CREATED)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            res.body.output.email.should.equal(registrationBody.email);\n                            done();\n                        }\n                    });\n            });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cb0a797f-0000-4485-80e9-1d187fb66e2c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not allowed to create enterprise account, if express account exists.",
                    "fullTitle": "Enterprise User User.Create Should not allowed to create enterprise account, if express account exists.",
                    "timedOut": false,
                    "duration": 2382,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"express\");\napi.post(\"/express/v1/signup\")\n    .send(registrationBody)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            commonMock.setSignUpMocks(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/signup\")\n                .send(registrationBody)\n                .expect(httpStatus.BAD_REQUEST)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        res.body.error.message.should.equal(messageList.EXPRESS_ACCOUNT_ALREADY_EXISTS);\n                        done();\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "87378f18-526e-44ae-bcca-cbadac4b7005",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should allowed to create enterprise account, if other partner account exists.",
                    "fullTitle": "Enterprise User User.Create Should allowed to create enterprise account, if other partner account exists.",
                    "timedOut": false,
                    "duration": 3390,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"express\");\napi.post(\"/express/v1/signup\")\n    .send(registrationBody)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            _models.User.findOneAndUpdate({\n                uid: res.body.output.uid\n            }, {\n                user_type: \"box\"\n            }, {\n                new: true\n            }, function(error, result) {\n                commonMock.setSignUpMocks(httpmock, \"enterprise\");\n                api.post(\"/enterprise/v1/signup\")\n                    .send(registrationBody)\n                    .expect(httpStatus.CREATED)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            res.body.output.email.should.equal(registrationBody.email);\n                            done();\n                        }\n                    });\n            });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "66ca1d90-2797-4154-8c32-1fa624d2f365",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give user already exists error.",
                    "fullTitle": "Enterprise User User.Create Should give user already exists error.",
                    "timedOut": false,
                    "duration": 2345,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.email = \"test.user+1@raweng.com\";\ncommonMock.setSignUpMocks(httpmock, \"enterprise\", {\n    email: tempRegistrationBody.email\n});\napi.post(\"/enterprise/v1/signup\")\n    .send(tempRegistrationBody)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var tempLoginBody = {\n                email: tempRegistrationBody.email,\n                password: tempRegistrationBody.password,\n            };\n            commonMock.setSignUpMocks(httpmock, \"express\", {\n                email: tempRegistrationBody.email\n            });\n            commonMock.flowLogin(httpmock, \"express\", {\n                email: tempRegistrationBody.email\n            });\n            api.post(\"/express/v1/login\")\n                .send(tempLoginBody)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        api.post(\"/enterprise/v1/signup\")\n                            .send(tempRegistrationBody)\n                            .expect(httpStatus.BAD_REQUEST)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    res.body.error.message.should.equal(messageList.USER_ALREADY_EXISTS);\n                                    done();\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f0da8fd8-69f3-41c2-b483-0c16963992f4",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not allowed to create user for invalid password.",
                    "fullTitle": "Enterprise User User.Create Should not allowed to create user for invalid password.",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.password = \"built@12\";\ntempRegistrationBody.password_confirmation = \"built@12\";\napi.post(apiURL)\n    .send(tempRegistrationBody)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValidError = res.body.error.password.message ==\n                messageList.USER_REG_INVALID_PASSWORD;\n            isValidError.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "61391061-214d-4b3c-b848-a0658d2ba99b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get default plan.",
                    "fullTitle": "Enterprise User User.Create Should get default plan.",
                    "timedOut": false,
                    "duration": 89,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(registrationBody)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (res.body.output.plan.length == 1) {\n                var defaultPlan = _.first(_.filter(server.plan.list, function(plan) {\n                    //return (plan || {}).express_plan || false;\n                    return ((plan || {}).plan_type || \"\") == \"enterprise\";\n                })) || {};\n                defaultPlan = utils.skipAttr(convert.getJSON(defaultPlan));\n                isValid = res.body.output.plan[0].uid == defaultPlan.uid;\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d5a37485-36ce-48ca-91eb-bb4a092b0809",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get default attributes.",
                    "fullTitle": "Enterprise User User.Create Should get default attributes.",
                    "timedOut": false,
                    "duration": 90,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(registrationBody)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (res.body.output.plan.length == 1) {\n                isValid = utils.isHaveKeyVals(res.body.output, [\n                        \"first_name\", \"flow_uid\", \"job_title\", \"last_name\", \"locale\",\n                        \"merchantid\", \"payment_set\", \"subscription\"\n                    ]) &&\n                    res.body.output.subscription.days == server.plan.enterprise.TrialPeriod &&\n                    moment(new Date(res.body.output.subscription.start_date)).format(\"YYYY-MM-DD\") ==\n                    moment(new Date()).format(\"YYYY-MM-DD\");\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4176dfee-10f9-4a55-9204-4286364345b2",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give check valid country name.",
                    "fullTitle": "Enterprise User User.Create Should give check valid country name.",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar tmpRegBody = getImmutable(registrationBody);\ntmpRegBody.country = \"ABC_XYZ\";\napi.post(apiURL)\n    .send(tmpRegBody)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "faed3e49-a1c3-4d13-a110-6bdd8ae44c30",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get plan provided trial days.",
                    "fullTitle": "Enterprise User User.Create Should get plan provided trial days.",
                    "timedOut": false,
                    "duration": 91,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\ncreatePlan(0, function(trialPeriodPlan) {\n    var tmpRegBody = getImmutable(registrationBody);\n    tmpRegBody.plan = trialPeriodPlan.name;\n    api.post(apiURL)\n        .send(tmpRegBody)\n        .expect(httpStatus.CREATED)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                var isValid = false;\n                if (res.body.output.plan.length == 1) {\n                    isValid = utils.isHaveKeyVals(res.body.output, [\n                            \"first_name\", \"flow_uid\", \"job_title\", \"last_name\", \"locale\",\n                            \"merchantid\", \"payment_set\", \"subscription\"\n                        ]) &&\n                        res.body.output.subscription.days == 180 &&\n                        moment(new Date(res.body.output.subscription.start_date)).format(\"YYYY-MM-DD\") ==\n                        moment(new Date()).format(\"YYYY-MM-DD\");\n                }\n                isValid.should.equal(true);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "36acf5ec-c2f8-4929-992c-7cb9173811ee",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get enterprise default trial days.",
                    "fullTitle": "Enterprise User User.Create Should get enterprise default trial days.",
                    "timedOut": false,
                    "duration": 91,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\ncreatePlan(1, function(trialPeriodPlan) {\n    var tmpRegBody = getImmutable(registrationBody);\n    tmpRegBody.plan = trialPeriodPlan.name;\n    api.post(apiURL)\n        .send(tmpRegBody)\n        .expect(httpStatus.CREATED)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                var isValid = false;\n                if (res.body.output.plan.length == 1) {\n                    isValid = utils.isHaveKeyVals(res.body.output, [\n                            \"first_name\", \"flow_uid\", \"job_title\", \"last_name\", \"locale\",\n                            \"merchantid\", \"payment_set\", \"subscription\"\n                        ]) &&\n                        res.body.output.subscription.days ==\n                        config.service_types.enterprise.default_trial_days &&\n                        moment(new Date(res.body.output.subscription.start_date)).format(\"YYYY-MM-DD\") ==\n                        moment(new Date()).format(\"YYYY-MM-DD\");\n                }\n                isValid.should.equal(true);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "528250f7-e876-4112-b139-6d4e3e2cb2ce",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get plan provided trial days for days as false.",
                    "fullTitle": "Enterprise User User.Create Should get plan provided trial days for days as false.",
                    "timedOut": false,
                    "duration": 94,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\ncreatePlan(2, function(trialPeriodPlan) {\n    var tmpRegBody = getImmutable(registrationBody);\n    tmpRegBody.plan = trialPeriodPlan.name;\n    api.post(apiURL)\n        .send(tmpRegBody)\n        .expect(httpStatus.CREATED)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                var isValid = false;\n                if (res.body.output.plan.length == 1) {\n                    isValid = utils.isHaveKeyVals(res.body.output, [\n                            \"first_name\", \"flow_uid\", \"job_title\", \"last_name\", \"locale\",\n                            \"merchantid\", \"payment_set\", \"subscription\"\n                        ]) &&\n                        res.body.output.subscription.days == 90 &&\n                        typeof(res.body.output.subscription.start_date) == \"undefined\";\n                }\n                isValid.should.equal(true);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "25e45315-edc9-4aef-82e6-9a4f848bbe7c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get zero trial days for days as false.",
                    "fullTitle": "Enterprise User User.Create Should get zero trial days for days as false.",
                    "timedOut": false,
                    "duration": 90,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\ncreatePlan(3, function(trialPeriodPlan) {\n    var tmpRegBody = getImmutable(registrationBody);\n    tmpRegBody.plan = trialPeriodPlan.name;\n    api.post(apiURL)\n        .send(tmpRegBody)\n        .expect(httpStatus.CREATED)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                var isValid = false;\n                if (res.body.output.plan.length == 1) {\n                    isValid = utils.isHaveKeyVals(res.body.output, [\n                            \"first_name\", \"flow_uid\", \"job_title\", \"last_name\", \"locale\",\n                            \"merchantid\", \"payment_set\", \"subscription\"\n                        ]) &&\n                        res.body.output.subscription.days == 0 &&\n                        typeof(res.body.output.subscription.start_date) == \"undefined\";\n                }\n                isValid.should.equal(true);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d8b7d02e-82b6-4a1f-b8a0-18491504b487",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not copy authtoken from request header.",
                    "fullTitle": "Enterprise User User.Create Should not copy authtoken from request header.",
                    "timedOut": false,
                    "duration": 93,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\napi.post(apiURL)\n    .set('authtoken', \"TEST_TEST\")\n    .send(registrationBody)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.email = registrationBody.email;\n            if (isValid) {\n                api.get(\"/enterprise/v1/user\")\n                    .set('authtoken', \"TEST_TEST\")\n                    .expect(httpStatus.UNAUTHORIZED)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n                            done();\n                        }\n                    });\n            } else {\n                true.should.equal(false);\n                done();\n            }\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f3ee285e-e2b8-4c0f-bd86-323aa9c0d981",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should create braintree user on successfull registration of user.",
                    "fullTitle": "Enterprise User User.Create Should create braintree user on successfull registration of user.",
                    "timedOut": false,
                    "duration": 89,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(registrationBody)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.email.should.equal(registrationBody.email);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "14b1a9f1-efd0-43f9-8485-ccc610bc0d9b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should return error for invalid email.",
                    "fullTitle": "Enterprise User User.Create Should return error for invalid email.",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.email = \"ambermore\";\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(tempRegistrationBody)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValidError = res.body.error.email.message ==\n                messageList.USER_REG_EMAIL_NOT_VALID;\n            isValidError.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "dc726793-60ec-4898-bf7f-ee12891b61b5",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should return error for empty first_name.",
                    "fullTitle": "Enterprise User User.Create Should return error for empty first_name.",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ndelete tempRegistrationBody.first_name;\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(tempRegistrationBody)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValidError = res.body.error.first_name.message ==\n                messageList.USER_REG_FIRST_NAME_EMPTY;\n            isValidError.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b2ee870d-355f-4577-bf12-629653e9e02f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should return error for empty last_name.",
                    "fullTitle": "Enterprise User User.Create Should return error for empty last_name.",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ndelete tempRegistrationBody.last_name;\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(tempRegistrationBody)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValidError = res.body.error.last_name.message ==\n                messageList.USER_REG_LAST_NAME_EMPTY;\n            isValidError.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ff3d5d48-7efc-49d7-a7d8-062ceeeacd8f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should return error for not accepting terms.",
                    "fullTitle": "Enterprise User User.Create Should return error for not accepting terms.",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ndelete tempRegistrationBody.terms;\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(tempRegistrationBody)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValidError = res.body.error.terms.message ==\n                messageList.USER_REG_TERMS_NOT_ACCEPTED;\n            isValidError.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6fdfeaa1-fd1b-47e9-bf1a-d28929c26a2d",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should return error for not providing invalid terms.",
                    "fullTitle": "Enterprise User User.Create Should return error for not providing invalid terms.",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.terms = \"true123\";\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(tempRegistrationBody)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValidError = res.body.error.terms.message ==\n                messageList.USER_REG_TERMS_NOT_ACCEPTED;\n            isValidError.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0b02a3a8-c34b-448c-9ca7-a244ee47c947",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should return error for not passing password.",
                    "fullTitle": "Enterprise User User.Create Should return error for not passing password.",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ndelete tempRegistrationBody.password;\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(tempRegistrationBody)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValidError = res.body.error.password.message ==\n                messageList.USER_REG_INVALID_PASSWORD;\n            isValidError.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f02a139b-3611-4491-8057-40e0abc2c85a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should return error for not passing valid password accordingly to criteria.",
                    "fullTitle": "Enterprise User User.Create Should return error for not passing valid password accordingly to criteria.",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.password = \"raw\";\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(tempRegistrationBody)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValidError = res.body.error.password.message ==\n                messageList.USER_REG_INVALID_PASSWORD;\n            isValidError.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ba7ebe6e-4db0-470b-a4af-f960abf60ced",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should return error for not passing confirm password.",
                    "fullTitle": "Enterprise User User.Create Should return error for not passing confirm password.",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ndelete tempRegistrationBody.password_confirmation;\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(tempRegistrationBody)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValidError = res.body.error.password_confirmation.message ==\n                messageList.USER_REG_MATCHED_CONFIRM_PASSWORD;\n            isValidError.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fdc04210-bdc0-4a5e-8f01-a13060bbb1fa",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should return error for passing different confirm password.",
                    "fullTitle": "Enterprise User User.Create Should return error for passing different confirm password.",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.password_confirmation = \"a\";\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(tempRegistrationBody)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValidError = res.body.error.password_confirmation.message ==\n                messageList.USER_REG_MATCHED_CONFIRM_PASSWORD;\n            isValidError.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b99a5245-4303-4806-9c65-3fca3ee7b306",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Register user should be enterprise user.",
                    "fullTitle": "Enterprise User User.Create Register user should be enterprise user.",
                    "timedOut": false,
                    "duration": 87,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(registrationBody)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.user_type.should.equal(config.service_types.enterprise.name);\n            expect(res.body.output.prod_env).is.not.null\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "dca42fe0-ffe0-49be-82d3-280030b46d0c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should set braintree_customerId.",
                    "fullTitle": "Enterprise User User.Create Should set braintree_customerId.",
                    "timedOut": false,
                    "duration": 89,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(registrationBody)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.braintree_customerId.should.not.empty;\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4cf14450-d565-46b0-8b96-62600bb2c832",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should set merchantid.",
                    "fullTitle": "Enterprise User User.Create Should set merchantid.",
                    "timedOut": false,
                    "duration": 87,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(registrationBody)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.merchantid.should.not.empty;\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "83e1b2ae-d1ed-4cf4-a07d-cb8308ed2908",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not allowed user to register with same email.",
                    "fullTitle": "Enterprise User User.Create Should not allowed user to register with same email.",
                    "timedOut": false,
                    "duration": 97,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(registrationBody)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            commonMock.setSignUpMocks(httpmock, \"enterprise\");\n            api.post(apiURL)\n                .send(registrationBody)\n                .expect(httpStatus.BAD_REQUEST)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        res.body.error.message.should.equal(messageList.USER_ALREADY_EXISTS);\n                        done();\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c2353458-7e8c-43d0-aada-01f91e3cd8e0",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should update profile fields properly.",
                    "fullTitle": "Enterprise User User.Create Should update profile fields properly.",
                    "timedOut": false,
                    "duration": 86,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar jobTitle = \"Tech Architect\";\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.job_title = jobTitle;\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(tempRegistrationBody)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.job_title.should.equal(jobTitle);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "962350e7-251b-4a65-b85b-a16083f9be88",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should return success on valid plan selected.",
                    "fullTitle": "Enterprise User User.Create Should return success on valid plan selected.",
                    "timedOut": false,
                    "duration": 90,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar jobTitle = \"Tech Architect\";\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.plan = \"ciscosparkvip2017\";\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(tempRegistrationBody)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var plan = res.body.output.plan[0] || {};\n            var isValid = (plan.name == tempRegistrationBody.plan ||\n                    plan.braintree_plan == tempRegistrationBody.plan) &&\n                plan.plan_type == \"enterprise\";\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f480974c-f177-4203-bc17-2ff50eed3a4f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should return error on invalid plan selection.",
                    "fullTitle": "Enterprise User User.Create Should return error on invalid plan selection.",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar jobTitle = \"Tech Architect\";\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.plan = \"ABC Plan\";\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(tempRegistrationBody)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.INVALID_PLAN_SELECTED);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7dc36bc8-d80c-4a89-be98-fe5c9cfb9b85",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should set default plan, if plan is not provided.",
                    "fullTitle": "Enterprise User User.Create Should set default plan, if plan is not provided.",
                    "timedOut": false,
                    "duration": 89,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(registrationBody)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var plan = res.body.output.plan[0] || {};\n            var isValid = plan.name == server.plan.enterprise.name &&\n                plan.braintree_plan == server.plan.enterprise.braintree_plan;\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "80478039-0b8e-484b-8fc8-91512706d9f1",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should send welcome email.",
                    "fullTitle": "Enterprise User User.Create Should send welcome email.",
                    "timedOut": false,
                    "duration": 87,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n///global.isTestSuit = false;\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar expectedEmail = {\n    \"to\": \"test.user@raweng.com\",\n    \"from\": \"Built.io Flow Enterprise Support <noreply-flowdev@raweng.com>\",\n    \"title\": \"No Title\",\n    \"subject\": \"Activate Your Account\",\n    \"html\": \"\"\n};\nmockMailer.expectEmail(5, function(sentEmail) {\n    return expectedEmail.to == sentEmail.to &&\n        expectedEmail.from == sentEmail.from &&\n        expectedEmail.title == sentEmail.title &&\n        expectedEmail.subject == sentEmail.subject;\n}, done);\napi.post(apiURL)\n    .send(registrationBody)\n    .end(function(err, res) {\n        done();\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7b75ce0d-9dcf-4084-961a-2a474980538f",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "95eaa711-fe6b-4a9f-ab72-7bfe76bac158",
                  "8b32d7d9-fa65-4323-b4c9-5b10b6ad5520",
                  "2a68626d-6537-4a6d-921b-e1c38c2d7cd2",
                  "0f83c29b-8d1a-4cfe-b15a-574293208a3b",
                  "cb0a797f-0000-4485-80e9-1d187fb66e2c",
                  "87378f18-526e-44ae-bcca-cbadac4b7005",
                  "66ca1d90-2797-4154-8c32-1fa624d2f365",
                  "f0da8fd8-69f3-41c2-b483-0c16963992f4",
                  "61391061-214d-4b3c-b848-a0658d2ba99b",
                  "d5a37485-36ce-48ca-91eb-bb4a092b0809",
                  "4176dfee-10f9-4a55-9204-4286364345b2",
                  "faed3e49-a1c3-4d13-a110-6bdd8ae44c30",
                  "36acf5ec-c2f8-4929-992c-7cb9173811ee",
                  "528250f7-e876-4112-b139-6d4e3e2cb2ce",
                  "25e45315-edc9-4aef-82e6-9a4f848bbe7c",
                  "d8b7d02e-82b6-4a1f-b8a0-18491504b487",
                  "f3ee285e-e2b8-4c0f-bd86-323aa9c0d981",
                  "14b1a9f1-efd0-43f9-8485-ccc610bc0d9b",
                  "dc726793-60ec-4898-bf7f-ee12891b61b5",
                  "b2ee870d-355f-4577-bf12-629653e9e02f",
                  "ff3d5d48-7efc-49d7-a7d8-062ceeeacd8f",
                  "6fdfeaa1-fd1b-47e9-bf1a-d28929c26a2d",
                  "0b02a3a8-c34b-448c-9ca7-a244ee47c947",
                  "f02a139b-3611-4491-8057-40e0abc2c85a",
                  "ba7ebe6e-4db0-470b-a4af-f960abf60ced",
                  "fdc04210-bdc0-4a5e-8f01-a13060bbb1fa",
                  "b99a5245-4303-4806-9c65-3fca3ee7b306",
                  "dca42fe0-ffe0-49be-82d3-280030b46d0c",
                  "4cf14450-d565-46b0-8b96-62600bb2c832",
                  "83e1b2ae-d1ed-4cf4-a07d-cb8308ed2908",
                  "c2353458-7e8c-43d0-aada-01f91e3cd8e0",
                  "962350e7-251b-4a65-b85b-a16083f9be88",
                  "f480974c-f177-4203-bc17-2ff50eed3a4f",
                  "7dc36bc8-d80c-4a89-be98-fe5c9cfb9b85",
                  "80478039-0b8e-484b-8fc8-91512706d9f1",
                  "7b75ce0d-9dcf-4084-961a-2a474980538f"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 10153,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "1911b72e-13bb-47c2-8b03-a9cfcb129f73",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\users\\creditOverLimitMail.enterprise.js",
        "file": "\\controllers\\test\\users\\creditOverLimitMail.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "2993b393-45c4-49e0-b791-858e8a19d2b0",
            "title": "User",
            "fullFile": "C:\\work\\api\\controllers\\test\\users\\creditOverLimitMail.enterprise.js",
            "file": "\\controllers\\test\\users\\creditOverLimitMail.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "157fffb0-756e-405f-9703-9d604c7ce42c",
                "title": "User.creditOverLimitMail",
                "fullFile": "C:\\work\\api\\controllers\\test\\users\\creditOverLimitMail.enterprise.js",
                "file": "\\controllers\\test\\users\\creditOverLimitMail.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.creditOverLimitMail \"before each\" hook",
                    "timedOut": false,
                    "duration": 89,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nclearRecords(function() {\n    _models.User.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n        _models.Mail.remove({ $or: [{ to: new RegExp('^test.user+', \"i\") }, { to: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n            _models.Authy.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n                commonMock.setSignUpMocks(httpmock, \"enterprise\");\n                api.post(\"/enterprise/v1/signup\")\n                    .send(registrationBody)\n                    .expect(httpStatus.CREATED)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            authToken = res.body.output.authtoken;\n                            _id = res.body.output._id;\n                            uid = res.body.output.uid;\n                            apiURL = apiURL.replace(\":uid\", uid);\n                            done();\n                        }\n                    });\n            });\n        });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "423cd428-03de-4077-b865-4a2b0011d994",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User User.creditOverLimitMail \"after each\" hook",
                    "timedOut": false,
                    "duration": 1,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "056c8e38-9e93-4244-9133-e12a0b9851a3",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should process credit over limit.",
                    "fullTitle": "Enterprise User User.creditOverLimitMail Should process credit over limit.",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .send({\n        user_uid: uid,\n        percent_used: 90\n    })\n    .set(\"ui_admin_key\", config.UI_ADMIN_KEY)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.message == \"done\";\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e399b111-3c6c-4e46-8b23-22eb244361c4",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should process credit over limit for organizations.",
                    "fullTitle": "Enterprise User User.creditOverLimitMail Should process credit over limit for organizations.",
                    "timedOut": false,
                    "duration": 589,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncreateOrgPlans(function() {\n    createOrg({\n        done: done\n    }, function(org) {\n        var email = \"test.user+1@raweng.com\";\n        fetchRoles({\n            done: done,\n            org_uid: org.uid\n        }, function(res) {\n            inviteUsers({\n                roles: res.body.output.objects,\n                user_uid: \"\",\n                org_uid: org.uid\n            }, function() {\n                api.post(apiURL)\n                    .send({\n                        user_uid: org.org_account.uid,\n                        percent_used: 90\n                    })\n                    .set(\"ui_admin_key\", config.UI_ADMIN_KEY)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            var isValid = res.body.message == \"done\";\n                            isValid.should.equal(true);\n                            done();\n                        }\n                    });\n            });\n        });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "176b8d59-6b46-4dcf-80f1-4666797b2ae3",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should skip credit over limit.",
                    "fullTitle": "Enterprise User User.creditOverLimitMail Should skip credit over limit.",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.findOneAndUpdate({\n        \"uid\": uid\n    }, {\n        credit_limit_email: true\n    },\n    function(err, updatedUser) {\n        api.post(apiURL)\n            .send({\n                user_uid: uid,\n                percent_used: 90\n            })\n            .set(\"ui_admin_key\", config.UI_ADMIN_KEY)\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    var isValid = res.body.message == \"skipped\";\n                    isValid.should.equal(true);\n                    done();\n                }\n            });\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4c950297-1c06-44c3-b0a1-a798760896de",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "e399b111-3c6c-4e46-8b23-22eb244361c4",
                  "176b8d59-6b46-4dcf-80f1-4666797b2ae3",
                  "4c950297-1c06-44c3-b0a1-a798760896de"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 607,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "4904faa9-4e99-41fc-a669-1911fe4ad806",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\users\\disableTwoFA.enterprise.js",
        "file": "\\controllers\\test\\users\\disableTwoFA.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "8ced368d-5301-487b-8e04-ae3fe3c7a9c5",
            "title": "User",
            "fullFile": "C:\\work\\api\\controllers\\test\\users\\disableTwoFA.enterprise.js",
            "file": "\\controllers\\test\\users\\disableTwoFA.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "e3936b3e-18eb-4535-8cc1-ab76ec78212b",
                "title": "User.disableTwoFA",
                "fullFile": "C:\\work\\api\\controllers\\test\\users\\disableTwoFA.enterprise.js",
                "file": "\\controllers\\test\\users\\disableTwoFA.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.disableTwoFA \"before each\" hook",
                    "timedOut": false,
                    "duration": 89,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({ deleted_at: null }, function(error, user) {\n    _models.Mail.remove({ deleted_at: null }, function(error, user) {\n        _models.Authy.remove({ deleted_at: null }, function(error, user) {\n            commonMock.setSignUpMocks(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/signup\")\n                .send(registrationBody)\n                .expect(httpStatus.CREATED)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        authToken = res.body.output.authtoken;\n                        _id = res.body.output._id;\n                        done();\n                    }\n                });\n        });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9fce9a4b-d8ae-4e73-a7e1-55d69c695ea8",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User User.disableTwoFA \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "dabcd45c-cb5b-4509-85aa-8b89edb8711d",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should disable twofa.",
                    "fullTitle": "Enterprise User User.disableTwoFA Should disable twofa.",
                    "timedOut": false,
                    "duration": 74,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.authy_number = \"9619982150\";\ntempRegistrationBody.country_code = \"91\";\ndelete tempRegistrationBody.password;\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\napi.put(\"/enterprise/v1/user\")\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var authy_userId = res.body.output.authy_user_uid;\n            commonMock.authySMSVerification(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/authy/sms\")\n                .send({\n                    authy_id: authy_userId\n                })\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                        api.post(\"/enterprise/v1/authy/verifyotp\")\n                            .send({\n                                authy_user_uid: authy_userId,\n                                token: otpBody.token,\n                                option_selected: \"otp\"\n                            })\n                            .set('authtoken', authToken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    var enable_twofa = res.body.output.enable_twofa;\n                                    if (enable_twofa == \"verified\") {\n                                        api.post(apiURL)\n                                            .send({})\n                                            .set('authtoken', authToken)\n                                            .expect(httpStatus.OK)\n                                            .end(function(err, res) {\n                                                if (err) {\n                                                    done(err);\n                                                } else {\n                                                    var isValid =\n                                                        res.body.output.enable_twofa == \"disable\" &&\n                                                        res.body.output.authy_user_uid == \"\" &&\n                                                        res.body.output.is_twofa_sms_enabled == false;\n                                                    isValid.should.equal(true);\n                                                    done();\n                                                }\n                                            });\n                                    } else {\n                                        true.should.equal(false);\n                                    }\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "27afa4bc-5fc4-4f1e-9ea9-625f4d39371d",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get default plan for disable twofa.",
                    "fullTitle": "Enterprise User User.disableTwoFA Should get default plan for disable twofa.",
                    "timedOut": false,
                    "duration": 78,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.authy_number = \"9619982150\";\ntempRegistrationBody.country_code = \"91\";\ndelete tempRegistrationBody.password;\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\napi.put(\"/enterprise/v1/user\")\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var authy_userId = res.body.output.authy_user_uid;\n            commonMock.authySMSVerification(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/authy/sms\")\n                .send({\n                    authy_id: authy_userId\n                })\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                        api.post(\"/enterprise/v1/authy/verifyotp\")\n                            .send({\n                                authy_user_uid: authy_userId,\n                                token: otpBody.token,\n                                option_selected: \"otp\"\n                            })\n                            .set('authtoken', authToken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    var enable_twofa = res.body.output.enable_twofa;\n                                    if (enable_twofa == \"verified\") {\n                                        api.post(apiURL)\n                                            .send({})\n                                            .set('authtoken', authToken)\n                                            .expect(httpStatus.OK)\n                                            .end(function(err, res) {\n                                                if (err) {\n                                                    done(err);\n                                                } else {\n                                                    var isValid = false;\n                                                    if (res.body.output.plan.length == 1) {\n                                                        var defaultPlan = _.first(_.filter(server.plan.list, function(plan) {\n                                                            //return (plan || {}).enterprise_plan || false;\n                                                            return ((plan || {}).plan_type || \"\") == \"enterprise\";\n                                                        })) || {};\n                                                        defaultPlan = utils.skipAttr(convert.getJSON(defaultPlan));\n                                                        isValid = res.body.output.plan[0].uid == defaultPlan.uid;\n                                                    }\n                                                    isValid.should.equal(true);\n                                                    done();\n                                                }\n                                            });\n                                    } else {\n                                        true.should.equal(false);\n                                    }\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "90dc6cb7-eb8d-49e7-83bf-a7e6327553ad",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get default attributes for disable twofa.",
                    "fullTitle": "Enterprise User User.disableTwoFA Should get default attributes for disable twofa.",
                    "timedOut": false,
                    "duration": 78,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.authy_number = \"9619982150\";\ntempRegistrationBody.country_code = \"91\";\ndelete tempRegistrationBody.password;\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\napi.put(\"/enterprise/v1/user\")\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var authy_userId = res.body.output.authy_user_uid;\n            commonMock.authySMSVerification(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/authy/sms\")\n                .send({\n                    authy_id: authy_userId\n                })\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                        api.post(\"/enterprise/v1/authy/verifyotp\")\n                            .send({\n                                authy_user_uid: authy_userId,\n                                token: otpBody.token,\n                                option_selected: \"otp\"\n                            })\n                            .set('authtoken', authToken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    var enable_twofa = res.body.output.enable_twofa;\n                                    if (enable_twofa == \"verified\") {\n                                        api.post(apiURL)\n                                            .send({})\n                                            .set('authtoken', authToken)\n                                            .expect(httpStatus.OK)\n                                            .end(function(err, res) {\n                                                if (err) {\n                                                    done(err);\n                                                } else {\n                                                    var isValid = false;\n                                                    if (res.body.output.plan.length == 1) {\n                                                        isValid = utils.isHaveKeyVals(res.body.output, [\n                                                                \"first_name\", \"flow_uid\", \"job_title\", \"last_name\", \"locale\",\n                                                                \"merchantid\", \"payment_set\", \"subscription\"\n                                                            ]) &&\n                                                            res.body.output.subscription.days == server.plan.enterprise.TrialPeriod &&\n                                                            moment(new Date(res.body.output.subscription.start_date)).format(\"YYYY-MM-DD\") ==\n                                                            moment(new Date()).format(\"YYYY-MM-DD\");\n                                                    }\n                                                    isValid.should.equal(true);\n                                                    done();\n                                                }\n                                            });\n                                    } else {\n                                        true.should.equal(false);\n                                    }\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "11c3dcd7-ce53-419a-8d77-db5b60eaaf16",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should disable twofa for google login.",
                    "fullTitle": "Enterprise User User.disableTwoFA Should disable twofa for google login.",
                    "timedOut": false,
                    "duration": 111,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\ncommonMock.googleLogin(httpmock, \"enterprise\");\napi.post(\"/enterprise/v1/login/google\")\n    .send(loginBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            authToken = res.body.output.authtoken;\n            _id = res.body.output._id;\n            var tempRegistrationBody = global.getImmutable(registrationBody);\n            tempRegistrationBody.authy_number = \"9619982150\";\n            tempRegistrationBody.country_code = \"91\";\n            delete tempRegistrationBody.password;\n            commonMock.authyNumberChange(httpmock, \"enterprise\");\n            commonMock.authyDelete(httpmock, \"enterprise\");\n            api.put(\"/enterprise/v1/user\")\n                .send(tempRegistrationBody)\n                .set('authtoken', authToken)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        var authy_userId = res.body.output.authy_user_uid;\n                        commonMock.authySMSVerification(httpmock, \"enterprise\");\n                        api.post(\"/enterprise/v1/authy/sms\")\n                            .send({\n                                authy_id: authy_userId\n                            })\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                                    api.post(\"/enterprise/v1/authy/verifyotp\")\n                                        .send({\n                                            authy_user_uid: authy_userId,\n                                            token: otpBody.token,\n                                            option_selected: \"otp\"\n                                        })\n                                        .set('authtoken', authToken)\n                                        .expect(httpStatus.OK)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                var enable_twofa = res.body.output.enable_twofa;\n                                                if (enable_twofa == \"verified\") {\n                                                    api.post(apiURL)\n                                                        .send({})\n                                                        .set('authtoken', authToken)\n                                                        .expect(httpStatus.OK)\n                                                        .end(function(err, res) {\n                                                            if (err) {\n                                                                done(err);\n                                                            } else {\n                                                                var isValid =\n                                                                    res.body.output.enable_twofa == \"disable\" &&\n                                                                    res.body.output.authy_user_uid == \"\" &&\n                                                                    res.body.output.is_twofa_sms_enabled == false;\n                                                                isValid.should.equal(true);\n                                                                done();\n                                                            }\n                                                        });\n                                                } else {\n                                                    true.should.equal(false);\n                                                }\n                                            }\n                                        });\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2614d64b-e7b4-4b0b-ad7f-415cd84a3917",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get default plan for google login.",
                    "fullTitle": "Enterprise User User.disableTwoFA Should get default plan for google login.",
                    "timedOut": false,
                    "duration": 202,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\ncommonMock.googleLogin(httpmock, \"enterprise\");\napi.post(\"/enterprise/v1/login/google\")\n    .send(loginBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            authToken = res.body.output.authtoken;\n            _id = res.body.output._id;\n            var tempRegistrationBody = global.getImmutable(registrationBody);\n            tempRegistrationBody.authy_number = \"9619982150\";\n            tempRegistrationBody.country_code = \"91\";\n            delete tempRegistrationBody.password;\n            commonMock.authyNumberChange(httpmock, \"enterprise\");\n            commonMock.authyDelete(httpmock, \"enterprise\");\n            api.put(\"/enterprise/v1/user\")\n                .send(tempRegistrationBody)\n                .set('authtoken', authToken)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        var authy_userId = res.body.output.authy_user_uid;\n                        commonMock.authySMSVerification(httpmock, \"enterprise\");\n                        api.post(\"/enterprise/v1/authy/sms\")\n                            .send({\n                                authy_id: authy_userId\n                            })\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                                    api.post(\"/enterprise/v1/authy/verifyotp\")\n                                        .send({\n                                            authy_user_uid: authy_userId,\n                                            token: otpBody.token,\n                                            option_selected: \"otp\"\n                                        })\n                                        .set('authtoken', authToken)\n                                        .expect(httpStatus.OK)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                var enable_twofa = res.body.output.enable_twofa;\n                                                if (enable_twofa == \"verified\") {\n                                                    api.post(apiURL)\n                                                        .send({})\n                                                        .set('authtoken', authToken)\n                                                        .expect(httpStatus.OK)\n                                                        .end(function(err, res) {\n                                                            if (err) {\n                                                                done(err);\n                                                            } else {\n                                                                var isValid = false;\n                                                                if (res.body.output.plan.length == 1) {\n                                                                    var defaultPlan = _.first(_.filter(server.plan.list, function(plan) {\n                                                                        //return (plan || {}).enterprise_plan || false;\n                                                                        return ((plan || {}).plan_type || \"\") == \"enterprise\";\n                                                                    })) || {};\n                                                                    defaultPlan = utils.skipAttr(convert.getJSON(defaultPlan));\n                                                                    isValid = res.body.output.plan[0].uid == defaultPlan.uid;\n                                                                }\n                                                                isValid.should.equal(true);\n                                                                done();\n                                                            }\n                                                        });\n                                                } else {\n                                                    true.should.equal(false);\n                                                }\n                                            }\n                                        });\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "dedd2c2f-79c6-4adc-8e7d-8086d82ab6f2",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get default attributes for google login.",
                    "fullTitle": "Enterprise User User.disableTwoFA Should get default attributes for google login.",
                    "timedOut": false,
                    "duration": 116,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\ncommonMock.googleLogin(httpmock, \"enterprise\");\napi.post(\"/enterprise/v1/login/google\")\n    .send(loginBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            authToken = res.body.output.authtoken;\n            _id = res.body.output._id;\n            var tempRegistrationBody = global.getImmutable(registrationBody);\n            tempRegistrationBody.authy_number = \"9619982150\";\n            tempRegistrationBody.country_code = \"91\";\n            delete tempRegistrationBody.password;\n            commonMock.authyNumberChange(httpmock, \"enterprise\");\n            commonMock.authyDelete(httpmock, \"enterprise\");\n            api.put(\"/enterprise/v1/user\")\n                .send(tempRegistrationBody)\n                .set('authtoken', authToken)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        var authy_userId = res.body.output.authy_user_uid;\n                        commonMock.authySMSVerification(httpmock, \"enterprise\");\n                        api.post(\"/enterprise/v1/authy/sms\")\n                            .send({\n                                authy_id: authy_userId\n                            })\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                                    api.post(\"/enterprise/v1/authy/verifyotp\")\n                                        .send({\n                                            authy_user_uid: authy_userId,\n                                            token: otpBody.token,\n                                            option_selected: \"otp\"\n                                        })\n                                        .set('authtoken', authToken)\n                                        .expect(httpStatus.OK)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                var enable_twofa = res.body.output.enable_twofa;\n                                                if (enable_twofa == \"verified\") {\n                                                    api.post(apiURL)\n                                                        .send({})\n                                                        .set('authtoken', authToken)\n                                                        .expect(httpStatus.OK)\n                                                        .end(function(err, res) {\n                                                            if (err) {\n                                                                done(err);\n                                                            } else {\n                                                                var isValid = false;\n                                                                if (res.body.output.plan.length == 1) {\n                                                                    isValid = utils.isHaveKeyVals(res.body.output, [\n                                                                            \"first_name\", \"flow_uid\", \"job_title\", \"last_name\", \"locale\",\n                                                                            \"merchantid\", \"payment_set\", \"subscription\"\n                                                                        ]) &&\n                                                                        res.body.output.subscription.days == server.plan.enterprise.TrialPeriod &&\n                                                                        moment(new Date(res.body.output.subscription.start_date)).format(\"YYYY-MM-DD\") ==\n                                                                        moment(new Date()).format(\"YYYY-MM-DD\");\n                                                                }\n                                                                isValid.should.equal(true);\n                                                                done();\n                                                            }\n                                                        });\n                                                } else {\n                                                    true.should.equal(false);\n                                                }\n                                            }\n                                        });\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ccb6ceaa-ec60-4942-adac-3369d66e8801",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise User User.disableTwoFA Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .send({})\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "72b21138-07ae-4b54-9535-9e828b0ba708",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "27afa4bc-5fc4-4f1e-9ea9-625f4d39371d",
                  "90dc6cb7-eb8d-49e7-83bf-a7e6327553ad",
                  "11c3dcd7-ce53-419a-8d77-db5b60eaaf16",
                  "2614d64b-e7b4-4b0b-ad7f-415cd84a3917",
                  "dedd2c2f-79c6-4adc-8e7d-8086d82ab6f2",
                  "ccb6ceaa-ec60-4942-adac-3369d66e8801",
                  "72b21138-07ae-4b54-9535-9e828b0ba708"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 661,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "9c8a7695-ccee-46d8-a676-e4894fe6bb83",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\users\\forceSuspendUser.enterprise.js",
        "file": "\\controllers\\test\\users\\forceSuspendUser.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "1c28f49c-03ac-4780-9c9f-1926deececce",
            "title": "User",
            "fullFile": "C:\\work\\api\\controllers\\test\\users\\forceSuspendUser.enterprise.js",
            "file": "\\controllers\\test\\users\\forceSuspendUser.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "ec0e3386-5c0d-4aa6-ad37-d5ef253cb2e7",
                "title": "User.forceSuspendUser",
                "fullFile": "C:\\work\\api\\controllers\\test\\users\\forceSuspendUser.enterprise.js",
                "file": "\\controllers\\test\\users\\forceSuspendUser.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.forceSuspendUser \"before each\" hook",
                    "timedOut": false,
                    "duration": 89,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n    _models.Mail.remove({ $or: [{ to: new RegExp('^test.user+', \"i\") }, { to: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n        commonMock.setSignUpMocks(httpmock, \"enterprise\");\n        api.post(\"/enterprise/v1/signup\")\n            .send(registrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    authToken = res.body.output.authtoken;\n                    token = res.body.output.activation_token;\n                    _id = res.body.output._id;\n                    uid = res.body.output.uid;\n                    done();\n                }\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ef22d9b6-9b53-4d82-bece-1b8e46f083a8",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User User.forceSuspendUser \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "eacdad40-0283-4762-a1b1-a192518f5fec",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should suspend user account.",
                    "fullTitle": "Enterprise User User.forceSuspendUser Should suspend user account.",
                    "timedOut": false,
                    "duration": 17,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('authtoken', authToken)\n    .send({})\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.force_suspend.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cac5853d-f10a-4310-a8f3-4c1c1982389c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise User User.forceSuspendUser Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .send({})\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "59e6b0f9-ce0f-4425-b39f-92f2c6622447",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "cac5853d-f10a-4310-a8f3-4c1c1982389c",
                  "59e6b0f9-ce0f-4425-b39f-92f2c6622447"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 21,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "dd2c4056-4802-429f-b453-bce74fd5e3cf",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\users\\forgotPassword.enterprise.js",
        "file": "\\controllers\\test\\users\\forgotPassword.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "050158e5-f2ce-4af4-a534-da24f6e2c757",
            "title": "User",
            "fullFile": "C:\\work\\api\\controllers\\test\\users\\forgotPassword.enterprise.js",
            "file": "\\controllers\\test\\users\\forgotPassword.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "06d87e79-af12-49e1-844b-ba5e0e911cfd",
                "title": "User.forgotPassword",
                "fullFile": "C:\\work\\api\\controllers\\test\\users\\forgotPassword.enterprise.js",
                "file": "\\controllers\\test\\users\\forgotPassword.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.forgotPassword \"before each\" hook",
                    "timedOut": false,
                    "duration": 89,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n    _models.Mail.remove({ $or: [{ to: new RegExp('^test.user+', \"i\") }, { to: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n        commonMock.setSignUpMocks(httpmock, \"enterprise\");\n        api.post(\"/enterprise/v1/signup\")\n            .send(registrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    authToken = res.body.output.authtoken;\n                    _id = res.body.output._id;\n                    activationToken = res.body.output.activation_token;\n                    uid = res.body.output.uid;\n                    done();\n                }\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "23d59418-edd7-42e9-a1aa-33105863f246",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User User.forgotPassword \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "48b3ec7f-7b80-4003-9fde-d6ff5144ffa3",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should send forgot password email.",
                    "fullTitle": "Enterprise User User.forgotPassword Should send forgot password email.",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(\"/enterprise/v1/user/activate\")\n    .send({\n        user_uid: uid,\n        token: activationToken\n    })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            commonMock.captchaVerification(httpmock, \"enterprise\");\n            api.post(apiURL)\n                .send({\n                    email: registrationBody.email,\n                    captcha_code: \"03AHJ_Vuu_lnKuNq-eLmTlTmWe6Aozhp6z0uLva1JGwwIKCkGu0x3S-8qFAHtZxL3TuJatYJnGOxta3250lueM1wWWb89Lk1zNeobupy-bg579yiGTwr4_IHsN_eWANc40w_EToNjf4mmeKxLbspOGq9YEZlWFb6d5pNnT--ImOkvcoiqwrmKjQIKPEoJBlXbuTL2NfNrrEPjhCpnmSQR6z3CRD1G-V3sVFeBbzHjoatg2wpFgnS5ikf42hNcq6JP0TwhQ86pwCqZ86JKm2UQe1ISxQUOckNXx6dG9NuCjypFmEsvOaL7qrhmcbp77hfzNamTEt1GVpNBlpKMtND6FDn8X05Ni3xoZDDhjZzRvlJQWf9ygHjsVByEEQv5GU9l1f4CI1gPbulwHQFN3d_8S0mbpBOfI-YQ_fE3lSWp0dDA2mxdDXOVi7tQgIBZhRFPAa8Jt9R9_TaSch6Ygq6qrkkIuekVIs6jSsLsLavpKZgtUkLJcf1RaUUZharASNuMIt3_s9EbWM42WCs8aMLWPo8qMu4pKa6cS5Bd3D-TFTBmtADFpOvDHjqfXqX_PemEg_ZVEXUYYGQ3YhJhESe8OCuxWqcs84Jzyln7-BIxYrMEDOgejqPrUc8nOU9F2o-MtjWohx_8ci0-078Fg6UGPWUGqZ2ttrvK9mIkFi1iQVhTcThPEFH2SoG993B3YqmEagHtBwOid2pNzYY_hAffXSSvURdJstiZi7qV_ZNxnJ9CSlljI8erdb4cPSrIY8XIEahiC-q3ODrATTXfkv5iGXeYI7_rDO0DmH3OS5g9rmFZb4RTows9Gmp8xOA91_faynmaM0009rOjYx0pxAqZZECTJu20Qyvbu0_d-dd7n7vMPHvoEMqbXQhXQO62zBK-h3PRRWQlLdFgwj498SgMsFkbo1SBRi1943w\"\n                })\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        res.body.output.message.should.equal(messageList.USER_FP_USER_SENT_MAIL);\n                        done();\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5502ae7b-ec39-4b29-8af6-7cd499115044",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error for account activation.",
                    "fullTitle": "Enterprise User User.forgotPassword Should give error for account activation.",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.captchaVerification(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send({\n        email: registrationBody.email,\n        captcha_code: \"03AHJ_Vuu_lnKuNq-eLmTlTmWe6Aozhp6z0uLva1JGwwIKCkGu0x3S-8qFAHtZxL3TuJatYJnGOxta3250lueM1wWWb89Lk1zNeobupy-bg579yiGTwr4_IHsN_eWANc40w_EToNjf4mmeKxLbspOGq9YEZlWFb6d5pNnT--ImOkvcoiqwrmKjQIKPEoJBlXbuTL2NfNrrEPjhCpnmSQR6z3CRD1G-V3sVFeBbzHjoatg2wpFgnS5ikf42hNcq6JP0TwhQ86pwCqZ86JKm2UQe1ISxQUOckNXx6dG9NuCjypFmEsvOaL7qrhmcbp77hfzNamTEt1GVpNBlpKMtND6FDn8X05Ni3xoZDDhjZzRvlJQWf9ygHjsVByEEQv5GU9l1f4CI1gPbulwHQFN3d_8S0mbpBOfI-YQ_fE3lSWp0dDA2mxdDXOVi7tQgIBZhRFPAa8Jt9R9_TaSch6Ygq6qrkkIuekVIs6jSsLsLavpKZgtUkLJcf1RaUUZharASNuMIt3_s9EbWM42WCs8aMLWPo8qMu4pKa6cS5Bd3D-TFTBmtADFpOvDHjqfXqX_PemEg_ZVEXUYYGQ3YhJhESe8OCuxWqcs84Jzyln7-BIxYrMEDOgejqPrUc8nOU9F2o-MtjWohx_8ci0-078Fg6UGPWUGqZ2ttrvK9mIkFi1iQVhTcThPEFH2SoG993B3YqmEagHtBwOid2pNzYY_hAffXSSvURdJstiZi7qV_ZNxnJ9CSlljI8erdb4cPSrIY8XIEahiC-q3ODrATTXfkv5iGXeYI7_rDO0DmH3OS5g9rmFZb4RTows9Gmp8xOA91_faynmaM0009rOjYx0pxAqZZECTJu20Qyvbu0_d-dd7n7vMPHvoEMqbXQhXQO62zBK-h3PRRWQlLdFgwj498SgMsFkbo1SBRi1943w\"\n    })\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.USER_FP_ACTIVATE_YOUR_ACCOUNT);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5544fc75-048d-4799-8ae7-96d452c7b064",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as email not register.",
                    "fullTitle": "Enterprise User User.forgotPassword Should give error as email not register.",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.captchaVerification(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send({\n        email: \"test.user.example.unit.test@example.com\",\n        captcha_code: \"03AHJ_Vuu_lnKuNq-eLmTlTmWe6Aozhp6z0uLva1JGwwIKCkGu0x3S-8qFAHtZxL3TuJatYJnGOxta3250lueM1wWWb89Lk1zNeobupy-bg579yiGTwr4_IHsN_eWANc40w_EToNjf4mmeKxLbspOGq9YEZlWFb6d5pNnT--ImOkvcoiqwrmKjQIKPEoJBlXbuTL2NfNrrEPjhCpnmSQR6z3CRD1G-V3sVFeBbzHjoatg2wpFgnS5ikf42hNcq6JP0TwhQ86pwCqZ86JKm2UQe1ISxQUOckNXx6dG9NuCjypFmEsvOaL7qrhmcbp77hfzNamTEt1GVpNBlpKMtND6FDn8X05Ni3xoZDDhjZzRvlJQWf9ygHjsVByEEQv5GU9l1f4CI1gPbulwHQFN3d_8S0mbpBOfI-YQ_fE3lSWp0dDA2mxdDXOVi7tQgIBZhRFPAa8Jt9R9_TaSch6Ygq6qrkkIuekVIs6jSsLsLavpKZgtUkLJcf1RaUUZharASNuMIt3_s9EbWM42WCs8aMLWPo8qMu4pKa6cS5Bd3D-TFTBmtADFpOvDHjqfXqX_PemEg_ZVEXUYYGQ3YhJhESe8OCuxWqcs84Jzyln7-BIxYrMEDOgejqPrUc8nOU9F2o-MtjWohx_8ci0-078Fg6UGPWUGqZ2ttrvK9mIkFi1iQVhTcThPEFH2SoG993B3YqmEagHtBwOid2pNzYY_hAffXSSvURdJstiZi7qV_ZNxnJ9CSlljI8erdb4cPSrIY8XIEahiC-q3ODrATTXfkv5iGXeYI7_rDO0DmH3OS5g9rmFZb4RTows9Gmp8xOA91_faynmaM0009rOjYx0pxAqZZECTJu20Qyvbu0_d-dd7n7vMPHvoEMqbXQhXQO62zBK-h3PRRWQlLdFgwj498SgMsFkbo1SBRi1943w\"\n    })\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.USER_FP_USER_NOT_REGISTER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4b12dfa4-ba81-4f66-845e-a9643cac8db8",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should allowed to raised forgot password request, when user is locked.",
                    "fullTitle": "Enterprise User User.forgotPassword Should allowed to raised forgot password request, when user is locked.",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.findOneAndUpdate({ \"uid\": uid }, {\n    failed_login_count: 7\n}, { new: true }, function(err, user) {\n    api.post(\"/enterprise/v1/user/activate\")\n        .send({\n            user_uid: uid,\n            token: activationToken\n        })\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                commonMock.captchaVerification(httpmock, \"enterprise\");\n                api.post(apiURL)\n                    .send({\n                        email: registrationBody.email,\n                        captcha_code: \"03AHJ_Vuu_lnKuNq-eLmTlTmWe6Aozhp6z0uLva1JGwwIKCkGu0x3S-8qFAHtZxL3TuJatYJnGOxta3250lueM1wWWb89Lk1zNeobupy-bg579yiGTwr4_IHsN_eWANc40w_EToNjf4mmeKxLbspOGq9YEZlWFb6d5pNnT--ImOkvcoiqwrmKjQIKPEoJBlXbuTL2NfNrrEPjhCpnmSQR6z3CRD1G-V3sVFeBbzHjoatg2wpFgnS5ikf42hNcq6JP0TwhQ86pwCqZ86JKm2UQe1ISxQUOckNXx6dG9NuCjypFmEsvOaL7qrhmcbp77hfzNamTEt1GVpNBlpKMtND6FDn8X05Ni3xoZDDhjZzRvlJQWf9ygHjsVByEEQv5GU9l1f4CI1gPbulwHQFN3d_8S0mbpBOfI-YQ_fE3lSWp0dDA2mxdDXOVi7tQgIBZhRFPAa8Jt9R9_TaSch6Ygq6qrkkIuekVIs6jSsLsLavpKZgtUkLJcf1RaUUZharASNuMIt3_s9EbWM42WCs8aMLWPo8qMu4pKa6cS5Bd3D-TFTBmtADFpOvDHjqfXqX_PemEg_ZVEXUYYGQ3YhJhESe8OCuxWqcs84Jzyln7-BIxYrMEDOgejqPrUc8nOU9F2o-MtjWohx_8ci0-078Fg6UGPWUGqZ2ttrvK9mIkFi1iQVhTcThPEFH2SoG993B3YqmEagHtBwOid2pNzYY_hAffXSSvURdJstiZi7qV_ZNxnJ9CSlljI8erdb4cPSrIY8XIEahiC-q3ODrATTXfkv5iGXeYI7_rDO0DmH3OS5g9rmFZb4RTows9Gmp8xOA91_faynmaM0009rOjYx0pxAqZZECTJu20Qyvbu0_d-dd7n7vMPHvoEMqbXQhXQO62zBK-h3PRRWQlLdFgwj498SgMsFkbo1SBRi1943w\"\n                    })\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            res.body.output.message.should.equal(messageList.USER_FP_USER_SENT_MAIL);\n                            done();\n                        }\n                    });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c4da2010-3e75-4b86-b5e6-6c4059dc3221",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should allowed to raised forgot password request, for 5 times invalid login attempt user.",
                    "fullTitle": "Enterprise User User.forgotPassword Should allowed to raised forgot password request, for 5 times invalid login attempt user.",
                    "timedOut": false,
                    "duration": 411,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempBody = getImmutable(loginBody);\ntempBody.password = \"abc123\";\nvar loginCount = [];\napi.post(\"/enterprise/v1/login\")\n    .send(tempBody)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            if (res.body.error.message == messageList.USER_LOGIN_INVALID_CREDENTIAL)\n                loginCount.push(res.body.error.failed_login_count);\n            api.post(\"/enterprise/v1/login\")\n                .send(tempBody)\n                .expect(httpStatus.UNAUTHORIZED)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        if (res.body.error.message == messageList.USER_LOGIN_INVALID_CREDENTIAL)\n                            loginCount.push(res.body.error.failed_login_count);\n                        api.post(\"/enterprise/v1/login\")\n                            .send(tempBody)\n                            .expect(httpStatus.UNAUTHORIZED)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    if (res.body.error.message == messageList.USER_LOGIN_INVALID_CREDENTIAL)\n                                        loginCount.push(res.body.error.failed_login_count);\n                                    api.post(\"/enterprise/v1/login\")\n                                        .send(tempBody)\n                                        .expect(httpStatus.UNAUTHORIZED)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                if (res.body.error.message == messageList.USER_LOGIN_CAPTCHA_REQUIRED)\n                                                    loginCount.push(res.body.error.failed_login_count);\n                                                api.post(\"/enterprise/v1/login\")\n                                                    .send(tempBody)\n                                                    .expect(httpStatus.UNAUTHORIZED)\n                                                    .end(function(err, res) {\n                                                        if (err) {\n                                                            done(err);\n                                                        } else {\n                                                            if (res.body.error.message == messageList.USER_LOGIN_CAPTCHA_REQUIRED)\n                                                                loginCount.push(res.body.error.failed_login_count);\n                                                            var isValid =\n                                                                loginCount[0] == 1 &&\n                                                                loginCount[1] == 2 &&\n                                                                loginCount[2] == 3 &&\n                                                                loginCount[3] == 4 &&\n                                                                loginCount[4] == 5;\n                                                            if (isValid) {\n                                                                _models.User.findOneAndUpdate({ uid: uid }, {\n                                                                        active: true\n                                                                    },\n                                                                    function(error, user) {\n                                                                        commonMock.captchaVerification(httpmock, \"enterprise\");\n                                                                        api.post(apiURL)\n                                                                            .send({\n                                                                                email: registrationBody.email,\n                                                                                captcha_code: \"03AHJ_Vuu_lnKuNq-eLmTlTmWe6Aozhp6z0uLva1JGwwIKCkGu0x3S-8qFAHtZxL3TuJatYJnGOxta3250lueM1wWWb89Lk1zNeobupy-bg579yiGTwr4_IHsN_eWANc40w_EToNjf4mmeKxLbspOGq9YEZlWFb6d5pNnT--ImOkvcoiqwrmKjQIKPEoJBlXbuTL2NfNrrEPjhCpnmSQR6z3CRD1G-V3sVFeBbzHjoatg2wpFgnS5ikf42hNcq6JP0TwhQ86pwCqZ86JKm2UQe1ISxQUOckNXx6dG9NuCjypFmEsvOaL7qrhmcbp77hfzNamTEt1GVpNBlpKMtND6FDn8X05Ni3xoZDDhjZzRvlJQWf9ygHjsVByEEQv5GU9l1f4CI1gPbulwHQFN3d_8S0mbpBOfI-YQ_fE3lSWp0dDA2mxdDXOVi7tQgIBZhRFPAa8Jt9R9_TaSch6Ygq6qrkkIuekVIs6jSsLsLavpKZgtUkLJcf1RaUUZharASNuMIt3_s9EbWM42WCs8aMLWPo8qMu4pKa6cS5Bd3D-TFTBmtADFpOvDHjqfXqX_PemEg_ZVEXUYYGQ3YhJhESe8OCuxWqcs84Jzyln7-BIxYrMEDOgejqPrUc8nOU9F2o-MtjWohx_8ci0-078Fg6UGPWUGqZ2ttrvK9mIkFi1iQVhTcThPEFH2SoG993B3YqmEagHtBwOid2pNzYY_hAffXSSvURdJstiZi7qV_ZNxnJ9CSlljI8erdb4cPSrIY8XIEahiC-q3ODrATTXfkv5iGXeYI7_rDO0DmH3OS5g9rmFZb4RTows9Gmp8xOA91_faynmaM0009rOjYx0pxAqZZECTJu20Qyvbu0_d-dd7n7vMPHvoEMqbXQhXQO62zBK-h3PRRWQlLdFgwj498SgMsFkbo1SBRi1943w\"\n                                                                            })\n                                                                            .expect(httpStatus.OK)\n                                                                            .end(function(err, res) {\n                                                                                if (err) {\n                                                                                    done(err);\n                                                                                } else {\n                                                                                    res.body.output.message.should.equal(messageList.USER_FP_USER_SENT_MAIL);\n                                                                                    done();\n                                                                                }\n                                                                            });\n                                                                    });\n                                                            } else {\n                                                                false.should.equal(true);\n                                                            }\n                                                        }\n                                                    });\n                                            }\n                                        });\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0d8a5394-1a5f-49a7-ae65-1e5eb8f379dd",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give captcha verification fail error.",
                    "fullTitle": "Enterprise User User.forgotPassword Should give captcha verification fail error.",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .send({\n        email: \"test.user.example.unit.test@example.com\",\n        captcha_code: \"\"\n    })\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.CAPTCHA_VERIFICATION_FAIL);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8cc70957-4dbf-4df6-bd0e-ba3f5f92a58c",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "5502ae7b-ec39-4b29-8af6-7cd499115044",
                  "5544fc75-048d-4799-8ae7-96d452c7b064",
                  "4b12dfa4-ba81-4f66-845e-a9643cac8db8",
                  "c4da2010-3e75-4b86-b5e6-6c4059dc3221",
                  "0d8a5394-1a5f-49a7-ae65-1e5eb8f379dd",
                  "8cc70957-4dbf-4df6-bd0e-ba3f5f92a58c"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 447,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "d1aa95af-3278-434b-b119-675fdef7c07e",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\users\\generateSupportKey.enterprise.js",
        "file": "\\controllers\\test\\users\\generateSupportKey.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "771b3e33-8072-4f26-9127-42a71034e3fe",
            "title": "User",
            "fullFile": "C:\\work\\api\\controllers\\test\\users\\generateSupportKey.enterprise.js",
            "file": "\\controllers\\test\\users\\generateSupportKey.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "227468a2-a8fb-489d-af65-3cb5537c0b31",
                "title": "User.generateSupportKey",
                "fullFile": "C:\\work\\api\\controllers\\test\\users\\generateSupportKey.enterprise.js",
                "file": "\\controllers\\test\\users\\generateSupportKey.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.generateSupportKey \"before each\" hook",
                    "timedOut": false,
                    "duration": 87,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n    _models.Mail.remove({ $or: [{ to: new RegExp('^test.user+', \"i\") }, { to: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n        commonMock.setSignUpMocks(httpmock, \"enterprise\");\n        api.post(\"/enterprise/v1/signup\")\n            .send(registrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    authToken = res.body.output.authtoken;\n                    token = res.body.output.activation_token;\n                    _id = res.body.output._id;\n                    uid = res.body.output.uid;\n                    done();\n                }\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "10d436f4-842e-4a3d-8c0d-241f0e6cc963",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User User.generateSupportKey \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "aa95df5d-2e88-4b44-ba92-e4ae5bd883da",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should generate support key.",
                    "fullTitle": "Enterprise User User.generateSupportKey Should generate support key.",
                    "timedOut": false,
                    "duration": 68,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncheckSupportKey(done, function(isValid) {\n    isValid.should.equal(true);\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "53424af1-04c1-4e86-96f7-0285b2852e58",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should generate support key for second time.",
                    "fullTitle": "Enterprise User User.generateSupportKey Should generate support key for second time.",
                    "timedOut": false,
                    "duration": 217,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncheckSupportKey(done, function(isValid) {\n    var firstTime = isValid;\n    api.post(\"/enterprise/v1/login\")\n        .send({\n            email: registrationBody.email,\n            password: registrationBody.password\n        })\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                authToken = res.body.output.authtoken;\n                checkSupportKey(done, function(isValid) {\n                    var secondTime = isValid;\n                    (firstTime && secondTime).should.equal(true);\n                    done();\n                });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "64826325-b771-46af-a9ed-60df8f2f0b2c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should generate support key for third time.",
                    "fullTitle": "Enterprise User User.generateSupportKey Should generate support key for third time.",
                    "timedOut": false,
                    "duration": 372,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncheckSupportKey(done, function(isValid) {\n    var firstTime = isValid;\n    api.post(\"/enterprise/v1/login\")\n        .send({\n            email: registrationBody.email,\n            password: registrationBody.password\n        })\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                authToken = res.body.output.authtoken;\n                checkSupportKey(done, function(isValid) {\n                    var secondTime = isValid;\n                    api.post(\"/enterprise/v1/login\")\n                        .send({\n                            email: registrationBody.email,\n                            password: registrationBody.password\n                        })\n                        .expect(httpStatus.OK)\n                        .end(function(err, res) {\n                            if (err) {\n                                done(err);\n                            } else {\n                                authToken = res.body.output.authtoken;\n                                checkSupportKey(done, function(isValid) {\n                                    var thirdTime = isValid;\n                                    (firstTime && secondTime && thirdTime).should.equal(true);\n                                    done();\n                                });\n                            }\n                        });\n                });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "93e2b835-39e5-48ad-8834-821f079d58d5",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should person should not be generating suport key.",
                    "fullTitle": "Enterprise User User.generateSupportKey Should person should not be generating suport key.",
                    "timedOut": false,
                    "duration": 83,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncheckSupportKey(done, function(isValid, user) {\n    api.post(apiURL)\n        .set('authtoken', user.authtoken)\n        .send({})\n        .expect(httpStatus.BAD_REQUEST)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                res.body.error.message.should.equal(messageList.SUPPORT_PERSON_SUPPORT_KEY_GENERATION_ERROR);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "567a3c05-ba4e-46ca-b967-a7a4b2f39c28",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise User User.generateSupportKey Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .send({})\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a2a62ac2-ca3e-4070-853b-3034882e1ce6",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "53424af1-04c1-4e86-96f7-0285b2852e58",
                  "64826325-b771-46af-a9ed-60df8f2f0b2c",
                  "93e2b835-39e5-48ad-8834-821f079d58d5",
                  "567a3c05-ba4e-46ca-b967-a7a4b2f39c28",
                  "a2a62ac2-ca3e-4070-853b-3034882e1ce6"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 743,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "7ec29932-a2b0-4e8e-b9fc-cae1a54d52d7",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\users\\getAutoRefresh.enterprise.js",
        "file": "\\controllers\\test\\users\\getAutoRefresh.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "308bdab9-a81c-4bcc-aa5c-e6635c3ba1aa",
            "title": "User",
            "fullFile": "C:\\work\\api\\controllers\\test\\users\\getAutoRefresh.enterprise.js",
            "file": "\\controllers\\test\\users\\getAutoRefresh.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "34281b0c-83f3-4c82-bf6d-9251c7a574bc",
                "title": "User.getAutoRefresh",
                "fullFile": "C:\\work\\api\\controllers\\test\\users\\getAutoRefresh.enterprise.js",
                "file": "\\controllers\\test\\users\\getAutoRefresh.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.getAutoRefresh \"before each\" hook",
                    "timedOut": false,
                    "duration": 87,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n    _models.Mail.remove({ $or: [{ to: new RegExp('^test.user+', \"i\") }, { to: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n        _models.Authy.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n            commonMock.setSignUpMocks(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/signup\")\n                .send(registrationBody)\n                .expect(httpStatus.CREATED)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        authToken = res.body.output.authtoken;\n                        token = res.body.output.activation_token;\n                        _id = res.body.output._id;\n                        uid = res.body.output.uid;\n                        done();\n                    }\n                });\n        });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c0266a72-b1cf-4ecc-a15a-e924cfbe732f",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User User.getAutoRefresh \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "67b363d3-6ee8-4cd4-a7ec-bce1526ed334",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get auto_refresh to true.",
                    "fullTitle": "Enterprise User User.getAutoRefresh Should get auto_refresh to true.",
                    "timedOut": false,
                    "duration": 29,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.put(\"/enterprise/v1/user/autorefresh\")\n    .send({\n        auto_refresh: true\n    })\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            api.get(\"/enterprise/v1/user/autorefresh\")\n                .set('authtoken', authToken)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        res.body.output.auto_refresh.should.equal(true);\n                        done();\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3eb254d5-d2d8-4a7e-8f5e-ba41c858d79d",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should gives error as valid parameters required.",
                    "fullTitle": "Enterprise User User.getAutoRefresh Should gives error as valid parameters required.",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.put(\"/enterprise/v1/user/autorefresh\")\n    .send({\n        auto_refresh: \"true1\"\n    })\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "00e4e026-f63d-421e-84b4-ab1d861f0b50",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise User User.getAutoRefresh Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.put(\"/enterprise/v1/user/autorefresh\")\n    .send({\n        auto_refresh: true\n    })\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "73208f18-9990-419e-a578-d17463f8d6b5",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "3eb254d5-d2d8-4a7e-8f5e-ba41c858d79d",
                  "00e4e026-f63d-421e-84b4-ab1d861f0b50",
                  "73208f18-9990-419e-a578-d17463f8d6b5"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 45,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "aa7e32e5-674a-46b8-9e26-f26d5ba21c71",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\users\\getAvatar.enterprise.js",
        "file": "\\controllers\\test\\users\\getAvatar.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "55c5ef65-f57c-4bc9-b9c0-2fdd55470e48",
            "title": "User",
            "fullFile": "C:\\work\\api\\controllers\\test\\users\\getAvatar.enterprise.js",
            "file": "\\controllers\\test\\users\\getAvatar.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "2e1dbe50-33c5-4b51-91ac-099efd52591e",
                "title": "User.getAvatar",
                "fullFile": "C:\\work\\api\\controllers\\test\\users\\getAvatar.enterprise.js",
                "file": "\\controllers\\test\\users\\getAvatar.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.getAvatar \"before each\" hook",
                    "timedOut": false,
                    "duration": 85,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n    _models.Mail.remove({ $or: [{ to: new RegExp('^test.user+', \"i\") }, { to: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n        commonMock.setSignUpMocks(httpmock, \"enterprise\");\n        api.post(\"/enterprise/v1/signup\")\n            .send(registrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    authToken = res.body.output.authtoken;\n                    _id = res.body.output._id;\n                    user_uid = res.body.output.uid;\n                    done();\n                }\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7d86a63c-ba3c-40cf-88ec-c8b695aeaa03",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User User.getAvatar \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1e4d9dc3-18ad-45a3-b6be-ef347eedcf85",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get avatar.",
                    "fullTitle": "Enterprise User User.getAvatar Should get avatar.",
                    "timedOut": false,
                    "duration": 28,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.myCroppedImage = \"https://example.com/region/fl3769c85311cc403d31ff45\";\nserver.agents[\"enterprise\"].s3.UploadAvatar = function(options, callback) {\n    callback(null, {\n        ETag: \"sdfdsf35s6dfsdfdsf6565656565655665\"\n    });\n};\nserver.agents[\"enterprise\"].s3.DownloadAvatar = function(options, callback) {\n    callback(null, tempRegistrationBody.myCroppedImage);\n};\ncommonMock.avatarGetURL(httpmock, \"enterprise\", {});\napi.put(\"/enterprise/v1/user/avatar\")\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            api.get(apiURL.replace(\":user_uid\", user_uid))\n                .set('authtoken', authToken)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        res.body.length.should.equal(2114);\n                        done();\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7f1e61cd-6574-4b5b-bc96-6b3cff334564",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get default avatar.",
                    "fullTitle": "Enterprise User User.getAvatar Should get default avatar.",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nserver.agents[\"enterprise\"].s3.DownloadAvatar = function(options, callback) {\n    callback(null, \"https://example.com/region/fl3769c85311cc403d31ff45\");\n};\ncommonMock.avatarGetURL(httpmock, \"enterprise\", {});\napi.get(apiURL.replace(\":user_uid\", \"default\"))\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.length.should.equal(2114);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "df4a3236-7868-4815-a380-7418f4531fce",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "7f1e61cd-6574-4b5b-bc96-6b3cff334564",
                  "df4a3236-7868-4815-a380-7418f4531fce"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 33,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "3e75ee49-bb73-454e-933a-821903523a5f",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\users\\getCreditInfo.enterprise.js",
        "file": "\\controllers\\test\\users\\getCreditInfo.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "74d5f174-4d1f-4700-b43c-1036e78b8ddd",
            "title": "User",
            "fullFile": "C:\\work\\api\\controllers\\test\\users\\getCreditInfo.enterprise.js",
            "file": "\\controllers\\test\\users\\getCreditInfo.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "e7f12b78-f916-49d2-99d8-63ca3a0b862b",
                "title": "User.getCreditInfo",
                "fullFile": "C:\\work\\api\\controllers\\test\\users\\getCreditInfo.enterprise.js",
                "file": "\\controllers\\test\\users\\getCreditInfo.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.getCreditInfo \"before each\" hook",
                    "timedOut": false,
                    "duration": 163,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_acc_authToken = _.first(data.organization_account.authtoken);\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n\n        api.get(\"/enterprise/v1/user\")\n            .set('authtoken', authToken)\n            .expect(httpStatus.OK)\n            .end(function(error, res) {\n                userPlan = res.body.output.user_plan;\n                done();\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2f09a001-9c96-4870-b727-31ef3349084a",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise User User.getCreditInfo \"after all\" hook",
                    "timedOut": false,
                    "duration": 2,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    httpmock.cleanAll();\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2aa9670c-d8c0-446c-ac77-4f5b55169513",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get credits info of authenticated user.",
                    "fullTitle": "Enterprise User User.getCreditInfo Should get credits info of authenticated user.",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            (typeof(res.body.output.available) != \"undefined\").should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9e5089dd-47a0-48d2-91ce-e3b3922a6bc1",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise User User.getCreditInfo Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d06910b2-e58b-42e6-9147-832efa1cadfd",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "9e5089dd-47a0-48d2-91ce-e3b3922a6bc1",
                  "d06910b2-e58b-42e6-9147-832efa1cadfd"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 14,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "a37d51e8-5483-41d1-9ad1-4c3dbfbc3af7",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\users\\getCreditInfoOrg.enterprise.js",
        "file": "\\controllers\\test\\users\\getCreditInfoOrg.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "3a6940fa-d08a-45ec-ad17-41e93f82bf51",
            "title": "User",
            "fullFile": "C:\\work\\api\\controllers\\test\\users\\getCreditInfoOrg.enterprise.js",
            "file": "\\controllers\\test\\users\\getCreditInfoOrg.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "ad52cda2-eaeb-4a63-870d-1260b8bc934e",
                "title": "User.getCreditInfoOrg",
                "fullFile": "C:\\work\\api\\controllers\\test\\users\\getCreditInfoOrg.enterprise.js",
                "file": "\\controllers\\test\\users\\getCreditInfoOrg.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.getCreditInfoOrg \"before each\" hook",
                    "timedOut": false,
                    "duration": 59,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        userPlan = data.owner.user_plan;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2a484176-e8e3-464e-917b-cf25480e2f8c",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise User User.getCreditInfoOrg \"after all\" hook",
                    "timedOut": false,
                    "duration": 2,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    httpmock.cleanAll();\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ffd0a08b-89ea-4158-8cf6-c8999159575c",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get credit info of organization.",
                    "fullTitle": "Enterprise User User.getCreditInfoOrg Should get credit info of organization.",
                    "timedOut": false,
                    "duration": 21,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        //console.log(err, res.body.error);\n        if (err) {\n            done(err);\n        } else {\n            (typeof(res.body.output.available) != \"undefined\").should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9d19a157-b869-41ba-bbb9-5639bc73d72e",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise User User.getCreditInfoOrg Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "37cc8021-0b29-499e-b941-7fa1f55f737b",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "9d19a157-b869-41ba-bbb9-5639bc73d72e",
                  "37cc8021-0b29-499e-b941-7fa1f55f737b"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 24,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "fe9c4ac3-ed08-41f3-a410-37c4e7262131",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\users\\getCurrentUser.enterprise.js",
        "file": "\\controllers\\test\\users\\getCurrentUser.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "8ea74230-f803-453b-a8d8-857b1d94e250",
            "title": "User",
            "fullFile": "C:\\work\\api\\controllers\\test\\users\\getCurrentUser.enterprise.js",
            "file": "\\controllers\\test\\users\\getCurrentUser.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "27aa894e-6747-4a8d-8ef7-84b63ae1f2b3",
                "title": "User.getCurrentUser",
                "fullFile": "C:\\work\\api\\controllers\\test\\users\\getCurrentUser.enterprise.js",
                "file": "\\controllers\\test\\users\\getCurrentUser.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.getCurrentUser \"before each\" hook",
                    "timedOut": false,
                    "duration": 89,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nasync.waterfall([\n    function(cbk) {\n        _models.Sessions.remove({}, function(error, user) {\n            _models.User.remove({}, function(error, user) {\n                _models.UserToken.remove({}, function(error, user) {\n                    _models.Mail.remove({}, function(error, user) {\n                        commonMock.setSignUpMocks(httpmock, \"enterprise\");\n                        api.post(\"/enterprise/v1/signup\")\n                            .send(registrationBody)\n                            .expect(httpStatus.CREATED)\n                            .end(function(err, res) {\n                                authToken = res.body.output.authtoken;\n                                cbk(err, res)\n                            });\n                    });\n                });\n            });\n        });\n    }\n], function(err, result) {\n    if (err) {\n        done(err);\n    } else {\n        done();\n    }\n})",
                    "err": {},
                    "isRoot": false,
                    "uuid": "80fe9b17-9361-41fa-99e1-b9752d39e47c",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise User User.getCurrentUser \"after all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "59be4f73-e0be-4d32-a76d-bfd7c0ddbbb6",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User User.getCurrentUser \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0e39348f-3c75-4869-830c-4d5f4494685e",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should unauthenticate session after 4 hours.",
                    "fullTitle": "Enterprise User User.getCurrentUser Should unauthenticate session after 4 hours.",
                    "timedOut": false,
                    "duration": 23,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.brainTreeClientToken(httpmock, \"enterprise\");\napi.get(apiURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var date = moment(new Date());\n            date.subtract({ hours: 4, minutes: 5 });\n            _models.UserToken.findOneAndUpdate({\n                authtoken: authToken\n            }, {\n                idle_valid_till: date\n            }, {\n                new: true\n            }, function(error, user) {\n                api.get(apiURL)\n                    .set('authtoken', authToken)\n                    .expect(httpStatus.UNAUTHORIZED)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n                            done();\n                        }\n                    });\n            });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7718d6a7-ab9c-4aca-9677-e7c981a8ec09",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get current user.",
                    "fullTitle": "Enterprise User User.getCurrentUser Should get current user.",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.brainTreeClientToken(httpmock, \"enterprise\");\napi.get(apiURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.uid != \"\" &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\";\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "edb447df-ea28-417d-b03e-81e77f5e049a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise User User.getCurrentUser Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.brainTreeClientToken(httpmock, \"enterprise\");\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5fb3984b-722c-475c-8bfe-a4dae2b0257e",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "7718d6a7-ab9c-4aca-9677-e7c981a8ec09",
                  "edb447df-ea28-417d-b03e-81e77f5e049a",
                  "5fb3984b-722c-475c-8bfe-a4dae2b0257e"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 41,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "d25f7de0-f596-4a68-88fb-8773d6672ca0",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\users\\getDistinctNamesOrg.enterprise.js",
        "file": "\\controllers\\test\\users\\getDistinctNamesOrg.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "3349d724-1be4-47f0-ba78-376a26f4cba0",
            "title": "User",
            "fullFile": "C:\\work\\api\\controllers\\test\\users\\getDistinctNamesOrg.enterprise.js",
            "file": "\\controllers\\test\\users\\getDistinctNamesOrg.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "cbaabc6e-e06c-45b7-a9f1-e13d58a29c04",
                "title": "User.getUserStreamDistinctFlowNamesOrg",
                "fullFile": "C:\\work\\api\\controllers\\test\\users\\getDistinctNamesOrg.enterprise.js",
                "file": "\\controllers\\test\\users\\getDistinctNamesOrg.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Enterprise User User.getUserStreamDistinctFlowNamesOrg \"before all\" hook",
                    "timedOut": false,
                    "duration": 564,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        api.get(\"/enterprise/v1/user\")\n            .set('org_uid', org_uid)\n            .set('authtoken', authToken)\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                env_uid = res.body.output.env_uid;\n                saveBillEntries({\n                    user_uid: user_uid,\n                    authtoken: authToken,\n                    email: data.owner.email\n                }, function(error, billEntries) {\n                    if (error) {\n                        done(error);\n                    } else {\n                        _billEntries = billEntries;\n                        saveUserStreamEntries({\n                            user_uid: user_uid,\n                            authtoken: authToken,\n                            email: data.owner.email\n                        }, function(error, userStreamEntries) {\n                            if (error) {\n                                done(error);\n                            } else {\n                                _userStreamEntries = userStreamEntries;\n                                done();\n                            }\n                        });\n                    }\n                });\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d1bf3c4b-ceef-409c-a746-e2ee4b1d4de5",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise User User.getUserStreamDistinctFlowNamesOrg \"after all\" hook",
                    "timedOut": false,
                    "duration": 2,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveEntries(function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "10ed4fb9-1aca-4083-a49b-3f1255c8c994",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get distinct list of flow names in user stream.",
                    "fullTitle": "Enterprise User User.getUserStreamDistinctFlowNamesOrg Should get distinct list of flow names in user stream.",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL.replace(\"{type}\", \"workflows\"))\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = Array.isArray(res.body.output.objects);\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "091c3bd4-b407-4bc7-b0b1-ada06ca1451e",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get distinct list of flow based on projects.",
                    "fullTitle": "Enterprise User User.getUserStreamDistinctFlowNamesOrg Should get distinct list of flow based on projects.",
                    "timedOut": false,
                    "duration": 18,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar userStreamURL = apiURL.replace(\"{type}\", \"workflows\") + \"&project_uid=\" + project_uids[0] + \",\" + project_uids[1];\napi.get(userStreamURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = Array.isArray(res.body.output.objects);\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ca2eebca-415b-4dfb-8447-c9045ce67a00",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get distinct list of projects names in user stream.",
                    "fullTitle": "Enterprise User User.getUserStreamDistinctFlowNamesOrg Should get distinct list of projects names in user stream.",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL.replace(\"{type}\", \"projects\"))\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = Array.isArray(res.body.output.objects);\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "af088a09-47b3-4e3e-bc31-f6f6759d21cc",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise User User.getUserStreamDistinctFlowNamesOrg Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6fadb245-d216-4f3a-932d-1723ac8d0b92",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "091c3bd4-b407-4bc7-b0b1-ada06ca1451e",
                  "ca2eebca-415b-4dfb-8447-c9045ce67a00",
                  "af088a09-47b3-4e3e-bc31-f6f6759d21cc",
                  "6fadb245-d216-4f3a-932d-1723ac8d0b92"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 52,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "2ceb28fc-7bef-43c7-98f7-7561b5d2e3fd",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\users\\getPlanUsesCheck.enterprise.js",
        "file": "\\controllers\\test\\users\\getPlanUsesCheck.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "8a1b4988-1dfb-4e88-aa05-38ca41336e8d",
            "title": "User",
            "fullFile": "C:\\work\\api\\controllers\\test\\users\\getPlanUsesCheck.enterprise.js",
            "file": "\\controllers\\test\\users\\getPlanUsesCheck.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "c1a1993f-019e-4733-aa84-f8f774e4ee9b",
                "title": "User.getPlanUsesCheck",
                "fullFile": "C:\\work\\api\\controllers\\test\\users\\getPlanUsesCheck.enterprise.js",
                "file": "\\controllers\\test\\users\\getPlanUsesCheck.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.getPlanUsesCheck \"before each\" hook",
                    "timedOut": false,
                    "duration": 1644,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveEntries(function() {\n    async.waterfall([\n        function(cbk) {\n            _models.User.remove({}, function(error, user) {\n                commonMock.setSignUpMocks(httpmock, \"enterprise\");\n                api.post(\"/enterprise/v1/signup\")\n                    .send(testData.testRegistrationBody)\n                    .expect(httpStatus.CREATED)\n                    .end(function(err, res) {\n                        authToken = res.body.output.authtoken;\n                        api.get(\"/enterprise/v1/user\")\n                            .set('authtoken', authToken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                env_uid = res.body.output.env_uid;\n                                user_uid = res.body.output.uid;\n                                cbk(err, res);\n                            });\n                    });\n            });\n        },\n        function(res, cbk) {\n            saveBillEntries({\n                    done: done,\n                    authtoken: authToken\n                },\n                function(error, bills) {\n                    savedBills = bills;\n                    cbk(null, savedBills);\n                });\n        },\n        function(res, cbk) {\n            saveUserTriggers({\n                    done: done,\n                    authtoken: authToken\n                },\n                function(error, bills) {\n                    savedBills = bills;\n                    cbk(null, savedBills);\n                });\n        },\n        function(res, cbk) {\n            saveUserFlows({\n                    done: done,\n                    authtoken: authToken\n                },\n                function(error, userFlows) {\n                    cbk(null, userFlows);\n                });\n        }\n    ], function(err, results) {\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "44d44aab-da40-4019-a78f-891c3d1e53b0",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise User User.getPlanUsesCheck \"after all\" hook",
                    "timedOut": false,
                    "duration": 1,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveEntries(function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "05ce6d19-1447-4e73-9d98-8263e7bae003",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User User.getPlanUsesCheck \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6e7b14b7-debc-44ab-87ac-dbe609e5daae",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get plan uses stats.",
                    "fullTitle": "Enterprise User User.getPlanUsesCheck Should get plan uses stats.",
                    "timedOut": false,
                    "duration": 20,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = isNaN(parseInt(res.body.output.trigger_count)) == false &&\n                isNaN(parseInt(res.body.output.flow_count)) == false &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\";\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "989ace33-7815-460e-9214-b6513fd9ad3f",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "989ace33-7815-460e-9214-b6513fd9ad3f"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 20,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "971c8b22-898b-4554-a3d4-3cb17bf84e4d",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\users\\getPlanUsesCheckOrg.enterprise.js",
        "file": "\\controllers\\test\\users\\getPlanUsesCheckOrg.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "20c7f3c6-408c-4c70-826a-028d02279998",
            "title": "User",
            "fullFile": "C:\\work\\api\\controllers\\test\\users\\getPlanUsesCheckOrg.enterprise.js",
            "file": "\\controllers\\test\\users\\getPlanUsesCheckOrg.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "cb5cc92b-0d4e-4356-b585-c91394ae701c",
                "title": "User.getPlanUsesCheckOrg",
                "fullFile": "C:\\work\\api\\controllers\\test\\users\\getPlanUsesCheckOrg.enterprise.js",
                "file": "\\controllers\\test\\users\\getPlanUsesCheckOrg.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.getPlanUsesCheckOrg \"before each\" hook",
                    "timedOut": false,
                    "duration": 1547,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nasync.waterfall([\n    function(cbk) {\n        testCollection.organizationRemoveRecords({}, function() {\n            testCollection.organizationRecordsEntry({}, function(data) {\n                authToken = data.owner.authtoken;\n                user_uid = data.organization_account.uid;\n                org_acc_authToken = _.first(data.organization_account.authtoken);\n                org_account_uid = data.organization_account.uid;\n                org_uid = data.organization.uid;\n                api.get(\"/enterprise/v1/user\")\n                    .set('org_uid', org_uid)\n                    .set('authtoken', authToken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        env_uid = res.body.output.env_uid;\n                        user_uid = res.body.output.uid;\n                        cbk(null, res);\n                    });\n            });\n        });\n    },\n    function(res, cbk) {\n        saveBillEntries({\n                done: done,\n                authtoken: authToken\n            },\n            function(error, bills) {\n                savedBills = bills;\n                cbk(null, savedBills);\n            });\n    },\n    function(res, cbk) {\n        saveUserTriggers({\n                done: done,\n                authtoken: authToken\n            },\n            function(error, bills) {\n                savedBills = bills;\n                cbk(null, savedBills);\n            });\n    },\n    function(res, cbk) {\n        saveUserFlows({\n                done: done,\n                authtoken: authToken\n            },\n            function(error, userFlows) {\n                cbk(null, userFlows);\n            });\n    }\n], function(err, results) {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cca439a9-0261-4d08-9fa9-9238e6298530",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise User User.getPlanUsesCheckOrg \"after all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6f0e12d3-9d30-4346-ae0c-8bd4f4601bac",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User User.getPlanUsesCheckOrg \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "23cf700d-2387-4eaa-ac7a-233d53366532",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get plan uses stats.",
                    "fullTitle": "Enterprise User User.getPlanUsesCheckOrg Should get plan uses stats.",
                    "timedOut": false,
                    "duration": 19,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('authtoken', authToken)\n    .set('org_uid', org_uid)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = isNaN(parseInt(res.body.output.trigger_count)) == false &&\n                isNaN(parseInt(res.body.output.flow_count)) == false &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\";\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "27649c02-9d46-46f8-a14a-b7736d094b4c",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "27649c02-9d46-46f8-a14a-b7736d094b4c"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 19,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "b9321af8-0021-49a2-9341-04a7f345fdb2",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\users\\getSupportKey.enterprise.js",
        "file": "\\controllers\\test\\users\\getSupportKey.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "45b63635-893e-40a1-95fa-52d51995855f",
            "title": "User",
            "fullFile": "C:\\work\\api\\controllers\\test\\users\\getSupportKey.enterprise.js",
            "file": "\\controllers\\test\\users\\getSupportKey.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "72280044-1950-46d9-b427-e5b2c0ddf0f5",
                "title": "User.getSupportKey",
                "fullFile": "C:\\work\\api\\controllers\\test\\users\\getSupportKey.enterprise.js",
                "file": "\\controllers\\test\\users\\getSupportKey.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.getSupportKey \"before each\" hook",
                    "timedOut": false,
                    "duration": 86,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n    _models.Mail.remove({ $or: [{ to: new RegExp('^test.user+', \"i\") }, { to: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n        commonMock.setSignUpMocks(httpmock, \"enterprise\");\n        api.post(\"/enterprise/v1/signup\")\n            .send(registrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    authToken = res.body.output.authtoken;\n                    token = res.body.output.activation_token;\n                    _id = res.body.output._id;\n                    uid = res.body.output.uid;\n                    done();\n                }\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2d518089-3a97-4b15-921f-795fe2d221b5",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User User.getSupportKey \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "465400a4-68fc-40f4-aa6f-865c0bc539fb",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get support key.",
                    "fullTitle": "Enterprise User User.getSupportKey Should get support key.",
                    "timedOut": false,
                    "duration": 29,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('authtoken', authToken)\n    .send({})\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        api.get(apiURL)\n            .set('authtoken', authToken)\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    res.body.output.supportKey.should.not.equal(\"\");\n                    done();\n                }\n            });\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d4e2233f-37dc-428e-bff2-030a28e5e3e0",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise User User.getSupportKey Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8ecaac97-6899-4355-a554-3a6ab3459c23",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "d4e2233f-37dc-428e-bff2-030a28e5e3e0",
                  "8ecaac97-6899-4355-a554-3a6ab3459c23"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 32,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "7c09d31e-21c1-42c2-be48-b51ceb64e6c7",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\users\\getTransactionsInfo.enterprise.js",
        "file": "\\controllers\\test\\users\\getTransactionsInfo.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "43e7fc02-4436-4463-9721-19df992486c1",
            "title": "User",
            "fullFile": "C:\\work\\api\\controllers\\test\\users\\getTransactionsInfo.enterprise.js",
            "file": "\\controllers\\test\\users\\getTransactionsInfo.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "4ee33fe3-0535-40c5-a142-104c01a46b93",
                "title": "User.getTransactionsInfo",
                "fullFile": "C:\\work\\api\\controllers\\test\\users\\getTransactionsInfo.enterprise.js",
                "file": "\\controllers\\test\\users\\getTransactionsInfo.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.getTransactionsInfo \"before each\" hook",
                    "timedOut": false,
                    "duration": 73,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_acc_authToken = _.first(data.organization_account.authtoken);\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n\n        api.get(\"/enterprise/v1/user\")\n            .set('authtoken', authToken)\n            .expect(httpStatus.OK)\n            .end(function(error, res) {\n                userPlan = res.body.output.user_plan;\n                done();\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "038199d1-5e05-404c-8f16-bb73ec05562f",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise User User.getTransactionsInfo \"after all\" hook",
                    "timedOut": false,
                    "duration": 1,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    httpmock.cleanAll();\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5ff046cb-db2e-4902-a8c8-1f2138b4eea3",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get transactions info of authenticated user.",
                    "fullTitle": "Enterprise User User.getTransactionsInfo Should get transactions info of authenticated user.",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            (typeof(res.body.output.available) != \"undefined\").should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8fa33c5f-0b30-425c-a55e-9d7c46114fb8",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise User User.getTransactionsInfo Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3f1c5372-e23a-4603-b1b0-6aa9b52adb61",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "8fa33c5f-0b30-425c-a55e-9d7c46114fb8",
                  "3f1c5372-e23a-4603-b1b0-6aa9b52adb61"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 14,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "9212122d-b939-43df-97db-eed4281380bc",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\users\\getTransactionsInfoOrg.enterprise.js",
        "file": "\\controllers\\test\\users\\getTransactionsInfoOrg.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "7b4cc645-6465-4526-ab31-3b2b1deae28e",
            "title": "User",
            "fullFile": "C:\\work\\api\\controllers\\test\\users\\getTransactionsInfoOrg.enterprise.js",
            "file": "\\controllers\\test\\users\\getTransactionsInfoOrg.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "3f23dfcc-f0f3-47e2-8ac2-8072de8c558c",
                "title": "User.getTransactionsInfoOrg",
                "fullFile": "C:\\work\\api\\controllers\\test\\users\\getTransactionsInfoOrg.enterprise.js",
                "file": "\\controllers\\test\\users\\getTransactionsInfoOrg.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.getTransactionsInfoOrg \"before each\" hook",
                    "timedOut": false,
                    "duration": 54,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        userPlan = data.owner.user_plan;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "86d78f73-ae34-4524-ad30-29d15f9cef96",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise User User.getTransactionsInfoOrg \"after all\" hook",
                    "timedOut": false,
                    "duration": 2,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    httpmock.cleanAll();\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1b8cf5c7-c82f-4ef5-b5f5-10fa79dfa50d",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get transactions info of organization.",
                    "fullTitle": "Enterprise User User.getTransactionsInfoOrg Should get transactions info of organization.",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        //console.log(err, res.body.error);\n        if (err) {\n            done(err);\n        } else {\n            (typeof(res.body.output.available) != \"undefined\").should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0f409d61-067c-4107-bbf3-4614083fa078",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise User User.getTransactionsInfoOrg Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "400c7ba8-50db-4a84-bad5-4ab1caea52d2",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "0f409d61-067c-4107-bbf3-4614083fa078",
                  "400c7ba8-50db-4a84-bad5-4ab1caea52d2"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 19,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "f2553e9d-207e-49b2-8618-7366e1ac8cd3",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\users\\getUserById.enterprise.js",
        "file": "\\controllers\\test\\users\\getUserById.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "27fad599-df47-482a-8928-9074988318b0",
            "title": "User",
            "fullFile": "C:\\work\\api\\controllers\\test\\users\\getUserById.enterprise.js",
            "file": "\\controllers\\test\\users\\getUserById.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "b30c6a00-206c-4ca6-8d58-0240ae8a5b47",
                "title": "User.getUserById",
                "fullFile": "C:\\work\\api\\controllers\\test\\users\\getUserById.enterprise.js",
                "file": "\\controllers\\test\\users\\getUserById.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Enterprise User User.getUserById \"before all\" hook",
                    "timedOut": false,
                    "duration": 175,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveEntries(function() {\n    commonMock.setSignUpMocks(httpmock, \"enterprise\");\n    api.post(\"/enterprise/v1/signup\")\n        .send(registrationBody)\n        .expect(httpStatus.CREATED)\n        .end(function(error, res) {\n            if (error) {\n                done(error);\n            } else {\n                authToken = res.body.output.authtoken;\n                user_uid = res.body.output.uid;\n                _id = res.body.output._id;\n                var tempRegistrationBody = global.getImmutable(registrationBody);\n                tempRegistrationBody.email = \"test.user+2@raweng.com\";\n                commonMock.setSignUpMocks(httpmock, \"enterprise\");\n                api.post(\"/enterprise/v1/signup\")\n                    .send(tempRegistrationBody)\n                    .expect(httpStatus.CREATED)\n                    .end(function(error, res) {\n                        if (error) {\n                            done(error);\n                        } else {\n                            other_user_uid = res.body.output.uid;\n                            done();\n                        }\n                    });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e728b530-02ba-484e-97ef-4561a3d02a71",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise User User.getUserById \"after all\" hook",
                    "timedOut": false,
                    "duration": 1,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveEntries(function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "16026ed0-8245-41d3-954f-3f18c27561b0",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User User.getUserById \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2a43dd74-b958-4233-ab1c-246cfe6f3779",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get user based on user uid.",
                    "fullTitle": "Enterprise User User.getUserById Should get user based on user uid.",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar apiURLWithID = apiURL.replace(\":user_uid\", other_user_uid);\napi.get(apiURLWithID)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.uid.should.equal(other_user_uid);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d189dfe6-d40c-4485-821d-9a14b5fb185d",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get user not found error.",
                    "fullTitle": "Enterprise User User.getUserById Should get user not found error.",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar apiURLWithID = apiURL.replace(\":user_uid\", \"ABC\");\napi.get(apiURLWithID)\n    .set('authtoken', authToken)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.USER_NOT_FOUND);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cd93c440-15cb-40f5-af3b-7c0a9daca6f9",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise User User.getUserById Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar apiURLWithID = apiURL.replace(\":user_uid\", other_user_uid);\napi.get(apiURLWithID)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bc8bbcf5-8953-45de-a09d-73358c3e59b4",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "d189dfe6-d40c-4485-821d-9a14b5fb185d",
                  "cd93c440-15cb-40f5-af3b-7c0a9daca6f9",
                  "bc8bbcf5-8953-45de-a09d-73358c3e59b4"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 30,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "47d3573a-8e97-4275-8fe8-4fd1dd823b4d",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\users\\getUserCount.enterprise.js",
        "file": "\\controllers\\test\\users\\getUserCount.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "a68e4db9-921c-4420-9f17-b0796e513c47",
            "title": "User",
            "fullFile": "C:\\work\\api\\controllers\\test\\users\\getUserCount.enterprise.js",
            "file": "\\controllers\\test\\users\\getUserCount.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "c378f155-ac77-47d3-84b2-80d69ec792c9",
                "title": "User.getUserCount",
                "fullFile": "C:\\work\\api\\controllers\\test\\users\\getUserCount.enterprise.js",
                "file": "\\controllers\\test\\users\\getUserCount.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Enterprise User User.getUserCount \"before all\" hook",
                    "timedOut": false,
                    "duration": 88,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveEntries(function() {\n    commonMock.setSignUpMocks(httpmock, \"enterprise\");\n    api.post(\"/enterprise/v1/signup\")\n        .send(registrationBody)\n        .expect(httpStatus.CREATED)\n        .end(function(error, res) {\n            if (error) {\n                done(error);\n            } else {\n                authToken = res.body.output.authtoken;\n                user_uid = res.body.output.uid;\n                _id = res.body.output._id;\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ed2d62ba-3432-4c0e-adde-c38496e6a16e",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise User User.getUserCount \"after all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveEntries(function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2331a16d-d856-4739-9ffe-36ae386ffcb6",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User User.getUserCount \"after each\" hook",
                    "timedOut": false,
                    "duration": 1,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9de8c5be-f0b0-441b-a3eb-15d776f5f900",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get register user count.",
                    "fullTitle": "Enterprise User User.getUserCount Should get register user count.",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            isNaN(parseInt(res.body.output.count)).should.equal(false);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a169e82e-f17e-4655-94ca-19662632378a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise User User.getUserCount Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "aad35fa0-3cb9-44cc-99ab-791880daac47",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "a169e82e-f17e-4655-94ca-19662632378a",
                  "aad35fa0-3cb9-44cc-99ab-791880daac47"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 16,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "715e9b6d-a1ea-49da-9e0c-6b3346ddf173",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\users\\getUserFlowExecutionList.enterprise.js",
        "file": "\\controllers\\test\\users\\getUserFlowExecutionList.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "dc3da3a6-1234-4d51-bbb1-003587d6ae1a",
            "title": "User",
            "fullFile": "C:\\work\\api\\controllers\\test\\users\\getUserFlowExecutionList.enterprise.js",
            "file": "\\controllers\\test\\users\\getUserFlowExecutionList.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "6dd547c7-caa5-48c5-9123-d473dde60340",
                "title": "Users.getUserFlowExecutionList",
                "fullFile": "C:\\work\\api\\controllers\\test\\users\\getUserFlowExecutionList.enterprise.js",
                "file": "\\controllers\\test\\users\\getUserFlowExecutionList.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User Users.getUserFlowExecutionList \"before each\" hook",
                    "timedOut": false,
                    "duration": 264,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_org_uid = utils.generateUID();\nremoveEntries(function() {\n    commonMock.setSignUpMocks(httpmock, \"enterprise\");\n    api.post(\"/enterprise/v1/signup\")\n        .send(registrationBody)\n        .expect(httpStatus.CREATED)\n        .end(function(error, res) {\n            if (error) {\n                done(error);\n            } else {\n                authToken = res.body.output.authtoken;\n                user_uid = res.body.output.uid;\n                _id = res.body.output._id;\n                api.get(\"/enterprise/v1/user\")\n                    .set('authtoken', authToken)\n                    .expect(httpStatus.OK)\n                    .end(function(error, res) {\n                        _env_uid = res.body.output.env_uid;\n                        saveBillEntries({\n                            org_uid: _org_uid,\n                            user_uid: user_uid,\n                            env_uid: _env_uid,\n                            authtoken: authToken,\n                            email: res.body.output.email\n                        }, function(error, billEntries) {\n                            if (error) {\n                                done(error);\n                            } else {\n                                _billEntries = billEntries;\n                                done();\n                            }\n                        });\n                    });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "939e101a-2d16-468f-80b1-7c6c871b5710",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise User Users.getUserFlowExecutionList \"after all\" hook",
                    "timedOut": false,
                    "duration": 2,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveEntries(function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6891f1d3-e297-48d5-a0f0-934153ceaa01",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get list of user streams of flow-execution for particular flow_uid.",
                    "fullTitle": "Enterprise User Users.getUserFlowExecutionList Should get list of user streams of flow-execution for particular flow_uid.",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL.replace(\":flow_uid\", flow_uid);\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects)) {\n                isValid = true;\n            }\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\" &&\n                        item.flow_uid == flow_uid;\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "85e5d250-82d7-428b-898c-6b9b331ce259",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get limited list of user streams of flow-execution based on skip/limit.",
                    "fullTitle": "Enterprise User Users.getUserFlowExecutionList Should get limited list of user streams of flow-execution based on skip/limit.",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL.replace(\":flow_uid\", flow_uid) + \"?skip=1&limit=1\";\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects));\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "186a41f3-9ab3-4338-ac71-0ab96cb5aef6",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise User Users.getUserFlowExecutionList Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL.replace(\":flow_uid\", flow_uid);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9369ec84-9c6a-4dc4-b3ab-4e9b3a3f5d3f",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "85e5d250-82d7-428b-898c-6b9b331ce259",
                  "186a41f3-9ab3-4338-ac71-0ab96cb5aef6",
                  "9369ec84-9c6a-4dc4-b3ab-4e9b3a3f5d3f"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 33,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "0d952ff5-ecc0-4aaa-9afa-5aaf41a2f826",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\users\\getUserFlowExecutionListOrg.enterprise.js",
        "file": "\\controllers\\test\\users\\getUserFlowExecutionListOrg.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "9991eecc-483c-4381-8849-1c3447417c7f",
            "title": "User",
            "fullFile": "C:\\work\\api\\controllers\\test\\users\\getUserFlowExecutionListOrg.enterprise.js",
            "file": "\\controllers\\test\\users\\getUserFlowExecutionListOrg.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "7c6d9d78-2bbb-4ec1-8cc0-5ff853445ddf",
                "title": "Users.getUserFlowExecutionListOrg",
                "fullFile": "C:\\work\\api\\controllers\\test\\users\\getUserFlowExecutionListOrg.enterprise.js",
                "file": "\\controllers\\test\\users\\getUserFlowExecutionListOrg.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User Users.getUserFlowExecutionListOrg \"before each\" hook",
                    "timedOut": false,
                    "duration": 122,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n//_org_uid = utils.generateUID();\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        api.get(\"/enterprise/v1/user\")\n            .set('authtoken', authToken)\n            .expect(httpStatus.OK)\n            .end(function(error, res) {\n                _env_uid = res.body.output.env_uid;\n                saveBillEntries({\n                    org_uid: _org_uid,\n                    user_uid: user_uid,\n                    env_uid: _env_uid,\n                    authtoken: authToken,\n                    email: res.body.output.email\n                }, function(error, billEntries) {\n                    if (error) {\n                        done(error);\n                    } else {\n                        _billEntries = billEntries;\n                        done();\n                    }\n                });\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fe268762-c0cd-4558-81b8-8e01ff0f1d7e",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise User Users.getUserFlowExecutionListOrg \"after all\" hook",
                    "timedOut": false,
                    "duration": 1,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveEntries(function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ee24267f-7bf5-49c9-8d39-73ae1fad3158",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get list of user streams of flow-execution for particular flow_uid.",
                    "fullTitle": "Enterprise User Users.getUserFlowExecutionListOrg Should get list of user streams of flow-execution for particular flow_uid.",
                    "timedOut": false,
                    "duration": 11,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL.replace(\":flow_uid\", flow_uid);\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects)) {\n                isValid = true;\n            }\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\" &&\n                        item.flow_uid == flow_uid;\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2da64907-5f05-45e6-b9db-ef829ad0af0f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get limited list of user streams of flow-execution based on skip/limit.",
                    "fullTitle": "Enterprise User Users.getUserFlowExecutionListOrg Should get limited list of user streams of flow-execution based on skip/limit.",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL.replace(\":flow_uid\", flow_uid) + \"?skip=1&limit=1\";\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects));\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fc5b7686-3285-4cd7-a90c-af02ef75a0c1",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise User Users.getUserFlowExecutionListOrg Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL.replace(\":flow_uid\", flow_uid);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7b46a66d-506e-4429-97d9-c196ed61a6b0",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "2da64907-5f05-45e6-b9db-ef829ad0af0f",
                  "fc5b7686-3285-4cd7-a90c-af02ef75a0c1",
                  "7b46a66d-506e-4429-97d9-c196ed61a6b0"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 24,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "09e12bd4-d194-43d0-839c-9d254d155d62",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\users\\getUserFlowExecutionLog.enterprise.js",
        "file": "\\controllers\\test\\users\\getUserFlowExecutionLog.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "e6bb7154-8274-409b-b66d-ed7706cce002",
            "title": "User",
            "fullFile": "C:\\work\\api\\controllers\\test\\users\\getUserFlowExecutionLog.enterprise.js",
            "file": "\\controllers\\test\\users\\getUserFlowExecutionLog.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "0dc06bb3-ece6-405b-8802-4cf2ff71da01",
                "title": "Users.getUserFlowExecutionLog",
                "fullFile": "C:\\work\\api\\controllers\\test\\users\\getUserFlowExecutionLog.enterprise.js",
                "file": "\\controllers\\test\\users\\getUserFlowExecutionLog.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User Users.getUserFlowExecutionLog \"before each\" hook",
                    "timedOut": false,
                    "duration": 765,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_org_uid = utils.generateUID();\nremoveEntries(function() {\n    commonMock.setSignUpMocks(httpmock, \"enterprise\");\n    api.post(\"/enterprise/v1/signup\")\n        .send(registrationBody)\n        .expect(httpStatus.CREATED)\n        .end(function(error, res) {\n            if (error) {\n                done(error);\n            } else {\n                authToken = res.body.output.authtoken;\n                user_uid = res.body.output.uid;\n                _id = res.body.output._id;\n                api.get(\"/enterprise/v1/user\")\n                    .set('authtoken', authToken)\n                    .expect(httpStatus.OK)\n                    .end(function(error, res) {\n                        _env_uid = res.body.output.env_uid;\n                        saveBillEntries({\n                            org_uid: _org_uid,\n                            user_uid: user_uid,\n                            env_uid: _env_uid,\n                            authtoken: authToken,\n                            email: res.body.output.email\n                        }, function(error, billEntries) {\n                            if (error) {\n                                done(error);\n                            } else {\n                                _billEntries = billEntries;\n                                saveUserStreamEntries({\n                                    org_uid: _org_uid,\n                                    user_uid: user_uid,\n                                    env_uid: _env_uid,\n                                    authtoken: authToken,\n                                    email: res.body.output.email\n                                }, function(error, userStreamEntries) {\n                                    if (error) {\n                                        done(error);\n                                    } else {\n                                        _userStreamEntries = userStreamEntries;\n                                        done();\n                                    }\n                                });\n                            }\n                        });\n                    });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5d81a0d1-3077-42a4-ab18-a897df57af72",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise User Users.getUserFlowExecutionLog \"after all\" hook",
                    "timedOut": false,
                    "duration": 2,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveEntries(function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4de7f8a7-7cc5-4fef-92aa-55fbbf5a38f7",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get list of user stream.",
                    "fullTitle": "Enterprise User Users.getUserFlowExecutionLog Should get list of user stream.",
                    "timedOut": false,
                    "duration": 23,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            true.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "430b1a5b-3fec-4614-bcd6-e71129587fdf",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user stream for particular flow uid.",
                    "fullTitle": "Enterprise User Users.getUserFlowExecutionLog Should get list of user stream for particular flow uid.",
                    "timedOut": false,
                    "duration": 19,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow_uid=\" + flow_uids[3];\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            true.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3396fe61-4ec3-4bab-a4b9-f76b457963b1",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user stream for particular project uid.",
                    "fullTitle": "Enterprise User Users.getUserFlowExecutionLog Should get list of user stream for particular project uid.",
                    "timedOut": false,
                    "duration": 18,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?project_uid=\" + project_uids[3];\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            true.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2fa2055f-6588-4742-8696-a9edbf4bb196",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user stream for particular flow uid and project uid.",
                    "fullTitle": "Enterprise User Users.getUserFlowExecutionLog Should get list of user stream for particular flow uid and project uid.",
                    "timedOut": false,
                    "duration": 18,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow_uid=\" + flow_uids[3] + \"&project_uid=\" + project_uids[3];\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            true.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9818d799-812a-4113-9b8f-cfd8f4265825",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get limited list of user stream based on skip/limit.",
                    "fullTitle": "Enterprise User Users.getUserFlowExecutionLog Should get limited list of user stream based on skip/limit.",
                    "timedOut": false,
                    "duration": 20,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?skip=2&limit=2&field=created_at&direction=asc\";\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            true.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ff049aa4-02d9-44cc-b973-d53fdd5587d2",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get limited list of user stream based on skip/limit for particular flow_uid.",
                    "fullTitle": "Enterprise User Users.getUserFlowExecutionLog Should get limited list of user stream based on skip/limit for particular flow_uid.",
                    "timedOut": false,
                    "duration": 20,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?skip=2&limit=2&field=created_at&direction=asc&flow_uid=\" + flow_uids[3];\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            true.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d48bb921-6a6d-4f6c-9a9c-67ae1ca6dc56",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get limited list of user streams based on skip/limit in title descending order.",
                    "fullTitle": "Enterprise User Users.getUserFlowExecutionLog Should get limited list of user streams based on skip/limit in title descending order.",
                    "timedOut": false,
                    "duration": 20,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?skip=2&limit=2&field=title&direction=desc\";\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            true.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ae2c95cf-067b-450d-aae4-32ea7d57738d",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get limited list of user streams based on skip/limit in title descending order for particular flow_uid.",
                    "fullTitle": "Enterprise User Users.getUserFlowExecutionLog Should get limited list of user streams based on skip/limit in title descending order for particular flow_uid.",
                    "timedOut": false,
                    "duration": 21,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?skip=2&limit=2&field=title&direction=desc&flow_uid=\" + flow_uids[3];\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            true.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2fca5cf7-4ad0-4e40-a170-24df9fcad6f0",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of flow-execution for particular flow_uid.",
                    "fullTitle": "Enterprise User Users.getUserFlowExecutionLog Should get list of user streams of flow-execution for particular flow_uid.",
                    "timedOut": false,
                    "duration": 22,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow_uid=\" + flow_uids[0];\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            true.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "85bb3726-bb53-4534-aedd-54bd9ff2734f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get limited list of user streams of flow-execution based on skip/limit.",
                    "fullTitle": "Enterprise User Users.getUserFlowExecutionLog Should get limited list of user streams of flow-execution based on skip/limit.",
                    "timedOut": false,
                    "duration": 22,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?skip=1&limit=1\";\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            true.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a2bfc8a7-354e-4877-bd7f-2d229524a69a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get limited list of user streams of flow-execution based on skip/limit for particular flow_uid.",
                    "fullTitle": "Enterprise User Users.getUserFlowExecutionLog Should get limited list of user streams of flow-execution based on skip/limit for particular flow_uid.",
                    "timedOut": false,
                    "duration": 22,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?skip=1&limit=1&flow_uid=\" + flow_uids[0];\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            true.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "51b6f9f7-8865-47f4-b7c2-8dbf3ba9bf24",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of flow-execution for specific flow.",
                    "fullTitle": "Enterprise User Users.getUserFlowExecutionLog Should get list of user streams of flow-execution for specific flow.",
                    "timedOut": false,
                    "duration": 21,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?name=utest_cases_01\";\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            true.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0f35aa04-1676-4690-b93d-8caab7119c06",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of flow-execution for specific flow for particular flow_uid.",
                    "fullTitle": "Enterprise User Users.getUserFlowExecutionLog Should get list of user streams of flow-execution for specific flow for particular flow_uid.",
                    "timedOut": false,
                    "duration": 24,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?name=utest_cases_01&flow_uid=\" + flow_uids[3];\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            true.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c1463b23-fd40-43fe-93fd-06b38477087a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of flow-execution for specific detail.",
                    "fullTitle": "Enterprise User Users.getUserFlowExecutionLog Should get list of user streams of flow-execution for specific detail.",
                    "timedOut": false,
                    "duration": 22,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?detail=command,enabled\";\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            true.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "99ea79bd-1af4-418d-b281-8dfe14b7a03d",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of flow-execution for specific detail for particular flow_uid.",
                    "fullTitle": "Enterprise User Users.getUserFlowExecutionLog Should get list of user streams of flow-execution for specific detail for particular flow_uid.",
                    "timedOut": false,
                    "duration": 21,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?detail=command,enabled&flow_uid=\" + flow_uids[1];\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            true.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ca6a22de-2c63-4580-b3b0-6f528f6c9738",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not get list of user streams of flow-execution for specific details.",
                    "fullTitle": "Enterprise User Users.getUserFlowExecutionLog Should not get list of user streams of flow-execution for specific details.",
                    "timedOut": false,
                    "duration": 20,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?detail=enabled1\";\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            true.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3fd24fdd-a709-4133-8299-a1b2b39eeb48",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not get list of user streams of flow-execution for specific detail for particular flow_uid.",
                    "fullTitle": "Enterprise User Users.getUserFlowExecutionLog Should not get list of user streams of flow-execution for specific detail for particular flow_uid.",
                    "timedOut": false,
                    "duration": 22,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?detail=enabled1&flow_uid=\" + flow_uids[3];\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            true.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f6e7ee61-3dd0-4ee1-a631-206867b0bc44",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of result from date range.",
                    "fullTitle": "Enterprise User Users.getUserFlowExecutionLog Should get list of result from date range.",
                    "timedOut": false,
                    "duration": 20,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?from=\" + from_date + \"&to=\" + to_date + '&authtoken=' + authToken;\napi.get(filterURL)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            true.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0859f79a-26f8-4a71-bdea-34225fa7c97e",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of flow-execution for bill status success.",
                    "fullTitle": "Enterprise User Users.getUserFlowExecutionLog Should get list of user streams of flow-execution for bill status success.",
                    "timedOut": false,
                    "duration": 25,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?status=success\";\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            true.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6bda86fc-0893-4b71-911c-5e9bf7c5e4df",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of flow-execution for bill status success for particular flow_uid.",
                    "fullTitle": "Enterprise User Users.getUserFlowExecutionLog Should get list of user streams of flow-execution for bill status success for particular flow_uid.",
                    "timedOut": false,
                    "duration": 22,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?status=success&flow_uid=\" + flow_uids[0];\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            true.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c295aac9-3926-4bb7-85b2-4c1888346880",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of flow-execution for bill status success.",
                    "fullTitle": "Enterprise User Users.getUserFlowExecutionLog Should get list of user streams of flow-execution for bill status success.",
                    "timedOut": false,
                    "duration": 24,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?status=success\";\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            true.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9e24e9bd-83aa-4a18-9ea6-316b164b803d",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of flow-execution for bill status success for particular flow_uid.",
                    "fullTitle": "Enterprise User Users.getUserFlowExecutionLog Should get list of user streams of flow-execution for bill status success for particular flow_uid.",
                    "timedOut": false,
                    "duration": 23,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?status=success&flow_uid=\" + flow_uids[3];\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            true.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5d3cf3bd-b427-4a5a-9bef-e5cca5f457b4",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise User Users.getUserFlowExecutionLog Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "da2e028c-98b4-4bcf-a825-a54ad1791c7a",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "430b1a5b-3fec-4614-bcd6-e71129587fdf",
                  "3396fe61-4ec3-4bab-a4b9-f76b457963b1",
                  "2fa2055f-6588-4742-8696-a9edbf4bb196",
                  "9818d799-812a-4113-9b8f-cfd8f4265825",
                  "ff049aa4-02d9-44cc-b973-d53fdd5587d2",
                  "d48bb921-6a6d-4f6c-9a9c-67ae1ca6dc56",
                  "ae2c95cf-067b-450d-aae4-32ea7d57738d",
                  "2fca5cf7-4ad0-4e40-a170-24df9fcad6f0",
                  "85bb3726-bb53-4534-aedd-54bd9ff2734f",
                  "a2bfc8a7-354e-4877-bd7f-2d229524a69a",
                  "51b6f9f7-8865-47f4-b7c2-8dbf3ba9bf24",
                  "0f35aa04-1676-4690-b93d-8caab7119c06",
                  "c1463b23-fd40-43fe-93fd-06b38477087a",
                  "99ea79bd-1af4-418d-b281-8dfe14b7a03d",
                  "ca6a22de-2c63-4580-b3b0-6f528f6c9738",
                  "3fd24fdd-a709-4133-8299-a1b2b39eeb48",
                  "f6e7ee61-3dd0-4ee1-a631-206867b0bc44",
                  "0859f79a-26f8-4a71-bdea-34225fa7c97e",
                  "6bda86fc-0893-4b71-911c-5e9bf7c5e4df",
                  "c295aac9-3926-4bb7-85b2-4c1888346880",
                  "9e24e9bd-83aa-4a18-9ea6-316b164b803d",
                  "5d3cf3bd-b427-4a5a-9bef-e5cca5f457b4",
                  "da2e028c-98b4-4bcf-a825-a54ad1791c7a"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 473,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "e5324452-c31a-4eab-8557-afdd3e90da75",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\users\\getUserStreamData.enterprise.js",
        "file": "\\controllers\\test\\users\\getUserStreamData.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "c76d3fca-f4cd-404b-a184-b05f326a58a2",
            "title": "User",
            "fullFile": "C:\\work\\api\\controllers\\test\\users\\getUserStreamData.enterprise.js",
            "file": "\\controllers\\test\\users\\getUserStreamData.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "7eec680a-4700-44dc-b215-b1dc725a0449",
                "title": "Users.getUserStreamData",
                "fullFile": "C:\\work\\api\\controllers\\test\\users\\getUserStreamData.enterprise.js",
                "file": "\\controllers\\test\\users\\getUserStreamData.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User Users.getUserStreamData \"before each\" hook",
                    "timedOut": false,
                    "duration": 730,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_org_uid = utils.generateUID();\nremoveEntries(function() {\n    commonMock.setSignUpMocks(httpmock, \"enterprise\");\n    api.post(\"/enterprise/v1/signup\")\n        .send(registrationBody)\n        .expect(httpStatus.CREATED)\n        .end(function(error, res) {\n            if (error) {\n                done(error);\n            } else {\n                authToken = res.body.output.authtoken;\n                user_uid = res.body.output.uid;\n                _id = res.body.output._id;\n                api.get(\"/enterprise/v1/user\")\n                    .set('authtoken', authToken)\n                    .expect(httpStatus.OK)\n                    .end(function(error, res) {\n                        _env_uid = res.body.output.env_uid;\n                        saveBillEntries({\n                            org_uid: _org_uid,\n                            user_uid: user_uid,\n                            env_uid: _env_uid,\n                            authtoken: authToken,\n                            email: res.body.output.email\n                        }, function(error, billEntries) {\n                            if (error) {\n                                done(error);\n                            } else {\n                                _billEntries = billEntries;\n                                saveUserStreamEntries({\n                                    org_uid: _org_uid,\n                                    user_uid: user_uid,\n                                    env_uid: _env_uid,\n                                    authtoken: authToken,\n                                    email: res.body.output.email\n                                }, function(error, userStreamEntries) {\n                                    if (error) {\n                                        done(error);\n                                    } else {\n                                        _userStreamEntries = userStreamEntries;\n                                        done();\n                                    }\n                                });\n                            }\n                        });\n                    });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9d01119c-49c0-4a1b-8d9d-ddb0ea03f408",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise User Users.getUserStreamData \"after all\" hook",
                    "timedOut": false,
                    "duration": 2,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveEntries(function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "08bec341-4ac8-40a2-b0bd-e66500a98fd3",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get list of user stream.",
                    "fullTitle": "Enterprise User Users.getUserStreamData Should get list of user stream.",
                    "timedOut": false,
                    "duration": 22,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects);\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\" &&\n                        (typeof(item.env_uid) == \"undefined\" ||\n                            item.env_uid == _env_uid ||\n                            item.env_uid == null)\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b2d5bd6f-0f8e-4d1c-86a9-8ab38379e8f0",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user stream for particular flow uid.",
                    "fullTitle": "Enterprise User Users.getUserStreamData Should get list of user stream for particular flow uid.",
                    "timedOut": false,
                    "duration": 19,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow_uid=\" + flow_uids[3];\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects);\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\" &&\n                        item.metadata.flow_uid == flow_uids[3];\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b3eed4fa-bfc4-475f-a854-7a5386f2089d",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user stream for particular project uid.",
                    "fullTitle": "Enterprise User Users.getUserStreamData Should get list of user stream for particular project uid.",
                    "timedOut": false,
                    "duration": 20,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?project_uid=\" + project_uids[3];\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects);\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\" &&\n                        item.metadata.project_uid == project_uids[3];\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1a37c0b1-09dd-4c99-a6dd-e168e0f68fff",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user stream for particular flow uid and project uid.",
                    "fullTitle": "Enterprise User Users.getUserStreamData Should get list of user stream for particular flow uid and project uid.",
                    "timedOut": false,
                    "duration": 20,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow_uid=\" + flow_uids[3] + \"&project_uid=\" + project_uids[3];\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects);\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\" &&\n                        item.metadata.flow_uid == flow_uids[3] &&\n                        item.metadata.project_uid == project_uids[3];\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bfbfb7fa-40c6-4025-9e94-18a938b83fa0",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get limited list of user stream based on skip/limit.",
                    "fullTitle": "Enterprise User Users.getUserStreamData Should get limited list of user stream based on skip/limit.",
                    "timedOut": false,
                    "duration": 22,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?skip=2&limit=2&field=created_at&direction=asc\";\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            _models.UserStream.find({\n                \"deleted_at\": null,\n                \"user_uid\": user_uid\n            }, function(error, userStreams) {\n                var isValid = false;\n                if (!error) {\n                    if (typeof(res.body.output.count) != \"undefined\" &&\n                        Array.isArray(res.body.output.objects)) {\n                        userStreams = utils.sortBy(userStreams, \"created_at\", \"date\");\n                        isValid = res.body.output.objects.length == 2;\n                    }\n                }\n                isValid.should.equal(true);\n                done();\n            });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b1b9a259-c016-4dfa-8b68-99f2a0379eb7",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get limited list of user stream based on skip/limit for particular flow_uid.",
                    "fullTitle": "Enterprise User Users.getUserStreamData Should get limited list of user stream based on skip/limit for particular flow_uid.",
                    "timedOut": false,
                    "duration": 20,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?skip=2&limit=2&field=created_at&direction=asc&flow_uid=\" + flow_uids[3];\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            _models.UserStream.find({\n                \"deleted_at\": null,\n                \"user_uid\": user_uid,\n                \"metadata.flow_uid\": flow_uids[3]\n            }, function(error, userStreams) {\n                var isValid = false;\n                if (!error) {\n                    if (typeof(res.body.output.count) != \"undefined\" &&\n                        Array.isArray(res.body.output.objects)) {\n                        isValid = res.body.output.objects.length == 2;\n                    }\n                    if (isValid) {\n                        _.each(res.body.output.objects, function(item) {\n                            isValid = isValid &&\n                                typeof(item._id) == \"undefined\" &&\n                                typeof(item.__v) == \"undefined\" &&\n                                item.metadata.flow_uid == flow_uids[3];\n                        });\n                    }\n                }\n                isValid.should.equal(true);\n                done();\n            });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fe04047e-572f-4388-82fa-3f48249cbf1e",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get limited list of user streams based on skip/limit in title descending order.",
                    "fullTitle": "Enterprise User Users.getUserStreamData Should get limited list of user streams based on skip/limit in title descending order.",
                    "timedOut": false,
                    "duration": 17,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?skip=2&limit=2&field=title&direction=desc\";\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects));\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "21d42793-63a2-4dfd-8f1c-dc4c0764aba6",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get limited list of user streams based on skip/limit in title descending order for particular flow_uid.",
                    "fullTitle": "Enterprise User Users.getUserStreamData Should get limited list of user streams based on skip/limit in title descending order for particular flow_uid.",
                    "timedOut": false,
                    "duration": 20,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?skip=2&limit=2&field=title&direction=desc&flow_uid=\" + flow_uids[3];\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects)) {\n                isValid = res.body.output.objects.length == 2;\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a4ca21d3-5b06-4787-9d2d-bbed6aa396d6",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of flow-execution.",
                    "fullTitle": "Enterprise User Users.getUserStreamData Should get list of user streams of flow-execution.",
                    "timedOut": false,
                    "duration": 25,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=flow-execution\";\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects));\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a123ea19-8d60-4752-a341-12a5b57f4365",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of flow-execution for particular flow_uid.",
                    "fullTitle": "Enterprise User Users.getUserStreamData Should get list of user streams of flow-execution for particular flow_uid.",
                    "timedOut": false,
                    "duration": 23,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=flow-execution&flow_uid=\" + flow_uids[0];\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects)) {\n                isValid = true;\n            }\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\" &&\n                        item.metadata.flow_uid == flow_uids[0];\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "aa19be8d-f5de-4b19-b56f-ad8303117481",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get limited list of user streams of flow-execution based on skip/limit.",
                    "fullTitle": "Enterprise User Users.getUserStreamData Should get limited list of user streams of flow-execution based on skip/limit.",
                    "timedOut": false,
                    "duration": 20,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?skip=1&limit=1&flow=flow-execution\";\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects));\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d3d450bb-6d65-4797-a473-efaf375becf7",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get limited list of user streams of flow-execution based on skip/limit for particular flow_uid.",
                    "fullTitle": "Enterprise User Users.getUserStreamData Should get limited list of user streams of flow-execution based on skip/limit for particular flow_uid.",
                    "timedOut": false,
                    "duration": 21,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?skip=1&limit=1&flow=flow-execution&flow_uid=\" + flow_uids[0];\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects));\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9b5575d7-8229-405c-8f42-7a9f5cd58ca8",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of publish-flow-downloaded.",
                    "fullTitle": "Enterprise User Users.getUserStreamData Should get list of user streams of publish-flow-downloaded.",
                    "timedOut": false,
                    "duration": 19,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=publish-flow-downloaded\";\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects));\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a4e50830-9aba-4caf-a2a5-58c4f817a8af",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of publish-flow-downloaded.",
                    "fullTitle": "Enterprise User Users.getUserStreamData Should get list of user streams of publish-flow-downloaded.",
                    "timedOut": false,
                    "duration": 23,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=publish-flow-downloaded&flow_uid=\" + flow_uids[1];\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects));\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1fe18cd2-13bd-4b36-81a5-840da9c86ee1",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of share-flow.",
                    "fullTitle": "Enterprise User Users.getUserStreamData Should get list of user streams of share-flow.",
                    "timedOut": false,
                    "duration": 19,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=share-flow\";\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects));\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9d90e04e-e64c-4829-bf33-fc252586f3ed",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of share-flow for particular flow_uid.",
                    "fullTitle": "Enterprise User Users.getUserStreamData Should get list of user streams of share-flow for particular flow_uid.",
                    "timedOut": false,
                    "duration": 22,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=share-flow&flow_uid=\" + flow_uids[2];\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects));\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6528a83b-9ce7-4b5a-bdbf-31d6c82db57d",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of credits.",
                    "fullTitle": "Enterprise User Users.getUserStreamData Should get list of user streams of credits.",
                    "timedOut": false,
                    "duration": 25,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=credits\";\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects));\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c4a097a8-d8d1-43eb-95b9-2fa446fb83fc",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of credits for particular flow_uid.",
                    "fullTitle": "Enterprise User Users.getUserStreamData Should get list of user streams of credits for particular flow_uid.",
                    "timedOut": false,
                    "duration": 23,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=credits&flow_uid=\" + flow_uids[3];\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects)) {\n                isValid = true;\n            }\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\" &&\n                        item.metadata.flow_uid == flow_uids[3];\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0483804b-ba1d-41a9-bab9-aeebc6e4d930",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of flow-execution for specific flow.",
                    "fullTitle": "Enterprise User Users.getUserStreamData Should get list of user streams of flow-execution for specific flow.",
                    "timedOut": false,
                    "duration": 21,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=flow-execution&name=utest_cases_01\";\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects));\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d56110fd-4c05-4f13-9d8e-56e5f08f806a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of flow-execution for specific flow for particular flow_uid.",
                    "fullTitle": "Enterprise User Users.getUserStreamData Should get list of user streams of flow-execution for specific flow for particular flow_uid.",
                    "timedOut": false,
                    "duration": 24,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=flow-execution&name=utest_cases_01&flow_uid=\" + flow_uids[3];\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects)) {\n                isValid = true;\n            }\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\" &&\n                        item.metadata.flow_uid == flow_uids[3];\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "35825734-1ee8-4564-9fae-70874bbe041f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of flow-execution for specific detail.",
                    "fullTitle": "Enterprise User Users.getUserStreamData Should get list of user streams of flow-execution for specific detail.",
                    "timedOut": false,
                    "duration": 22,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=flow-execution&detail=command,enabled\";\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects));\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cf731e41-2723-42ec-a0da-1065782dd80c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of flow-execution for specific detail for particular flow_uid.",
                    "fullTitle": "Enterprise User Users.getUserStreamData Should get list of user streams of flow-execution for specific detail for particular flow_uid.",
                    "timedOut": false,
                    "duration": 23,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=flow-execution&detail=command,enabled&flow_uid=\" + flow_uids[1];\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects));\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "857ee636-8669-4990-86c6-fc17d57b5856",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not get list of user streams of flow-execution for specific details.",
                    "fullTitle": "Enterprise User Users.getUserStreamData Should not get list of user streams of flow-execution for specific details.",
                    "timedOut": false,
                    "duration": 23,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=flow-execution&detail=enabled1\";\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects));\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "64a72285-9e0c-45ec-b747-f59cfa16318c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not get list of user streams of flow-execution for specific detail for particular flow_uid.",
                    "fullTitle": "Enterprise User Users.getUserStreamData Should not get list of user streams of flow-execution for specific detail for particular flow_uid.",
                    "timedOut": false,
                    "duration": 20,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=flow-execution&detail=enabled1&flow_uid=\" + flow_uids[3];\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects));\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4a91c4ee-d7cb-4811-afe4-a8679c69fa49",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of publish-flow-downloaded for specific detail.",
                    "fullTitle": "Enterprise User Users.getUserStreamData Should get list of user streams of publish-flow-downloaded for specific detail.",
                    "timedOut": false,
                    "duration": 28,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=publish-flow-downloaded&detail=command,enabled\";\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects));\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a5a322a7-2152-4aa1-9a15-67ec598cc57c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of publish-flow-downloaded for specific detail for particular flow_uid.",
                    "fullTitle": "Enterprise User Users.getUserStreamData Should get list of user streams of publish-flow-downloaded for specific detail for particular flow_uid.",
                    "timedOut": false,
                    "duration": 22,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=publish-flow-downloaded&detail=command,enabled&flow_uid=\" + flow_uids[1];\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects));\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f0ed181f-db06-4848-a750-0b37bb0f345b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not get list of user streams of publish-flow-downloaded for specific detail.",
                    "fullTitle": "Enterprise User Users.getUserStreamData Should not get list of user streams of publish-flow-downloaded for specific detail.",
                    "timedOut": false,
                    "duration": 27,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=publish-flow-downloaded&detail=enabled1\";\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects)) {\n                isValid = res.body.output.objects.length == 0 &&\n                    res.body.output.count == 0;\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5185f097-313d-4977-ab82-aa24766a8e61",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not get list of user streams of publish-flow-downloaded for specific detail for particular flow_uid.",
                    "fullTitle": "Enterprise User Users.getUserStreamData Should not get list of user streams of publish-flow-downloaded for specific detail for particular flow_uid.",
                    "timedOut": false,
                    "duration": 23,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=publish-flow-downloaded&detail=enabled1&flow_uid=\" + flow_uids[3];\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects)) {\n                isValid = res.body.output.objects.length == 0 &&\n                    res.body.output.count == 0;\n            }\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\" &&\n                        item.metadata.flow_uid == flow_uids[3];\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "41d1b5ba-e28e-48e5-9fdf-1f3ef12ba50d",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of share-flow for specific detail.",
                    "fullTitle": "Enterprise User Users.getUserStreamData Should get list of user streams of share-flow for specific detail.",
                    "timedOut": false,
                    "duration": 27,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=share-flow&detail=command,enabled\";\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects));\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "19bb7b11-ed8b-468c-92bc-83269702ad1b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of share-flow for specific detail for particular flow_uid.",
                    "fullTitle": "Enterprise User Users.getUserStreamData Should get list of user streams of share-flow for specific detail for particular flow_uid.",
                    "timedOut": false,
                    "duration": 22,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=share-flow&detail=command,enabled&flow_uid=\" + flow_uids[1];\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects)) {\n                isValid = true;\n            }\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\" &&\n                        item.metadata.flow_uid == flow_uids[1];\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "66215e0b-57c5-4196-a9f3-8d399e2b7942",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not get list of user streams of share-flow for specific detail.",
                    "fullTitle": "Enterprise User Users.getUserStreamData Should not get list of user streams of share-flow for specific detail.",
                    "timedOut": false,
                    "duration": 27,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=share-flow&detail=enabled1\";\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects)) {\n                isValid = res.body.output.objects.length == 0 &&\n                    res.body.output.count == 0;\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bb7effe1-f60b-45d7-a8cb-35fee78df39c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of result from date range.",
                    "fullTitle": "Enterprise User Users.getUserStreamData Should get list of result from date range.",
                    "timedOut": false,
                    "duration": 115,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=flow-execution&from=\" + from_date + \"&to=\" + to_date;\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects)) {\n                isValid = res.body.output.objects.length == 4 &&\n                    res.body.output.count == 4;\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d02c73b9-e142-4a94-9797-b230ff0cae0b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not get list of user streams of share-flow for specific detail for particular flow_uid.",
                    "fullTitle": "Enterprise User Users.getUserStreamData Should not get list of user streams of share-flow for specific detail for particular flow_uid.",
                    "timedOut": false,
                    "duration": 26,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=share-flow&detail=enabled1&flow_uid=\" + flow_uids[3];\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects)) {\n                isValid = res.body.output.objects.length == 0 &&\n                    res.body.output.count == 0;\n            }\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\" &&\n                        item.metadata.flow_uid == flow_uids[3];\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "368199e7-3bed-436d-81cc-6ff9cf2002b1",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of flow-execution for bill status success.",
                    "fullTitle": "Enterprise User Users.getUserStreamData Should get list of user streams of flow-execution for bill status success.",
                    "timedOut": false,
                    "duration": 32,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=flow-execution&status=success\";\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            var successCount = 0;\n            if (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects)) {\n                _.map(res.body.output.objects, function(item) {\n                    var failCount = 0;\n                    _.each(_.filter(_billEntries, { \"_id\": item._id }), function(eachItem) {\n                        if (eachItem.result = \"fail\") {\n                            failCount++;\n                        }\n                    });\n                    if (failCount == 0) {\n                        successCount++;\n                    }\n                });\n                isValid = successCount == res.body.output.count;\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "df849ac6-a8d3-4281-95aa-bb2fe64a066c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of flow-execution for bill status success for particular flow_uid.",
                    "fullTitle": "Enterprise User Users.getUserStreamData Should get list of user streams of flow-execution for bill status success for particular flow_uid.",
                    "timedOut": false,
                    "duration": 25,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=flow-execution&status=success&flow_uid=\" + flow_uids[0];\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            var successCount = 0;\n            if (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects)) {\n                _.map(res.body.output.objects, function(item) {\n                    var failCount = 0;\n                    _.each(_.filter(_billEntries, { \"_id\": item._id }), function(eachItem) {\n                        if (eachItem.result = \"fail\") {\n                            failCount++;\n                        }\n                    });\n                    if (failCount == 0) {\n                        successCount++;\n                    }\n                });\n                isValid = successCount == res.body.output.count;\n            }\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\" &&\n                        item.metadata.flow_uid == flow_uids[0];\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "078eeb91-2ac0-49a5-8a6e-e64b872bc7d7",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of flow-execution for bill status success.",
                    "fullTitle": "Enterprise User Users.getUserStreamData Should get list of user streams of flow-execution for bill status success.",
                    "timedOut": false,
                    "duration": 29,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=flow-execution&status=success\";\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            var successCount = 0;\n            if (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects)) {\n                _.map(res.body.output.objects, function(item) {\n                    var failCount = 0;\n                    _.each(_.filter(_billEntries, { \"_id\": item._id }), function(eachItem) {\n                        if (eachItem.result = \"fail\") {\n                            failCount++;\n                        }\n                    });\n                    if (failCount == 0) {\n                        successCount++;\n                    }\n                });\n                isValid = successCount == res.body.output.count;\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "18d5109b-9a66-4195-901a-ec3396190314",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of flow-execution for bill status success for particular flow_uid.",
                    "fullTitle": "Enterprise User Users.getUserStreamData Should get list of user streams of flow-execution for bill status success for particular flow_uid.",
                    "timedOut": false,
                    "duration": 26,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=flow-execution&status=success&flow_uid=\" + flow_uids[3];\napi.get(filterURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            var successCount = 0;\n            if (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects)) {\n                _.map(res.body.output.objects, function(item) {\n                    var failCount = 0;\n                    _.each(_.filter(_billEntries, { \"_id\": item._id }), function(eachItem) {\n                        if (eachItem.result = \"fail\") {\n                            failCount++;\n                        }\n                    });\n                    if (failCount == 0) {\n                        successCount++;\n                    }\n                });\n                isValid = successCount == res.body.output.count;\n            }\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\" &&\n                        item.metadata.flow_uid == flow_uids[3];\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e6ede177-bd22-4327-820d-de467587c98e",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise User Users.getUserStreamData Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "08734c6b-a8fa-44d4-a626-b84908d9fa39",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "b2d5bd6f-0f8e-4d1c-86a9-8ab38379e8f0",
                  "b3eed4fa-bfc4-475f-a854-7a5386f2089d",
                  "1a37c0b1-09dd-4c99-a6dd-e168e0f68fff",
                  "bfbfb7fa-40c6-4025-9e94-18a938b83fa0",
                  "b1b9a259-c016-4dfa-8b68-99f2a0379eb7",
                  "fe04047e-572f-4388-82fa-3f48249cbf1e",
                  "21d42793-63a2-4dfd-8f1c-dc4c0764aba6",
                  "a4ca21d3-5b06-4787-9d2d-bbed6aa396d6",
                  "a123ea19-8d60-4752-a341-12a5b57f4365",
                  "aa19be8d-f5de-4b19-b56f-ad8303117481",
                  "d3d450bb-6d65-4797-a473-efaf375becf7",
                  "9b5575d7-8229-405c-8f42-7a9f5cd58ca8",
                  "a4e50830-9aba-4caf-a2a5-58c4f817a8af",
                  "1fe18cd2-13bd-4b36-81a5-840da9c86ee1",
                  "9d90e04e-e64c-4829-bf33-fc252586f3ed",
                  "6528a83b-9ce7-4b5a-bdbf-31d6c82db57d",
                  "c4a097a8-d8d1-43eb-95b9-2fa446fb83fc",
                  "0483804b-ba1d-41a9-bab9-aeebc6e4d930",
                  "d56110fd-4c05-4f13-9d8e-56e5f08f806a",
                  "35825734-1ee8-4564-9fae-70874bbe041f",
                  "cf731e41-2723-42ec-a0da-1065782dd80c",
                  "857ee636-8669-4990-86c6-fc17d57b5856",
                  "64a72285-9e0c-45ec-b747-f59cfa16318c",
                  "4a91c4ee-d7cb-4811-afe4-a8679c69fa49",
                  "a5a322a7-2152-4aa1-9a15-67ec598cc57c",
                  "f0ed181f-db06-4848-a750-0b37bb0f345b",
                  "5185f097-313d-4977-ab82-aa24766a8e61",
                  "41d1b5ba-e28e-48e5-9fdf-1f3ef12ba50d",
                  "19bb7b11-ed8b-468c-92bc-83269702ad1b",
                  "66215e0b-57c5-4196-a9f3-8d399e2b7942",
                  "bb7effe1-f60b-45d7-a8cb-35fee78df39c",
                  "d02c73b9-e142-4a94-9797-b230ff0cae0b",
                  "368199e7-3bed-436d-81cc-6ff9cf2002b1",
                  "df849ac6-a8d3-4281-95aa-bb2fe64a066c",
                  "078eeb91-2ac0-49a5-8a6e-e64b872bc7d7",
                  "18d5109b-9a66-4195-901a-ec3396190314",
                  "e6ede177-bd22-4327-820d-de467587c98e",
                  "08734c6b-a8fa-44d4-a626-b84908d9fa39"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 946,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "a04264d9-c4a1-4000-995f-284bcd992dd0",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\users\\getUserStreamDataOrg.enterprise.js",
        "file": "\\controllers\\test\\users\\getUserStreamDataOrg.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "33fb1726-c31a-4e16-9be0-ce40ce03f602",
            "title": "User",
            "fullFile": "C:\\work\\api\\controllers\\test\\users\\getUserStreamDataOrg.enterprise.js",
            "file": "\\controllers\\test\\users\\getUserStreamDataOrg.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "1a064e6e-8ca3-466e-a569-78907ba5d3b0",
                "title": "Users.getUserStreamDataOrg",
                "fullFile": "C:\\work\\api\\controllers\\test\\users\\getUserStreamDataOrg.enterprise.js",
                "file": "\\controllers\\test\\users\\getUserStreamDataOrg.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Enterprise User Users.getUserStreamDataOrg \"before all\" hook",
                    "timedOut": false,
                    "duration": 760,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        api.get(\"/enterprise/v1/user\")\n            .set('authtoken', authToken)\n            .set('org_uid', org_uid)\n            .expect(httpStatus.OK)\n            .end(function(error, res) {\n                var env_uid = res.body.output.env_uid;\n                saveBillEntries({\n                    user_uid: user_uid,\n                    authtoken: authToken,\n                    email: data.owner.email,\n                    env_uid: env_uid\n                }, function(error, billEntries) {\n                    if (error) {\n                        done(error);\n                    } else {\n                        _billEntries = billEntries;\n                        saveUserStreamEntries({\n                            user_uid: user_uid,\n                            authtoken: authToken,\n                            email: data.owner.email,\n                            env_uid: env_uid\n                        }, function(error, userStreamEntries) {\n                            if (error) {\n                                done(error);\n                            } else {\n                                _userStreamEntries = userStreamEntries;\n                                done();\n                            }\n                        });\n                    }\n                });\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9920afc5-d46f-487e-bf46-e9af2e0d5867",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise User Users.getUserStreamDataOrg \"after all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "84ce0c30-c024-462a-9d88-8805c338bd24",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get list of user stream.",
                    "fullTitle": "Enterprise User Users.getUserStreamDataOrg Should get list of user stream.",
                    "timedOut": false,
                    "duration": 25,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects);\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\";\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "372d7704-4b82-467f-8543-8887f0fd9c53",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user stream for particular flow uid.",
                    "fullTitle": "Enterprise User Users.getUserStreamDataOrg Should get list of user stream for particular flow uid.",
                    "timedOut": false,
                    "duration": 22,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow_uid=\" + flow_uids[3];\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects);\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\" &&\n                        item.metadata.flow_uid == flow_uids[3];\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b2c4b87d-ffb7-4a01-b2db-bdafa9630958",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user stream for particular project uid.",
                    "fullTitle": "Enterprise User Users.getUserStreamDataOrg Should get list of user stream for particular project uid.",
                    "timedOut": false,
                    "duration": 23,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?project_uid=\" + project_uids[3];\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects);\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\" &&\n                        item.metadata.project_uid == project_uids[3];\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6c770027-cdb3-4653-8bf6-3a5aef2a4cd6",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user stream for particular flow uid and project uid.",
                    "fullTitle": "Enterprise User Users.getUserStreamDataOrg Should get list of user stream for particular flow uid and project uid.",
                    "timedOut": false,
                    "duration": 21,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow_uid=\" + flow_uids[3] + \"&project_uid=\" + project_uids[3];\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects);\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\" &&\n                        item.metadata.flow_uid == flow_uids[3] &&\n                        item.metadata.project_uid == project_uids[3];\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fa82cde5-f96b-4d19-a7a7-9cf2ad269033",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get limited list of user stream based on skip/limit.",
                    "fullTitle": "Enterprise User Users.getUserStreamDataOrg Should get limited list of user stream based on skip/limit.",
                    "timedOut": false,
                    "duration": 29,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?skip=2&limit=2&field=created_at&direction=asc\";\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            _models.UserStream.find({\n                \"deleted_at\": null,\n                \"user_uid\": user_uid\n            }, function(error, userStreams) {\n                var isValid = false;\n                if (!error) {\n                    if (typeof(res.body.output.count) != \"undefined\" &&\n                        Array.isArray(res.body.output.objects)) {\n                        userStreams = utils.sortBy(userStreams, \"created_at\", \"date\");\n                        isValid = res.body.output.objects.length == 2;\n                    }\n                }\n                isValid.should.equal(true);\n                done();\n            });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f4f74fdd-fbe6-40f0-bb72-0b0761a831fb",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get limited list of user stream based on skip/limit for particular flow_uid.",
                    "fullTitle": "Enterprise User Users.getUserStreamDataOrg Should get limited list of user stream based on skip/limit for particular flow_uid.",
                    "timedOut": false,
                    "duration": 26,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?skip=2&limit=2&field=created_at&direction=asc&flow_uid=\" + flow_uids[3];\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            _models.UserStream.find({\n                \"deleted_at\": null,\n                \"user_uid\": user_uid,\n                \"metadata.flow_uid\": flow_uids[3]\n            }, function(error, userStreams) {\n                var isValid = false;\n                if (!error) {\n                    if (typeof(res.body.output.count) != \"undefined\" &&\n                        Array.isArray(res.body.output.objects)) {\n                        isValid = res.body.output.objects.length == 2;\n                    }\n                    if (isValid) {\n                        _.each(res.body.output.objects, function(item) {\n                            isValid = isValid &&\n                                typeof(item._id) == \"undefined\" &&\n                                typeof(item.__v) == \"undefined\" &&\n                                item.metadata.flow_uid == flow_uids[3];\n                        });\n                    }\n                }\n                isValid.should.equal(true);\n                done();\n            });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3a54298d-944f-4274-b345-89cf35433e7c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get limited list of user streams based on skip/limit in title descending order.",
                    "fullTitle": "Enterprise User Users.getUserStreamDataOrg Should get limited list of user streams based on skip/limit in title descending order.",
                    "timedOut": false,
                    "duration": 22,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?skip=2&limit=2&field=title&direction=desc\";\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects));\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "13f660dc-e31b-428b-a015-63f875966ad1",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get limited list of user streams based on skip/limit in title descending order for particular flow_uid.",
                    "fullTitle": "Enterprise User Users.getUserStreamDataOrg Should get limited list of user streams based on skip/limit in title descending order for particular flow_uid.",
                    "timedOut": false,
                    "duration": 21,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?skip=2&limit=2&field=title&direction=desc&flow_uid=\" + flow_uids[3];\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects)) {\n                _userStreamEntries = utils.sortBy(_userStreamEntries, \"body.output.title\");\n                isValid = res.body.output.objects.length == 2 &&\n                    res.body.output.objects[0].metadata.flow_uid == flow_uids[3] &&\n                    res.body.output.objects[1].metadata.flow_uid == flow_uids[3];\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "af2bce26-cd53-4a11-a3d8-4db636360ee1",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of flow-execution.",
                    "fullTitle": "Enterprise User Users.getUserStreamDataOrg Should get list of user streams of flow-execution.",
                    "timedOut": false,
                    "duration": 22,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=flow-execution\";\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects));\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9505367d-aae1-44c3-b4b5-23c87234cd6c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of flow-execution for particular flow_uid.",
                    "fullTitle": "Enterprise User Users.getUserStreamDataOrg Should get list of user streams of flow-execution for particular flow_uid.",
                    "timedOut": false,
                    "duration": 22,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=flow-execution&flow_uid=\" + flow_uids[0];\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects)) {\n                isValid = true;\n            }\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\" &&\n                        item.metadata.flow_uid == flow_uids[0];\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "07fae45f-5f63-46e5-8be0-976dbb4e8dcb",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get limited list of user streams of flow-execution based on skip/limit.",
                    "fullTitle": "Enterprise User Users.getUserStreamDataOrg Should get limited list of user streams of flow-execution based on skip/limit.",
                    "timedOut": false,
                    "duration": 23,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?skip=1&limit=1&flow=flow-execution\";\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects));\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "785cb840-4906-4cb1-8723-344b2ce0444a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get limited list of user streams of flow-execution based on skip/limit for particular flow_uid.",
                    "fullTitle": "Enterprise User Users.getUserStreamDataOrg Should get limited list of user streams of flow-execution based on skip/limit for particular flow_uid.",
                    "timedOut": false,
                    "duration": 21,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?skip=1&limit=1&flow=flow-execution&flow_uid=\" + flow_uids[0];\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects)) {\n                isValid = res.body.output.objects.length == 1 &&\n                    res.body.output.objects[0].metadata.flow_uid == flow_uids[0];\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cd810a4c-940a-44fe-9758-2363a64dc5b6",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of publish-flow-downloaded.",
                    "fullTitle": "Enterprise User Users.getUserStreamDataOrg Should get list of user streams of publish-flow-downloaded.",
                    "timedOut": false,
                    "duration": 24,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=publish-flow-downloaded\";\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects));\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ee163bba-edf6-491b-b683-00c5f8438ae7",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of publish-flow-downloaded.",
                    "fullTitle": "Enterprise User Users.getUserStreamDataOrg Should get list of user streams of publish-flow-downloaded.",
                    "timedOut": false,
                    "duration": 22,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=publish-flow-downloaded&flow_uid=\" + flow_uids[1];\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects));\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6b2c82d2-1bb9-4b66-905f-56149d14f0a2",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of share-flow.",
                    "fullTitle": "Enterprise User Users.getUserStreamDataOrg Should get list of user streams of share-flow.",
                    "timedOut": false,
                    "duration": 22,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=share-flow\";\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects));\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f4d734af-7415-438c-8884-9480b98fc5dd",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of share-flow for particular flow_uid.",
                    "fullTitle": "Enterprise User Users.getUserStreamDataOrg Should get list of user streams of share-flow for particular flow_uid.",
                    "timedOut": false,
                    "duration": 22,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=share-flow&flow_uid=\" + flow_uids[2];\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects)) {\n                isValid = true;\n            }\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\" &&\n                        item.metadata.flow_uid == flow_uids[2];\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f121c258-0068-455d-b1aa-f5c87693cf08",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of credits.",
                    "fullTitle": "Enterprise User Users.getUserStreamDataOrg Should get list of user streams of credits.",
                    "timedOut": false,
                    "duration": 22,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=credits\";\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects));\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7ac7b05c-2988-4500-990a-226d966b3fb9",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of credits for particular flow_uid.",
                    "fullTitle": "Enterprise User Users.getUserStreamDataOrg Should get list of user streams of credits for particular flow_uid.",
                    "timedOut": false,
                    "duration": 22,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=credits&flow_uid=\" + flow_uids[3];\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects)) {\n                isValid = true;\n            }\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\" &&\n                        item.metadata.flow_uid == flow_uids[3];\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "49b17ee8-d453-4435-86d9-c27f69eacf17",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of flow-execution for specific flow.",
                    "fullTitle": "Enterprise User Users.getUserStreamDataOrg Should get list of user streams of flow-execution for specific flow.",
                    "timedOut": false,
                    "duration": 22,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=flow-execution&name=utest_cases_01\";\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects));\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "29ce06aa-61bc-43cd-8450-382116cd1948",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of flow-execution for specific flow for particular flow_uid.",
                    "fullTitle": "Enterprise User Users.getUserStreamDataOrg Should get list of user streams of flow-execution for specific flow for particular flow_uid.",
                    "timedOut": false,
                    "duration": 21,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=flow-execution&name=utest_cases_01&flow_uid=\" + flow_uids[3];\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects)) {\n                isValid = true;\n            }\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\" &&\n                        item.metadata.flow_uid == flow_uids[3];\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b77f6a0d-bc45-4eec-b926-c7b23b0c1c18",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of flow-execution for specific detail.",
                    "fullTitle": "Enterprise User Users.getUserStreamDataOrg Should get list of user streams of flow-execution for specific detail.",
                    "timedOut": false,
                    "duration": 26,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=flow-execution&detail=command,enabled\";\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects));\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "564bea00-6cdc-4101-ac3d-f562436fec60",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of flow-execution for specific detail for particular flow_uid.",
                    "fullTitle": "Enterprise User Users.getUserStreamDataOrg Should get list of user streams of flow-execution for specific detail for particular flow_uid.",
                    "timedOut": false,
                    "duration": 23,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=flow-execution&detail=command,enabled&flow_uid=\" + flow_uids[1];\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects)) {\n                isValid = true;\n            }\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\" &&\n                        item.metadata.flow_uid == flow_uids[1];\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "139ee3c4-45eb-464a-8a5f-24e43a4ef523",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not get list of user streams of flow-execution for specific detail.",
                    "fullTitle": "Enterprise User Users.getUserStreamDataOrg Should not get list of user streams of flow-execution for specific detail.",
                    "timedOut": false,
                    "duration": 19,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=flow-execution&detail=enabled1\";\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects)) {\n                isValid = res.body.output.objects.length == 0 &&\n                    res.body.output.count == 0;\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3b68b318-cf0c-476a-a94f-7c175f232db5",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not get list of user streams of flow-execution for specific detail for particular flow_uid.",
                    "fullTitle": "Enterprise User Users.getUserStreamDataOrg Should not get list of user streams of flow-execution for specific detail for particular flow_uid.",
                    "timedOut": false,
                    "duration": 20,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=flow-execution&detail=enabled1&flow_uid=\" + flow_uids[3];\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects)) {\n                isValid = res.body.output.objects.length == 0 &&\n                    res.body.output.count == 0;\n            }\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\" &&\n                        item.metadata.flow_uid == flow_uids[3];\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "df4c1f31-d693-4f10-8a2c-b202989742dd",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of publish-flow-downloaded for specific detail.",
                    "fullTitle": "Enterprise User Users.getUserStreamDataOrg Should get list of user streams of publish-flow-downloaded for specific detail.",
                    "timedOut": false,
                    "duration": 23,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=publish-flow-downloaded&detail=command,enabled\";\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects));\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9c69aae3-13e1-4cce-bcd6-8f7b5cf5c5c7",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of publish-flow-downloaded for specific detail for particular flow_uid.",
                    "fullTitle": "Enterprise User Users.getUserStreamDataOrg Should get list of user streams of publish-flow-downloaded for specific detail for particular flow_uid.",
                    "timedOut": false,
                    "duration": 23,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=publish-flow-downloaded&detail=command,enabled&flow_uid=\" + flow_uids[1];\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects)) {\n                isValid = true;\n            }\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\" &&\n                        item.metadata.flow_uid == flow_uids[1];\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "13dc5744-087e-46ee-b805-17340493ad6e",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not get list of user streams of publish-flow-downloaded for specific detail.",
                    "fullTitle": "Enterprise User Users.getUserStreamDataOrg Should not get list of user streams of publish-flow-downloaded for specific detail.",
                    "timedOut": false,
                    "duration": 25,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=publish-flow-downloaded&detail=enabled1\";\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects)) {\n                isValid = res.body.output.objects.length == 0 &&\n                    res.body.output.count == 0;\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "765c8c87-fa58-42e8-ba74-5d072d47c37c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not get list of user streams of publish-flow-downloaded for specific detail for particular flow_uid.",
                    "fullTitle": "Enterprise User Users.getUserStreamDataOrg Should not get list of user streams of publish-flow-downloaded for specific detail for particular flow_uid.",
                    "timedOut": false,
                    "duration": 21,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=publish-flow-downloaded&detail=enabled1&flow_uid=\" + flow_uids[3];\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects)) {\n                isValid = res.body.output.objects.length == 0 &&\n                    res.body.output.count == 0;\n            }\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\" &&\n                        item.metadata.flow_uid == flow_uids[3];\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9e415a7c-efa1-4cfa-b379-56a21874e7ef",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of share-flow for specific detail.",
                    "fullTitle": "Enterprise User Users.getUserStreamDataOrg Should get list of user streams of share-flow for specific detail.",
                    "timedOut": false,
                    "duration": 23,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=share-flow&detail=command,enabled\";\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects));\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d72ec834-3fe9-42a8-9e43-4041e5016cf5",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of share-flow for specific detail for particular flow_uid.",
                    "fullTitle": "Enterprise User Users.getUserStreamDataOrg Should get list of user streams of share-flow for specific detail for particular flow_uid.",
                    "timedOut": false,
                    "duration": 25,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=share-flow&detail=command,enabled&flow_uid=\" + flow_uids[1];\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects)) {\n                isValid = true;\n            }\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\" &&\n                        item.metadata.flow_uid == flow_uids[1];\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2c07ca41-9e79-45b9-ac4a-3e5f323be942",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not get list of user streams of share-flow for specific detail.",
                    "fullTitle": "Enterprise User Users.getUserStreamDataOrg Should not get list of user streams of share-flow for specific detail.",
                    "timedOut": false,
                    "duration": 21,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=share-flow&detail=enabled1\";\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects)) {\n                isValid = res.body.output.objects.length == 0 &&\n                    res.body.output.count == 0;\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e98a18d8-2b37-4639-a84c-43d7131d26f1",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not get list of user streams of share-flow for specific detail for particular flow_uid.",
                    "fullTitle": "Enterprise User Users.getUserStreamDataOrg Should not get list of user streams of share-flow for specific detail for particular flow_uid.",
                    "timedOut": false,
                    "duration": 25,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=share-flow&detail=enabled1&flow_uid=\" + flow_uids[3];\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects)) {\n                isValid = res.body.output.objects.length == 0 &&\n                    res.body.output.count == 0;\n            }\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\" &&\n                        item.metadata.flow_uid == flow_uids[3];\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "053e2c5a-3afd-4d68-8b3f-e2fb74d83125",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of flow-execution for bill status success.",
                    "fullTitle": "Enterprise User Users.getUserStreamDataOrg Should get list of user streams of flow-execution for bill status success.",
                    "timedOut": false,
                    "duration": 22,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=flow-execution&status=success\";\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            var successCount = 0;\n            if (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects)) {\n                _.map(res.body.output.objects, function(item) {\n                    var failCount = 0;\n                    _.each(_.filter(_billEntries, { \"_id\": item._id }), function(eachItem) {\n                        if (eachItem.result = \"fail\") {\n                            failCount++;\n                        }\n                    });\n                    if (failCount == 0) {\n                        successCount++;\n                    }\n                });\n                isValid = successCount == res.body.output.count;\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a073a363-ba5d-40a6-807c-4580734b83c3",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of flow-execution for bill status success for particular flow_uid.",
                    "fullTitle": "Enterprise User Users.getUserStreamDataOrg Should get list of user streams of flow-execution for bill status success for particular flow_uid.",
                    "timedOut": false,
                    "duration": 23,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=flow-execution&status=success&flow_uid=\" + flow_uids[0];\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            var successCount = 0;\n            if (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects)) {\n                _.map(res.body.output.objects, function(item) {\n                    var failCount = 0;\n                    _.each(_.filter(_billEntries, { \"_id\": item._id }), function(eachItem) {\n                        if (eachItem.result = \"fail\") {\n                            failCount++;\n                        }\n                    });\n                    if (failCount == 0) {\n                        successCount++;\n                    }\n                });\n                isValid = successCount == res.body.output.count;\n            }\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\" &&\n                        item.metadata.flow_uid == flow_uids[0];\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cf5e57e2-8e44-4c22-831e-491757abb890",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of flow-execution for bill status success.",
                    "fullTitle": "Enterprise User Users.getUserStreamDataOrg Should get list of user streams of flow-execution for bill status success.",
                    "timedOut": false,
                    "duration": 21,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=flow-execution&status=success\";\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            var successCount = 0;\n            if (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects)) {\n                _.map(res.body.output.objects, function(item) {\n                    var failCount = 0;\n                    _.each(_.filter(_billEntries, { \"_id\": item._id }), function(eachItem) {\n                        if (eachItem.result = \"fail\") {\n                            failCount++;\n                        }\n                    });\n                    if (failCount == 0) {\n                        successCount++;\n                    }\n                });\n                isValid = successCount == res.body.output.count;\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "eab9fd7f-1d85-4226-beb3-ca867bd8bba0",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of user streams of flow-execution for bill status success for particular flow_uid.",
                    "fullTitle": "Enterprise User Users.getUserStreamDataOrg Should get list of user streams of flow-execution for bill status success for particular flow_uid.",
                    "timedOut": false,
                    "duration": 22,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar filterURL = apiURL + \"?flow=flow-execution&status=success&flow_uid=\" + flow_uids[3];\napi.get(filterURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            var successCount = 0;\n            if (typeof(res.body.output.count) != \"undefined\" &&\n                Array.isArray(res.body.output.objects)) {\n                _.map(res.body.output.objects, function(item) {\n                    var failCount = 0;\n                    _.each(_.filter(_billEntries, { \"_id\": item._id }), function(eachItem) {\n                        if (eachItem.result = \"fail\") {\n                            failCount++;\n                        }\n                    });\n                    if (failCount == 0) {\n                        successCount++;\n                    }\n                });\n                isValid = successCount == res.body.output.count;\n            }\n            if (isValid) {\n                _.each(res.body.output.objects, function(item) {\n                    isValid = isValid &&\n                        typeof(item._id) == \"undefined\" &&\n                        typeof(item.__v) == \"undefined\" &&\n                        item.metadata.flow_uid == flow_uids[3];\n                });\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "39ff15c1-d6c2-4fd6-95bd-824d51381c3d",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise User Users.getUserStreamDataOrg Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6a2f6afe-17c4-4abe-a6ba-f7cd61ecea9b",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "372d7704-4b82-467f-8543-8887f0fd9c53",
                  "b2c4b87d-ffb7-4a01-b2db-bdafa9630958",
                  "6c770027-cdb3-4653-8bf6-3a5aef2a4cd6",
                  "fa82cde5-f96b-4d19-a7a7-9cf2ad269033",
                  "f4f74fdd-fbe6-40f0-bb72-0b0761a831fb",
                  "3a54298d-944f-4274-b345-89cf35433e7c",
                  "13f660dc-e31b-428b-a015-63f875966ad1",
                  "af2bce26-cd53-4a11-a3d8-4db636360ee1",
                  "9505367d-aae1-44c3-b4b5-23c87234cd6c",
                  "07fae45f-5f63-46e5-8be0-976dbb4e8dcb",
                  "785cb840-4906-4cb1-8723-344b2ce0444a",
                  "cd810a4c-940a-44fe-9758-2363a64dc5b6",
                  "ee163bba-edf6-491b-b683-00c5f8438ae7",
                  "6b2c82d2-1bb9-4b66-905f-56149d14f0a2",
                  "f4d734af-7415-438c-8884-9480b98fc5dd",
                  "f121c258-0068-455d-b1aa-f5c87693cf08",
                  "7ac7b05c-2988-4500-990a-226d966b3fb9",
                  "49b17ee8-d453-4435-86d9-c27f69eacf17",
                  "29ce06aa-61bc-43cd-8450-382116cd1948",
                  "b77f6a0d-bc45-4eec-b926-c7b23b0c1c18",
                  "564bea00-6cdc-4101-ac3d-f562436fec60",
                  "139ee3c4-45eb-464a-8a5f-24e43a4ef523",
                  "3b68b318-cf0c-476a-a94f-7c175f232db5",
                  "df4c1f31-d693-4f10-8a2c-b202989742dd",
                  "9c69aae3-13e1-4cce-bcd6-8f7b5cf5c5c7",
                  "13dc5744-087e-46ee-b805-17340493ad6e",
                  "765c8c87-fa58-42e8-ba74-5d072d47c37c",
                  "9e415a7c-efa1-4cfa-b379-56a21874e7ef",
                  "d72ec834-3fe9-42a8-9e43-4041e5016cf5",
                  "2c07ca41-9e79-45b9-ac4a-3e5f323be942",
                  "e98a18d8-2b37-4639-a84c-43d7131d26f1",
                  "053e2c5a-3afd-4d68-8b3f-e2fb74d83125",
                  "a073a363-ba5d-40a6-807c-4580734b83c3",
                  "cf5e57e2-8e44-4c22-831e-491757abb890",
                  "eab9fd7f-1d85-4226-beb3-ca867bd8bba0",
                  "39ff15c1-d6c2-4fd6-95bd-824d51381c3d",
                  "6a2f6afe-17c4-4abe-a6ba-f7cd61ecea9b"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 819,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "e1cdb681-31e7-40cb-8a4e-48da70c3d3b6",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\users\\getUserStreamDistinctFlowNames.enterprise.js",
        "file": "\\controllers\\test\\users\\getUserStreamDistinctFlowNames.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "f2cfc6ca-759a-4b6d-b851-9291d8d1e184",
            "title": "User",
            "fullFile": "C:\\work\\api\\controllers\\test\\users\\getUserStreamDistinctFlowNames.enterprise.js",
            "file": "\\controllers\\test\\users\\getUserStreamDistinctFlowNames.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "b0f12db2-79fb-4039-8855-303ede098e0e",
                "title": "User.getUserStreamDistinctFlowNames",
                "fullFile": "C:\\work\\api\\controllers\\test\\users\\getUserStreamDistinctFlowNames.enterprise.js",
                "file": "\\controllers\\test\\users\\getUserStreamDistinctFlowNames.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Enterprise User User.getUserStreamDistinctFlowNames \"before all\" hook",
                    "timedOut": false,
                    "duration": 913,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveEntries(function() {\n    commonMock.setSignUpMocks(httpmock, \"enterprise\");\n    api.post(\"/enterprise/v1/signup\")\n        .send(registrationBody)\n        .expect(httpStatus.CREATED)\n        .end(function(error, res) {\n            if (error) {\n                done(error);\n            } else {\n                authToken = res.body.output.authtoken;\n                commonMock.brainTreeClientToken(httpmock, \"enterprise\");\n                api.get(\"/enterprise/v1/user\")\n                    .set('authtoken', authToken)\n                    .expect(httpStatus.OK)\n                    .end(function(error, res) {\n                        if (error) {\n                            done(error);\n                        } else {\n                            user_uid = res.body.output.uid;\n                            env_uid = res.body.output.env_uid;\n                            _id = res.body.output._id;\n                            saveBillEntries({\n                                user_uid: user_uid,\n                                authtoken: authToken,\n                                email: res.body.output.email\n                            }, function(error, billEntries) {\n                                if (error) {\n                                    done(error);\n                                } else {\n                                    _billEntries = billEntries;\n                                    saveUserStreamEntries({\n                                        user_uid: user_uid,\n                                        authtoken: authToken,\n                                        email: res.body.output.email\n                                    }, function(error, userStreamEntries) {\n                                        if (error) {\n                                            done(error);\n                                        } else {\n                                            _userStreamEntries = userStreamEntries;\n                                            done();\n                                        }\n                                    });\n                                }\n                            });\n                        }\n                    });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "09f09c83-d776-4ec3-9b3f-8a6edfd0faf6",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise User User.getUserStreamDistinctFlowNames \"after all\" hook",
                    "timedOut": false,
                    "duration": 2,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveEntries(function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f8db43ce-0233-460a-8685-3fba8b1a3cc1",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get distinct list of flow names in user stream.",
                    "fullTitle": "Enterprise User User.getUserStreamDistinctFlowNames Should get distinct list of flow names in user stream.",
                    "timedOut": false,
                    "duration": 17,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL.replace(\"{type}\", \"flows\"))\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = Array.isArray(res.body.output.objects);\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "02fec8c5-dab9-4842-8c7d-5949c45243b4",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get distinct list of projects names in user stream.",
                    "fullTitle": "Enterprise User User.getUserStreamDistinctFlowNames Should get distinct list of projects names in user stream.",
                    "timedOut": false,
                    "duration": 17,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL.replace(\"{type}\", \"projects\"))\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = Array.isArray(res.body.output.objects);\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0b732223-6de8-4b7e-820c-87bdbfcb8274",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise User User.getUserStreamDistinctFlowNames Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ed82c5f0-18da-4a98-8971-10d8885db8dd",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "02fec8c5-dab9-4842-8c7d-5949c45243b4",
                  "0b732223-6de8-4b7e-820c-87bdbfcb8274",
                  "ed82c5f0-18da-4a98-8971-10d8885db8dd"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 38,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "797e541e-6cc7-40f7-9ca8-02ec05aaa83e",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\users\\getUserStreamDistinctFlowNamesOrg.enterprise.js",
        "file": "\\controllers\\test\\users\\getUserStreamDistinctFlowNamesOrg.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "752547d1-af08-4522-a155-bab6962b5c6d",
            "title": "User",
            "fullFile": "C:\\work\\api\\controllers\\test\\users\\getUserStreamDistinctFlowNamesOrg.enterprise.js",
            "file": "\\controllers\\test\\users\\getUserStreamDistinctFlowNamesOrg.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "5042a503-1033-452d-bd25-be90a4e70273",
                "title": "User.getUserStreamDistinctFlowNamesOrg",
                "fullFile": "C:\\work\\api\\controllers\\test\\users\\getUserStreamDistinctFlowNamesOrg.enterprise.js",
                "file": "\\controllers\\test\\users\\getUserStreamDistinctFlowNamesOrg.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Enterprise User User.getUserStreamDistinctFlowNamesOrg \"before all\" hook",
                    "timedOut": false,
                    "duration": 587,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        api.get(\"/enterprise/v1/user\")\n            .set('org_uid', org_uid)\n            .set('authtoken', authToken)\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                env_uid = res.body.output.env_uid;\n                saveBillEntries({\n                    user_uid: user_uid,\n                    authtoken: authToken,\n                    email: data.owner.email\n                }, function(error, billEntries) {\n                    if (error) {\n                        done(error);\n                    } else {\n                        _billEntries = billEntries;\n                        saveUserStreamEntries({\n                            user_uid: user_uid,\n                            authtoken: authToken,\n                            email: data.owner.email\n                        }, function(error, userStreamEntries) {\n                            if (error) {\n                                done(error);\n                            } else {\n                                _userStreamEntries = userStreamEntries;\n                                done();\n                            }\n                        });\n                    }\n                });\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4d22c826-9755-413f-a23d-4ba0ca5cf35f",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise User User.getUserStreamDistinctFlowNamesOrg \"after all\" hook",
                    "timedOut": false,
                    "duration": 1,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveEntries(function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "df6ace7d-4068-4ee0-883e-7968f6181661",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get distinct list of flow names in user stream.",
                    "fullTitle": "Enterprise User User.getUserStreamDistinctFlowNamesOrg Should get distinct list of flow names in user stream.",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL.replace(\"{type}\", \"workflows\"))\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = Array.isArray(res.body.output.objects);\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ac45e606-9077-4cfa-8af3-0e4540823f5c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get distinct list of flow based on projects.",
                    "fullTitle": "Enterprise User User.getUserStreamDistinctFlowNamesOrg Should get distinct list of flow based on projects.",
                    "timedOut": false,
                    "duration": 17,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar userStreamURL = apiURL.replace(\"{type}\", \"workflows\") + \"&project_uid=\" + project_uids[0] + \",\" + project_uids[1];\napi.get(userStreamURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = Array.isArray(res.body.output.objects);\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4152a2e1-8d7a-4507-891b-cd3f31421dcd",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get distinct list of projects names in user stream.",
                    "fullTitle": "Enterprise User User.getUserStreamDistinctFlowNamesOrg Should get distinct list of projects names in user stream.",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL.replace(\"{type}\", \"projects\"))\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = Array.isArray(res.body.output.objects);\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d56d2992-8a9b-4880-bcef-cddebb3862b9",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise User User.getUserStreamDistinctFlowNamesOrg Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "da136b5e-9d0f-4574-9e78-fce32e1a22eb",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "ac45e606-9077-4cfa-8af3-0e4540823f5c",
                  "4152a2e1-8d7a-4507-891b-cd3f31421dcd",
                  "d56d2992-8a9b-4880-bcef-cddebb3862b9",
                  "da136b5e-9d0f-4574-9e78-fce32e1a22eb"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 51,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "0cc22661-fd98-4cb3-9b45-d7faa7931fc1",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\users\\inviteUser.enterprise.js",
        "file": "\\controllers\\test\\users\\inviteUser.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "8957f6e4-acbb-4538-b501-3a1fb1e3feb2",
            "title": "User.Invite",
            "fullFile": "C:\\work\\api\\controllers\\test\\users\\inviteUser.enterprise.js",
            "file": "\\controllers\\test\\users\\inviteUser.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise User.Invite \"before all\" hook",
                "timedOut": false,
                "duration": 58,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data;\n        dummyUser = orgData.owner\n        dummyUser.authtoken = dummyUser.authtoken;\n        done()\n    })\n})",
                "err": {},
                "isRoot": false,
                "uuid": "ed428f20-0714-406f-907c-6d8eebca4e7b",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise User.Invite Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .send(data)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "40714b47-52c3-4c4a-bb4d-0249227d23a7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if body is empty not found.",
                "fullTitle": "Enterprise User.Invite Should get error, if body is empty not found.",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar invalidData = _.cloneDeep(data)\ninvalidData.emails = []\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(invalidData)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "2621f6b5-c014-4c64-b087-c3f673bbbe75",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if user sents invitations to self.",
                "fullTitle": "Enterprise User.Invite Should get error, if user sents invitations to self.",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar invalidData = _.cloneDeep(data)\ninvalidData.emails = [dummyUser.email]\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(invalidData)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.INVITATION_CAN_NOT_SENT_TO_SELF);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "2f26b95e-00da-41a5-9a88-eb20a2dfd156",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error, if user sents invitations to more than 10 user(s) at a time.",
                "fullTitle": "Enterprise User.Invite Should get error, if user sents invitations to more than 10 user(s) at a time.",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(data)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal('The invitation can not be sent with more than 10 users at a time.');\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "736f575f-150f-405e-94ad-156cae50fddd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should invite users.",
                "fullTitle": "Enterprise User.Invite Should invite users.",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nvar validData = _.cloneDeep(data)\nvalidData.emails = [validData.emails[0]]\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(validData)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var result = res.body.output.message;\n            expect(result).to.be.equal('test@1.com has been invited successfully.');\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "8ee8f318-f55d-400a-95fb-a8c3344bd3ca",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "40714b47-52c3-4c4a-bb4d-0249227d23a7",
              "2621f6b5-c014-4c64-b087-c3f673bbbe75",
              "2f26b95e-00da-41a5-9a88-eb20a2dfd156",
              "736f575f-150f-405e-94ad-156cae50fddd",
              "8ee8f318-f55d-400a-95fb-a8c3344bd3ca"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 44,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "8caf1a31-61b3-4d94-9517-1964ceb415e0",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\users\\listUsers.enterprise.js",
        "file": "\\controllers\\test\\users\\listUsers.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "d36940b5-b4a5-4cfb-8f10-71700174d5b1",
            "title": "User",
            "fullFile": "C:\\work\\api\\controllers\\test\\users\\listUsers.enterprise.js",
            "file": "\\controllers\\test\\users\\listUsers.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "4dcfb8d0-aca3-41f5-9d48-c397ff7841b4",
                "title": "User.ListUsers",
                "fullFile": "C:\\work\\api\\controllers\\test\\users\\listUsers.enterprise.js",
                "file": "\\controllers\\test\\users\\listUsers.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.ListUsers \"before each\" hook",
                    "timedOut": false,
                    "duration": 348,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n    _models.Mail.remove({ $or: [{ to: new RegExp('^test.user+', \"i\") }, { to: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n        signUpUsers({}, function(error, users) {\n            if (error) {\n                done(error);\n            } else {\n                registerUsers = users;\n                done();\n            }\n        });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "09e0c57a-c757-402b-81d7-c30642314932",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User User.ListUsers \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "097c8d60-2b29-4d76-88ea-65814b64fe65",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get list of users.",
                    "fullTitle": "Enterprise User User.ListUsers Should get list of users.",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar authToken = registerUsers[0].body.output.authtoken;\napi.get(apiURL)\n    .set({ 'authtoken': authToken, \"ui_admin_key\": config.UI_ADMIN_KEY })\n    .expect(httpStatus.OK)\n    .end(function(error, res) {\n        if (error) {\n            done(error);\n        } else {\n            res.body.output.should.be.instanceOf(Array);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "479c67b9-27f0-4420-b66a-b9b3b1fd617b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get list of only uids of register users.",
                    "fullTitle": "Enterprise User User.ListUsers Should get list of only uids of register users.",
                    "timedOut": false,
                    "duration": 18,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar authToken = registerUsers[0].body.output.authtoken;\nvar paramURL = apiURL + \"?get=user_uids\"\napi.get(paramURL)\n    .set({ 'authtoken': authToken, \"ui_admin_key\": config.UI_ADMIN_KEY })\n    .expect(httpStatus.OK)\n    .end(function(error, res) {\n        if (error) {\n            done(error);\n        } else {\n            var isValid = false;\n            if (Array.isArray(res.body.output)) {\n                var eachMatched = true;\n                _.each(res.body.output, function(item) {\n                    if (!(typeof(item.uid) != \"undefined\" && typeof(item.email) == \"undefined\")) {\n                        eachMatched = false;\n                    }\n                });\n                isValid = eachMatched;\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a6ace2a6-3141-4ee7-a5e9-0ae9530728e1",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise User User.ListUsers Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(error, res) {\n        if (error) {\n            done(error);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b32af276-85df-4e21-8434-552813995d8d",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "479c67b9-27f0-4420-b66a-b9b3b1fd617b",
                  "a6ace2a6-3141-4ee7-a5e9-0ae9530728e1",
                  "b32af276-85df-4e21-8434-552813995d8d"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 37,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "80d204bd-9e04-45cf-bc48-1e68e2e1978e",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\users\\login.enterprise.js",
        "file": "\\controllers\\test\\users\\login.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "39f4238d-d48c-4baf-a6de-fa4dca02a2b6",
            "title": "User",
            "fullFile": "C:\\work\\api\\controllers\\test\\users\\login.enterprise.js",
            "file": "\\controllers\\test\\users\\login.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "45a82590-6133-4384-9847-f936dee230b8",
                "title": "User.Login",
                "fullFile": "C:\\work\\api\\controllers\\test\\users\\login.enterprise.js",
                "file": "\\controllers\\test\\users\\login.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.Login \"before each\" hook",
                    "timedOut": false,
                    "duration": 103,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.createFlowUser({}, function(error, user) {\n        if (error) {\n            done(error);\n        } else {\n            authToken = user.authtoken;\n            token = user.activation_token;\n            _id = user._id;\n            uid = user.uid;\n            done();\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7ed27b34-50c9-4d67-8cc0-5015175c3b91",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User User.Login \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fa1685db-873d-47d5-bd0c-aba66276a3c8",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should login successfully.",
                    "fullTitle": "Enterprise User User.Login Should login successfully.",
                    "timedOut": false,
                    "duration": 78,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.flowLogin(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(loginBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.email == loginBody.email &&\n                res.body.output.active == false &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\";\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e0d458b0-930f-42e9-abb9-606c8d7a2a11",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should allowed to re-login successfully.",
                    "fullTitle": "Enterprise User User.Login Should allowed to re-login successfully.",
                    "timedOut": false,
                    "duration": 170,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.flowLogin(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(loginBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.email == loginBody.email &&\n                res.body.output.active == false &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\";\n\n            if (isValid) {\n                api.post(\"/enterprise/v1/logout\")\n                    .set(\"authtoken\", res.body.output.authtoken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            commonMock.flowLogin(httpmock, \"enterprise\");\n                            api.post(apiURL)\n                                .send(loginBody)\n                                .expect(httpStatus.OK)\n                                .end(function(err, res) {\n                                    if (err) {\n                                        done(err);\n                                    } else {\n                                        var isValid = res.body.output.email == loginBody.email &&\n                                            res.body.output.active == false &&\n                                            typeof(res.body.output._id) == \"undefined\" &&\n                                            typeof(res.body.output.__v) == \"undefined\";\n                                        isValid.should.equal(true);\n                                        done();\n                                    }\n                                });\n                        }\n                    });\n            } else {\n                true.should.equal(false);\n                done();\n            }\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "591844df-072f-4886-a78e-954a30d95e98",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not login if user_type is null.",
                    "fullTitle": "Enterprise User User.Login Should not login if user_type is null.",
                    "timedOut": false,
                    "duration": 12,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.findOneAndUpdate({\n    uid: uid\n}, {\n    user_type: null\n}, function(error, user) {\n    commonMock.flowLogin(httpmock, \"enterprise\");\n    api.post(apiURL)\n        .send(loginBody)\n        .expect(httpStatus.UNAUTHORIZED)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                var isValid = (res.body.error.message == messageList.USER_LOGIN_INVALID_CREDENTIAL);\n                isValid.should.equal(true);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7e922837-94a0-48b9-aa95-9169657ba44f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get user_plan for old user records.",
                    "fullTitle": "Enterprise User User.Login Should get user_plan for old user records.",
                    "timedOut": false,
                    "duration": 80,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.findOne({ uid: uid }, function(error, user) {\n    var planObjectID = new ObjectId(convert.getJSON(user).plan[0]);\n    _models.User.findOneAndUpdate({ uid: uid }, {\n        plan: planObjectID\n    }, { new: true }, function(error, user) {\n        commonMock.flowLogin(httpmock, \"enterprise\");\n        api.post(apiURL)\n            .send(loginBody)\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    var isValid = res.body.output.email == loginBody.email &&\n                        res.body.output.active == false &&\n                        typeof(res.body.output._id) == \"undefined\" &&\n                        typeof(res.body.output.__v) == \"undefined\";\n                    isValid.should.equal(true);\n                    done();\n                }\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "198a693c-af61-4937-bd9f-034b4d77cb43",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not allowed to login if activation is expired.",
                    "fullTitle": "Enterprise User User.Login Should not allowed to login if activation is expired.",
                    "timedOut": false,
                    "duration": 80,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.findOneAndUpdate({ uid: uid }, {\n    activation_expired: true\n}, function(error, user) {\n    commonMock.flowLogin(httpmock, \"enterprise\");\n    api.post(apiURL)\n        .send(loginBody)\n        .expect(httpStatus.UNAUTHORIZED)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                res.body.error.message.should.equal(messageList.USER_LOGIN_ACTIVATION_REQUIRED_ERROR);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "833580be-37c1-4a37-bdad-bbf776a41d25",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should allowed to login with support key.",
                    "fullTitle": "Enterprise User User.Login Should allowed to login with support key.",
                    "timedOut": false,
                    "duration": 30,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(\"/enterprise/v1/user/supportkey\")\n    .set('authtoken', authToken)\n    .send({})\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            commonMock.flowLogin(httpmock, \"enterprise\");\n            api.post(apiURL)\n                .send({\n                    \"email\": loginBody.email,\n                    \"password\": res.body.output.supportKey || \"\"\n                })\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        var isValid = res.body.output.support_key == \"\" &&\n                            res.body.output.email == loginBody.email;\n                        isValid.should.equal(true);\n                        done();\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1f7b581d-1044-4601-bfb1-b655d245ba84",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not allowed to login deleted user.",
                    "fullTitle": "Enterprise User User.Login Should not allowed to login deleted user.",
                    "timedOut": false,
                    "duration": 89,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.flowLogin(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(loginBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var currentDate = new Date();\n            _models.User.update({\n                \"uid\": res.body.output.uid\n            }, { $set: { \"deleted_at\": currentDate } }, function(error, user) {\n                commonMock.flowLogin(httpmock, \"enterprise\");\n                api.post(apiURL)\n                    .send(loginBody)\n                    .expect(httpStatus.UNAUTHORIZED)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            res.body.error.message.should.equal(messageList.USER_LOGIN_INVALID_CREDENTIAL);\n                            done();\n                        }\n                    });\n            });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cc70781c-c4d9-494f-9901-d18b89e07055",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give invalid param errors.",
                    "fullTitle": "Enterprise User User.Login Should give invalid param errors.",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.flowLogin(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send({})\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.error.email.message == messageList.USER_REG_EMAIL_NOT_VALID &&\n                res.body.error.password.message == messageList.USER_LOGIN_REQUIRED_PASSWORD;\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9221e5c7-3c72-4a55-b28a-9360452fe2fd",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get default plan.",
                    "fullTitle": "Enterprise User User.Login Should get default plan.",
                    "timedOut": false,
                    "duration": 79,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.flowLogin(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(loginBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (res.body.output.plan.length == 1) {\n                var defaultPlan = _.first(_.filter(server.plan.list, function(plan) {\n                    //return (plan || {}).enterprise_plan || false;\n                    return ((plan || {}).plan_type || \"\") == \"enterprise\";\n                })) || {};\n                defaultPlan = utils.skipAttr(convert.getJSON(defaultPlan));\n                isValid = utils.matchObjects(res.body.output.plan[0], defaultPlan);\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8b8502b5-eb3d-486b-95f3-0fa36d44b321",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get default attributes.",
                    "fullTitle": "Enterprise User User.Login Should get default attributes.",
                    "timedOut": false,
                    "duration": 77,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.flowLogin(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(loginBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (res.body.output.plan.length == 1) {\n                isValid = utils.isHaveKeyVals(res.body.output, [\n                        \"first_name\", \"flow_uid\", \"job_title\", \"last_name\", \"locale\",\n                        \"merchantid\", \"payment_set\", \"subscription\"\n                    ]) &&\n                    res.body.output.subscription.days == server.plan.enterprise.TrialPeriod &&\n                    moment(new Date(res.body.output.subscription.start_date)).format(\"YYYY-MM-DD\") ==\n                    moment(new Date()).format(\"YYYY-MM-DD\");\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a5ce7914-a967-4e6f-8185-16f8b96ab165",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get default user_plan.",
                    "fullTitle": "Enterprise User User.Login Should get default user_plan.",
                    "timedOut": false,
                    "duration": 77,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.flowLogin(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(loginBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.user_plan.should.exist;\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "718b4237-b5aa-4ba0-b1a6-5f46c8ba67b3",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should login with enterprise account.",
                    "fullTitle": "Enterprise User User.Login Should login with enterprise account.",
                    "timedOut": false,
                    "duration": 75,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.flowLogin(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(loginBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.user_type.should.equal(config.service_types.enterprise.name);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "54addbe2-140c-465b-b659-323d3c8122bd",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get different authtoken on re-login.",
                    "fullTitle": "Enterprise User User.Login Should get different authtoken on re-login.",
                    "timedOut": false,
                    "duration": 152,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.flowLogin(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(loginBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var firstAuthToken = res.body.output.authtoken;\n            commonMock.flowLogin(httpmock, \"enterprise\");\n            api.post(apiURL)\n                .send(loginBody)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        var secondAuthToken = res.body.output.authtoken;\n                        firstAuthToken.should.not.equal(secondAuthToken);\n                        done();\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6f3d130b-7bf1-45ca-aac1-e56ff06472e1",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should create account if express user exists.",
                    "fullTitle": "Enterprise User User.Login Should create account if express user exists.",
                    "timedOut": false,
                    "duration": 2927,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.email = \"test.user+1@raweng.com\";\ncommonMock.setSignUpMocks(httpmock, \"express\", {\n    email: tempRegistrationBody.email\n});\napi.post(\"/express/v1/signup\")\n    .send(tempRegistrationBody)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var tempLoginBody = global.getImmutable(loginBody);\n            tempLoginBody.email = tempRegistrationBody.email;\n            commonMock.setSignUpMocks(httpmock, \"enterprise\");\n            commonMock.flowLogin(httpmock, \"enterprise\");\n            api.post(apiURL)\n                .send(tempLoginBody)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        res.body.output.email.should.equal(tempLoginBody.email);\n                        done();\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "46414fce-da06-404b-9781-bc91be0b5784",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should create activated account if express account is already created.",
                    "fullTitle": "Enterprise User User.Login Should create activated account if express account is already created.",
                    "timedOut": false,
                    "duration": 2176,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.email = \"test.user+1@raweng.com\";\ncommonMock.setSignUpMocks(httpmock, \"express\", {\n    email: tempRegistrationBody.email\n});\nvar newSignupUid = \"\";\napi.post(\"/express/v1/signup\")\n    .send(tempRegistrationBody)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            newSignupUid = res.body.output.uid;\n            _models.User.findOneAndUpdate({\n                uid: newSignupUid\n            }, {\n                active: true\n            }, { new: true }, function(error, user) {\n                var tempLoginBody = global.getImmutable(loginBody);\n                tempLoginBody.email = tempRegistrationBody.email;\n                commonMock.setSignUpMocks(httpmock, \"enterprise\");\n                commonMock.flowLogin(httpmock, \"enterprise\");\n                api.post(apiURL)\n                    .send(tempLoginBody)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            (res.body.output.email == tempLoginBody.email &&\n                                res.body.output.active).should.equal(true);\n                            done();\n                        }\n                    });\n            });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5bc6104b-faa2-4276-8819-c245e8aa31d5",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should login after three fail attempts.",
                    "fullTitle": "Enterprise User User.Login Should login after three fail attempts.",
                    "timedOut": false,
                    "duration": 304,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempBody = getImmutable(loginBody);\ntempBody.password = \"abc123\"\ncommonMock.flowLogin(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(tempBody)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            commonMock.flowLogin(httpmock, \"enterprise\");\n            api.post(apiURL)\n                .send(tempBody)\n                .expect(httpStatus.UNAUTHORIZED)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        commonMock.flowLogin(httpmock, \"enterprise\");\n                        api.post(apiURL)\n                            .send(tempBody)\n                            .expect(httpStatus.UNAUTHORIZED)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    tempBody.password = \"Raw@1234\";\n                                    tempBody.captcha_code = \"03AHJ_Vuu_lnKuNq-eLmTlTmWe6Aozhp6z0uLva1JGwwIKCkGu0x3S-8qFAHtZxL3TuJatYJnGOxta3250lueM1wWWb89Lk1zNeobupy-bg579yiGTwr4_IHsN_eWANc40w_EToNjf4mmeKxLbspOGq9YEZlWFb6d5pNnT--ImOkvcoiqwrmKjQIKPEoJBlXbuTL2NfNrrEPjhCpnmSQR6z3CRD1G-V3sVFeBbzHjoatg2wpFgnS5ikf42hNcq6JP0TwhQ86pwCqZ86JKm2UQe1ISxQUOckNXx6dG9NuCjypFmEsvOaL7qrhmcbp77hfzNamTEt1GVpNBlpKMtND6FDn8X05Ni3xoZDDhjZzRvlJQWf9ygHjsVByEEQv5GU9l1f4CI1gPbulwHQFN3d_8S0mbpBOfI-YQ_fE3lSWp0dDA2mxdDXOVi7tQgIBZhRFPAa8Jt9R9_TaSch6Ygq6qrkkIuekVIs6jSsLsLavpKZgtUkLJcf1RaUUZharASNuMIt3_s9EbWM42WCs8aMLWPo8qMu4pKa6cS5Bd3D-TFTBmtADFpOvDHjqfXqX_PemEg_ZVEXUYYGQ3YhJhESe8OCuxWqcs84Jzyln7-BIxYrMEDOgejqPrUc8nOU9F2o-MtjWohx_8ci0-078Fg6UGPWUGqZ2ttrvK9mIkFi1iQVhTcThPEFH2SoG993B3YqmEagHtBwOid2pNzYY_hAffXSSvURdJstiZi7qV_ZNxnJ9CSlljI8erdb4cPSrIY8XIEahiC-q3ODrATTXfkv5iGXeYI7_rDO0DmH3OS5g9rmFZb4RTows9Gmp8xOA91_faynmaM0009rOjYx0pxAqZZECTJu20Qyvbu0_d-dd7n7vMPHvoEMqbXQhXQO62zBK-h3PRRWQlLdFgwj498SgMsFkbo1SBRi1943w\";\n                                    commonMock.captchaVerification(httpmock, \"enterprise\");\n                                    commonMock.flowLogin(httpmock, \"enterprise\");\n                                    api.post(apiURL)\n                                        .send(tempBody)\n                                        .expect(httpStatus.OK)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                res.body.output.email.should.equal(loginBody.email);\n                                                done();\n                                            }\n                                        });\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4ed421b3-8de7-428a-80a4-1317f8ca1ac9",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give captcha verification fail error for valid credential.",
                    "fullTitle": "Enterprise User User.Login Should give captcha verification fail error for valid credential.",
                    "timedOut": false,
                    "duration": 292,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar loginCount = [];\nvar tempBody = getImmutable(loginBody);\ntempBody.password = \"abc123\";\ncommonMock.flowLogin(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(tempBody)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            loginCount.push(res.body.error.failed_login_count);\n            commonMock.flowLogin(httpmock, \"enterprise\");\n            api.post(apiURL)\n                .send(tempBody)\n                .expect(httpStatus.UNAUTHORIZED)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        loginCount.push(res.body.error.failed_login_count);\n                        commonMock.flowLogin(httpmock, \"enterprise\");\n                        api.post(apiURL)\n                            .send(tempBody)\n                            .expect(httpStatus.UNAUTHORIZED)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    loginCount.push(res.body.error.failed_login_count);\n                                    commonMock.flowLogin(httpmock, \"enterprise\");\n                                    tempBody.password = \"Raw@1234\";\n                                    api.post(apiURL)\n                                        .send(tempBody)\n                                        .expect(httpStatus.UNAUTHORIZED)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                loginCount.push(res.body.error.failed_login_count);\n                                                var isValid = res.body.error.message == messageList.USER_LOGIN_CAPTCHA_REQUIRED &&\n                                                    loginCount[0] == 1 &&\n                                                    loginCount[1] == 2 &&\n                                                    loginCount[2] == 3 &&\n                                                    loginCount[3] == 4;\n                                                isValid.should.equal(true);\n                                                done();\n                                            }\n                                        });\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e7b2ba41-d336-4f97-bfa8-82c65b018d8f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give captcha verification fail error for invalid credential.",
                    "fullTitle": "Enterprise User User.Login Should give captcha verification fail error for invalid credential.",
                    "timedOut": false,
                    "duration": 293,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempBody = getImmutable(loginBody);\ntempBody.password = \"abc123\";\ncommonMock.flowLogin(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(tempBody)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            commonMock.flowLogin(httpmock, \"enterprise\");\n            api.post(apiURL)\n                .send(tempBody)\n                .expect(httpStatus.UNAUTHORIZED)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        commonMock.flowLogin(httpmock, \"enterprise\");\n                        api.post(apiURL)\n                            .send(tempBody)\n                            .expect(httpStatus.UNAUTHORIZED)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    tempBody.password = \"abc123\";\n                                    commonMock.flowLogin(httpmock, \"enterprise\");\n                                    api.post(apiURL)\n                                        .send(tempBody)\n                                        .expect(httpStatus.UNAUTHORIZED)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                res.body.error.message.should.equal(messageList.USER_LOGIN_CAPTCHA_REQUIRED);\n                                                done();\n                                            }\n                                        });\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "88fc608e-bef2-442e-87c1-ddcc73821354",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give invalid credential error if captcha is provided.",
                    "fullTitle": "Enterprise User User.Login Should give invalid credential error if captcha is provided.",
                    "timedOut": false,
                    "duration": 374,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempBody = getImmutable(loginBody);\ntempBody.password = \"abc123\";\ncommonMock.flowLogin(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(tempBody)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            commonMock.flowLogin(httpmock, \"enterprise\");\n            api.post(apiURL)\n                .send(tempBody)\n                .expect(httpStatus.UNAUTHORIZED)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        commonMock.flowLogin(httpmock, \"enterprise\");\n                        api.post(apiURL)\n                            .send(tempBody)\n                            .expect(httpStatus.UNAUTHORIZED)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    commonMock.flowLogin(httpmock, \"enterprise\");\n                                    api.post(apiURL)\n                                        .send(tempBody)\n                                        .expect(httpStatus.UNAUTHORIZED)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                tempBody.captcha_code = \"03AHJ_Vuu_lnKuNq-eLmTlTmWe6Aozhp6z0uLva1JGwwIKCkGu0x3S-8qFAHtZxL3TuJatYJnGOxta3250lueM1wWWb89Lk1zNeobupy-bg579yiGTwr4_IHsN_eWANc40w_EToNjf4mmeKxLbspOGq9YEZlWFb6d5pNnT--ImOkvcoiqwrmKjQIKPEoJBlXbuTL2NfNrrEPjhCpnmSQR6z3CRD1G-V3sVFeBbzHjoatg2wpFgnS5ikf42hNcq6JP0TwhQ86pwCqZ86JKm2UQe1ISxQUOckNXx6dG9NuCjypFmEsvOaL7qrhmcbp77hfzNamTEt1GVpNBlpKMtND6FDn8X05Ni3xoZDDhjZzRvlJQWf9ygHjsVByEEQv5GU9l1f4CI1gPbulwHQFN3d_8S0mbpBOfI-YQ_fE3lSWp0dDA2mxdDXOVi7tQgIBZhRFPAa8Jt9R9_TaSch6Ygq6qrkkIuekVIs6jSsLsLavpKZgtUkLJcf1RaUUZharASNuMIt3_s9EbWM42WCs8aMLWPo8qMu4pKa6cS5Bd3D-TFTBmtADFpOvDHjqfXqX_PemEg_ZVEXUYYGQ3YhJhESe8OCuxWqcs84Jzyln7-BIxYrMEDOgejqPrUc8nOU9F2o-MtjWohx_8ci0-078Fg6UGPWUGqZ2ttrvK9mIkFi1iQVhTcThPEFH2SoG993B3YqmEagHtBwOid2pNzYY_hAffXSSvURdJstiZi7qV_ZNxnJ9CSlljI8erdb4cPSrIY8XIEahiC-q3ODrATTXfkv5iGXeYI7_rDO0DmH3OS5g9rmFZb4RTows9Gmp8xOA91_faynmaM0009rOjYx0pxAqZZECTJu20Qyvbu0_d-dd7n7vMPHvoEMqbXQhXQO62zBK-h3PRRWQlLdFgwj498SgMsFkbo1SBRi1943w\";\n                                                commonMock.captchaVerification(httpmock, \"enterprise\");\n                                                commonMock.flowLogin(httpmock, \"enterprise\");\n                                                api.post(apiURL)\n                                                    .send(tempBody)\n                                                    .expect(httpStatus.UNAUTHORIZED)\n                                                    .end(function(err, res) {\n                                                        if (err) {\n                                                            done(err);\n                                                        } else {\n                                                            res.body.error.message.should.equal(messageList.USER_LOGIN_INVALID_CREDENTIAL);\n                                                            done();\n                                                        }\n                                                    });\n                                            }\n                                        });\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "863f2e37-97e6-4c87-b527-ceab5bc8ffc3",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should lock user.",
                    "fullTitle": "Enterprise User User.Login Should lock user.",
                    "timedOut": false,
                    "duration": 442,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempBody = getImmutable(loginBody);\ntempBody.password = \"abc123\";\nvar loginCount = [];\ncommonMock.flowLogin(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(tempBody)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            if (res.body.error.message == messageList.USER_LOGIN_INVALID_CREDENTIAL)\n                loginCount.push(res.body.error.failed_login_count);\n            commonMock.flowLogin(httpmock, \"enterprise\");\n            api.post(apiURL)\n                .send(tempBody)\n                .expect(httpStatus.UNAUTHORIZED)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        if (res.body.error.message == messageList.USER_LOGIN_INVALID_CREDENTIAL)\n                            loginCount.push(res.body.error.failed_login_count);\n                        commonMock.flowLogin(httpmock, \"enterprise\");\n                        api.post(apiURL)\n                            .send(tempBody)\n                            .expect(httpStatus.UNAUTHORIZED)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    if (res.body.error.message == messageList.USER_LOGIN_INVALID_CREDENTIAL)\n                                        loginCount.push(res.body.error.failed_login_count);\n                                    commonMock.flowLogin(httpmock, \"enterprise\");\n                                    api.post(apiURL)\n                                        .send(tempBody)\n                                        .expect(httpStatus.UNAUTHORIZED)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                if (res.body.error.message == messageList.USER_LOGIN_CAPTCHA_REQUIRED)\n                                                    loginCount.push(res.body.error.failed_login_count);\n                                                commonMock.flowLogin(httpmock, \"enterprise\");\n                                                api.post(apiURL)\n                                                    .send(tempBody)\n                                                    .expect(httpStatus.UNAUTHORIZED)\n                                                    .end(function(err, res) {\n                                                        if (err) {\n                                                            done(err);\n                                                        } else {\n                                                            if (res.body.error.message == messageList.USER_LOGIN_CAPTCHA_REQUIRED)\n                                                                loginCount.push(res.body.error.failed_login_count);\n                                                            commonMock.flowLogin(httpmock, \"enterprise\");\n                                                            api.post(apiURL)\n                                                                .send(tempBody)\n                                                                .expect(httpStatus.UNAUTHORIZED)\n                                                                .end(function(err, res) {\n                                                                    if (err) {\n                                                                        done(err);\n                                                                    } else {\n                                                                        if (res.body.error.message == messageList.ENTERPRISE_USER_LOGIN_ACCOUNT_LOCK)\n                                                                            loginCount.push(res.body.error.failed_login_count);\n                                                                        var isValid = loginCount[0] == 1 &&\n                                                                            loginCount[1] == 2 &&\n                                                                            loginCount[2] == 3 &&\n                                                                            loginCount[3] == 4 &&\n                                                                            loginCount[4] == 5 &&\n                                                                            loginCount[5] == 6;\n                                                                        isValid.should.equal(true);\n                                                                        done();\n                                                                    }\n                                                                });\n                                                        }\n                                                    });\n                                            }\n                                        });\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d3f0e741-cbb3-4ee6-8d67-903778a814c0",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should allowed to login after five fail login attempts.",
                    "fullTitle": "Enterprise User User.Login Should allowed to login after five fail login attempts.",
                    "timedOut": false,
                    "duration": 449,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempBody = getImmutable(loginBody);\ntempBody.password = \"abc123\";\nvar loginCount = [];\ncommonMock.flowLogin(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(tempBody)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            if (res.body.error.message == messageList.USER_LOGIN_INVALID_CREDENTIAL)\n                loginCount.push(res.body.error.failed_login_count);\n            commonMock.flowLogin(httpmock, \"enterprise\");\n            api.post(apiURL)\n                .send(tempBody)\n                .expect(httpStatus.UNAUTHORIZED)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        if (res.body.error.message == messageList.USER_LOGIN_INVALID_CREDENTIAL)\n                            loginCount.push(res.body.error.failed_login_count);\n                        commonMock.flowLogin(httpmock, \"enterprise\");\n                        api.post(apiURL)\n                            .send(tempBody)\n                            .expect(httpStatus.UNAUTHORIZED)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    if (res.body.error.message == messageList.USER_LOGIN_INVALID_CREDENTIAL)\n                                        loginCount.push(res.body.error.failed_login_count);\n                                    commonMock.flowLogin(httpmock, \"enterprise\");\n                                    api.post(apiURL)\n                                        .send(tempBody)\n                                        .expect(httpStatus.UNAUTHORIZED)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                if (res.body.error.message == messageList.USER_LOGIN_CAPTCHA_REQUIRED)\n                                                    loginCount.push(res.body.error.failed_login_count);\n                                                commonMock.flowLogin(httpmock, \"enterprise\");\n                                                api.post(apiURL)\n                                                    .send(tempBody)\n                                                    .expect(httpStatus.UNAUTHORIZED)\n                                                    .end(function(err, res) {\n                                                        if (err) {\n                                                            done(err);\n                                                        } else {\n                                                            if (res.body.error.message == messageList.USER_LOGIN_CAPTCHA_REQUIRED)\n                                                                loginCount.push(res.body.error.failed_login_count);\n\n                                                            tempBody.captcha_code = \"03AHJ_Vuu_lnKuNq-eLmTlTmWe6Aozhp6z0uLva1JGwwIKCkGu0x3S-8qFAHtZxL3TuJatYJnGOxta3250lueM1wWWb89Lk1zNeobupy-bg579yiGTwr4_IHsN_eWANc40w_EToNjf4mmeKxLbspOGq9YEZlWFb6d5pNnT--ImOkvcoiqwrmKjQIKPEoJBlXbuTL2NfNrrEPjhCpnmSQR6z3CRD1G-V3sVFeBbzHjoatg2wpFgnS5ikf42hNcq6JP0TwhQ86pwCqZ86JKm2UQe1ISxQUOckNXx6dG9NuCjypFmEsvOaL7qrhmcbp77hfzNamTEt1GVpNBlpKMtND6FDn8X05Ni3xoZDDhjZzRvlJQWf9ygHjsVByEEQv5GU9l1f4CI1gPbulwHQFN3d_8S0mbpBOfI-YQ_fE3lSWp0dDA2mxdDXOVi7tQgIBZhRFPAa8Jt9R9_TaSch6Ygq6qrkkIuekVIs6jSsLsLavpKZgtUkLJcf1RaUUZharASNuMIt3_s9EbWM42WCs8aMLWPo8qMu4pKa6cS5Bd3D-TFTBmtADFpOvDHjqfXqX_PemEg_ZVEXUYYGQ3YhJhESe8OCuxWqcs84Jzyln7-BIxYrMEDOgejqPrUc8nOU9F2o-MtjWohx_8ci0-078Fg6UGPWUGqZ2ttrvK9mIkFi1iQVhTcThPEFH2SoG993B3YqmEagHtBwOid2pNzYY_hAffXSSvURdJstiZi7qV_ZNxnJ9CSlljI8erdb4cPSrIY8XIEahiC-q3ODrATTXfkv5iGXeYI7_rDO0DmH3OS5g9rmFZb4RTows9Gmp8xOA91_faynmaM0009rOjYx0pxAqZZECTJu20Qyvbu0_d-dd7n7vMPHvoEMqbXQhXQO62zBK-h3PRRWQlLdFgwj498SgMsFkbo1SBRi1943w\";\n                                                            tempBody.password = \"Raw@1234\";\n                                                            commonMock.flowLogin(httpmock, \"enterprise\");\n                                                            commonMock.captchaVerification(httpmock, \"enterprise\");\n                                                            api.post(apiURL)\n                                                                .send(tempBody)\n                                                                .expect(httpStatus.OK)\n                                                                .end(function(err, res) {\n                                                                    if (err) {\n                                                                        done(err);\n                                                                    } else {\n                                                                        var isValid = res.body.output.email == tempBody.email &&\n                                                                            loginCount[0] == 1 &&\n                                                                            loginCount[1] == 2 &&\n                                                                            loginCount[2] == 3 &&\n                                                                            loginCount[3] == 4 &&\n                                                                            loginCount[4] == 5;\n                                                                        isValid.should.equal(true);\n                                                                        done();\n                                                                    }\n                                                                });\n                                                        }\n                                                    });\n                                            }\n                                        });\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bca5371a-cfb9-4081-b39b-670f6e0a4bc4",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should allowed to login after four fail login attempts.",
                    "fullTitle": "Enterprise User User.Login Should allowed to login after four fail login attempts.",
                    "timedOut": false,
                    "duration": 374,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempBody = getImmutable(loginBody);\ntempBody.password = \"abc123\";\nvar loginCount = [];\ncommonMock.flowLogin(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(tempBody)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            if (res.body.error.message == messageList.USER_LOGIN_INVALID_CREDENTIAL)\n                loginCount.push(res.body.error.failed_login_count);\n            commonMock.flowLogin(httpmock, \"enterprise\");\n            api.post(apiURL)\n                .send(tempBody)\n                .expect(httpStatus.UNAUTHORIZED)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        if (res.body.error.message == messageList.USER_LOGIN_INVALID_CREDENTIAL)\n                            loginCount.push(res.body.error.failed_login_count);\n                        commonMock.flowLogin(httpmock, \"enterprise\");\n                        api.post(apiURL)\n                            .send(tempBody)\n                            .expect(httpStatus.UNAUTHORIZED)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    if (res.body.error.message == messageList.USER_LOGIN_INVALID_CREDENTIAL)\n                                        loginCount.push(res.body.error.failed_login_count);\n                                    commonMock.flowLogin(httpmock, \"enterprise\");\n                                    api.post(apiURL)\n                                        .send(tempBody)\n                                        .expect(httpStatus.UNAUTHORIZED)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                if (res.body.error.message == messageList.USER_LOGIN_CAPTCHA_REQUIRED)\n                                                    loginCount.push(res.body.error.failed_login_count);\n                                                tempBody.captcha_code = \"03AHJ_Vuu_lnKuNq-eLmTlTmWe6Aozhp6z0uLva1JGwwIKCkGu0x3S-8qFAHtZxL3TuJatYJnGOxta3250lueM1wWWb89Lk1zNeobupy-bg579yiGTwr4_IHsN_eWANc40w_EToNjf4mmeKxLbspOGq9YEZlWFb6d5pNnT--ImOkvcoiqwrmKjQIKPEoJBlXbuTL2NfNrrEPjhCpnmSQR6z3CRD1G-V3sVFeBbzHjoatg2wpFgnS5ikf42hNcq6JP0TwhQ86pwCqZ86JKm2UQe1ISxQUOckNXx6dG9NuCjypFmEsvOaL7qrhmcbp77hfzNamTEt1GVpNBlpKMtND6FDn8X05Ni3xoZDDhjZzRvlJQWf9ygHjsVByEEQv5GU9l1f4CI1gPbulwHQFN3d_8S0mbpBOfI-YQ_fE3lSWp0dDA2mxdDXOVi7tQgIBZhRFPAa8Jt9R9_TaSch6Ygq6qrkkIuekVIs6jSsLsLavpKZgtUkLJcf1RaUUZharASNuMIt3_s9EbWM42WCs8aMLWPo8qMu4pKa6cS5Bd3D-TFTBmtADFpOvDHjqfXqX_PemEg_ZVEXUYYGQ3YhJhESe8OCuxWqcs84Jzyln7-BIxYrMEDOgejqPrUc8nOU9F2o-MtjWohx_8ci0-078Fg6UGPWUGqZ2ttrvK9mIkFi1iQVhTcThPEFH2SoG993B3YqmEagHtBwOid2pNzYY_hAffXSSvURdJstiZi7qV_ZNxnJ9CSlljI8erdb4cPSrIY8XIEahiC-q3ODrATTXfkv5iGXeYI7_rDO0DmH3OS5g9rmFZb4RTows9Gmp8xOA91_faynmaM0009rOjYx0pxAqZZECTJu20Qyvbu0_d-dd7n7vMPHvoEMqbXQhXQO62zBK-h3PRRWQlLdFgwj498SgMsFkbo1SBRi1943w\";\n                                                tempBody.password = \"Raw@1234\";\n                                                commonMock.captchaVerification(httpmock, \"enterprise\");\n                                                commonMock.flowLogin(httpmock, \"enterprise\");\n                                                api.post(apiURL)\n                                                    .send(tempBody)\n                                                    .expect(httpStatus.OK)\n                                                    .end(function(err, res) {\n                                                        if (err) {\n                                                            done(err);\n                                                        } else {\n                                                            var isValid = res.body.output.email == tempBody.email &&\n                                                                loginCount[0] == 1 &&\n                                                                loginCount[1] == 2 &&\n                                                                loginCount[2] == 3 &&\n                                                                loginCount[3] == 4\n                                                            isValid.should.equal(true);\n                                                            done();\n                                                        }\n                                                    });\n                                            }\n                                        });\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6ca40fc1-7e92-4559-a879-602ef50cc2a4",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should allowed to login witout 2FA if express account is verified for 2FA.",
                    "fullTitle": "Enterprise User User.Login Should allowed to login witout 2FA if express account is verified for 2FA.",
                    "timedOut": false,
                    "duration": 4833,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.email = \"test.user+1@raweng.com\";\ncommonMock.setSignUpMocks(httpmock, \"express\", {\n    email: tempRegistrationBody.email\n});\napi.post(\"/express/v1/signup\")\n    .send(tempRegistrationBody)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var loginBody2 = global.getImmutable(loginBody);\n            loginBody2.email = \"test.user+1@raweng.com\";\n            commonMock.flowLogin(httpmock, \"express\");\n            api.post(\"/express/v1/login\")\n                .send(loginBody2)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        var expressAuthToken = res.body.output.authtoken;\n                        //var tempRegistrationBody = global.getImmutable(registrationBody);\n                        tempRegistrationBody.authy_number = \"9619982150\";\n                        tempRegistrationBody.country_code = \"91\";\n                        delete tempRegistrationBody.password;\n                        commonMock.authyNumberChange(httpmock, \"express\");\n                        commonMock.authyDelete(httpmock, \"express\");\n                        api.put(\"/express/v1/user\")\n                            .send(tempRegistrationBody)\n                            .set('authtoken', expressAuthToken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    var authy_userId = res.body.output.authy_user_uid;\n                                    commonMock.authySMSVerification(httpmock, \"express\");\n                                    api.post(\"/express/v1/authy/sms\")\n                                        .send({\n                                            authy_id: authy_userId\n                                        })\n                                        .expect(httpStatus.OK)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                commonMock.authyAppTokenVerification(httpmock, \"express\");\n                                                api.post(\"/express/v1/authy/verifyotp\")\n                                                    .send({\n                                                        authy_user_uid: authy_userId,\n                                                        token: otpBody.token,\n                                                        option_selected: \"otp\"\n                                                    })\n                                                    .expect(httpStatus.OK)\n                                                    .end(function(err, res) {\n                                                        if (err) {\n                                                            done(err);\n                                                        } else {\n                                                            commonMock.authyAppTokenVerification(httpmock, \"express\");\n                                                            api.post(\"/express/v1/authy/verify\")\n                                                                .send({\n                                                                    authy_user_uid: authy_userId,\n                                                                    token: otpBody.token\n                                                                })\n                                                                .expect(httpStatus.OK)\n                                                                .end(function(err, res) {\n                                                                    if (err) {\n                                                                        done(err);\n                                                                    } else {\n                                                                        commonMock.setSignUpMocks(httpmock, \"enterprise\", {\n                                                                            email: tempRegistrationBody.email\n                                                                        });\n                                                                        commonMock.flowLogin(httpmock, \"enterprise\");\n                                                                        api.post(apiURL)\n                                                                            .send(loginBody2)\n                                                                            .expect(httpStatus.OK)\n                                                                            .end(function(err, res) {\n                                                                                if (err) {\n                                                                                    done(err);\n                                                                                } else {\n                                                                                    var isValid = res.body.output.email == loginBody2.email &&\n                                                                                        res.body.output.active == false &&\n                                                                                        typeof(res.body.output._id) == \"undefined\" &&\n                                                                                        typeof(res.body.output.__v) == \"undefined\";\n                                                                                    isValid.should.equal(true);\n                                                                                    done();\n                                                                                }\n                                                                            });\n                                                                    }\n                                                                });\n                                                        }\n                                                    });\n                                            }\n                                        });\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8254b72e-e30e-4919-9ae9-23474432ea0a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should login user if two-factor is enabled but not verified.",
                    "fullTitle": "Enterprise User User.Login Should login user if two-factor is enabled but not verified.",
                    "timedOut": false,
                    "duration": 98,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.authy_number = \"9619982150\";\ntempRegistrationBody.country_code = \"91\";\ndelete tempRegistrationBody.password;\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\napi.put(\"/enterprise/v1/user\")\n    .set('authtoken', authToken)\n    .send(tempRegistrationBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            commonMock.brainTreeClientToken(httpmock, \"enterprise\");\n            commonMock.flowLogin(httpmock, \"enterprise\");\n            api.post(apiURL)\n                .send(loginBody)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        res.body.output.email.should.equal(tempRegistrationBody.email);\n                        done();\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c3a4dc59-9bac-4d72-a807-e5c0d87e99c5",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not login user if two-factor is verified.",
                    "fullTitle": "Enterprise User User.Login Should not login user if two-factor is verified.",
                    "timedOut": false,
                    "duration": 113,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.authy_number = \"9619982150\";\ntempRegistrationBody.country_code = \"91\";\ndelete tempRegistrationBody.password;\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\napi.put(\"/enterprise/v1/user\")\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var authy_userId = res.body.output.authy_user_uid;\n            commonMock.authySMSVerification(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/authy/sms\")\n                .send({\n                    authy_id: authy_userId\n                })\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                        api.post(\"/enterprise/v1/authy/verifyotp\")\n                            .send({\n                                authy_user_uid: authy_userId,\n                                token: otpBody.token,\n                                option_selected: \"otp\"\n                            })\n                            .set('authtoken', authToken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    commonMock.flowLogin(httpmock, \"enterprise\");\n                                    api.post(apiURL)\n                                        .send(loginBody)\n                                        .expect(httpStatus.OK)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                var isValid = res.body.output.authy_user_uid == authy_userId &&\n                                                    res.body.output.is_sms_enabled &&\n                                                    res.body.output.is_two_fa_verified &&\n                                                    res.body.output.user_uid != \"\";\n                                                isValid.should.equal(true);\n                                                done();\n                                            }\n                                        });\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "83c7497d-9f5a-40e5-b6e1-732c7e70570c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not login user if two-factor is verified and user activation is expired.",
                    "fullTitle": "Enterprise User User.Login Should not login user if two-factor is verified and user activation is expired.",
                    "timedOut": false,
                    "duration": 117,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.authy_number = \"9619982150\";\ntempRegistrationBody.country_code = \"91\";\ndelete tempRegistrationBody.password;\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\napi.put(\"/enterprise/v1/user\")\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var authy_userId = res.body.output.authy_user_uid;\n            commonMock.authySMSVerification(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/authy/sms\")\n                .send({\n                    authy_id: authy_userId\n                })\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                        api.post(\"/enterprise/v1/authy/verifyotp\")\n                            .send({\n                                authy_user_uid: authy_userId,\n                                token: otpBody.token,\n                                option_selected: \"otp\"\n                            })\n                            .set('authtoken', authToken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    _models.User.findOneAndUpdate({\n                                        uid: uid\n                                    }, {\n                                        activation_expired: true,\n                                        active: false\n                                    }, function(error, result) {\n                                        commonMock.flowLogin(httpmock, \"enterprise\");\n                                        api.post(apiURL)\n                                            .send(loginBody)\n                                            .expect(httpStatus.UNAUTHORIZED)\n                                            .end(function(err, res) {\n                                                if (err) {\n                                                    done(err);\n                                                } else {\n                                                    res.body.error.message.should.equal(messageList.USER_LOGIN_ACTIVATION_REQUIRED_ERROR);\n                                                    done();\n                                                }\n                                            });\n                                    });\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "dce04ed2-bfc4-4829-950f-09a26bdac969",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "e0d458b0-930f-42e9-abb9-606c8d7a2a11",
                  "591844df-072f-4886-a78e-954a30d95e98",
                  "7e922837-94a0-48b9-aa95-9169657ba44f",
                  "198a693c-af61-4937-bd9f-034b4d77cb43",
                  "833580be-37c1-4a37-bdad-bbf776a41d25",
                  "1f7b581d-1044-4601-bfb1-b655d245ba84",
                  "cc70781c-c4d9-494f-9901-d18b89e07055",
                  "9221e5c7-3c72-4a55-b28a-9360452fe2fd",
                  "8b8502b5-eb3d-486b-95f3-0fa36d44b321",
                  "a5ce7914-a967-4e6f-8185-16f8b96ab165",
                  "718b4237-b5aa-4ba0-b1a6-5f46c8ba67b3",
                  "54addbe2-140c-465b-b659-323d3c8122bd",
                  "6f3d130b-7bf1-45ca-aac1-e56ff06472e1",
                  "46414fce-da06-404b-9781-bc91be0b5784",
                  "5bc6104b-faa2-4276-8819-c245e8aa31d5",
                  "4ed421b3-8de7-428a-80a4-1317f8ca1ac9",
                  "e7b2ba41-d336-4f97-bfa8-82c65b018d8f",
                  "88fc608e-bef2-442e-87c1-ddcc73821354",
                  "863f2e37-97e6-4c87-b527-ceab5bc8ffc3",
                  "d3f0e741-cbb3-4ee6-8d67-903778a814c0",
                  "bca5371a-cfb9-4081-b39b-670f6e0a4bc4",
                  "6ca40fc1-7e92-4559-a879-602ef50cc2a4",
                  "8254b72e-e30e-4919-9ae9-23474432ea0a",
                  "c3a4dc59-9bac-4d72-a807-e5c0d87e99c5",
                  "83c7497d-9f5a-40e5-b6e1-732c7e70570c",
                  "dce04ed2-bfc4-4829-950f-09a26bdac969"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 13796,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "de0cfa6f-0605-448b-b804-15ba6bfc484d",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\users\\loginWithGoogle.enterprise.js",
        "file": "\\controllers\\test\\users\\loginWithGoogle.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "c2e1a6cd-08e6-4f06-96df-fcc1722b4709",
            "title": "User",
            "fullFile": "C:\\work\\api\\controllers\\test\\users\\loginWithGoogle.enterprise.js",
            "file": "\\controllers\\test\\users\\loginWithGoogle.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "3f786a95-c164-40be-bf81-f0c265a6a2cd",
                "title": "User.LoginGoogle",
                "fullFile": "C:\\work\\api\\controllers\\test\\users\\loginWithGoogle.enterprise.js",
                "file": "\\controllers\\test\\users\\loginWithGoogle.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.LoginGoogle \"before each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({}, function(error, user) {\n    _models.Mail.remove({}, function(error, user) {\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6b3fe796-ccd6-4a0a-983e-d94c680cb79b",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User User.LoginGoogle \"after each\" hook",
                    "timedOut": false,
                    "duration": 1,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7b8782fb-4dfd-40ca-94e4-5e137f45ba26",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should allowed to login into gmail account.",
                    "fullTitle": "Enterprise User User.LoginGoogle Should allowed to login into gmail account.",
                    "timedOut": false,
                    "duration": 95,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\ncommonMock.googleLogin(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(loginBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.email == registrationBody.email && res.body.output.active;\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "654058d6-d511-4714-9bb8-9def71a86608",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give same plan on login with google account for already register enterprise account.",
                    "fullTitle": "Enterprise User User.LoginGoogle Should give same plan on login with google account for already register enterprise account.",
                    "timedOut": false,
                    "duration": 140,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\napi.post(\"/enterprise/v1/signup\")\n    .send(registrationBody)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var user_uid = res.body.output.uid;\n            var authtoken = res.body.output.authtoken;\n            var plan_uid = res.body.output.plan[0].uid;\n            _models.Plan.find({\n                deleted_at: null,\n                plan_type: \"enterprise\",\n                default: false\n            }, function(error, plans) {\n                if (err) {\n                    done(err);\n                } else {\n                    var plan = plans[0];\n                    _models.User.findOneAndUpdate({\n                        uid: user_uid\n                    }, {\n                        plan: [plan._id]\n                    }, { new: true }, function(error, user) {\n                        if (error) {\n                            done(error);\n                        } else {\n                            api.get(\"/enterprise/v1/user\")\n                                .set({\n                                    authtoken: authtoken\n                                })\n                                .expect(httpStatus.OK)\n                                .end(function(err, res) {\n                                    if (err) {\n                                        done(err);\n                                    } else {\n                                        commonMock.setSignUpMocks(httpmock, \"enterprise\");\n                                        commonMock.googleLogin(httpmock, \"enterprise\");\n                                        api.post(apiURL)\n                                            .send(loginBody)\n                                            .expect(httpStatus.OK)\n                                            .end(function(err, res) {\n                                                if (err) {\n                                                    done(err);\n                                                } else {\n                                                    var isValid = res.body.output.email ==\n                                                        registrationBody.email &&\n                                                        res.body.output.plan[0].uid == plan.uid &&\n                                                        res.body.output.active;\n                                                    isValid.should.equal(true);\n                                                    done();\n                                                }\n                                            });\n                                    }\n                                });\n                        }\n                    });\n                }\n            });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c61e7199-fe6b-42d4-b9e8-8803decb1dd4",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should login into existing account register with same email.",
                    "fullTitle": "Enterprise User User.LoginGoogle Should login into existing account register with same email.",
                    "timedOut": false,
                    "duration": 119,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\ncommonMock.googleLogin(httpmock, \"enterprise\");\napi.post(\"/enterprise/v1/signup\")\n    .send(registrationBody)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            commonMock.googleLogin(httpmock, \"enterprise\");\n            commonMock.brainTreeClientToken(httpmock, \"enterprise\");\n            api.post(apiURL)\n                .send(loginBody)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        var isValid = res.body.output.email == registrationBody.email &&\n                            res.body.output.active == true;\n                        isValid.should.equal(true);\n                        done();\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "16a71082-929b-4268-a4bb-e04da33dd951",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should create another record if existing deleted login record available",
                    "fullTitle": "Enterprise User User.LoginGoogle Should create another record if existing deleted login record available",
                    "timedOut": false,
                    "duration": 184,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\ncommonMock.googleLogin(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(loginBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var uid = res.body.output.uid || \"\";\n            _models.User.findOneAndUpdate({ \"uid\": uid }, {\n                deleted_at: new Date()\n            }, { new: true }, function(err, user) {\n                if (err) {\n                    done(err);\n                } else {\n                    commonMock.setSignUpMocks(httpmock, \"enterprise\");\n                    commonMock.googleLogin(httpmock, \"enterprise\");\n                    api.post(apiURL)\n                        .send(loginBody)\n                        .expect(httpStatus.OK)\n                        .end(function(err, res) {\n                            if (err) {\n                                done(err);\n                            } else {\n                                _models.User.find({ \"email\": registrationBody.email }, function(err, users) {\n                                    if (err) {\n                                        done(err);\n                                    } else {\n                                        var isValid = users.length == 2;\n                                        isValid.should.equal(true);\n                                        done();\n                                    }\n                                });\n                            }\n                        });\n                }\n            });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "89818140-b81d-4ca0-8a0f-4395c5cca28a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get default plan.",
                    "fullTitle": "Enterprise User User.LoginGoogle Should get default plan.",
                    "timedOut": false,
                    "duration": 95,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\ncommonMock.googleLogin(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(loginBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (res.body.output.plan.length == 1) {\n                var defaultPlan = _.first(_.filter(server.plan.list, function(plan) {\n                    //return (plan || {}).express_plan || false;\n                    return ((plan || {}).plan_type || \"\") == \"enterprise\";\n                })) || {};\n                defaultPlan = utils.skipAttr(convert.getJSON(defaultPlan));\n                isValid = res.body.output.plan[0].uid == defaultPlan.uid;\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e9b3d07e-4089-4e1f-a50b-45687e37ef29",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get default attributes.",
                    "fullTitle": "Enterprise User User.LoginGoogle Should get default attributes.",
                    "timedOut": false,
                    "duration": 91,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\ncommonMock.googleLogin(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(loginBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (res.body.output.plan.length == 1) {\n                isValid = utils.isHaveKeyVals(res.body.output, [\n                        \"first_name\", \"flow_uid\", \"job_title\", \"last_name\", \"locale\",\n                        \"merchantid\", \"payment_set\", \"subscription\"\n                    ]) &&\n                    res.body.output.subscription.days == server.plan.enterprise.TrialPeriod &&\n                    moment(new Date(res.body.output.subscription.start_date)).format(\"YYYY-MM-DD\") ==\n                    moment(new Date()).format(\"YYYY-MM-DD\");\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "514baed3-1e4d-4f3b-aa62-d3de9c6efcdf",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get default user_plan.",
                    "fullTitle": "Enterprise User User.LoginGoogle Should get default user_plan.",
                    "timedOut": false,
                    "duration": 89,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\ncommonMock.googleLogin(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(loginBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.user_plan.should.exist;\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fa61f5b1-d82f-436f-8264-5f79b8f6190b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should login with enterprise account.",
                    "fullTitle": "Enterprise User User.LoginGoogle Should login with enterprise account.",
                    "timedOut": false,
                    "duration": 92,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\ncommonMock.googleLogin(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(loginBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.user_type.should.equal(config.service_types.enterprise.name);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ec49f279-4068-422c-ab1c-e15922783a80",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get different authtoken on re-login.",
                    "fullTitle": "Enterprise User User.LoginGoogle Should get different authtoken on re-login.",
                    "timedOut": false,
                    "duration": 118,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\ncommonMock.googleLogin(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send(loginBody)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var firstAuthToken = res.body.output.authtoken;\n            commonMock.brainTreeClientToken(httpmock, \"enterprise\");\n            commonMock.googleLogin(httpmock, \"enterprise\");\n            api.post(apiURL)\n                .send(loginBody)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        var secondAuthToken = res.body.output.authtoken;\n                        firstAuthToken.should.not.equal(secondAuthToken);\n                        done();\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e8aeda75-8abf-46f7-9370-25a1b3e7f75a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should create account with enterprise details, if express user exists.",
                    "fullTitle": "Enterprise User User.LoginGoogle Should create account with enterprise details, if express user exists.",
                    "timedOut": false,
                    "duration": 4687,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.email = \"test.user+1@raweng.com\";\ncommonMock.setSignUpMocks(httpmock, \"express\", {\n    email: tempRegistrationBody.email,\n    access_token: plus1User.access_token\n});\napi.post(\"/express/v1/signup\")\n    .send(tempRegistrationBody)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            commonMock.setSignUpMocks(httpmock, \"enterprise\", {\n                email: tempRegistrationBody.email,\n                access_token: plus1User.access_token\n            });\n            commonMock.googleLogin(httpmock, \"enterprise\", {\n                email: tempRegistrationBody.email,\n                access_token: plus1User.access_token\n            });\n            api.post(apiURL)\n                .send(plus1User)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        res.body.output.email.should.equal(tempRegistrationBody.email);\n                        done();\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ccc670b9-67ba-47a7-95f3-98fe56d8f344",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should create account with enterprise details, if one active and one deleted express user exists.",
                    "fullTitle": "Enterprise User User.LoginGoogle Should create account with enterprise details, if one active and one deleted express user exists.",
                    "timedOut": false,
                    "duration": 5769,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.email = \"test.user+1@raweng.com\";\ncommonMock.setSignUpMocks(httpmock, \"express\", {\n    email: tempRegistrationBody.email\n});\napi.post(\"/express/v1/signup\")\n    .send(tempRegistrationBody)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var user_uid = res.body.output.uid;\n            _models.User.findOneAndUpdate({ \"uid\": user_uid }, {\n                \"deleted_at\": new Date()\n            }, { new: true }, function(error, result) {\n                if (error) {\n                    done(error);\n                } else {\n                    commonMock.setSignUpMocks(httpmock, \"express\", {\n                        email: tempRegistrationBody.email\n                    });\n                    api.post(\"/express/v1/signup\")\n                        .send(tempRegistrationBody)\n                        .expect(httpStatus.CREATED)\n                        .end(function(err, res) {\n                            if (err) {\n                                done(err);\n                            } else {\n                                var user_uid = res.body.output.uid;\n                                commonMock.setSignUpMocks(httpmock, \"enterprise\", {\n                                    email: tempRegistrationBody.email\n                                });\n                                commonMock.googleLogin(httpmock, \"enterprise\", {\n                                    email: tempRegistrationBody.email\n                                });\n                                api.post(apiURL)\n                                    .send(plus1User)\n                                    .expect(httpStatus.OK)\n                                    .end(function(err, res) {\n                                        if (err) {\n                                            done(err);\n                                        } else {\n                                            res.body.output.email.should.equal(tempRegistrationBody.email);\n                                            done();\n                                        }\n                                    });\n                            }\n                        });\n                }\n            });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9c71d59b-2540-4035-9e81-4fb89266d44b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should register user if email dosen't register with any service.",
                    "fullTitle": "Enterprise User User.LoginGoogle Should register user if email dosen't register with any service.",
                    "timedOut": false,
                    "duration": 91,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.email = \"test.user+1@raweng.com\";\ncommonMock.setSignUpMocks(httpmock, \"enterprise\", {\n    email: tempRegistrationBody.email\n});\ncommonMock.googleLogin(httpmock, \"enterprise\", {\n    email: tempRegistrationBody.email\n});\napi.post(apiURL)\n    .send(plus1User)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.email.should.equal(tempRegistrationBody.email);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4e38fd7c-f00d-4f7c-8b46-edab4e430bae",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should allowed to login with lock user.",
                    "fullTitle": "Enterprise User User.LoginGoogle Should allowed to login with lock user.",
                    "timedOut": false,
                    "duration": 802,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempBody = getImmutable(registrationBody);\ntempBody.email = \"test.user+1@raweng.com\";\ncommonMock.setSignUpMocks(httpmock, \"enterprise\", {\n    email: tempBody.email\n});\napi.post(\"/enterprise/v1/signup\")\n    .send(tempBody)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var curDate = new Date();\n            _models.User.findOneAndUpdate({\n                uid: res.body.output.uid\n            }, {\n                deleted_at: curDate\n            }, function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    commonMock.setSignUpMocks(httpmock, \"enterprise\", {\n                        email: tempBody.email\n                    });\n                    api.post(\"/enterprise/v1/signup\")\n                        .send(tempBody)\n                        .expect(httpStatus.CREATED)\n                        .end(function(err, res) {\n                            if (err) {\n                                done(err);\n                            } else {\n                                var tempBody2 = getImmutable(loginBody);\n                                tempBody2.email = tempBody.email;\n                                tempBody2.password = \"abc123\";\n                                var loginCount = [];\n                                commonMock.flowLogin(httpmock, \"enterprise\");\n                                api.post(\"/enterprise/v1/login\")\n                                    .send(tempBody2)\n                                    .expect(httpStatus.UNAUTHORIZED)\n                                    .end(function(err, res) {\n                                        if (err) {\n                                            done(err);\n                                        } else {\n                                            if (res.body.error.message == messageList.USER_LOGIN_INVALID_CREDENTIAL)\n                                                loginCount.push(res.body.error.failed_login_count);\n                                            commonMock.flowLogin(httpmock, \"enterprise\");\n                                            api.post(\"/enterprise/v1/login\")\n                                                .send(tempBody2)\n                                                .expect(httpStatus.UNAUTHORIZED)\n                                                .end(function(err, res) {\n                                                    if (err) {\n                                                        done(err);\n                                                    } else {\n                                                        if (res.body.error.message == messageList.USER_LOGIN_INVALID_CREDENTIAL)\n                                                            loginCount.push(res.body.error.failed_login_count);\n                                                        commonMock.flowLogin(httpmock, \"enterprise\");\n                                                        api.post(\"/enterprise/v1/login\")\n                                                            .send(tempBody2)\n                                                            .expect(httpStatus.UNAUTHORIZED)\n                                                            .end(function(err, res) {\n                                                                if (err) {\n                                                                    done(err);\n                                                                } else {\n                                                                    if (res.body.error.message == messageList.USER_LOGIN_INVALID_CREDENTIAL)\n                                                                        loginCount.push(res.body.error.failed_login_count);\n                                                                    commonMock.flowLogin(httpmock, \"enterprise\");\n                                                                    api.post(\"/enterprise/v1/login\")\n                                                                        .send(tempBody2)\n                                                                        .expect(httpStatus.UNAUTHORIZED)\n                                                                        .end(function(err, res) {\n                                                                            if (err) {\n                                                                                done(err);\n                                                                            } else {\n                                                                                if (res.body.error.message == messageList.USER_LOGIN_CAPTCHA_REQUIRED)\n                                                                                    loginCount.push(res.body.error.failed_login_count);\n                                                                                commonMock.flowLogin(httpmock, \"enterprise\");\n                                                                                api.post(\"/enterprise/v1/login\")\n                                                                                    .send(tempBody2)\n                                                                                    .expect(httpStatus.UNAUTHORIZED)\n                                                                                    .end(function(err, res) {\n                                                                                        if (err) {\n                                                                                            done(err);\n                                                                                        } else {\n                                                                                            if (res.body.error.message == messageList.USER_LOGIN_CAPTCHA_REQUIRED)\n                                                                                                loginCount.push(res.body.error.failed_login_count);\n                                                                                            commonMock.flowLogin(httpmock, \"enterprise\");\n                                                                                            api.post(\"/enterprise/v1/login\")\n                                                                                                .send(tempBody2)\n                                                                                                .expect(httpStatus.UNAUTHORIZED)\n                                                                                                .end(function(err, res) {\n                                                                                                    if (err) {\n                                                                                                        done(err);\n                                                                                                    } else {\n                                                                                                        if (res.body.error.message == messageList.ENTERPRISE_USER_LOGIN_ACCOUNT_LOCK)\n                                                                                                            loginCount.push(res.body.error.failed_login_count);\n                                                                                                        var isValid = loginCount[0] == 1 &&\n                                                                                                            loginCount[1] == 2 &&\n                                                                                                            loginCount[2] == 3 &&\n                                                                                                            loginCount[3] == 4 &&\n                                                                                                            loginCount[4] == 5 &&\n                                                                                                            loginCount[5] == 6;\n                                                                                                        if (isValid) {\n                                                                                                            api.get(\"/enterprise/v1/status?email=\" + tempBody2.email)\n                                                                                                                .expect(httpStatus.OK)\n                                                                                                                .end(function(err, res) {\n                                                                                                                    if (err) {\n                                                                                                                        done(err);\n                                                                                                                    } else {\n                                                                                                                        if (res.body.output.block && res.body.output.show_captcha) {\n                                                                                                                            commonMock.setSignUpMocks(httpmock, \"enterprise\", {\n                                                                                                                                email: tempBody2.email\n                                                                                                                            });\n                                                                                                                            commonMock.googleLogin(httpmock, \"enterprise\", {\n                                                                                                                                email: tempBody2.email\n                                                                                                                            });\n                                                                                                                            api.post(apiURL)\n                                                                                                                                .send(tempBody2)\n                                                                                                                                .expect(httpStatus.OK)\n                                                                                                                                .end(function(err, res) {\n                                                                                                                                    if (err) {\n                                                                                                                                        done(err);\n                                                                                                                                    } else {\n                                                                                                                                        var isValid = res.body.output.email == tempBody2.email && res.body.output.active;\n                                                                                                                                        isValid.should.equal(true);\n                                                                                                                                        done();\n                                                                                                                                    }\n                                                                                                                                });\n                                                                                                                        } else {\n                                                                                                                            false.should.equal(true);\n                                                                                                                        }\n                                                                                                                    }\n                                                                                                                });\n                                                                                                        } else {\n                                                                                                            false.should.equal(true);\n                                                                                                        }\n                                                                                                    }\n                                                                                                });\n                                                                                        }\n                                                                                    });\n                                                                            }\n                                                                        });\n                                                                }\n                                                            });\n                                                    }\n                                                });\n                                        }\n                                    });\n                            }\n                        });\n                }\n            });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "038b1343-92df-4b60-8132-74b29b16428f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should allowed to login with captcha, after three fail attempts.",
                    "fullTitle": "Enterprise User User.LoginGoogle Should allowed to login with captcha, after three fail attempts.",
                    "timedOut": false,
                    "duration": 361,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\napi.post(\"/enterprise/v1/signup\")\n    .send(registrationBody)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var tempBody = getImmutable(loginBody);\n            tempBody.email = registrationBody.email;\n            tempBody.password = \"abc123\";\n            commonMock.flowLogin(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/login\")\n                .send(tempBody)\n                .expect(httpStatus.UNAUTHORIZED)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        commonMock.flowLogin(httpmock, \"enterprise\");\n                        api.post(\"/enterprise/v1/login\")\n                            .send(tempBody)\n                            .expect(httpStatus.UNAUTHORIZED)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    commonMock.flowLogin(httpmock, \"enterprise\");\n                                    api.post(\"/enterprise/v1/login\")\n                                        .send(tempBody)\n                                        .expect(httpStatus.UNAUTHORIZED)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                commonMock.brainTreeClientToken(httpmock, \"enterprise\");\n                                                commonMock.googleLogin(httpmock, \"enterprise\");\n                                                commonMock.captchaVerification(httpmock, \"enterprise\");\n                                                tempBody.password = \"Raw@1234\";\n                                                tempBody.captcha_code = \"03AHJ_Vuu_lnKuNq-eLmTlTmWe6Aozhp6z0uLva1JGwwIKCkGu0x3S-8qFAHtZxL3TuJatYJnGOxta3250lueM1wWWb89Lk1zNeobupy-bg579yiGTwr4_IHsN_eWANc40w_EToNjf4mmeKxLbspOGq9YEZlWFb6d5pNnT--ImOkvcoiqwrmKjQIKPEoJBlXbuTL2NfNrrEPjhCpnmSQR6z3CRD1G-V3sVFeBbzHjoatg2wpFgnS5ikf42hNcq6JP0TwhQ86pwCqZ86JKm2UQe1ISxQUOckNXx6dG9NuCjypFmEsvOaL7qrhmcbp77hfzNamTEt1GVpNBlpKMtND6FDn8X05Ni3xoZDDhjZzRvlJQWf9ygHjsVByEEQv5GU9l1f4CI1gPbulwHQFN3d_8S0mbpBOfI-YQ_fE3lSWp0dDA2mxdDXOVi7tQgIBZhRFPAa8Jt9R9_TaSch6Ygq6qrkkIuekVIs6jSsLsLavpKZgtUkLJcf1RaUUZharASNuMIt3_s9EbWM42WCs8aMLWPo8qMu4pKa6cS5Bd3D-TFTBmtADFpOvDHjqfXqX_PemEg_ZVEXUYYGQ3YhJhESe8OCuxWqcs84Jzyln7-BIxYrMEDOgejqPrUc8nOU9F2o-MtjWohx_8ci0-078Fg6UGPWUGqZ2ttrvK9mIkFi1iQVhTcThPEFH2SoG993B3YqmEagHtBwOid2pNzYY_hAffXSSvURdJstiZi7qV_ZNxnJ9CSlljI8erdb4cPSrIY8XIEahiC-q3ODrATTXfkv5iGXeYI7_rDO0DmH3OS5g9rmFZb4RTows9Gmp8xOA91_faynmaM0009rOjYx0pxAqZZECTJu20Qyvbu0_d-dd7n7vMPHvoEMqbXQhXQO62zBK-h3PRRWQlLdFgwj498SgMsFkbo1SBRi1943w\";\n                                                api.post(apiURL)\n                                                    .send(tempBody)\n                                                    .expect(httpStatus.OK)\n                                                    .end(function(err, res) {\n                                                        if (err) {\n                                                            done(err);\n                                                        } else {\n                                                            registrationBody.email.should.equal(res.body.output.email);\n                                                            done();\n                                                        }\n                                                    });\n                                            }\n                                        });\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8166af39-ffb8-4db7-a838-cc04fcc7caa6",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not required captcha for google login.",
                    "fullTitle": "Enterprise User User.LoginGoogle Should not required captcha for google login.",
                    "timedOut": false,
                    "duration": 366,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\napi.post(\"/enterprise/v1/signup\")\n    .send(registrationBody)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var tempBody = getImmutable(loginBody);\n            tempBody.email = registrationBody.email;\n            tempBody.password = \"abc123\";\n            commonMock.flowLogin(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/login\")\n                .send(tempBody)\n                .expect(httpStatus.UNAUTHORIZED)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        commonMock.flowLogin(httpmock, \"enterprise\");\n                        api.post(\"/enterprise/v1/login\")\n                            .send(tempBody)\n                            .expect(httpStatus.UNAUTHORIZED)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    commonMock.flowLogin(httpmock, \"enterprise\");\n                                    api.post(\"/enterprise/v1/login\")\n                                        .send(tempBody)\n                                        .expect(httpStatus.UNAUTHORIZED)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                tempBody.password = registrationBody.password;\n                                                api.get(\"/enterprise/v1/status?email=\" + tempBody.email)\n                                                    .send(tempBody)\n                                                    .expect(httpStatus.OK)\n                                                    .end(function(err, res) {\n                                                        if (err) {\n                                                            done(err);\n                                                        } else {\n                                                            if (res.body.output.block == false && res.body.output.show_captcha) {\n                                                                commonMock.googleLogin(httpmock, \"enterprise\");\n                                                                commonMock.brainTreeFailClientToken(httpmock, \"enterprise\");\n                                                                api.post(apiURL)\n                                                                    .send(tempBody)\n                                                                    .expect(httpStatus.OK)\n                                                                    .end(function(err, res) {\n                                                                        if (err) {\n                                                                            done(err);\n                                                                        } else {\n                                                                            var isValid = res.body.output.email == registrationBody.email && res.body.output.active;\n                                                                            isValid.should.equal(true);\n                                                                            done();\n                                                                        }\n                                                                    });\n                                                            } else {\n                                                                false.should.equal(true);\n                                                            }\n                                                        }\n                                                    });\n                                            }\n                                        });\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "df0bdcd5-5ef3-460d-ad9c-170e9bfb6f9a",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "654058d6-d511-4714-9bb8-9def71a86608",
                  "c61e7199-fe6b-42d4-b9e8-8803decb1dd4",
                  "16a71082-929b-4268-a4bb-e04da33dd951",
                  "89818140-b81d-4ca0-8a0f-4395c5cca28a",
                  "e9b3d07e-4089-4e1f-a50b-45687e37ef29",
                  "514baed3-1e4d-4f3b-aa62-d3de9c6efcdf",
                  "fa61f5b1-d82f-436f-8264-5f79b8f6190b",
                  "ec49f279-4068-422c-ab1c-e15922783a80",
                  "e8aeda75-8abf-46f7-9370-25a1b3e7f75a",
                  "ccc670b9-67ba-47a7-95f3-98fe56d8f344",
                  "9c71d59b-2540-4035-9e81-4fb89266d44b",
                  "4e38fd7c-f00d-4f7c-8b46-edab4e430bae",
                  "038b1343-92df-4b60-8132-74b29b16428f",
                  "8166af39-ffb8-4db7-a838-cc04fcc7caa6",
                  "df0bdcd5-5ef3-460d-ad9c-170e9bfb6f9a"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 13099,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "927cb6d0-ffe8-4249-bc77-7c821666a9a3",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\users\\logout.enterprise.js",
        "file": "\\controllers\\test\\users\\logout.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "c858bb1b-8ecc-4e32-9cf9-29b5e9ecdd8d",
            "title": "User",
            "fullFile": "C:\\work\\api\\controllers\\test\\users\\logout.enterprise.js",
            "file": "\\controllers\\test\\users\\logout.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "a4e0a96c-bceb-4cb9-82ba-90ebd426ea23",
                "title": "User.Logout",
                "fullFile": "C:\\work\\api\\controllers\\test\\users\\logout.enterprise.js",
                "file": "\\controllers\\test\\users\\logout.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.Logout \"before each\" hook",
                    "timedOut": false,
                    "duration": 90,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({}, function(error, user) {\n    _models.Mail.remove({}, function(error, user) {\n        commonMock.setSignUpMocks(httpmock, \"enterprise\");\n        api.post(\"/enterprise/v1/signup\")\n            .send(registrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    userObj = res.body.output\n                    authToken = userObj.authtoken;\n                    _id = userObj._id;\n                    done();\n                }\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e32e370b-9427-4818-9fa4-51a59c34411d",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User User.Logout \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b17a2992-f1c9-42ab-867c-4a08ecaeb1dd",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "User should get logout.",
                    "fullTitle": "Enterprise User User.Logout User should get logout.",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.message.should.equal(messageList.LOGOUT_SUCCESS);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5ef9dcf3-a03c-4e2a-a843-426881266e45",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "User should get logout with get route.",
                    "fullTitle": "Enterprise User User.Logout User should get logout with get route.",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.message.should.equal(messageList.LOGOUT_SUCCESS);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "21851aa5-c897-4742-858f-ae1250b5edc4",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "User should get logout even if his account is suspend.",
                    "fullTitle": "Enterprise User User.Logout User should get logout even if his account is suspend.",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar query = _models.User.findOneAndUpdate({ uid: userObj.uid }, { force_suspend: true }, { new: true })\nquery.lean().exec(function(err, user) {\n    if (err) {\n        done(err);\n    } else {\n        api.post(apiURL)\n            .set('authtoken', authToken)\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    res.body.output.message.should.equal(messageList.LOGOUT_SUCCESS);\n                    done();\n                }\n            });\n    }\n})",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cea50d2b-0ef1-4f59-af5f-4c8aee3b531a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "User authtoken should get remove from user collection.",
                    "fullTitle": "Enterprise User User.Logout User authtoken should get remove from user collection.",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            _models.User.findOne({ _id: _id }, function(err, user) {\n                if (err) {\n                    done(err);\n                } else {\n                    (((user || {})[\"_doc\"] || {}).authtoken || []).length.should.equal(0);\n                    done();\n                }\n            });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "98de3f15-1aaf-4f57-b7bf-b3e4af0ba5d6",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise User User.Logout Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "99b3ff56-7df2-4be2-aeed-1d7688aee4c6",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "5ef9dcf3-a03c-4e2a-a843-426881266e45",
                  "21851aa5-c897-4742-858f-ae1250b5edc4",
                  "cea50d2b-0ef1-4f59-af5f-4c8aee3b531a",
                  "98de3f15-1aaf-4f57-b7bf-b3e4af0ba5d6",
                  "99b3ff56-7df2-4be2-aeed-1d7688aee4c6"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 62,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "3a2f4e13-9206-4164-9612-0643f1000978",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\users\\processSSOLogin.enterprise.js",
        "file": "\\controllers\\test\\users\\processSSOLogin.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "46f4236f-3d23-4e02-b461-fd30c74033ef",
            "title": "User",
            "fullFile": "C:\\work\\api\\controllers\\test\\users\\processSSOLogin.enterprise.js",
            "file": "\\controllers\\test\\users\\processSSOLogin.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "e23533cc-1e22-47d5-a068-0ffa179465d1",
                "title": "User.processSSOLogin",
                "fullFile": "C:\\work\\api\\controllers\\test\\users\\processSSOLogin.enterprise.js",
                "file": "\\controllers\\test\\users\\processSSOLogin.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.processSSOLogin \"before each\" hook",
                    "timedOut": false,
                    "duration": 2,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "053ca1f4-5591-45c7-bb5d-c8706e730117",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User User.processSSOLogin \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a33e1167-2c0a-4632-9ac9-5869472d175e",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should login with SSO.",
                    "fullTitle": "Enterprise User User.processSSOLogin Should login with SSO.",
                    "timedOut": false,
                    "duration": 1567,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncreateSSOProvider({\n}, function(error, ssoProvider) {\n    api.get(\"/enterprise/v1/login/raweng\")\n        .expect(httpStatus.MOVED_TEMPORARILY)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                if (res.headers.location.indexOf(ssoConfig.entry_point) == 0) {\n                    var data = getImmutable(usersData.SMALRespWithoutAuthtoken);\n                    delete data.RelayState;\n                    api.post(\"/enterprise/v1/login/raweng\")\n                        .send(data)\n                        .expect(httpStatus.MOVED_TEMPORARILY)\n                        .end(function(err, res) {\n                            if (err) {\n                                done(err);\n                            } else {\n                                var qs = querystring.parse(res.headers.location);\n                                var authtoken = qs[\"sid\"] || qs[sso_urls.success + \"?sid\"] || \"\";\n                                var _config = config;\n                                api.get(\"/enterprise/v1/user\")\n                                    .set({ 'authtoken': authtoken })\n                                    .expect(httpStatus.OK)\n                                    .end(function(err, res) {\n                                        if (err) {\n                                            done(err);\n                                        } else {\n                                            var isValid = res.body.output.uid != \"\" &&\n                                                typeof(res.body.output._id) == \"undefined\" &&\n                                                typeof(res.body.output.__v) == \"undefined\" &&\n                                                res.body.output.plan[0].name.indexOf(\"Trial\") > -1;\n                                            isValid.should.equal(true);\n                                            done();\n                                        }\n                                    });\n                            }\n                        });\n                } else {\n                    true.should.equal(false);\n                    done();\n                }\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3fc1f9e6-5512-48e0-b4bd-8b750b950a09",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should do login with SSO re-login.",
                    "fullTitle": "Enterprise User User.processSSOLogin Should do login with SSO re-login.",
                    "timedOut": false,
                    "duration": 1905,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncreateSSOProvider({\n}, function(error, ssoProvider) {\n    api.get(\"/enterprise/v1/login/raweng\")\n        .expect(httpStatus.MOVED_TEMPORARILY)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                if (res.headers.location.indexOf(ssoConfig.entry_point) == 0) {\n                    doSSOLogin({\n                        done: done\n                    }, function() {\n                        doSSOLogin({\n                            done: done,\n                            email: \"Amber.More@raweng.com\"\n                        }, function() {\n                            true.should.equal(true);\n                            done();\n                        });\n                    });\n                } else {\n                    true.should.equal(false);\n                    done();\n                }\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d776fcc3-2289-43a1-ac39-826b1113ad21",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get specific plan to user.",
                    "fullTitle": "Enterprise User User.processSSOLogin Should get specific plan to user.",
                    "timedOut": false,
                    "duration": 3463,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncreateSSOProvider({\n    plan: \"fl4d44d77af613ae44845883\"\n}, function(error, ssoProvider) {\n    api.get(\"/enterprise/v1/login/raweng\")\n        .expect(httpStatus.MOVED_TEMPORARILY)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                if (res.headers.location.indexOf(ssoConfig.entry_point) == 0) {\n                    var data = getImmutable(usersData.SMALRespWithoutAuthtoken);\n                    delete data.RelayState;\n                    api.post(\"/enterprise/v1/login/raweng\")\n                        .send(data)\n                        .expect(httpStatus.MOVED_TEMPORARILY)\n                        .end(function(err, res) {\n                            if (err) {\n                                done(err);\n                            } else {\n                                var qs = querystring.parse(res.headers.location);\n                                var authtoken = qs[\"sid\"] || qs[sso_urls.success + \"?sid\"] || \"\";\n                                var _config = config;\n                                api.get(\"/enterprise/v1/user\")\n                                    .set({ 'authtoken': authtoken })\n                                    .expect(httpStatus.OK)\n                                    .end(function(err, res) {\n                                        if (err) {\n                                            done(err);\n                                        } else {\n                                            var isValid = res.body.output.uid != \"\" &&\n                                                typeof(res.body.output._id) == \"undefined\" &&\n                                                typeof(res.body.output.__v) == \"undefined\" &&\n                                                res.body.output.plan[0].name.indexOf(\"Light Plan\") != -1;\n                                            isValid.should.equal(true);\n                                            done();\n                                        }\n                                    });\n                            }\n                        });\n                } else {\n                    true.should.equal(false);\n                    done();\n                }\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "80191911-e098-40ee-b9ce-9f8d1604dd4b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get metadata xml.",
                    "fullTitle": "Enterprise User User.processSSOLogin Should get metadata xml.",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "// sso.getMetadata\nthis.timeout(apiTimeOut);\ncreateSSOProvider({\n}, function(error, ssoProvider) {\n    api.get(\"/enterprise/v1/sso/metadata/raweng\")\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                res.text.toString().startsWith(\"<?xml\").should.equal(true);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "37c3e172-1537-4504-aa25-b5ccfc514cd2",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should overwrite user session management timeout.",
                    "fullTitle": "Enterprise User User.processSSOLogin Should overwrite user session management timeout.",
                    "timedOut": false,
                    "duration": 2850,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncreateSSOProvider({\n}, function(error, ssoProvider) {\n    api.get(\"/enterprise/v1/login/raweng\")\n        .expect(httpStatus.MOVED_TEMPORARILY)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                if (res.headers.location.indexOf(ssoConfig.entry_point) == 0) {\n                    var data = usersData.SMALRespWithoutAuthtoken;\n                    api.post(\"/enterprise/v1/login/raweng\")\n                        .send(data)\n                        .expect(httpStatus.MOVED_TEMPORARILY)\n                        .end(function(err, res) {\n                            if (err) {\n                                done(err);\n                            } else {\n                                var qs = querystring.parse(res.headers.location);\n                                var authtoken = qs[\"sid\"] || qs[sso_urls.success + \"?sid\"] || \"\";\n                                var date = moment(new Date());\n                                date.subtract({ hours: 4, minutes: 5 });\n                                _models.UserToken.findOneAndUpdate({\n                                    authtoken: authtoken\n                                }, {\n                                    idle_valid_till: date\n                                }, {\n                                    new: true\n                                }, function(error, user) {\n                                    api.get(\"/enterprise/v1/user\")\n                                        .set('authtoken', authtoken)\n                                        .expect(httpStatus.OK)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                var isValid = res.body.output.uid != \"\" &&\n                                                    typeof(res.body.output._id) == \"undefined\" &&\n                                                    typeof(res.body.output.__v) == \"undefined\";\n                                                isValid.should.equal(true);\n                                                done();\n                                            }\n                                        });\n                                });\n                            }\n                        });\n                } else {\n                    true.should.equal(false);\n                    done();\n                }\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7a94e8fa-f7c2-4701-b7d3-5fae03757b9a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should do test login without enabling SSO.",
                    "fullTitle": "Enterprise User User.processSSOLogin Should do test login without enabling SSO.",
                    "timedOut": false,
                    "duration": 139,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar _ssoConfig = getImmutable(ssoConfig);\nvar email = \"amber.more@raweng.com\";\ncreateSSOProvider({\n    enable_sso: false\n}, function(error, ssoProvider) {\n    signUpUser({\n        email: email\n    }, function(res) {\n        var newUserAuthtoken = res.body.output.authtoken;\n        api.get(\"/enterprise/v1/login/raweng?test=true\")\n            .expect(httpStatus.MOVED_TEMPORARILY)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    if (res.headers.location.indexOf(ssoConfig.entry_point) == 0) {\n                        var qs = querystring.parse(res.headers.location);\n                        var data = usersData.SMALRespWithoutAuthtoken;\n                        data.RelayState = qs.RelayState;\n                        api.post(\"/enterprise/v1/login/raweng\")\n                            .send(data)\n                            .expect(httpStatus.MOVED_TEMPORARILY)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    var qs = querystring.parse(res.headers.location);\n                                    var authtoken = qs[\"sid\"] || qs[sso_urls.success_test + \"?sid\"] || \"\";\n                                    api.get(\"/enterprise/v1/user\")\n                                        .set('authtoken', authtoken)\n                                        .expect(httpStatus.OK)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                var isValid = res.body.output.uid != \"\" &&\n                                                    typeof(res.body.output._id) == \"undefined\" &&\n                                                    typeof(res.body.output.__v) == \"undefined\";\n                                                isValid.should.equal(true);\n                                                done();\n                                            }\n                                        });\n                                }\n                            });\n                    } else {\n                        true.should.equal(false);\n                        done();\n                    }\n                }\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e85a53c2-d28b-470a-9865-5d43e79e713c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should use same token for secondtime login if validtill satisfies.",
                    "fullTitle": "Enterprise User User.processSSOLogin Should use same token for secondtime login if validtill satisfies.",
                    "timedOut": false,
                    "duration": 1404,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar _ssoConfig = getImmutable(ssoConfig);\nvar SSOLogin = function(sso_data, cb) {\n    var authtoken = \"\";\n    var ssoLogin = \"/enterprise/v1/login/raweng\";\n    if (sso_data.RelayState) {\n        authtoken = sso_data.authtoken || \"\";\n        ssoLogin += \"?sid=\" + authtoken\n    }\n    api.get(ssoLogin)\n        .expect(httpStatus.MOVED_TEMPORARILY)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                if (res.headers.location.indexOf(ssoConfig.entry_point) == 0) {\n                    var qs = querystring.parse(res.headers.location);\n                    var rs = utils.getRelayState({\n                        body: {\n                            RelayState: qs.RelayState\n                        }\n                    });\n                    if ((rs.authtoken || \"\") == authtoken) {\n                        sso_data.RelayState = encryption.encryptSync(JSON.stringify({\n                            a: authtoken,\n                            t: false\n                        }), encryption.getKeySync());\n                        api.post(\"/enterprise/v1/login/raweng\")\n                            .send(sso_data)\n                            .expect(httpStatus.MOVED_TEMPORARILY)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    var qs = querystring.parse(res.headers.location);\n                                    var authtoken = qs[\"sid\"] || qs[sso_urls.success + \"?sid\"] || \"\";\n                                    api.get(\"/enterprise/v1/user\")\n                                        .set('authtoken', authtoken)\n                                        .expect(httpStatus.OK)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                var isValid = res.body.output.uid != \"\" &&\n                                                    typeof(res.body.output._id) == \"undefined\" &&\n                                                    typeof(res.body.output.__v) == \"undefined\";\n                                                if (isValid) {\n                                                    cb(isValid, authtoken);\n                                                } else {\n                                                    false.should.equal(true);\n                                                    done();\n                                                }\n                                            }\n                                        });\n                                }\n                            });\n                    } else {\n                        true.should.equal(false);\n                        done();\n                    }\n                } else {\n                    true.should.equal(false);\n                    done();\n                }\n            }\n        });\n};\ncreateSSOProvider({}, function(error, ssoProvider) {\n    var data = usersData.SMALRespWithoutAuthtoken;\n    SSOLogin(data, function(isValid, authtoken) {\n        var firstToken = authtoken;\n        data.RelayState = encryption.encryptSync(JSON.stringify({\n            a: authtoken\n        }), encryption.encryptSync());\n        data.authtoken = authtoken;\n        SSOLogin(data, function(isValid, authtoken) {\n            var secondToken = authtoken;\n            if (firstToken == secondToken) {\n                _models.UserToken.find({}, function(error, tokens) {\n                    (tokens.length == 1).should.equal(true);\n                    done();\n                });\n            } else {\n                false.should.equal(true);\n                done();\n            }\n        });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5df1ed6c-46d5-4864-a806-56e9f83de5aa",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not do SSO login if SSO is disabled.",
                    "fullTitle": "Enterprise User User.processSSOLogin Should not do SSO login if SSO is disabled.",
                    "timedOut": false,
                    "duration": 97,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar _ssoConfig = getImmutable(ssoConfig);\nvar email = \"amber.more@raweng.com\";\nvar loginWithSSO = function(status, callback) {\n    api.get(\"/enterprise/v1/login/raweng\")\n        .expect(httpStatus.MOVED_TEMPORARILY)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                if (res.headers.location.indexOf(\"error\") > -1) {\n                    var qs = querystring.parse(res.headers.location);\n                    var error = qs[\"error\"] || qs[sso_urls.error + \"?error\"] || \"\";\n                    callback(error, null);\n                } else {\n                    if (res.headers.location.indexOf(ssoConfig.entry_point) == 0) {\n                        var data = usersData.SMALRespWithoutAuthtoken;\n                        api.post(\"/enterprise/v1/login/raweng\")\n                            .send(data)\n                            .expect(httpStatus.MOVED_TEMPORARILY)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    var qs = querystring.parse(res.headers.location);\n                                    var authtoken = qs[\"sid\"] || qs[sso_urls.success + \"?sid\"] || \"\";\n                                    api.get(\"/enterprise/v1/user\")\n                                        .set('authtoken', authtoken)\n                                        .expect(status)\n                                        .end(callback);\n                                }\n                            });\n                    } else {\n                        true.should.equal(false);\n                        done();\n                    }\n                }\n            }\n        });\n};\ncreateSSOProvider({\n    enable_sso: false\n}, function(error, ssoProvider) {\n    signUpUser({\n        email: email\n    }, function(res) {\n        var newUserAuthtoken = res.body.output.authtoken;\n        loginWithSSO(httpStatus.BAD_REQUEST, function(err, res) {\n            err.should.equal(messageList.SSO_DISABLE);\n            done();\n        });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "320cc50f-9e28-4c14-bbf4-7340ab7af922",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should logout all tokens.",
                    "fullTitle": "Enterprise User User.processSSOLogin Should logout all tokens.",
                    "timedOut": false,
                    "duration": 2135,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar _ssoConfig = getImmutable(ssoConfig);\nvar last_authtoken = \"\";\nvar SSOLogin = function(cb) {\n    api.get(\"/enterprise/v1/login/raweng\")\n        .expect(httpStatus.MOVED_TEMPORARILY)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                if (res.headers.location.indexOf(ssoConfig.entry_point) == 0) {\n                    var data = usersData.SMALRespWithoutAuthtoken;\n                    api.post(\"/enterprise/v1/login/raweng\")\n                        .send(data)\n                        .expect(httpStatus.MOVED_TEMPORARILY)\n                        .end(function(err, res) {\n                            if (err) {\n                                done(err);\n                            } else {\n                                var qs = querystring.parse(res.headers.location);\n                                var authtoken = qs[\"sid\"] || qs[sso_urls.success + \"?sid\"] || \"\";\n                                api.get(\"/enterprise/v1/user\")\n                                    .set('authtoken', authtoken)\n                                    .expect(httpStatus.OK)\n                                    .end(function(err, res) {\n                                        if (err) {\n                                            done(err);\n                                        } else {\n                                            var isValid = res.body.output.uid != \"\" &&\n                                                typeof(res.body.output._id) == \"undefined\" &&\n                                                typeof(res.body.output.__v) == \"undefined\";\n                                            if (isValid) {\n                                                last_authtoken = authtoken;\n                                                cb(isValid);\n                                            } else {\n                                                false.should.equal(true);\n                                                done();\n                                            }\n                                        }\n                                    });\n                            }\n                        });\n                } else {\n                    true.should.equal(false);\n                    done();\n                }\n            }\n        });\n};\ncreateSSOProvider({}, function(error, ssoProvider) {\n    SSOLogin(function() {\n        _models.UserToken.update({}, {\n            valid_till: new Date(2001, 12, 1)\n        }, {\n            multi: true\n        }, function(error, tokens) {\n            SSOLogin(function() {\n                api.post(\"/enterprise/v1/logout\")\n                    .set('authtoken', last_authtoken)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        _models.UserToken.find({ authtoken: last_authtoken }, function(error, tokens) {\n                            var is_valid = true;\n                            _.each(tokens, function(item) {\n                                is_valid = is_valid && item.deleted_at != null;\n                            });\n                            is_valid.should.equal(true);\n                            done();\n                        });\n                    });\n            });\n        });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9ae004cc-c63f-4ff1-8a4d-e8cfd723c5c4",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "3fc1f9e6-5512-48e0-b4bd-8b750b950a09",
                  "d776fcc3-2289-43a1-ac39-826b1113ad21",
                  "80191911-e098-40ee-b9ce-9f8d1604dd4b",
                  "37c3e172-1537-4504-aa25-b5ccfc514cd2",
                  "7a94e8fa-f7c2-4701-b7d3-5fae03757b9a",
                  "e85a53c2-d28b-470a-9865-5d43e79e713c",
                  "5df1ed6c-46d5-4864-a806-56e9f83de5aa",
                  "320cc50f-9e28-4c14-bbf4-7340ab7af922",
                  "9ae004cc-c63f-4ff1-8a4d-e8cfd723c5c4"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 13566,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "543ff126-01c1-4948-b44a-de4a014b3b89",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\users\\projectsworkflows.enterprise.js",
        "file": "\\controllers\\test\\users\\projectsworkflows.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "352dbf1a-1c60-4324-9800-075f287baff8",
            "title": "User",
            "fullFile": "C:\\work\\api\\controllers\\test\\users\\projectsworkflows.enterprise.js",
            "file": "\\controllers\\test\\users\\projectsworkflows.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "c773983a-a00a-4a01-8f2e-6e47d849c99e",
                "title": "User.projectsworkflows",
                "fullFile": "C:\\work\\api\\controllers\\test\\users\\projectsworkflows.enterprise.js",
                "file": "\\controllers\\test\\users\\projectsworkflows.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.projectsworkflows \"before each\" hook",
                    "timedOut": false,
                    "duration": 598,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        api.get(\"/enterprise/v1/user\")\n            .set('org_uid', org_uid)\n            .set('authtoken', authToken)\n            .expect(httpStatus.OK)\n            .end(function(err, res) {\n                env_uid = res.body.output.env_uid;\n                saveBillEntries({\n                    user_uid: user_uid,\n                    authtoken: authToken,\n                    email: data.owner.email\n                }, function(error, billEntries) {\n                    if (error) {\n                        done(error);\n                    } else {\n                        _billEntries = billEntries;\n                        saveUserStreamEntries({\n                            user_uid: user_uid,\n                            authtoken: authToken,\n                            email: data.owner.email\n                        }, function(error, userStreamEntries) {\n                            if (error) {\n                                done(error);\n                            } else {\n                                _userStreamEntries = userStreamEntries;\n                                done();\n                            }\n                        });\n                    }\n                });\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "53ed6ce8-2414-43e2-a98d-de37db444f37",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise User User.projectsworkflows \"after all\" hook",
                    "timedOut": false,
                    "duration": 2,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveEntries(function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e9edeaab-4f52-40f6-ae05-9e641b008564",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should get distinct list of flow names in user stream.",
                    "fullTitle": "Enterprise User User.projectsworkflows Should get distinct list of flow names in user stream.",
                    "timedOut": false,
                    "duration": 112,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = Array.isArray(res.body.output.flows) &&\n                Array.isArray(res.body.output.projects);\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5de8cb7d-f29a-46e0-8556-11015724609d",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get distinct list of flow based on projects.",
                    "fullTitle": "Enterprise User User.projectsworkflows Should get distinct list of flow based on projects.",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = Array.isArray(res.body.output.flows) &&\n                Array.isArray(res.body.output.projects);\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "26b6c3f6-044e-4094-9bb6-4294abab93a0",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get distinct list of projects names in user stream.",
                    "fullTitle": "Enterprise User User.projectsworkflows Should get distinct list of projects names in user stream.",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = Array.isArray(res.body.output.flows) &&\n                Array.isArray(res.body.output.projects);\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0f2abd88-1ed1-4e04-94ec-476c622347dc",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise User User.projectsworkflows Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('org_uid', org_uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bbc65387-f074-4f98-9095-f44a9b163e82",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "5de8cb7d-f29a-46e0-8556-11015724609d",
                  "26b6c3f6-044e-4094-9bb6-4294abab93a0",
                  "0f2abd88-1ed1-4e04-94ec-476c622347dc",
                  "bbc65387-f074-4f98-9095-f44a9b163e82"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 148,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "2f45473a-32ae-45c6-8b74-ce9006159c1a",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\users\\resendActivationMail.enterprise.js",
        "file": "\\controllers\\test\\users\\resendActivationMail.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "8b7a1c9c-36f1-4ef2-b0b0-0686887184fc",
            "title": "User",
            "fullFile": "C:\\work\\api\\controllers\\test\\users\\resendActivationMail.enterprise.js",
            "file": "\\controllers\\test\\users\\resendActivationMail.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "1f1c2013-7a9c-4398-8b42-51be85c1abbf",
                "title": "User.resendActivationMail",
                "fullFile": "C:\\work\\api\\controllers\\test\\users\\resendActivationMail.enterprise.js",
                "file": "\\controllers\\test\\users\\resendActivationMail.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.resendActivationMail \"before each\" hook",
                    "timedOut": false,
                    "duration": 89,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({}, function(error, user) {\n    _models.Mail.remove({}, function(error, user) {\n        commonMock.setSignUpMocks(httpmock, \"enterprise\");\n        api.post(\"/enterprise/v1/signup\")\n            .send(registrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    authToken = res.body.output.authtoken;\n                    _id = res.body.output._id;\n                    activationToken = res.body.output.activation_token;\n                    uid = res.body.output.uid;\n                    done();\n                }\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fccb1829-c0b3-4321-93f5-7f4aaf378b0d",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Should send activation email.",
                    "fullTitle": "Enterprise User User.resendActivationMail Should send activation email.",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.captchaVerification(httpmock, \"enterprise\");\napi.post(apiURL)\n    .set('authtoken', authToken)\n    .send({\n        email: registrationBody.email,\n        captcha_code: \"03AHJ_Vuu_lnKuNq-eLmTlTmWe6Aozhp6z0uLva1JGwwIKCkGu0x3S-8qFAHtZxL3TuJatYJnGOxta3250lueM1wWWb89Lk1zNeobupy-bg579yiGTwr4_IHsN_eWANc40w_EToNjf4mmeKxLbspOGq9YEZlWFb6d5pNnT--ImOkvcoiqwrmKjQIKPEoJBlXbuTL2NfNrrEPjhCpnmSQR6z3CRD1G-V3sVFeBbzHjoatg2wpFgnS5ikf42hNcq6JP0TwhQ86pwCqZ86JKm2UQe1ISxQUOckNXx6dG9NuCjypFmEsvOaL7qrhmcbp77hfzNamTEt1GVpNBlpKMtND6FDn8X05Ni3xoZDDhjZzRvlJQWf9ygHjsVByEEQv5GU9l1f4CI1gPbulwHQFN3d_8S0mbpBOfI-YQ_fE3lSWp0dDA2mxdDXOVi7tQgIBZhRFPAa8Jt9R9_TaSch6Ygq6qrkkIuekVIs6jSsLsLavpKZgtUkLJcf1RaUUZharASNuMIt3_s9EbWM42WCs8aMLWPo8qMu4pKa6cS5Bd3D-TFTBmtADFpOvDHjqfXqX_PemEg_ZVEXUYYGQ3YhJhESe8OCuxWqcs84Jzyln7-BIxYrMEDOgejqPrUc8nOU9F2o-MtjWohx_8ci0-078Fg6UGPWUGqZ2ttrvK9mIkFi1iQVhTcThPEFH2SoG993B3YqmEagHtBwOid2pNzYY_hAffXSSvURdJstiZi7qV_ZNxnJ9CSlljI8erdb4cPSrIY8XIEahiC-q3ODrATTXfkv5iGXeYI7_rDO0DmH3OS5g9rmFZb4RTows9Gmp8xOA91_faynmaM0009rOjYx0pxAqZZECTJu20Qyvbu0_d-dd7n7vMPHvoEMqbXQhXQO62zBK-h3PRRWQlLdFgwj498SgMsFkbo1SBRi1943w\"\n    })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.message.should.equal(messageList.USER_ACTIVATION_MAIL_SENT);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0feef8e8-7e2b-4d27-be83-3b0d2f8cbaf7",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should allowed to send activation link when user is locked.",
                    "fullTitle": "Enterprise User User.resendActivationMail Should allowed to send activation link when user is locked.",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.findOneAndUpdate({ \"uid\": uid }, {\n    failed_login_count: 7\n}, { new: true }, function(err, user) {\n    commonMock.captchaVerification(httpmock, \"enterprise\");\n    api.post(apiURL)\n        .set('authtoken', authToken)\n        .send({\n            email: registrationBody.email,\n            captcha_code: \"03AHJ_Vuu_lnKuNq-eLmTlTmWe6Aozhp6z0uLva1JGwwIKCkGu0x3S-8qFAHtZxL3TuJatYJnGOxta3250lueM1wWWb89Lk1zNeobupy-bg579yiGTwr4_IHsN_eWANc40w_EToNjf4mmeKxLbspOGq9YEZlWFb6d5pNnT--ImOkvcoiqwrmKjQIKPEoJBlXbuTL2NfNrrEPjhCpnmSQR6z3CRD1G-V3sVFeBbzHjoatg2wpFgnS5ikf42hNcq6JP0TwhQ86pwCqZ86JKm2UQe1ISxQUOckNXx6dG9NuCjypFmEsvOaL7qrhmcbp77hfzNamTEt1GVpNBlpKMtND6FDn8X05Ni3xoZDDhjZzRvlJQWf9ygHjsVByEEQv5GU9l1f4CI1gPbulwHQFN3d_8S0mbpBOfI-YQ_fE3lSWp0dDA2mxdDXOVi7tQgIBZhRFPAa8Jt9R9_TaSch6Ygq6qrkkIuekVIs6jSsLsLavpKZgtUkLJcf1RaUUZharASNuMIt3_s9EbWM42WCs8aMLWPo8qMu4pKa6cS5Bd3D-TFTBmtADFpOvDHjqfXqX_PemEg_ZVEXUYYGQ3YhJhESe8OCuxWqcs84Jzyln7-BIxYrMEDOgejqPrUc8nOU9F2o-MtjWohx_8ci0-078Fg6UGPWUGqZ2ttrvK9mIkFi1iQVhTcThPEFH2SoG993B3YqmEagHtBwOid2pNzYY_hAffXSSvURdJstiZi7qV_ZNxnJ9CSlljI8erdb4cPSrIY8XIEahiC-q3ODrATTXfkv5iGXeYI7_rDO0DmH3OS5g9rmFZb4RTows9Gmp8xOA91_faynmaM0009rOjYx0pxAqZZECTJu20Qyvbu0_d-dd7n7vMPHvoEMqbXQhXQO62zBK-h3PRRWQlLdFgwj498SgMsFkbo1SBRi1943w\"\n        })\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                res.body.output.message.should.equal(messageList.USER_ACTIVATION_MAIL_SENT);\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a15b4bc9-9878-4e53-ad31-54d1f6dc7ccf",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as user is not register.",
                    "fullTitle": "Enterprise User User.resendActivationMail Should give error as user is not register.",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.captchaVerification(httpmock, \"enterprise\");\napi.post(apiURL)\n    .set('authtoken', authToken)\n    .send({\n        email: \"FAKE_EMAIL@example.com\",\n        captcha_code: \"03AHJ_Vuu_lnKuNq-eLmTlTmWe6Aozhp6z0uLva1JGwwIKCkGu0x3S-8qFAHtZxL3TuJatYJnGOxta3250lueM1wWWb89Lk1zNeobupy-bg579yiGTwr4_IHsN_eWANc40w_EToNjf4mmeKxLbspOGq9YEZlWFb6d5pNnT--ImOkvcoiqwrmKjQIKPEoJBlXbuTL2NfNrrEPjhCpnmSQR6z3CRD1G-V3sVFeBbzHjoatg2wpFgnS5ikf42hNcq6JP0TwhQ86pwCqZ86JKm2UQe1ISxQUOckNXx6dG9NuCjypFmEsvOaL7qrhmcbp77hfzNamTEt1GVpNBlpKMtND6FDn8X05Ni3xoZDDhjZzRvlJQWf9ygHjsVByEEQv5GU9l1f4CI1gPbulwHQFN3d_8S0mbpBOfI-YQ_fE3lSWp0dDA2mxdDXOVi7tQgIBZhRFPAa8Jt9R9_TaSch6Ygq6qrkkIuekVIs6jSsLsLavpKZgtUkLJcf1RaUUZharASNuMIt3_s9EbWM42WCs8aMLWPo8qMu4pKa6cS5Bd3D-TFTBmtADFpOvDHjqfXqX_PemEg_ZVEXUYYGQ3YhJhESe8OCuxWqcs84Jzyln7-BIxYrMEDOgejqPrUc8nOU9F2o-MtjWohx_8ci0-078Fg6UGPWUGqZ2ttrvK9mIkFi1iQVhTcThPEFH2SoG993B3YqmEagHtBwOid2pNzYY_hAffXSSvURdJstiZi7qV_ZNxnJ9CSlljI8erdb4cPSrIY8XIEahiC-q3ODrATTXfkv5iGXeYI7_rDO0DmH3OS5g9rmFZb4RTows9Gmp8xOA91_faynmaM0009rOjYx0pxAqZZECTJu20Qyvbu0_d-dd7n7vMPHvoEMqbXQhXQO62zBK-h3PRRWQlLdFgwj498SgMsFkbo1SBRi1943w\"\n    })\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.USER_ACTIVATION_NOT_REGISTER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a45470a1-8940-4dea-8361-af0192df8902",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as user has been already activated.",
                    "fullTitle": "Enterprise User User.resendActivationMail Should give error as user has been already activated.",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(\"/enterprise/v1/user/activate\")\n    .send({\n        user_uid: uid,\n        token: activationToken\n    })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            commonMock.captchaVerification(httpmock, \"enterprise\");\n            api.post(apiURL)\n                .set('authtoken', authToken)\n                .send({\n                    email: registrationBody.email,\n                    captcha_code: \"03AHJ_Vuu_lnKuNq-eLmTlTmWe6Aozhp6z0uLva1JGwwIKCkGu0x3S-8qFAHtZxL3TuJatYJnGOxta3250lueM1wWWb89Lk1zNeobupy-bg579yiGTwr4_IHsN_eWANc40w_EToNjf4mmeKxLbspOGq9YEZlWFb6d5pNnT--ImOkvcoiqwrmKjQIKPEoJBlXbuTL2NfNrrEPjhCpnmSQR6z3CRD1G-V3sVFeBbzHjoatg2wpFgnS5ikf42hNcq6JP0TwhQ86pwCqZ86JKm2UQe1ISxQUOckNXx6dG9NuCjypFmEsvOaL7qrhmcbp77hfzNamTEt1GVpNBlpKMtND6FDn8X05Ni3xoZDDhjZzRvlJQWf9ygHjsVByEEQv5GU9l1f4CI1gPbulwHQFN3d_8S0mbpBOfI-YQ_fE3lSWp0dDA2mxdDXOVi7tQgIBZhRFPAa8Jt9R9_TaSch6Ygq6qrkkIuekVIs6jSsLsLavpKZgtUkLJcf1RaUUZharASNuMIt3_s9EbWM42WCs8aMLWPo8qMu4pKa6cS5Bd3D-TFTBmtADFpOvDHjqfXqX_PemEg_ZVEXUYYGQ3YhJhESe8OCuxWqcs84Jzyln7-BIxYrMEDOgejqPrUc8nOU9F2o-MtjWohx_8ci0-078Fg6UGPWUGqZ2ttrvK9mIkFi1iQVhTcThPEFH2SoG993B3YqmEagHtBwOid2pNzYY_hAffXSSvURdJstiZi7qV_ZNxnJ9CSlljI8erdb4cPSrIY8XIEahiC-q3ODrATTXfkv5iGXeYI7_rDO0DmH3OS5g9rmFZb4RTows9Gmp8xOA91_faynmaM0009rOjYx0pxAqZZECTJu20Qyvbu0_d-dd7n7vMPHvoEMqbXQhXQO62zBK-h3PRRWQlLdFgwj498SgMsFkbo1SBRi1943w\"\n                })\n                .expect(httpStatus.BAD_REQUEST)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        res.body.error.message.should.equal(messageList.USER_ACTIVATION_ALREADY_ACTIVATED);\n                        done();\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "16fb898e-fb63-4faa-bad4-5c392380fa36",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give captcha verification fail error.",
                    "fullTitle": "Enterprise User User.resendActivationMail Should give captcha verification fail error.",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('authtoken', authToken)\n    .send({\n        email: registrationBody.email\n    })\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.CAPTCHA_VERIFICATION_FAIL);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f1b1d6f1-5157-4370-8cd0-990d3b10c661",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "0feef8e8-7e2b-4d27-be83-3b0d2f8cbaf7",
                  "a15b4bc9-9878-4e53-ad31-54d1f6dc7ccf",
                  "a45470a1-8940-4dea-8361-af0192df8902",
                  "16fb898e-fb63-4faa-bad4-5c392380fa36",
                  "f1b1d6f1-5157-4370-8cd0-990d3b10c661"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 30,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "dd18cd94-261e-4cd9-ae70-35a46ec24f96",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\users\\resetPassword.enterprise.js",
        "file": "\\controllers\\test\\users\\resetPassword.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "832e92d8-f112-408f-8929-de58635fd24a",
            "title": "User",
            "fullFile": "C:\\work\\api\\controllers\\test\\users\\resetPassword.enterprise.js",
            "file": "\\controllers\\test\\users\\resetPassword.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "b927c127-9d50-4345-a36b-dc2c51ebef76",
                "title": "User.resetPassword",
                "fullFile": "C:\\work\\api\\controllers\\test\\users\\resetPassword.enterprise.js",
                "file": "\\controllers\\test\\users\\resetPassword.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.resetPassword \"before each\" hook",
                    "timedOut": false,
                    "duration": 91,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveRecords(function() {\n    commonMock.setSignUpMocks(httpmock, \"enterprise\");\n    api.post(\"/enterprise/v1/signup\")\n        .send(registrationBody)\n        .expect(httpStatus.CREATED)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                authToken = res.body.output.authtoken;\n                _id = res.body.output._id;\n                activationToken = res.body.output.activation_token;\n                uid = res.body.output.uid;\n                api.post(\"/enterprise/v1/user/activate\")\n                    .send({\n                        user_uid: uid,\n                        token: activationToken\n                    })\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            done();\n                        }\n                    });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4f0d0002-be25-45de-b1d7-725eb7853284",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise User User.resetPassword \"after all\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveRecords(function() {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2fa387c4-1fbf-455c-b65f-c9e10cf8c686",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User User.resetPassword \"after each\" hook",
                    "timedOut": false,
                    "duration": 1,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0e5e6038-0610-441a-89ed-60723569394e",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should reset password.",
                    "fullTitle": "Enterprise User User.resetPassword Should reset password.",
                    "timedOut": false,
                    "duration": 86,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\npasswordReseting({\n    password: \"Raw@12345\",\n    password_confirmation: \"Raw@12345\",\n    captcha_code: captchaCode,\n    httpStatus: httpStatus.OK\n}, function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        res.body.output.message.should.equal(messageList.USER_RESET_PASS_SUCCESSFULLY);\n        done();\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4136e223-15cb-46dc-aabd-ca9b0846f367",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should allowed to reset password, when user is locked.",
                    "fullTitle": "Enterprise User User.resetPassword Should allowed to reset password, when user is locked.",
                    "timedOut": false,
                    "duration": 85,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.findOneAndUpdate({ \"uid\": uid }, {\n    failed_login_count: 7\n}, { new: true }, function(err, user) {\n    passwordReseting({\n        password: \"Raw@12345\",\n        password_confirmation: \"Raw@12345\",\n        captcha_code: captchaCode,\n        httpStatus: httpStatus.OK\n    }, function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.message.should.equal(messageList.USER_RESET_PASS_SUCCESSFULLY);\n            done();\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2d06d98b-a910-4db8-a026-75e7ca8c3020",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should set failed login count to zero, when user reset password.",
                    "fullTitle": "Enterprise User User.resetPassword Should set failed login count to zero, when user reset password.",
                    "timedOut": false,
                    "duration": 88,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.findOneAndUpdate({ \"uid\": uid }, {\n    failed_login_count: 7\n}, { new: true }, function(err, user) {\n    passwordReseting({\n        password: \"Raw@12345\",\n        password_confirmation: \"Raw@12345\",\n        captcha_code: captchaCode,\n        httpStatus: httpStatus.OK\n    }, function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            _models.User.findOne({ \"uid\": uid }, function(err, user) {\n                user.failed_login_count.should.equal(0);\n                done();\n            });\n        }\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "18b86c4d-f095-45e3-a18f-7b291055065b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error for using same password while reseting password.",
                    "fullTitle": "Enterprise User User.resetPassword Should give error for using same password while reseting password.",
                    "timedOut": false,
                    "duration": 87,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\npasswordReseting({\n    password: \"Raw@1234\",\n    password_confirmation: \"Raw@1234\",\n    captcha_code: captchaCode,\n    httpStatus: httpStatus.BAD_REQUEST\n}, function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        res.body.error.message.should.equal(messageList.PASSWORD_REPEAT_ERROR);\n        done();\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "693022e8-18bd-4fce-b0d8-ae832c3af753",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should return error for not passing valid password accordingly to criteria.",
                    "fullTitle": "Enterprise User User.resetPassword Should return error for not passing valid password accordingly to criteria.",
                    "timedOut": false,
                    "duration": 29,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\npasswordReseting({\n    password: \"Rawaaaaaaaaaaaa\",\n    password_confirmation: \"Rawaaaaaaaaaaaa\",\n    captcha_code: captchaCode,\n    httpStatus: httpStatus.BAD_REQUEST\n}, function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        res.body.error.password.message.should.equal(messageList.USER_REG_INVALID_PASSWORD);\n        done();\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a5ed76d8-dadc-4d79-80de-81a4d61d3c7e",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should return error for not passing confirm password.",
                    "fullTitle": "Enterprise User User.resetPassword Should return error for not passing confirm password.",
                    "timedOut": false,
                    "duration": 24,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\npasswordReseting({\n    password: \"Raw@1234\",\n    password_confirmation: \"Raw@12345\",\n    captcha_code: captchaCode,\n    httpStatus: httpStatus.BAD_REQUEST\n}, function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        res.body.error.password_confirmation.message.should.equal(messageList.USER_REG_MATCHED_CONFIRM_PASSWORD);\n        done();\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "76c50a46-567e-4d2a-822f-60a0ba41c49d",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not allowed to use first password on fifth time password reseting.",
                    "fullTitle": "Enterprise User User.resetPassword Should not allowed to use first password on fifth time password reseting.",
                    "timedOut": false,
                    "duration": 416,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\npasswordReseting({\n    password: \"Raw@12341\",\n    password_confirmation: \"Raw@12341\",\n    captcha_code: captchaCode,\n    httpStatus: httpStatus.OK\n}, function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        if (res.body.output.message == messageList.USER_RESET_PASS_SUCCESSFULLY) {\n            passwordReseting({\n                password: \"Raw@12342\",\n                password_confirmation: \"Raw@12342\",\n                captcha_code: captchaCode,\n                httpStatus: httpStatus.OK\n            }, function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    if (res.body.output.message == messageList.USER_RESET_PASS_SUCCESSFULLY) {\n                        passwordReseting({\n                            password: \"Raw@12343\",\n                            password_confirmation: \"Raw@12343\",\n                            captcha_code: captchaCode,\n                            httpStatus: httpStatus.OK\n                        }, function(err, res) {\n                            if (err) {\n                                done(err);\n                            } else {\n                                if (res.body.output.message == messageList.USER_RESET_PASS_SUCCESSFULLY) {\n                                    passwordReseting({\n                                        password: \"Raw@12344\",\n                                        password_confirmation: \"Raw@12344\",\n                                        captcha_code: captchaCode,\n                                        httpStatus: httpStatus.OK\n                                    }, function(err, res) {\n                                        if (err) {\n                                            done(err);\n                                        } else {\n                                            if (res.body.output.message == messageList.USER_RESET_PASS_SUCCESSFULLY) {\n                                                passwordReseting({\n                                                    password: \"Raw@1234\",\n                                                    password_confirmation: \"Raw@1234\",\n                                                    captcha_code: captchaCode,\n                                                    httpStatus: httpStatus.BAD_REQUEST\n                                                }, function(err, res) {\n                                                    if (err) {\n                                                        done(err);\n                                                    } else {\n                                                        res.body.error.message.should.equal(messageList.PASSWORD_REPEAT_ERROR);\n                                                        done();\n                                                    }\n                                                });\n                                            } else {\n                                                true.should.equal(false);\n                                            }\n                                        }\n                                    });\n                                } else {\n                                    true.should.equal(false);\n                                }\n                            }\n                        });\n                    } else {\n                        true.should.equal(false);\n                    }\n                }\n            });\n        } else {\n            true.should.equal(false);\n        }\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "66c044be-f168-48a7-aba3-3c6ed3dc454e",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should allowed to use first password on sixth time password reseting.",
                    "fullTitle": "Enterprise User User.resetPassword Should allowed to use first password on sixth time password reseting.",
                    "timedOut": false,
                    "duration": 509,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\npasswordReseting({\n    password: \"Raw@12341\",\n    password_confirmation: \"Raw@12341\",\n    captcha_code: captchaCode,\n    httpStatus: httpStatus.OK\n}, function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        if (res.body.output.message == messageList.USER_RESET_PASS_SUCCESSFULLY) {\n            passwordReseting({\n                password: \"Raw@12342\",\n                password_confirmation: \"Raw@12342\",\n                captcha_code: captchaCode,\n                httpStatus: httpStatus.OK\n            }, function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    if (res.body.output.message == messageList.USER_RESET_PASS_SUCCESSFULLY) {\n                        passwordReseting({\n                            password: \"Raw@12343\",\n                            password_confirmation: \"Raw@12343\",\n                            captcha_code: captchaCode,\n                            httpStatus: httpStatus.OK\n                        }, function(err, res) {\n                            if (err) {\n                                done(err);\n                            } else {\n                                if (res.body.output.message == messageList.USER_RESET_PASS_SUCCESSFULLY) {\n                                    passwordReseting({\n                                        password: \"Raw@12344\",\n                                        password_confirmation: \"Raw@12344\",\n                                        captcha_code: captchaCode,\n                                        httpStatus: httpStatus.OK\n                                    }, function(err, res) {\n                                        if (err) {\n                                            done(err);\n                                        } else {\n                                            if (res.body.output.message == messageList.USER_RESET_PASS_SUCCESSFULLY) {\n                                                passwordReseting({\n                                                    password: \"Raw@12345\",\n                                                    password_confirmation: \"Raw@12345\",\n                                                    captcha_code: captchaCode,\n                                                    httpStatus: httpStatus.OK\n                                                }, function(err, res) {\n                                                    if (err) {\n                                                        done(err);\n                                                    } else {\n                                                        if (res.body.output.message == messageList.USER_RESET_PASS_SUCCESSFULLY) {\n                                                            passwordReseting({\n                                                                password: \"Raw@1234\",\n                                                                password_confirmation: \"Raw@1234\",\n                                                                captcha_code: captchaCode,\n                                                                httpStatus: httpStatus.OK\n                                                            }, function(err, res) {\n                                                                if (err) {\n                                                                    done(err);\n                                                                } else {\n                                                                    res.body.output.message.should.equal(messageList.USER_RESET_PASS_SUCCESSFULLY);\n                                                                    done();\n                                                                }\n                                                            });\n                                                        } else {\n                                                            true.should.equal(false);\n                                                        }\n                                                    }\n                                                });\n                                            } else {\n                                                true.should.equal(false);\n                                            }\n                                        }\n                                    });\n                                } else {\n                                    true.should.equal(false);\n                                }\n                            }\n                        });\n                    } else {\n                        true.should.equal(false);\n                    }\n                }\n            });\n        } else {\n            true.should.equal(false);\n        }\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f19389e8-2a0d-4655-975a-7da24ecd7541",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as password is required.",
                    "fullTitle": "Enterprise User User.resetPassword Should give error as password is required.",
                    "timedOut": false,
                    "duration": 24,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\npasswordReseting({\n    password_confirmation: \"Raw@12345\",\n    captcha_code: captchaCode,\n    httpStatus: httpStatus.BAD_REQUEST\n}, function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        res.body.error.password.message.should.equal(messageList.USER_REG_INVALID_PASSWORD);\n        done();\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0f769985-7288-4b72-96df-5a818948b257",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as request toke is required.",
                    "fullTitle": "Enterprise User User.resetPassword Should give error as request toke is required.",
                    "timedOut": false,
                    "duration": 21,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\npasswordReseting({\n    password: \"Raw@12345\",\n    password_confirmation: \"Raw@12345\",\n    captcha_code: captchaCode,\n    token: \"\",\n    httpStatus: httpStatus.BAD_REQUEST\n}, function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        res.body.error.token.message.should.equal(messageList.USER_RESET_PASS_TOKEN_MUST_NOT_BE_EMPTY);\n        done();\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "814e9ae9-ce29-442d-8061-272f2e1fd384",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as invalid forgot password token.",
                    "fullTitle": "Enterprise User User.resetPassword Should give error as invalid forgot password token.",
                    "timedOut": false,
                    "duration": 80,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\npasswordReseting({\n    password: \"Raw@12345\",\n    password_confirmation: \"Raw@12345\",\n    captcha_code: captchaCode,\n    token: \"FAKE\",\n    httpStatus: httpStatus.BAD_REQUEST\n}, function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        res.body.error.message.should.equal(messageList.USER_INVALID_RESET_PASS_TOKEN);\n        done();\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9da559bf-9de3-439c-982f-c2752d2e9341",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as password and confirm password are not equal.",
                    "fullTitle": "Enterprise User User.resetPassword Should give error as password and confirm password are not equal.",
                    "timedOut": false,
                    "duration": 26,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\npasswordReseting({\n    password: \"Raw@12345\",\n    password_confirmation: \"Raw@12346\",\n    captcha_code: captchaCode,\n    httpStatus: httpStatus.BAD_REQUEST\n}, function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        res.body.error.password_confirmation.message.should.equal(messageList.USER_REG_MATCHED_CONFIRM_PASSWORD);\n        done();\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "05c38505-7ad9-426f-b6be-58029622d88b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give captcha verification fail error.",
                    "fullTitle": "Enterprise User User.resetPassword Should give captcha verification fail error.",
                    "timedOut": false,
                    "duration": 27,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\npasswordReseting({\n    password: \"Raw@12345\",\n    password_confirmation: \"Raw@12345\",\n    httpStatus: httpStatus.BAD_REQUEST\n}, function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        res.body.error.message.should.equal(messageList.CAPTCHA_VERIFICATION_FAIL);\n        done();\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a2740244-646f-44bf-99a3-d8ad2031a080",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "4136e223-15cb-46dc-aabd-ca9b0846f367",
                  "2d06d98b-a910-4db8-a026-75e7ca8c3020",
                  "18b86c4d-f095-45e3-a18f-7b291055065b",
                  "693022e8-18bd-4fce-b0d8-ae832c3af753",
                  "a5ed76d8-dadc-4d79-80de-81a4d61d3c7e",
                  "76c50a46-567e-4d2a-822f-60a0ba41c49d",
                  "66c044be-f168-48a7-aba3-3c6ed3dc454e",
                  "f19389e8-2a0d-4655-975a-7da24ecd7541",
                  "0f769985-7288-4b72-96df-5a818948b257",
                  "814e9ae9-ce29-442d-8061-272f2e1fd384",
                  "9da559bf-9de3-439c-982f-c2752d2e9341",
                  "05c38505-7ad9-426f-b6be-58029622d88b",
                  "a2740244-646f-44bf-99a3-d8ad2031a080"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 1502,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "d5c95f04-742d-4645-9707-42b6a51cb0f7",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\users\\saveMetadata.enterprise.js",
        "file": "\\controllers\\test\\users\\saveMetadata.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "cec4fb31-df63-49dd-87c5-1a32d6d6dd35",
            "title": "User",
            "fullFile": "C:\\work\\api\\controllers\\test\\users\\saveMetadata.enterprise.js",
            "file": "\\controllers\\test\\users\\saveMetadata.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "39363293-c5c9-45cf-9eef-1e8f105fc1f5",
                "title": "User.saveMetadata",
                "fullFile": "C:\\work\\api\\controllers\\test\\users\\saveMetadata.enterprise.js",
                "file": "\\controllers\\test\\users\\saveMetadata.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.saveMetadata \"before each\" hook",
                    "timedOut": false,
                    "duration": 92,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n    _models.Mail.remove({ $or: [{ to: new RegExp('^test.user+', \"i\") }, { to: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n        _models.Authy.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n            commonMock.setSignUpMocks(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/signup\")\n                .send(registrationBody)\n                .expect(httpStatus.CREATED)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        authToken = res.body.output.authtoken;\n                        _id = res.body.output._id;\n                        apiURL = apiURL.replace(\":uid\", res.body.output.uid);\n                        done();\n                    }\n                });\n        });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "25a18028-4851-427e-af5e-9cf51126702f",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User User.saveMetadata \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d681d48e-1188-49a7-97a9-c40ea58d58d4",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should update new password.",
                    "fullTitle": "Enterprise User User.saveMetadata Should update new password.",
                    "timedOut": false,
                    "duration": 27,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempUserBody = {};\ntempUserBody.metadata = {\n    \"name\": \"demo\"\n};\napi.put(apiURL)\n    .send(tempUserBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.uid != \"\" &&\n                res.body.output.metadata.name == \"demo\" &&\n                res.body.output.first_name == registrationBody.first_name;\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8ae06204-884d-4172-9a63-a9a910dcacf6",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as metadata is required.",
                    "fullTitle": "Enterprise User User.saveMetadata Should give error as metadata is required.",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempUserBody = {};\napi.put(apiURL)\n    .send(tempUserBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.metadata.message.should.equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d9ad8aba-07a7-430b-9163-aa661c915413",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise User User.saveMetadata Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempUserBody = {};\ntempUserBody.metadata = {\n    \"name\": \"demo\"\n};\napi.put(apiURL)\n    .send(tempUserBody)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3beae6b9-5401-48de-ba13-40c1f298f76f",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "8ae06204-884d-4172-9a63-a9a910dcacf6",
                  "d9ad8aba-07a7-430b-9163-aa661c915413",
                  "3beae6b9-5401-48de-ba13-40c1f298f76f"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 45,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "1f24a01e-5abf-423d-95ca-b69af6f8b29c",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\users\\saveProfile.enterprise.js",
        "file": "\\controllers\\test\\users\\saveProfile.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "b4418eee-d8a3-4f5b-8309-c825cfe6a0b6",
            "title": "User",
            "fullFile": "C:\\work\\api\\controllers\\test\\users\\saveProfile.enterprise.js",
            "file": "\\controllers\\test\\users\\saveProfile.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "0d95e21c-08eb-4a22-b0cc-259ef723baea",
                "title": "User.SaveProfile",
                "fullFile": "C:\\work\\api\\controllers\\test\\users\\saveProfile.enterprise.js",
                "file": "\\controllers\\test\\users\\saveProfile.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.SaveProfile \"before each\" hook",
                    "timedOut": false,
                    "duration": 87,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n    _models.Mail.remove({ $or: [{ to: new RegExp('^test.user+', \"i\") }, { to: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n        _models.Authy.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n            commonMock.setSignUpMocks(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/signup\")\n                .send(registrationBody)\n                .expect(httpStatus.CREATED)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        authToken = res.body.output.authtoken;\n                        _id = res.body.output._id;\n                        apiURL = apiURL.replace(\":uid\", res.body.output.uid);\n                        done();\n                    }\n                });\n        });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d700d3ec-6a70-467b-b47b-bd4aa1bcbdba",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User User.SaveProfile \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "52d47dd8-57fe-420f-8a79-c9dca3f64d91",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should update first_name.",
                    "fullTitle": "Enterprise User User.SaveProfile Should update first_name.",
                    "timedOut": false,
                    "duration": 27,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable({});\ntempRegistrationBody.first_name = \"amber 1\";\ntempRegistrationBody.last_name = \"More\";\ndelete tempRegistrationBody.password;\napi.put(apiURL)\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.first_name == tempRegistrationBody.first_name &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\";\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "aeb46f32-ec9f-4e32-861e-fb040c0c56a5",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give first_name required error.",
                    "fullTitle": "Enterprise User User.SaveProfile Should give first_name required error.",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ndelete tempRegistrationBody.first_name;\ndelete tempRegistrationBody.password;\napi.put(apiURL)\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.error.first_name.message == messageList.USER_PROFILE_FIRST_NAME_REQUIRED;\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8d41e3b5-3e19-4a7e-9eb5-234810032b5e",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give first_name required error for empty spaces first_name.",
                    "fullTitle": "Enterprise User User.SaveProfile Should give first_name required error for empty spaces first_name.",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.first_name = \"   \";\ndelete tempRegistrationBody.password;\napi.put(apiURL)\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.error.first_name.message == messageList.USER_PROFILE_FIRST_NAME_REQUIRED;\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d0a409f4-d337-4eff-bc54-72f6a2d64ca2",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should update last_name.",
                    "fullTitle": "Enterprise User User.SaveProfile Should update last_name.",
                    "timedOut": false,
                    "duration": 26,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.last_name = \"more 1\";\ndelete tempRegistrationBody.password;\napi.put(apiURL)\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.last_name == tempRegistrationBody.last_name &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\";\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a7bbea0d-ae2c-4ac9-8dbb-d64f4dd07e95",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give user_plan.",
                    "fullTitle": "Enterprise User User.SaveProfile Should give user_plan.",
                    "timedOut": false,
                    "duration": 25,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.last_name = \"more 1\";\ndelete tempRegistrationBody.password;\napi.put(apiURL)\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = typeof(res.body.output.user_plan) != \"undefined\" &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\";\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "18ca269c-1d13-4fd0-af69-ca78a727f119",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give last_name required error.",
                    "fullTitle": "Enterprise User User.SaveProfile Should give last_name required error.",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ndelete tempRegistrationBody.last_name;\ndelete tempRegistrationBody.password;\napi.put(apiURL)\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.error.last_name.message == messageList.USER_PROFILE_LAST_NAME_REQUIRED;\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "238b30ec-db78-495e-978e-510e98ce0013",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give last_name required error for empty spaces last_name.",
                    "fullTitle": "Enterprise User User.SaveProfile Should give last_name required error for empty spaces last_name.",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.last_name = \"  \";\ndelete tempRegistrationBody.password;\napi.put(apiURL)\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.error.last_name.message == messageList.USER_PROFILE_LAST_NAME_REQUIRED;\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "39caf7fe-5670-4ac5-a4eb-42220578eac1",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should update company.",
                    "fullTitle": "Enterprise User User.SaveProfile Should update company.",
                    "timedOut": false,
                    "duration": 31,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.company = \"built.io 1\";\ndelete tempRegistrationBody.password;\napi.put(apiURL)\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.company == tempRegistrationBody.company &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\";\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "79331fe7-ee21-4283-9fdc-b8169a0fef7a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should update empty company.",
                    "fullTitle": "Enterprise User User.SaveProfile Should update empty company.",
                    "timedOut": false,
                    "duration": 28,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.company = \"\";\ndelete tempRegistrationBody.password;\napi.put(apiURL)\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.company == tempRegistrationBody.company &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\";\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "06db9a69-3fcb-4be4-af2c-e75735b5091f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should update empty job_title.",
                    "fullTitle": "Enterprise User User.SaveProfile Should update empty job_title.",
                    "timedOut": false,
                    "duration": 30,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.job_title = \"\"; //None 1\";\ndelete tempRegistrationBody.password;\napi.put(apiURL)\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.job_title == tempRegistrationBody.job_title &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\";\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bcdbb84b-a7b9-4342-825c-3030f0d261b0",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should update locale.",
                    "fullTitle": "Enterprise User User.SaveProfile Should update locale.",
                    "timedOut": false,
                    "duration": 27,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.locale = \"en-uk\";\ndelete tempRegistrationBody.password;\napi.put(apiURL)\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.locale == tempRegistrationBody.locale &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\";\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7947e28b-7a79-4bbe-8645-0997de4c0a9f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should update password.",
                    "fullTitle": "Enterprise User User.SaveProfile Should update password.",
                    "timedOut": false,
                    "duration": 198,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable({});\ntempRegistrationBody.oldpassword = \"Raw@1234\";\ntempRegistrationBody.password = \"raw@1235\";\ntempRegistrationBody.password_confirmation = \"raw@1235\";\ntempRegistrationBody.first_name = \"Amber\";\ntempRegistrationBody.last_name = \"More\";\nutils.encryptPassword(tempRegistrationBody.password).then(function(newPassHashed) {\n    api.put(apiURL)\n        .send(tempRegistrationBody)\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                var isValid = typeof(res.body.output._id) == \"undefined\" &&\n                    typeof(res.body.output.__v) == \"undefined\";\n                if (isValid) {\n                    _models.User.findOne({ uid: res.body.output.uid }, function(error, user) {\n                        if (error) {\n                            done(error);\n                        } else if (user) {\n                            (user.password == newPassHashed).should.equal(true);\n                            done();\n                        } else {\n                            false.should.equal(true);\n                            done();\n                        }\n                    });\n                } else {\n                    isValid.should.equal(true);\n                    done();\n                }\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3060c6a9-5cbc-41ac-b61a-0e493dd5fb10",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error for using same password while updating password.",
                    "fullTitle": "Enterprise User User.SaveProfile Should give error for using same password while updating password.",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.oldpassword = \"Raw@1234\";\ntempRegistrationBody.password = \"Raw@1234\";\ntempRegistrationBody.password_confirmation = \"Raw@1234\";\napi.put(apiURL)\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.USER_CHANGE_PASS_OLD_PASS_PASS_NOT_BE_SAME);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ff550021-8798-4506-9423-6f71e60c4cf9",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not allowed to use first password on fifth time while updating password.",
                    "fullTitle": "Enterprise User User.SaveProfile Should not allowed to use first password on fifth time while updating password.",
                    "timedOut": false,
                    "duration": 690,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable({});\ntempRegistrationBody.oldpassword = \"Raw@1234\";\ntempRegistrationBody.password = \"Raw@1241\";\ntempRegistrationBody.password_confirmation = \"Raw@1241\";\ntempRegistrationBody.first_name = \"Amber\";\ntempRegistrationBody.last_name = \"More\";\napi.put(apiURL)\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            tempRegistrationBody.oldpassword = \"Raw@1241\";\n            tempRegistrationBody.password = \"Raw@1242\";\n            tempRegistrationBody.password_confirmation = \"Raw@1242\";\n            api.put(apiURL)\n                .send(tempRegistrationBody)\n                .set('authtoken', authToken)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        tempRegistrationBody.oldpassword = \"Raw@1242\";\n                        tempRegistrationBody.password = \"Raw@1243\";\n                        tempRegistrationBody.password_confirmation = \"Raw@1243\";\n                        api.put(apiURL)\n                            .send(tempRegistrationBody)\n                            .set('authtoken', authToken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    tempRegistrationBody.oldpassword = \"Raw@1243\";\n                                    tempRegistrationBody.password = \"Raw@1244\";\n                                    tempRegistrationBody.password_confirmation = \"Raw@1244\";\n                                    api.put(apiURL)\n                                        .send(tempRegistrationBody)\n                                        .set('authtoken', authToken)\n                                        .expect(httpStatus.OK)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                tempRegistrationBody.oldpassword = \"Raw@1244\";\n                                                tempRegistrationBody.password = \"Raw@1234\";\n                                                tempRegistrationBody.password_confirmation = \"Raw@1234\";\n                                                api.put(apiURL)\n                                                    .send(tempRegistrationBody)\n                                                    .set('authtoken', authToken)\n                                                    .expect(httpStatus.BAD_REQUEST)\n                                                    .end(function(err, res) {\n                                                        if (err) {\n                                                            done(err);\n                                                        } else {\n                                                            res.body.error.message.should.equal(messageList.PASSWORD_REPEAT_ERROR);\n                                                            done();\n                                                        }\n                                                    });\n                                            }\n                                        });\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4ac06ef0-1bf4-4a0c-8b36-e7cbb7ae29e6",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should allowed to use first password on sixth time password reseting.",
                    "fullTitle": "Enterprise User User.SaveProfile Should allowed to use first password on sixth time password reseting.",
                    "timedOut": false,
                    "duration": 899,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.oldpassword = \"Raw@1234\";\ntempRegistrationBody.password = \"Raw@1241\";\ntempRegistrationBody.password_confirmation = \"Raw@1241\";\ntempRegistrationBody.first_name = \"Amber\";\ntempRegistrationBody.last_name = \"More\";\napi.put(apiURL)\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            tempRegistrationBody.oldpassword = \"Raw@1241\";\n            tempRegistrationBody.password = \"Raw@1242\";\n            tempRegistrationBody.password_confirmation = \"Raw@1242\";\n            api.put(apiURL)\n                .send(tempRegistrationBody)\n                .set('authtoken', authToken)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        tempRegistrationBody.oldpassword = \"Raw@1242\";\n                        tempRegistrationBody.password = \"Raw@1243\";\n                        tempRegistrationBody.password_confirmation = \"Raw@1243\";\n                        api.put(apiURL)\n                            .send(tempRegistrationBody)\n                            .set('authtoken', authToken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    tempRegistrationBody.oldpassword = \"Raw@1243\";\n                                    tempRegistrationBody.password = \"Raw@1244\";\n                                    tempRegistrationBody.password_confirmation = \"Raw@1244\";\n                                    api.put(apiURL)\n                                        .send(tempRegistrationBody)\n                                        .set('authtoken', authToken)\n                                        .expect(httpStatus.OK)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                tempRegistrationBody.oldpassword = \"Raw@1244\";\n                                                tempRegistrationBody.password = \"Raw@1245\";\n                                                tempRegistrationBody.password_confirmation = \"Raw@1245\";\n                                                api.put(apiURL)\n                                                    .send(tempRegistrationBody)\n                                                    .set('authtoken', authToken)\n                                                    .expect(httpStatus.OK)\n                                                    .end(function(err, res) {\n                                                        if (err) {\n                                                            done(err);\n                                                        } else {\n                                                            tempRegistrationBody.oldpassword = \"Raw@1245\";\n                                                            tempRegistrationBody.password = \"Raw@1234\";\n                                                            tempRegistrationBody.password_confirmation = \"Raw@1234\";\n                                                            utils.encryptPassword(\"Raw@1234\").then(function(newPassHashed) {\n                                                                api.put(apiURL)\n                                                                    .send(tempRegistrationBody)\n                                                                    .set('authtoken', authToken)\n                                                                    .expect(httpStatus.OK)\n                                                                    .end(function(err, res) {\n                                                                        var isValid = typeof(res.body.output._id) == \"undefined\" &&\n                                                                            typeof(res.body.output.__v) == \"undefined\";\n                                                                        if (isValid) {\n                                                                            _models.User.findOne({ uid: res.body.output.uid }, function(error, user) {\n                                                                                if (error) {\n                                                                                    done(error);\n                                                                                } else if (user) {\n                                                                                    (user.password == newPassHashed).should.equal(true);\n                                                                                    done();\n                                                                                } else {\n                                                                                    false.should.equal(true);\n                                                                                    done();\n                                                                                }\n                                                                            });\n                                                                        } else {\n                                                                            isValid.should.equal(true);\n                                                                            done();\n                                                                        }\n                                                                    });\n                                                            });\n                                                        }\n                                                    });\n                                            }\n                                        });\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "faed573c-3b23-4246-961e-b3f940a23f07",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not allowed to update password, as old incorrect password provided.",
                    "fullTitle": "Enterprise User User.SaveProfile Should not allowed to update password, as old incorrect password provided.",
                    "timedOut": false,
                    "duration": 128,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.oldpassword = \"Raw@123\";\ntempRegistrationBody.password = \"raw@1235\";\ntempRegistrationBody.password_confirmation = tempRegistrationBody.password;\napi.put(apiURL)\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.USER_PROFILE_OLD_PASS_INCORRECT);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3e3cfa4a-1881-4ec2-99ce-776571233614",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not allowed to update password, as old and new password same.",
                    "fullTitle": "Enterprise User User.SaveProfile Should not allowed to update password, as old and new password same.",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.oldpassword = tempRegistrationBody.password;\ntempRegistrationBody.password_confirmation = tempRegistrationBody.password;\napi.put(apiURL)\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.USER_CHANGE_PASS_OLD_PASS_PASS_NOT_BE_SAME);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e44202a3-642a-48b3-974c-94e0c02272d3",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should update password for google login.",
                    "fullTitle": "Enterprise User User.SaveProfile Should update password for google login.",
                    "timedOut": false,
                    "duration": 196,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.oldpassword = tempRegistrationBody.password;\ntempRegistrationBody.password = \"raw@1235\";\ntempRegistrationBody.password_confirmation = tempRegistrationBody.password;\nutils.encryptPassword(tempRegistrationBody.password).then(function(newPassHashed) {\n    api.put(apiURL)\n        .send(tempRegistrationBody)\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                var isValid = typeof(res.body.output._id) == \"undefined\" &&\n                    typeof(res.body.output.__v) == \"undefined\";\n                if (isValid) {\n                    _models.User.findOne({ uid: res.body.output.uid }, function(error, user) {\n                        if (error) {\n                            done(error);\n                        } else if (user) {\n                            (user.password == newPassHashed).should.equal(true);\n                            done();\n                        } else {\n                            false.should.equal(true);\n                            done();\n                        }\n                    });\n                } else {\n                    isValid.should.equal(true);\n                    done();\n                }\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8452b011-5d05-4978-881e-f7d263437807",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should save phone number with profile.",
                    "fullTitle": "Enterprise User User.SaveProfile Should save phone number with profile.",
                    "timedOut": false,
                    "duration": 26,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.phone = \"9619982150\";\n//tempRegistrationBody.country_code = \"91\";\ndelete tempRegistrationBody.password;\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\napi.put(apiURL)\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.phone == tempRegistrationBody.phone &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\";\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "dd53c9e9-c704-4f67-a52e-1b28c3efdffb",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should register phone number with authy.",
                    "fullTitle": "Enterprise User User.SaveProfile Should register phone number with authy.",
                    "timedOut": false,
                    "duration": 29,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.authy_number = \"9619982150\";\ntempRegistrationBody.country_code = \"91\";\ndelete tempRegistrationBody.password;\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\napi.put(apiURL)\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = tempRegistrationBody.authy_number == tempRegistrationBody.authy_number &&\n                res.body.output.enable_twofa == \"enable\" &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\";\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "29bf3af4-c51f-4bb6-a4eb-724230457d44",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should de-register and then register same phone number with authy.",
                    "fullTitle": "Enterprise User User.SaveProfile Should de-register and then register same phone number with authy.",
                    "timedOut": false,
                    "duration": 58,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.authy_number = \"9619982150\";\ntempRegistrationBody.country_code = \"91\";\ndelete tempRegistrationBody.password;\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\napi.put(apiURL)\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var oldAuthyUserID = res.body.output.authy_user_uid;\n            commonMock.authyNumberChange(httpmock, \"enterprise\");\n            commonMock.authyDelete(httpmock, \"enterprise\");\n            api.put(apiURL)\n                .send(tempRegistrationBody)\n                .set('authtoken', authToken)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        var isValid =\n                            res.body.output.authy_user_uid == oldAuthyUserID &&\n                            (res.body.output.authy_user_uid || \"\") != \"\" &&\n                            (oldAuthyUserID || \"\") != \"\" &&\n                            res.body.output.enable_twofa == \"enable\" &&\n                            typeof(res.body.output._id) == \"undefined\" &&\n                            typeof(res.body.output.__v) == \"undefined\";\n                        isValid.should.equal(true);\n                        done();\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c6c1cd73-b5b2-458e-9ddb-7a53b2dbb258",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "aeb46f32-ec9f-4e32-861e-fb040c0c56a5",
                  "8d41e3b5-3e19-4a7e-9eb5-234810032b5e",
                  "d0a409f4-d337-4eff-bc54-72f6a2d64ca2",
                  "a7bbea0d-ae2c-4ac9-8dbb-d64f4dd07e95",
                  "18ca269c-1d13-4fd0-af69-ca78a727f119",
                  "238b30ec-db78-495e-978e-510e98ce0013",
                  "39caf7fe-5670-4ac5-a4eb-42220578eac1",
                  "79331fe7-ee21-4283-9fdc-b8169a0fef7a",
                  "06db9a69-3fcb-4be4-af2c-e75735b5091f",
                  "bcdbb84b-a7b9-4342-825c-3030f0d261b0",
                  "7947e28b-7a79-4bbe-8645-0997de4c0a9f",
                  "3060c6a9-5cbc-41ac-b61a-0e493dd5fb10",
                  "ff550021-8798-4506-9423-6f71e60c4cf9",
                  "4ac06ef0-1bf4-4a0c-8b36-e7cbb7ae29e6",
                  "faed573c-3b23-4246-961e-b3f940a23f07",
                  "3e3cfa4a-1881-4ec2-99ce-776571233614",
                  "e44202a3-642a-48b3-974c-94e0c02272d3",
                  "8452b011-5d05-4978-881e-f7d263437807",
                  "dd53c9e9-c704-4f67-a52e-1b28c3efdffb",
                  "29bf3af4-c51f-4bb6-a4eb-724230457d44",
                  "c6c1cd73-b5b2-458e-9ddb-7a53b2dbb258"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 2503,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "9b19f49c-be05-4b1d-90fd-2a18a4b7fec1",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\users\\search.enterprise.js",
        "file": "\\controllers\\test\\users\\search.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "6a2abf2f-f046-4ed3-9f7b-9e48020a2bd9",
            "title": "User",
            "fullFile": "C:\\work\\api\\controllers\\test\\users\\search.enterprise.js",
            "file": "\\controllers\\test\\users\\search.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "7525b0a3-9513-486a-9e36-62c5b5224628",
                "title": "User.search",
                "fullFile": "C:\\work\\api\\controllers\\test\\users\\search.enterprise.js",
                "file": "\\controllers\\test\\users\\search.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Enterprise User User.search \"before all\" hook",
                    "timedOut": false,
                    "duration": 217,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nremoveRecords(function(error, output) {\n    commonMock.setSignUpMocks(httpmock, \"enterprise\");\n    api.post(\"/enterprise/v1/signup\")\n        .send(registrationBody)\n        .expect(httpStatus.CREATED)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                authToken = res.body.output.authtoken;\n                _id = res.body.output._id;\n                user_uid = res.body.output.uid;\n                email = res.body.output.email;\n                saveUserFlows({\n                    authtoken: authToken,\n                    user_uid: user_uid\n                }, function(error, flows) {\n                    saveBillEntries({\n                        authtoken: authToken,\n                        user_uid: user_uid,\n                        flow_uid: flows[0].uid\n                    }, function(error, billEntries) {\n                        saveTemplateEntries({\n                            authtoken: authToken,\n                            user_uid: user_uid\n                        }, function(error, billEntries) {\n                            done();\n                        });\n                    });\n                });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e38873ab-d533-4662-a750-c3cd0a59e4f7",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise User User.search \"after all\" hook",
                    "timedOut": false,
                    "duration": 5,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "removeRecords(function(error, output) {\n    if (error) {\n        done(error);\n    } else {\n        done();\n    }\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6cf88bc8-cf0c-4705-9de5-624c3cce78dc",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User User.search \"after each\" hook",
                    "timedOut": false,
                    "duration": 1,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5fbcec0e-05cc-47a1-bcad-d8ced07e1805",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should search within user's flows and templates.",
                    "fullTitle": "Enterprise User User.search Should search within user's flows and templates.",
                    "timedOut": false,
                    "duration": 19,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar paramURL = apiURL + \"?search=UNIT_TEST_1\";\napi.get(paramURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = false;\n            if (Array.isArray(res.body.output)) {\n                isValid = res.body.output.length == 2;\n            }\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f4abacd3-303d-49f5-934f-0f336bef0271",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise User User.search Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar paramURL = apiURL + \"?search=UNIT_TEST_1\";\napi.get(paramURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e44f0089-ebf1-4ae7-a407-1dad2db55af1",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "f4abacd3-303d-49f5-934f-0f336bef0271",
                  "e44f0089-ebf1-4ae7-a407-1dad2db55af1"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 22,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "4a8632b2-efcb-4cb4-ae35-e97576e6fd79",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\users\\sendLeadActivityLog.enterprise.js",
        "file": "\\controllers\\test\\users\\sendLeadActivityLog.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "bb42bca4-b3c7-4b54-a9fa-2e22b5d9dc9c",
            "title": "User",
            "fullFile": "C:\\work\\api\\controllers\\test\\users\\sendLeadActivityLog.enterprise.js",
            "file": "\\controllers\\test\\users\\sendLeadActivityLog.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "545ae1d0-1d51-48da-b558-60d246d80c43",
                "title": "User.sendLeadActivityLog",
                "fullFile": "C:\\work\\api\\controllers\\test\\users\\sendLeadActivityLog.enterprise.js",
                "file": "\\controllers\\test\\users\\sendLeadActivityLog.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.sendLeadActivityLog \"before each\" hook",
                    "timedOut": false,
                    "duration": 59,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        authToken = data.owner.authtoken;\n        user_uid = data.owner.uid;\n        org_account_uid = data.organization_account.uid;\n        org_uid = data.organization.uid;\n        userPlan = data.owner.user_plan;\n        adminUser = data.admin;\n        done();\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a8c6d3e7-7fc7-4efd-b93a-92bb889762b2",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after all\" hook",
                    "fullTitle": "Enterprise User User.sendLeadActivityLog \"after all\" hook",
                    "timedOut": false,
                    "duration": 1,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ntestCollection.organizationRemoveRecords({}, function() {\n    httpmock.cleanAll();\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f6bd4f58-ea67-4274-81de-6669f6c1b705",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should log leads activity.",
                    "fullTitle": "Enterprise User User.sendLeadActivityLog Should log leads activity.",
                    "timedOut": false,
                    "duration": 10,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.marketoActivityLogging(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send({\n        \"event_id\": \"__flow_payment\",\n        \"event_data\": \"payment made.\",\n        \"email\": adminUser.email\n    })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.message.should.equal(messageList.LEAD_ACTIVITY_LOGGED);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a14bed94-2901-47b6-9013-b42b98f69739",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should log leads activity for second time.",
                    "fullTitle": "Enterprise User User.sendLeadActivityLog Should log leads activity for second time.",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.marketoActivityLogging(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send({\n        \"event_id\": \"__flow_payment\",\n        \"event_data\": \"payment made.\",\n        \"email\": adminUser.email\n    })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            if (res.body.output.message == messageList.LEAD_ACTIVITY_LOGGED) {\n                commonMock.marketoActivityLogging(httpmock, \"enterprise\");\n                api.post(apiURL)\n                    .send({\n                        \"event_id\": \"__flow_payment\",\n                        \"event_data\": \"payment made.\",\n                        \"email\": adminUser.email\n                    })\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            res.body.output.message.should.equal(messageList.LEAD_ACTIVITY_LOGGED);\n                            done();\n                        }\n                    });\n            } else {\n                true.should.equal(false);\n                done();\n            }\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "710660a3-a312-40f3-ac70-4dbefc3596e0",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should log leads activity with organization.",
                    "fullTitle": "Enterprise User User.sendLeadActivityLog Should log leads activity with organization.",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.marketoActivityLogging(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send({\n        \"event_id\": \"__flow_payment\",\n        \"event_data\": \"payment made.\",\n        \"email\": adminUser.email\n    })\n    .set('org_uid', org_uid)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.message.should.equal(messageList.LEAD_ACTIVITY_LOGGED);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ea91b281-93b7-4ab8-bfb4-0aa2861f4421",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should log leads activity with organization for second time.",
                    "fullTitle": "Enterprise User User.sendLeadActivityLog Should log leads activity with organization for second time.",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.marketoActivityLogging(httpmock, \"enterprise\");\napi.post(apiURL)\n    .send({\n        \"event_id\": \"__flow_payment\",\n        \"event_data\": \"payment made.\",\n        \"email\": adminUser.email\n    })\n    .set('org_uid', org_uid)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            if (res.body.output.message == messageList.LEAD_ACTIVITY_LOGGED) {\n                commonMock.marketoActivityLogging(httpmock, \"enterprise\");\n                api.post(apiURL)\n                    .send({\n                        \"event_id\": \"__flow_payment\",\n                        \"event_data\": \"payment made.\",\n                        \"email\": adminUser.email\n                    })\n                    .set('org_uid', org_uid)\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            res.body.output.message.should.equal(messageList.LEAD_ACTIVITY_LOGGED);\n                            done();\n                        }\n                    });\n            } else {\n                true.should.equal(false);\n                done();\n            }\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3d0d5da3-9411-4234-aeab-ae9129c8579d",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "a14bed94-2901-47b6-9013-b42b98f69739",
                  "710660a3-a312-40f3-ac70-4dbefc3596e0",
                  "ea91b281-93b7-4ab8-bfb4-0aa2861f4421",
                  "3d0d5da3-9411-4234-aeab-ae9129c8579d"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 44,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "c7bf2507-469d-477c-847c-7ee6da32f9ab",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\users\\updateActivationExpired.enterprise.js",
        "file": "\\controllers\\test\\users\\updateActivationExpired.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "10cb56ba-ceab-40d3-87c8-f0c24eff801a",
            "title": "User",
            "fullFile": "C:\\work\\api\\controllers\\test\\users\\updateActivationExpired.enterprise.js",
            "file": "\\controllers\\test\\users\\updateActivationExpired.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "11ccb056-4c78-487e-807a-6361169e6bef",
                "title": "User.updateActivationExpired",
                "fullFile": "C:\\work\\api\\controllers\\test\\users\\updateActivationExpired.enterprise.js",
                "file": "\\controllers\\test\\users\\updateActivationExpired.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.updateActivationExpired \"before each\" hook",
                    "timedOut": false,
                    "duration": 88,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n    _models.Mail.remove({ $or: [{ to: new RegExp('^test.user+', \"i\") }, { to: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n        commonMock.setSignUpMocks(httpmock, \"enterprise\");\n        api.post(\"/enterprise/v1/signup\")\n            .send(registrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    authToken = res.body.output.authtoken;\n                    done();\n                }\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5bca2296-6be7-48f0-bbf4-3c960ce28737",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User User.updateActivationExpired \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "20ab2e10-fcc4-4083-9308-9e4de8db173b",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should expire account.",
                    "fullTitle": "Enterprise User User.updateActivationExpired Should expire account.",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.activation_expired.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7b06ff32-00f4-4d1f-9118-e63a6cb5770a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise User User.updateActivationExpired Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d36fbf4c-d1b9-44c5-9bc2-faf491ca2639",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "7b06ff32-00f4-4d1f-9118-e63a6cb5770a",
                  "d36fbf4c-d1b9-44c5-9bc2-faf491ca2639"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 19,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "060e3e30-3ecc-4b88-a7b5-8561cda85aef",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\users\\updateAutoRefresh.enterprise.js",
        "file": "\\controllers\\test\\users\\updateAutoRefresh.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "5a6e19fc-f74e-4894-ba3b-3d3495ed9136",
            "title": "User",
            "fullFile": "C:\\work\\api\\controllers\\test\\users\\updateAutoRefresh.enterprise.js",
            "file": "\\controllers\\test\\users\\updateAutoRefresh.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "669859fa-786b-4274-bd47-1534bd3383cf",
                "title": "User.updateAutoRefresh",
                "fullFile": "C:\\work\\api\\controllers\\test\\users\\updateAutoRefresh.enterprise.js",
                "file": "\\controllers\\test\\users\\updateAutoRefresh.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.updateAutoRefresh \"before each\" hook",
                    "timedOut": false,
                    "duration": 85,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n    _models.Mail.remove({ $or: [{ to: new RegExp('^test.user+', \"i\") }, { to: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n        _models.Authy.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n            commonMock.setSignUpMocks(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/signup\")\n                .send(registrationBody)\n                .expect(httpStatus.CREATED)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        authToken = res.body.output.authtoken;\n                        _id = res.body.output._id;\n                        apiURL = apiURL.replace(\":uid\", res.body.output.uid);\n                        done();\n                    }\n                });\n        });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "555bcbb6-56d9-4eda-908e-ebfca8d55554",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User User.updateAutoRefresh \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a555eeaa-2bc6-450b-9197-fff688632b03",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should update auto_refresh to true.",
                    "fullTitle": "Enterprise User User.updateAutoRefresh Should update auto_refresh to true.",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.put(apiURL)\n    .send({\n        auto_refresh: true\n    })\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.auto_refresh.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c454a805-8d13-41c1-a5d8-78405a4eeb0b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should update auto_refresh to true.",
                    "fullTitle": "Enterprise User User.updateAutoRefresh Should update auto_refresh to true.",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.put(apiURL)\n    .send({\n        auto_refresh: \"true1\"\n    })\n    .set('authtoken', authToken)\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.auto_refresh.message.should.equal(messageList.AUTO_REFRESH_SHOULD_BE_BOOLEAN);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "81584c3b-e674-456a-8794-33939d50bf8b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error for invalid auto_refresh flag in old api.",
                    "fullTitle": "Enterprise User User.updateAutoRefresh Should give error for invalid auto_refresh flag in old api.",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(\"/autorefresh\")\n    .send({\n        data: \"true1\"\n    })\n    .set('authtoken', authToken)\n    .set('driver', \"enterprise\")\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.data.message.should.equal(messageList.AUTO_REFRESH_SHOULD_BE_BOOLEAN);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c861720b-1ffa-4f9f-9aac-52740ee91e50",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise User User.updateAutoRefresh Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.put(apiURL)\n    .send({\n        auto_refresh: true\n    })\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "47bbd062-aa3f-4c09-b874-bdae99933e0d",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "c454a805-8d13-41c1-a5d8-78405a4eeb0b",
                  "81584c3b-e674-456a-8794-33939d50bf8b",
                  "c861720b-1ffa-4f9f-9aac-52740ee91e50",
                  "47bbd062-aa3f-4c09-b874-bdae99933e0d"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 45,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "61db7151-39af-4550-b482-601e4870e1e9",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\users\\updateAvatar.enterprise.js",
        "file": "\\controllers\\test\\users\\updateAvatar.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "bb515b0f-0238-43f3-91d6-7282f352b197",
            "title": "User",
            "fullFile": "C:\\work\\api\\controllers\\test\\users\\updateAvatar.enterprise.js",
            "file": "\\controllers\\test\\users\\updateAvatar.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "1e7b1f77-cc46-4f4c-b4d2-c3c1ac5882d2",
                "title": "User.updateAvatar",
                "fullFile": "C:\\work\\api\\controllers\\test\\users\\updateAvatar.enterprise.js",
                "file": "\\controllers\\test\\users\\updateAvatar.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.updateAvatar \"before each\" hook",
                    "timedOut": false,
                    "duration": 88,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n    _models.Mail.remove({ $or: [{ to: new RegExp('^test.user+', \"i\") }, { to: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n        commonMock.setSignUpMocks(httpmock, \"enterprise\");\n        api.post(\"/enterprise/v1/signup\")\n            .send(registrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    authToken = res.body.output.authtoken;\n                    user_uid = res.body.output.uid;\n                    _id = res.body.output._id;\n                    done();\n                }\n            });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bfddceea-dd67-48ea-bd48-c63a26c50c67",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User User.updateAvatar \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4c30a51b-25ca-4fe2-9a7e-7bc2ca8cced6",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should update avatar.",
                    "fullTitle": "Enterprise User User.updateAvatar Should update avatar.",
                    "timedOut": false,
                    "duration": 14,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.myCroppedImage = \"/img/user-img2.png\";\nserver.agents[\"enterprise\"].s3.UploadAvatar = function(options, callback) {\n    callback(null, {\n        ETag: \"sdfdsf35s6dfsdfdsf6565656565655665\"\n    });\n};\nserver.agents[\"enterprise\"].s3.DownloadAvatar = function(options, callback) {\n    callback(null, tempRegistrationBody.myCroppedImage);\n};\napi.put(apiURL)\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.avatar.should.equal(tempRegistrationBody.myCroppedImage);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "72b041d2-3bc1-4631-a826-5afc05d22304",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should update avatar twice.",
                    "fullTitle": "Enterprise User User.updateAvatar Should update avatar twice.",
                    "timedOut": false,
                    "duration": 28,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.myCroppedImage = \"/img/user-img2.png\";\nserver.agents[\"enterprise\"].s3.UploadAvatar = function(options, callback) {\n    callback(null, {\n        ETag: \"sdfdsf35s6dfsdfdsf6565656565655665\"\n    });\n};\nserver.agents[\"enterprise\"].s3.DownloadAvatar = function(options, callback) {\n    callback(null, tempRegistrationBody.myCroppedImage);\n};\napi.put(apiURL)\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var temp2RegistrationBody = global.getImmutable(registrationBody);\n            temp2RegistrationBody.myCroppedImage = \"/img/user-img3.png\";\n            server.agents[\"enterprise\"].s3.DownloadAvatar = function(options, callback) {\n                callback(null, temp2RegistrationBody.myCroppedImage);\n            };\n            api.put(apiURL)\n                .send(temp2RegistrationBody)\n                .set('authtoken', authToken)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        res.body.output.avatar.should.equal(temp2RegistrationBody.myCroppedImage);\n                        done();\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7b82e4b2-b3c5-4873-8b01-5ca9c0be0d7a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should update avatar trice.",
                    "fullTitle": "Enterprise User User.updateAvatar Should update avatar trice.",
                    "timedOut": false,
                    "duration": 42,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.myCroppedImage = \"/img/user-img2.png\";\nserver.agents[\"enterprise\"].s3.UploadAvatar = function(options, callback) {\n    callback(null, {\n        ETag: \"sdfdsf35s6dfsdfdsf6565656565655665\"\n    });\n};\nserver.agents[\"enterprise\"].s3.DownloadAvatar = function(options, callback) {\n    callback(null, tempRegistrationBody.myCroppedImage);\n};\napi.put(apiURL)\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var temp2RegistrationBody = global.getImmutable(registrationBody);\n            temp2RegistrationBody.myCroppedImage = \"/img/user-img3.png\";\n            server.agents[\"enterprise\"].s3.DownloadAvatar = function(options, callback) {\n                callback(null, temp2RegistrationBody.myCroppedImage);\n            };\n            api.put(apiURL)\n                .send(temp2RegistrationBody)\n                .set('authtoken', authToken)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        var temp3RegistrationBody = global.getImmutable(registrationBody);\n                        temp3RegistrationBody.myCroppedImage = \"/img/user-img4.png\";\n                        server.agents[\"enterprise\"].s3.DownloadAvatar = function(options, callback) {\n                            callback(null, temp3RegistrationBody.myCroppedImage);\n                        };\n                        api.put(apiURL)\n                            .send(temp3RegistrationBody)\n                            .set('authtoken', authToken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    res.body.output.avatar.should.equal(temp3RegistrationBody.myCroppedImage);\n                                    done();\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9de718ec-4754-4e4e-97a3-a651465bf24e",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise User User.updateAvatar Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.myCroppedImage = \"/img/user-img2.png\";\nserver.agents[\"enterprise\"].s3.UploadAvatar = function(options, callback) {\n    callback(null, {\n        ETag: \"sdfdsf35s6dfsdfdsf6565656565655665\"\n    });\n};\nserver.agents[\"enterprise\"].s3.DownloadAvatar = function(options, callback) {\n    callback(null, tempRegistrationBody.myCroppedImage);\n};\napi.put(apiURL)\n    .send(tempRegistrationBody)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a9bbc532-5503-4d7a-97b8-b7049208dbe4",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should able to remove avatar.",
                    "fullTitle": "Enterprise User User.updateAvatar Should able to remove avatar.",
                    "timedOut": false,
                    "duration": 13,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar defaultImage = \"https://example.com/region/fl0e7d7815746566ce65a2ae?v=f0491af1-cdf3-11e8-a60a-f340282cec93\";\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.avatar = null;\nserver.agents[\"enterprise\"].s3.UploadAvatar = function(options, callback) {\n    callback(null, {\n        ETag: \"sdfdsf35s6dfsdfdsf6565656565655665\"\n    });\n};\nserver.agents[\"enterprise\"].s3.DownloadAvatar = function(options, callback) {\n    callback(null, defaultImage);\n};\napi.put(apiURL)\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.avatar.should.equal(defaultImage);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c143e8a8-0a7c-4e97-a30e-8953158c4a16",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "72b041d2-3bc1-4631-a826-5afc05d22304",
                  "7b82e4b2-b3c5-4873-8b01-5ca9c0be0d7a",
                  "9de718ec-4754-4e4e-97a3-a651465bf24e",
                  "a9bbc532-5503-4d7a-97b8-b7049208dbe4",
                  "c143e8a8-0a7c-4e97-a30e-8953158c4a16"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 101,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "2874a8a1-36b1-4fca-9326-8cd5c97e8083",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\users\\updateCanvasTourUser.enterprise.js",
        "file": "\\controllers\\test\\users\\updateCanvasTourUser.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "c687b805-ff8b-4b80-b448-201388a72070",
            "title": "User.updateCanvasTour",
            "fullFile": "C:\\work\\api\\controllers\\test\\users\\updateCanvasTourUser.enterprise.js",
            "file": "\\controllers\\test\\users\\updateCanvasTourUser.enterprise.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise User.updateCanvasTour \"before all\" hook",
                "timedOut": false,
                "duration": 91,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(userTrigger, cbk) {\n        commonMock.setSignUpMocks(httpmock, \"enterprise\");\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        dummyUser = res.body.output;\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "e790e169-2b6b-4cfd-b0e6-1f3225047e7b",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after each\" hook",
                "fullTitle": "Enterprise User.updateCanvasTour \"after each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "httpmock.cleanAll();\ndone();",
                "err": {},
                "isRoot": false,
                "uuid": "c02749df-90fd-4c28-b131-1bec615ee950",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise User.updateCanvasTour Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "c9eba176-1de5-4615-ba32-10c9a1dc4b4a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should set \"canvas_first_tour\" to true.",
                "fullTitle": "Enterprise User.updateCanvasTour Should set \"canvas_first_tour\" to true.",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.canvas_first_tour;\n            isValid = isValid &&\n                typeof(res.body.output._id) == \"undefined\" &&\n                typeof(res.body.output.__v) == \"undefined\";\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "f02999d9-650c-452c-a849-c88ae48195e4",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c9eba176-1de5-4615-ba32-10c9a1dc4b4a",
              "f02999d9-650c-452c-a849-c88ae48195e4"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 22,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "d28c7c71-008a-4f39-bce5-2f743687b786",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\users\\updateLastSeen.enterprise.js",
        "file": "\\controllers\\test\\users\\updateLastSeen.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "a3b24242-95de-463a-abc6-f9c1bd01db3b",
            "title": "User",
            "fullFile": "C:\\work\\api\\controllers\\test\\users\\updateLastSeen.enterprise.js",
            "file": "\\controllers\\test\\users\\updateLastSeen.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "f642fe51-537e-41a7-a936-fc7d80965a54",
                "title": "User.updateLastSeen",
                "fullFile": "C:\\work\\api\\controllers\\test\\users\\updateLastSeen.enterprise.js",
                "file": "\\controllers\\test\\users\\updateLastSeen.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.updateLastSeen \"before each\" hook",
                    "timedOut": false,
                    "duration": 86,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n    _models.Mail.remove({ $or: [{ to: new RegExp('^test.user+', \"i\") }, { to: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n        _models.Authy.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n            commonMock.setSignUpMocks(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/signup\")\n                .send(registrationBody)\n                .expect(httpStatus.CREATED)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        authToken = res.body.output.authtoken;\n                        _id = res.body.output._id;\n                        apiURL = apiURL.replace(\":uid\", res.body.output.uid);\n                        done();\n                    }\n                });\n        });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "638b6aa8-08ff-442b-be8d-c81555b5559d",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User User.updateLastSeen \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "78945bfa-2394-48fc-9066-5a3a445ca91a",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should update when last announcements seen.",
                    "fullTitle": "Enterprise User User.updateLastSeen Should update when last announcements seen.",
                    "timedOut": false,
                    "duration": 21,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar dt = (new Date()).toISOString();\napi.post(apiURL)\n    .send({\n        timestamp: dt\n    })\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.last_product_announcement_seen.should.equal(dt);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "474f19c1-1c08-4c95-9625-faeffd5ef3b4",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give unauthenticated user error.",
                    "fullTitle": "Enterprise User User.updateLastSeen Should give unauthenticated user error.",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .send({\n        auto_refresh: true\n    })\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6eb3ac2d-7051-4646-aeb9-dd94682e78fd",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "474f19c1-1c08-4c95-9625-faeffd5ef3b4",
                  "6eb3ac2d-7051-4646-aeb9-dd94682e78fd"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 25,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "03acc20d-3d2f-4c75-916c-8d692b445d4b",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\users\\validateToken.enterprise.js",
        "file": "\\controllers\\test\\users\\validateToken.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "3970bd18-6f4f-4635-a62d-5f7b5f62bc65",
            "title": "User",
            "fullFile": "C:\\work\\api\\controllers\\test\\users\\validateToken.enterprise.js",
            "file": "\\controllers\\test\\users\\validateToken.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "6621ffce-68d2-489b-b00b-c72176e78cad",
                "title": "User.validateToken",
                "fullFile": "C:\\work\\api\\controllers\\test\\users\\validateToken.enterprise.js",
                "file": "\\controllers\\test\\users\\validateToken.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.validateToken \"before each\" hook",
                    "timedOut": false,
                    "duration": 91,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n    _models.Mail.remove({ $or: [{ to: new RegExp('^test.user+', \"i\") }, { to: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n        _models.Authy.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n            commonMock.setSignUpMocks(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/signup\")\n                .send(registrationBody)\n                .expect(httpStatus.CREATED)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        authToken = res.body.output.authtoken;\n                        activationToken = res.body.output.activation_token;\n                        user_uid = res.body.output.uid;\n                        _id = res.body.output._id;\n                        apiURL = apiURL.replace(\":uid\", res.body.output.uid);\n                        done();\n                    }\n                });\n        });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "41a6b2d2-1ff5-4e75-aa09-529114442e25",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User User.validateToken \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4a8923f4-2f90-40a9-abc5-a74edee13d73",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should validate valid reset password token.",
                    "fullTitle": "Enterprise User User.validateToken Should validate valid reset password token.",
                    "timedOut": false,
                    "duration": 30,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(\"/enterprise/v1/user/activate\")\n    .send({\n        user_uid: user_uid,\n        token: activationToken\n    })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            commonMock.captchaVerification(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/forgotpassword\")\n                .send({\n                    email: registrationBody.email,\n                    captcha_code: captchaCode\n                })\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        commonMock.brainTreeClientToken(httpmock, \"enterprise\");\n                        api.get(\"/enterprise/v1/user\")\n                            .set('authtoken', authToken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    var options = {\n                                        \"token\": res.body.output.password_token || \"\"\n                                    };\n                                    api.post(apiURL.replace(\":token_type\", \"resetpassword\"))\n                                        .send(options)\n                                        .expect(httpStatus.OK)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                res.body.output.message.should.equal(messageList.VALID_RESET_PASSWORD_TOKEN);\n                                                done();\n                                            }\n                                        });\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fda9268b-4be2-4b9b-9115-bf502b6f26c9",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as invalid reset password token.",
                    "fullTitle": "Enterprise User User.validateToken Should give error as invalid reset password token.",
                    "timedOut": false,
                    "duration": 95,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(\"/enterprise/v1/user/activate\")\n    .send({\n        user_uid: user_uid,\n        token: activationToken\n    })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            commonMock.captchaVerification(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/forgotpassword\")\n                .send({\n                    email: registrationBody.email,\n                    captcha_code: captchaCode\n                })\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        commonMock.brainTreeClientToken(httpmock, \"enterprise\");\n                        api.get(\"/enterprise/v1/user\")\n                            .set('authtoken', authToken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    var options = {\n                                        password: \"Raw@12345\",\n                                        password_confirmation: \"Raw@12345\",\n                                        captcha_code: captchaCode,\n                                        token: res.body.output.password_token || \"\"\n                                    };\n                                    commonMock.captchaVerification(httpmock, \"enterprise\");\n                                    api.post(\"/enterprise/v1/resetpassword\")\n                                        .send(options)\n                                        .expect(httpStatus.OK)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                api.post(apiURL.replace(\":token_type\", \"resetpassword\"))\n                                                    .send({\n                                                        token: options.token || \"\"\n                                                    })\n                                                    .expect(httpStatus.BAD_REQUEST)\n                                                    .end(function(err, res) {\n                                                        if (err) {\n                                                            done(err);\n                                                        } else {\n                                                            res.body.error.message.should.equal(messageList.INVALID_RESET_PASSWORD_TOKEN);\n                                                            done();\n                                                        }\n                                                    });\n                                            }\n                                        });\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "89970f59-eaf5-4e53-b427-27df038e8a94",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as invalid token type.",
                    "fullTitle": "Enterprise User User.validateToken Should give error as invalid token type.",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL.replace(\":token_type\", \"FAKE\"))\n    .send({\n        token: \"FAKE\"\n    })\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.INVALID_TOKEN_TYPE);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2782a11c-300d-435e-98d1-bac66391e449",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "fda9268b-4be2-4b9b-9115-bf502b6f26c9",
                  "89970f59-eaf5-4e53-b427-27df038e8a94",
                  "2782a11c-300d-435e-98d1-bac66391e449"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 129,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "6603281e-a4e8-4503-a6e0-e4fe3924fe27",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\users\\verifyAuthy.enterprise.js",
        "file": "\\controllers\\test\\users\\verifyAuthy.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "a823350c-2264-4dd0-b3c2-4145ab4286f5",
            "title": "User",
            "fullFile": "C:\\work\\api\\controllers\\test\\users\\verifyAuthy.enterprise.js",
            "file": "\\controllers\\test\\users\\verifyAuthy.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "5eb663ed-c83c-45bc-8c6b-f23078eb042e",
                "title": "User.verifyAuthy",
                "fullFile": "C:\\work\\api\\controllers\\test\\users\\verifyAuthy.enterprise.js",
                "file": "\\controllers\\test\\users\\verifyAuthy.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.verifyAuthy \"before each\" hook",
                    "timedOut": false,
                    "duration": 172,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({ deleted_at: null }, function(error, user) {\n    _models.Mail.remove({ deleted_at: null }, function(error, user) {\n        _models.Authy.remove({ deleted_at: null }, function(error, user) {\n            commonMock.setSignUpMocks(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/signup\")\n                .send(registrationBody)\n                .expect(httpStatus.CREATED)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        authToken = res.body.output.authtoken;\n                        _id = res.body.output._id;\n                        uid = res.body.output.uid;\n                        var tempRegistrationBody = global.getImmutable(registrationBody);\n                        tempRegistrationBody.email = secondUserEmail;\n                        commonMock.setSignUpMocks(httpmock, \"enterprise\", {\n                            email: tempRegistrationBody.email\n                        });\n                        api.post(\"/enterprise/v1/signup\")\n                            .send(tempRegistrationBody)\n                            .expect(httpStatus.CREATED)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    secondAuthToken = res.body.output.authtoken;\n                                    secondId = res.body.output._id;\n                                    done();\n                                }\n                            });\n                    }\n                });\n        });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e0d6cad0-1b09-455e-9eb3-ca3ed89f96e0",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User User.verifyAuthy \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f1508a3a-e1d1-43bd-b750-596b69a0a6ff",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should verify OTP.",
                    "fullTitle": "Enterprise User User.verifyAuthy Should verify OTP.",
                    "timedOut": false,
                    "duration": 87,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.authy_number = \"9619982150\";\ntempRegistrationBody.country_code = \"91\";\ndelete tempRegistrationBody.password;\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\napi.put(\"/enterprise/v1/user\")\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var authy_userId = res.body.output.authy_user_uid;\n            commonMock.authySMSVerification(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/authy/sms\")\n                .send({\n                    authy_id: authy_userId\n                })\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                        api.post(\"/enterprise/v1/authy/verifyotp\")\n                            .send({\n                                authy_user_uid: authy_userId,\n                                token: otpBody.token,\n                                option_selected: \"otp\"\n                            })\n                            .set('authtoken', authToken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                                    _models.User.findOne({\n                                        authy_user_uid: authy_userId\n                                    }, function(error, user) {\n                                        var authtoken = [\"\"].concat(user.authtoken);\n                                        _models.User.findOneAndUpdate({\n                                            uid: user.uid\n                                        }, {\n                                            authtoken: authtoken\n                                        }, {\n                                            new: true\n                                        }, function(error, user) {\n                                            api.post(apiURL)\n                                                .send({\n                                                    authy_user_uid: authy_userId,\n                                                    token: otpBody.token\n                                                })\n                                                .set('authtoken', authToken)\n                                                .expect(httpStatus.OK)\n                                                .end(function(err, res) {\n                                                    if (err) {\n                                                        done(err);\n                                                    } else {\n                                                        var isValid = res.body.output.is_twofa_sms_enabled.should &&\n                                                            typeof(res.body.output.plan[0]._id) == \"undefined\" &&\n                                                            typeof(res.body.output.plan[0].__v) == \"undefined\" &&\n                                                            res.body.output.authtoken != \"\";\n                                                        if (isValid) {\n                                                            _.each(res.body.output.plan[0].features, function(item) {\n                                                                isValid = isValid &&\n                                                                    typeof(item._id) == \"undefined\" &&\n                                                                    typeof(item.__v) == \"undefined\";\n                                                            });\n                                                        }\n                                                        isValid.should.equal(true);\n                                                        done();\n                                                    }\n                                                });\n                                        });\n                                    });\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f758cc6b-6c05-4d49-b67d-29a193ba1e3f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should verify OTP for user in 2FA disable enterprise user exist.",
                    "fullTitle": "Enterprise User User.verifyAuthy Should verify OTP for user in 2FA disable enterprise user exist.",
                    "timedOut": false,
                    "duration": 197,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.brainTreeClientToken(httpmock, \"enterprise\");\ncommonMock.setSignUpMocks(httpmock, \"enterprise\", {\n    email: registrationBody.email\n});\n\napi.post(\"/enterprise/v1/login\")\n    .send({\n        \"email\": registrationBody.email,\n        \"password\": registrationBody.password,\n    })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var enterpriseAuthToken = res.body.output.authtoken;\n            var tempRegistrationBody = global.getImmutable(registrationBody);\n            tempRegistrationBody.authy_number = \"9619982150\";\n            tempRegistrationBody.country_code = \"91\";\n            delete tempRegistrationBody.password;\n            commonMock.authyNumberChange(httpmock, \"enterprise\");\n            commonMock.authyDelete(httpmock, \"enterprise\");\n            api.put(\"/enterprise/v1/user\")\n                .send(tempRegistrationBody)\n                .set('authtoken', enterpriseAuthToken)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        commonMock.authyNumberChange(httpmock, \"enterprise\");\n                        commonMock.authyDelete(httpmock, \"enterprise\");\n                        api.put(\"/enterprise/v1/user\")\n                            .send(tempRegistrationBody)\n                            .set('authtoken', authToken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    var authy_userId = res.body.output.authy_user_uid;\n                                    commonMock.authySMSVerification(httpmock, \"enterprise\");\n                                    api.post(\"/enterprise/v1/authy/sms\")\n                                        .send({\n                                            authy_id: authy_userId\n                                        })\n                                        .expect(httpStatus.OK)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                                                api.post(\"/enterprise/v1/authy/verifyotp\")\n                                                    .send({\n                                                        authy_user_uid: authy_userId,\n                                                        token: otpBody.token,\n                                                        option_selected: \"otp\"\n                                                    })\n                                                    .set('authtoken', authToken)\n                                                    .expect(httpStatus.OK)\n                                                    .end(function(err, res) {\n                                                        if (err) {\n                                                            done(err);\n                                                        } else {\n                                                            commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                                                            api.post(apiURL)\n                                                                .send({\n                                                                    authy_user_uid: authy_userId,\n                                                                    token: otpBody.token\n                                                                })\n                                                                .set('authtoken', authToken)\n                                                                .expect(httpStatus.OK)\n                                                                .end(function(err, res) {\n                                                                    if (err) {\n                                                                        done(err);\n                                                                    } else {\n                                                                        var isValid = res.body.output.is_twofa_sms_enabled.should &&\n                                                                            typeof(res.body.output.plan[0]._id) == \"undefined\" &&\n                                                                            typeof(res.body.output.plan[0].__v) == \"undefined\";\n                                                                        if (isValid) {\n                                                                            _.each(res.body.output.plan[0].features, function(item) {\n                                                                                isValid = isValid &&\n                                                                                    typeof(item._id) == \"undefined\" &&\n                                                                                    typeof(item.__v) == \"undefined\";\n                                                                            });\n                                                                        }\n                                                                        isValid.should.equal(true);\n                                                                        done();\n                                                                    }\n                                                                });\n                                                        }\n                                                    });\n                                            }\n                                        });\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b8fc9bc7-0496-4f09-a38e-b68c8da40fb0",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get default plan for verify OTP.",
                    "fullTitle": "Enterprise User User.verifyAuthy Should get default plan for verify OTP.",
                    "timedOut": false,
                    "duration": 80,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.authy_number = \"9619982150\";\ntempRegistrationBody.country_code = \"91\";\ndelete tempRegistrationBody.password;\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\napi.put(\"/enterprise/v1/user\")\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var authy_userId = res.body.output.authy_user_uid;\n            commonMock.authySMSVerification(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/authy/sms\")\n                .send({\n                    authy_id: authy_userId\n                })\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                        api.post(\"/enterprise/v1/authy/verifyotp\")\n                            .send({\n                                authy_user_uid: authy_userId,\n                                token: otpBody.token,\n                                option_selected: \"otp\"\n                            })\n                            .set('authtoken', authToken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                                    api.post(apiURL)\n                                        .send({\n                                            authy_user_uid: authy_userId,\n                                            token: otpBody.token\n                                        })\n                                        .set('authtoken', authToken)\n                                        .expect(httpStatus.OK)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                var isValid = false;\n                                                if (res.body.output.plan.length == 1) {\n                                                    var defaultPlan = _.first(_.filter(server.plan.list, function(plan) {\n                                                        //return (plan || {}).enterprise_plan || false;\n                                                        return ((plan || {}).plan_type || \"\") == \"enterprise\";\n                                                    })) || {};\n                                                    defaultPlan = utils.skipAttr(convert.getJSON(defaultPlan));\n                                                    isValid = res.body.output.plan[0].uid == defaultPlan.uid;\n                                                }\n                                                isValid.should.equal(true);\n                                                done();\n                                            }\n                                        });\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3007f374-187f-485c-8278-52ed800cc1c4",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get default attributes for verify OTP.",
                    "fullTitle": "Enterprise User User.verifyAuthy Should get default attributes for verify OTP.",
                    "timedOut": false,
                    "duration": 80,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.authy_number = \"9619982150\";\ntempRegistrationBody.country_code = \"91\";\ndelete tempRegistrationBody.password;\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\napi.put(\"/enterprise/v1/user\")\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var authy_userId = res.body.output.authy_user_uid;\n            commonMock.authySMSVerification(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/authy/sms\")\n                .send({\n                    authy_id: authy_userId\n                })\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                        api.post(\"/enterprise/v1/authy/verifyotp\")\n                            .send({\n                                authy_user_uid: authy_userId,\n                                token: otpBody.token,\n                                option_selected: \"otp\"\n                            })\n                            .set('authtoken', authToken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                                    api.post(apiURL)\n                                        .send({\n                                            authy_user_uid: authy_userId,\n                                            token: otpBody.token\n                                        })\n                                        .set('authtoken', authToken)\n                                        .expect(httpStatus.OK)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                var isValid = false;\n                                                if (res.body.output.plan.length == 1) {\n                                                    isValid = utils.isHaveKeyVals(res.body.output, [\n                                                            \"first_name\", \"flow_uid\", \"job_title\", \"last_name\", \"locale\",\n                                                            \"merchantid\", \"payment_set\", \"subscription\"\n                                                        ]) &&\n                                                        res.body.output.subscription.days == server.plan.enterprise.TrialPeriod &&\n                                                        moment(new Date(res.body.output.subscription.start_date)).format(\"YYYY-MM-DD\") ==\n                                                        moment(new Date()).format(\"YYYY-MM-DD\");\n                                                }\n                                                isValid.should.equal(true);\n                                                done();\n                                            }\n                                        });\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "96d0a74f-0089-4a6b-a357-89ecb8d206cb",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should give error as authy need to verified before using twofa.",
                    "fullTitle": "Enterprise User User.verifyAuthy Should give error as authy need to verified before using twofa.",
                    "timedOut": false,
                    "duration": 49,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.authy_number = \"9619982150\";\ntempRegistrationBody.country_code = \"91\";\ndelete tempRegistrationBody.password;\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\napi.put(\"/enterprise/v1/user\")\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var authy_userId = res.body.output.authy_user_uid;\n            commonMock.authySMSVerification(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/authy/sms\")\n                .send({\n                    authy_id: authy_userId\n                })\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                        api.post(apiURL)\n                            .send({\n                                authy_user_uid: authy_userId,\n                                token: otpBody.token\n                            })\n                            .set('authtoken', authToken)\n                            .expect(httpStatus.BAD_REQUEST)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    res.body.error.message.should.equal(messageList.NEED_TO_VERIFY_2FA);\n                                    done();\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e50c191f-2d73-4dce-9d20-48fe1890c23b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should reset login fail count.",
                    "fullTitle": "Enterprise User User.verifyAuthy Should reset login fail count.",
                    "timedOut": false,
                    "duration": 81,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.authy_number = \"9619982150\";\ntempRegistrationBody.country_code = \"91\";\ndelete tempRegistrationBody.password;\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\n_models.User.findOneAndUpdate({ uid: uid }, { failed_login_count: 0 }, function(error, user) {\n    api.put(\"/enterprise/v1/user\")\n        .send(tempRegistrationBody)\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                var authy_userId = res.body.output.authy_user_uid;\n                commonMock.authySMSVerification(httpmock, \"enterprise\");\n                api.post(\"/enterprise/v1/authy/sms\")\n                    .send({\n                        authy_id: authy_userId\n                    })\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                            api.post(\"/enterprise/v1/authy/verifyotp\")\n                                .send({\n                                    authy_user_uid: authy_userId,\n                                    token: otpBody.token,\n                                    option_selected: \"otp\"\n                                })\n                                .set('authtoken', authToken)\n                                .expect(httpStatus.OK)\n                                .end(function(err, res) {\n                                    if (err) {\n                                        done(err);\n                                    } else {\n                                        commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                                        api.post(apiURL)\n                                            .send({\n                                                authy_user_uid: authy_userId,\n                                                token: otpBody.token\n                                            })\n                                            .set('authtoken', authToken)\n                                            .expect(httpStatus.OK)\n                                            .end(function(err, res) {\n                                                if (err) {\n                                                    done(err);\n                                                } else {\n                                                    var isValid = res.body.output.is_twofa_sms_enabled &&\n                                                        res.body.output.failed_login_count == 0 &&\n                                                        typeof(res.body.output.plan[0]._id) == \"undefined\" &&\n                                                        typeof(res.body.output.plan[0].__v) == \"undefined\";\n                                                    if (isValid) {\n                                                        _.each(res.body.output.plan[0].features, function(item) {\n                                                            isValid = isValid &&\n                                                                typeof(item._id) == \"undefined\" &&\n                                                                typeof(item.__v) == \"undefined\";\n                                                        });\n                                                    }\n                                                    isValid.should.equal(true);\n                                                    done();\n                                                }\n                                            });\n                                    }\n                                });\n                        }\n                    });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8f5668e0-f707-4797-9fa0-c27dd4f292f4",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should verify authy, by email and token.",
                    "fullTitle": "Enterprise User User.verifyAuthy Should verify authy, by email and token.",
                    "timedOut": false,
                    "duration": 85,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.authy_number = \"9619982150\";\ntempRegistrationBody.country_code = \"91\";\ntempRegistrationBody.email = secondUserEmail;\ndelete tempRegistrationBody.password;\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\napi.put(\"/enterprise/v1/user\")\n    .send(tempRegistrationBody)\n    .set('authtoken', secondAuthToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            commonMock.authySMSVerification(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/authy/sms\")\n                .send({\n                    email: tempRegistrationBody.email\n                })\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                        api.post(\"/enterprise/v1/authy/verifyotp\")\n                            .send({\n                                email: tempRegistrationBody.email,\n                                token: otpBody.token,\n                                option_selected: \"otp\"\n                            })\n                            .set('authtoken', authToken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                                    api.post(apiURL)\n                                        .send({\n                                            email: tempRegistrationBody.email,\n                                            token: otpBody.token\n                                        })\n                                        .set('authtoken', authToken)\n                                        .expect(httpStatus.OK)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                var isValid = tempRegistrationBody.email == res.body.output.email &&\n                                                    res.body.output.is_twofa_sms_enabled &&\n                                                    typeof(res.body.output.plan[0]._id) == \"undefined\" &&\n                                                    typeof(res.body.output.plan[0].__v) == \"undefined\";\n                                                if (isValid) {\n                                                    _.each(res.body.output.plan[0].features, function(item) {\n                                                        isValid = isValid &&\n                                                            typeof(item._id) == \"undefined\" &&\n                                                            typeof(item.__v) == \"undefined\";\n                                                    });\n                                                }\n                                                isValid.should.equal(true);\n                                                done();\n                                            }\n                                        });\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a8e53175-fc4e-4dfe-a335-a015eb5e9bfb",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "f758cc6b-6c05-4d49-b67d-29a193ba1e3f",
                  "b8fc9bc7-0496-4f09-a38e-b68c8da40fb0",
                  "3007f374-187f-485c-8278-52ed800cc1c4",
                  "96d0a74f-0089-4a6b-a357-89ecb8d206cb",
                  "e50c191f-2d73-4dce-9d20-48fe1890c23b",
                  "8f5668e0-f707-4797-9fa0-c27dd4f292f4",
                  "a8e53175-fc4e-4dfe-a335-a015eb5e9bfb"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 659,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "e1c74f48-d03c-4ed0-802a-f6a85ac9c15c",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\users\\verifyAuthyForGoogle.enterprise.js",
        "file": "\\controllers\\test\\users\\verifyAuthyForGoogle.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "2806213a-c2ea-49a0-b345-6a2d6bf1c8ab",
            "title": "User",
            "fullFile": "C:\\work\\api\\controllers\\test\\users\\verifyAuthyForGoogle.enterprise.js",
            "file": "\\controllers\\test\\users\\verifyAuthyForGoogle.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "fc4923c8-0eeb-4f89-8f1b-6f5289e3d454",
                "title": "User.verifyAuthyForGoogle",
                "fullFile": "C:\\work\\api\\controllers\\test\\users\\verifyAuthyForGoogle.enterprise.js",
                "file": "\\controllers\\test\\users\\verifyAuthyForGoogle.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.verifyAuthyForGoogle \"before each\" hook",
                    "timedOut": false,
                    "duration": 92,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n    _models.Mail.remove({ $or: [{ to: new RegExp('^test.user+', \"i\") }, { to: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n        _models.Authy.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n            commonMock.setSignUpMocks(httpmock, \"enterprise\");\n            commonMock.googleLogin(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/login/google\")\n                .send(loginBody)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        authToken = res.body.output.authtoken;\n                        uid = res.body.output.uid;\n                        done();\n                    }\n                });\n        });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e8d7adae-fdea-4815-a315-c7fe13322f98",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User User.verifyAuthyForGoogle \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "50624620-48de-42d9-9782-16021213f583",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should verify OTP.",
                    "fullTitle": "Enterprise User User.verifyAuthyForGoogle Should verify OTP.",
                    "timedOut": false,
                    "duration": 82,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.authy_number = \"9619982150\";\ntempRegistrationBody.country_code = \"91\";\ndelete tempRegistrationBody.password;\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\napi.put(\"/enterprise/v1/user\")\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var authy_userId = res.body.output.authy_user_uid;\n            commonMock.authySMSVerification(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/authy/sms\")\n                .send({\n                    authy_id: authy_userId\n                })\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                        api.post(\"/enterprise/v1/authy/verifyotp\")\n                            .send({\n                                authy_user_uid: authy_userId,\n                                token: otpBody.token,\n                                option_selected: \"otp\"\n                            })\n                            .set('authtoken', authToken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                                    api.post(apiURL)\n                                        .send({\n                                            authy_user_uid: authy_userId,\n                                            token: otpBody.token\n                                        })\n                                        .set('authtoken', authToken)\n                                        .expect(httpStatus.OK)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                res.body.output.is_twofa_sms_enabled.should.equal(true);\n                                                done();\n                                            }\n                                        });\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "991945b5-928a-43bc-834d-7bcc58d657fd",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get default plan for verify OTP.",
                    "fullTitle": "Enterprise User User.verifyAuthyForGoogle Should get default plan for verify OTP.",
                    "timedOut": false,
                    "duration": 82,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.authy_number = \"9619982150\";\ntempRegistrationBody.country_code = \"91\";\ndelete tempRegistrationBody.password;\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\napi.put(\"/enterprise/v1/user\")\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var authy_userId = res.body.output.authy_user_uid;\n            commonMock.authySMSVerification(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/authy/sms\")\n                .send({\n                    authy_id: authy_userId\n                })\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                        api.post(\"/enterprise/v1/authy/verifyotp\")\n                            .send({\n                                authy_user_uid: authy_userId,\n                                token: otpBody.token,\n                                option_selected: \"otp\"\n                            })\n                            .set('authtoken', authToken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                                    api.post(apiURL)\n                                        .send({\n                                            authy_user_uid: authy_userId,\n                                            token: otpBody.token\n                                        })\n                                        .set('authtoken', authToken)\n                                        .expect(httpStatus.OK)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                var isValid = false;\n                                                if (res.body.output.plan.length == 1) {\n                                                    var defaultPlan = _.first(_.filter(server.plan.list, function(plan) {\n                                                        //return (plan || {}).enterprise_plan || false;\n                                                        return ((plan || {}).plan_type || \"\") == \"enterprise\";\n                                                    })) || {};\n                                                    defaultPlan = utils.skipAttr(convert.getJSON(defaultPlan));\n                                                    isValid = res.body.output.plan[0].uid == defaultPlan.uid;\n                                                }\n                                                isValid.should.equal(true);\n                                                done();\n                                            }\n                                        });\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "86764e7a-16e6-4bc4-9b4e-b97ef29d2426",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get default attributes for verify OTP.",
                    "fullTitle": "Enterprise User User.verifyAuthyForGoogle Should get default attributes for verify OTP.",
                    "timedOut": false,
                    "duration": 77,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.authy_number = \"9619982150\";\ntempRegistrationBody.country_code = \"91\";\ndelete tempRegistrationBody.password;\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\napi.put(\"/enterprise/v1/user\")\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var authy_userId = res.body.output.authy_user_uid;\n            commonMock.authySMSVerification(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/authy/sms\")\n                .send({\n                    authy_id: authy_userId\n                })\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                        api.post(\"/enterprise/v1/authy/verifyotp\")\n                            .send({\n                                authy_user_uid: authy_userId,\n                                token: otpBody.token,\n                                option_selected: \"otp\"\n                            })\n                            .set('authtoken', authToken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                                    api.post(apiURL)\n                                        .send({\n                                            authy_user_uid: authy_userId,\n                                            token: otpBody.token\n                                        })\n                                        .set('authtoken', authToken)\n                                        .expect(httpStatus.OK)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                var isValid = false;\n                                                if (res.body.output.plan.length == 1) {\n                                                    isValid = utils.isHaveKeyVals(res.body.output, [\n                                                            \"first_name\", \"flow_uid\", \"job_title\", \"last_name\", \"locale\",\n                                                            \"merchantid\", \"payment_set\", \"subscription\"\n                                                        ]) &&\n                                                        res.body.output.subscription.days == server.plan.enterprise.TrialPeriod &&\n                                                        moment(new Date(res.body.output.subscription.start_date)).format(\"YYYY-MM-DD\") ==\n                                                        moment(new Date()).format(\"YYYY-MM-DD\");\n                                                }\n                                                isValid.should.equal(true);\n                                                done();\n                                            }\n                                        });\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "75c0158a-a003-42ab-8aec-4b23f7836511",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should reset login fail count.",
                    "fullTitle": "Enterprise User User.verifyAuthyForGoogle Should reset login fail count.",
                    "timedOut": false,
                    "duration": 80,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.authy_number = \"9619982150\";\ntempRegistrationBody.country_code = \"91\";\ndelete tempRegistrationBody.password;\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\n_models.User.findOneAndUpdate({ uid: uid }, { failed_login_count: 0 }, function(error, user) {\n    api.put(\"/enterprise/v1/user\")\n        .send(tempRegistrationBody)\n        .set('authtoken', authToken)\n        .expect(httpStatus.OK)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                var authy_userId = res.body.output.authy_user_uid;\n                commonMock.authySMSVerification(httpmock, \"enterprise\");\n                api.post(\"/enterprise/v1/authy/sms\")\n                    .send({\n                        authy_id: authy_userId\n                    })\n                    .expect(httpStatus.OK)\n                    .end(function(err, res) {\n                        if (err) {\n                            done(err);\n                        } else {\n                            commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                            api.post(\"/enterprise/v1/authy/verifyotp\")\n                                .send({\n                                    authy_user_uid: authy_userId,\n                                    token: otpBody.token,\n                                    option_selected: \"otp\"\n                                })\n                                .set('authtoken', authToken)\n                                .expect(httpStatus.OK)\n                                .end(function(err, res) {\n                                    if (err) {\n                                        done(err);\n                                    } else {\n                                        commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                                        api.post(apiURL)\n                                            .send({\n                                                authy_user_uid: authy_userId,\n                                                token: otpBody.token\n                                            })\n                                            .set('authtoken', authToken)\n                                            .expect(httpStatus.OK)\n                                            .end(function(err, res) {\n                                                if (err) {\n                                                    done(err);\n                                                } else {\n                                                    var isValid = res.body.output.is_twofa_sms_enabled &&\n                                                        res.body.output.failed_login_count == 0;\n                                                    isValid.should.equal(true);\n                                                    done();\n                                                }\n                                            });\n                                    }\n                                });\n                        }\n                    });\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5319ce4e-08d1-4b4e-83d0-d4ab5bcecf49",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should verify authy, by email and token.",
                    "fullTitle": "Enterprise User User.verifyAuthyForGoogle Should verify authy, by email and token.",
                    "timedOut": false,
                    "duration": 78,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.authy_number = \"9619982150\";\ntempRegistrationBody.country_code = \"91\";\ndelete tempRegistrationBody.password;\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\napi.put(\"/enterprise/v1/user\")\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            commonMock.authySMSVerification(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/authy/sms\")\n                .send({\n                    email: tempRegistrationBody.email\n                })\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                        api.post(\"/enterprise/v1/authy/verifyotp\")\n                            .send({\n                                email: tempRegistrationBody.email,\n                                token: otpBody.token,\n                                option_selected: \"otp\"\n                            })\n                            .set('authtoken', authToken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                                    api.post(apiURL)\n                                        .send({\n                                            email: tempRegistrationBody.email,\n                                            token: otpBody.token\n                                        })\n                                        .set('authtoken', authToken)\n                                        .expect(httpStatus.OK)\n                                        .end(function(err, res) {\n                                            if (err) {\n                                                done(err);\n                                            } else {\n                                                var isValid = tempRegistrationBody.email == res.body.output.email &&\n                                                    res.body.output.is_twofa_sms_enabled;\n                                                isValid.should.equal(true);\n                                                done();\n                                            }\n                                        });\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "00e8effc-1d24-44e5-9d8c-c3d764dba21e",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "991945b5-928a-43bc-834d-7bcc58d657fd",
                  "86764e7a-16e6-4bc4-9b4e-b97ef29d2426",
                  "75c0158a-a003-42ab-8aec-4b23f7836511",
                  "5319ce4e-08d1-4b4e-83d0-d4ab5bcecf49",
                  "00e8effc-1d24-44e5-9d8c-c3d764dba21e"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 399,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "f26c2b0a-56d3-4aca-9d85-6c124a9318fa",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\users\\verifyOTP.enterprise.js",
        "file": "\\controllers\\test\\users\\verifyOTP.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "50f0cba8-0c35-4f57-98c4-99e318859add",
            "title": "User",
            "fullFile": "C:\\work\\api\\controllers\\test\\users\\verifyOTP.enterprise.js",
            "file": "\\controllers\\test\\users\\verifyOTP.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "fcdb7038-1d0a-44b0-825f-15278d13f3f6",
                "title": "User.verifyOTP",
                "fullFile": "C:\\work\\api\\controllers\\test\\users\\verifyOTP.enterprise.js",
                "file": "\\controllers\\test\\users\\verifyOTP.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.verifyOTP \"before each\" hook",
                    "timedOut": false,
                    "duration": 177,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n    _models.Mail.remove({ $or: [{ to: new RegExp('^test.user+', \"i\") }, { to: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n        _models.Authy.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n            commonMock.setSignUpMocks(httpmock, \"enterprise\", {\n                email: registrationBody.email\n            });\n            api.post(\"/enterprise/v1/signup\")\n                .send(registrationBody)\n                .expect(httpStatus.CREATED)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        authToken = res.body.output.authtoken;\n                        _id = res.body.output._id;\n                        var tempRegistrationBody = global.getImmutable(registrationBody);\n                        tempRegistrationBody.email = secondUserEmail;\n                        commonMock.setSignUpMocks(httpmock, \"enterprise\", {\n                            email: tempRegistrationBody.email\n                        });\n                        api.post(\"/enterprise/v1/signup\")\n                            .send(tempRegistrationBody)\n                            .expect(httpStatus.CREATED)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    secondAuthToken = res.body.output.authtoken;\n                                    secondId = res.body.output._id;\n                                    done();\n                                }\n                            });\n                    }\n                });\n        });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "14e61fa7-b4f3-454f-9f89-390d376b0fe8",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User User.verifyOTP \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0a471b67-120f-4012-a63e-21c71cb3121c",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should verify OTP.",
                    "fullTitle": "Enterprise User User.verifyOTP Should verify OTP.",
                    "timedOut": false,
                    "duration": 57,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.authy_number = \"9619982150\";\ntempRegistrationBody.country_code = \"91\";\ndelete tempRegistrationBody.password;\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\napi.put(\"/enterprise/v1/user\")\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var authy_userId = res.body.output.authy_user_uid;\n            commonMock.authySMSVerification(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/authy/sms\")\n                .send({\n                    authy_id: authy_userId\n                })\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                        api.post(apiURL)\n                            .send({\n                                authy_user_uid: authy_userId,\n                                token: otpBody.token,\n                                option_selected: \"otp\"\n                            })\n                            .set('authtoken', authToken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    res.body.output.enable_twofa.should.equal(\"verified\");\n                                    done();\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4515a3c6-1167-4f32-8a5b-98425e1bebd2",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get default plan for verify OTP.",
                    "fullTitle": "Enterprise User User.verifyOTP Should get default plan for verify OTP.",
                    "timedOut": false,
                    "duration": 63,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.authy_number = \"9619982150\";\ntempRegistrationBody.country_code = \"91\";\ndelete tempRegistrationBody.password;\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\napi.put(\"/enterprise/v1/user\")\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var authy_userId = res.body.output.authy_user_uid;\n            commonMock.authySMSVerification(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/authy/sms\")\n                .send({\n                    authy_id: authy_userId\n                })\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                        api.post(apiURL)\n                            .send({\n                                authy_user_uid: authy_userId,\n                                token: otpBody.token,\n                                option_selected: \"otp\"\n                            })\n                            .set('authtoken', authToken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    var isValid = false;\n                                    if (res.body.output.plan.length == 1) {\n                                        var defaultPlan = _.first(_.filter(server.plan.list, function(plan) {\n                                            //return (plan || {}).enterprise_plan || false;\n                                            return ((plan || {}).plan_type || \"\") == \"enterprise\";\n                                        })) || {};\n                                        defaultPlan = utils.skipAttr(convert.getJSON(defaultPlan));\n                                        isValid = res.body.output.plan[0].uid == defaultPlan.uid;\n                                    }\n                                    isValid.should.equal(true);\n                                    done();\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "89dc97dd-634b-4972-93e7-c028ac9917bc",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get default attributes for verify OTP.",
                    "fullTitle": "Enterprise User User.verifyOTP Should get default attributes for verify OTP.",
                    "timedOut": false,
                    "duration": 57,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.authy_number = \"9619982150\";\ntempRegistrationBody.country_code = \"91\";\ndelete tempRegistrationBody.password;\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\napi.put(\"/enterprise/v1/user\")\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var authy_userId = res.body.output.authy_user_uid;\n            commonMock.authySMSVerification(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/authy/sms\")\n                .send({\n                    authy_id: authy_userId\n                })\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                        api.post(apiURL)\n                            .send({\n                                authy_user_uid: authy_userId,\n                                token: otpBody.token,\n                                option_selected: \"otp\"\n                            })\n                            .set('authtoken', authToken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    var isValid = false;\n                                    if (res.body.output.plan.length == 1) {\n                                        isValid = utils.isHaveKeyVals(res.body.output, [\n                                                \"first_name\", \"flow_uid\", \"job_title\", \"last_name\", \"locale\",\n                                                \"merchantid\", \"payment_set\", \"subscription\"\n                                            ]) &&\n                                            res.body.output.subscription.days == server.plan.enterprise.TrialPeriod &&\n                                            moment(new Date(res.body.output.subscription.start_date)).format(\"YYYY-MM-DD\") ==\n                                            moment(new Date()).format(\"YYYY-MM-DD\");\n                                    }\n                                    isValid.should.equal(true);\n                                    done();\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ff88c598-5fcd-48ff-bdea-822f9c653203",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should verify OTP, by email and token.",
                    "fullTitle": "Enterprise User User.verifyOTP Should verify OTP, by email and token.",
                    "timedOut": false,
                    "duration": 56,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.authy_number = \"9619982150\";\ntempRegistrationBody.country_code = \"91\";\ntempRegistrationBody.email = secondUserEmail;\ndelete tempRegistrationBody.password;\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\napi.put(\"/enterprise/v1/user\")\n    .send(tempRegistrationBody)\n    .set('authtoken', secondAuthToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var authy_userId = res.body.output.authy_user_uid;\n            commonMock.authySMSVerification(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/authy/sms\")\n                .send({\n                    authy_id: authy_userId\n                })\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                        api.post(apiURL)\n                            .send({\n                                email: tempRegistrationBody.email,\n                                token: otpBody.token,\n                                option_selected: \"otp\"\n                            })\n                            .set('authtoken', secondAuthToken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    var isValid = tempRegistrationBody.email == res.body.output.email &&\n                                        res.body.output.is_twofa_sms_enabled &&\n                                        res.body.output.enable_twofa == \"verified\";\n                                    isValid.should.equal(true);\n                                    done();\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "84926294-d4fb-40e5-84d5-0beed4974de4",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "4515a3c6-1167-4f32-8a5b-98425e1bebd2",
                  "89dc97dd-634b-4972-93e7-c028ac9917bc",
                  "ff88c598-5fcd-48ff-bdea-822f9c653203",
                  "84926294-d4fb-40e5-84d5-0beed4974de4"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 233,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "0f7db9a7-043d-4c48-bf40-ac083636f1cf",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\users\\verifyOTPForGoogle.enterprise.js",
        "file": "\\controllers\\test\\users\\verifyOTPForGoogle.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "3495b48f-0cab-41be-8ac0-667d363f0282",
            "title": "User",
            "fullFile": "C:\\work\\api\\controllers\\test\\users\\verifyOTPForGoogle.enterprise.js",
            "file": "\\controllers\\test\\users\\verifyOTPForGoogle.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "3243ad3e-d9a2-48ed-aba3-e281dcc77c1f",
                "title": "User.verifyOTPForGoogle",
                "fullFile": "C:\\work\\api\\controllers\\test\\users\\verifyOTPForGoogle.enterprise.js",
                "file": "\\controllers\\test\\users\\verifyOTPForGoogle.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Enterprise User User.verifyOTPForGoogle \"before each\" hook",
                    "timedOut": false,
                    "duration": 96,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n    _models.Mail.remove({ $or: [{ to: new RegExp('^test.user+', \"i\") }, { to: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n        _models.Authy.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n            commonMock.setSignUpMocks(httpmock, \"enterprise\");\n            commonMock.googleLogin(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/login/google\")\n                .send(loginBody)\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        authToken = res.body.output.authtoken;\n                        _id = res.body.output._id;\n                        done();\n                    }\n                });\n        });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a35a2a2f-153a-43e8-a8a0-f32b21abdf1f",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Enterprise User User.verifyOTPForGoogle \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "httpmock.cleanAll();\ndone();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e4e85c62-34ff-446e-bf70-ba0fcf2327d9",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "Should verify OTP.",
                    "fullTitle": "Enterprise User User.verifyOTPForGoogle Should verify OTP.",
                    "timedOut": false,
                    "duration": 54,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.authy_number = \"9619982150\";\ntempRegistrationBody.country_code = \"91\";\ndelete tempRegistrationBody.password;\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\napi.put(\"/enterprise/v1/user\")\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var authy_userId = res.body.output.authy_user_uid;\n            commonMock.authySMSVerification(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/authy/sms\")\n                .send({\n                    authy_id: authy_userId\n                })\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                        api.post(apiURL)\n                            .send({\n                                authy_user_uid: authy_userId,\n                                token: otpBody.token,\n                                option_selected: \"otp\"\n                            })\n                            .set('authtoken', authToken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    res.body.output.enable_twofa.should.equal(\"verified\");\n                                    done();\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "214935bf-5c6d-403e-9f6a-fd4c1f70ae34",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get default plan for verify OTP.",
                    "fullTitle": "Enterprise User User.verifyOTPForGoogle Should get default plan for verify OTP.",
                    "timedOut": false,
                    "duration": 61,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.authy_number = \"9619982150\";\ntempRegistrationBody.country_code = \"91\";\ndelete tempRegistrationBody.password;\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\napi.put(\"/enterprise/v1/user\")\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var authy_userId = res.body.output.authy_user_uid;\n            commonMock.authySMSVerification(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/authy/sms\")\n                .send({\n                    authy_id: authy_userId\n                })\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                        api.post(apiURL)\n                            .send({\n                                authy_user_uid: authy_userId,\n                                token: otpBody.token,\n                                option_selected: \"otp\"\n                            })\n                            .set('authtoken', authToken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    var isValid = false;\n                                    if (res.body.output.plan.length == 1) {\n                                        var defaultPlan = _.first(_.filter(server.plan.list, function(plan) {\n                                            //return (plan || {}).enterprise_plan || false;\n                                            return ((plan || {}).plan_type || \"\") == \"enterprise\";\n                                        })) || {};\n                                        defaultPlan = utils.skipAttr(convert.getJSON(defaultPlan));\n                                        isValid = res.body.output.plan[0].uid == defaultPlan.uid;\n                                    }\n                                    isValid.should.equal(true);\n                                    done();\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7c37973d-af79-411d-a851-be2ca1d00d57",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get default attributes for verify OTP.",
                    "fullTitle": "Enterprise User User.verifyOTPForGoogle Should get default attributes for verify OTP.",
                    "timedOut": false,
                    "duration": 56,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.authy_number = \"9619982150\";\ntempRegistrationBody.country_code = \"91\";\ndelete tempRegistrationBody.password;\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\napi.put(\"/enterprise/v1/user\")\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var authy_userId = res.body.output.authy_user_uid;\n            commonMock.authySMSVerification(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/authy/sms\")\n                .send({\n                    authy_id: authy_userId\n                })\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                        api.post(apiURL)\n                            .send({\n                                authy_user_uid: authy_userId,\n                                token: otpBody.token,\n                                option_selected: \"otp\"\n                            })\n                            .set('authtoken', authToken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    var isValid = false;\n                                    if (res.body.output.plan.length == 1) {\n                                        isValid = utils.isHaveKeyVals(res.body.output, [\n                                                \"first_name\", \"flow_uid\", \"job_title\", \"last_name\", \"locale\",\n                                                \"merchantid\", \"payment_set\", \"subscription\"\n                                            ]) &&\n                                            res.body.output.subscription.days == server.plan.enterprise.TrialPeriod &&\n                                            moment(new Date(res.body.output.subscription.start_date)).format(\"YYYY-MM-DD\") ==\n                                            moment(new Date()).format(\"YYYY-MM-DD\");\n                                    }\n                                    isValid.should.equal(true);\n                                    done();\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4ce11ae3-afd9-425d-87b9-97b87515f061",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should verify OTP, by email and token.",
                    "fullTitle": "Enterprise User User.verifyOTPForGoogle Should verify OTP, by email and token.",
                    "timedOut": false,
                    "duration": 55,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\nvar tempRegistrationBody = global.getImmutable(registrationBody);\ntempRegistrationBody.authy_number = \"9619982150\";\ntempRegistrationBody.country_code = \"91\";\ndelete tempRegistrationBody.password;\ncommonMock.authyNumberChange(httpmock, \"enterprise\");\ncommonMock.authyDelete(httpmock, \"enterprise\");\napi.put(\"/enterprise/v1/user\")\n    .send(tempRegistrationBody)\n    .set('authtoken', authToken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var authy_userId = res.body.output.authy_user_uid;\n            commonMock.authySMSVerification(httpmock, \"enterprise\");\n            api.post(\"/enterprise/v1/authy/sms\")\n                .send({\n                    authy_id: authy_userId\n                })\n                .expect(httpStatus.OK)\n                .end(function(err, res) {\n                    if (err) {\n                        done(err);\n                    } else {\n                        commonMock.authyAppTokenVerification(httpmock, \"enterprise\");\n                        api.post(apiURL)\n                            .send({\n                                email: tempRegistrationBody.email,\n                                token: otpBody.token,\n                                option_selected: \"otp\"\n                            })\n                            .set('authtoken', authToken)\n                            .expect(httpStatus.OK)\n                            .end(function(err, res) {\n                                if (err) {\n                                    done(err);\n                                } else {\n                                    var isValid = tempRegistrationBody.email == res.body.output.email &&\n                                        res.body.output.is_twofa_sms_enabled &&\n                                        res.body.output.enable_twofa == \"verified\";\n                                    isValid.should.equal(true);\n                                    done();\n                                }\n                            });\n                    }\n                });\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ac481c8c-1612-401d-9bba-af870b7cfda1",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "214935bf-5c6d-403e-9f6a-fd4c1f70ae34",
                  "7c37973d-af79-411d-a851-be2ca1d00d57",
                  "4ce11ae3-afd9-425d-87b9-97b87515f061",
                  "ac481c8c-1612-401d-9bba-af870b7cfda1"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 226,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "59afab58-4d45-4aee-ab4b-c6c99ba94857",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\utility\\createArbitrary.js",
        "file": "\\controllers\\test\\utility\\createArbitrary.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "935848e2-e08c-4e6c-8800-b7d553386bdc",
            "title": "Arbitrary.Create",
            "fullFile": "C:\\work\\api\\controllers\\test\\utility\\createArbitrary.js",
            "file": "\\controllers\\test\\utility\\createArbitrary.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Arbitrary.Create \"before all\" hook",
                "timedOut": false,
                "duration": 66,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data;\n        dummyUser = orgData.owner;\n        dummyUser.authtoken = dummyUser.authtoken[0];\n        done()\n    });\n})",
                "err": {},
                "isRoot": false,
                "uuid": "ee280809-6c03-479f-ba9e-2f0be2e7e106",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Arbitrary.Create \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.parallel([\n        function(cb) {\n            _models.Arbitrary.remove({\n                    uid: {\n                        \"$in\": [arbitrary.uid]\n                    }\n                },\n                function(err) {\n                    cb(err)\n                })\n        }\n    ],\n    function(err, result) {\n        if (err) {\n            done(err)\n        } else {\n            done()\n        }\n    })",
                "err": {},
                "isRoot": false,
                "uuid": "4a8d52fd-5b8b-4041-ab58-07dc4c66dae3",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise Arbitrary.Create Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHORIZED);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "46c2ce43-d988-4ea8-9747-74d0c3152c7a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should create arbitrary, if data is valid.",
                "fullTitle": "Enterprise Arbitrary.Create Should create arbitrary, if data is valid.",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set({ ui_admin_key: config.UI_ADMIN_KEY })\n    .send(arbitraryData)\n    .expect(httpStatus.CREATED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            arbitrary = res.body.output\n            expect(arbitrary.data).to.be.a('object');\n            expect(arbitrary.uid).to.be.equal('dummy');\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "f1a980cd-d266-4d52-af02-51f052154e61",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error,  if \"data\" key is missing.",
                "fullTitle": "Enterprise Arbitrary.Create Should get error,  if \"data\" key is missing.",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set({ ui_admin_key: config.UI_ADMIN_KEY })\n    .send({})\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "6f582840-f6f3-42e4-8321-23edb7c096dd",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "46c2ce43-d988-4ea8-9747-74d0c3152c7a",
              "f1a980cd-d266-4d52-af02-51f052154e61",
              "6f582840-f6f3-42e4-8321-23edb7c096dd"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 10,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "ef727d13-51fb-48a7-8796-ca200a1d6a8e",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\utility\\deleteArbitrary.js",
        "file": "\\controllers\\test\\utility\\deleteArbitrary.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "63db992f-66ee-4e78-b279-4cd9ccafca47",
            "title": "Arbitrary.Delete",
            "fullFile": "C:\\work\\api\\controllers\\test\\utility\\deleteArbitrary.js",
            "file": "\\controllers\\test\\utility\\deleteArbitrary.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Arbitrary.Delete \"before all\" hook",
                "timedOut": false,
                "duration": 62,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data;\n        dummyUser = orgData.owner;\n        dummyUser.authtoken = dummyUser.authtoken[0];\n        api.post(apiURL)\n            .set({ ui_admin_key: config.UI_ADMIN_KEY })\n            .send(arbitraryData)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    arbitrary = res.body.output\n                    done();\n                }\n            });\n    });\n})",
                "err": {},
                "isRoot": false,
                "uuid": "814508a9-fdea-4b8d-a274-a267e4b1804f",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Arbitrary.Delete \"after all\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.parallel([\n        function(cb) {\n            _models.Arbitrary.remove({\n                    uid: {\n                        \"$in\": [arbitrary.uid]\n                    }\n                },\n                function(err) {\n                    cb(err)\n                })\n        }\n    ],\n    function(err, result) {\n        if (err) {\n            done(err)\n        } else {\n            done()\n        }\n    })",
                "err": {},
                "isRoot": false,
                "uuid": "dd91839e-b834-4e98-a5f8-1f2a30a5d2c0",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise Arbitrary.Delete Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.delete(apiURL + arbitrary.uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHORIZED);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "c681f7f2-81d5-469c-8cc9-d4277144f362",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error if arbitrary not found.",
                "fullTitle": "Enterprise Arbitrary.Delete Should get error if arbitrary not found.",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.delete(apiURL + 'dummy')\n    .set({ ui_admin_key: config.UI_ADMIN_KEY })\n    .send(arbitraryData)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).to.be.equal(messageList.RECORD_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "7da5cbb2-fc91-4039-988a-9ab497b609d7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should delete arbitrary, if data is valid.",
                "fullTitle": "Enterprise Arbitrary.Delete Should delete arbitrary, if data is valid.",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.delete(apiURL + arbitrary.uid)\n    .set({ ui_admin_key: config.UI_ADMIN_KEY })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            arbitrary = res.body.output\n            expect(arbitrary.delete_at).not.to.be.null;\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "3b98d4e7-6826-45a2-936c-e1621d5fa1f3",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c681f7f2-81d5-469c-8cc9-d4277144f362",
              "7da5cbb2-fc91-4039-988a-9ab497b609d7",
              "3b98d4e7-6826-45a2-936c-e1621d5fa1f3"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 11,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "812a1d75-de8b-49bc-8fe7-314817db13a9",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\utility\\fetchConfig.enterprise.js",
        "file": "\\controllers\\test\\utility\\fetchConfig.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "32a0dbe9-3fb0-47d7-bc96-fc45a33bae1e",
            "title": "Utility.FetchConfig",
            "fullFile": "C:\\work\\api\\controllers\\test\\utility\\fetchConfig.enterprise.js",
            "file": "\\controllers\\test\\utility\\fetchConfig.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should get required config.",
                "fullTitle": "Enterprise Utility.FetchConfig Should get required config.",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output).to.have.any.keys(keySet);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "824e0ddf-75e0-4c32-a086-efe198c7d381",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "824e0ddf-75e0-4c32-a086-efe198c7d381"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 6,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "b2de1497-29c4-4067-a0c5-d847f70f0d5d",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\utility\\getArbitrary.js",
        "file": "\\controllers\\test\\utility\\getArbitrary.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "3d7535c6-ceab-4170-9b92-35cd88a9f070",
            "title": "Arbitrary.Get",
            "fullFile": "C:\\work\\api\\controllers\\test\\utility\\getArbitrary.js",
            "file": "\\controllers\\test\\utility\\getArbitrary.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Arbitrary.Get \"before all\" hook",
                "timedOut": false,
                "duration": 61,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data;\n        dummyUser = orgData.owner;\n        dummyUser.authtoken = dummyUser.authtoken[0];\n        api.post(apiURL)\n            .set({ ui_admin_key: config.UI_ADMIN_KEY })\n            .send(arbitraryData)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    arbitrary = res.body.output\n                    done();\n                }\n            });\n    });\n})",
                "err": {},
                "isRoot": false,
                "uuid": "6f26c9a1-3182-49c8-a592-fe147058cee9",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Arbitrary.Get \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.parallel([\n        function(cb) {\n            _models.Arbitrary.remove({\n                    uid: {\n                        \"$in\": [arbitrary.uid]\n                    }\n                },\n                function(err) {\n                    cb(err)\n                })\n        }\n    ],\n    function(err, result) {\n        if (err) {\n            done(err)\n        } else {\n            done()\n        }\n    })",
                "err": {},
                "isRoot": false,
                "uuid": "759c8a98-2c34-4881-9f25-f00f51c0f47c",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should get error if arbitrary not found.",
                "fullTitle": "Enterprise Arbitrary.Get Should get error if arbitrary not found.",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + 'dummy')\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).to.be.equal(messageList.RECORD_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "f1282840-6745-42ff-9a5b-54cea91d6009",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get arbitrary.",
                "fullTitle": "Enterprise Arbitrary.Get Should get arbitrary.",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + arbitrary.uid)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            arbitrary = res.body.output\n            expect(arbitrary.data).to.be.a('object');\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "17a56204-530d-4940-b691-50d5bc80567a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get arbitrary by sending only[data]=true.",
                "fullTitle": "Enterprise Arbitrary.Get Should get arbitrary by sending only[data]=true.",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + arbitrary.uid + '?only[data]=true')\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body).to.be.a('object');\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "f7074ff9-373b-4214-8267-ba92c971ddc3",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f1282840-6745-42ff-9a5b-54cea91d6009",
              "17a56204-530d-4940-b691-50d5bc80567a",
              "f7074ff9-373b-4214-8267-ba92c971ddc3"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 10,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "a2f48332-f406-4f21-be48-2bf125990ac4",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\utility\\getAuditLogs.js",
        "file": "\\controllers\\test\\utility\\getAuditLogs.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "4555adfd-5e35-42cc-baa9-8a52717f7ea4",
            "title": "Utility.getAuditLogs",
            "fullFile": "C:\\work\\api\\controllers\\test\\utility\\getAuditLogs.js",
            "file": "\\controllers\\test\\utility\\getAuditLogs.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Utility.getAuditLogs \"before all\" hook",
                "timedOut": false,
                "duration": 126,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data;\n        async.waterfall([\n            function(cbk) {\n                dummyUser = orgData.owner;\n                dummyUser.authtoken = dummyUser.authtoken;\n                testData.mongoUserTriggerObj.user_uid = dummyUser.uid;\n                _models.UserTrigger.create(testData.mongoUserTriggerObj, function(err, userTrigger) {\n                    cbk(err, userTrigger);\n                })\n            },\n            function(userTrigger, cbk) {\n                userTriggerObj = userTrigger\n                _id = dummyUser._id\n                flowData.trigger.handlers = [userTriggerObj]\n                api.post(flowURL)\n                    .set('authtoken', dummyUser.authtoken)\n                    .send(flowData)\n                    .expect(httpStatus.CREATED)\n                    .end(function(err, res) {\n                        cbk(err, res, userTriggerObj)\n                    })\n            },\n            function(res, userTrigger, cbk) {\n                userFlow = res.body.output;\n                flowData.trigger.handlers = [userTriggerObj]\n                api.post(flowURL)\n                    .set({ 'authtoken': dummyUser.authtoken, org_uid: orgData.organization.uid })\n                    .send(flowData)\n                    .expect(httpStatus.CREATED)\n                    .end(function(err, res) {\n                        cbk(err, res)\n                    })\n            }\n        ], function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                orgFlow = res.body.output;\n                done()\n            }\n        })\n    });\n})",
                "err": {},
                "isRoot": false,
                "uuid": "d4f073ef-1980-4212-9f37-75ff7e5519f6",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Utility.getAuditLogs \"after all\" hook",
                "timedOut": false,
                "duration": 2,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.waterfall([\n    function(cb) {\n        _models.ConfigData.remove({ flow_uid: userFlow.uid }, function(err) {\n            cb(err);\n        })\n    },\n    function(cb) {\n        _models.ConfigSchema.remove({ flow_uid: userFlow.uid }, function(err) {\n            cb(err);\n        })\n    },\n    function(cb) {\n        removeFlow([userFlow.uid, (sharedFlow || {}).uid], function(err, deletedFlows) {\n            cb(err, deletedFlows);\n        })\n    },\n    function(deletedFlows, cb) {\n        _models.UserTrigger.remove({ uid: userTriggerObj.uid }, function(err, deletedUserTrigger) {\n            cb(err, deletedUserTrigger);\n        })\n    }\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "56bf7a91-cce2-4618-bc88-811fd24d4936",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Utility.getAuditLogs Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .send(shareCriteria)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "8883c5a7-eb63-49b4-b43d-387df451c3b9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get org audit logs.",
                "fullTitle": "Enterprise Utility.getAuditLogs Should get org audit logs.",
                "timedOut": false,
                "duration": 37,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set({ 'authtoken': dummyUser.authtoken, org_uid: orgData.organization.uid })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(_.first(res.body.output.objects).metadata.org_uid).to.be.equal(orgData.organization.uid)\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "396a5dce-4ff5-40dc-8f3a-75cc181b4b40",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get own audit logs.",
                "fullTitle": "Enterprise Utility.getAuditLogs Should get own audit logs.",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(_.first(res.body.output.objects).owner_uid).to.be.equal(dummyUser.uid)\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "5163ffd3-7d6e-46f4-812f-b95459e94e89",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get audit logs by module.",
                "fullTitle": "Enterprise Utility.getAuditLogs Should get audit logs by module.",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + '?modules=Workflow')\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(_.first(res.body.output.objects).module).to.be.equal('Workflow')\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "19f44730-ff66-4971-95b6-67e8be07035c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get audit logs by actions.",
                "fullTitle": "Enterprise Utility.getAuditLogs Should get audit logs by actions.",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + '?actions=Create')\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(_.first(res.body.output.objects).event_type).to.be.equal('Create')\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "083bcf66-683a-4443-beb0-6a57bc47c427",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get audit logs by created_by.",
                "fullTitle": "Enterprise Utility.getAuditLogs Should get audit logs by created_by.",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + '?created_by=' + dummyUser.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(_.first(res.body.output.objects).created_by).to.be.equal(dummyUser.uid)\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "c4bec400-6999-4208-b94d-c7022e0cea1f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get audit logs by project_uid.",
                "fullTitle": "Enterprise Utility.getAuditLogs Should get audit logs by project_uid.",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + '?project_uid=' + userFlow.project_uid)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(_.first(res.body.output.objects).metadata.project_uid).to.be.equal(userFlow.project_uid)\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "230ccd8c-3ac4-4a80-a15f-8c7e21d04228",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get audit logs by workflow_uid.",
                "fullTitle": "Enterprise Utility.getAuditLogs Should get audit logs by workflow_uid.",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + '?workflow_uid=' + userFlow.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(_.first(res.body.output.objects).metadata.workflow_uid).to.be.equal(userFlow.uid)\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "af353ef9-09ca-4125-94bb-45d0be9ec92e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get audit logs by startDate.",
                "fullTitle": "Enterprise Utility.getAuditLogs Should get audit logs by startDate.",
                "timedOut": false,
                "duration": 22,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + '?startDate=' + moment.utc().format())\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(_.first(res.body.output.objects).metadata.project_uid).to.be.equal(userFlow.project_uid)\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "edcb41a1-98f0-4277-8122-1c8315bb73ee",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8883c5a7-eb63-49b4-b43d-387df451c3b9",
              "396a5dce-4ff5-40dc-8f3a-75cc181b4b40",
              "5163ffd3-7d6e-46f4-812f-b95459e94e89",
              "19f44730-ff66-4971-95b6-67e8be07035c",
              "083bcf66-683a-4443-beb0-6a57bc47c427",
              "c4bec400-6999-4208-b94d-c7022e0cea1f",
              "230ccd8c-3ac4-4a80-a15f-8c7e21d04228",
              "af353ef9-09ca-4125-94bb-45d0be9ec92e",
              "edcb41a1-98f0-4277-8122-1c8315bb73ee"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 153,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "f966d87a-9f01-4d80-b1d3-5395d356ced9",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\utility\\getCustomCss.enterprise.js",
        "file": "\\controllers\\test\\utility\\getCustomCss.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "0641d2bb-70c3-4d0f-8211-8b093627516e",
            "title": "Utility",
            "fullFile": "C:\\work\\api\\controllers\\test\\utility\\getCustomCss.enterprise.js",
            "file": "\\controllers\\test\\utility\\getCustomCss.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "af72faad-659c-4e65-8a4e-3ee1d550e2c1",
                "title": "Utility.getCustomCss",
                "fullFile": "C:\\work\\api\\controllers\\test\\utility\\getCustomCss.enterprise.js",
                "file": "\\controllers\\test\\utility\\getCustomCss.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Enterprise Utility Utility.getCustomCss \"before all\" hook",
                    "timedOut": false,
                    "duration": 8,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({$or:[{email: new RegExp('^test.user+', \"i\")},{email: new RegExp('^test.user+', \"i\")}]}, function(error, user) {\n    _models.Mail.remove({$or:[{to: new RegExp('^test.user+', \"i\")},{to: new RegExp('^test.user+', \"i\")}]}, function(error, user) {\n        _models.CustomCss.remove({ label: new RegExp('^UNIT_TEST_LABEL_+', \"i\") }, function(error, user) {\n            saveCustomCSS({}, function(errors, cssEntries) {\n                _cssEntries = cssEntries;\n                done();\n            });\n        });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3faffcaf-e2b2-4775-bc82-6300e1259dba",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Should get specific published custom css.",
                    "fullTitle": "Enterprise Utility Utility.getCustomCss Should get specific published custom css.",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL.replace(\":uid\", _cssEntries[1].uid))\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.uid.should.not.empty;\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ecb499ce-e44a-453d-a6c7-a59f40ed26b5",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should get error, if customcss not found .",
                    "fullTitle": "Enterprise Utility Utility.getCustomCss Should get error, if customcss not found .",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.CUSTOM_CSS_NOT_FOUND);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "01d550c3-583e-4e0f-b590-6e0000dc3af8",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "Should not get unpublished custom css.",
                    "fullTitle": "Enterprise Utility Utility.getCustomCss Should not get unpublished custom css.",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL.replace(\":uid\", _cssEntries[0].uid))\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.CUSTOM_CSS_NOT_FOUND);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c3cb48f7-3cf9-4a70-a46d-780f93bdf8ef",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "ecb499ce-e44a-453d-a6c7-a59f40ed26b5",
                  "01d550c3-583e-4e0f-b590-6e0000dc3af8",
                  "c3cb48f7-3cf9-4a70-a46d-780f93bdf8ef"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 10,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "00ac91d8-33fb-4d00-b093-ce73e6fc4ed7",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\utility\\getUsage.js",
        "file": "\\controllers\\test\\utility\\getUsage.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "a1fa8cac-ec16-4be7-b010-bd22705c74c7",
            "title": "Utility.getUsage",
            "fullFile": "C:\\work\\api\\controllers\\test\\utility\\getUsage.js",
            "file": "\\controllers\\test\\utility\\getUsage.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Utility.getUsage \"before all\" hook",
                "timedOut": false,
                "duration": 90,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data;\n        async.waterfall([\n            function(cbk) {\n                dummyUser = orgData.owner;\n                testData.mongoUserTriggerObj.user_uid = dummyUser.uid;\n                _models.CustomIntegration.remove().exec(function(err) {\n                    _models.UserTrigger.create(testData.mongoUserTriggerObj, function(err, userTrigger) {\n                        cbk(err, userTrigger);\n                    })\n                })\n            },\n            function(userTrigger, cbk) {\n                userTriggerObj = userTrigger\n                _id = dummyUser._id\n                flowData.trigger.handlers = [userTriggerObj]\n                api.post(flowURL)\n                    .set('authtoken', dummyUser.authtoken)\n                    .send(flowData)\n                    .expect(httpStatus.CREATED)\n                    .end(function(err, res) {\n                        cbk(err, res)\n                    })\n            }\n        ], function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                userFlow = res.body.output;\n                done()\n            }\n        })\n    });\n})",
                "err": {},
                "isRoot": false,
                "uuid": "5c6cee41-d8e2-47c8-931a-bf903e03b32b",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Utility.getUsage \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.waterfall([\n    function(cb) {\n        removeFlow([userFlow.uid, (sharedFlow || {}).uid], function(err, deletedFlows) {\n            cb(err, deletedFlows);\n        })\n    },\n    function(deletedFlows, cb) {\n        _models.UserTrigger.remove({ uid: userTriggerObj.uid }, function(err, deletedUserTrigger) {\n            cb(err, deletedUserTrigger);\n        })\n    }\n], function(err, result) {\n    if (err) {\n        done(err)\n    } else {\n        done()\n    }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "4ce00403-ad03-4b79-9a7b-2e1e75ffff07",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error.",
                "fullTitle": "Enterprise Utility.getUsage Should give unauthenticated user error.",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + '?trigger=' + userTriggerObj.uid)\n    .send(shareCriteria)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHENTICATED_USER);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "e13583e1-a92c-4d49-a9c2-c4699eea4a4e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get trigger data.",
                "fullTitle": "Enterprise Utility.getUsage Should get trigger data.",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + '?trigger=' + userTriggerObj.uid)\n    .set('authtoken', dummyUser.authtoken)\n    .send(shareCriteria)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //expect(res.body.output.length).to.be.equal(1)\n            expect(_.first(_.first(res.body.output).activities)).to.be.equal('start')\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "6c255dfe-ead2-4899-9de8-f5bd2c88d1ec",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get auth data.",
                "fullTitle": "Enterprise Utility.getUsage Should get auth data.",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + '?auth=fl5adf8ba83fd0ec3ddb949f')\n    .set('authtoken', dummyUser.authtoken)\n    .send(shareCriteria)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //expect(res.body.output.length).to.be.equal(1)\n            expect(_.first(_.first(res.body.output).activities)).to.be.equal('a0')\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "e8abc02f-2bb3-447e-9e89-e4b10bad1451",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get connection data.",
                "fullTitle": "Enterprise Utility.getUsage Should get connection data.",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + '?connection=fl2a1c66a0103e97e0f2cec5')\n    .set('authtoken', dummyUser.authtoken)\n    .send(shareCriteria)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            //expect(res.body.output.length).to.be.equal(1)\n            expect(_.first(_.first(res.body.output).activities)).to.be.equal('a1')\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "b9c1c53a-6033-4180-b5f6-e33847dd00af",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get agent data.",
                "fullTitle": "Enterprise Utility.getUsage Should get agent data.",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get(apiURL + '?agent=ega9d1573323eb3fa10436fe0')\n    .set('authtoken', dummyUser.authtoken)\n    .send(shareCriteria)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            Array.isArray(res.body.output).should.equal(true);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "6a3ea406-c983-4676-aca2-734f1033e9eb",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e13583e1-a92c-4d49-a9c2-c4699eea4a4e",
              "6c255dfe-ead2-4899-9de8-f5bd2c88d1ec",
              "e8abc02f-2bb3-447e-9e89-e4b10bad1451",
              "b9c1c53a-6033-4180-b5f6-e33847dd00af",
              "6a3ea406-c983-4676-aca2-734f1033e9eb"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 51,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "cc62f065-ce23-4b50-a50d-59663ca78b69",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\utility\\getUsersData.js",
        "file": "\\controllers\\test\\utility\\getUsersData.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "f7fc2b26-9d4d-4289-bc9b-e2c4365d01d1",
            "title": "Utility.getUsersData",
            "fullFile": "C:\\work\\api\\controllers\\test\\utility\\getUsersData.js",
            "file": "\\controllers\\test\\utility\\getUsersData.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Utility.getUsersData \"before all\" hook",
                "timedOut": false,
                "duration": 64,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data;\n        dummyUser = orgData.owner;\n        dummyUser.authtoken = dummyUser.authtoken;\n        usersData = { users: [dummyUser.uid] }\n        done()\n    });\n})",
                "err": {},
                "isRoot": false,
                "uuid": "c9d09abe-ebd8-4919-9f62-a4c038f83833",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "Should get users data.",
                "fullTitle": "Enterprise Utility.getUsersData Should get users data.",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send(usersData)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(_.first(res.body.output).uid).to.be.equal(dummyUser.uid)\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "ea162b0c-93cc-4cb2-9225-2f6ff2c415c1",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ea162b0c-93cc-4cb2-9225-2f6ff2c415c1"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 3,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "02758c0e-a82e-4ada-9be6-78ad8d11f0c1",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\utility\\installationDataProxy.enterprise.js",
        "file": "\\controllers\\test\\utility\\installationDataProxy.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "a0c4116f-8671-4d18-9ba1-4c1f27210057",
            "title": "Utility",
            "fullFile": "C:\\work\\api\\controllers\\test\\utility\\installationDataProxy.enterprise.js",
            "file": "\\controllers\\test\\utility\\installationDataProxy.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "dc81c85e-4f4d-4f1c-b4e3-326d9fdd1cb3",
                "title": "Utility.createInstallationData",
                "fullFile": "C:\\work\\api\\controllers\\test\\utility\\installationDataProxy.enterprise.js",
                "file": "\\controllers\\test\\utility\\installationDataProxy.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Enterprise Utility Utility.createInstallationData \"before all\" hook",
                    "timedOut": false,
                    "duration": 85,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\n_models.User.remove({ email: testData.testRegistrationBody.email }, function(error, user) {\n    api.post(\"/enterprise/v1/signup\")\n        .send(testData.testRegistrationBody)\n        .expect(httpStatus.CREATED)\n        .end(function(err, res) {\n            if (err) {\n                done(err);\n            } else {\n                dummyUser = res.body.output;\n                done();\n            }\n        });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8665d557-fd1b-4311-abed-46ca69be9916",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Should create installation data at builtio backend.",
                    "fullTitle": "Enterprise Utility Utility.createInstallationData Should create installation data at builtio backend.",
                    "timedOut": false,
                    "duration": 15,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.builtInstallationData(httpmock, \"enterprise\");\n\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .expect(httpStatus.OK)\n    .send(data)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.output.notice).to.be.equal(response.output.notice);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5da0781c-78cb-476b-ba4b-519affe01335",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "5da0781c-78cb-476b-ba4b-519affe01335"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 15,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "132de80f-58e6-437d-ad07-23d461b572f2",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\utility\\listCustomCss.enterprise.js",
        "file": "\\controllers\\test\\utility\\listCustomCss.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "1009d876-7792-4d87-8b0a-a04afbac4fdb",
            "title": "Utility",
            "fullFile": "C:\\work\\api\\controllers\\test\\utility\\listCustomCss.enterprise.js",
            "file": "\\controllers\\test\\utility\\listCustomCss.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "18966e5a-f632-4ad8-9484-386f217bdfd1",
                "title": "Utility.listCustomCss",
                "fullFile": "C:\\work\\api\\controllers\\test\\utility\\listCustomCss.enterprise.js",
                "file": "\\controllers\\test\\utility\\listCustomCss.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Enterprise Utility Utility.listCustomCss \"before all\" hook",
                    "timedOut": false,
                    "duration": 7,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\n_models.User.remove({ $or: [{ email: new RegExp('^test.user+', \"i\") }, { email: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n    _models.Mail.remove({ $or: [{ to: new RegExp('^test.user+', \"i\") }, { to: new RegExp('^test.user+', \"i\") }] }, function(error, user) {\n        _models.CustomCss.remove({ label: new RegExp('^UNIT_TEST_LABEL_+', \"i\") }, function(error, user) {\n            saveCustomCSS({}, function(errors, cssEntries) {\n                done();\n            });\n        });\n    });\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "24be2a5b-64a2-40d3-be22-a9c118df925e",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Should get publish list of custom css.",
                    "fullTitle": "Enterprise Utility Utility.listCustomCss Should get publish list of custom css.",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.get(apiURL)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            var isValid = res.body.output.length >= 5;\n            isValid.should.equal(true);\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cd1234f1-374e-43f5-8527-4cfc048cd9b3",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "cd1234f1-374e-43f5-8527-4cfc048cd9b3"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 5,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "dc7d7f71-58b7-470b-b58b-e94c0034eef1",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\utility\\logError.enterprise.js",
        "file": "\\controllers\\test\\utility\\logError.enterprise.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "004016af-d19a-4d31-b4cc-dfe59e4d0e41",
            "title": "Utility",
            "fullFile": "C:\\work\\api\\controllers\\test\\utility\\logError.enterprise.js",
            "file": "\\controllers\\test\\utility\\logError.enterprise.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "8d2bea23-3a77-4656-a104-34d863ad31e0",
                "title": "Utility.LogError",
                "fullFile": "C:\\work\\api\\controllers\\test\\utility\\logError.enterprise.js",
                "file": "\\controllers\\test\\utility\\logError.enterprise.js",
                "beforeHooks": [
                  {
                    "title": "\"before all\" hook",
                    "fullTitle": "Enterprise Utility Utility.LogError \"before all\" hook",
                    "timedOut": false,
                    "duration": 93,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nasync.waterfall([\n    function(cbk) {\n        _models.User.remove({ email: testData.testRegistrationBody.email }, function(err, user) {\n            cbk(err, user);\n        })\n    },\n    function(user, cbk) {\n        api.post(\"/enterprise/v1/signup\")\n            .send(testData.testRegistrationBody)\n            .expect(httpStatus.CREATED)\n            .end(function(err, result) {\n                cbk(err, result);\n            })\n    }\n], function(err, res) {\n    if (err) {\n        done(err);\n    } else {\n        dummyUser = res.body.output;\n        done()\n    }\n})",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b464c5bf-3254-4644-936e-601337525eb8",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "Should log an error.",
                    "fullTitle": "Enterprise Utility Utility.LogError Should log an error.",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "this.timeout(apiTimeOut);\napi.post(apiURL)\n    .set('authtoken', dummyUser.authtoken)\n    .send({ error: 'error' })\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.output.message.should.equal('done');\n            done();\n        }\n    });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7ac56802-36a4-4ce6-b449-36ef36e9d421",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "7ac56802-36a4-4ce6-b449-36ef36e9d421"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 3,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "30d24d10-adfc-4c6b-bef9-36608621822e",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\utility\\updateArbitrary.js",
        "file": "\\controllers\\test\\utility\\updateArbitrary.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "07dd516f-a516-4d88-a0f5-045b133753e0",
            "title": "Arbitrary.Update",
            "fullFile": "C:\\work\\api\\controllers\\test\\utility\\updateArbitrary.js",
            "file": "\\controllers\\test\\utility\\updateArbitrary.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Arbitrary.Update \"before all\" hook",
                "timedOut": false,
                "duration": 64,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, \"enterprise\");\nvar testCollection = require(\"../testCollection\");\ntestCollection.organizationRemoveRecords({}, function() {\n    testCollection.organizationRecordsEntry({}, function(data) {\n        orgData = data;\n        dummyUser = orgData.owner;\n        dummyUser.authtoken = dummyUser.authtoken[0];\n        api.post(apiURL)\n            .set({ ui_admin_key: config.UI_ADMIN_KEY })\n            .send(arbitraryData)\n            .expect(httpStatus.CREATED)\n            .end(function(err, res) {\n                if (err) {\n                    done(err);\n                } else {\n                    arbitrary = res.body.output\n                    done();\n                }\n            });\n    });\n})",
                "err": {},
                "isRoot": false,
                "uuid": "dee31ef3-e612-4465-aa79-bcc887132369",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Enterprise Arbitrary.Update \"after all\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nasync.parallel([\n        function(cb) {\n            _models.Arbitrary.remove({\n                    uid: {\n                        \"$in\": [arbitrary.uid]\n                    }\n                },\n                function(err) {\n                    cb(err)\n                })\n        }\n    ],\n    function(err, result) {\n        if (err) {\n            done(err)\n        } else {\n            done()\n        }\n    })",
                "err": {},
                "isRoot": false,
                "uuid": "fca1c955-c50f-4a69-a209-8a540de72c72",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "Should give unauthenticated user error for unauthorised user.",
                "fullTitle": "Enterprise Arbitrary.Update Should give unauthenticated user error for unauthorised user.",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put(apiURL + arbitrary.uid)\n    .expect(httpStatus.UNAUTHORIZED)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            res.body.error.message.should.equal(messageList.UNAUTHORIZED);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "b64aa0a1-e007-4cb4-b035-709395d9e8f5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error if arbitrary not found.",
                "fullTitle": "Enterprise Arbitrary.Update Should get error if arbitrary not found.",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put(apiURL + 'dummy')\n    .set({ ui_admin_key: config.UI_ADMIN_KEY })\n    .send(arbitraryData)\n    .expect(httpStatus.NOT_FOUND)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).to.be.equal(messageList.RECORD_NOT_FOUND);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "92a669d5-ade5-48ee-a08c-5a22e8a6cd80",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should update arbitrary, if data is valid.",
                "fullTitle": "Enterprise Arbitrary.Update Should update arbitrary, if data is valid.",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put(apiURL + arbitrary.uid)\n    .set({ ui_admin_key: config.UI_ADMIN_KEY })\n    .send(arbitraryData)\n    .expect(httpStatus.OK)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            arbitrary = res.body.output\n            expect(arbitrary.data).to.be.a('object');\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "6199f7a2-bf3c-4f4e-8914-f2fd99380ddb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Should get error,  if \"data\" key is missing.",
                "fullTitle": "Enterprise Arbitrary.Update Should get error,  if \"data\" key is missing.",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put(apiURL + arbitrary.uid)\n    .set({ ui_admin_key: config.UI_ADMIN_KEY })\n    .send({})\n    .expect(httpStatus.BAD_REQUEST)\n    .end(function(err, res) {\n        if (err) {\n            done(err);\n        } else {\n            expect(res.body.error.message).equal(messageList.PLEASE_SEND_VALID_PARAMETERS);\n            done();\n        }\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "62dc0b30-8306-4dc3-8b50-3a565f3444c8",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b64aa0a1-e007-4cb4-b035-709395d9e8f5",
              "92a669d5-ade5-48ee-a08c-5a22e8a6cd80",
              "6199f7a2-bf3c-4f4e-8914-f2fd99380ddb",
              "62dc0b30-8306-4dc3-8b50-3a565f3444c8"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 13,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "598f3e38-ffd9-4da3-a6f5-54c009d32d60",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\z_synergy\\portal.js",
        "file": "\\controllers\\test\\z_synergy\\portal.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "e481a8ef-f026-426f-8115-79188edc5792",
            "title": "Synergy APIs",
            "fullFile": "C:\\work\\api\\controllers\\test\\z_synergy\\portal.js",
            "file": "\\controllers\\test\\z_synergy\\portal.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Synergy APIs \"before all\" hook",
                "timedOut": false,
                "duration": 1541,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ntestCollection.setupEmbedDB(()=>{\n  commonMock.setSignUpMocks(httpmock, 'enterprise');\n  \n  // MOCK TRIGGER SERVER CALLS------------\n     const trigger = nmock('http://localhost:9090').get('/triggers/tg0d1de171b253ddc0c37ae2').reply(200,synergyData.createSolutionTriggerData);\n  //---------------------------------------\n  \n  api.post('/enterprise/v1/login')\n  .send(synergyData.login)\n  .end((err, res) => {\n      if (err) {\n          done(err);\n      } else {\n          loginData = res.body;\n          accountHeader.authtoken = loginData.output.authtoken;\n          done();\n      }\n  });\n})",
                "err": {},
                "isRoot": false,
                "uuid": "19df456e-e35a-4bcf-8915-608d29d6cdfb",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create the specified solution",
                "fullTitle": "Enterprise Synergy APIs should create the specified solution",
                "timedOut": false,
                "duration": 78,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "api.post('/synergy/v1/embed/solution').set(accountHeader).send(synergyData.solutionCreate).end((err, res) => {\n res.should.have.property('status',200);\n res.body.should.be.a('object');\n res.body.should.have.property('output');\n res.body.output.should.be.a('object');\n res.body.output.should.have.property('uid');\n res.body.output.should.have.property('updated_at');\n res.body.output.should.have.property('created_at');\n solution.solutionId = res.body.output.uid;\ndone();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "2e6f4c5e-1413-4eee-9dbc-33199ee6cb77",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should publish the solution version to production",
                "fullTitle": "Enterprise Synergy APIs should publish the solution version to production",
                "timedOut": false,
                "duration": 38,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n api.post('/synergy/v1/embed/solution/'+solution.solutionId+'/deploy').set(accountHeader).send({\"publish\":true}).end((err, res) => {\n res.should.have.property('status',200);\n res.body.should.be.a('object');\n res.body.should.have.property('output');\n res.body.output.should.be.a('object');\n res.body.output.should.have.property('uid');\n res.body.output.uid.should.be.a('string');\n res.body.output.should.have.property('environment');\n res.body.output.environment.should.be.a('object');\n res.body.output.environment.should.have.property('project_params');\n res.body.output.environment.project_params.should.be.a('array');\n done();\n });",
                "err": {},
                "isRoot": false,
                "uuid": "1ab3d3ba-0d95-4b6a-9236-c4e0f876144c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should get all the types of embed accounts",
                "fullTitle": "Enterprise Synergy APIs should get all the types of embed accounts",
                "timedOut": false,
                "duration": 23,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n api.get('/synergy/v1/embed/accounts?sortBy=desc&orderBy=created_at&limit=15').set(accountHeader).end((err, res) => {\n   res.should.have.property('status',200);\n   res.body.should.be.a('object');\n   res.body.should.have.property('output');\n   res.body.output.should.be.a('object');\n   res.body.output.should.have.property('count');\n   res.body.output.should.have.property('skip');\n   res.body.output.should.have.property('accounts');\n   res.body.output.should.have.property('limit');\n   res.body.output.accounts.should.be.a('array');\n   miscAccUid = res.body.output.accounts[0].uid;\n   if(res.body.output.limit >= res.body.output.count) {\n     expect(parseInt(res.body.output.count,10)).equals(res.body.output.accounts.length);\n   }else {\n     expect(parseInt(res.body.output.limit,10)).equals(res.body.output.accounts.length);\n   }\n   done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "cbff1ab9-ad0e-47bd-9684-94874ccee4da",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should get all the users for a apecific account",
                "fullTitle": "Enterprise Synergy APIs should get all the users for a apecific account",
                "timedOut": false,
                "duration": 28,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n         api.get('/synergy/v1/embed/accounts/'+miscAccUid+'/users').set(accountHeader).end((err, res) => {\n res.should.have.property('status',200);\n res.body.should.be.a('object');\n res.body.should.have.property('output');\n res.body.output.should.be.a('object');\n res.body.output.should.have.property('count');\n res.body.output.should.have.property('skip');\n res.body.output.should.have.property('limit');\n done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "83f95691-dc18-475d-b147-3d258cbdb23a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should get all the consumer plans",
                "fullTitle": "Enterprise Synergy APIs should get all the consumer plans",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get('/synergy/v1/embed/consumers/plans?sortBy=desc&orderBy=created_at&limit=15').set(accountHeader).end((err, res) => {\n \n res.should.have.property('status',200);\n res.body.should.be.a('object');\n res.body.should.have.property('output');\n res.body.output.should.be.a('object');\n res.body.output.should.have.property('count');\n res.body.output.should.have.property('skip');\n res.body.output.should.have.property('limit');\n res.body.output.should.have.property('plans');\n res.body.output.plans.should.be.a('array');  \n \n if(res.body.output.limit >= res.body.output.count) {\n   expect(parseInt(res.body.output.count,10)).equals(res.body.output.plans.length);\n }else {\n   expect(parseInt(res.body.output.limit,10)).equals(res.body.output.plans.length);\n }   \n done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "9e568660-086f-42a3-8de6-7d8888353fc3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should get all the user details for embed",
                "fullTitle": "Enterprise Synergy APIs should get all the user details for embed",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n api.get('/synergy/v1/embed/users?orderBy=created_at&sortBy=desc&limit=15').set(accountHeader).end((err, res) => {\n  \n  res.should.have.property('status',200);\n  res.body.should.be.a('object');\n  res.body.should.have.property('output');\n  res.body.output.should.be.a('object');\n  res.body.output.should.have.property('count');\n  res.body.output.should.have.property('skip');\n  res.body.output.should.have.property('limit');\n  res.body.output.should.have.property('objects');\n  res.body.output.objects.should.be.a('array');  \n  \n  if(res.body.output.limit >= res.body.output.count) {\n    expect(parseInt(res.body.output.count,10)).equals(res.body.output.objects.length);\n  }else {\n    expect(parseInt(res.body.output.limit,10)).equals(res.body.output.objects.length);\n  }   \n  done();\n });",
                "err": {},
                "isRoot": false,
                "uuid": "709db34d-2dd5-4619-9deb-e46962ca7f3b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should get all the auths ",
                "fullTitle": "Enterprise Synergy APIs should get all the auths ",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n             api.get('/synergy/v1/auths?orderBy=created_at&sortBy=desc&limit=15').set(accountHeader).end((err, res) => {\n\nres.should.have.property('status',200);\nres.body.should.be.a('object');\nres.body.should.have.property('output');\nres.body.output.should.be.a('object');\nres.body.output.should.have.property('count');\nres.body.output.should.have.property('skip');\nres.body.output.should.have.property('limit');\nres.body.output.should.have.property('auths');\nres.body.output.auths.should.be.a('array');  \n\nif(res.body.output.limit >= res.body.output.count) {\n  expect(parseInt(res.body.output.count,10)).equals(res.body.output.auths.length);\n}else {\n  expect(parseInt(res.body.output.limit,10)).equals(res.body.output.auths.length);\n}   \ndone();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "459d1d01-74d8-4ddd-89bf-86f365f1c9c5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should get all enabled the auths ",
                "fullTitle": "Enterprise Synergy APIs should get all enabled the auths ",
                "timedOut": false,
                "duration": 22,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n       api.get('/synergy/v1/embed/auths?orderBy=created_at&sortBy=desc&limit=15').set(accountHeader).end((err, res) => {\n\nres.should.have.property('status',200);\nres.body.should.be.a('object');\nres.body.should.have.property('output');\nres.body.output.should.be.a('object');\nres.body.output.should.have.property('count');\nres.body.output.should.have.property('skip');\nres.body.output.should.have.property('limit');\nres.body.output.should.have.property('auths');\nres.body.output.auths.should.be.a('array');  \n\nif(res.body.output.limit >= res.body.output.count) {\n  expect(parseInt(res.body.output.count,10)).equals(res.body.output.auths.length);\n}else {\n  expect(parseInt(res.body.output.limit,10)).equals(res.body.output.auths.length);\n}   \ndone();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "642487f5-c555-416b-82e2-1f2eef7414eb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should get all required keys for embed admin",
                "fullTitle": "Enterprise Synergy APIs should get all required keys for embed admin",
                "timedOut": false,
                "duration": 23,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n           api.get('/synergy/v1/embed/environment/keys').set(accountHeader).end((err, res) => {\n\nres.should.have.property('status',200);\nres.body.should.be.a('object');\nres.body.should.have.property('output');\nres.body.output.should.be.a('object');\nres.body.output.should.have.property('provider_verification_token');\nres.body.output.should.have.property('source_verification_token');\nres.body.output.should.have.property('identifier');\nres.body.output.should.have.property('api_key');        \ndone();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "1a83dcc5-492b-468b-9292-3cb615d98f7a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should get all available solutions embed admin",
                "fullTitle": "Enterprise Synergy APIs should get all available solutions embed admin",
                "timedOut": false,
                "duration": 140,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n           api.get('/synergy/v1/embed/solution?orderBy=created_at&sortBy=desc&limit=15').set(accountHeader).end((err, res) => {\n\nres.should.have.property('status',200);\nres.body.should.be.a('object');\nres.body.should.have.property('output');\nres.body.output.should.be.a('object');\nres.body.output.should.have.property('count');\nres.body.output.should.have.property('skip');\nres.body.output.should.have.property('limit');  \nres.body.output.should.have.property('solutions'); \nres.body.output.solutions.should.be.a('array');  \n   \nif(res.body.output.limit >= res.body.output.count) {\n  expect(parseInt(res.body.output.count,10)).equals(res.body.output.solutions.length);\n }else {\n expect(parseInt(res.body.output.limit,10)).equals(res.body.output.solutions.length);\n }    \ndone();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "cb1f367c-6190-47dd-8410-7e467413a5d8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fetch all solution versions for given solution",
                "fullTitle": "Enterprise Synergy APIs should fetch all solution versions for given solution",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n           api.get('/synergy/v1/embed/solution/'+solution.solutionId+'/version').set(accountHeader).end((err, res) => {\nres.should.have.property('status',200);\nres.body.should.be.a('object');\nres.body.should.have.property('output');\nres.body.output.should.be.a('array');\ndone();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "732e8455-cedd-4ff3-89f2-a3ceea16ecb7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fetch a specific solution version for given solution",
                "fullTitle": "Enterprise Synergy APIs should fetch a specific solution version for given solution",
                "timedOut": false,
                "duration": 22,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n               api.get('/synergy/v1/embed/solution/'+solution.solutionId+'/version/1').set(accountHeader).end((err, res) => {\nres.should.have.property('status',200);\nres.body.should.be.a('object');\nres.body.should.have.property('output');\nres.body.output.should.be.a('object');\ndone();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "0fa9cb8b-8687-4141-b79e-10a8ce668822",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fetch all solution users given solution",
                "fullTitle": "Enterprise Synergy APIs should fetch all solution users given solution",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n api.get('/synergy/v1/embed/solution/'+solution.solutionId+'/users').set(accountHeader).end((err, res) => {\n   res.should.have.property('status',200);\n   res.body.should.be.a('object');\n   res.body.should.have.property('output');\n   res.body.output.should.be.a('object');\n   res.body.output.should.have.property('count');\n   res.body.output.should.have.property('skip');\n   res.body.output.should.have.property('limit');  \n   res.body.output.should.have.property('users'); \n   res.body.output.users.should.be.a('array');  \n      \n   if(res.body.output.limit >= res.body.output.count) {\n     expect(parseInt(res.body.output.count,10)).equals(res.body.output.users.length);\n    }else {\n    expect(parseInt(res.body.output.limit,10)).equals(res.body.output.users.length);\n    }    \n   done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "98bd8d15-9e0e-495b-8d9c-51e205d7aa56",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fetch all plans by consumer id",
                "fullTitle": "Enterprise Synergy APIs should fetch all plans by consumer id",
                "timedOut": false,
                "duration": 22,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n api.get('/synergy/v1/embed/consumers/'+synergyData.miscData.consumer.id+'/plan').set(accountHeader).end((err, res) => {\n       \n   res.should.have.property('status',200);\n   res.body.should.be.a('object');\n   res.body.should.have.property('output');\n   res.body.output.should.be.a('object');\n   res.body.output.should.have.property('consumer_count');\n   res.body.output.should.have.property('uid');\n   res.body.output.should.have.property('users');  \n   res.body.output.users.should.be.a('array');         \n     expect(parseInt(res.body.output.consumer_count,10)).equals(res.body.output.users.length);            \n   done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "752c1e21-cf38-4a96-a534-297ec033fe3e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fetch all consumer deployments by consumer id",
                "fullTitle": "Enterprise Synergy APIs should fetch all consumer deployments by consumer id",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n api.get('/synergy/v1/embed/consumers/'+synergyData.deployments.consumerId+'/deployments').set(accountHeader).end((err, res) => {\n       \n   res.should.have.property('status',200);\n   res.body.should.be.a('object');\n   res.body.should.have.property('output');\n   res.body.output.should.be.a('object');   \n   res.body.output.should.have.property('deployments');\n   res.body.output.deployments.should.be.a('array'); \n   depUid = res.body.output.deployments[0].uid;\n   done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "14982752-f5e1-473a-8f40-0f5d4fd0e0ad",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fetch all deployment stats by deployment id",
                "fullTitle": "Enterprise Synergy APIs should fetch all deployment stats by deployment id",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n api.get('/synergy/v1/embed/deployment/'+depUid+'/stats').set(accountHeader).end((err, res) => {\n         \n   res.should.have.property('status',200);\n   res.body.should.be.a('object');\n   res.body.should.have.property('output');\n   done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "b4da6125-2d04-42ff-96e9-5339d0c90da4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fetch all consumer stats by consumer id",
                "fullTitle": "Enterprise Synergy APIs should fetch all consumer stats by consumer id",
                "timedOut": false,
                "duration": 22,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n api.get('/synergy/v1/embed/consumers/'+synergyData.miscData.consumer.id+'/stats').set(accountHeader).end((err, res) => {\n       \n   res.should.have.property('status',200);\n   res.body.should.be.a('object');\n   res.body.should.have.property('output');       \n   done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "b744cc09-7e87-4657-b678-b6b2df4a99ac",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should get usage stats for embed admin",
                "fullTitle": "Enterprise Synergy APIs should get usage stats for embed admin",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.get('/synergy/v1/embed/stats/usage').set(accountHeader).end((err, res) => {\n\nres.should.have.property('status',200);\nres.body.should.be.a('object');\nres.body.should.have.property('output');      \n});\ndone();",
                "err": {},
                "isRoot": false,
                "uuid": "9051cb0e-4ef3-499c-9f34-363a7bce9713",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should get all active accounts under stats for embed admin",
                "fullTitle": "Enterprise Synergy APIs should get all active accounts under stats for embed admin",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n         api.get('/synergy/v1/embed/stats/active_accounts').set(accountHeader).end((err, res) => {\n         \n         res.should.have.property('status',200);\n         res.body.should.be.a('object');\n         res.body.should.have.property('output');      \n         });\n         done();",
                "err": {},
                "isRoot": false,
                "uuid": "9216908f-3299-4522-a010-32e293d85bc2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should get integrations under stats for embed admin",
                "fullTitle": "Enterprise Synergy APIs should get integrations under stats for embed admin",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n           api.get('/synergy/v1/embed/stats/integrations').set(accountHeader).end((err, res) => {\n           \n           res.should.have.property('status',200);\n           res.body.should.be.a('object');\n           res.body.should.have.property('output');      \n           });\n           done();",
                "err": {},
                "isRoot": false,
                "uuid": "46fe51d6-0b2c-4f54-bef9-8846fbb7e758",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should get all active consumers under stats for embed admin",
                "fullTitle": "Enterprise Synergy APIs should get all active consumers under stats for embed admin",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n api.get('/synergy/v1/embed/stats/active_consumers').set(accountHeader).end((err, res) => {\n \n res.should.have.property('status',200);\n res.body.should.be.a('object');\n res.body.should.have.property('output');      \n });\n done();",
                "err": {},
                "isRoot": false,
                "uuid": "bc30183f-3b9e-442b-930e-856f9782dc3d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should get all active integrations under stats for embed admin",
                "fullTitle": "Enterprise Synergy APIs should get all active integrations under stats for embed admin",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n api.get('/synergy/v1/embed/stats/active_integrations').set(accountHeader).end((err, res) => {\n \n res.should.have.property('status',200);\n res.body.should.be.a('object');\n res.body.should.have.property('output');      \n });\n done();",
                "err": {},
                "isRoot": false,
                "uuid": "55d8cb7a-6553-4232-8b5d-eae2eaa7c62e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail while getting embed accounts , missing auth token",
                "fullTitle": "Enterprise Synergy APIs should fail while getting embed accounts , missing auth token",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\naccountHeaderFalse.authtoken = '';\n api.get('/synergy/v1/embed/accounts?sortBy=desc&orderBy=created_at&limit=15').set(accountHeaderFalse).end((err, res) => {\n   res.should.have.property('status',401);\n   done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "f6392eb0-28e4-48ed-bf4c-fecbefbea127",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail while getting embed accounts , wrong auth token",
                "fullTitle": "Enterprise Synergy APIs should fail while getting embed accounts , wrong auth token",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n       accountHeaderFalse.authtoken = 'fxccmbtytyu';\n api.get('/synergy/v1/embed/accounts?sortBy=desc&orderBy=created_at&limit=15').set(accountHeaderFalse).end((err, res) => {\n   res.should.have.property('status',401);\n   done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "ba39d3cc-042d-48c4-8be1-d31ab41ab5f6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail while getting embed accounts , wrong org uid",
                "fullTitle": "Enterprise Synergy APIs should fail while getting embed accounts , wrong org uid",
                "timedOut": false,
                "duration": 38,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "accountHeaderFalse = _.cloneDeep(accountHeader)\naccountHeaderFalse.org_uid = 'sadsadjhasdh'\n        this.timeout(apiTimeOut);\napi.get('/synergy/v1/embed/accounts?sortBy=desc&orderBy=created_at&limit=15').set(accountHeaderFalse).end((err, res) => {\n  res.should.have.property('status',404);\n  done();\n });",
                "err": {},
                "isRoot": false,
                "uuid": "591e4fdb-5fc2-4b37-8870-d69650e1b8a7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail while getting embed accounts , no org uid",
                "fullTitle": "Enterprise Synergy APIs should fail while getting embed accounts , no org uid",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "accountHeaderFalse = _.cloneDeep(accountHeader)\naccountHeaderFalse.org_uid = '';\naccountHeaderFalse.environment = 'sandbox';\n       this.timeout(apiTimeOut);\napi.get('/synergy/v1/embed/accounts?sortBy=desc&orderBy=created_at&limit=15').set(accountHeaderFalse).end((err, res) => {\n  res.should.have.property('status',401);\n  done();\n });",
                "err": {},
                "isRoot": false,
                "uuid": "1f1fb2ba-ebdb-4dab-818a-831658cab0dc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail while getting embed accounts , no environment",
                "fullTitle": "Enterprise Synergy APIs should fail while getting embed accounts , no environment",
                "timedOut": false,
                "duration": 19,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "accountHeaderFalse = _.cloneDeep(accountHeader)\naccountHeaderFalse.environment = '';\n       this.timeout(apiTimeOut);\napi.get('/synergy/v1/embed/accounts?sortBy=desc&orderBy=created_at&limit=15').set(accountHeaderFalse).end((err, res) => {\n  res.should.have.property('status',400);\n  done();\n });",
                "err": {},
                "isRoot": false,
                "uuid": "91cfe50e-f18f-43f1-9aad-7325d158b1aa",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail while getting embed accounts , wrong environment",
                "fullTitle": "Enterprise Synergy APIs should fail while getting embed accounts , wrong environment",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "accountHeaderFalse = _.cloneDeep(accountHeader)\naccountHeaderFalse.org_uid = 'handbox';\n       this.timeout(apiTimeOut);\napi.get('/synergy/v1/embed/accounts?sortBy=desc&orderBy=created_at&limit=15').set(accountHeaderFalse).end((err, res) => {\n  res.should.have.property('status',404);\n  done();\n });",
                "err": {},
                "isRoot": false,
                "uuid": "2745cbce-2644-4a1e-a351-1758c7cbbc12",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail while getting embed accounts , no header",
                "fullTitle": "Enterprise Synergy APIs should fail while getting embed accounts , no header",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n api.get('/synergy/v1/embed/accounts?sortBy=desc&orderBy=created_at&limit=15').end((err, res) => {\n   res.should.have.property('status',401);\n   done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "9f326efe-09e9-4d13-8a37-c307b6c28f6f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail in fetching all solution by consumer id, (WRONG ID)",
                "fullTitle": "Enterprise Synergy APIs should fail in fetching all solution by consumer id, (WRONG ID)",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n api.get('/synergy/v1/embed/consumers/dsjhfkhadf8879/plan').set(accountHeader).end((err, res) => {\n   res.should.have.property('status',400);       \n   done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "3e66eb54-e1fe-45ef-a949-079d0b0792b3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail in fetching all solution versions for given solution, (WRONG ID)",
                "fullTitle": "Enterprise Synergy APIs should fail in fetching all solution versions for given solution, (WRONG ID)",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n           api.get('/synergy/v1/embed/solution/sahjdbjabd87d98/version').set(accountHeader).end((err, res) => {  \nres.should.have.property('status',400);\ndone();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "89e53f99-9284-4f9d-acdc-38d5e59fcf8c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail in fetching a specific version for given solution",
                "fullTitle": "Enterprise Synergy APIs should fail in fetching a specific version for given solution",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n           api.get('/synergy/v1/embed/solution/'+solution.solutionId+'/version/8').set(accountHeader).end((err, res) => {\n res.should.have.property('status',400);\n  done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "20089555-f268-4bad-a21f-ecfffbbfc23e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail in fetching all solution users given solution (WRONG ID)",
                "fullTitle": "Enterprise Synergy APIs should fail in fetching all solution users given solution (WRONG ID)",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n api.get('/synergy/v1/embed/solution/skjdhiusahidu5695sad/users').set(accountHeader).end((err, res) => {\n   res.should.have.property('status',400);    \n   done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "26b94d0b-2957-485a-ac19-b5b961189509",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail to get all the users for a apecific account (WRONG UID)",
                "fullTitle": "Enterprise Synergy APIs should fail to get all the users for a apecific account (WRONG UID)",
                "timedOut": false,
                "duration": 19,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n       api.get('/synergy/v1/embed/accounts/dfs54s6f5sf87f/users').set(accountHeader).end((err, res) => {\n res.should.have.property('status',400);\n done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "303d7a5b-072e-49f7-9b45-b87ff5d38ce1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail in fetching all consumer deployments by consumer id (WRONG ID)",
                "fullTitle": "Enterprise Synergy APIs should fail in fetching all consumer deployments by consumer id (WRONG ID)",
                "timedOut": false,
                "duration": 19,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n api.get('/synergy/v1/embed/consumers/sad64sad6f54854f/deployments').set(accountHeader).end((err, res) => {\n   \n   res.should.have.property('status',400);      \n   done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "0ff7dd4f-65fd-4f29-92bc-8b91dcb8abd4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail in fetching all deployment stats by deployment id",
                "fullTitle": "Enterprise Synergy APIs should fail in fetching all deployment stats by deployment id",
                "timedOut": false,
                "duration": 19,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n api.get('/synergy/v1/embed/deployment/snhdjisahdkd4787d/stats').set(accountHeader).end((err, res) => {\n       \n   res.should.have.property('status',400);\n   done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "f44722c9-5b4c-4c2b-9310-ddc1f47b9035",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail in fetching all consumer stats by consumer id (WRONG ID)",
                "fullTitle": "Enterprise Synergy APIs should fail in fetching all consumer stats by consumer id (WRONG ID)",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n api.get('/synergy/v1/embed/consumers/fds6a4f5644846gds/stats').set(accountHeader).end((err, res) => {\n   \n   res.should.have.property('status',400);    \n   done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "beb82807-b27d-4a1a-b680-c59e85178930",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should add a new account with a plan",
                "fullTitle": "Enterprise Synergy APIs should add a new account with a plan",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n     api.post('/synergy/v1/embed/accounts').set(accountHeader).send({\"name\":synergyData.account.name, \"plan\": synergyData.account.plan}).end((err, res) => {\n res.should.have.property('status',200);\n res.body.should.be.a('object');\n res.body.should.have.property('output');\n res.body.output.should.be.a('object');\n res.body.output.should.have.property('uid');\n res.body.output.uid.should.be.a('string');\n res.body.output.should.have.property('plan');\n res.body.output.plan.should.be.a('object');\n accUid =  res.body.output.uid;\n done();\n });",
                "err": {},
                "isRoot": false,
                "uuid": "d9e6097a-2c16-4c43-8ac7-c0f506499056",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should add a new plan",
                "fullTitle": "Enterprise Synergy APIs should add a new plan",
                "timedOut": false,
                "duration": 30,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n     api.post('/synergy/v1/embed/consumers/plans').set(accountHeader).send({\"name\":synergyData.plan.name,\"plan_code\": synergyData.plan.plan_code,\"type\": synergyData.plan.type,\"transactions\": synergyData.plan.transactions,\"default\": synergyData.plan.default}).end((err, res) => {\n \n res.should.have.property('status',200);\n res.body.should.be.a('object');\n res.body.should.have.property('output');\n res.body.output.should.be.a('object');\n res.body.output.should.have.property('uid');\n res.body.output.uid.should.be.a('string');\n planUid =  res.body.output.uid;\n done();\n });",
                "err": {},
                "isRoot": false,
                "uuid": "25da6deb-12c4-488b-a368-587daa0c43f4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should create a new auth",
                "fullTitle": "Enterprise Synergy APIs should create a new auth",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n api.post('/synergy/v1/auths').set(accountHeader).send(synergyData.auths).end((err, res) => {\n   res.should.have.property('status',200);\n   res.body.should.be.a('object');\n   res.body.should.have.property('output');\n   res.body.output.should.be.a('object');\n   res.body.output.should.have.property('uid');\n   res.body.output.uid.should.be.a('string');\n   //store authId for deletion later\n   authUid = res.body.output.uid;\n   done();\n   });",
                "err": {},
                "isRoot": false,
                "uuid": "9e907ed5-2ac5-4248-9158-159fd6cb4884",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should add specified user by admin to the organization",
                "fullTitle": "Enterprise Synergy APIs should add specified user by admin to the organization",
                "timedOut": false,
                "duration": 30,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n api.post('/synergy/v1/embed/collaborator/add').set(accountHeader).send({\"emails\":[synergyData.miscData.testUser.email]}).end((err, res) => {\n   res.should.have.property('status',200);\n   res.body.should.be.a('object');\n   res.body.should.have.property('output');\n   res.body.output.should.be.a('object');\n   res.body.output.should.have.property('organization_users');\n   res.body.output.organization_users.should.be.a('array');\n   res.body.output.should.have.property('user_uids');\n   res.body.output.user_uids.should.be.a('array');\n   res.body.output.should.have.property('organization');\n   res.body.output.organization.should.be.a('object');\n   //store org user uid for later use\n   orgUserId = res.body.output.organization_users[0].uid;\n   done();\n   });",
                "err": {},
                "isRoot": false,
                "uuid": "d09beaab-a305-4f3b-8429-02340665a4aa",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail to generate the api key for embed (ALREADY EXISTS)",
                "fullTitle": "Enterprise Synergy APIs should fail to generate the api key for embed (ALREADY EXISTS)",
                "timedOut": false,
                "duration": 22,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n     api.post('/synergy/v1/embed/environment/keys/generate').set(accountHeader).send({\"type\":\"api\"}).end((err, res) => {\n res.should.have.property('status',400);\n done();\n });",
                "err": {},
                "isRoot": false,
                "uuid": "a2e2cc5b-cef7-4b8c-bfcd-63cb68936f03",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail to generate the api key for embed (NO PAYLOAD)",
                "fullTitle": "Enterprise Synergy APIs should fail to generate the api key for embed (NO PAYLOAD)",
                "timedOut": false,
                "duration": 22,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n     api.post('/synergy/v1/embed/environment/keys/generate').set(accountHeader).end((err, res) => {\n res.should.have.property('status',400);\n done();\n });",
                "err": {},
                "isRoot": false,
                "uuid": "21dab223-93a5-4728-9fc4-fedcc901a2ac",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail to generate the source verification token for embed (ALREADY EXISTS)",
                "fullTitle": "Enterprise Synergy APIs should fail to generate the source verification token for embed (ALREADY EXISTS)",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post('/synergy/v1/embed/environment/keys/generate').set(accountHeader).send({\"type\":\"source\"}).end((err, res) => {\n  res.should.have.property('status',400);\n  done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "2f841898-57e3-41f0-8a45-0d7202adc0c3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail to publish the solution version to production (WRONG ID)",
                "fullTitle": "Enterprise Synergy APIs should fail to publish the solution version to production (WRONG ID)",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n api.post('/synergy/v1/embed/solution/d98784dbcbhbhs46/deploy').set(accountHeader).send({\"publish\":true}).end((err, res) => {\n res.should.have.property('status',400);\n done();\n });",
                "err": {},
                "isRoot": false,
                "uuid": "daa8e019-32c4-42ff-bedf-3bcca3f573ce",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail to publish the solution version to production (PAYLOAD MISSING)",
                "fullTitle": "Enterprise Synergy APIs should fail to publish the solution version to production (PAYLOAD MISSING)",
                "timedOut": false,
                "duration": 23,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "api.post('/synergy/v1/embed/solution/'+solution.solutionId+'/deploy').set(accountHeader).end((err, res) => {\n      res.should.have.property('status',400);\n      res.body.should.be.a('object');\n      res.body.should.have.property('error');\n      res.body.error.should.be.a('object');\n      res.body.error.should.have.property('message');\n      expect(res.body.error.message).equals('PARAMETER_PUBLISH_MISSING');\n  done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "528f1c80-1679-4dbe-9a60-ac3da2dcd08c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail to publish the solution version to production (UNPUBLISHED SOLUTION)",
                "fullTitle": "Enterprise Synergy APIs should fail to publish the solution version to production (UNPUBLISHED SOLUTION)",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "api.post('/synergy/v1/embed/solution/'+solution.solutionId+'/deploy').set(accountHeader).send({\"publish\":false}).end((err, res) => {\n      res.should.have.property('status',400);\n      res.body.should.be.a('object');\n      res.body.should.have.property('error');\n      res.body.error.should.be.a('object');\n      res.body.error.should.have.property('message');\n      expect(res.body.error.message).equals('SOLUTION_NOT_PUBLISHED');\n  done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "3db5a623-e33f-467f-b17b-980561d89abd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail to add a new account with a plan, (NO PAYLOAD)",
                "fullTitle": "Enterprise Synergy APIs should fail to add a new account with a plan, (NO PAYLOAD)",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post('/synergy/v1/embed/accounts').set(accountHeader).end((err, res) => {\n res.should.have.property('status',400);\n done();\n });",
                "err": {},
                "isRoot": false,
                "uuid": "0a3e1b60-de1b-4f7a-ba51-3a53be53bb68",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail to add a new account with a plan, (USER PLAN)",
                "fullTitle": "Enterprise Synergy APIs should fail to add a new account with a plan, (USER PLAN)",
                "timedOut": false,
                "duration": 22,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post('/synergy/v1/embed/accounts').set(accountHeader).send({\"name\":\"API Account\", \"plan\": \"flaf80a8fb169c2094eb5446\"}).end((err, res) => {\n res.should.have.property('status',400);\n res.body.should.be.a('object');\n res.body.should.have.property('error');\n res.body.error.should.be.a('object');\n res.body.error.should.have.property('message');\n expect(res.body.error.message).equals('USER_PLAN_NOT_ALLOWED_IN_ACCOUNT');\n done();\n });",
                "err": {},
                "isRoot": false,
                "uuid": "46ce7fcc-63b5-4fa2-946c-b8755ed1c024",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail to add a new plan, (INVALID PAYLOAD)",
                "fullTitle": "Enterprise Synergy APIs should fail to add a new plan, (INVALID PAYLOAD)",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post('/synergy/v1/embed/consumers/plans').set(accountHeader).send({\"nme\":synergyData.plan.ame,\"pln_code\": synergyData.plan.plan_code,\"type\": synergyData.plan.type,\"transactions\": synergyData.plan.transactions,\"default\": synergyData.plan.default}).end((err, res) => {       \n res.should.have.property('status',400);\n done();\n });",
                "err": {},
                "isRoot": false,
                "uuid": "f0ee115c-9d5a-41e2-9276-1fd4d7b7bf9f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail to add a new plan, (NO PAYLOAD)",
                "fullTitle": "Enterprise Synergy APIs should fail to add a new plan, (NO PAYLOAD)",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post('/synergy/v1/embed/consumers/plans').set(accountHeader).end((err, res) => {       \n res.should.have.property('status',400);\n done();\n });",
                "err": {},
                "isRoot": false,
                "uuid": "cb57aaa0-b78a-4b68-86c6-a625bca342cf",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail to add a new plan, (PLAN CODE MISSING)",
                "fullTitle": "Enterprise Synergy APIs should fail to add a new plan, (PLAN CODE MISSING)",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let plan = synergyData.plan;\nplan.plan_code = '';\nthis.timeout(apiTimeOut);\napi.post('/synergy/v1/embed/consumers/plans').set(accountHeader).send(plan).end((err, res) => {       \n res.should.have.property('status',400);\n done();\n });",
                "err": {},
                "isRoot": false,
                "uuid": "b150156d-7cec-4006-86cc-baf4870aebfa",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail to add a new plan, (INVALID CONSUMER COUNT NaN)",
                "fullTitle": "Enterprise Synergy APIs should fail to add a new plan, (INVALID CONSUMER COUNT NaN)",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let plan = synergyData.plan;\nplan.consumer_count = 'hello'\nthis.timeout(apiTimeOut);\napi.post('/synergy/v1/embed/consumers/plans').set(accountHeader).send(plan).end((err, res) => {       \n res.should.have.property('status',400);\n done();\n });",
                "err": {},
                "isRoot": false,
                "uuid": "06a10136-cd96-42f1-a6ff-35260ac9c273",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail to add a new plan, (INVALID CONSUMER COUNT < 0)",
                "fullTitle": "Enterprise Synergy APIs should fail to add a new plan, (INVALID CONSUMER COUNT < 0)",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let plan = synergyData.plan;\nplan.consumer_count = -1\nthis.timeout(apiTimeOut);\napi.post('/synergy/v1/embed/consumers/plans').set(accountHeader).send(plan).end((err, res) => {       \n res.should.have.property('status',400);\n done();\n });",
                "err": {},
                "isRoot": false,
                "uuid": "8901d714-b2cf-4d46-95f1-5b7abe70f2b9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail to add a new plan, (INVALID TRANSACTIONS NaN)",
                "fullTitle": "Enterprise Synergy APIs should fail to add a new plan, (INVALID TRANSACTIONS NaN)",
                "timedOut": false,
                "duration": 22,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let plan = synergyData.plan;\nplan.transactions = 'hello'\nthis.timeout(apiTimeOut);\napi.post('/synergy/v1/embed/consumers/plans').set(accountHeader).send(plan).end((err, res) => {       \n res.should.have.property('status',400);\n done();\n });",
                "err": {},
                "isRoot": false,
                "uuid": "76351f19-213f-4234-82b4-244945f9d549",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail to add a new plan, (INVALID TRANSACTIONS < 0)",
                "fullTitle": "Enterprise Synergy APIs should fail to add a new plan, (INVALID TRANSACTIONS < 0)",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let plan = synergyData.plan;\nplan.transactions = -1;\nthis.timeout(apiTimeOut);\napi.post('/synergy/v1/embed/consumers/plans').set(accountHeader).send(plan).end((err, res) => {       \n res.should.have.property('status',400);\n done();\n });",
                "err": {},
                "isRoot": false,
                "uuid": "d44d384d-e4a0-4c6e-a91e-9812449611b8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail to create a new auth, (NO PAYLOAD)",
                "fullTitle": "Enterprise Synergy APIs should fail to create a new auth, (NO PAYLOAD)",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n api.post('/synergy/v1/auths').set(accountHeader).end((err, res) => {\n   res.should.have.property('status',400);\n   done();\n   });",
                "err": {},
                "isRoot": false,
                "uuid": "92ae6edf-bc36-49f4-8ea9-b6758fc63d34",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail to create a new auth, (ALREADY EXISTS)",
                "fullTitle": "Enterprise Synergy APIs should fail to create a new auth, (ALREADY EXISTS)",
                "timedOut": false,
                "duration": 23,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n api.post('/synergy/v1/auths').set(accountHeader).send(synergyData.auths).end((err, res) => {\n   res.should.have.property('status',400);\n   done();\n   });",
                "err": {},
                "isRoot": false,
                "uuid": "2ecc6d75-7a10-433b-a640-a598cb2817c9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail to add specified user by admin to the organization, (ALREADY EXISTS)",
                "fullTitle": "Enterprise Synergy APIs should fail to add specified user by admin to the organization, (ALREADY EXISTS)",
                "timedOut": false,
                "duration": 23,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n api.post('/synergy/v1/embed/collaborator/add').set(accountHeader).send({\"emails\":[synergyData.miscData.testUser.email]}).end((err, res) => {\n   res.should.have.property('status',400);\n   done();\n   });",
                "err": {},
                "isRoot": false,
                "uuid": "7fcfb5bb-8c8b-4056-859d-316989b4e577",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail to add specified user by admin to the organization, (INVALID EMAIL)",
                "fullTitle": "Enterprise Synergy APIs should fail to add specified user by admin to the organization, (INVALID EMAIL)",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n api.post('/synergy/v1/embed/collaborator/add').set(accountHeader).send({\"emails\":[\"ggg@gmail.com\"]}).end((err, res) => {\n   res.should.have.property('status',400);\n   done();\n   });",
                "err": {},
                "isRoot": false,
                "uuid": "91fc6d38-26a5-46dd-961a-aa218b501b8c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail to add specified user by admin to the organization, (NO PAYLOAD)",
                "fullTitle": "Enterprise Synergy APIs should fail to add specified user by admin to the organization, (NO PAYLOAD)",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n api.post('/synergy/v1/embed/collaborator/add').set(accountHeader).end((err, res) => {\n   res.should.have.property('status',500);\n   done();\n   });",
                "err": {},
                "isRoot": false,
                "uuid": "81ae74cc-1cd7-44da-b32b-c44e692c565d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should regenerate the api key for embed",
                "fullTitle": "Enterprise Synergy APIs should regenerate the api key for embed",
                "timedOut": false,
                "duration": 22,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n     api.put('/synergy/v1/embed/environment/key/regenerate').set(accountHeader).send({\"type\":\"api\"}).end((err, res) => {\n res.should.have.property('status',200);\n res.body.should.be.a('object');\n res.body.should.have.property('output');\n res.body.output.should.be.a('object');\n res.body.output.should.have.property('key');\n res.body.output.key.should.be.a('string');\n global.token = res.body.output.key;\n done();\n });",
                "err": {},
                "isRoot": false,
                "uuid": "a69cd804-20ac-4642-8aa6-862db6a969bf",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should regenerate the api key for embed",
                "fullTitle": "Enterprise Synergy APIs should regenerate the api key for embed",
                "timedOut": false,
                "duration": 23,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n     api.put('/synergy/v1/embed/environment/key/regenerate').set(accountHeader).send({\"type\":\"master_token\"}).end((err, res) => {\n res.should.have.property('status',200);\n res.body.should.be.a('object');\n res.body.should.have.property('output');\n res.body.output.should.be.a('object');\n res.body.output.should.have.property('key');\n res.body.output.key.should.be.a('string');\n global.master_token = res.body.output.key;\n done();\n });",
                "err": {},
                "isRoot": false,
                "uuid": "04af4ec2-16b2-41d4-aea1-dcaf414d40c7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should regenerate the source verification token for embed",
                "fullTitle": "Enterprise Synergy APIs should regenerate the source verification token for embed",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put('/synergy/v1/embed/environment/key/regenerate').set(accountHeader).send({\"type\":\"source\"}).end((err, res) => {\n  res.should.have.property('status',200);\n  res.body.should.be.a('object');\n  res.body.should.have.property('output');\n  res.body.output.should.be.a('object');\n  res.body.output.should.have.property('key');\n  res.body.output.key.should.be.a('string');\n  done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "6068adaa-2e3b-4c8b-9876-ec6bc16e691a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should insert the session_timeout for embed",
                "fullTitle": "Enterprise Synergy APIs should insert the session_timeout for embed",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "api.put('/synergy/v1/embed/environment/session').set(accountHeader).send({\"session_timeout\": {\"idle\":1234, \"absolute\":5000}}).end((err, res) => {\n  res.should.have.property('status',200);\n  res.body.should.be.a('object');\n  res.body.should.have.property('output');\n  res.body.output.should.be.a('object');\n  res.body.output.should.have.property('session_timeout');\n  res.body.output.session_timeout.should.be.a('object');\n  done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "4cf57d01-efb3-4ed1-a239-bf31510a816d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should insert the auth_domain url for embed",
                "fullTitle": "Enterprise Synergy APIs should insert the auth_domain url for embed",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "api.put('/synergy/v1/embed/environment/auth/domain').set(accountHeader).send({\"auth_domain\": \"ggg.com\" }).end((err, res) => {\n  res.should.have.property('status',200);\n  res.body.should.be.a('object');\n  res.body.should.have.property('output');\n  res.body.output.should.be.a('object');\n  res.body.output.should.have.property('auth_domain');\n  expect(res.body.output.auth_domain).equals('ggg.com');\n  done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "05e3f14a-ee44-4d17-b398-8f3066db4392",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should insert the auth_domain url for embed",
                "fullTitle": "Enterprise Synergy APIs should insert the auth_domain url for embed",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "api.put('/synergy/v1/embed/environment/trigger/domain').set(accountHeader).send({\"trigger_domain\": \"ggg.com\" }).end((err, res) => {\n  res.should.have.property('status',200);\n  res.body.should.be.a('object');\n  res.body.should.have.property('output');\n  res.body.output.should.be.a('object');\n  res.body.output.should.have.property('trigger_domain');\n  expect(res.body.output.trigger_domain).equals('ggg.com');\n  done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "036db766-f1dd-4af2-b43e-6abedd7cdd4d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change the solution published state to OFF",
                "fullTitle": "Enterprise Synergy APIs should change the solution published state to OFF",
                "timedOut": false,
                "duration": 26,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put('/synergy/v1/embed/solution/'+solution.solutionId+'/status').set(accountHeader).send({\"status\":false,\"version\":1}).end((err, res) => {\n  res.should.have.property('status',200);\n  res.body.should.be.a('object');\n  res.body.should.have.property('output');\n  res.body.output.should.be.a('object');\n  res.body.output.should.have.property('uid');\n  res.body.output.uid.should.be.a('string');\n  res.body.output.should.have.property('environment');\n  res.body.output.environment.should.be.a('object');\n  res.body.output.environment.should.have.property('project_params');\n  res.body.output.environment.project_params.should.be.a('array');\n  done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "86adea1b-1aea-4a5b-8c2f-f8891c15d4df",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should add an user to an embed account, (USER DOES NOT EXIST)",
                "fullTitle": "Enterprise Synergy APIs should add an user to an embed account, (USER DOES NOT EXIST)",
                "timedOut": false,
                "duration": 93,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "api.put('/synergy/v1/embed/consumers/adduser').set(accountHeader).send({\"email\":\"bot@built.io\", \"account\":accountId}).end((err, res) => {    \n // console.log('res = ', res.body);\n  res.should.have.property('status',200);\n  res.body.should.be.a('object');\n  res.body.should.have.property('output');\n  res.body.output.should.be.a('object');\n  res.body.output.should.have.property('user');\n  res.body.output.user.should.be.a('object');\n  done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "eef680c0-7b00-45e4-9a2f-26e67086b131",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should add an user to an embed user plan",
                "fullTitle": "Enterprise Synergy APIs should add an user to an embed user plan",
                "timedOut": false,
                "duration": 88,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "api.put('/synergy/v1/embed/consumers/adduser').set(accountHeader).send({\"email\":\"bot2@built.io\", \"plan\": planId}).end((err, res) => {    \n  res.should.have.property('status',200);\n  res.body.should.be.a('object');\n  res.body.should.have.property('output');\n  res.body.output.should.be.a('object');\n  res.body.output.should.have.property('user');\n  res.body.output.user.should.be.a('object');\n  done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "d32eb85f-5ccd-4da3-a96d-878594aefe93",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should add an user to a default plan, (USER DOES NOT EXIST)",
                "fullTitle": "Enterprise Synergy APIs should add an user to a default plan, (USER DOES NOT EXIST)",
                "timedOut": false,
                "duration": 90,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "api.put('/synergy/v1/embed/consumers/adduser').set(accountHeader).send({\"email\":\"bot3@built.io\"}).end((err, res) => {    \n  res.should.have.property('status',200);\n  res.body.should.be.a('object');\n  res.body.should.have.property('output');\n  res.body.output.should.be.a('object');\n  res.body.output.should.have.property('user');\n  res.body.output.user.should.be.a('object');\n  done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "239dff86-2467-4207-a773-14b3b1da00fe",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change the solution published state to ON",
                "fullTitle": "Enterprise Synergy APIs should change the solution published state to ON",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put('/synergy/v1/embed/solution/'+solution.solutionId+'/status').set(accountHeader).send({\"status\":true,\"version\":1}).end((err, res) => {\n  res.should.have.property('status',200);\n  res.body.should.be.a('object');\n  res.body.should.have.property('output');\n  res.body.output.should.be.a('object');\n  res.body.output.should.have.property('uid');\n  res.body.output.uid.should.be.a('string');\n  res.body.output.should.have.property('environment');\n  res.body.output.environment.should.be.a('object');\n  res.body.output.environment.should.have.property('project_params');\n  res.body.output.environment.project_params.should.be.a('array');\n  done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "4bdf4f0f-8dce-4c79-8d04-93ef7281aa88",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should disable the google auth via embed admin",
                "fullTitle": "Enterprise Synergy APIs should disable the google auth via embed admin",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put('/synergy/v1/embed/auths/'+synergyData.miscData.google+'/status').set(accountHeader).send({\"status\":false}).end((err, res) => {\n  res.should.have.property('status',200);\n  res.body.should.be.a('object');\n  res.body.should.have.property('output');\n  res.body.output.should.be.a('object');\n  res.body.output.should.have.property('uid');\n  res.body.output.uid.should.be.a('string');\n  res.body.output.should.have.property('updated_at');\n  res.body.output.updated_at.should.be.a('string');\n  res.body.output.should.have.property('name');\n  res.body.output.name.should.be.a('string');\n  done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "74510f9e-fd6d-45a8-9f44-cf161bf70e23",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should enable the google auth via embed admin",
                "fullTitle": "Enterprise Synergy APIs should enable the google auth via embed admin",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put('/synergy/v1/embed/auths/'+synergyData.miscData.google+'/status').set(accountHeader).send({\"status\":true}).end((err, res) => {\n  res.should.have.property('status',200);\n  res.body.should.be.a('object');\n  res.body.should.have.property('output');\n  res.body.output.should.be.a('object');\n  res.body.output.should.have.property('uid');\n  res.body.output.uid.should.be.a('string');\n  res.body.output.should.have.property('updated_at');\n  res.body.output.updated_at.should.be.a('string');\n  res.body.output.should.have.property('name');\n  res.body.output.name.should.be.a('string');\n  done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "4ce1a953-c24a-4d4c-91d5-1dc0d578dad9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change the plan for target consumer",
                "fullTitle": "Enterprise Synergy APIs should change the plan for target consumer",
                "timedOut": false,
                "duration": 26,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put('/synergy/v1/embed/consumers/'+synergyData.miscData.consumer.id+'/plan').set(accountHeader).send({\"plan\":synergyData.miscData.plan}).end((err, res) => {\n  res.should.have.property('status',200);\n  res.body.should.be.a('object');\n  res.body.should.have.property('output');\n  res.body.output.should.be.a('object');\n  res.body.output.should.have.property('uid');\n  res.body.output.uid.should.be.a('string');\n  expect(res.body.output.uid).eql(synergyData.miscData.plan);\n  done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "b056aae4-eaac-4234-97b6-8649928dd889",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change general plan by plan id",
                "fullTitle": "Enterprise Synergy APIs should change general plan by plan id",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n    api.put('/synergy/v1/embed/consumers/plans/'+planUid).set(accountHeader).send({\"name\":\"Test Plan\",\"default\":false,\"transactions\":10}).end((err, res) => {\nres.should.have.property('status',200);\nres.body.should.be.a('object');\nres.body.should.have.property('output');\nres.body.output.should.be.a('object');\nres.body.output.should.have.property('uid');\nres.body.output.uid.should.be.a('string');\nexpect(res.body.output.uid).eql(planUid);\ndone();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "651de7b3-0b9a-441b-a3f6-dffd0272e8dd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change the plan for target account",
                "fullTitle": "Enterprise Synergy APIs should change the plan for target account",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n      api.put('/synergy/v1/embed/accounts/'+accUid).set(accountHeader).send({\"name\": synergyData.account.name,\"plan\":synergyData.account.plan2}).end((err, res) => {\nres.should.have.property('status',200);\nres.body.should.be.a('object');\nres.body.should.have.property('output');\nres.body.output.should.be.a('object');\nres.body.output.should.have.property('uid');\nres.body.output.uid.should.be.a('string');\nres.body.output.should.have.property('plan');\nres.body.output.plan.should.be.a('object');\n      done();\n      });",
                "err": {},
                "isRoot": false,
                "uuid": "f1cedf2b-d20f-4b5c-9397-3c560053648a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail to regenerate the api key for embed (ALREADY EXISTS)",
                "fullTitle": "Enterprise Synergy APIs should fail to regenerate the api key for embed (ALREADY EXISTS)",
                "timedOut": false,
                "duration": 23,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n         api.put('/synergy/v1/embed/environment/key/regenerate').set(accountHeader).send({\"type\":\"xx\"}).end((err, res) => {\n  \n res.should.have.property('status',400);\n done();\n });",
                "err": {},
                "isRoot": false,
                "uuid": "bef6003a-c7f6-45d0-b6f7-8f1bd64638f4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail to insert the session_timeout for embed, (INVALID KEY)",
                "fullTitle": "Enterprise Synergy APIs should fail to insert the session_timeout for embed, (INVALID KEY)",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "api.put('/synergy/v1/embed/environment/session').set(accountHeader).send({\"session\":1234}).end((err, res) => {\n  res.should.have.property('status',400);\n  res.body.should.be.a('object');\n  res.body.should.have.property('error');\n  res.body.error.should.be.a('object');\n  res.body.error.should.have.property('message');\n  expect(res.body.error.message).equals('INVALID_BODY');\n  done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "63f64746-90f3-4a0a-9cee-9daf9a3b93f0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail to insert the session_timeout for embed, (INVALID KEY TYPE)",
                "fullTitle": "Enterprise Synergy APIs should fail to insert the session_timeout for embed, (INVALID KEY TYPE)",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "api.put('/synergy/v1/embed/environment/session').set(accountHeader).send({\"session_timeout\": {\"idle\":true, \"absolute\":5000}}).end((err, res) => {\n  res.should.have.property('status',400);\n  res.body.should.be.a('object');\n  res.body.should.have.property('error');\n  res.body.error.should.be.a('object');\n  res.body.error.should.have.property('message');\n  expect(res.body.error.message).equals('INVALID_TYPE_OF_PARAMETER');\n  done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "e892e979-fb7e-43e4-8008-a2cc7adc1afb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail to insert the session_timeout for embed, (Idle timeout > than Absolute timeout)",
                "fullTitle": "Enterprise Synergy APIs should fail to insert the session_timeout for embed, (Idle timeout > than Absolute timeout)",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "api.put('/synergy/v1/embed/environment/session').set(accountHeader).send({\"session_timeout\": {\"idle\":7000, \"absolute\":5000}}).end((err, res) => {\n  res.should.have.property('status',400);\n  res.body.should.be.a('object');\n  res.body.should.have.property('error');\n  res.body.error.should.be.a('object');\n  res.body.error.should.have.property('message');\n  expect(res.body.error.message).equals('IDLE_TIMEOUT_SHOULD_BE_LESSER_THAN_EQUAL_TO_ABSOLUTE_TIMEOUT');\n  done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "1a7d9224-9b27-4396-a2a5-9b3c0744a57c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail to insert the auth domain url for embed, (INVALID KEY)",
                "fullTitle": "Enterprise Synergy APIs should fail to insert the auth domain url for embed, (INVALID KEY)",
                "timedOut": false,
                "duration": 22,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "api.put('/synergy/v1/embed/environment/auth/domain').set(accountHeader).send({\"session\":1234}).end((err, res) => {\n  res.should.have.property('status',400);\n  res.body.should.be.a('object');\n  res.body.should.have.property('error');\n  res.body.error.should.be.a('object');\n  res.body.error.should.have.property('message');\n  expect(res.body.error.message).equals('INVALID_BODY');\n  done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "a9baa1b9-79bd-4b64-8c0b-1f88c643395f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail to insert the auth domain url for embed, (EMPTY PAYLOAD)",
                "fullTitle": "Enterprise Synergy APIs should fail to insert the auth domain url for embed, (EMPTY PAYLOAD)",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "api.put('/synergy/v1/embed/environment/auth/domain').set(accountHeader).send({}).end((err, res) => {\n  res.should.have.property('status',400);\n  res.body.should.be.a('object');\n  res.body.should.have.property('error');\n  res.body.error.should.be.a('object');\n  res.body.error.should.have.property('message');\n  expect(res.body.error.message).equals('INVALID_BODY');\n  done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "a2b62943-06de-4fee-96c7-ecb9e2bc18f7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail to insert the trigger domain url for embed, (INVALID KEY)",
                "fullTitle": "Enterprise Synergy APIs should fail to insert the trigger domain url for embed, (INVALID KEY)",
                "timedOut": false,
                "duration": 22,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "api.put('/synergy/v1/embed/environment/trigger/domain').set(accountHeader).send({\"auth_domain\":1234}).end((err, res) => {\n  res.should.have.property('status',400);\n  res.body.should.be.a('object');\n  res.body.should.have.property('error');\n  res.body.error.should.be.a('object');\n  res.body.error.should.have.property('message');\n  expect(res.body.error.message).equals('INVALID_BODY');\n  done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "9fc257d4-f99b-45a8-ac63-3665c9efc1fa",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail to insert the trigger domain url for embed, (EMPTY PAYLOAD)",
                "fullTitle": "Enterprise Synergy APIs should fail to insert the trigger domain url for embed, (EMPTY PAYLOAD)",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "api.put('/synergy/v1/embed/environment/trigger/domain').set(accountHeader).send({}).end((err, res) => {\n  res.should.have.property('status',400);\n  res.body.should.be.a('object');\n  res.body.should.have.property('error');\n  res.body.error.should.be.a('object');\n  res.body.error.should.have.property('message');\n  expect(res.body.error.message).equals('INVALID_BODY');\n  done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "b45f85c1-d47b-4386-96b3-105b4cbb2a2a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail to update the specified solution , (WRONG UID)",
                "fullTitle": "Enterprise Synergy APIs should fail to update the specified solution , (WRONG UID)",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n   api.put('/synergy/v1/embed/solution/sadjhsakhkd').set(accountHeader).send(synergyData.solution.data).end((err, res) => {\nres.should.have.property('status',400);\nres.body.should.be.a('object');\n   done();\n   });",
                "err": {},
                "isRoot": false,
                "uuid": "d0e0d2a7-63f0-440c-a152-f70af2b5c9a1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail to update the specified solution , (NO UID)",
                "fullTitle": "Enterprise Synergy APIs should fail to update the specified solution , (NO UID)",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n   api.put('/synergy/v1/embed/solution/').set(accountHeader).send(synergyData.solution.data).end((err, res) => {\nres.should.have.property('status',404);\nres.body.should.be.a('object');\n   done();\n   });",
                "err": {},
                "isRoot": false,
                "uuid": "fa2cdadc-428d-4482-a566-ef4f79483154",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail to update the specified solution , (NO PAYLOAD)",
                "fullTitle": "Enterprise Synergy APIs should fail to update the specified solution , (NO PAYLOAD)",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n   api.put('/synergy/v1/embed/solution/'+solution.solutionId).set(accountHeader).end((err, res) => {\nres.should.have.property('status',400);\nres.body.should.be.a('object');\n   done();\n   });",
                "err": {},
                "isRoot": false,
                "uuid": "3f6adc97-fea2-4222-ad6a-d4c5dbba7d5e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail to update the specified solution , (INVALID PAYLOAD)",
                "fullTitle": "Enterprise Synergy APIs should fail to update the specified solution , (INVALID PAYLOAD)",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n   api.put('/synergy/v1/embed/solution/'+solution.solutionId).set(accountHeader).send({\"keys\":\"hello\"}).end((err, res) => {\nres.should.have.property('status',400);\nres.body.should.be.a('object');\n   done();\n   });",
                "err": {},
                "isRoot": false,
                "uuid": "9462d4b1-a0e3-4608-80b7-9eb24ee455f6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail to change the solution published state",
                "fullTitle": "Enterprise Synergy APIs should fail to change the solution published state",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put('/synergy/v1/embed/solution/sxnmoisakj47as987sa4d/status').set(accountHeader).send({\"status\":true,\"version\":1}).end((err, res) => {\n  res.should.have.property('status',400);\n  done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "5d04d23c-55ec-41f6-8c07-b36e2670a645",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should  fail to change the solution published state (INVALID PAYLOAD)",
                "fullTitle": "Enterprise Synergy APIs should  fail to change the solution published state (INVALID PAYLOAD)",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put('/synergy/v1/embed/solution/'+solution.solutionId+'/status').set(accountHeader).send({\"status\":false}).end((err, res) => {\n  res.should.have.property('status',400);\n  done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "8a585a01-af3a-4aae-b0e9-41aceeba9b99",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail to change the solution published state (NO PAYLOAD)",
                "fullTitle": "Enterprise Synergy APIs should fail to change the solution published state (NO PAYLOAD)",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put('/synergy/v1/embed/solution/'+solution.solutionId+'/status').set(accountHeader).end((err, res) => {\n  res.should.have.property('status',400);\n  done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "74abe061-e2d0-4f89-9521-6179ec9a7e72",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail to toggle auth via embed admin, (WRONG UID)",
                "fullTitle": "Enterprise Synergy APIs should fail to toggle auth via embed admin, (WRONG UID)",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put('/synergy/v1/embed/auths/skbgdcjahs98798/status').set(accountHeader).send({\"status\":false}).end((err, res) => {\n  res.should.have.property('status',400);\n  done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "407dea36-a56d-4eb6-993b-5d0ea1f42c0c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail to toggle auth via embed admin, (NO PAYLOAD)",
                "fullTitle": "Enterprise Synergy APIs should fail to toggle auth via embed admin, (NO PAYLOAD)",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put('/synergy/v1/embed/auths/'+synergyData.miscData.google+'/status').set(accountHeader).end((err, res) => {\n res.should.have.property('status',400);\n done();\n });",
                "err": {},
                "isRoot": false,
                "uuid": "97788ad8-15d3-4467-9b33-8883950f24ab",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail to change the plan for target consumer,(INVALID ID)",
                "fullTitle": "Enterprise Synergy APIs should fail to change the plan for target consumer,(INVALID ID)",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put('/synergy/v1/embed/consumers/shjdbhjsbdjh888/plan').set(accountHeader).send({\"plan\":synergyData.miscData.plan}).end((err, res) => {\n  res.should.have.property('status',400);\n  done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "aa7aec08-2bae-481a-a487-2d4eb552e04b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail to change the plan for target consumer, (INVALID PAYLOAD)",
                "fullTitle": "Enterprise Synergy APIs should fail to change the plan for target consumer, (INVALID PAYLOAD)",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put('/synergy/v1/embed/consumers/'+synergyData.miscData.consumer.id+'/plan').set(accountHeader).send({\"plan\":\"sds\"}).end((err, res) => {\n  res.should.have.property('status',400);\n  done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "c6698d04-ac65-4075-976a-b28e7a0690e5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail to change the plan for target consumer, (NO PAYLOAD)",
                "fullTitle": "Enterprise Synergy APIs should fail to change the plan for target consumer, (NO PAYLOAD)",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.put('/synergy/v1/embed/consumers/'+synergyData.miscData.consumer.id+'/plan').set(accountHeader).end((err, res) => {\n  res.should.have.property('status',400);\n  done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "98de5520-87d6-4d5a-9b8a-3f5749383a2c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail to change general plan by plan id (INVALID ID)",
                "fullTitle": "Enterprise Synergy APIs should fail to change general plan by plan id (INVALID ID)",
                "timedOut": false,
                "duration": 22,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n    api.put('/synergy/v1/embed/consumers/plans/kbdfhkjhfikj98+9df54').set(accountHeader).send({\"name\":\"Test Plan\",\"default\":false,\"transactions\":10}).end((err, res) => {\nres.should.have.property('status', 400);\ndone();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "e6c87eab-8c44-46f3-80e1-c76c99edfd87",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail to change the plan for target account, (INVALID ID)",
                "fullTitle": "Enterprise Synergy APIs should fail to change the plan for target account, (INVALID ID)",
                "timedOut": false,
                "duration": 22,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n   api.put('/synergy/v1/embed/accounts/sanbdjsahdhsa').set(accountHeader).send({\"name\": synergyData.account.name,\"plan\":synergyData.account.plan2}).end((err, res) => {\nres.should.have.property('status',400);\n   done();\n   });",
                "err": {},
                "isRoot": false,
                "uuid": "d7a1a6a3-71cb-44a1-b6de-c856b52d489f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail to change the plan for target account, (INVALID PAYLOAD)",
                "fullTitle": "Enterprise Synergy APIs should fail to change the plan for target account, (INVALID PAYLOAD)",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n   api.put('/synergy/v1/embed/accounts/'+accUid).set(accountHeader).send({\"name\": \"Hello\"}).end((err, res) => {\nres.should.have.property('status',400);\n   done();\n   });",
                "err": {},
                "isRoot": false,
                "uuid": "d21c4848-f1e2-49bb-8efb-c298b4609939",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail to add an user to an embed account",
                "fullTitle": "Enterprise Synergy APIs should fail to add an user to an embed account",
                "timedOut": false,
                "duration": 23,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "api.put('/synergy/v1/embed/consumers/adduser').set(accountHeader).send({\"email\":\"bot@built.io\", \"account\": accountId}).end((err, res) => {    \n  res.should.have.property('status',400);\n  res.body.should.be.a('object');\n  res.body.should.have.property('error');\n  res.body.error.should.be.a('object');\n  res.body.error.should.have.property('message');\n  expect(res.body.error.message).equals('USER_ALREADY_EXISTS_IN_AN_ACCOUNT');\n  done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "ecda903c-fd3b-4daf-b606-7c23af994bae",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail to add an user to an embed account",
                "fullTitle": "Enterprise Synergy APIs should fail to add an user to an embed account",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "api.put('/synergy/v1/embed/consumers/adduser').set(accountHeader).send({\"email\":\"bot@built.io\", \"plan\": planId}).end((err, res) => {    \n  res.should.have.property('status',400);     \n  res.body.should.be.a('object');\n  res.body.should.have.property('error');\n  res.body.error.should.be.a('object');\n  res.body.error.should.have.property('message');\n  expect(res.body.error.message).equals('USER_ALREADY_ADDED_TO_A_PLAN');\n  done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "37f8aee0-5cd6-4354-ba3e-7867e035bcd9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail to add an user to an embed account",
                "fullTitle": "Enterprise Synergy APIs should fail to add an user to an embed account",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "api.put('/synergy/v1/embed/consumers/adduser').set(accountHeader).send({\"email\":\"bot2@built.io\", \"account\": accountId}).end((err, res) => {    \n  res.should.have.property('status',400);     \n  res.body.should.be.a('object');\n  res.body.should.have.property('error');\n  res.body.error.should.be.a('object');\n  res.body.error.should.have.property('message');\n  expect(res.body.error.message).equals('USER_ALREADY_ADDED_TO_A_PLAN');\n  done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "3f5cdc51-7283-46d3-a871-2b42f5fae734",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail to add an user to an embed account",
                "fullTitle": "Enterprise Synergy APIs should fail to add an user to an embed account",
                "timedOut": false,
                "duration": 23,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "api.put('/synergy/v1/embed/consumers/adduser').set(accountHeader).send({\"email\":\"bot2@built.io\", \"plan\": planId}).end((err, res) => {    \n  res.should.have.property('status',400);     \n  res.body.should.be.a('object');\n  res.body.should.have.property('error');\n  res.body.error.should.be.a('object');\n  res.body.error.should.have.property('message');\n  expect(res.body.error.message).equals('USER_ALREADY_ADDED_TO_A_PLAN');\n  done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "9b335c73-b9e0-4e81-a440-bb0650fbaf58",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail add an user to an embed consumer, (WRONG PLAN CODE)",
                "fullTitle": "Enterprise Synergy APIs should fail add an user to an embed consumer, (WRONG PLAN CODE)",
                "timedOut": false,
                "duration": 26,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "api.put('/synergy/v1/embed/consumers/adduser').set(accountHeader).send({\"email\":\"bot@built.io\", \"plan\":\"acc\"}).end((err, res) => {    \n  res.should.have.property('status',400);\n  res.body.should.be.a('object');\n  res.body.should.have.property('error');\n  res.body.error.should.be.a('object');\n  res.body.error.should.have.property('message');\n  expect(res.body.error.message).equals('INVALID_PLAN');\n  done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "de00cd96-2c7b-4395-97ca-4f427bdb367d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail add an user to an embed consumer, (WRONG ACCOUNT ID)",
                "fullTitle": "Enterprise Synergy APIs should fail add an user to an embed consumer, (WRONG ACCOUNT ID)",
                "timedOut": false,
                "duration": 22,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "api.put('/synergy/v1/embed/consumers/adduser').set(accountHeader).send({\"email\":\"bot@built.io\", \"account\": 'asdasdsda'}).end((err, res) => {    \n  res.should.have.property('status',400);\n  res.body.should.be.a('object');\n  res.body.should.have.property('error');\n  res.body.error.should.be.a('object');\n  res.body.error.should.have.property('message');\n  expect(res.body.error.message).equals('INVALID_ACCOUNT');\n  done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "77a6c5c3-63b7-4c22-a274-7dcdb0e87901",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail add an user to an embed consumer, (WRONG ACCOUNT ID)",
                "fullTitle": "Enterprise Synergy APIs should fail add an user to an embed consumer, (WRONG ACCOUNT ID)",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "api.put('/synergy/v1/embed/consumers/adduser').set(accountHeader).send({\"email\":\"bot34@built.io\", \"account\": accountId2}).end((err, res) => {    \n  res.should.have.property('status',400);\n  res.body.should.be.a('object');\n  res.body.should.have.property('error');\n  res.body.error.should.be.a('object');\n  res.body.error.should.have.property('message');\n  expect(res.body.error.message).equals('ACCOUNT_HAS_NO_PLAN');\n  done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "77c3620d-3ca8-4f20-a4d7-5ee2fd64065d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail to change the plan for target account, (NO PAYLOAD)",
                "fullTitle": "Enterprise Synergy APIs should fail to change the plan for target account, (NO PAYLOAD)",
                "timedOut": false,
                "duration": 22,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n   api.put('/synergy/v1/embed/accounts/'+accUid).set(accountHeader).end((err, res) => {\n    res.should.have.property('status',400);\n   done();\n   });",
                "err": {},
                "isRoot": false,
                "uuid": "b4df5c9d-6470-444b-93d3-b4ec47dba804",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should remove specified user by admin from organization",
                "fullTitle": "Enterprise Synergy APIs should remove specified user by admin from organization",
                "timedOut": false,
                "duration": 26,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n api.delete('/enterprise/v1/organizations/'+synergyData.miscData.testOrgId+'/users/'+orgUserId).set(accountHeader).end((err, res) => {\n  \n   res.should.have.property('status',200);\n   res.body.should.be.a('object');\n   res.body.should.have.property('output');\n   res.body.output.should.be.a('object');\n   res.body.output.should.have.property('message');\n   res.body.output.message.should.be.a('string');\n   expect(res.body.output.message).eql('Organization user removed.');\n   done();\n   });",
                "err": {},
                "isRoot": false,
                "uuid": "44c481bd-58ae-49d1-89fc-e504cd778069",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should remove the account specified",
                "fullTitle": "Enterprise Synergy APIs should remove the account specified",
                "timedOut": false,
                "duration": 22,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n api.delete('/synergy/v1/embed/accounts/'+accUid).set(accountHeader).end((err, res) => {\n  res.should.have.property('status',200);\n  res.body.should.be.a('object');\n  res.body.should.have.property('output');\n  res.body.output.should.be.a('object');\n  res.body.output.should.have.property('message');\n  res.body.output.message.should.be.a('string');\n  expect(res.body.output.message).equals(\"ACCOUNT_DELETE_SUCCESS\");\n done();\n });",
                "err": {},
                "isRoot": false,
                "uuid": "10207c6a-bad1-4afb-9351-bc3b9f3fdae0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should remove the specified plan",
                "fullTitle": "Enterprise Synergy APIs should remove the specified plan",
                "timedOut": false,
                "duration": 22,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n api.delete('/synergy/v1/embed/consumers/plans/'+planUid).set(accountHeader).end((err, res) => {\n  res.should.have.property('status',200);\n  res.body.should.be.a('object');\n  res.body.should.have.property('output');\n  res.body.output.should.be.a('object');\n  res.body.output.should.have.property('message');\n  res.body.output.message.should.be.a('string');\n  expect(res.body.output.message).equals(\"PLAN_DELETE_SUCCESS\");\n done();\n });",
                "err": {},
                "isRoot": false,
                "uuid": "b0e8a9aa-b4ab-4763-ba15-534a368c6c45",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should delete the specified auth",
                "fullTitle": "Enterprise Synergy APIs should delete the specified auth",
                "timedOut": false,
                "duration": 23,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n api.delete('/synergy/v1/embed/auths/'+authUid).set(accountHeader).end((err, res) => {\n  res.should.have.property('status',200);\n  res.body.should.be.a('object');\n  res.body.should.have.property('output');\n  res.body.output.should.be.a('object');\n  res.body.output.should.have.property('message');\n  res.body.output.message.should.be.a('string');\n  expect(res.body.output.message).equals(\"AUTH_DELETE_SUCCESS\");\n done();\n });",
                "err": {},
                "isRoot": false,
                "uuid": "9cc445ee-062f-4f4a-951b-3b1ceb216136",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should delete the specified solution",
                "fullTitle": "Enterprise Synergy APIs should delete the specified solution",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n api.delete('/synergy/v1/embed/solution/'+solution.solutionId).set(accountHeader).end((err, res) => {\n  res.should.have.property('status',200);\n  res.body.should.be.a('object');\n  res.body.should.have.property('output');\n  res.body.output.should.be.a('object');\n  res.body.output.should.have.property('message');\n  res.body.output.message.should.be.a('string');\n  expect(res.body.output.message).equals(\"SOLUTION_DELETE_SUCCESS\");\n done();\n });",
                "err": {},
                "isRoot": false,
                "uuid": "2fb53237-2fe5-4328-86eb-485cd855b3c2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail in deleting the specified auth , (wrong uid)",
                "fullTitle": "Enterprise Synergy APIs should fail in deleting the specified auth , (wrong uid)",
                "timedOut": false,
                "duration": 23,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n api.delete('/synergy/v1/embed/auths/'+'kdnbiahdds').set(accountHeader).end((err, res) => {\n  res.should.have.property('status', 400);\n done();\n });",
                "err": {},
                "isRoot": false,
                "uuid": "8e44cfd7-d839-4f25-be75-9562b4adbb26",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail in deleting the specified auth , (no uid)",
                "fullTitle": "Enterprise Synergy APIs should fail in deleting the specified auth , (no uid)",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n api.delete('/synergy/v1/embed/auths/').set(accountHeader).end((err, res) => {\n  res.should.have.property('status',404);\n done();\n });",
                "err": {},
                "isRoot": false,
                "uuid": "7d27f3ef-b684-451a-85f9-73c440e719c0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail to remove the account specified, (WRONG UID)",
                "fullTitle": "Enterprise Synergy APIs should fail to remove the account specified, (WRONG UID)",
                "timedOut": false,
                "duration": 22,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n api.delete('/synergy/v1/embed/accounts/s6ds6df87d5f4').set(accountHeader).end((err, res) => {\nres.should.have.property('status',400);\n done();\n });",
                "err": {},
                "isRoot": false,
                "uuid": "a46f201b-9941-4971-a597-a901620b9096",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should remove the account specified, (NO UID)",
                "fullTitle": "Enterprise Synergy APIs should remove the account specified, (NO UID)",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n api.delete('/synergy/v1/embed/accounts/').set(accountHeader).end((err, res) => {\nres.should.have.property('status',404);\n   done();\n   });",
                "err": {},
                "isRoot": false,
                "uuid": "fdfd6f90-bae3-4bf9-90d8-48dffef7c170",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail to remove the specified plan, (WRONG UID)",
                "fullTitle": "Enterprise Synergy APIs should fail to remove the specified plan, (WRONG UID)",
                "timedOut": false,
                "duration": 23,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n api.delete('/synergy/v1/embed/consumers/plans/kjfahjfbkjahui11').set(accountHeader).end((err, res) => {\n  res.should.have.property('status',400);\n done();\n });",
                "err": {},
                "isRoot": false,
                "uuid": "bca4e518-3135-4c14-b2e8-f4690bb45f82",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should remove the specified plan",
                "fullTitle": "Enterprise Synergy APIs should remove the specified plan",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n api.delete('/synergy/v1/embed/consumers/plans/').set(accountHeader).end((err, res) => {\n  res.should.have.property('status',404);\n done();\n });",
                "err": {},
                "isRoot": false,
                "uuid": "f03aacce-b0a3-4eed-bc5b-2b74cc721d0a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail to delete the specified solution, (WRONG UID)",
                "fullTitle": "Enterprise Synergy APIs should fail to delete the specified solution, (WRONG UID)",
                "timedOut": false,
                "duration": 22,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n api.delete('/synergy/v1/embed/solution/jsadhjgdi3146548').set(accountHeader).end((err, res) => {\n  res.should.have.property('status',400);\n done();\n });",
                "err": {},
                "isRoot": false,
                "uuid": "70f46700-50ec-4ea5-9451-9cc4c71acb3f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail to delete the specified solution, (NO UID)",
                "fullTitle": "Enterprise Synergy APIs should fail to delete the specified solution, (NO UID)",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\n api.delete('/synergy/v1/embed/solution/').set(accountHeader).end((err, res) => {\n  res.should.have.property('status',404);\n done();\n });",
                "err": {},
                "isRoot": false,
                "uuid": "21100e26-e2d1-441b-aac8-7957ba618b73",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should delete the specified user",
                "fullTitle": "Enterprise Synergy APIs should delete the specified user",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "api.delete('/synergy/v1/embed/consumers/removeuser/'+userId2).set(accountHeader).end((err, res) => {\n  res.should.have.property('status',200);\n   res.body.should.be.a('object');\n   res.body.should.have.property('output');\n   res.body.output.should.be.a('object');\n   res.body.output.should.have.property('message');\n   res.body.output.message.should.be.a('string');\n   expect(res.body.output.message).equals(\"User successfully removed\");\n  done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "fa1fe050-d53e-4d67-a9a3-3dac82de53c3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should add an user to an embed account, (RE-ADD USER )",
                "fullTitle": "Enterprise Synergy APIs should add an user to an embed account, (RE-ADD USER )",
                "timedOut": false,
                "duration": 90,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "api.put('/synergy/v1/embed/consumers/adduser').set(accountHeader).send({\"email\": \"chaitrali.naik+2@built.io\", \"account\":accountId}).end((err, res) => {    \n  res.should.have.property('status',200);\n  res.body.should.be.a('object');\n  res.body.should.have.property('output');\n  res.body.output.should.be.a('object');\n  res.body.output.should.have.property('user');\n  res.body.output.user.should.be.a('object');\n  done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "65bcf28f-6bbc-44d0-8023-a8bfae953498",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2e6f4c5e-1413-4eee-9dbc-33199ee6cb77",
              "1ab3d3ba-0d95-4b6a-9236-c4e0f876144c",
              "cbff1ab9-ad0e-47bd-9684-94874ccee4da",
              "83f95691-dc18-475d-b147-3d258cbdb23a",
              "9e568660-086f-42a3-8de6-7d8888353fc3",
              "709db34d-2dd5-4619-9deb-e46962ca7f3b",
              "459d1d01-74d8-4ddd-89bf-86f365f1c9c5",
              "642487f5-c555-416b-82e2-1f2eef7414eb",
              "1a83dcc5-492b-468b-9292-3cb615d98f7a",
              "cb1f367c-6190-47dd-8410-7e467413a5d8",
              "732e8455-cedd-4ff3-89f2-a3ceea16ecb7",
              "0fa9cb8b-8687-4141-b79e-10a8ce668822",
              "98bd8d15-9e0e-495b-8d9c-51e205d7aa56",
              "752c1e21-cf38-4a96-a534-297ec033fe3e",
              "14982752-f5e1-473a-8f40-0f5d4fd0e0ad",
              "b4da6125-2d04-42ff-96e9-5339d0c90da4",
              "b744cc09-7e87-4657-b678-b6b2df4a99ac",
              "9051cb0e-4ef3-499c-9f34-363a7bce9713",
              "9216908f-3299-4522-a010-32e293d85bc2",
              "46fe51d6-0b2c-4f54-bef9-8846fbb7e758",
              "bc30183f-3b9e-442b-930e-856f9782dc3d",
              "55d8cb7a-6553-4232-8b5d-eae2eaa7c62e",
              "f6392eb0-28e4-48ed-bf4c-fecbefbea127",
              "ba39d3cc-042d-48c4-8be1-d31ab41ab5f6",
              "591e4fdb-5fc2-4b37-8870-d69650e1b8a7",
              "1f1fb2ba-ebdb-4dab-818a-831658cab0dc",
              "91cfe50e-f18f-43f1-9aad-7325d158b1aa",
              "2745cbce-2644-4a1e-a351-1758c7cbbc12",
              "9f326efe-09e9-4d13-8a37-c307b6c28f6f",
              "3e66eb54-e1fe-45ef-a949-079d0b0792b3",
              "89e53f99-9284-4f9d-acdc-38d5e59fcf8c",
              "20089555-f268-4bad-a21f-ecfffbbfc23e",
              "26b94d0b-2957-485a-ac19-b5b961189509",
              "303d7a5b-072e-49f7-9b45-b87ff5d38ce1",
              "0ff7dd4f-65fd-4f29-92bc-8b91dcb8abd4",
              "f44722c9-5b4c-4c2b-9310-ddc1f47b9035",
              "beb82807-b27d-4a1a-b680-c59e85178930",
              "d9e6097a-2c16-4c43-8ac7-c0f506499056",
              "25da6deb-12c4-488b-a368-587daa0c43f4",
              "9e907ed5-2ac5-4248-9158-159fd6cb4884",
              "d09beaab-a305-4f3b-8429-02340665a4aa",
              "a2e2cc5b-cef7-4b8c-bfcd-63cb68936f03",
              "21dab223-93a5-4728-9fc4-fedcc901a2ac",
              "2f841898-57e3-41f0-8a45-0d7202adc0c3",
              "daa8e019-32c4-42ff-bedf-3bcca3f573ce",
              "528f1c80-1679-4dbe-9a60-ac3da2dcd08c",
              "3db5a623-e33f-467f-b17b-980561d89abd",
              "0a3e1b60-de1b-4f7a-ba51-3a53be53bb68",
              "46ce7fcc-63b5-4fa2-946c-b8755ed1c024",
              "f0ee115c-9d5a-41e2-9276-1fd4d7b7bf9f",
              "cb57aaa0-b78a-4b68-86c6-a625bca342cf",
              "b150156d-7cec-4006-86cc-baf4870aebfa",
              "06a10136-cd96-42f1-a6ff-35260ac9c273",
              "8901d714-b2cf-4d46-95f1-5b7abe70f2b9",
              "76351f19-213f-4234-82b4-244945f9d549",
              "d44d384d-e4a0-4c6e-a91e-9812449611b8",
              "92ae6edf-bc36-49f4-8ea9-b6758fc63d34",
              "2ecc6d75-7a10-433b-a640-a598cb2817c9",
              "7fcfb5bb-8c8b-4056-859d-316989b4e577",
              "91fc6d38-26a5-46dd-961a-aa218b501b8c",
              "81ae74cc-1cd7-44da-b32b-c44e692c565d",
              "a69cd804-20ac-4642-8aa6-862db6a969bf",
              "04af4ec2-16b2-41d4-aea1-dcaf414d40c7",
              "6068adaa-2e3b-4c8b-9876-ec6bc16e691a",
              "4cf57d01-efb3-4ed1-a239-bf31510a816d",
              "05e3f14a-ee44-4d17-b398-8f3066db4392",
              "036db766-f1dd-4af2-b43e-6abedd7cdd4d",
              "86adea1b-1aea-4a5b-8c2f-f8891c15d4df",
              "eef680c0-7b00-45e4-9a2f-26e67086b131",
              "d32eb85f-5ccd-4da3-a96d-878594aefe93",
              "239dff86-2467-4207-a773-14b3b1da00fe",
              "4bdf4f0f-8dce-4c79-8d04-93ef7281aa88",
              "74510f9e-fd6d-45a8-9f44-cf161bf70e23",
              "4ce1a953-c24a-4d4c-91d5-1dc0d578dad9",
              "b056aae4-eaac-4234-97b6-8649928dd889",
              "651de7b3-0b9a-441b-a3f6-dffd0272e8dd",
              "f1cedf2b-d20f-4b5c-9397-3c560053648a",
              "bef6003a-c7f6-45d0-b6f7-8f1bd64638f4",
              "63f64746-90f3-4a0a-9cee-9daf9a3b93f0",
              "e892e979-fb7e-43e4-8008-a2cc7adc1afb",
              "1a7d9224-9b27-4396-a2a5-9b3c0744a57c",
              "a9baa1b9-79bd-4b64-8c0b-1f88c643395f",
              "a2b62943-06de-4fee-96c7-ecb9e2bc18f7",
              "9fc257d4-f99b-45a8-ac63-3665c9efc1fa",
              "b45f85c1-d47b-4386-96b3-105b4cbb2a2a",
              "d0e0d2a7-63f0-440c-a152-f70af2b5c9a1",
              "fa2cdadc-428d-4482-a566-ef4f79483154",
              "3f6adc97-fea2-4222-ad6a-d4c5dbba7d5e",
              "9462d4b1-a0e3-4608-80b7-9eb24ee455f6",
              "5d04d23c-55ec-41f6-8c07-b36e2670a645",
              "8a585a01-af3a-4aae-b0e9-41aceeba9b99",
              "74abe061-e2d0-4f89-9521-6179ec9a7e72",
              "407dea36-a56d-4eb6-993b-5d0ea1f42c0c",
              "97788ad8-15d3-4467-9b33-8883950f24ab",
              "aa7aec08-2bae-481a-a487-2d4eb552e04b",
              "c6698d04-ac65-4075-976a-b28e7a0690e5",
              "98de5520-87d6-4d5a-9b8a-3f5749383a2c",
              "e6c87eab-8c44-46f3-80e1-c76c99edfd87",
              "d7a1a6a3-71cb-44a1-b6de-c856b52d489f",
              "d21c4848-f1e2-49bb-8efb-c298b4609939",
              "ecda903c-fd3b-4daf-b606-7c23af994bae",
              "37f8aee0-5cd6-4354-ba3e-7867e035bcd9",
              "3f5cdc51-7283-46d3-a871-2b42f5fae734",
              "9b335c73-b9e0-4e81-a440-bb0650fbaf58",
              "de00cd96-2c7b-4395-97ca-4f427bdb367d",
              "77a6c5c3-63b7-4c22-a274-7dcdb0e87901",
              "77c3620d-3ca8-4f20-a4d7-5ee2fd64065d",
              "b4df5c9d-6470-444b-93d3-b4ec47dba804",
              "44c481bd-58ae-49d1-89fc-e504cd778069",
              "10207c6a-bad1-4afb-9351-bc3b9f3fdae0",
              "b0e8a9aa-b4ab-4763-ba15-534a368c6c45",
              "9cc445ee-062f-4f4a-951b-3b1ceb216136",
              "2fb53237-2fe5-4328-86eb-485cd855b3c2",
              "8e44cfd7-d839-4f25-be75-9562b4adbb26",
              "7d27f3ef-b684-451a-85f9-73c440e719c0",
              "a46f201b-9941-4971-a597-a901620b9096",
              "fdfd6f90-bae3-4bf9-90d8-48dffef7c170",
              "bca4e518-3135-4c14-b2e8-f4690bb45f82",
              "f03aacce-b0a3-4eed-bc5b-2b74cc721d0a",
              "70f46700-50ec-4ea5-9451-9cc4c71acb3f",
              "21100e26-e2d1-441b-aac8-7957ba618b73",
              "fa1fe050-d53e-4d67-a9a3-3dac82de53c3",
              "65bcf28f-6bbc-44d0-8023-a8bfae953498"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2959,
            "root": false,
            "rootEmpty": false,
            "_timeout": 1000000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "402804cc-f4b1-4352-97e2-6d38aed97a43",
        "title": "Enterprise",
        "fullFile": "C:\\work\\api\\controllers\\test\\z_synergy\\wrapper.js",
        "file": "\\controllers\\test\\z_synergy\\wrapper.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "de21e0ec-80d0-4174-a768-b2d876139fda",
            "title": "Synergy Wrapper APIs",
            "fullFile": "C:\\work\\api\\controllers\\test\\z_synergy\\wrapper.js",
            "file": "\\controllers\\test\\z_synergy\\wrapper.js",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "Enterprise Synergy Wrapper APIs \"before all\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\ncommonMock.setSignUpMocks(httpmock, 'enterprise');\n // MOCK TRIGGER SERVER CALLS------------\n const trigger = nmock('http://localhost:9090').post('/triggers/create').reply(200, synergyWrapperData.createDeploymentTriggerData);\n //---------------------------------------\n\n           done();",
                "err": {},
                "isRoot": false,
                "uuid": "e32ca875-3345-448d-adbc-937b4c2edb25",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "should successfully get a jwt token",
                "fullTitle": "Enterprise Synergy Wrapper APIs should successfully get a jwt token",
                "timedOut": false,
                "duration": 1650,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let payload = synergyWrapperData.jwt_payload;\n payload.token = global.token;\n chai.request('https://synergy-test-aid.herokuapp.com').post('/jwt').auth('flow','2p)F&kRn!L').send(payload).end((err, res) => {  \n  res.should.have.property('status',200);\n  res.body.should.be.a('object');\n  res.body.should.have.property('token');\n  //store the token for later use\n  jwt_token = res.body.token;\n  done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "770281b9-1ff0-4116-a565-b91a06962404",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should do a successful handshake",
                "fullTitle": "Enterprise Synergy Wrapper APIs should do a successful handshake",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\napi.post('/synergy/v1/embed/consumer/handshake').set(synergyWrapperData.header1).send(synergyWrapperData.handshakeBody).end((err, res) => {  \nres.should.have.property('status',200);\nres.body.should.have.property('output');\nres.body.output.should.be.a('object');\nres.body.output.should.have.property('message');\nres.body.output.should.have.property('padding');\nres.body.output.should.have.property('auth_domain');\nclientId = res.body.output.padding;\ndone();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "51bae705-c650-49df-bb19-fbea2b6925d4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should successfully login and get auth token",
                "fullTitle": "Enterprise Synergy Wrapper APIs should successfully login and get auth token",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "header.client = clientId;\n       api.post('/synergy/v1/embed/consumer/login').set(header).send({\"payload\":jwt_token}).end((err, res) => {\n        res.should.have.property('status',200);\n        res.body.should.be.a('object');\n        res.body.should.have.property('output');\n        res.body.output.should.be.a('object');\n        res.body.output.should.have.property('authtoken');\n        //store the token for later use\n        authtoken = res.body.output.authtoken;\n        done();\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "4f82c1a1-8e2d-4755-8c0a-c328f287ff13",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should successfully create a deployment",
                "fullTitle": "Enterprise Synergy Wrapper APIs should successfully create a deployment",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "header.client = clientId;\nheader.corporation = corporation;\nheader.embedtoken = authtoken;\n      api.post('/synergy/v1/embed/consumer/deployments').set(header).send(synergyWrapperData.deployments).end((err, res) => {\nres.should.have.property('status',200);\nres.body.should.have.property('output');\n res.body.output.should.be.a('object'); \n res.body.output.should.have.property('deployment');\n res.body.output.deployment.should.be.a('object');   \n res.body.output.deployment.should.have.property('uid');\n res.body.output.deployment.should.have.property('updated_at');\n res.body.output.deployment.should.have.property('created_at');\n res.body.output.deployment.should.have.property('name');\n res.body.output.deployment.should.have.property('solution');\n res.body.output.deployment.should.have.property('synergy_organization');\n res.body.output.deployment.should.have.property('org_uid');\n res.body.output.deployment.should.have.property('context');\n res.body.output.deployment.should.have.property('deployment_instance');\n res.body.output.deployment.deployment_instance.should.be.a('object');\n res.body.output.deployment.deployment_instance.should.have.property('compact');\n res.body.output.deployment.deployment_instance.compact.should.be.a('array');\n res.body.output.deployment.should.have.property('solution_version');\n res.body.output.deployment.should.have.property('consumer');\n res.body.output.deployment.should.have.property('consumer_ref');\n res.body.output.deployment.should.have.property('trigger_icon');\n res.body.output.deployment.should.have.property('action_icons');\n res.body.output.deployment.should.have.property('flows');\n res.body.output.deployment.should.have.property('active');\n//store a deployment uid\ndeployment_uid = res.body.output.deployment.uid;\n       done();\n       });",
                "err": {},
                "isRoot": false,
                "uuid": "36846b53-09b0-45f8-847b-17543365d3e9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should get Bot Handshake lookup object",
                "fullTitle": "Enterprise Synergy Wrapper APIs should get Bot Handshake lookup object",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "header.client = clientId;\n           api.post('/synergy/v1/embed/bots/link').set(header).send({\"payload\" :{\"link\": \"1122@my.com\"}}).end((err, res) => {\n res.should.have.property('status',200);\n res.body.should.have.property('output');\n res.body.output.should.be.a('object');\n res.body.output.should.have.property('lookupinstance');    \n res.body.output.lookupinstance.should.be.a('object');\n res.body.output.lookupinstance.should.have.property('link_id');\n           done();\n           });",
                "err": {},
                "isRoot": false,
                "uuid": "e550707c-3f72-43dc-ab60-be5b9c09ad76",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail to get Bot Handshake lookup object, (INVALID ID)",
                "fullTitle": "Enterprise Synergy Wrapper APIs should fail to get Bot Handshake lookup object, (INVALID ID)",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "header.client = clientId;\n       api.post('/synergy/v1/embed/bots/link').set(header).send({\"payload\":{\"link\":\"11@my.com\"}}).end((err, res) => {\n res.should.have.property('status',200);\n res.body.should.have.property('output');\n res.body.output.should.be.a('object');\n res.body.output.should.have.property('lookupinstance');    \n expect(Object.keys(res.body.output.lookupinstance).length).equals(0); \n       done();\n       });",
                "err": {},
                "isRoot": false,
                "uuid": "ddc1fb63-c928-48d7-8048-6fcef1ab9928",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail to do a successful handshake, (INVALID ID)",
                "fullTitle": "Enterprise Synergy Wrapper APIs should fail to do a successful handshake, (INVALID ID)",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nheader.corporation = '123';\napi.post('/synergy/v1/embed/consumer/handshake').set(header).send(synergyWrapperData.handshakeBody).end((err, res) => {\nres.should.have.property('status',400);\nres.body.should.be.a('object');\nres.body.should.have.property('error');\nres.body.error.should.be.a('object');\nres.body.error.should.have.property('message');\nexpect(res.body.error.message).equals('INVALID_IDENTIFIER');\ndone();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "a8050bd3-547f-4249-bf46-b642dbab620c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail to login and get auth token, (INVALID ID)",
                "fullTitle": "Enterprise Synergy Wrapper APIs should fail to login and get auth token, (INVALID ID)",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "header.client = '123';\n       api.post('/synergy/v1/embed/consumer/login').set(header).send({\"payload\":jwt_token}).end((err, res) => {\n        res.should.have.property('status',400);\n        res.body.should.be.a('object');\n        res.body.should.have.property('error');\n        res.body.error.should.be.a('object');\n        res.body.error.should.have.property('message');\n        expect(res.body.error.message).equals('INVALID_CLIENT');\n        done();\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "74d1e6ec-4bf4-4db8-ada8-396d8953d1d0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail to login and get auth token, (NO ID)",
                "fullTitle": "Enterprise Synergy Wrapper APIs should fail to login and get auth token, (NO ID)",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "header.client = '';\n        api.post('/synergy/v1/embed/consumer/login').set(header).send({\"payload\":jwt_token}).end((err, res) => {\n         res.should.have.property('status',400);\n         res.body.should.be.a('object');\n         res.body.should.have.property('error');\n         res.body.error.should.be.a('object');\n         res.body.error.should.have.property('message');\n         expect(res.body.error.message).equals('IDENTIFIER_ABSENT');\n         done();\n         });",
                "err": {},
                "isRoot": false,
                "uuid": "cf192ad6-a210-47e5-b82b-157f7c39e883",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail to create deployments, (INVALID AUTHTOKEN)",
                "fullTitle": "Enterprise Synergy Wrapper APIs should fail to create deployments, (INVALID AUTHTOKEN)",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "header.client = clientId;\nheader.corporation = corporation;\nheader.embedtoken = '123';\n        api.post('/synergy/v1/embed/consumer/deployments').set(header).send(synergyWrapperData.deployments).end((err, res) => {\n         res.should.have.property('status',400);\n         res.body.should.be.a('object');\n         res.body.should.have.property('error');\n         res.body.error.should.be.a('object');\n         res.body.error.should.have.property('message');\n         expect(res.body.error.message).equals('INVALID_AUTHTOKEN');\n         done();\n         });",
                "err": {},
                "isRoot": false,
                "uuid": "29dfb589-5b2a-4825-93c4-af5edb2994e7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail to create deployments, (INVALID CLIENT)",
                "fullTitle": "Enterprise Synergy Wrapper APIs should fail to create deployments, (INVALID CLIENT)",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "header.client = '123';\nheader.corporation = corporation;\nheader.embedtoken = authtoken;\n        api.post('/synergy/v1/embed/consumer/deployments').set(header).send(synergyWrapperData.deployments).end((err, res) => {\n         res.should.have.property('status',400);\n         res.body.should.be.a('object');\n         res.body.should.have.property('error');\n         res.body.error.should.be.a('object');\n         res.body.error.should.have.property('message');\n         expect(res.body.error.message).equals('INVALID_CLIENT');\n         done();\n         });",
                "err": {},
                "isRoot": false,
                "uuid": "1abde4e1-1b3b-46a8-8d4b-90bfed3122ac",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail to create deployments, (NO CLIENT)",
                "fullTitle": "Enterprise Synergy Wrapper APIs should fail to create deployments, (NO CLIENT)",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "header.client = '';\nheader.corporation = corporation;\nheader.embedtoken = authtoken;\n        api.post('/synergy/v1/embed/consumer/deployments').set(header).send(synergyWrapperData.deployments).end((err, res) => {\n         res.should.have.property('status',400);\n         res.body.should.be.a('object');\n         res.body.should.have.property('error');\n         res.body.error.should.be.a('object');\n         res.body.error.should.have.property('message');\n         expect(res.body.error.message).equals('IDENTIFIER_ABSENT');\n         done();\n         });",
                "err": {},
                "isRoot": false,
                "uuid": "e7e51c5e-837b-4f0f-a9d9-0803b2f326b0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "it should get a list of the connectors",
                "fullTitle": "Enterprise Synergy Wrapper APIs it should get a list of the connectors",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nheader.client = clientId;\nheader.embedtoken = authtoken;\nheader.corporation = corporation;\napi.get('/synergy/v1/embed/consumer/connectors').set(header).end((err, res) => {        \n   res.should.have.property('status',200);\n   res.body.should.have.property('output');\n   res.body.output.should.be.a('array');           \n   res.body.output.forEach(element => {\n     element.should.have.property('title');\n     element.should.have.property('icon');\n     element.should.have.property('solutions_count');\n     element.should.have.property('name');\n   });\ndone();\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "df8c256a-eadb-4727-b9ea-7f0662265a9a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "it should get organization user",
                "fullTitle": "Enterprise Synergy Wrapper APIs it should get organization user",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nheader.client = clientId;\nheader.embedtoken = authtoken;\nheader.corporation = corporation;\nheader.master_token = global.master_token;\napi.get('/synergy/v1/embed/consumer/organizationuser/fl0455813d1fa32a9999e23b').set(header).end((err, res) => {        \n   res.should.have.property('status',200);\n   res.body.should.have.property('output');\n   res.body.output.should.be.a('object');\ndone();\n     });",
                "err": {},
                "isRoot": false,
                "uuid": "6b986f0f-c293-4092-abc4-69fec3b4c062",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "it should get a list of bot solutions",
                "fullTitle": "Enterprise Synergy Wrapper APIs it should get a list of bot solutions",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nheader.client = clientId;\nheader.embedtoken = authtoken;\nheader.corporation = corporation;\napi.get('/synergy/v1/embed/bots/' + synergyWrapperData.bot.id +'/solutions').set(header).end((err, res) => {\n   res.should.have.property('status',200);\n   res.body.should.have.property('output');\n   res.body.output.should.be.a('object');\n   res.body.output.should.have.property('limit');\n   res.body.output.should.have.property('skip');\n   res.body.output.should.have.property('count');\n   res.body.output.should.have.property('solutions');\n   res.body.output.solutions.should.be.a('array');\n   if(res.body.output.limit >= res.body.output.count) {\n     expect(parseInt(res.body.output.count,10)).equals(res.body.output.solutions.length);\n   }else {\n     expect(parseInt(res.body.output.limit,10)).equals(res.body.output.solutions.length);\n   }\ndone();\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "973f00e0-8871-4178-89b0-e6a53e3fe76f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "it should get a bot object",
                "fullTitle": "Enterprise Synergy Wrapper APIs it should get a bot object",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "header.client = clientId;\nheader.embedtoken = authtoken;\nheader.corporation = corporation;\napi.get('/synergy/v1/embed/bots/' + synergyWrapperData.bot.id).set(header).end((err, res) => {\n   res.should.have.property('status',200);\n   res.body.should.have.property('output');\n   res.body.output.should.be.a('object');\n   res.body.output.should.have.property('bot');\n   res.body.output.bot.should.be.a('object');\n   res.body.output.bot.should.have.property('token');\ndone();\n       });",
                "err": {},
                "isRoot": false,
                "uuid": "4ebfb463-0365-45e5-8e73-f30dfe6de286",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "it should get a list of bot solutions (WITH QUERY)",
                "fullTitle": "Enterprise Synergy Wrapper APIs it should get a list of bot solutions (WITH QUERY)",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nheader.client = clientId;\nheader.embedtoken = authtoken;\nheader.corporation = corporation;\napi.get('/synergy/v1/embed/bots/' + synergyWrapperData.bot.id + '/solutions?limit=1&skip=0&orderBy=created_at&sortBy=asc').set(header).end((err, res) => {\n   res.should.have.property('status',200);\n   res.body.should.have.property('output');\n   res.body.output.should.be.a('object');\n   res.body.output.should.have.property('limit');\n   res.body.output.should.have.property('skip');\n   res.body.output.should.have.property('count');\n   res.body.output.should.have.property('solutions');\n   res.body.output.solutions.should.be.a('array');\n   if(res.body.output.limit >= res.body.output.count) {\n     expect(parseInt(res.body.output.count,10)).equals(res.body.output.solutions.length);\n   }else {\n     expect(parseInt(res.body.output.limit,10)).equals(res.body.output.solutions.length);\n   }\ndone();\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "5577b370-af7a-483e-9860-d2f3ab645029",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "it should get a list of bot solutions(WITH NAME QUERY)",
                "fullTitle": "Enterprise Synergy Wrapper APIs it should get a list of bot solutions(WITH NAME QUERY)",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nheader.client = clientId;\nheader.embedtoken = authtoken;\nheader.corporation = corporation;\napi.get('/synergy/v1/embed/bots/' + synergyWrapperData.bot.id +'/solutions?name=Gmail').set(header).end((err, res) => {\n   res.should.have.property('status',200);\n   res.body.should.have.property('output');\n   res.body.output.should.be.a('object');\n   res.body.output.should.have.property('limit');\n   res.body.output.should.have.property('skip');\n   res.body.output.should.have.property('count');\n   res.body.output.should.have.property('solutions');\n   res.body.output.solutions.should.be.a('array');\n   if(res.body.output.limit >= res.body.output.count) {\n     expect(parseInt(res.body.output.count,10)).equals(res.body.output.solutions.length);\n   }else {\n     expect(parseInt(res.body.output.limit,10)).equals(res.body.output.solutions.length);\n   }\ndone();\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "a5e04816-6496-4ef9-b983-8d5a6ab178fb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "it should get connector cisco spark",
                "fullTitle": "Enterprise Synergy Wrapper APIs it should get connector cisco spark",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nheader.client = clientId;\nheader.embedtoken = authtoken;\nheader.corporation = corporation;\napi.get('/synergy/v1/embed/consumer/templates/connectors/ciscospark').set(header).end((err, res) => {        \n   res.should.have.property('status',200);\n   res.body.should.have.property('output');\n   res.body.output.should.be.a('array');\n    \n    res.body.output.forEach(element => {\n     element.should.have.property('updated_at');\n     element.should.have.property('created_at');\n     element.should.have.property('uid');\n     element.should.have.property('trigger_icon');\n     element.should.have.property('environment');\n     element.should.have.property('previous_version');\n     element.should.have.property('next_version');\n     element.should.have.property('origin');\n     element.should.have.property('name');\n     element.should.have.property('org_uid');\n     element.should.have.property('synergy_organization');\n     element.should.have.property('context');\n     element.should.have.property('published_on');\n     element.should.have.property('action_icons');\n     element.should.have.property('templates');\n     element.should.have.property('published');\n     element.should.have.property('deleted_at');\n     element.should.have.property('tags');\n     element.should.have.property('is_head');\n     element.should.have.property('version');\n     element.should.have.property('download');\n   });\ndone();\n       });",
                "err": {},
                "isRoot": false,
                "uuid": "a18d685f-3f3c-4b64-b848-4b85ed2792b3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "it should retrieve wonderlist info",
                "fullTitle": "Enterprise Synergy Wrapper APIs it should retrieve wonderlist info",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nheader.client = clientId;\nheader.embedtoken = authtoken;\nheader.corporation = corporation;\napi.get('/synergy/v1/embed/consumer/userauths/wunderlist').set(header).end((err, res) => {        \n   res.should.have.property('status',200);\n   res.body.should.have.property('output');\n   res.body.output.should.be.a('array');\n   \n   res.body.output.forEach(element => {\n     element.should.have.property('uid');\n     element.should.have.property('name');\n     element.should.have.property('type');\n     element.should.have.property('icon');\n     element.should.have.property('created_at');\n     element.should.have.property('description');\n   });\ndone();\n       });",
                "err": {},
                "isRoot": false,
                "uuid": "6add9385-0e56-42b9-b05a-aa744394c937",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "it should retrieve respective solution",
                "fullTitle": "Enterprise Synergy Wrapper APIs it should retrieve respective solution",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nheader.client = clientId;\nheader.embedtoken = authtoken;\nheader.corporation = corporation;\napi.get('/synergy/v1/embed/consumer/solutions/'+synergyWrapperData.solution.id).set(header).end((err, res) => {        \n   res.should.have.property('status',200);\n   res.body.should.have.property('output');\n   res.body.output.should.be.a('object');\n   res.body.output.should.have.property('published');\n   res.body.output.should.have.property('action_icons');\n   res.body.output.should.have.property('trigger_icon');\n   res.body.output.should.have.property('name');\n   res.body.output.should.have.property('context');\n   res.body.output.should.have.property('published_on');\n   res.body.output.should.have.property('created_at');\n   res.body.output.should.have.property('updated_at');\n   res.body.output.should.have.property('uid');\n   res.body.output.should.have.property('environment');\n   res.body.output.environment.should.be.a('object');\n   res.body.output.environment.should.have.property('project_params');\n   res.body.output.environment.project_params.should.be.a('array');\n   \ndone();\n       });",
                "err": {},
                "isRoot": false,
                "uuid": "61e324cc-ad8d-4e7f-8e13-23c969485002",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should get a list of deployments",
                "fullTitle": "Enterprise Synergy Wrapper APIs should get a list of deployments",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "header.client = clientId;\nheader.corporation = corporation;\nheader.embedtoken = authtoken;\n        api.get('/synergy/v1/embed/consumer/deployments').set(header).end((err, res) => {\n res.should.have.property('status',200);\n res.body.should.have.property('output');\n res.body.output.should.be.a('array');\n res.body.output.forEach(element => { \n    element.should.have.property('uid');\n    element.should.have.property('updated_at');\n    element.should.have.property('created_at');\n    element.should.have.property('name');\n    element.should.have.property('solution');\n    element.should.have.property('trigger_icon');\n    element.should.have.property('action_icons');\n    element.should.have.property('active');\n    \n });\n         done();\n         });",
                "err": {},
                "isRoot": false,
                "uuid": "735b26d3-9a76-49c7-bd0f-46aa02dee87d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should get a list of deployments, (WITH SEARCH QUERY)",
                "fullTitle": "Enterprise Synergy Wrapper APIs should get a list of deployments, (WITH SEARCH QUERY)",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "header.client = clientId;\nheader.corporation = corporation;\nheader.embedtoken = authtoken;\n        api.get('/synergy/v1/embed/consumer/deployments?limit=1&skip=0').set(header).end((err, res) => {\nres.should.have.property('status',200);\n res.body.should.have.property('output');\n res.body.output.should.be.a('object');\n res.body.output.should.have.property('count');\n res.body.output.should.have.property('flows');\n res.body.output.flows.should.be.a('array');\n         done();\n         });",
                "err": {},
                "isRoot": false,
                "uuid": "eb758e76-61e7-4d9a-94f5-5f4cdc06f8d3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should get deployment details",
                "fullTitle": "Enterprise Synergy Wrapper APIs should get deployment details",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "header.client = clientId;\nheader.corporation = corporation;\nheader.embedtoken = authtoken;\n      api.get('/synergy/v1/embed/consumer/deployments/'+deployment_uid).set(header).end((err, res) => {\n res.should.have.property('status',200);\n res.body.should.have.property('output');\n res.body.output.should.be.a('object');       \n res.body.output.should.have.property('uid');\n res.body.output.should.have.property('updated_at');\n res.body.output.should.have.property('created_at');\n res.body.output.should.have.property('name');\n res.body.output.should.have.property('solution');\n res.body.output.should.have.property('synergy_organization');\n res.body.output.should.have.property('org_uid');\n res.body.output.should.have.property('context');\n res.body.output.should.have.property('deployment_instance');\n res.body.output.deployment_instance.should.be.a('object');\n res.body.output.deployment_instance.should.have.property('compact');\n res.body.output.deployment_instance.compact.should.be.a('array');\n res.body.output.should.have.property('solution_version');\n res.body.output.should.have.property('consumer');\n res.body.output.should.have.property('consumer_ref');\n res.body.output.should.have.property('trigger_icon');\n res.body.output.should.have.property('action_icons');\n res.body.output.should.have.property('flows');\n res.body.output.should.have.property('active');\n       done();\n       });",
                "err": {},
                "isRoot": false,
                "uuid": "4e028596-614e-4fbb-9aff-a552dda7e56d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should get CSS",
                "fullTitle": "Enterprise Synergy Wrapper APIs should get CSS",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "header.client = clientId;\n       api.get('/synergy/v1/embed/css').set(header).end((err, res) => {\n res.should.have.property('status',200);\n res.body.should.have.property('output');\n res.body.output.should.be.a('object');\n res.body.output.should.have.property('css');    \n       done();\n       });",
                "err": {},
                "isRoot": false,
                "uuid": "023a3fd4-9fcb-4e3f-bb94-2375847f02e8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "it should fail to get a bot object, (INVALID ID)",
                "fullTitle": "Enterprise Synergy Wrapper APIs it should fail to get a bot object, (INVALID ID)",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "header.client = clientId;\nheader.embedtoken = authtoken;\nheader.corporation = corporation;\napi.get('/synergy/v1/embed/bots/hwjqdjqh26321876').set(header).end((err, res) => {\n  res.should.have.property('status',400);\n  res.body.should.have.property('error');\n  res.body.error.should.be.a('object');\n  res.body.error.should.have.property('message');\n  expect(res.body.error.message).equals('INVALID_ID');\ndone();\n       });",
                "err": {},
                "isRoot": false,
                "uuid": "0b6fae4c-22a8-4d5f-8546-06ec37314d58",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "it should fail to get organization user, (INVALID_TOKEN)",
                "fullTitle": "Enterprise Synergy Wrapper APIs it should fail to get organization user, (INVALID_TOKEN)",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nheader.client = clientId;\nheader.embedtoken = authtoken;\nheader.corporation = corporation;\nheader.master_token = corporation;\napi.get('/synergy/v1/embed/consumer/organizationuser/fl0455813d1fa32a9999e23b').set(header).end((err, res) => {        \n   res.should.have.property('status',400);\n   res.body.should.have.property('error');\n   res.body.error.should.be.a('object');\n   res.body.error.should.have.property('message');\n   expect(res.body.error.message).equals('INVALID_MASTER_TOKEN');\ndone();\n     });",
                "err": {},
                "isRoot": false,
                "uuid": "525162cb-e8bf-49f4-aa04-0d8a8760b146",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "it should fail to get a list of the connectors, (INVALID ID)",
                "fullTitle": "Enterprise Synergy Wrapper APIs it should fail to get a list of the connectors, (INVALID ID)",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nheader.client = '123';\napi.get('/synergy/v1/embed/consumer/connectors').set(header).end((err, res) => {        \n   res.should.have.property('status',400);\n   res.body.should.have.property('error');\n   res.body.error.should.be.a('object');\n   res.body.error.should.have.property('message');\n   expect(res.body.error.message).equals('INVALID_CLIENT');\ndone();\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "8ed9bbdc-4f12-4297-94fa-90f4268e4219",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail to validate a user auth",
                "fullTitle": "Enterprise Synergy Wrapper APIs should fail to validate a user auth",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "header.client = clientId;\n     api.get('/synergy/v1/embed/consumer/auths/'+ synergyWrapperData.userAuthId + '/validate').set(header).end((err, res) => {\nres.should.have.property('status',400);       \ndone();\n     });",
                "err": {},
                "isRoot": false,
                "uuid": "5a402099-b895-49c1-a784-61dc60c3abf2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "it should fail to get a list of bot solutions, (INVALID BOT ID)",
                "fullTitle": "Enterprise Synergy Wrapper APIs it should fail to get a list of bot solutions, (INVALID BOT ID)",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nheader.client = clientId;\nheader.embedtoken = authtoken;\nheader.corporation = corporation;\napi.get('/synergy/v1/embed/bots/hsdsgdjhsdhjhb/solutions').set(header).end((err, res) => {\n   res.should.have.property('status',400);\n   res.body.should.have.property('error');\n   res.body.error.should.be.an('object');\n   res.body.error.should.have.property('message');\ndone();\n     });",
                "err": {},
                "isRoot": false,
                "uuid": "294f0a7b-d174-4941-9c8b-fb9e7fd2ab4d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "it should fail to get a list of the connectors, (NO ID)",
                "fullTitle": "Enterprise Synergy Wrapper APIs it should fail to get a list of the connectors, (NO ID)",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nheader.client = '';\napi.get('/synergy/v1/embed/consumer/connectors').set(header).end((err, res) => {        \n   res.should.have.property('status',400);\n   res.body.should.have.property('error');\n   res.body.error.should.be.a('object');\n   res.body.error.should.have.property('message');\n   expect(res.body.error.message).equals('IDENTIFIER_ABSENT');\ndone();\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "fb15b9f5-8ec0-491f-9f2f-7085bd51a41d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "it should fail to get connector CISCO SPARK, (INVALID ID)",
                "fullTitle": "Enterprise Synergy Wrapper APIs it should fail to get connector CISCO SPARK, (INVALID ID)",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nheader.client = '123';\napi.get('/synergy/v1/embed/consumer/templates/connectors/ciscospark').set(header).end((err, res) => {        \n   res.should.have.property('status',400);\n   res.body.should.have.property('error');\n   res.body.error.should.be.a('object');\n   res.body.error.should.have.property('message');\n   expect(res.body.error.message).equals('INVALID_CLIENT');\ndone();\n       });",
                "err": {},
                "isRoot": false,
                "uuid": "9d3f9e89-10c9-493a-8891-36d7cced5061",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "it should fail to retrieve wonderlist info, (INVALID TOKEN)",
                "fullTitle": "Enterprise Synergy Wrapper APIs it should fail to retrieve wonderlist info, (INVALID TOKEN)",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nheader.client = clientId;\nheader.embedtoken = '123';\napi.get('/synergy/v1/embed/consumer/userauths/wunderlist').set(header).end((err, res) => {        \n   res.should.have.property('status',400);\n   res.body.should.have.property('error');\n   res.body.error.should.be.a('object');\n   res.body.error.should.have.property('message');\n   expect(res.body.error.message).equals('INVALID_AUTHTOKEN');\ndone();\n       });",
                "err": {},
                "isRoot": false,
                "uuid": "49ead13a-5f62-4883-ae20-a04b9a833c09",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "it should fail to retrieve wonderlist info, (INVALID CLIENT)",
                "fullTitle": "Enterprise Synergy Wrapper APIs it should fail to retrieve wonderlist info, (INVALID CLIENT)",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nheader.client = '123';\nheader.embedtoken = authtoken;\napi.get('/synergy/v1/embed/consumer/userauths/wunderlist').set(header).end((err, res) => {        \n   res.should.have.property('status',400);\n   res.body.should.have.property('error');\n   res.body.error.should.be.a('object');\n   res.body.error.should.have.property('message');\n   expect(res.body.error.message).equals('INVALID_CLIENT');\ndone();\n       });",
                "err": {},
                "isRoot": false,
                "uuid": "418ed80a-26c0-46eb-bc3b-330724b4ef0c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "it should fail to retrieve wonderlist info, (NO CLIENT)",
                "fullTitle": "Enterprise Synergy Wrapper APIs it should fail to retrieve wonderlist info, (NO CLIENT)",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nheader.client = '';\nheader.embedtoken = authtoken;\napi.get('/synergy/v1/embed/consumer/userauths/wunderlist').set(header).end((err, res) => {        \n   res.should.have.property('status',400);\n   res.body.should.have.property('error');\n   res.body.error.should.be.a('object');\n   res.body.error.should.have.property('message');\n   expect(res.body.error.message).equals('IDENTIFIER_ABSENT');\ndone();\n       });",
                "err": {},
                "isRoot": false,
                "uuid": "b74f60dc-7abc-43c3-bb95-bfc5c721b64d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "it should fail to retrieve respective solution, (INVALID SOLUTION ID)",
                "fullTitle": "Enterprise Synergy Wrapper APIs it should fail to retrieve respective solution, (INVALID SOLUTION ID)",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nheader.client = clientId;\nheader.embedtoken = authtoken;\nheader.corporation = corporation;\napi.get('/synergy/v1/embed/consumer/solutions/123').set(header).end((err, res) => {        \n   res.should.have.property('status',400);\n   res.body.should.have.property('error');\n   res.body.error.should.be.a('object');\n   res.body.error.should.have.property('message');\n   expect(res.body.error.message).equals('INVALID_SOLUTION_ID');      \ndone();\n       });",
                "err": {},
                "isRoot": false,
                "uuid": "56de1ed9-86f3-43db-b12f-47e01cef9256",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "it should fail to retrieve respective solution, (INVALID AUTH TOKEN)",
                "fullTitle": "Enterprise Synergy Wrapper APIs it should fail to retrieve respective solution, (INVALID AUTH TOKEN)",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nheader.client = clientId;\nheader.embedtoken = '123';\napi.get('/synergy/v1/embed/consumer/solutions/'+synergyWrapperData.solution.id).set(header).end((err, res) => {        \n   res.should.have.property('status',400);\n   res.body.should.have.property('error');\n   res.body.error.should.be.a('object');\n   res.body.error.should.have.property('message');\n   expect(res.body.error.message).equals('INVALID_AUTHTOKEN');      \ndone();\n       });",
                "err": {},
                "isRoot": false,
                "uuid": "ba5a0921-6fa1-4f1e-bffb-f009a7ed9ce8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "it should fail to retrieve respective solution, (INVALID CLIENT)",
                "fullTitle": "Enterprise Synergy Wrapper APIs it should fail to retrieve respective solution, (INVALID CLIENT)",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nheader.client = '123';\nheader.embedtoken = authtoken;\napi.get('/synergy/v1/embed/consumer/solutions/'+synergyWrapperData.solution.id).set(header).end((err, res) => {        \n   res.should.have.property('status',400);\n   res.body.should.have.property('error');\n   res.body.error.should.be.a('object');\n   res.body.error.should.have.property('message');\n   expect(res.body.error.message).equals('INVALID_CLIENT');      \ndone();\n       });",
                "err": {},
                "isRoot": false,
                "uuid": "3813cbec-efc0-4074-be55-fa3bc0974bd5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "it should fail to retrieve respective solution, (NO CLIENT)",
                "fullTitle": "Enterprise Synergy Wrapper APIs it should fail to retrieve respective solution, (NO CLIENT)",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "this.timeout(apiTimeOut);\nheader.client = '';\nheader.embedtoken = authtoken;\napi.get('/synergy/v1/embed/consumer/solutions/'+synergyWrapperData.solution.id).set(header).end((err, res) => {        \n   res.should.have.property('status',400);\n   res.body.should.have.property('error');\n   res.body.error.should.be.a('object');\n   res.body.error.should.have.property('message');\n   expect(res.body.error.message).equals('IDENTIFIER_ABSENT');      \ndone();\n       });",
                "err": {},
                "isRoot": false,
                "uuid": "69ef2f1f-58af-4a8a-b493-5a642703fd7c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail to get a list of deployments, (INVALID AUTHTOKEN)",
                "fullTitle": "Enterprise Synergy Wrapper APIs should fail to get a list of deployments, (INVALID AUTHTOKEN)",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "header.client = clientId;\nheader.corporation = corporation;\nheader.embedtoken = '123';\n      api.get('/synergy/v1/embed/consumer/deployments').set(header).end((err, res) => {\n       res.should.have.property('status',400);\n       res.body.should.be.a('object');\n       res.body.should.have.property('error');\n       res.body.error.should.be.a('object');\n       res.body.error.should.have.property('message');\n       expect(res.body.error.message).equals('INVALID_AUTHTOKEN');\n       done();\n       });",
                "err": {},
                "isRoot": false,
                "uuid": "f49f446a-e91b-4854-8e86-439de283c0e3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail to get a list of deployments, (INVALID CLIENT)",
                "fullTitle": "Enterprise Synergy Wrapper APIs should fail to get a list of deployments, (INVALID CLIENT)",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "header.client = '123';\nheader.corporation = corporation;\nheader.embedtoken = authtoken;\n      api.get('/synergy/v1/embed/consumer/deployments').set(header).end((err, res) => {\n       res.should.have.property('status',400);\n       res.body.should.be.a('object');\n       res.body.should.have.property('error');\n       res.body.error.should.be.a('object');\n       res.body.error.should.have.property('message');\n       expect(res.body.error.message).equals('INVALID_CLIENT');\n       done();\n       });",
                "err": {},
                "isRoot": false,
                "uuid": "630c0c2e-adc8-4321-b547-77e62707fc8c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail to get a list of deployments, (NO CLIENT)",
                "fullTitle": "Enterprise Synergy Wrapper APIs should fail to get a list of deployments, (NO CLIENT)",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "header.client = '';\nheader.corporation = corporation;\nheader.embedtoken = authtoken;\n      api.get('/synergy/v1/embed/consumer/deployments').set(header).end((err, res) => {\n       res.should.have.property('status',400);\n       res.body.should.be.a('object');\n       res.body.should.have.property('error');\n       res.body.error.should.be.a('object');\n       res.body.error.should.have.property('message');\n       expect(res.body.error.message).equals('IDENTIFIER_ABSENT');\n       done();\n       });",
                "err": {},
                "isRoot": false,
                "uuid": "0dd01290-7957-4182-bfc6-372844bf54dc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail to get deployment details, (INVALID AUTHTOKEN)",
                "fullTitle": "Enterprise Synergy Wrapper APIs should fail to get deployment details, (INVALID AUTHTOKEN)",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "header.client = clientId;\nheader.corporation = corporation;\nheader.embedtoken = '123';\n      api.get('/synergy/v1/embed/consumer/deployments/'+deployment_uid).set(header).end((err, res) => {\n       res.should.have.property('status',400);\n       res.body.should.be.a('object');\n       res.body.should.have.property('error');\n       res.body.error.should.be.a('object');\n       res.body.error.should.have.property('message');\n       expect(res.body.error.message).equals('INVALID_AUTHTOKEN');\n       done();\n       });",
                "err": {},
                "isRoot": false,
                "uuid": "b85b56ea-58d0-425b-8502-3198514eea07",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail to get deployment details, (INVALID ID)",
                "fullTitle": "Enterprise Synergy Wrapper APIs should fail to get deployment details, (INVALID ID)",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "header.client = clientId;\nheader.corporation = corporation;\nheader.embedtoken = authtoken;\n      api.get('/synergy/v1/embed/consumer/deployments/123').set(header).end((err, res) => {\n       res.should.have.property('status',400);\n       res.body.should.be.a('object');\n       res.body.should.have.property('error');\n       res.body.error.should.be.a('object');\n       res.body.error.should.have.property('message');\n       expect(res.body.error.message).equals('INVALID_DEPLOYMENT_ID');\n       done();\n       });",
                "err": {},
                "isRoot": false,
                "uuid": "a39f5615-013a-4ab6-992b-98ae7c9e73ae",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail to get deployment details, (INVALID CLIENT)",
                "fullTitle": "Enterprise Synergy Wrapper APIs should fail to get deployment details, (INVALID CLIENT)",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "header.client = '123';\nheader.corporation = corporation;\nheader.embedtoken = authtoken;\n      api.get('/synergy/v1/embed/consumer/deployments/'+deployment_uid).set(header).end((err, res) => {\n       res.should.have.property('status',400);\n       res.body.should.be.a('object');\n       res.body.should.have.property('error');\n       res.body.error.should.be.a('object');\n       res.body.error.should.have.property('message');\n       expect(res.body.error.message).equals('INVALID_CLIENT');\n       done();\n       });",
                "err": {},
                "isRoot": false,
                "uuid": "dd809552-310a-4036-9a4e-67953e2d8cc1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail to get deployment details, (NO CLIENT)",
                "fullTitle": "Enterprise Synergy Wrapper APIs should fail to get deployment details, (NO CLIENT)",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "header.client = '';\nheader.corporation = corporation;\nheader.embedtoken = authtoken;\n      api.get('/synergy/v1/embed/consumer/deployments/'+deployment_uid).set(header).end((err, res) => {\n       res.should.have.property('status',400);\n       res.body.should.be.a('object');\n       res.body.should.have.property('error');\n       res.body.error.should.be.a('object');\n       res.body.error.should.have.property('message');\n       expect(res.body.error.message).equals('IDENTIFIER_ABSENT');\n       done();\n       });",
                "err": {},
                "isRoot": false,
                "uuid": "14984266-2c00-4eef-a172-e1788f465207",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail to get CSS, (INVALID CLIENT)",
                "fullTitle": "Enterprise Synergy Wrapper APIs should fail to get CSS, (INVALID CLIENT)",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "header.client = '123';\n       api.get('/synergy/v1/embed/css').set(header).end((err, res) => {\nres.should.have.property('status',400);\nres.body.should.be.a('object');\nres.body.should.have.property('error');\nres.body.error.should.be.a('object');\nres.body.error.should.have.property('message');\nexpect(res.body.error.message).equals('INVALID_CLIENT');    \n       done();\n       });",
                "err": {},
                "isRoot": false,
                "uuid": "6b20b60f-f0f8-47ef-8abe-9e38904b1e03",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail to get CSS, (NO CLIENT)",
                "fullTitle": "Enterprise Synergy Wrapper APIs should fail to get CSS, (NO CLIENT)",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "header.client = '';\n       api.get('/synergy/v1/embed/css').set(header).end((err, res) => {\nres.should.have.property('status',400);\nres.body.should.be.a('object');\nres.body.should.have.property('error');\nres.body.error.should.be.a('object');\nres.body.error.should.have.property('message');\nexpect(res.body.error.message).equals('IDENTIFIER_ABSENT');    \n       done();\n       });",
                "err": {},
                "isRoot": false,
                "uuid": "2d3b5f86-3918-4fff-9f7e-9700c8444e52",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should delete deployment",
                "fullTitle": "Enterprise Synergy Wrapper APIs should delete deployment",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "header.client = clientId;\nheader.corporation = corporation;\nheader.embedtoken = authtoken;\n    api.post('/synergy/v1/embed/consumer/deployments/'+deployment_uid).set(header).send({\"operation\":\"delete\"}).end((err, res) => {\nres.should.have.property('status',200);\nres.body.should.have.property('output');\n res.body.output.should.be.a('object'); \n res.body.output.should.have.property('deployment');\n res.body.output.deployment.should.be.a('object');   \n res.body.output.deployment.should.have.property('uid');\n res.body.output.deployment.should.have.property('updated_at');\n res.body.output.deployment.should.have.property('created_at');\n res.body.output.deployment.should.have.property('name');\n res.body.output.deployment.should.have.property('solution');\n res.body.output.deployment.should.have.property('synergy_organization');\n res.body.output.deployment.should.have.property('org_uid');\n res.body.output.deployment.should.have.property('context');\n res.body.output.deployment.should.have.property('deployment_instance');\n res.body.output.deployment.deployment_instance.should.be.a('object');\n res.body.output.deployment.deployment_instance.should.have.property('compact');\n res.body.output.deployment.deployment_instance.compact.should.be.a('array');\n res.body.output.deployment.should.have.property('solution_version');\n res.body.output.deployment.should.have.property('consumer');\n res.body.output.deployment.should.have.property('consumer_ref');\n res.body.output.deployment.should.have.property('trigger_icon');\n res.body.output.deployment.should.have.property('action_icons');\n res.body.output.deployment.should.have.property('flows');\n res.body.output.deployment.should.have.property('active');\n \n     done();\n     });",
                "err": {},
                "isRoot": false,
                "uuid": "3f126a8a-95d3-47cc-8ee0-2a35eb4b355e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail to make deployment active/inactive, (INVALID AUTHTOKEN)",
                "fullTitle": "Enterprise Synergy Wrapper APIs should fail to make deployment active/inactive, (INVALID AUTHTOKEN)",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "header.client = clientId;\nheader.corporation = corporation;\nheader.embedtoken = '123';\n          api.post('/synergy/v1/embed/consumer/deployments/'+deployment_uid+'/active').set(header).send({\"flag\":\"false\"}).end((err, res) => {\n           res.should.have.property('status',400);\n           res.body.should.be.a('object');\n           res.body.should.have.property('error');\n           res.body.error.should.be.a('object');\n           res.body.error.should.have.property('message');\n           expect(res.body.error.message).equals('INVALID_AUTHTOKEN');\n           done();\n           });",
                "err": {},
                "isRoot": false,
                "uuid": "5323d6df-0281-4945-b19d-172412762104",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail to get deployment details, (INVALID ID)",
                "fullTitle": "Enterprise Synergy Wrapper APIs should fail to get deployment details, (INVALID ID)",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "header.client = clientId;\nheader.corporation = corporation;\nheader.embedtoken = authtoken;\napi.post('/synergy/v1/embed/consumer/deployments/123/active').set(header).send({\"flag\":\"false\"}).end((err, res) => {\n           res.should.have.property('status',400);\n           res.body.should.be.a('object');\n           res.body.should.have.property('error');\n           res.body.error.should.be.a('object');\n           res.body.error.should.have.property('message');\n           expect(res.body.error.message).equals('INVALID_DEPLOYMENT_ID');\n           done();\n           });",
                "err": {},
                "isRoot": false,
                "uuid": "17cf3282-6802-4c13-8bda-826717d0d390",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail to get deployment details, (INVALID CLIENT)",
                "fullTitle": "Enterprise Synergy Wrapper APIs should fail to get deployment details, (INVALID CLIENT)",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "header.client = '123';\nheader.corporation = corporation;\nheader.embedtoken = authtoken;\napi.post('/synergy/v1/embed/consumer/deployments/'+deployment_uid+'/active').set(header).send({\"flag\":\"false\"}).end((err, res) => {\n           res.should.have.property('status',400);\n           res.body.should.be.a('object');\n           res.body.should.have.property('error');\n           res.body.error.should.be.a('object');\n           res.body.error.should.have.property('message');\n           expect(res.body.error.message).equals('INVALID_CLIENT');\n           done();\n           });",
                "err": {},
                "isRoot": false,
                "uuid": "25140e9f-634d-4adf-9ba5-5a928a6442ac",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail to get deployment details, (NO CLIENT)",
                "fullTitle": "Enterprise Synergy Wrapper APIs should fail to get deployment details, (NO CLIENT)",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "header.client = '';\nheader.corporation = corporation;\nheader.embedtoken = authtoken;\napi.post('/synergy/v1/embed/consumer/deployments/'+deployment_uid+'/active').set(header).send({\"flag\":\"false\"}).end((err, res) => {\n           res.should.have.property('status',400);\n           res.body.should.be.a('object');\n           res.body.should.have.property('error');\n           res.body.error.should.be.a('object');\n           res.body.error.should.have.property('message');\n           expect(res.body.error.message).equals('IDENTIFIER_ABSENT');\n           done();\n           });",
                "err": {},
                "isRoot": false,
                "uuid": "470350d3-1b99-49da-8dcf-73f9ba36923b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail to delete deployment, (INVALID AUTHTOKEN)",
                "fullTitle": "Enterprise Synergy Wrapper APIs should fail to delete deployment, (INVALID AUTHTOKEN)",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "header.client = clientId;\nheader.corporation = corporation;\nheader.embedtoken = '123';\n    api.post('/synergy/v1/embed/consumer/deployments/'+deployment_uid).set(header).send({\"operation\":\"delete\"}).end((err, res) => {\n     res.should.have.property('status',400);\n     res.body.should.be.a('object');\n     res.body.should.have.property('error');\n     res.body.error.should.be.a('object');\n     res.body.error.should.have.property('message');\n     expect(res.body.error.message).equals('INVALID_AUTHTOKEN');\n     done();\n     });",
                "err": {},
                "isRoot": false,
                "uuid": "a476fe1a-56d6-4512-a99c-3de350955282",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail to delete deployment, (INVALID ID)",
                "fullTitle": "Enterprise Synergy Wrapper APIs should fail to delete deployment, (INVALID ID)",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "header.client = clientId;\nheader.corporation = corporation;\nheader.embedtoken = authtoken;\napi.post('/synergy/v1/embed/consumer/deployments/123').set(header).send({\"operation\":\"delete\"}).end((err, res) => {\n     res.should.have.property('status',400);\n     res.body.should.be.a('object');\n     res.body.should.have.property('error');\n     res.body.error.should.be.a('object');\n     res.body.error.should.have.property('message');\n     expect(res.body.error.message).equals('INVALID_DEPLOYMENT_ID');\n     done();\n     });",
                "err": {},
                "isRoot": false,
                "uuid": "1eade8d1-fc64-4f5a-a958-a502765afd4d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail to delete deployment, (INVALID CLIENT)",
                "fullTitle": "Enterprise Synergy Wrapper APIs should fail to delete deployment, (INVALID CLIENT)",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "header.client = '123';\nheader.corporation = corporation;\nheader.embedtoken = authtoken;\napi.post('/synergy/v1/embed/consumer/deployments/'+deployment_uid).set(header).send({\"operation\":\"delete\"}).end((err, res) => {\n     res.should.have.property('status',400);\n     res.body.should.be.a('object');\n     res.body.should.have.property('error');\n     res.body.error.should.be.a('object');\n     res.body.error.should.have.property('message');\n     expect(res.body.error.message).equals('INVALID_CLIENT');\n     done();\n     });",
                "err": {},
                "isRoot": false,
                "uuid": "9b3831f0-3839-4f5a-82d4-8dce53672ca6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail to delete deployment, (NO CLIENT)",
                "fullTitle": "Enterprise Synergy Wrapper APIs should fail to delete deployment, (NO CLIENT)",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "header.client = '';\nheader.corporation = corporation;\nheader.embedtoken = authtoken;\napi.post('/synergy/v1/embed/consumer/deployments/'+deployment_uid).set(header).send({\"operation\":\"delete\"}).end((err, res) => {\n     res.should.have.property('status',400);\n     res.body.should.be.a('object');\n     res.body.should.have.property('error');\n     res.body.error.should.be.a('object');\n     res.body.error.should.have.property('message');\n     expect(res.body.error.message).equals('IDENTIFIER_ABSENT');\n     done();\n     });",
                "err": {},
                "isRoot": false,
                "uuid": "e9959bb0-4c50-49de-9855-52bc646a50f7",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "770281b9-1ff0-4116-a565-b91a06962404",
              "51bae705-c650-49df-bb19-fbea2b6925d4",
              "4f82c1a1-8e2d-4755-8c0a-c328f287ff13",
              "36846b53-09b0-45f8-847b-17543365d3e9",
              "e550707c-3f72-43dc-ab60-be5b9c09ad76",
              "ddc1fb63-c928-48d7-8048-6fcef1ab9928",
              "a8050bd3-547f-4249-bf46-b642dbab620c",
              "74d1e6ec-4bf4-4db8-ada8-396d8953d1d0",
              "cf192ad6-a210-47e5-b82b-157f7c39e883",
              "29dfb589-5b2a-4825-93c4-af5edb2994e7",
              "1abde4e1-1b3b-46a8-8d4b-90bfed3122ac",
              "e7e51c5e-837b-4f0f-a9d9-0803b2f326b0",
              "df8c256a-eadb-4727-b9ea-7f0662265a9a",
              "6b986f0f-c293-4092-abc4-69fec3b4c062",
              "973f00e0-8871-4178-89b0-e6a53e3fe76f",
              "4ebfb463-0365-45e5-8e73-f30dfe6de286",
              "5577b370-af7a-483e-9860-d2f3ab645029",
              "a5e04816-6496-4ef9-b983-8d5a6ab178fb",
              "a18d685f-3f3c-4b64-b848-4b85ed2792b3",
              "6add9385-0e56-42b9-b05a-aa744394c937",
              "61e324cc-ad8d-4e7f-8e13-23c969485002",
              "735b26d3-9a76-49c7-bd0f-46aa02dee87d",
              "eb758e76-61e7-4d9a-94f5-5f4cdc06f8d3",
              "4e028596-614e-4fbb-9aff-a552dda7e56d",
              "023a3fd4-9fcb-4e3f-bb94-2375847f02e8",
              "0b6fae4c-22a8-4d5f-8546-06ec37314d58",
              "525162cb-e8bf-49f4-aa04-0d8a8760b146",
              "8ed9bbdc-4f12-4297-94fa-90f4268e4219",
              "5a402099-b895-49c1-a784-61dc60c3abf2",
              "294f0a7b-d174-4941-9c8b-fb9e7fd2ab4d",
              "fb15b9f5-8ec0-491f-9f2f-7085bd51a41d",
              "9d3f9e89-10c9-493a-8891-36d7cced5061",
              "49ead13a-5f62-4883-ae20-a04b9a833c09",
              "418ed80a-26c0-46eb-bc3b-330724b4ef0c",
              "b74f60dc-7abc-43c3-bb95-bfc5c721b64d",
              "56de1ed9-86f3-43db-b12f-47e01cef9256",
              "ba5a0921-6fa1-4f1e-bffb-f009a7ed9ce8",
              "3813cbec-efc0-4074-be55-fa3bc0974bd5",
              "69ef2f1f-58af-4a8a-b493-5a642703fd7c",
              "f49f446a-e91b-4854-8e86-439de283c0e3",
              "630c0c2e-adc8-4321-b547-77e62707fc8c",
              "0dd01290-7957-4182-bfc6-372844bf54dc",
              "b85b56ea-58d0-425b-8502-3198514eea07",
              "a39f5615-013a-4ab6-992b-98ae7c9e73ae",
              "dd809552-310a-4036-9a4e-67953e2d8cc1",
              "14984266-2c00-4eef-a172-e1788f465207",
              "6b20b60f-f0f8-47ef-8abe-9e38904b1e03",
              "2d3b5f86-3918-4fff-9f7e-9700c8444e52",
              "3f126a8a-95d3-47cc-8ee0-2a35eb4b355e",
              "5323d6df-0281-4945-b19d-172412762104",
              "17cf3282-6802-4c13-8bda-826717d0d390",
              "25140e9f-634d-4adf-9ba5-5a928a6442ac",
              "470350d3-1b99-49da-8dcf-73f9ba36923b",
              "a476fe1a-56d6-4512-a99c-3de350955282",
              "1eade8d1-fc64-4f5a-a958-a502765afd4d",
              "9b3831f0-3839-4f5a-82d4-8dce53672ca6",
              "e9959bb0-4c50-49de-9855-52bc646a50f7"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1953,
            "root": false,
            "rootEmpty": false,
            "_timeout": 1000000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2018
}